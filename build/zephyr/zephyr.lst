
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
			msg->flags & I2C_MSG_READ ? 'R' : 'W', msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	20 17 01 20 3d 71 00 00 d1 39 02 00 6d 71 00 00      .. =q...9..mq..
  10:	6d 71 00 00 6d 71 00 00 6d 71 00 00 00 00 00 00     mq..mq..mq......
	...
  2c:	9d 6e 00 00 6d 71 00 00 00 00 00 00 49 6e 00 00     .n..mq......In..
  3c:	8b 27 02 00                                         .'..

00000040 <_irq_vector_table>:
  40:	fd 70 00 00 49 a1 01 00 fd 70 00 00 fd 70 00 00     .p..I....p...p..
  50:	fd 70 00 00 fd 70 00 00 fd 70 00 00 fd 70 00 00     .p...p...p...p..
  60:	fd 70 00 00 fd 70 00 00 fd 70 00 00 fd 70 00 00     .p...p...p...p..
  70:	fd 70 00 00 fd 70 00 00 fd 70 00 00 fd 70 00 00     .p...p...p...p..
  80:	fd 70 00 00 fd 70 00 00 fd 70 00 00 fd 70 00 00     .p...p...p...p..
  90:	fd 70 00 00 fd 70 00 00 fd 70 00 00 fd 70 00 00     .p...p...p...p..
  a0:	fd 70 00 00 fd 70 00 00 fd 70 00 00 fd 70 00 00     .p...p...p...p..
  b0:	fd 70 00 00 fd 70 00 00 fd 70 00 00 fd 70 00 00     .p...p...p...p..
  c0:	fd 70 00 00 fd 70 00 00 fd 70 00 00 fd 70 00 00     .p...p...p...p..
  d0:	fd 70 00 00 fd 70 00 00 fd 70 00 00 fd 70 00 00     .p...p...p...p..
  e0:	fd 70 00 00 fd 70 00 00 fd 70 00 00 fd 70 00 00     .p...p...p...p..
  f0:	fd 70 00 00 fd 70 00 00 fd 70 00 00 fd 70 00 00     .p...p...p...p..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x66>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x70>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xba>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xb6>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_BT_DEVICE_APPEARANCE+0x19>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_COMPANY_ID+0x63>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <__aeabi_dmul+0xb4>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <__aeabi_dmul+0x80>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__aeabi_dmul+0xde>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__aeabi_dmul+0x134>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_COMPANY_ID+0x49>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_COMPANY_ID+0x4d>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_COMPANY_ID+0x8d>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_COMPANY_ID+0x23>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_COMPANY_ID+0xa9>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__aeabi_dmul+0xde>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__aeabi_dmul+0xde>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__aeabi_dmul+0xde>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_COMPANY_ID+0x23>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     89a:	e712      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>

0000089c <__aeabi_d2iz>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d215      	bcs.n	8d2 <__aeabi_d2iz+0x36>
     8a6:	d511      	bpl.n	8cc <__aeabi_d2iz+0x30>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d912      	bls.n	8d8 <__aeabi_d2iz+0x3c>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8c2:	fa23 f002 	lsr.w	r0, r3, r2
     8c6:	bf18      	it	ne
     8c8:	4240      	negne	r0, r0
     8ca:	4770      	bx	lr
     8cc:	f04f 0000 	mov.w	r0, #0
     8d0:	4770      	bx	lr
     8d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8d6:	d105      	bne.n	8e4 <__aeabi_d2iz+0x48>
     8d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8dc:	bf08      	it	eq
     8de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8e2:	4770      	bx	lr
     8e4:	f04f 0000 	mov.w	r0, #0
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop

000008ec <__aeabi_d2f>:
     8ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     8f4:	bf24      	itt	cs
     8f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     8fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     8fe:	d90d      	bls.n	91c <__aeabi_d2f+0x30>
     900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     90c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     914:	bf08      	it	eq
     916:	f020 0001 	biceq.w	r0, r0, #1
     91a:	4770      	bx	lr
     91c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     920:	d121      	bne.n	966 <__aeabi_d2f+0x7a>
     922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     926:	bfbc      	itt	lt
     928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     92c:	4770      	bxlt	lr
     92e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     932:	ea4f 5252 	mov.w	r2, r2, lsr #21
     936:	f1c2 0218 	rsb	r2, r2, #24
     93a:	f1c2 0c20 	rsb	ip, r2, #32
     93e:	fa10 f30c 	lsls.w	r3, r0, ip
     942:	fa20 f002 	lsr.w	r0, r0, r2
     946:	bf18      	it	ne
     948:	f040 0001 	orrne.w	r0, r0, #1
     94c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     954:	fa03 fc0c 	lsl.w	ip, r3, ip
     958:	ea40 000c 	orr.w	r0, r0, ip
     95c:	fa23 f302 	lsr.w	r3, r3, r2
     960:	ea4f 0343 	mov.w	r3, r3, lsl #1
     964:	e7cc      	b.n	900 <__aeabi_d2f+0x14>
     966:	ea7f 5362 	mvns.w	r3, r2, asr #21
     96a:	d107      	bne.n	97c <__aeabi_d2f+0x90>
     96c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     970:	bf1e      	ittt	ne
     972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     97a:	4770      	bxne	lr
     97c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     988:	4770      	bx	lr
     98a:	bf00      	nop

0000098c <__aeabi_frsub>:
     98c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     990:	e002      	b.n	998 <__addsf3>
     992:	bf00      	nop

00000994 <__aeabi_fsub>:
     994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000998 <__addsf3>:
     998:	0042      	lsls	r2, r0, #1
     99a:	bf1f      	itttt	ne
     99c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     9a0:	ea92 0f03 	teqne	r2, r3
     9a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     9a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     9ac:	d06a      	beq.n	a84 <__addsf3+0xec>
     9ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
     9b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     9b6:	bfc1      	itttt	gt
     9b8:	18d2      	addgt	r2, r2, r3
     9ba:	4041      	eorgt	r1, r0
     9bc:	4048      	eorgt	r0, r1
     9be:	4041      	eorgt	r1, r0
     9c0:	bfb8      	it	lt
     9c2:	425b      	neglt	r3, r3
     9c4:	2b19      	cmp	r3, #25
     9c6:	bf88      	it	hi
     9c8:	4770      	bxhi	lr
     9ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     9ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     9e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     9e6:	bf18      	it	ne
     9e8:	4249      	negne	r1, r1
     9ea:	ea92 0f03 	teq	r2, r3
     9ee:	d03f      	beq.n	a70 <__addsf3+0xd8>
     9f0:	f1a2 0201 	sub.w	r2, r2, #1
     9f4:	fa41 fc03 	asr.w	ip, r1, r3
     9f8:	eb10 000c 	adds.w	r0, r0, ip
     9fc:	f1c3 0320 	rsb	r3, r3, #32
     a00:	fa01 f103 	lsl.w	r1, r1, r3
     a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a08:	d502      	bpl.n	a10 <__addsf3+0x78>
     a0a:	4249      	negs	r1, r1
     a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     a14:	d313      	bcc.n	a3e <__addsf3+0xa6>
     a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     a1a:	d306      	bcc.n	a2a <__addsf3+0x92>
     a1c:	0840      	lsrs	r0, r0, #1
     a1e:	ea4f 0131 	mov.w	r1, r1, rrx
     a22:	f102 0201 	add.w	r2, r2, #1
     a26:	2afe      	cmp	r2, #254	; 0xfe
     a28:	d251      	bcs.n	ace <__addsf3+0x136>
     a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     a32:	bf08      	it	eq
     a34:	f020 0001 	biceq.w	r0, r0, #1
     a38:	ea40 0003 	orr.w	r0, r0, r3
     a3c:	4770      	bx	lr
     a3e:	0049      	lsls	r1, r1, #1
     a40:	eb40 0000 	adc.w	r0, r0, r0
     a44:	3a01      	subs	r2, #1
     a46:	bf28      	it	cs
     a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     a4c:	d2ed      	bcs.n	a2a <__addsf3+0x92>
     a4e:	fab0 fc80 	clz	ip, r0
     a52:	f1ac 0c08 	sub.w	ip, ip, #8
     a56:	ebb2 020c 	subs.w	r2, r2, ip
     a5a:	fa00 f00c 	lsl.w	r0, r0, ip
     a5e:	bfaa      	itet	ge
     a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     a64:	4252      	neglt	r2, r2
     a66:	4318      	orrge	r0, r3
     a68:	bfbc      	itt	lt
     a6a:	40d0      	lsrlt	r0, r2
     a6c:	4318      	orrlt	r0, r3
     a6e:	4770      	bx	lr
     a70:	f092 0f00 	teq	r2, #0
     a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     a78:	bf06      	itte	eq
     a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     a7e:	3201      	addeq	r2, #1
     a80:	3b01      	subne	r3, #1
     a82:	e7b5      	b.n	9f0 <__addsf3+0x58>
     a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a8c:	bf18      	it	ne
     a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a92:	d021      	beq.n	ad8 <__addsf3+0x140>
     a94:	ea92 0f03 	teq	r2, r3
     a98:	d004      	beq.n	aa4 <__addsf3+0x10c>
     a9a:	f092 0f00 	teq	r2, #0
     a9e:	bf08      	it	eq
     aa0:	4608      	moveq	r0, r1
     aa2:	4770      	bx	lr
     aa4:	ea90 0f01 	teq	r0, r1
     aa8:	bf1c      	itt	ne
     aaa:	2000      	movne	r0, #0
     aac:	4770      	bxne	lr
     aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     ab2:	d104      	bne.n	abe <__addsf3+0x126>
     ab4:	0040      	lsls	r0, r0, #1
     ab6:	bf28      	it	cs
     ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     abc:	4770      	bx	lr
     abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     ac2:	bf3c      	itt	cc
     ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     ac8:	4770      	bxcc	lr
     aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ad6:	4770      	bx	lr
     ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
     adc:	bf16      	itet	ne
     ade:	4608      	movne	r0, r1
     ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     ae4:	4601      	movne	r1, r0
     ae6:	0242      	lsls	r2, r0, #9
     ae8:	bf06      	itte	eq
     aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     aee:	ea90 0f01 	teqeq	r0, r1
     af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     af6:	4770      	bx	lr

00000af8 <__aeabi_ui2f>:
     af8:	f04f 0300 	mov.w	r3, #0
     afc:	e004      	b.n	b08 <__aeabi_i2f+0x8>
     afe:	bf00      	nop

00000b00 <__aeabi_i2f>:
     b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     b04:	bf48      	it	mi
     b06:	4240      	negmi	r0, r0
     b08:	ea5f 0c00 	movs.w	ip, r0
     b0c:	bf08      	it	eq
     b0e:	4770      	bxeq	lr
     b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     b14:	4601      	mov	r1, r0
     b16:	f04f 0000 	mov.w	r0, #0
     b1a:	e01c      	b.n	b56 <__aeabi_l2f+0x2a>

00000b1c <__aeabi_ul2f>:
     b1c:	ea50 0201 	orrs.w	r2, r0, r1
     b20:	bf08      	it	eq
     b22:	4770      	bxeq	lr
     b24:	f04f 0300 	mov.w	r3, #0
     b28:	e00a      	b.n	b40 <__aeabi_l2f+0x14>
     b2a:	bf00      	nop

00000b2c <__aeabi_l2f>:
     b2c:	ea50 0201 	orrs.w	r2, r0, r1
     b30:	bf08      	it	eq
     b32:	4770      	bxeq	lr
     b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     b38:	d502      	bpl.n	b40 <__aeabi_l2f+0x14>
     b3a:	4240      	negs	r0, r0
     b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b40:	ea5f 0c01 	movs.w	ip, r1
     b44:	bf02      	ittt	eq
     b46:	4684      	moveq	ip, r0
     b48:	4601      	moveq	r1, r0
     b4a:	2000      	moveq	r0, #0
     b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b50:	bf08      	it	eq
     b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b5a:	fabc f28c 	clz	r2, ip
     b5e:	3a08      	subs	r2, #8
     b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     b64:	db10      	blt.n	b88 <__aeabi_l2f+0x5c>
     b66:	fa01 fc02 	lsl.w	ip, r1, r2
     b6a:	4463      	add	r3, ip
     b6c:	fa00 fc02 	lsl.w	ip, r0, r2
     b70:	f1c2 0220 	rsb	r2, r2, #32
     b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     b78:	fa20 f202 	lsr.w	r2, r0, r2
     b7c:	eb43 0002 	adc.w	r0, r3, r2
     b80:	bf08      	it	eq
     b82:	f020 0001 	biceq.w	r0, r0, #1
     b86:	4770      	bx	lr
     b88:	f102 0220 	add.w	r2, r2, #32
     b8c:	fa01 fc02 	lsl.w	ip, r1, r2
     b90:	f1c2 0220 	rsb	r2, r2, #32
     b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     b98:	fa21 f202 	lsr.w	r2, r1, r2
     b9c:	eb43 0002 	adc.w	r0, r3, r2
     ba0:	bf08      	it	eq
     ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     ba6:	4770      	bx	lr

00000ba8 <__aeabi_fmul>:
     ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     bb0:	bf1e      	ittt	ne
     bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     bb6:	ea92 0f0c 	teqne	r2, ip
     bba:	ea93 0f0c 	teqne	r3, ip
     bbe:	d06f      	beq.n	ca0 <__aeabi_fmul+0xf8>
     bc0:	441a      	add	r2, r3
     bc2:	ea80 0c01 	eor.w	ip, r0, r1
     bc6:	0240      	lsls	r0, r0, #9
     bc8:	bf18      	it	ne
     bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     bce:	d01e      	beq.n	c0e <__aeabi_fmul+0x66>
     bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     bdc:	fba0 3101 	umull	r3, r1, r0, r1
     be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     be8:	bf3e      	ittt	cc
     bea:	0049      	lslcc	r1, r1, #1
     bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     bf0:	005b      	lslcc	r3, r3, #1
     bf2:	ea40 0001 	orr.w	r0, r0, r1
     bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     bfa:	2afd      	cmp	r2, #253	; 0xfd
     bfc:	d81d      	bhi.n	c3a <__aeabi_fmul+0x92>
     bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     c06:	bf08      	it	eq
     c08:	f020 0001 	biceq.w	r0, r0, #1
     c0c:	4770      	bx	lr
     c0e:	f090 0f00 	teq	r0, #0
     c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     c16:	bf08      	it	eq
     c18:	0249      	lsleq	r1, r1, #9
     c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     c22:	3a7f      	subs	r2, #127	; 0x7f
     c24:	bfc2      	ittt	gt
     c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     c2e:	4770      	bxgt	lr
     c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c34:	f04f 0300 	mov.w	r3, #0
     c38:	3a01      	subs	r2, #1
     c3a:	dc5d      	bgt.n	cf8 <__aeabi_fmul+0x150>
     c3c:	f112 0f19 	cmn.w	r2, #25
     c40:	bfdc      	itt	le
     c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     c46:	4770      	bxle	lr
     c48:	f1c2 0200 	rsb	r2, r2, #0
     c4c:	0041      	lsls	r1, r0, #1
     c4e:	fa21 f102 	lsr.w	r1, r1, r2
     c52:	f1c2 0220 	rsb	r2, r2, #32
     c56:	fa00 fc02 	lsl.w	ip, r0, r2
     c5a:	ea5f 0031 	movs.w	r0, r1, rrx
     c5e:	f140 0000 	adc.w	r0, r0, #0
     c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     c66:	bf08      	it	eq
     c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c6c:	4770      	bx	lr
     c6e:	f092 0f00 	teq	r2, #0
     c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     c76:	bf02      	ittt	eq
     c78:	0040      	lsleq	r0, r0, #1
     c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     c7e:	3a01      	subeq	r2, #1
     c80:	d0f9      	beq.n	c76 <__aeabi_fmul+0xce>
     c82:	ea40 000c 	orr.w	r0, r0, ip
     c86:	f093 0f00 	teq	r3, #0
     c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     c8e:	bf02      	ittt	eq
     c90:	0049      	lsleq	r1, r1, #1
     c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     c96:	3b01      	subeq	r3, #1
     c98:	d0f9      	beq.n	c8e <__aeabi_fmul+0xe6>
     c9a:	ea41 010c 	orr.w	r1, r1, ip
     c9e:	e78f      	b.n	bc0 <__aeabi_fmul+0x18>
     ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     ca4:	ea92 0f0c 	teq	r2, ip
     ca8:	bf18      	it	ne
     caa:	ea93 0f0c 	teqne	r3, ip
     cae:	d00a      	beq.n	cc6 <__aeabi_fmul+0x11e>
     cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     cb4:	bf18      	it	ne
     cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     cba:	d1d8      	bne.n	c6e <__aeabi_fmul+0xc6>
     cbc:	ea80 0001 	eor.w	r0, r0, r1
     cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     cc4:	4770      	bx	lr
     cc6:	f090 0f00 	teq	r0, #0
     cca:	bf17      	itett	ne
     ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     cd0:	4608      	moveq	r0, r1
     cd2:	f091 0f00 	teqne	r1, #0
     cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     cda:	d014      	beq.n	d06 <__aeabi_fmul+0x15e>
     cdc:	ea92 0f0c 	teq	r2, ip
     ce0:	d101      	bne.n	ce6 <__aeabi_fmul+0x13e>
     ce2:	0242      	lsls	r2, r0, #9
     ce4:	d10f      	bne.n	d06 <__aeabi_fmul+0x15e>
     ce6:	ea93 0f0c 	teq	r3, ip
     cea:	d103      	bne.n	cf4 <__aeabi_fmul+0x14c>
     cec:	024b      	lsls	r3, r1, #9
     cee:	bf18      	it	ne
     cf0:	4608      	movne	r0, r1
     cf2:	d108      	bne.n	d06 <__aeabi_fmul+0x15e>
     cf4:	ea80 0001 	eor.w	r0, r0, r1
     cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d04:	4770      	bx	lr
     d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     d0e:	4770      	bx	lr

00000d10 <__aeabi_fdiv>:
     d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d18:	bf1e      	ittt	ne
     d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d1e:	ea92 0f0c 	teqne	r2, ip
     d22:	ea93 0f0c 	teqne	r3, ip
     d26:	d069      	beq.n	dfc <__aeabi_fdiv+0xec>
     d28:	eba2 0203 	sub.w	r2, r2, r3
     d2c:	ea80 0c01 	eor.w	ip, r0, r1
     d30:	0249      	lsls	r1, r1, #9
     d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
     d36:	d037      	beq.n	da8 <__aeabi_fdiv+0x98>
     d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d48:	428b      	cmp	r3, r1
     d4a:	bf38      	it	cc
     d4c:	005b      	lslcc	r3, r3, #1
     d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     d56:	428b      	cmp	r3, r1
     d58:	bf24      	itt	cs
     d5a:	1a5b      	subcs	r3, r3, r1
     d5c:	ea40 000c 	orrcs.w	r0, r0, ip
     d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     d64:	bf24      	itt	cs
     d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     d72:	bf24      	itt	cs
     d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     d80:	bf24      	itt	cs
     d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     d8a:	011b      	lsls	r3, r3, #4
     d8c:	bf18      	it	ne
     d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     d92:	d1e0      	bne.n	d56 <__aeabi_fdiv+0x46>
     d94:	2afd      	cmp	r2, #253	; 0xfd
     d96:	f63f af50 	bhi.w	c3a <__aeabi_fmul+0x92>
     d9a:	428b      	cmp	r3, r1
     d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     da0:	bf08      	it	eq
     da2:	f020 0001 	biceq.w	r0, r0, #1
     da6:	4770      	bx	lr
     da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     db0:	327f      	adds	r2, #127	; 0x7f
     db2:	bfc2      	ittt	gt
     db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     dbc:	4770      	bxgt	lr
     dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     dc2:	f04f 0300 	mov.w	r3, #0
     dc6:	3a01      	subs	r2, #1
     dc8:	e737      	b.n	c3a <__aeabi_fmul+0x92>
     dca:	f092 0f00 	teq	r2, #0
     dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     dd2:	bf02      	ittt	eq
     dd4:	0040      	lsleq	r0, r0, #1
     dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     dda:	3a01      	subeq	r2, #1
     ddc:	d0f9      	beq.n	dd2 <__aeabi_fdiv+0xc2>
     dde:	ea40 000c 	orr.w	r0, r0, ip
     de2:	f093 0f00 	teq	r3, #0
     de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     dea:	bf02      	ittt	eq
     dec:	0049      	lsleq	r1, r1, #1
     dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     df2:	3b01      	subeq	r3, #1
     df4:	d0f9      	beq.n	dea <__aeabi_fdiv+0xda>
     df6:	ea41 010c 	orr.w	r1, r1, ip
     dfa:	e795      	b.n	d28 <__aeabi_fdiv+0x18>
     dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e00:	ea92 0f0c 	teq	r2, ip
     e04:	d108      	bne.n	e18 <__aeabi_fdiv+0x108>
     e06:	0242      	lsls	r2, r0, #9
     e08:	f47f af7d 	bne.w	d06 <__aeabi_fmul+0x15e>
     e0c:	ea93 0f0c 	teq	r3, ip
     e10:	f47f af70 	bne.w	cf4 <__aeabi_fmul+0x14c>
     e14:	4608      	mov	r0, r1
     e16:	e776      	b.n	d06 <__aeabi_fmul+0x15e>
     e18:	ea93 0f0c 	teq	r3, ip
     e1c:	d104      	bne.n	e28 <__aeabi_fdiv+0x118>
     e1e:	024b      	lsls	r3, r1, #9
     e20:	f43f af4c 	beq.w	cbc <__aeabi_fmul+0x114>
     e24:	4608      	mov	r0, r1
     e26:	e76e      	b.n	d06 <__aeabi_fmul+0x15e>
     e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e2c:	bf18      	it	ne
     e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e32:	d1ca      	bne.n	dca <__aeabi_fdiv+0xba>
     e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     e38:	f47f af5c 	bne.w	cf4 <__aeabi_fmul+0x14c>
     e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     e40:	f47f af3c 	bne.w	cbc <__aeabi_fmul+0x114>
     e44:	e75f      	b.n	d06 <__aeabi_fmul+0x15e>
     e46:	bf00      	nop

00000e48 <__aeabi_uldivmod>:
     e48:	b953      	cbnz	r3, e60 <__aeabi_uldivmod+0x18>
     e4a:	b94a      	cbnz	r2, e60 <__aeabi_uldivmod+0x18>
     e4c:	2900      	cmp	r1, #0
     e4e:	bf08      	it	eq
     e50:	2800      	cmpeq	r0, #0
     e52:	bf1c      	itt	ne
     e54:	f04f 31ff 	movne.w	r1, #4294967295
     e58:	f04f 30ff 	movne.w	r0, #4294967295
     e5c:	f000 b974 	b.w	1148 <__aeabi_idiv0>
     e60:	f1ad 0c08 	sub.w	ip, sp, #8
     e64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     e68:	f000 f806 	bl	e78 <__udivmoddi4>
     e6c:	f8dd e004 	ldr.w	lr, [sp, #4]
     e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     e74:	b004      	add	sp, #16
     e76:	4770      	bx	lr

00000e78 <__udivmoddi4>:
     e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e7c:	9e08      	ldr	r6, [sp, #32]
     e7e:	460d      	mov	r5, r1
     e80:	4604      	mov	r4, r0
     e82:	4688      	mov	r8, r1
     e84:	2b00      	cmp	r3, #0
     e86:	d14d      	bne.n	f24 <__udivmoddi4+0xac>
     e88:	428a      	cmp	r2, r1
     e8a:	4694      	mov	ip, r2
     e8c:	d968      	bls.n	f60 <__udivmoddi4+0xe8>
     e8e:	fab2 f282 	clz	r2, r2
     e92:	b152      	cbz	r2, eaa <__udivmoddi4+0x32>
     e94:	fa01 f302 	lsl.w	r3, r1, r2
     e98:	f1c2 0120 	rsb	r1, r2, #32
     e9c:	fa20 f101 	lsr.w	r1, r0, r1
     ea0:	fa0c fc02 	lsl.w	ip, ip, r2
     ea4:	ea41 0803 	orr.w	r8, r1, r3
     ea8:	4094      	lsls	r4, r2
     eaa:	ea4f 451c 	mov.w	r5, ip, lsr #16
     eae:	0c21      	lsrs	r1, r4, #16
     eb0:	fbb8 fef5 	udiv	lr, r8, r5
     eb4:	fa1f f78c 	uxth.w	r7, ip
     eb8:	fb05 831e 	mls	r3, r5, lr, r8
     ebc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     ec0:	fb0e f107 	mul.w	r1, lr, r7
     ec4:	4299      	cmp	r1, r3
     ec6:	d90b      	bls.n	ee0 <__udivmoddi4+0x68>
     ec8:	eb1c 0303 	adds.w	r3, ip, r3
     ecc:	f10e 30ff 	add.w	r0, lr, #4294967295
     ed0:	f080 811e 	bcs.w	1110 <__udivmoddi4+0x298>
     ed4:	4299      	cmp	r1, r3
     ed6:	f240 811b 	bls.w	1110 <__udivmoddi4+0x298>
     eda:	f1ae 0e02 	sub.w	lr, lr, #2
     ede:	4463      	add	r3, ip
     ee0:	1a5b      	subs	r3, r3, r1
     ee2:	b2a4      	uxth	r4, r4
     ee4:	fbb3 f0f5 	udiv	r0, r3, r5
     ee8:	fb05 3310 	mls	r3, r5, r0, r3
     eec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ef0:	fb00 f707 	mul.w	r7, r0, r7
     ef4:	42a7      	cmp	r7, r4
     ef6:	d90a      	bls.n	f0e <__udivmoddi4+0x96>
     ef8:	eb1c 0404 	adds.w	r4, ip, r4
     efc:	f100 33ff 	add.w	r3, r0, #4294967295
     f00:	f080 8108 	bcs.w	1114 <__udivmoddi4+0x29c>
     f04:	42a7      	cmp	r7, r4
     f06:	f240 8105 	bls.w	1114 <__udivmoddi4+0x29c>
     f0a:	4464      	add	r4, ip
     f0c:	3802      	subs	r0, #2
     f0e:	1be4      	subs	r4, r4, r7
     f10:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     f14:	2100      	movs	r1, #0
     f16:	b11e      	cbz	r6, f20 <__udivmoddi4+0xa8>
     f18:	40d4      	lsrs	r4, r2
     f1a:	2300      	movs	r3, #0
     f1c:	e9c6 4300 	strd	r4, r3, [r6]
     f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f24:	428b      	cmp	r3, r1
     f26:	d908      	bls.n	f3a <__udivmoddi4+0xc2>
     f28:	2e00      	cmp	r6, #0
     f2a:	f000 80ee 	beq.w	110a <__udivmoddi4+0x292>
     f2e:	2100      	movs	r1, #0
     f30:	e9c6 0500 	strd	r0, r5, [r6]
     f34:	4608      	mov	r0, r1
     f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f3a:	fab3 f183 	clz	r1, r3
     f3e:	2900      	cmp	r1, #0
     f40:	d14a      	bne.n	fd8 <__udivmoddi4+0x160>
     f42:	42ab      	cmp	r3, r5
     f44:	d302      	bcc.n	f4c <__udivmoddi4+0xd4>
     f46:	4282      	cmp	r2, r0
     f48:	f200 80f9 	bhi.w	113e <__udivmoddi4+0x2c6>
     f4c:	1a84      	subs	r4, r0, r2
     f4e:	eb65 0303 	sbc.w	r3, r5, r3
     f52:	2001      	movs	r0, #1
     f54:	4698      	mov	r8, r3
     f56:	2e00      	cmp	r6, #0
     f58:	d0e2      	beq.n	f20 <__udivmoddi4+0xa8>
     f5a:	e9c6 4800 	strd	r4, r8, [r6]
     f5e:	e7df      	b.n	f20 <__udivmoddi4+0xa8>
     f60:	b902      	cbnz	r2, f64 <__udivmoddi4+0xec>
     f62:	deff      	udf	#255	; 0xff
     f64:	fab2 f282 	clz	r2, r2
     f68:	2a00      	cmp	r2, #0
     f6a:	f040 8091 	bne.w	1090 <__udivmoddi4+0x218>
     f6e:	eba1 050c 	sub.w	r5, r1, ip
     f72:	ea4f 471c 	mov.w	r7, ip, lsr #16
     f76:	fa1f fe8c 	uxth.w	lr, ip
     f7a:	2101      	movs	r1, #1
     f7c:	fbb5 f3f7 	udiv	r3, r5, r7
     f80:	fb07 5013 	mls	r0, r7, r3, r5
     f84:	0c25      	lsrs	r5, r4, #16
     f86:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     f8a:	fb0e f003 	mul.w	r0, lr, r3
     f8e:	42a8      	cmp	r0, r5
     f90:	d908      	bls.n	fa4 <__udivmoddi4+0x12c>
     f92:	eb1c 0505 	adds.w	r5, ip, r5
     f96:	f103 38ff 	add.w	r8, r3, #4294967295
     f9a:	d202      	bcs.n	fa2 <__udivmoddi4+0x12a>
     f9c:	42a8      	cmp	r0, r5
     f9e:	f200 80cb 	bhi.w	1138 <__udivmoddi4+0x2c0>
     fa2:	4643      	mov	r3, r8
     fa4:	1a2d      	subs	r5, r5, r0
     fa6:	b2a4      	uxth	r4, r4
     fa8:	fbb5 f0f7 	udiv	r0, r5, r7
     fac:	fb07 5510 	mls	r5, r7, r0, r5
     fb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     fb4:	fb0e fe00 	mul.w	lr, lr, r0
     fb8:	45a6      	cmp	lr, r4
     fba:	d908      	bls.n	fce <__udivmoddi4+0x156>
     fbc:	eb1c 0404 	adds.w	r4, ip, r4
     fc0:	f100 35ff 	add.w	r5, r0, #4294967295
     fc4:	d202      	bcs.n	fcc <__udivmoddi4+0x154>
     fc6:	45a6      	cmp	lr, r4
     fc8:	f200 80bb 	bhi.w	1142 <__udivmoddi4+0x2ca>
     fcc:	4628      	mov	r0, r5
     fce:	eba4 040e 	sub.w	r4, r4, lr
     fd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     fd6:	e79e      	b.n	f16 <__udivmoddi4+0x9e>
     fd8:	f1c1 0720 	rsb	r7, r1, #32
     fdc:	408b      	lsls	r3, r1
     fde:	fa22 fc07 	lsr.w	ip, r2, r7
     fe2:	ea4c 0c03 	orr.w	ip, ip, r3
     fe6:	fa20 f407 	lsr.w	r4, r0, r7
     fea:	fa05 f301 	lsl.w	r3, r5, r1
     fee:	431c      	orrs	r4, r3
     ff0:	40fd      	lsrs	r5, r7
     ff2:	ea4f 491c 	mov.w	r9, ip, lsr #16
     ff6:	fa00 f301 	lsl.w	r3, r0, r1
     ffa:	fbb5 f8f9 	udiv	r8, r5, r9
     ffe:	0c20      	lsrs	r0, r4, #16
    1000:	fa1f fe8c 	uxth.w	lr, ip
    1004:	fb09 5518 	mls	r5, r9, r8, r5
    1008:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    100c:	fb08 f00e 	mul.w	r0, r8, lr
    1010:	42a8      	cmp	r0, r5
    1012:	fa02 f201 	lsl.w	r2, r2, r1
    1016:	d90b      	bls.n	1030 <__udivmoddi4+0x1b8>
    1018:	eb1c 0505 	adds.w	r5, ip, r5
    101c:	f108 3aff 	add.w	sl, r8, #4294967295
    1020:	f080 8088 	bcs.w	1134 <__udivmoddi4+0x2bc>
    1024:	42a8      	cmp	r0, r5
    1026:	f240 8085 	bls.w	1134 <__udivmoddi4+0x2bc>
    102a:	f1a8 0802 	sub.w	r8, r8, #2
    102e:	4465      	add	r5, ip
    1030:	1a2d      	subs	r5, r5, r0
    1032:	b2a4      	uxth	r4, r4
    1034:	fbb5 f0f9 	udiv	r0, r5, r9
    1038:	fb09 5510 	mls	r5, r9, r0, r5
    103c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1040:	fb00 fe0e 	mul.w	lr, r0, lr
    1044:	45ae      	cmp	lr, r5
    1046:	d908      	bls.n	105a <__udivmoddi4+0x1e2>
    1048:	eb1c 0505 	adds.w	r5, ip, r5
    104c:	f100 34ff 	add.w	r4, r0, #4294967295
    1050:	d26c      	bcs.n	112c <__udivmoddi4+0x2b4>
    1052:	45ae      	cmp	lr, r5
    1054:	d96a      	bls.n	112c <__udivmoddi4+0x2b4>
    1056:	3802      	subs	r0, #2
    1058:	4465      	add	r5, ip
    105a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    105e:	fba0 9402 	umull	r9, r4, r0, r2
    1062:	eba5 050e 	sub.w	r5, r5, lr
    1066:	42a5      	cmp	r5, r4
    1068:	46c8      	mov	r8, r9
    106a:	46a6      	mov	lr, r4
    106c:	d356      	bcc.n	111c <__udivmoddi4+0x2a4>
    106e:	d053      	beq.n	1118 <__udivmoddi4+0x2a0>
    1070:	b15e      	cbz	r6, 108a <__udivmoddi4+0x212>
    1072:	ebb3 0208 	subs.w	r2, r3, r8
    1076:	eb65 050e 	sbc.w	r5, r5, lr
    107a:	fa05 f707 	lsl.w	r7, r5, r7
    107e:	fa22 f301 	lsr.w	r3, r2, r1
    1082:	40cd      	lsrs	r5, r1
    1084:	431f      	orrs	r7, r3
    1086:	e9c6 7500 	strd	r7, r5, [r6]
    108a:	2100      	movs	r1, #0
    108c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1090:	f1c2 0320 	rsb	r3, r2, #32
    1094:	fa20 f103 	lsr.w	r1, r0, r3
    1098:	fa0c fc02 	lsl.w	ip, ip, r2
    109c:	fa25 f303 	lsr.w	r3, r5, r3
    10a0:	4095      	lsls	r5, r2
    10a2:	430d      	orrs	r5, r1
    10a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
    10a8:	fa1f fe8c 	uxth.w	lr, ip
    10ac:	fbb3 f1f7 	udiv	r1, r3, r7
    10b0:	fb07 3011 	mls	r0, r7, r1, r3
    10b4:	0c2b      	lsrs	r3, r5, #16
    10b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    10ba:	fb01 f00e 	mul.w	r0, r1, lr
    10be:	4298      	cmp	r0, r3
    10c0:	fa04 f402 	lsl.w	r4, r4, r2
    10c4:	d908      	bls.n	10d8 <__udivmoddi4+0x260>
    10c6:	eb1c 0303 	adds.w	r3, ip, r3
    10ca:	f101 38ff 	add.w	r8, r1, #4294967295
    10ce:	d22f      	bcs.n	1130 <__udivmoddi4+0x2b8>
    10d0:	4298      	cmp	r0, r3
    10d2:	d92d      	bls.n	1130 <__udivmoddi4+0x2b8>
    10d4:	3902      	subs	r1, #2
    10d6:	4463      	add	r3, ip
    10d8:	1a1b      	subs	r3, r3, r0
    10da:	b2ad      	uxth	r5, r5
    10dc:	fbb3 f0f7 	udiv	r0, r3, r7
    10e0:	fb07 3310 	mls	r3, r7, r0, r3
    10e4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    10e8:	fb00 f30e 	mul.w	r3, r0, lr
    10ec:	42ab      	cmp	r3, r5
    10ee:	d908      	bls.n	1102 <__udivmoddi4+0x28a>
    10f0:	eb1c 0505 	adds.w	r5, ip, r5
    10f4:	f100 38ff 	add.w	r8, r0, #4294967295
    10f8:	d216      	bcs.n	1128 <__udivmoddi4+0x2b0>
    10fa:	42ab      	cmp	r3, r5
    10fc:	d914      	bls.n	1128 <__udivmoddi4+0x2b0>
    10fe:	3802      	subs	r0, #2
    1100:	4465      	add	r5, ip
    1102:	1aed      	subs	r5, r5, r3
    1104:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1108:	e738      	b.n	f7c <__udivmoddi4+0x104>
    110a:	4631      	mov	r1, r6
    110c:	4630      	mov	r0, r6
    110e:	e707      	b.n	f20 <__udivmoddi4+0xa8>
    1110:	4686      	mov	lr, r0
    1112:	e6e5      	b.n	ee0 <__udivmoddi4+0x68>
    1114:	4618      	mov	r0, r3
    1116:	e6fa      	b.n	f0e <__udivmoddi4+0x96>
    1118:	454b      	cmp	r3, r9
    111a:	d2a9      	bcs.n	1070 <__udivmoddi4+0x1f8>
    111c:	ebb9 0802 	subs.w	r8, r9, r2
    1120:	eb64 0e0c 	sbc.w	lr, r4, ip
    1124:	3801      	subs	r0, #1
    1126:	e7a3      	b.n	1070 <__udivmoddi4+0x1f8>
    1128:	4640      	mov	r0, r8
    112a:	e7ea      	b.n	1102 <__udivmoddi4+0x28a>
    112c:	4620      	mov	r0, r4
    112e:	e794      	b.n	105a <__udivmoddi4+0x1e2>
    1130:	4641      	mov	r1, r8
    1132:	e7d1      	b.n	10d8 <__udivmoddi4+0x260>
    1134:	46d0      	mov	r8, sl
    1136:	e77b      	b.n	1030 <__udivmoddi4+0x1b8>
    1138:	3b02      	subs	r3, #2
    113a:	4465      	add	r5, ip
    113c:	e732      	b.n	fa4 <__udivmoddi4+0x12c>
    113e:	4608      	mov	r0, r1
    1140:	e709      	b.n	f56 <__udivmoddi4+0xde>
    1142:	4464      	add	r4, ip
    1144:	3802      	subs	r0, #2
    1146:	e742      	b.n	fce <__udivmoddi4+0x156>

00001148 <__aeabi_idiv0>:
    1148:	4770      	bx	lr
    114a:	bf00      	nop
    114c:	0000      	movs	r0, r0
	...

00001150 <brightness_task>:
		k_msleep(500);
	}
}

void brightness_task()
{
    1150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1154:	b094      	sub	sp, #80	; 0x50
    1156:	466d      	mov	r5, sp
	float light_data[LIGHT_BUFFER_COUNT];
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    1158:	2400      	movs	r4, #0
		light_data[i] = AnalogRead(4);
    115a:	2004      	movs	r0, #4
    115c:	f000 f85c 	bl	1218 <AnalogRead>
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    1160:	3401      	adds	r4, #1
    1162:	2c14      	cmp	r4, #20
		light_data[i] = AnalogRead(4);
    1164:	f845 0b04 	str.w	r0, [r5], #4
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    1168:	d1f7      	bne.n	115a <brightness_task+0xa>
		}
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
		float light_value = sum / LIGHT_BUFFER_COUNT;
		//printf("light =%f\n",light_value);
		brightness_value = 75.55 * light_value;
    116a:	a717      	add	r7, pc, #92	; (adr r7, 11c8 <brightness_task+0x78>)
    116c:	e9d7 6700 	ldrd	r6, r7, [r7]
		float light_value = sum / LIGHT_BUFFER_COUNT;
    1170:	f8df 905c 	ldr.w	r9, [pc, #92]	; 11d0 <brightness_task+0x80>
		float sum = 0;
    1174:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    1178:	46e8      	mov	r8, sp
    117a:	2513      	movs	r5, #19
		float sum = 0;
    117c:	4654      	mov	r4, sl
			light_data[i] = light_data[i + 1];
    117e:	f8d8 1004 	ldr.w	r1, [r8, #4]
    1182:	f848 1b04 	str.w	r1, [r8], #4
			sum = sum + light_data[i];
    1186:	4620      	mov	r0, r4
    1188:	f7ff fc06 	bl	998 <__addsf3>
		for (int i = 0; i < LIGHT_BUFFER_COUNT - 1; i++)
    118c:	3d01      	subs	r5, #1
			sum = sum + light_data[i];
    118e:	4604      	mov	r4, r0
		for (int i = 0; i < LIGHT_BUFFER_COUNT - 1; i++)
    1190:	d1f5      	bne.n	117e <brightness_task+0x2e>
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
    1192:	2004      	movs	r0, #4
    1194:	f000 f840 	bl	1218 <AnalogRead>
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
    1198:	4621      	mov	r1, r4
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
    119a:	9013      	str	r0, [sp, #76]	; 0x4c
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
    119c:	f7ff fbfc 	bl	998 <__addsf3>
		float light_value = sum / LIGHT_BUFFER_COUNT;
    11a0:	4649      	mov	r1, r9
    11a2:	f7ff fdb5 	bl	d10 <__aeabi_fdiv>
		brightness_value = 75.55 * light_value;
    11a6:	f7ff f90f 	bl	3c8 <__aeabi_f2d>
    11aa:	4632      	mov	r2, r6
    11ac:	463b      	mov	r3, r7
    11ae:	f7ff f963 	bl	478 <__aeabi_dmul>
    11b2:	f7ff fb73 	bl	89c <__aeabi_d2iz>
    11b6:	4b07      	ldr	r3, [pc, #28]	; (11d4 <brightness_task+0x84>)
    11b8:	6018      	str	r0, [r3, #0]
		k_msleep(1000);
    11ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    11be:	f01f f9aa 	bl	20516 <k_msleep.isra.0>
		hrs_notify();
    11c2:	f001 fb2b 	bl	281c <hrs_notify>
	{
    11c6:	e7d7      	b.n	1178 <brightness_task+0x28>
    11c8:	33333333 	.word	0x33333333
    11cc:	4052e333 	.word	0x4052e333
    11d0:	41a00000 	.word	0x41a00000
    11d4:	20000220 	.word	0x20000220

000011d8 <max30208_read_temp>:
        // printk("READING FROM MAX30208 FIFO : FAILED\n");
    return rslt;
}

u16_t max30208_read_temp(float *value)
{
    11d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    11da:	4605      	mov	r5, r0
    int temp;
    u16_t rslt = 0x00;
    rslt |= max30208_read_fifo(&temp);
    11dc:	a801      	add	r0, sp, #4
    11de:	f01f fd88 	bl	20cf2 <max30208_read_fifo>
    if (temp & 0x8000)
    11e2:	9b01      	ldr	r3, [sp, #4]
    11e4:	041a      	lsls	r2, r3, #16
    {
        temp = ~(temp - 1);
    11e6:	bf44      	itt	mi
    11e8:	425b      	negmi	r3, r3
    11ea:	9301      	strmi	r3, [sp, #4]
    rslt |= max30208_read_fifo(&temp);
    11ec:	4604      	mov	r4, r0
    }
    *value = (float)temp * 0.005;
    11ee:	9801      	ldr	r0, [sp, #4]
    11f0:	f7ff fc86 	bl	b00 <__aeabi_i2f>
    11f4:	f7ff f8e8 	bl	3c8 <__aeabi_f2d>
    11f8:	a305      	add	r3, pc, #20	; (adr r3, 1210 <max30208_read_temp+0x38>)
    11fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    11fe:	f7ff f93b 	bl	478 <__aeabi_dmul>
    1202:	f7ff fb73 	bl	8ec <__aeabi_d2f>
    1206:	6028      	str	r0, [r5, #0]
    return rslt;
}
    1208:	4620      	mov	r0, r4
    120a:	b003      	add	sp, #12
    120c:	bd30      	pop	{r4, r5, pc}
    120e:	bf00      	nop
    1210:	47ae147b 	.word	0x47ae147b
    1214:	3f747ae1 	.word	0x3f747ae1

00001218 <AnalogRead>:

// ------------------------------------------------
// high level read adc channel and convert to float voltage
// ------------------------------------------------
float AnalogRead(int channel)
{
    1218:	b5f0      	push	{r4, r5, r6, r7, lr}
		.channels    = BIT(channel),		// bit mask of channels to read
    121a:	2301      	movs	r3, #1
{
    121c:	b087      	sub	sp, #28
		.channels    = BIT(channel),		// bit mask of channels to read
    121e:	4083      	lsls	r3, r0
	const struct adc_sequence sequence = {
    1220:	9302      	str	r3, [sp, #8]
    1222:	230c      	movs	r3, #12
    1224:	2600      	movs	r6, #0
    1226:	9304      	str	r3, [sp, #16]
    1228:	4f27      	ldr	r7, [pc, #156]	; (12c8 <AnalogRead+0xb0>)
    122a:	9601      	str	r6, [sp, #4]
    122c:	230a      	movs	r3, #10
{
    122e:	4605      	mov	r5, r0
	const struct adc_sequence sequence = {
    1230:	f8ad 3014 	strh.w	r3, [sp, #20]
    1234:	9703      	str	r7, [sp, #12]
    1236:	f88d 6016 	strb.w	r6, [sp, #22]
	struct device *adc_dev = getAdcDevice();
    123a:	f002 fb29 	bl	3890 <getAdcDevice>
	if(_LastChannel != channel)
    123e:	4b23      	ldr	r3, [pc, #140]	; (12cc <AnalogRead+0xb4>)
    1240:	781a      	ldrb	r2, [r3, #0]
    1242:	4295      	cmp	r5, r2
	struct device *adc_dev = getAdcDevice();
    1244:	4604      	mov	r4, r0
	if(_LastChannel != channel)
    1246:	d00c      	beq.n	1262 <AnalogRead+0x4a>
		_IsInitialized = false;
    1248:	4a21      	ldr	r2, [pc, #132]	; (12d0 <AnalogRead+0xb8>)
		_LastChannel = channel;
    124a:	701d      	strb	r5, [r3, #0]
		_IsInitialized = false;
    124c:	7016      	strb	r6, [r2, #0]
	if ( adc_dev != NULL && !_IsInitialized)
    124e:	b970      	cbnz	r0, 126e <AnalogRead+0x56>
{
    1250:	2400      	movs	r4, #0
	memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
    1252:	481d      	ldr	r0, [pc, #116]	; (12c8 <AnalogRead+0xb0>)
    1254:	220c      	movs	r2, #12
    1256:	2100      	movs	r1, #0
    1258:	f022 fcba 	bl	23bd0 <memset>
	if (adc_dev)
    125c:	b9b4      	cbnz	r4, 128c <AnalogRead+0x74>

	s16_t sv = readOneChannel(channel);
	if(sv == -1)
	{
		return sv;
    125e:	481d      	ldr	r0, [pc, #116]	; (12d4 <AnalogRead+0xbc>)
    1260:	e02c      	b.n	12bc <AnalogRead+0xa4>
	if ( adc_dev != NULL && !_IsInitialized)
    1262:	2800      	cmp	r0, #0
    1264:	d0f4      	beq.n	1250 <AnalogRead+0x38>
    1266:	4b1a      	ldr	r3, [pc, #104]	; (12d0 <AnalogRead+0xb8>)
    1268:	781b      	ldrb	r3, [r3, #0]
    126a:	2b00      	cmp	r3, #0
    126c:	d1f1      	bne.n	1252 <AnalogRead+0x3a>
		m_1st_channel_cfg.channel_id = channel;
    126e:	491a      	ldr	r1, [pc, #104]	; (12d8 <AnalogRead+0xc0>)
    1270:	790b      	ldrb	r3, [r1, #4]
    1272:	f365 0304 	bfi	r3, r5, #0, #5
    1276:	710b      	strb	r3, [r1, #4]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
    1278:	68a3      	ldr	r3, [r4, #8]
    127a:	4620      	mov	r0, r4
    127c:	681b      	ldr	r3, [r3, #0]
    127e:	4798      	blx	r3
		if(ret != 0)
    1280:	2800      	cmp	r0, #0
    1282:	d1e5      	bne.n	1250 <AnalogRead+0x38>
			_IsInitialized = true;	// we don't have any other analog users
    1284:	4b12      	ldr	r3, [pc, #72]	; (12d0 <AnalogRead+0xb8>)
    1286:	2201      	movs	r2, #1
    1288:	701a      	strb	r2, [r3, #0]
    128a:	e7e2      	b.n	1252 <AnalogRead+0x3a>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    128c:	68a3      	ldr	r3, [r4, #8]
    128e:	a901      	add	r1, sp, #4
    1290:	685b      	ldr	r3, [r3, #4]
    1292:	4620      	mov	r0, r4
    1294:	4798      	blx	r3
		if(ret == 0)
    1296:	2800      	cmp	r0, #0
    1298:	d1e1      	bne.n	125e <AnalogRead+0x46>
			sample_value = m_sample_buffer[0];
    129a:	f9b7 0000 	ldrsh.w	r0, [r7]
	if(sv == -1)
    129e:	1c43      	adds	r3, r0, #1
    12a0:	d0dd      	beq.n	125e <AnalogRead+0x46>
			multip = 16384;
			break;
	}
	
	// the 3.6 relates to the voltage divider being used in my circuit
	float fout = (sv * 3.6 / multip);
    12a2:	f7ff f87f 	bl	3a4 <__aeabi_i2d>
    12a6:	a306      	add	r3, pc, #24	; (adr r3, 12c0 <AnalogRead+0xa8>)
    12a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    12ac:	f7ff f8e4 	bl	478 <__aeabi_dmul>
    12b0:	4b0a      	ldr	r3, [pc, #40]	; (12dc <AnalogRead+0xc4>)
    12b2:	2200      	movs	r2, #0
    12b4:	f7ff f8e0 	bl	478 <__aeabi_dmul>
    12b8:	f7ff fb18 	bl	8ec <__aeabi_d2f>
	return fout;
    12bc:	b007      	add	sp, #28
    12be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12c0:	cccccccd 	.word	0xcccccccd
    12c4:	400ccccc 	.word	0x400ccccc
    12c8:	2000ecf2 	.word	0x2000ecf2
    12cc:	200008b3 	.word	0x200008b3
    12d0:	2000ed25 	.word	0x2000ed25
    12d4:	bf800000 	.word	0xbf800000
    12d8:	20000786 	.word	0x20000786
    12dc:	3f500000 	.word	0x3f500000

000012e0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    12e0:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    12e2:	4d44      	ldr	r5, [pc, #272]	; (13f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c>)
    12e4:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    12e8:	6899      	ldr	r1, [r3, #8]
    12ea:	f011 0101 	ands.w	r1, r1, #1
{
    12ee:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    12f0:	d11f      	bne.n	1332 <bt_init+0x52>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    12f2:	aa03      	add	r2, sp, #12
    12f4:	f640 4003 	movw	r0, #3075	; 0xc03
    12f8:	f007 fd78 	bl	8dec <bt_hci_cmd_send_sync>
		if (err) {
    12fc:	4604      	mov	r4, r0
    12fe:	2800      	cmp	r0, #0
    1300:	d174      	bne.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
	uint8_t status = buf->data[0];
    1302:	9b03      	ldr	r3, [sp, #12]
    1304:	689b      	ldr	r3, [r3, #8]
	if (status) {
    1306:	781b      	ldrb	r3, [r3, #0]
    1308:	b983      	cbnz	r3, 132c <bt_init+0x4c>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    130a:	f105 0394 	add.w	r3, r5, #148	; 0x94
    130e:	4618      	mov	r0, r3
    1310:	f022 fdf2 	bl	23ef8 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1314:	f3bf 8f5b 	dmb	ish
    1318:	f000 0005 	and.w	r0, r0, #5
    131c:	e853 2f00 	ldrex	r2, [r3]
    1320:	e843 0100 	strex	r1, r0, [r3]
    1324:	2900      	cmp	r1, #0
    1326:	d1f9      	bne.n	131c <bt_init+0x3c>
    1328:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    132c:	9803      	ldr	r0, [sp, #12]
    132e:	f01b fd75 	bl	1ce1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    1332:	aa03      	add	r2, sp, #12
    1334:	2100      	movs	r1, #0
    1336:	f241 0003 	movw	r0, #4099	; 0x1003
    133a:	f007 fd57 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    133e:	4604      	mov	r4, r0
    1340:	2800      	cmp	r0, #0
    1342:	d153      	bne.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    1344:	9b03      	ldr	r3, [sp, #12]
    1346:	482c      	ldr	r0, [pc, #176]	; (13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    1348:	6899      	ldr	r1, [r3, #8]
    134a:	2208      	movs	r2, #8
    134c:	3101      	adds	r1, #1
    134e:	f022 fc14 	bl	23b7a <memcpy>
	net_buf_unref(rsp);
    1352:	9803      	ldr	r0, [sp, #12]
    1354:	f01b fd62 	bl	1ce1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    1358:	4621      	mov	r1, r4
    135a:	aa03      	add	r2, sp, #12
    135c:	f241 0001 	movw	r0, #4097	; 0x1001
    1360:	f007 fd44 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    1364:	4604      	mov	r4, r0
    1366:	2800      	cmp	r0, #0
    1368:	d140      	bne.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
	read_local_ver_complete(rsp);
    136a:	9803      	ldr	r0, [sp, #12]
    136c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    136e:	785a      	ldrb	r2, [r3, #1]
    1370:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    1374:	78d9      	ldrb	r1, [r3, #3]
    1376:	789a      	ldrb	r2, [r3, #2]
    1378:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    137c:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    137e:	791a      	ldrb	r2, [r3, #4]
    1380:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    1384:	7a19      	ldrb	r1, [r3, #8]
    1386:	79da      	ldrb	r2, [r3, #7]
    1388:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    138c:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    138e:	795a      	ldrb	r2, [r3, #5]
    1390:	799b      	ldrb	r3, [r3, #6]
    1392:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    1396:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    1398:	f01b fd40 	bl	1ce1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    139c:	4621      	mov	r1, r4
    139e:	aa03      	add	r2, sp, #12
    13a0:	f241 0002 	movw	r0, #4098	; 0x1002
    13a4:	f007 fd22 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    13a8:	4604      	mov	r4, r0
    13aa:	b9f8      	cbnz	r0, 13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
	memcpy(bt_dev.supported_commands, rp->commands,
    13ac:	9b03      	ldr	r3, [sp, #12]
    13ae:	4813      	ldr	r0, [pc, #76]	; (13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>)
    13b0:	6899      	ldr	r1, [r3, #8]
    13b2:	2240      	movs	r2, #64	; 0x40
    13b4:	3101      	adds	r1, #1
    13b6:	f022 fbe0 	bl	23b7a <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
    13ba:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    13be:	9803      	ldr	r0, [sp, #12]
		bt_dev.supported_commands[34] |= 0x04;
    13c0:	f043 0306 	orr.w	r3, r3, #6
    13c4:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    13c8:	f01b fd28 	bl	1ce1c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    13cc:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    13d0:	065a      	lsls	r2, r3, #25
    13d2:	d41b      	bmi.n	140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    13d4:	4b0a      	ldr	r3, [pc, #40]	; (1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>)
    13d6:	490b      	ldr	r1, [pc, #44]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
		BT_ERR("Non-LE capable controller detected!");
    13d8:	480b      	ldr	r0, [pc, #44]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    13da:	1ac9      	subs	r1, r1, r3
    13dc:	08c9      	lsrs	r1, r1, #3
    13de:	0189      	lsls	r1, r1, #6
    13e0:	f041 0101 	orr.w	r1, r1, #1
    13e4:	f020 fbbd 	bl	21b62 <log_0>
		return -ENODEV;
    13e8:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    13ec:	4620      	mov	r0, r4
    13ee:	b008      	add	sp, #32
    13f0:	bd70      	pop	{r4, r5, r6, pc}
    13f2:	bf00      	nop
    13f4:	20000000 	.word	0x20000000
    13f8:	2000003c 	.word	0x2000003c
    13fc:	20000044 	.word	0x20000044
    1400:	00026fc8 	.word	0x00026fc8
    1404:	00027080 	.word	0x00027080
    1408:	0002bc52 	.word	0x0002bc52
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    140c:	4621      	mov	r1, r4
    140e:	aa03      	add	r2, sp, #12
    1410:	f242 0003 	movw	r0, #8195	; 0x2003
    1414:	f007 fcea 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    1418:	4604      	mov	r4, r0
    141a:	2800      	cmp	r0, #0
    141c:	d1e6      	bne.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    141e:	9b03      	ldr	r3, [sp, #12]
    1420:	48b5      	ldr	r0, [pc, #724]	; (16f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x370>)
    1422:	6899      	ldr	r1, [r3, #8]
    1424:	2208      	movs	r2, #8
    1426:	3101      	adds	r1, #1
    1428:	f022 fba7 	bl	23b7a <memcpy>
	net_buf_unref(rsp);
    142c:	9803      	ldr	r0, [sp, #12]
    142e:	f01b fcf5 	bl	1ce1c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    1432:	4621      	mov	r1, r4
    1434:	aa03      	add	r2, sp, #12
    1436:	f242 0002 	movw	r0, #8194	; 0x2002
    143a:	f007 fcd7 	bl	8dec <bt_hci_cmd_send_sync>
		if (err) {
    143e:	4604      	mov	r4, r0
    1440:	2800      	cmp	r0, #0
    1442:	d1d3      	bne.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
		le_read_buffer_size_complete(rsp);
    1444:	9b03      	ldr	r3, [sp, #12]
    1446:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    1448:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    144c:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
    1450:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    1452:	b121      	cbz	r1, 145e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd6>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    1454:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    1456:	48a9      	ldr	r0, [pc, #676]	; (16fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x374>)
    1458:	4611      	mov	r1, r2
    145a:	f025 f9bb 	bl	267d4 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    145e:	9803      	ldr	r0, [sp, #12]
    1460:	f01b fcdc 	bl	1ce1c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    1464:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    1468:	f016 0620 	ands.w	r6, r6, #32
    146c:	f000 811e 	beq.w	16ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x324>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    1470:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    1474:	071b      	lsls	r3, r3, #28
    1476:	d512      	bpl.n	149e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    1478:	aa03      	add	r2, sp, #12
    147a:	2100      	movs	r1, #0
    147c:	f242 001c 	movw	r0, #8220	; 0x201c
    1480:	f007 fcb4 	bl	8dec <bt_hci_cmd_send_sync>
		if (err) {
    1484:	4604      	mov	r4, r0
    1486:	2800      	cmp	r0, #0
    1488:	d1b0      	bne.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
		le_read_supp_states_complete(rsp);
    148a:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    148c:	6883      	ldr	r3, [r0, #8]
    148e:	f8d3 2001 	ldr.w	r2, [r3, #1]
    1492:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    1496:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    149a:	f01b fcbf 	bl	1ce1c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    149e:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    14a2:	069e      	lsls	r6, r3, #26
    14a4:	d524      	bpl.n	14f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x168>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    14a6:	a902      	add	r1, sp, #8
    14a8:	f10d 0006 	add.w	r0, sp, #6
    14ac:	f007 fe6e 	bl	918c <hci_le_read_max_data_len>
		if (err) {
    14b0:	4604      	mov	r4, r0
    14b2:	2800      	cmp	r0, #0
    14b4:	d19a      	bne.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    14b6:	2104      	movs	r1, #4
    14b8:	f242 0024 	movw	r0, #8228	; 0x2024
    14bc:	f007 fb36 	bl	8b2c <bt_hci_cmd_create>
		if (!buf) {
    14c0:	4606      	mov	r6, r0
    14c2:	2800      	cmp	r0, #0
    14c4:	f000 80f9 	beq.w	16ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x332>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    14c8:	2104      	movs	r1, #4
    14ca:	3008      	adds	r0, #8
    14cc:	f024 fba9 	bl	25c22 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    14d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    14d4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    14d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    14da:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    14dc:	4622      	mov	r2, r4
    14de:	4631      	mov	r1, r6
    14e0:	f242 0024 	movw	r0, #8228	; 0x2024
    14e4:	f007 fc82 	bl	8dec <bt_hci_cmd_send_sync>
		if (err) {
    14e8:	4604      	mov	r4, r0
    14ea:	2800      	cmp	r0, #0
    14ec:	f47f af7e 	bne.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    14f0:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    14f4:	065c      	lsls	r4, r3, #25
    14f6:	d52c      	bpl.n	1552 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ca>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
    14f8:	2102      	movs	r1, #2
    14fa:	f242 002e 	movw	r0, #8238	; 0x202e
    14fe:	f007 fb15 	bl	8b2c <bt_hci_cmd_create>
		if (!buf) {
    1502:	4604      	mov	r4, r0
    1504:	2800      	cmp	r0, #0
    1506:	f000 80d8 	beq.w	16ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x332>
    150a:	2102      	movs	r1, #2
    150c:	3008      	adds	r0, #8
    150e:	f024 fb88 	bl	25c22 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
    1512:	f06f 037b 	mvn.w	r3, #123	; 0x7b
    1516:	7003      	strb	r3, [r0, #0]
    1518:	2303      	movs	r3, #3
    151a:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
    151c:	4621      	mov	r1, r4
    151e:	2200      	movs	r2, #0
    1520:	f242 002e 	movw	r0, #8238	; 0x202e
    1524:	f007 fc62 	bl	8dec <bt_hci_cmd_send_sync>
		if (err) {
    1528:	4604      	mov	r4, r0
    152a:	2800      	cmp	r0, #0
    152c:	f47f af5e 	bne.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    1530:	4601      	mov	r1, r0
    1532:	aa03      	add	r2, sp, #12
    1534:	f242 002a 	movw	r0, #8234	; 0x202a
    1538:	f007 fc58 	bl	8dec <bt_hci_cmd_send_sync>
		if (err) {
    153c:	4604      	mov	r4, r0
    153e:	2800      	cmp	r0, #0
    1540:	f47f af54 	bne.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
		le_read_resolving_list_size_complete(rsp);
    1544:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
    1546:	6883      	ldr	r3, [r0, #8]
    1548:	785b      	ldrb	r3, [r3, #1]
    154a:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    154e:	f01b fc65 	bl	1ce1c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    1552:	2108      	movs	r1, #8
    1554:	f242 0001 	movw	r0, #8193	; 0x2001
    1558:	f007 fae8 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    155c:	4604      	mov	r4, r0
    155e:	2800      	cmp	r0, #0
    1560:	f000 80ab 	beq.w	16ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x332>
    1564:	2108      	movs	r1, #8
    1566:	4408      	add	r0, r1
    1568:	f024 fb5b 	bl	25c22 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    156c:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    1570:	f011 0f40 	tst.w	r1, #64	; 0x40
    1574:	4602      	mov	r2, r0
    1576:	f240 2302 	movw	r3, #514	; 0x202
    157a:	bf08      	it	eq
    157c:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    157e:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    1580:	bf4c      	ite	mi
    1582:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    1586:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    158a:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    158c:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    1590:	bf48      	it	mi
    1592:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    1596:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    159a:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    159e:	bf18      	it	ne
    15a0:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    15a4:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    15a8:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    15aa:	bf48      	it	mi
    15ac:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    15b0:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    15b2:	bf08      	it	eq
    15b4:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    15b8:	2100      	movs	r1, #0
    15ba:	f022 fcdc 	bl	23f76 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    15be:	4621      	mov	r1, r4
    15c0:	2200      	movs	r2, #0
    15c2:	f242 0001 	movw	r0, #8193	; 0x2001
    15c6:	f007 fc11 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    15ca:	4604      	mov	r4, r0
    15cc:	2800      	cmp	r0, #0
    15ce:	f47f af0d 	bne.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    15d2:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    15d6:	0698      	lsls	r0, r3, #26
    15d8:	d41e      	bmi.n	1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>
	if (bt_dev.le.acl_mtu) {
    15da:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    15de:	b9d9      	cbnz	r1, 1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    15e0:	aa03      	add	r2, sp, #12
    15e2:	f241 0005 	movw	r0, #4101	; 0x1005
    15e6:	f007 fc01 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    15ea:	4604      	mov	r4, r0
    15ec:	2800      	cmp	r0, #0
    15ee:	f47f aefd 	bne.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
	if (bt_dev.le.acl_mtu) {
    15f2:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    15f6:	b963      	cbnz	r3, 1612 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28a>
    15f8:	9b03      	ldr	r3, [sp, #12]
    15fa:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    15fc:	785a      	ldrb	r2, [r3, #1]
    15fe:	7899      	ldrb	r1, [r3, #2]
    1600:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1604:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    1608:	889a      	ldrh	r2, [r3, #4]
    160a:	483c      	ldr	r0, [pc, #240]	; (16fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x374>)
    160c:	4611      	mov	r1, r2
    160e:	f025 f8e1 	bl	267d4 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    1612:	9803      	ldr	r0, [sp, #12]
    1614:	f01b fc02 	bl	1ce1c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    1618:	2108      	movs	r1, #8
    161a:	f640 4001 	movw	r0, #3073	; 0xc01
    161e:	f007 fa85 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    1622:	4604      	mov	r4, r0
    1624:	2800      	cmp	r0, #0
    1626:	d048      	beq.n	16ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x332>
    1628:	2108      	movs	r1, #8
    162a:	4408      	add	r0, r1
    162c:	f024 faf9 	bl	25c22 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1630:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    1634:	07d9      	lsls	r1, r3, #31
    1636:	4602      	mov	r2, r0
    1638:	d554      	bpl.n	16e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x35c>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    163a:	a12d      	add	r1, pc, #180	; (adr r1, 16f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x368>)
    163c:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    1640:	f022 fc99 	bl	23f76 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    1644:	4621      	mov	r1, r4
    1646:	2200      	movs	r2, #0
    1648:	f640 4001 	movw	r0, #3073	; 0xc01
    164c:	f007 fbce 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    1650:	4604      	mov	r4, r0
    1652:	2800      	cmp	r0, #0
    1654:	f47f aeca 	bne.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    1658:	4601      	mov	r1, r0
    165a:	aa02      	add	r2, sp, #8
    165c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    1660:	f007 fbc4 	bl	8dec <bt_hci_cmd_send_sync>
    1664:	4e26      	ldr	r6, [pc, #152]	; (1700 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x378>)
    1666:	4b27      	ldr	r3, [pc, #156]	; (1704 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x37c>)
    1668:	1af6      	subs	r6, r6, r3
    166a:	08f6      	lsrs	r6, r6, #3
    166c:	01b6      	lsls	r6, r6, #6
	if (err) {
    166e:	2800      	cmp	r0, #0
    1670:	d054      	beq.n	171c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x394>
		BT_WARN("Vendor HCI extensions not available");
    1672:	4825      	ldr	r0, [pc, #148]	; (1708 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x380>)
    1674:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    1678:	f020 fa73 	bl	21b62 <log_0>
		err = bt_conn_init();
    167c:	f009 feca 	bl	b414 <bt_conn_init>
		if (err) {
    1680:	4604      	mov	r4, r0
    1682:	2800      	cmp	r0, #0
    1684:	f47f aeb2 	bne.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
 * @return N/A
 */
static inline void k_delayed_work_init(struct k_delayed_work *work,
				       k_work_handler_t handler)
{
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    1688:	4601      	mov	r1, r0
    168a:	2230      	movs	r2, #48	; 0x30
    168c:	481f      	ldr	r0, [pc, #124]	; (170c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x384>)
    168e:	f022 fa9f 	bl	23bd0 <memset>
    1692:	4b1f      	ldr	r3, [pc, #124]	; (1710 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x388>)
    1694:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
		if (!bt_dev.id_count) {
    1698:	79eb      	ldrb	r3, [r5, #7]
    169a:	2b00      	cmp	r3, #0
    169c:	f040 80ab 	bne.w	17f6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46e>
			BT_INFO("No ID address. App must call settings_load()");
    16a0:	481c      	ldr	r0, [pc, #112]	; (1714 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38c>)
    16a2:	f046 0103 	orr.w	r1, r6, #3
    16a6:	f020 fa5c 	bl	21b62 <log_0>
			return 0;
    16aa:	e69f      	b.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    16ac:	2102      	movs	r1, #2
    16ae:	f640 406d 	movw	r0, #3181	; 0xc6d
    16b2:	f007 fa3b 	bl	8b2c <bt_hci_cmd_create>
		if (!buf) {
    16b6:	4604      	mov	r4, r0
    16b8:	b910      	cbnz	r0, 16c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x338>
		return -ENOBUFS;
    16ba:	f06f 0436 	mvn.w	r4, #54	; 0x36
    16be:	e695      	b.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
    16c0:	2102      	movs	r1, #2
    16c2:	3008      	adds	r0, #8
    16c4:	f024 faad 	bl	25c22 <net_buf_simple_add>
		cp_le->le = 0x01;
    16c8:	2301      	movs	r3, #1
    16ca:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    16cc:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    16ce:	4621      	mov	r1, r4
    16d0:	4632      	mov	r2, r6
    16d2:	f640 406d 	movw	r0, #3181	; 0xc6d
    16d6:	f007 fb89 	bl	8dec <bt_hci_cmd_send_sync>
		if (err) {
    16da:	4604      	mov	r4, r0
    16dc:	2800      	cmp	r0, #0
    16de:	f43f aec7 	beq.w	1470 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe8>
    16e2:	e683      	b.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    16e4:	480c      	ldr	r0, [pc, #48]	; (1718 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x390>)
    16e6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    16ea:	e7a9      	b.n	1640 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b8>
    16ec:	f3af 8000 	nop.w
    16f0:	02008890 	.word	0x02008890
    16f4:	20008000 	.word	0x20008000
    16f8:	20000098 	.word	0x20000098
    16fc:	200000c8 	.word	0x200000c8
    1700:	00027080 	.word	0x00027080
    1704:	00026fc8 	.word	0x00026fc8
    1708:	0002bc76 	.word	0x0002bc76
    170c:	20000130 	.word	0x20000130
    1710:	00009141 	.word	0x00009141
    1714:	0002bd4a 	.word	0x0002bd4a
    1718:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    171c:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    171e:	4839      	ldr	r0, [pc, #228]	; (1804 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x47c>)
	rp.info = (void *)rsp->data;
    1720:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    1722:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    1726:	2a03      	cmp	r2, #3
		return plat_str[platform];
    1728:	bf96      	itet	ls
    172a:	4937      	ldrls	r1, [pc, #220]	; (1808 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x480>)
	return "unknown";
    172c:	4937      	ldrhi	r1, [pc, #220]	; (180c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x484>)
		return plat_str[platform];
    172e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    1732:	f046 0303 	orr.w	r3, r6, #3
    1736:	f020 fa35 	bl	21ba4 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    173a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    173e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1742:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    1744:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1748:	d12e      	bne.n	17a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x420>
	if (variant < ARRAY_SIZE(nordic_str)) {
    174a:	2a03      	cmp	r2, #3
    174c:	d82c      	bhi.n	17a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x420>
		return nordic_str[variant];
    174e:	4930      	ldr	r1, [pc, #192]	; (1810 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x488>)
    1750:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    1754:	482f      	ldr	r0, [pc, #188]	; (1814 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48c>)
    1756:	f020 fa25 	bl	21ba4 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    175a:	7962      	ldrb	r2, [r4, #5]
    175c:	482e      	ldr	r0, [pc, #184]	; (1818 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x490>)
	if (variant < ARRAY_SIZE(var_str)) {
    175e:	2a03      	cmp	r2, #3
		return var_str[variant];
    1760:	bf96      	itet	ls
    1762:	492e      	ldrls	r1, [pc, #184]	; (181c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x494>)
	return "unknown";
    1764:	4929      	ldrhi	r1, [pc, #164]	; (180c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x484>)
		return var_str[variant];
    1766:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    176a:	e9cd 1203 	strd	r1, r2, [sp, #12]
    176e:	79a2      	ldrb	r2, [r4, #6]
    1770:	9205      	str	r2, [sp, #20]
    1772:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    1776:	9206      	str	r2, [sp, #24]
    1778:	f8d4 2009 	ldr.w	r2, [r4, #9]
    177c:	9207      	str	r2, [sp, #28]
    177e:	f046 0303 	orr.w	r3, r6, #3
    1782:	2205      	movs	r2, #5
    1784:	a903      	add	r1, sp, #12
    1786:	f020 fa42 	bl	21c0e <log_n>
	net_buf_unref(rsp);
    178a:	9802      	ldr	r0, [sp, #8]
    178c:	f01b fb46 	bl	1ce1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    1790:	aa02      	add	r2, sp, #8
    1792:	2100      	movs	r1, #0
    1794:	f64f 4002 	movw	r0, #64514	; 0xfc02
    1798:	f007 fb28 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    179c:	4604      	mov	r4, r0
    179e:	b128      	cbz	r0, 17ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x424>
		BT_WARN("Failed to read supported vendor commands");
    17a0:	481f      	ldr	r0, [pc, #124]	; (1820 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x498>)
    17a2:	f046 0102 	orr.w	r1, r6, #2
    17a6:	e767      	b.n	1678 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f0>
		return "unknown";
    17a8:	4918      	ldr	r1, [pc, #96]	; (180c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x484>)
    17aa:	e7d3      	b.n	1754 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3cc>
	rp.cmds = (void *)rsp->data;
    17ac:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    17ae:	481d      	ldr	r0, [pc, #116]	; (1824 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x49c>)
    17b0:	6899      	ldr	r1, [r3, #8]
    17b2:	2202      	movs	r2, #2
    17b4:	3101      	adds	r1, #1
    17b6:	f022 f9e0 	bl	23b7a <memcpy>
	net_buf_unref(rsp);
    17ba:	9802      	ldr	r0, [sp, #8]
    17bc:	f01b fb2e 	bl	1ce1c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    17c0:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    17c4:	075b      	lsls	r3, r3, #29
    17c6:	f57f af59 	bpl.w	167c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    17ca:	aa02      	add	r2, sp, #8
    17cc:	4621      	mov	r1, r4
    17ce:	f64f 4003 	movw	r0, #64515	; 0xfc03
    17d2:	f007 fb0b 	bl	8dec <bt_hci_cmd_send_sync>
		if (err) {
    17d6:	b118      	cbz	r0, 17e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x458>
			BT_WARN("Failed to read supported vendor features");
    17d8:	4813      	ldr	r0, [pc, #76]	; (1828 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a0>)
    17da:	f046 0102 	orr.w	r1, r6, #2
    17de:	e74b      	b.n	1678 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f0>
		rp.feat = (void *)rsp->data;
    17e0:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    17e2:	4812      	ldr	r0, [pc, #72]	; (182c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a4>)
    17e4:	6899      	ldr	r1, [r3, #8]
    17e6:	2201      	movs	r2, #1
    17e8:	4411      	add	r1, r2
    17ea:	f022 f9c6 	bl	23b7a <memcpy>
		net_buf_unref(rsp);
    17ee:	9802      	ldr	r0, [sp, #8]
    17f0:	f01b fb14 	bl	1ce1c <net_buf_unref>
    17f4:	e742      	b.n	167c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f4>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    17f6:	2104      	movs	r1, #4
    17f8:	480d      	ldr	r0, [pc, #52]	; (1830 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a8>)
    17fa:	f022 fb8c 	bl	23f16 <atomic_or>
	bt_finalize_init();
    17fe:	f008 fa4d 	bl	9c9c <bt_finalize_init>
	return 0;
    1802:	e5f3      	b.n	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
    1804:	0002bc9a 	.word	0x0002bc9a
    1808:	00027770 	.word	0x00027770
    180c:	0002b644 	.word	0x0002b644
    1810:	00027730 	.word	0x00027730
    1814:	0002bcb3 	.word	0x0002bcb3
    1818:	0002bccb 	.word	0x0002bccb
    181c:	000277a8 	.word	0x000277a8
    1820:	0002bcf8 	.word	0x0002bcf8
    1824:	20000085 	.word	0x20000085
    1828:	0002bd21 	.word	0x0002bd21
    182c:	20000084 	.word	0x20000084
    1830:	20000094 	.word	0x20000094
    1834:	00000000 	.word	0x00000000

00001838 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    183c:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    1840:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1842:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    1844:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1846:	42a6      	cmp	r6, r4
{
    1848:	4688      	mov	r8, r1
    184a:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    184c:	d818      	bhi.n	1880 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    184e:	4d1c      	ldr	r5, [pc, #112]	; (18c0 <ull_drift_ticks_get+0x88>)
    1850:	fba3 0105 	umull	r0, r1, r3, r5
    1854:	a318      	add	r3, pc, #96	; (adr r3, 18b8 <ull_drift_ticks_get+0x80>)
    1856:	e9d3 2300 	ldrd	r2, r3, [r3]
    185a:	f7ff faf5 	bl	e48 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    185e:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1860:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1864:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1868:	a313      	add	r3, pc, #76	; (adr r3, 18b8 <ull_drift_ticks_get+0x80>)
    186a:	e9d3 2300 	ldrd	r2, r3, [r3]
    186e:	fba4 0105 	umull	r0, r1, r4, r5
    1872:	f7ff fae9 	bl	e48 <__aeabi_uldivmod>
    1876:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    187a:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    187c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1880:	4c0f      	ldr	r4, [pc, #60]	; (18c0 <ull_drift_ticks_get+0x88>)
    1882:	a30d      	add	r3, pc, #52	; (adr r3, 18b8 <ull_drift_ticks_get+0x80>)
    1884:	e9d3 2300 	ldrd	r2, r3, [r3]
    1888:	fba6 0104 	umull	r0, r1, r6, r4
    188c:	f7ff fadc 	bl	e48 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1890:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1894:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1898:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    189c:	a306      	add	r3, pc, #24	; (adr r3, 18b8 <ull_drift_ticks_get+0x80>)
    189e:	e9d3 2300 	ldrd	r2, r3, [r3]
    18a2:	fba1 0104 	umull	r0, r1, r1, r4
    18a6:	f7ff facf 	bl	e48 <__aeabi_uldivmod>
    18aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    18ae:	6038      	str	r0, [r7, #0]
}
    18b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18b4:	f3af 8000 	nop.w
    18b8:	1afd498d 	.word	0x1afd498d
    18bc:	00000007 	.word	0x00000007
    18c0:	3b9aca00 	.word	0x3b9aca00
    18c4:	00000000 	.word	0x00000000

000018c8 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    18c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18cc:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
    18ce:	2800      	cmp	r0, #0
    18d0:	f000 814b 	beq.w	1b6a <ll_adv_enable+0x2a2>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    18d4:	4caa      	ldr	r4, [pc, #680]	; (1b80 <ll_adv_enable+0x2b8>)
    18d6:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
    18da:	f016 0601 	ands.w	r6, r6, #1
    18de:	d136      	bne.n	194e <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    18e0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    18e4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	ull_filter_adv_update(lll->filter_policy);
    18e8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    18ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    18f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	lll->rl_idx = FILTER_IDX_NONE;
    18f4:	21ff      	movs	r1, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
    18f6:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    18fa:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    18fe:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
	lll->rl_idx = FILTER_IDX_NONE;
    1902:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	ull_filter_adv_update(lll->filter_policy);
    1906:	f018 f831 	bl	1996c <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    190a:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
    190e:	0747      	lsls	r7, r0, #29
    1910:	f100 8117 	bmi.w	1b42 <ll_adv_enable+0x27a>
	if (pdu_adv_to_update) {
    1914:	f1b8 0f00 	cmp.w	r8, #0
    1918:	d011      	beq.n	193e <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    191a:	4899      	ldr	r0, [pc, #612]	; (1b80 <ll_adv_enable+0x2b8>)
    191c:	4641      	mov	r1, r8
    191e:	f012 ff3d 	bl	1479c <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
    1922:	f898 3000 	ldrb.w	r3, [r8]
    1926:	065d      	lsls	r5, r3, #25
    1928:	d505      	bpl.n	1936 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    192a:	2106      	movs	r1, #6
    192c:	f00e faf6 	bl	ff1c <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1930:	2800      	cmp	r0, #0
    1932:	f000 81df 	beq.w	1cf4 <ll_adv_enable+0x42c>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    1936:	4892      	ldr	r0, [pc, #584]	; (1b80 <ll_adv_enable+0x2b8>)
    1938:	4649      	mov	r1, r9
    193a:	f012 ff2f 	bl	1479c <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    193e:	f898 3000 	ldrb.w	r3, [r8]
    1942:	f013 0f0e 	tst.w	r3, #14
    1946:	f040 80d3 	bne.w	1af0 <ll_adv_enable+0x228>
		if (lll->conn) {
    194a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    194c:	b123      	cbz	r3, 1958 <ll_adv_enable+0x90>
	return BT_HCI_ERR_CMD_DISALLOWED;
    194e:	260c      	movs	r6, #12
}
    1950:	4630      	mov	r0, r6
    1952:	b00f      	add	sp, #60	; 0x3c
    1954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
    1958:	f012 f888 	bl	13a6c <ll_rx_link_alloc>
		if (!link) {
    195c:	4682      	mov	sl, r0
    195e:	2800      	cmp	r0, #0
    1960:	f000 81d7 	beq.w	1d12 <ll_adv_enable+0x44a>
		node_rx = ll_rx_alloc();
    1964:	f012 f88e 	bl	13a84 <ll_rx_alloc>
		if (!node_rx) {
    1968:	4683      	mov	fp, r0
    196a:	2800      	cmp	r0, #0
    196c:	f000 81d6 	beq.w	1d1c <ll_adv_enable+0x454>
		conn = ll_conn_acquire();
    1970:	f013 fc70 	bl	15254 <ll_conn_acquire>
		if (!conn) {
    1974:	4605      	mov	r5, r0
    1976:	2800      	cmp	r0, #0
    1978:	f000 81cd 	beq.w	1d16 <ll_adv_enable+0x44e>
		if (!conn_lll->link_tx_free) {
    197c:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
    197e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1982:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
    1984:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
    1988:	2800      	cmp	r0, #0
    198a:	f000 81be 	beq.w	1d0a <ll_adv_enable+0x442>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    198e:	f105 026c 	add.w	r2, r5, #108	; 0x6c
    1992:	f105 0168 	add.w	r1, r5, #104	; 0x68
    1996:	930b      	str	r3, [sp, #44]	; 0x2c
    1998:	f00e facc 	bl	ff34 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    199c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		conn_lll->slave.latency_enabled = 0;
    19a0:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
		conn->llcp_terminate.node_rx.hdr.link = link;
    19a4:	f8c5 a13c 	str.w	sl, [r5, #316]	; 0x13c
			conn_lll->phy_tx = PHY_1M;
    19a8:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    19ac:	f022 0207 	bic.w	r2, r2, #7
    19b0:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    19b4:	f042 0201 	orr.w	r2, r2, #1
    19b8:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->data_chan_sel = 0;
    19bc:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
    19c0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    19c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    19c8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    19cc:	f895 2132 	ldrb.w	r2, [r5, #306]	; 0x132
    19d0:	f022 0203 	bic.w	r2, r2, #3
    19d4:	f885 2132 	strb.w	r2, [r5, #306]	; 0x132
		conn_lll->sn = 0;
    19d8:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    19dc:	f022 021f 	bic.w	r2, r2, #31
    19e0:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    19e4:	4a67      	ldr	r2, [pc, #412]	; (1b84 <ll_adv_enable+0x2bc>)
    19e6:	662a      	str	r2, [r5, #96]	; 0x60
		conn->llcp_feature.features_conn = LL_FEAT;
    19e8:	4a67      	ldr	r2, [pc, #412]	; (1b88 <ll_adv_enable+0x2c0>)
    19ea:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
		conn_lll->data_chan_use = 0;
    19ee:	2700      	movs	r7, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    19f0:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->slave.latency_enabled = 0;
    19f4:	f367 0100 	bfi	r1, r7, #0, #1
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    19f8:	65ea      	str	r2, [r5, #92]	; 0x5c
		conn->connect_expire = 6;
    19fa:	2206      	movs	r2, #6
		conn_lll->slave.latency_enabled = 0;
    19fc:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
		conn_lll->slave.window_widening_event_us = 0;
    1a00:	e9c5 7713 	strd	r7, r7, [r5, #76]	; 0x4c
		conn_lll->data_chan_use = 0;
    1a04:	f885 703f 	strb.w	r7, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
    1a08:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
    1a0a:	636f      	str	r7, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
    1a0c:	656f      	str	r7, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
    1a0e:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
    1a12:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_rx = NULL;
    1a16:	f8c5 710c 	str.w	r7, [r5, #268]	; 0x10c
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    1a1a:	f8a5 7110 	strh.w	r7, [r5, #272]	; 0x110
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    1a1e:	f8a5 7124 	strh.w	r7, [r5, #292]	; 0x124
		conn->llcp_feature.features_peer = 0;
    1a22:	f8c5 712c 	str.w	r7, [r5, #300]	; 0x12c
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    1a26:	f8a5 7130 	strh.w	r7, [r5, #304]	; 0x130
		conn->llcp_terminate.reason_peer = 0;
    1a2a:	f885 713b 	strb.w	r7, [r5, #315]	; 0x13b
		conn_lll->link_tx_free = NULL;
    1a2e:	67af      	str	r7, [r5, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
    1a30:	f8a5 707c 	strh.w	r7, [r5, #124]	; 0x7c
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    1a34:	f8a5 715c 	strh.w	r7, [r5, #348]	; 0x15c
		conn->connect_expire = 6;
    1a38:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1a3c:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
		conn->llcp_conn_param.req = 0;
    1a40:	f8a5 717c 	strh.w	r7, [r5, #380]	; 0x17c
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1a44:	f022 0207 	bic.w	r2, r2, #7
    1a48:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
		conn->common.fex_valid = 0;
    1a4c:	f8b5 20dc 	ldrh.w	r2, [r5, #220]	; 0xdc
		conn->slave.ticks_to_offset = 0;
    1a50:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
		conn->common.fex_valid = 0;
    1a54:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    1a58:	f8a5 20dc 	strh.w	r2, [r5, #220]	; 0xdc
		conn->llcp_conn_param.disabled = 0;
    1a5c:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1a60:	f8a5 70e8 	strh.w	r7, [r5, #232]	; 0xe8
		conn->llcp_conn_param.disabled = 0;
    1a64:	f367 1204 	bfi	r2, r7, #4, #1
    1a68:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_length.disabled = 0U;
    1a6c:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1a70:	f885 70ea 	strb.w	r7, [r5, #234]	; 0xea
		conn->llcp_length.disabled = 0U;
    1a74:	f367 02c3 	bfi	r2, r7, #3, #1
    1a78:	f885 21a6 	strb.w	r2, [r5, #422]	; 0x1a6
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    1a7c:	f8a5 71a4 	strh.w	r7, [r5, #420]	; 0x1a4
		conn->llcp_length.cache.tx_octets = 0U;
    1a80:	f8a5 71b0 	strh.w	r7, [r5, #432]	; 0x1b0
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    1a84:	f013 ff20 	bl	158c8 <ull_conn_default_tx_octets_get>
    1a88:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1a8c:	f013 ff22 	bl	158d4 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1a90:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
    1a94:	4a3d      	ldr	r2, [pc, #244]	; (1b8c <ll_adv_enable+0x2c4>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1a96:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1a9a:	400a      	ands	r2, r1
    1a9c:	f8c5 21b4 	str.w	r2, [r5, #436]	; 0x1b4
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1aa0:	f013 ff1e 	bl	158e0 <ull_conn_default_phy_tx_get>
    1aa4:	f895 21b8 	ldrb.w	r2, [r5, #440]	; 0x1b8
    1aa8:	f360 0202 	bfi	r2, r0, #0, #3
    1aac:	f885 21b8 	strb.w	r2, [r5, #440]	; 0x1b8
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1ab0:	f013 ff1c 	bl	158ec <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    1ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ab6:	6263      	str	r3, [r4, #36]	; 0x24
		adv->node_rx_cc_free = node_rx;
    1ab8:	e9c4 ab11 	strd	sl, fp, [r4, #68]	; 0x44
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1abc:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1ac0:	f8c5 71bc 	str.w	r7, [r5, #444]	; 0x1bc
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1ac4:	f360 03c5 	bfi	r3, r0, #3, #3
    1ac8:	f885 31b8 	strb.w	r3, [r5, #440]	; 0x1b8
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
    1acc:	f895 3020 	ldrb.w	r3, [r5, #32]
	hdr->parent = parent;
    1ad0:	61ed      	str	r5, [r5, #28]
	hdr->is_stop = 0U;
    1ad2:	f367 0300 	bfi	r3, r7, #0, #1
		conn->tx_data = conn->tx_data_last = 0;
    1ad6:	e9c5 7772 	strd	r7, r7, [r5, #456]	; 0x1c8
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1ada:	e9c5 7770 	strd	r7, r7, [r5, #448]	; 0x1c0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1ade:	e9c5 7705 	strd	r7, r7, [r5, #20]
    1ae2:	f885 3020 	strb.w	r3, [r5, #32]
		err = lll_clock_wait();
    1ae6:	f018 ff65 	bl	1a9b4 <lll_clock_wait>
		if (err) {
    1aea:	2800      	cmp	r0, #0
    1aec:	f040 8104 	bne.w	1cf8 <ll_adv_enable+0x430>
	uint8_t ch_map = lll->chan_map;
    1af0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1af4:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    1af6:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1afa:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    1afe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1b02:	f00e fb91 	bl	10228 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    1b06:	2800      	cmp	r0, #0
    1b08:	f000 8099 	beq.w	1c3e <ll_adv_enable+0x376>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    1b0c:	f898 2000 	ldrb.w	r2, [r8]
    1b10:	f002 020f 	and.w	r2, r2, #15
    1b14:	2a02      	cmp	r2, #2
    1b16:	d03b      	beq.n	1b90 <ll_adv_enable+0x2c8>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    1b18:	2a01      	cmp	r2, #1
    1b1a:	f000 80f1 	beq.w	1d00 <ll_adv_enable+0x438>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    1b1e:	f899 3001 	ldrb.w	r3, [r9, #1]
    1b22:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
    1b24:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    1b26:	2a00      	cmp	r2, #0
    1b28:	f000 80d9 	beq.w	1cde <ll_adv_enable+0x416>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    1b2c:	2a06      	cmp	r2, #6
    1b2e:	f000 80fa 	beq.w	1d26 <ll_adv_enable+0x45e>
    1b32:	f44f 73da 	mov.w	r3, #436	; 0x1b4
    1b36:	f44f 711b 	mov.w	r1, #620	; 0x26c
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1b3a:	3801      	subs	r0, #1
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    1b3c:	fb03 1100 	mla	r1, r3, r0, r1
    1b40:	e032      	b.n	1ba8 <ll_adv_enable+0x2e0>
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    1b42:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b46:	4632      	mov	r2, r6
    1b48:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    1b4c:	f018 f87a 	bl	19c44 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1b50:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    1b52:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1b56:	f43f aedd 	beq.w	1914 <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
    1b5a:	4630      	mov	r0, r6
    1b5c:	f017 ff20 	bl	199a0 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
    1b60:	f1b8 0f00 	cmp.w	r8, #0
    1b64:	f47f aed9 	bne.w	191a <ll_adv_enable+0x52>
    1b68:	e6e9      	b.n	193e <ll_adv_enable+0x76>
	if (!adv || !adv->is_enabled) {
    1b6a:	4b05      	ldr	r3, [pc, #20]	; (1b80 <ll_adv_enable+0x2b8>)
    1b6c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    1b70:	07db      	lsls	r3, r3, #31
    1b72:	f57f aeec 	bpl.w	194e <ll_adv_enable+0x86>
}
    1b76:	b00f      	add	sp, #60	; 0x3c
    1b78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b7c:	f012 bbda 	b.w	14334 <disable.part.0>
    1b80:	2000e158 	.word	0x2000e158
    1b84:	01480148 	.word	0x01480148
    1b88:	0001417f 	.word	0x0001417f
    1b8c:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
    1b90:	f898 3001 	ldrb.w	r3, [r8, #1]
    1b94:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1b96:	00db      	lsls	r3, r3, #3
    1b98:	fb00 f303 	mul.w	r3, r0, r3
				   rxtx_turn_us * (adv_chn_cnt - 1);
    1b9c:	1e41      	subs	r1, r0, #1
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1b9e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
    1ba2:	2064      	movs	r0, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1ba4:	fb00 3101 	mla	r1, r0, r1, r3
    1ba8:	f894 3020 	ldrb.w	r3, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1bac:	4866      	ldr	r0, [pc, #408]	; (1d48 <ll_adv_enable+0x480>)
	hdr->parent = parent;
    1bae:	61e4      	str	r4, [r4, #28]
    1bb0:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
    1bb2:	f365 0300 	bfi	r3, r5, #0, #1
    1bb6:	f884 3020 	strb.w	r3, [r4, #32]
	adv->evt.ticks_xtal_to_start =
    1bba:	2331      	movs	r3, #49	; 0x31
    1bbc:	6023      	str	r3, [r4, #0]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1bbe:	fba1 0100 	umull	r0, r1, r1, r0
    1bc2:	a35f      	add	r3, pc, #380	; (adr r3, 1d40 <ll_adv_enable+0x478>)
    1bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bc8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
    1bcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1bd0:	f7ff f93a 	bl	e48 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
    1bd4:	f8b4 704c 	ldrh.w	r7, [r4, #76]	; 0x4c
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1bd8:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    1bda:	f00f fc69 	bl	114b0 <ticker_ticks_now_get>
    1bde:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1be0:	b947      	cbnz	r7, 1bf4 <ll_adv_enable+0x32c>
    1be2:	f898 5000 	ldrb.w	r5, [r8]
    1be6:	f005 050f 	and.w	r5, r5, #15
    1bea:	f1a5 0501 	sub.w	r5, r5, #1
    1bee:	fab5 f585 	clz	r5, r5
    1bf2:	096d      	lsrs	r5, r5, #5
    1bf4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    1bf8:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    1bfc:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1c00:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
    1c04:	d022      	beq.n	1c4c <ll_adv_enable+0x384>
				   (adv->evt.ticks_slot + ticks_slot_overhead),
    1c06:	68e3      	ldr	r3, [r4, #12]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c08:	4a50      	ldr	r2, [pc, #320]	; (1d4c <ll_adv_enable+0x484>)
    1c0a:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1d50 <ll_adv_enable+0x488>
    1c0e:	9304      	str	r3, [sp, #16]
    1c10:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    1c12:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c14:	af0d      	add	r7, sp, #52	; 0x34
    1c16:	9301      	str	r3, [sp, #4]
    1c18:	9205      	str	r2, [sp, #20]
    1c1a:	2103      	movs	r1, #3
    1c1c:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1c20:	9406      	str	r4, [sp, #24]
    1c22:	464b      	mov	r3, r9
    1c24:	9000      	str	r0, [sp, #0]
    1c26:	9708      	str	r7, [sp, #32]
    1c28:	f8cd 801c 	str.w	r8, [sp, #28]
    1c2c:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    1c2e:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c30:	f00f fb72 	bl	11318 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    1c34:	4639      	mov	r1, r7
    1c36:	f011 ffcf 	bl	13bd8 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    1c3a:	2800      	cmp	r0, #0
    1c3c:	d03b      	beq.n	1cb6 <ll_adv_enable+0x3ee>
	if (adv->lll.conn) {
    1c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1c40:	2b00      	cmp	r3, #0
    1c42:	f43f ae84 	beq.w	194e <ll_adv_enable+0x86>
		conn_release(adv);
    1c46:	f012 fb33 	bl	142b0 <conn_release.constprop.0>
    1c4a:	e680      	b.n	194e <ll_adv_enable+0x86>
		const uint32_t ticks_slot = adv->evt.ticks_slot +
    1c4c:	68e3      	ldr	r3, [r4, #12]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1c4e:	4a41      	ldr	r2, [pc, #260]	; (1d54 <ll_adv_enable+0x48c>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1c50:	4841      	ldr	r0, [pc, #260]	; (1d58 <ll_adv_enable+0x490>)
		ret = ticker_start_ext(
    1c52:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1c54:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1c58:	fba7 0100 	umull	r0, r1, r7, r0
		ret = ticker_start_ext(
    1c5c:	9406      	str	r4, [sp, #24]
    1c5e:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1c60:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1c62:	2391      	movs	r3, #145	; 0x91
    1c64:	fb03 1107 	mla	r1, r3, r7, r1
		ret = ticker_start_ext(
    1c68:	4b39      	ldr	r3, [pc, #228]	; (1d50 <ll_adv_enable+0x488>)
    1c6a:	9307      	str	r3, [sp, #28]
    1c6c:	4b37      	ldr	r3, [pc, #220]	; (1d4c <ll_adv_enable+0x484>)
    1c6e:	9305      	str	r3, [sp, #20]
    1c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1c74:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    1c76:	f04f 0802 	mov.w	r8, #2
		ret = ticker_start_ext(
    1c7a:	9303      	str	r3, [sp, #12]
    1c7c:	af0d      	add	r7, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1c7e:	a330      	add	r3, pc, #192	; (adr r3, 1d40 <ll_adv_enable+0x478>)
    1c80:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    1c84:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    1c88:	9708      	str	r7, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1c8a:	f7ff f8dd 	bl	e48 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    1c8e:	464b      	mov	r3, r9
    1c90:	e9cd 5000 	strd	r5, r0, [sp]
    1c94:	4642      	mov	r2, r8
    1c96:	4628      	mov	r0, r5
    1c98:	2103      	movs	r1, #3
    1c9a:	f00f fae7 	bl	1126c <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1c9e:	4639      	mov	r1, r7
    1ca0:	f011 ff9a 	bl	13bd8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1ca4:	2800      	cmp	r0, #0
    1ca6:	d1ca      	bne.n	1c3e <ll_adv_enable+0x376>
	adv->is_enabled = 1;
    1ca8:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    1cac:	f043 0301 	orr.w	r3, r3, #1
    1cb0:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	return 0;
    1cb4:	e64c      	b.n	1950 <ll_adv_enable+0x88>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1cb6:	4a29      	ldr	r2, [pc, #164]	; (1d5c <ll_adv_enable+0x494>)
    1cb8:	9205      	str	r2, [sp, #20]
    1cba:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    1cbe:	9200      	str	r2, [sp, #0]
    1cc0:	e9cd 0003 	strd	r0, r0, [sp, #12]
    1cc4:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1cc8:	f8cd 801c 	str.w	r8, [sp, #28]
    1ccc:	9708      	str	r7, [sp, #32]
    1cce:	9406      	str	r4, [sp, #24]
    1cd0:	464b      	mov	r3, r9
    1cd2:	2201      	movs	r2, #1
    1cd4:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1cd6:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1cd8:	f00f fb1e 	bl	11318 <ticker_start>
    1cdc:	e7df      	b.n	1c9e <ll_adv_enable+0x3d6>
				adv_size += pdu_adv->len;
    1cde:	f898 1001 	ldrb.w	r1, [r8, #1]
    1ce2:	3110      	adds	r1, #16
				slot_us += MAX(scan_req_us + EVENT_IFS_MAX_US +
    1ce4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1ce8:	00ca      	lsls	r2, r1, #3
    1cea:	f503 714d 	add.w	r1, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1cee:	f502 739a 	add.w	r3, r2, #308	; 0x134
    1cf2:	e722      	b.n	1b3a <ll_adv_enable+0x272>
			return BT_HCI_ERR_INVALID_PARAM;
    1cf4:	2612      	movs	r6, #18
    1cf6:	e62b      	b.n	1950 <ll_adv_enable+0x88>
			conn_release(adv);
    1cf8:	f012 fada 	bl	142b0 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    1cfc:	2603      	movs	r6, #3
    1cfe:	e627      	b.n	1950 <ll_adv_enable+0x88>
    1d00:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
    1d04:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    1d08:	e717      	b.n	1b3a <ll_adv_enable+0x272>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1d0a:	f105 0070 	add.w	r0, r5, #112	; 0x70
    1d0e:	67a8      	str	r0, [r5, #120]	; 0x78
    1d10:	e63d      	b.n	198e <ll_adv_enable+0xc6>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1d12:	2607      	movs	r6, #7
    1d14:	e61c      	b.n	1950 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    1d16:	4658      	mov	r0, fp
    1d18:	f011 feba 	bl	13a90 <ll_rx_release>
			ll_rx_link_release(link);
    1d1c:	4650      	mov	r0, sl
    1d1e:	f011 feab 	bl	13a78 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1d22:	2607      	movs	r6, #7
    1d24:	e614      	b.n	1950 <ll_adv_enable+0x88>
				adv_size += pdu_adv->len;
    1d26:	f898 2001 	ldrb.w	r2, [r8, #1]
    1d2a:	3210      	adds	r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
    1d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1d30:	00d2      	lsls	r2, r2, #3
    1d32:	f503 714d 	add.w	r1, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1d36:	f502 739a 	add.w	r3, r2, #308	; 0x134
    1d3a:	e6fe      	b.n	1b3a <ll_adv_enable+0x272>
    1d3c:	f3af 8000 	nop.w
    1d40:	1afd498d 	.word	0x1afd498d
    1d44:	00000007 	.word	0x00000007
    1d48:	3b9aca00 	.word	0x3b9aca00
    1d4c:	00014091 	.word	0x00014091
    1d50:	00012d29 	.word	0x00012d29
    1d54:	2000e1b0 	.word	0x2000e1b0
    1d58:	84e72a00 	.word	0x84e72a00
    1d5c:	00013f75 	.word	0x00013f75

00001d60 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    1d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    1d64:	4dc2      	ldr	r5, [pc, #776]	; (2070 <event_conn_upd_prep+0x310>)

	/* set mutex */
	if (!conn_upd) {
    1d66:	682b      	ldr	r3, [r5, #0]
{
    1d68:	b08b      	sub	sp, #44	; 0x2c
    1d6a:	4604      	mov	r4, r0
    1d6c:	460f      	mov	r7, r1
    1d6e:	4690      	mov	r8, r2
	if (!conn_upd) {
    1d70:	2b00      	cmp	r3, #0
    1d72:	f000 8216 	beq.w	21a2 <event_conn_upd_prep+0x442>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1d76:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1d78:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
    1d7a:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1d7c:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1d80:	443e      	add	r6, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1d82:	f013 0307 	ands.w	r3, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1d86:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1d88:	f040 818e 	bne.w	20a8 <event_conn_upd_prep+0x348>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1d8c:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
    1d90:	eba6 0209 	sub.w	r2, r6, r9
    1d94:	fa1f fb82 	uxth.w	fp, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    1d98:	0412      	lsls	r2, r2, #16
    1d9a:	f100 81eb 	bmi.w	2174 <event_conn_upd_prep+0x414>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    1d9e:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
    1da2:	2a00      	cmp	r2, #0
    1da4:	f2c0 812b 	blt.w	1ffe <event_conn_upd_prep+0x29e>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    1da8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1dac:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1db0:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
    1db4:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1db8:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
    1dbc:	f884 1111 	strb.w	r1, [r4, #273]	; 0x111
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1dc0:	4293      	cmp	r3, r2
    1dc2:	d006      	beq.n	1dd2 <event_conn_upd_prep+0x72>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1dc4:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1dc8:	f003 0307 	and.w	r3, r3, #7
    1dcc:	2b05      	cmp	r3, #5
    1dce:	f000 823e 	beq.w	224e <event_conn_upd_prep+0x4ee>
			conn->procedure_expire = 0U;
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    1dd2:	682b      	ldr	r3, [r5, #0]
    1dd4:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
    1dd6:	bf04      	itt	eq
    1dd8:	2300      	moveq	r3, #0
    1dda:	602b      	streq	r3, [r5, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1ddc:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
    1de0:	2d00      	cmp	r5, #0
    1de2:	f000 8130 	beq.w	2046 <event_conn_upd_prep+0x2e6>
    1de6:	6828      	ldr	r0, [r5, #0]
    1de8:	2800      	cmp	r0, #0
    1dea:	f000 812c 	beq.w	2046 <event_conn_upd_prep+0x2e6>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1dee:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    1df0:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
		conn->llcp_rx = rx->hdr.link->mem;
    1df4:	6841      	ldr	r1, [r0, #4]
    1df6:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		if ((conn->llcp_cu.interval != lll->interval) ||
    1dfa:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
    1dfc:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
		if ((conn->llcp_cu.interval != lll->interval) ||
    1e00:	f000 8105 	beq.w	200e <event_conn_upd_prep+0x2ae>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1e04:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1e08:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    1e0c:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1e0e:	2315      	movs	r3, #21
    1e10:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    1e12:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    1e14:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
    1e18:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1e1a:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
    1e1c:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1e1e:	4629      	mov	r1, r5
    1e20:	f011 fe3c 	bl	13a9c <ll_rx_put>
		ll_rx_sched();
    1e24:	f011 fe44 	bl	13ab0 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1e28:	6823      	ldr	r3, [r4, #0]
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	da0a      	bge.n	1e44 <event_conn_upd_prep+0xe4>
			uint32_t ticks_prepare_to_start =
    1e2e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1e32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1e36:	4291      	cmp	r1, r2
    1e38:	bf2c      	ite	cs
    1e3a:	4488      	addcs	r8, r1
    1e3c:	4490      	addcc	r8, r2
    1e3e:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1e40:	eba8 0803 	sub.w	r8, r8, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1e44:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    1e46:	f8b4 5114 	ldrh.w	r5, [r4, #276]	; 0x114
		conn_interval_old = instant_latency * lll->interval;
    1e4a:	fb10 f00b 	smulbb	r0, r0, fp
    1e4e:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    1e50:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
    1e54:	fb15 f301 	smulbb	r3, r5, r1
    1e58:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    1e5a:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    1e5c:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    1e60:	f080 818d 	bcs.w	217e <event_conn_upd_prep+0x41e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1e64:	1a1b      	subs	r3, r3, r0
    1e66:	4983      	ldr	r1, [pc, #524]	; (2074 <event_conn_upd_prep+0x314>)
    1e68:	f240 40e2 	movw	r0, #1250	; 0x4e2
    1e6c:	fb03 f000 	mul.w	r0, r3, r0
    1e70:	fba0 0101 	umull	r0, r1, r0, r1
    1e74:	a37c      	add	r3, pc, #496	; (adr r3, 2068 <event_conn_upd_prep+0x308>)
    1e76:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e7a:	f7fe ffe5 	bl	e48 <__aeabi_uldivmod>
    1e7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e82:	4480      	add	r8, r0
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
    1e84:	8e61      	ldrh	r1, [r4, #50]	; 0x32
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    1e86:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    1e8a:	eba9 0906 	sub.w	r9, r9, r6
    1e8e:	44d1      	add	r9, sl
		lll->latency_prepare += lazy;
    1e90:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
    1e92:	444f      	add	r7, r9
    1e94:	8667      	strh	r7, [r4, #50]	; 0x32
		} else if (lll->role) {
    1e96:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
    1e98:	f240 47e2 	movw	r7, #1250	; 0x4e2
    1e9c:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
    1ea0:	f2c0 8181 	blt.w	21a6 <event_conn_upd_prep+0x446>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    1ea4:	4a74      	ldr	r2, [pc, #464]	; (2078 <event_conn_upd_prep+0x318>)
    1ea6:	4975      	ldr	r1, [pc, #468]	; (207c <event_conn_upd_prep+0x31c>)
    1ea8:	4875      	ldr	r0, [pc, #468]	; (2080 <event_conn_upd_prep+0x320>)
    1eaa:	f640 13f6 	movw	r3, #2550	; 0x9f6
    1eae:	f01f f9f1 	bl	21294 <printk>
    1eb2:	4040      	eors	r0, r0
    1eb4:	f380 8811 	msr	BASEPRI, r0
    1eb8:	f04f 0003 	mov.w	r0, #3
    1ebc:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    1ebe:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    1ec0:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1ec2:	4a70      	ldr	r2, [pc, #448]	; (2084 <event_conn_upd_prep+0x324>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1ec4:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1ec8:	486f      	ldr	r0, [pc, #444]	; (2088 <event_conn_upd_prep+0x328>)
		lll->latency = conn->llcp_cu.latency;
    1eca:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
    1ece:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1ed0:	4432      	add	r2, r6
    1ed2:	fbb2 f2f6 	udiv	r2, r2, r6
    1ed6:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1eda:	f242 7210 	movw	r2, #10000	; 0x2710
    1ede:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1ee2:	4430      	add	r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1ee4:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1ee6:	fbb0 f0f6 	udiv	r0, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1eea:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
    1eee:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    1ef2:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1ef4:	b283      	uxth	r3, r0
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1ef6:	1d88      	adds	r0, r1, #6
    1ef8:	4283      	cmp	r3, r0
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1efa:	f8a4 60c6 	strh.w	r6, [r4, #198]	; 0xc6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1efe:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f02:	dd02      	ble.n	1f0a <event_conn_upd_prep+0x1aa>
				     (conn->apto_reload - (lll->latency + 6)) :
    1f04:	1a5b      	subs	r3, r3, r1
    1f06:	3b06      	subs	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1f08:	b29b      	uxth	r3, r3
    1f0a:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1f0e:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    1f12:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    1f14:	bf44      	itt	mi
    1f16:	2300      	movmi	r3, #0
    1f18:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1f1c:	2102      	movs	r1, #2
    1f1e:	2001      	movs	r0, #1
    1f20:	f01a fcc6 	bl	1c8b0 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1f24:	2200      	movs	r2, #0
    1f26:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1f28:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1f2a:	2001      	movs	r0, #1
    1f2c:	f00e f852 	bl	ffd4 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1f30:	4956      	ldr	r1, [pc, #344]	; (208c <event_conn_upd_prep+0x32c>)
    1f32:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
    1f36:	4620      	mov	r0, r4
    1f38:	f00d ffdc 	bl	fef4 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1f3c:	f100 0a03 	add.w	sl, r0, #3
    1f40:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1f44:	4b52      	ldr	r3, [pc, #328]	; (2090 <event_conn_upd_prep+0x330>)
    1f46:	9400      	str	r4, [sp, #0]
    1f48:	4652      	mov	r2, sl
    1f4a:	2101      	movs	r1, #1
    1f4c:	2000      	movs	r0, #0
    1f4e:	f00f fa6d 	bl	1142c <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1f52:	f030 0302 	bics.w	r3, r0, #2
    1f56:	d00c      	beq.n	1f72 <event_conn_upd_prep+0x212>
    1f58:	4a47      	ldr	r2, [pc, #284]	; (2078 <event_conn_upd_prep+0x318>)
    1f5a:	494e      	ldr	r1, [pc, #312]	; (2094 <event_conn_upd_prep+0x334>)
    1f5c:	4848      	ldr	r0, [pc, #288]	; (2080 <event_conn_upd_prep+0x320>)
    1f5e:	f640 2325 	movw	r3, #2597	; 0xa25
    1f62:	f01f f997 	bl	21294 <printk>
    1f66:	4040      	eors	r0, r0
    1f68:	f380 8811 	msr	BASEPRI, r0
    1f6c:	f04f 0003 	mov.w	r0, #3
    1f70:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1f72:	4e40      	ldr	r6, [pc, #256]	; (2074 <event_conn_upd_prep+0x314>)
    1f74:	fbab 6b06 	umull	r6, fp, fp, r6
    1f78:	a33b      	add	r3, pc, #236	; (adr r3, 2068 <event_conn_upd_prep+0x308>)
    1f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f7e:	4630      	mov	r0, r6
    1f80:	4659      	mov	r1, fp
    1f82:	f7fe ff61 	bl	e48 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f86:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    1f88:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f8c:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    1f8e:	4842      	ldr	r0, [pc, #264]	; (2098 <event_conn_upd_prep+0x338>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f90:	68e3      	ldr	r3, [r4, #12]
    1f92:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1f94:	fba5 0100 	umull	r0, r1, r5, r0
    1f98:	2307      	movs	r3, #7
    1f9a:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f9e:	4b3f      	ldr	r3, [pc, #252]	; (209c <event_conn_upd_prep+0x33c>)
    1fa0:	9307      	str	r3, [sp, #28]
    1fa2:	4b3f      	ldr	r3, [pc, #252]	; (20a0 <event_conn_upd_prep+0x340>)
    1fa4:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
    1fa6:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1fa8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
    1fac:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1fb0:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1fb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1fb6:	2300      	movs	r3, #0
    1fb8:	f7fe ff46 	bl	e48 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1fbc:	4643      	mov	r3, r8
    1fbe:	e9cd 5001 	strd	r5, r0, [sp, #4]
    1fc2:	9700      	str	r7, [sp, #0]
    1fc4:	4652      	mov	r2, sl
    1fc6:	2101      	movs	r1, #1
    1fc8:	2000      	movs	r0, #0
    1fca:	f00f f9a5 	bl	11318 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1fce:	f030 0302 	bics.w	r3, r0, #2
    1fd2:	d00c      	beq.n	1fee <event_conn_upd_prep+0x28e>
    1fd4:	4a28      	ldr	r2, [pc, #160]	; (2078 <event_conn_upd_prep+0x318>)
    1fd6:	492f      	ldr	r1, [pc, #188]	; (2094 <event_conn_upd_prep+0x334>)
    1fd8:	4829      	ldr	r0, [pc, #164]	; (2080 <event_conn_upd_prep+0x320>)
    1fda:	f640 233f 	movw	r3, #2623	; 0xa3f
    1fde:	f01f f959 	bl	21294 <printk>
    1fe2:	4040      	eors	r0, r0
    1fe4:	f380 8811 	msr	BASEPRI, r0
    1fe8:	f04f 0003 	mov.w	r0, #3
    1fec:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1fee:	f1b9 0f00 	cmp.w	r9, #0
    1ff2:	f040 8123 	bne.w	223c <event_conn_upd_prep+0x4dc>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    1ff6:	4648      	mov	r0, r9
	}

	return -EINPROGRESS;
}
    1ff8:	b00b      	add	sp, #44	; 0x2c
    1ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    1ffe:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
    2002:	2a00      	cmp	r2, #0
    2004:	f43f aed0 	beq.w	1da8 <event_conn_upd_prep+0x48>
			conn->slave.llcp_type = LLCP_NONE;
    2008:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
    200c:	e6d0      	b.n	1db0 <event_conn_upd_prep+0x50>
		if ((conn->llcp_cu.interval != lll->interval) ||
    200e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    2010:	4291      	cmp	r1, r2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2012:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
		if ((conn->llcp_cu.interval != lll->interval) ||
    2016:	f47f aef7 	bne.w	1e08 <event_conn_upd_prep+0xa8>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    201a:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    201e:	fb0c fe03 	mul.w	lr, ip, r3
    2022:	f242 7c10 	movw	ip, #10000	; 0x2710
    2026:	fb0c ec01 	mla	ip, ip, r1, lr
    202a:	f10c 3cff 	add.w	ip, ip, #4294967295
    202e:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2032:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
    2036:	fa1f fc8c 	uxth.w	ip, ip
    203a:	45e6      	cmp	lr, ip
    203c:	f47f aee4 	bne.w	1e08 <event_conn_upd_prep+0xa8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2040:	2301      	movs	r3, #1
    2042:	712b      	strb	r3, [r5, #4]
    2044:	e6eb      	b.n	1e1e <event_conn_upd_prep+0xbe>
		LL_ASSERT(rx && rx->hdr.link);
    2046:	4a0c      	ldr	r2, [pc, #48]	; (2078 <event_conn_upd_prep+0x318>)
    2048:	4916      	ldr	r1, [pc, #88]	; (20a4 <event_conn_upd_prep+0x344>)
    204a:	480d      	ldr	r0, [pc, #52]	; (2080 <event_conn_upd_prep+0x320>)
    204c:	f640 137a 	movw	r3, #2426	; 0x97a
    2050:	f01f f920 	bl	21294 <printk>
    2054:	4040      	eors	r0, r0
    2056:	f380 8811 	msr	BASEPRI, r0
    205a:	f04f 0003 	mov.w	r0, #3
    205e:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2060:	6828      	ldr	r0, [r5, #0]
    2062:	e6c4      	b.n	1dee <event_conn_upd_prep+0x8e>
    2064:	f3af 8000 	nop.w
    2068:	1afd498d 	.word	0x1afd498d
    206c:	00000007 	.word	0x00000007
    2070:	2000e3a4 	.word	0x2000e3a4
    2074:	3b9aca00 	.word	0x3b9aca00
    2078:	00027f70 	.word	0x00027f70
    207c:	00027b4c 	.word	0x00027b4c
    2080:	00027ab4 	.word	0x00027ab4
    2084:	026259ff 	.word	0x026259ff
    2088:	01c9c37f 	.word	0x01c9c37f
    208c:	2000e1d0 	.word	0x2000e1d0
    2090:	00014ab9 	.word	0x00014ab9
    2094:	00028050 	.word	0x00028050
    2098:	1afd498d 	.word	0x1afd498d
    209c:	00014a61 	.word	0x00014a61
    20a0:	00018e55 	.word	0x00018e55
    20a4:	0002803c 	.word	0x0002803c
		rx = ll_pdu_rx_alloc_peek(1);
    20a8:	2001      	movs	r0, #1
    20aa:	f011 fd07 	bl	13abc <ll_pdu_rx_alloc_peek>
		if (!rx) {
    20ae:	4607      	mov	r7, r0
    20b0:	2800      	cmp	r0, #0
    20b2:	f000 80de 	beq.w	2272 <event_conn_upd_prep+0x512>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    20b6:	4876      	ldr	r0, [pc, #472]	; (2290 <event_conn_upd_prep+0x530>)
    20b8:	f00d fee6 	bl	fe88 <mem_acquire>
		if (!tx) {
    20bc:	4605      	mov	r5, r0
    20be:	2800      	cmp	r0, #0
    20c0:	f000 80d7 	beq.w	2272 <event_conn_upd_prep+0x512>
		(void)ll_pdu_rx_alloc();
    20c4:	f011 fd18 	bl	13af8 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20c8:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    20ca:	683a      	ldr	r2, [r7, #0]
    20cc:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    20d0:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20d2:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
    20d6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    20da:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    20dc:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    20de:	230c      	movs	r3, #12
    20e0:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    20e2:	71e9      	strb	r1, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    20e4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    20e8:	722b      	strb	r3, [r5, #8]
		conn->llcp.conn_upd.instant = event_counter +
    20ea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    20ec:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
		conn->llcp.conn_upd.instant = event_counter +
    20f0:	441e      	add	r6, r3
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    20f2:	4b68      	ldr	r3, [pc, #416]	; (2294 <event_conn_upd_prep+0x534>)
    20f4:	fba3 3202 	umull	r3, r2, r3, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    20f8:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    20fc:	f8a5 300b 	strh.w	r3, [r5, #11]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2100:	0a92      	lsrs	r2, r2, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    2102:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    2106:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    210a:	f8a5 300d 	strh.w	r3, [r5, #13]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    210e:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    2112:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
    2116:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
    211a:	3606      	adds	r6, #6
	    conn->tx_head &&
    211c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
					      conn->lll.latency + 6;
    2120:	b2b6      	uxth	r6, r6
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2122:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    2126:	f8a4 60ec 	strh.w	r6, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    212a:	f884 2112 	strb.w	r2, [r4, #274]	; 0x112
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    212e:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
    2132:	2b00      	cmp	r3, #0
    2134:	f000 8091 	beq.w	225a <event_conn_upd_prep+0x4fa>
	    !conn->llcp_enc.pause_tx &&
    2138:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
    213c:	0790      	lsls	r0, r2, #30
    213e:	f100 808c 	bmi.w	225a <event_conn_upd_prep+0x4fa>
	    !conn->llcp_phy.pause_tx &&
    2142:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
    2146:	07d1      	lsls	r1, r2, #31
    2148:	f100 8087 	bmi.w	225a <event_conn_upd_prep+0x4fa>
		if (conn->tx_head == conn->tx_data) {
    214c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    2150:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2152:	bf04      	itt	eq
    2154:	681a      	ldreq	r2, [r3, #0]
    2156:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
    215a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    215e:	2a00      	cmp	r2, #0
    2160:	d17e      	bne.n	2260 <event_conn_upd_prep+0x500>
			tx->next = conn->tx_head->next;
    2162:	681a      	ldr	r2, [r3, #0]
    2164:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2166:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    2168:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    216a:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
	if (!tx->next) {
    216e:	b90b      	cbnz	r3, 2174 <event_conn_upd_prep+0x414>
		conn->tx_data_last = tx;
    2170:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	return -EINPROGRESS;
    2174:	f06f 0043 	mvn.w	r0, #67	; 0x43
}
    2178:	b00b      	add	sp, #44	; 0x2c
    217a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    217e:	fb05 0111 	mls	r1, r5, r1, r0
    2182:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2186:	4844      	ldr	r0, [pc, #272]	; (2298 <event_conn_upd_prep+0x538>)
    2188:	b289      	uxth	r1, r1
    218a:	fb03 f101 	mul.w	r1, r3, r1
    218e:	fba1 0100 	umull	r0, r1, r1, r0
    2192:	a33d      	add	r3, pc, #244	; (adr r3, 2288 <event_conn_upd_prep+0x528>)
    2194:	e9d3 2300 	ldrd	r2, r3, [r3]
    2198:	f7fe fe56 	bl	e48 <__aeabi_uldivmod>
    219c:	eba8 0800 	sub.w	r8, r8, r0
    21a0:	e670      	b.n	1e84 <event_conn_upd_prep+0x124>
		conn_upd_curr = conn;
    21a2:	6028      	str	r0, [r5, #0]
    21a4:	e5e7      	b.n	1d76 <event_conn_upd_prep+0x16>
				lll->slave.window_widening_periodic_us *
    21a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
    21a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    21aa:	fb02 331b 	mls	r3, r2, fp, r3
    21ae:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    21b0:	f018 fc52 	bl	1aa58 <lll_clock_ppm_local_get>
    21b4:	4605      	mov	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    21b6:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    21ba:	f3c0 0082 	ubfx	r0, r0, #2, #3
    21be:	f018 fc4d 	bl	1aa5c <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    21c2:	4405      	add	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    21c4:	fb06 f505 	mul.w	r5, r6, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    21c8:	4b34      	ldr	r3, [pc, #208]	; (229c <event_conn_upd_prep+0x53c>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    21ca:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    21ce:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    21d2:	f205 253f 	addw	r5, r5, #575	; 0x23f
    21d6:	fba3 3505 	umull	r3, r5, r3, r5
    21da:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    21dc:	fb07 f202 	mul.w	r2, r7, r2
			lll->slave.window_widening_prepare_us +=
    21e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			lll->slave.window_size_prepare_us =
    21e2:	6562      	str	r2, [r4, #84]	; 0x54
				lll->slave.window_widening_periodic_us *
    21e4:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    21e8:	0872      	lsrs	r2, r6, #1
			lll->slave.window_widening_prepare_us +=
    21ea:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    21ec:	3a96      	subs	r2, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    21ee:	4293      	cmp	r3, r2
    21f0:	bf28      	it	cs
    21f2:	4613      	movcs	r3, r2
			lll->slave.window_widening_periodic_us =
    21f4:	6465      	str	r5, [r4, #68]	; 0x44
			periodic_us -= lll->slave.window_widening_periodic_us;
    21f6:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    21fa:	4d27      	ldr	r5, [pc, #156]	; (2298 <event_conn_upd_prep+0x538>)
			lll->slave.window_widening_prepare_us +=
    21fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
			conn->slave.ticks_to_offset = 0U;
    2200:	2300      	movs	r3, #0
    2202:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2206:	fba0 0105 	umull	r0, r1, r0, r5
    220a:	a31f      	add	r3, pc, #124	; (adr r3, 2288 <event_conn_upd_prep+0x528>)
    220c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2210:	f7fe fe1a 	bl	e48 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2214:	491f      	ldr	r1, [pc, #124]	; (2294 <event_conn_upd_prep+0x534>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2216:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    221a:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    221e:	fba1 3000 	umull	r3, r0, r1, r0
    2222:	0a80      	lsrs	r0, r0, #10
    2224:	fb07 f000 	mul.w	r0, r7, r0
    2228:	a317      	add	r3, pc, #92	; (adr r3, 2288 <event_conn_upd_prep+0x528>)
    222a:	e9d3 2300 	ldrd	r2, r3, [r3]
    222e:	fba0 0105 	umull	r0, r1, r0, r5
    2232:	f7fe fe09 	bl	e48 <__aeabi_uldivmod>
    2236:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    223a:	e642      	b.n	1ec2 <event_conn_upd_prep+0x162>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    223c:	2201      	movs	r2, #1
    223e:	4610      	mov	r0, r2
    2240:	2102      	movs	r1, #2
    2242:	f00d fec7 	bl	ffd4 <mayfly_enable>
		return 0;
    2246:	2000      	movs	r0, #0
}
    2248:	b00b      	add	sp, #44	; 0x2c
    224a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conn->procedure_expire = 0U;
    224e:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2250:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
			conn->procedure_expire = 0U;
    2254:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    2258:	e5bb      	b.n	1dd2 <event_conn_upd_prep+0x72>
		if (!conn->tx_ctrl) {
    225a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    225e:	b16a      	cbz	r2, 227c <event_conn_upd_prep+0x51c>
	tx->next = conn->tx_ctrl_last->next;
    2260:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    2264:	681a      	ldr	r2, [r3, #0]
    2266:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    2268:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    226a:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    226c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
    2270:	e77d      	b.n	216e <event_conn_upd_prep+0x40e>
			return -ENOBUFS;
    2272:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2276:	b00b      	add	sp, #44	; 0x2c
    2278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    227c:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    227e:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
    2282:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    2286:	e772      	b.n	216e <event_conn_upd_prep+0x40e>
    2288:	1afd498d 	.word	0x1afd498d
    228c:	00000007 	.word	0x00000007
    2290:	2000e428 	.word	0x2000e428
    2294:	d1b71759 	.word	0xd1b71759
    2298:	3b9aca00 	.word	0x3b9aca00
    229c:	431bde83 	.word	0x431bde83

000022a0 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    22a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22a4:	b093      	sub	sp, #76	; 0x4c
    22a6:	4692      	mov	sl, r2
    22a8:	900a      	str	r0, [sp, #40]	; 0x28
	uint16_t win_delay_us;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    22aa:	6812      	ldr	r2, [r2, #0]
	conn = lll->hdr.parent;
    22ac:	4618      	mov	r0, r3
{
    22ae:	461d      	mov	r5, r3
    22b0:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    22b2:	6817      	ldr	r7, [r2, #0]
	conn = lll->hdr.parent;
    22b4:	f850 8b0c 	ldr.w	r8, [r0], #12

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    22b8:	2203      	movs	r2, #3
    22ba:	312e      	adds	r1, #46	; 0x2e
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    22bc:	f105 0908 	add.w	r9, r5, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    22c0:	f021 fc5b 	bl	23b7a <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    22c4:	f105 061c 	add.w	r6, r5, #28
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    22c8:	2204      	movs	r2, #4
    22ca:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    22ce:	4648      	mov	r0, r9
    22d0:	f021 fc53 	bl	23b7a <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    22d4:	2205      	movs	r2, #5
    22d6:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    22da:	4630      	mov	r0, r6
    22dc:	f021 fc4d 	bl	23b7a <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    22e0:	4630      	mov	r0, r6
    22e2:	2105      	movs	r1, #5
    22e4:	f00d ffa0 	bl	10228 <util_ones_count_get>
    22e8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    22ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    22f0:	f360 0205 	bfi	r2, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    22f4:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    22f6:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    22fa:	d90a      	bls.n	2312 <ull_slave_setup+0x72>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    22fc:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
    2300:	f001 021f 	and.w	r2, r1, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2304:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2306:	f3c1 0004 	ubfx	r0, r1, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    230a:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    230c:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2310:	d902      	bls.n	2318 <ull_slave_setup+0x78>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    2312:	b013      	add	sp, #76	; 0x4c
    2314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    2318:	f8da 2000 	ldr.w	r2, [sl]
    231c:	2000      	movs	r0, #0
    231e:	6090      	str	r0, [r2, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2320:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
	lll->interval = interval;
    2322:	826e      	strh	r6, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2324:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    2328:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    232c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    2330:	82aa      	strh	r2, [r5, #20]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2332:	f898 20dc 	ldrb.w	r2, [r8, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2336:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2338:	930c      	str	r3, [sp, #48]	; 0x30
	conn->slave.sca = pdu_adv->connect_ind.sca;
    233a:	0949      	lsrs	r1, r1, #5
    233c:	f361 0284 	bfi	r2, r1, #2, #3
    2340:	f888 20dc 	strb.w	r2, [r8, #220]	; 0xdc
		(((lll_clock_ppm_local_get() +
    2344:	f018 fb88 	bl	1aa58 <lll_clock_ppm_local_get>
    2348:	900b      	str	r0, [sp, #44]	; 0x2c
		   lll_clock_ppm_get(conn->slave.sca)) *
    234a:	f898 00dc 	ldrb.w	r0, [r8, #220]	; 0xdc
    234e:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2352:	f018 fb83 	bl	1aa5c <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    2356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2358:	4ac3      	ldr	r2, [pc, #780]	; (2668 <ull_slave_setup+0x3c8>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    235a:	49c4      	ldr	r1, [pc, #784]	; (266c <ull_slave_setup+0x3cc>)
	conn_interval_us = interval * CONN_INT_UNIT_US;
    235c:	f240 4be2 	movw	fp, #1250	; 0x4e2
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2360:	b2b6      	uxth	r6, r6
	conn_interval_us = interval * CONN_INT_UNIT_US;
    2362:	fb0b f606 	mul.w	r6, fp, r6
		(((lll_clock_ppm_local_get() +
    2366:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    2368:	fb06 f000 	mul.w	r0, r6, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    236c:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2370:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2374:	fba2 3000 	umull	r3, r0, r2, r0
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    2378:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    237c:	fb0b f202 	mul.w	r2, fp, r2
    2380:	63ea      	str	r2, [r5, #60]	; 0x3c
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2382:	0872      	lsrs	r2, r6, #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2384:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2386:	3a96      	subs	r2, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    2388:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    238a:	62ea      	str	r2, [r5, #44]	; 0x2c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    238c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    238e:	8aa8      	ldrh	r0, [r5, #20]
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2390:	4ab7      	ldr	r2, [pc, #732]	; (2670 <ull_slave_setup+0x3d0>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2392:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2396:	f242 7c10 	movw	ip, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    239a:	4431      	add	r1, r6
    239c:	fbb1 f1f6 	udiv	r1, r1, r6
    23a0:	f8a8 10ca 	strh.w	r1, [r8, #202]	; 0xca
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    23a4:	b299      	uxth	r1, r3
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    23a6:	fb0c 6101 	mla	r1, ip, r1, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    23aa:	4432      	add	r2, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    23ac:	3901      	subs	r1, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    23ae:	f100 0c06 	add.w	ip, r0, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    23b2:	fbb1 f1f6 	udiv	r1, r1, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    23b6:	fbb2 f2f6 	udiv	r2, r2, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    23ba:	f8a8 10c6 	strh.w	r1, [r8, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    23be:	b291      	uxth	r1, r2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    23c0:	4561      	cmp	r1, ip
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    23c2:	f8a8 10d2 	strh.w	r1, [r8, #210]	; 0xd2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    23c6:	dd02      	ble.n	23ce <ull_slave_setup+0x12e>
			     (conn->apto_reload - (lll->latency + 6)) :
    23c8:	1a09      	subs	r1, r1, r0
    23ca:	3906      	subs	r1, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    23cc:	b289      	uxth	r1, r1
    23ce:	f8a8 10ce 	strh.w	r1, [r8, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    23d2:	2204      	movs	r2, #4
    23d4:	4649      	mov	r1, r9
    23d6:	f108 00e0 	add.w	r0, r8, #224	; 0xe0
    23da:	f021 fbce 	bl	23b7a <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    23de:	7f22      	ldrb	r2, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    23e0:	f104 091e 	add.w	r9, r4, #30
	peer_addr_type = pdu_adv->tx_addr;
    23e4:	f3c2 1380 	ubfx	r3, r2, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    23e8:	4649      	mov	r1, r9
    23ea:	2206      	movs	r2, #6
    23ec:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
    23ee:	930f      	str	r3, [sp, #60]	; 0x3c
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    23f0:	f021 fbc3 	bl	23b7a <memcpy>
		chan_sel = pdu_adv->chan_sel;
    23f4:	7f22      	ldrb	r2, [r4, #28]
	cc->status = 0U;
    23f6:	f44f 7180 	mov.w	r1, #256	; 0x100
    23fa:	83a1      	strh	r1, [r4, #28]
		chan_sel = pdu_adv->chan_sel;
    23fc:	f3c2 1340 	ubfx	r3, r2, #5, #1
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2400:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    2404:	f89a b012 	ldrb.w	fp, [sl, #18]
		chan_sel = pdu_adv->chan_sel;
    2408:	930e      	str	r3, [sp, #56]	; 0x38
    240a:	930b      	str	r3, [sp, #44]	; 0x2c
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    240c:	f017 fdb0 	bl	19f70 <ull_filter_lll_lrpa_used>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    2410:	2206      	movs	r2, #6
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2412:	4601      	mov	r1, r0
    2414:	2800      	cmp	r0, #0
    2416:	f040 80ea 	bne.w	25ee <ull_slave_setup+0x34e>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    241a:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    241e:	f021 fbd7 	bl	23bd0 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    2422:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    2426:	f000 80ec 	beq.w	2602 <ull_slave_setup+0x362>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    242a:	4649      	mov	r1, r9
    242c:	4658      	mov	r0, fp
    242e:	f104 021f 	add.w	r2, r4, #31
    2432:	f017 f82b 	bl	1948c <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    2436:	7fa2      	ldrb	r2, [r4, #30]
    2438:	3202      	adds	r2, #2
    243a:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    243c:	a910      	add	r1, sp, #64	; 0x40
    243e:	2206      	movs	r2, #6
    2440:	f104 0025 	add.w	r0, r4, #37	; 0x25
    2444:	f021 fb99 	bl	23b7a <memcpy>
	cc->sca = conn->slave.sca;
    2448:	f898 20dc 	ldrb.w	r2, [r8, #220]	; 0xdc
	cc->interval = lll->interval;
    244c:	8a69      	ldrh	r1, [r5, #18]
	cc->timeout = timeout;
    244e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cc->interval = lll->interval;
    2452:	8661      	strh	r1, [r4, #50]	; 0x32
	cc->sca = conn->slave.sca;
    2454:	f3c2 0282 	ubfx	r2, r2, #2, #3
	cc->latency = lll->latency;
    2458:	8aa9      	ldrh	r1, [r5, #20]
    245a:	86a1      	strh	r1, [r4, #52]	; 0x34
	cc->timeout = timeout;
    245c:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = conn->slave.sca;
    245e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
    2462:	4640      	mov	r0, r8
    2464:	f012 ff02 	bl	1526c <ll_conn_handle_get>
		ll_rx_put(link, rx);
    2468:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    246a:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    246c:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    246e:	f8da 4004 	ldr.w	r4, [sl, #4]
		ll_rx_put(link, rx);
    2472:	980a      	ldr	r0, [sp, #40]	; 0x28
    2474:	f011 fb12 	bl	13a9c <ll_rx_put>
		rx->handle = lll->handle;
    2478:	8a2b      	ldrh	r3, [r5, #16]
    247a:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    247c:	2318      	movs	r3, #24
    247e:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    2480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    2482:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    2484:	2b00      	cmp	r3, #0
    2486:	f000 80cc 	beq.w	2622 <ull_slave_setup+0x382>
			lll->data_chan_sel = 1;
    248a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    248e:	892a      	ldrh	r2, [r5, #8]
    2490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2494:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    2498:	896b      	ldrh	r3, [r5, #10]
			lll->data_chan_id = aa_ms ^ aa_ls;
    249a:	4053      	eors	r3, r2
    249c:	846b      	strh	r3, [r5, #34]	; 0x22
			cs->csa = 0x01;
    249e:	2301      	movs	r3, #1
    24a0:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
    24a2:	4621      	mov	r1, r4
    24a4:	f011 fafa 	bl	13a9c <ll_rx_put>
	ll_rx_sched();
    24a8:	f011 fb02 	bl	13ab0 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    24ac:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
    24b0:	2101      	movs	r1, #1
    24b2:	f000 0007 	and.w	r0, r0, #7
    24b6:	f018 f9d5 	bl	1a864 <lll_radio_rx_ready_delay_get>
    24ba:	4683      	mov	fp, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    24bc:	486d      	ldr	r0, [pc, #436]	; (2674 <ull_slave_setup+0x3d4>)
	conn->evt.ticks_active_to_start = 0U;
    24be:	f04f 0900 	mov.w	r9, #0
	conn->evt.ticks_xtal_to_start =
    24c2:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    24c4:	f20b 4152 	addw	r1, fp, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    24c8:	f8c8 3000 	str.w	r3, [r8]
	conn->evt.ticks_preempt_to_start =
    24cc:	e9c8 9901 	strd	r9, r9, [r8, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    24d0:	a363      	add	r3, pc, #396	; (adr r3, 2660 <ull_slave_setup+0x3c0>)
    24d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    24d6:	fba1 0100 	umull	r0, r1, r1, r0
    24da:	f7fe fcb5 	bl	e48 <__aeabi_uldivmod>
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    24de:	6aab      	ldr	r3, [r5, #40]	; 0x28
	conn_offset_us = ftr->radio_end_us;
    24e0:	f8da 400c 	ldr.w	r4, [sl, #12]
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    24e4:	1af6      	subs	r6, r6, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    24e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    24e8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    24ec:	fb01 4403 	mla	r4, r1, r3, r4
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    24f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    24f4:	f204 3486 	addw	r4, r4, #902	; 0x386
	conn_offset_us -= ready_delay_us;
    24f8:	eba4 030b 	sub.w	r3, r4, fp
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    24fc:	464a      	mov	r2, r9
    24fe:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    2500:	f8c8 000c 	str.w	r0, [r8, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2504:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    2506:	930a      	str	r3, [sp, #40]	; 0x28
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2508:	f00d fd64 	bl	ffd4 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    250c:	4638      	mov	r0, r7
    250e:	f012 f8cd 	bl	146ac <ull_adv_handle_get>
    2512:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2514:	4b58      	ldr	r3, [pc, #352]	; (2678 <ull_slave_setup+0x3d8>)
    2516:	9700      	str	r7, [sp, #0]
    2518:	b2d2      	uxtb	r2, r2
    251a:	4648      	mov	r0, r9
    251c:	2101      	movs	r1, #1
    251e:	f00e ff85 	bl	1142c <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2522:	2801      	cmp	r0, #1
    2524:	f000 8089 	beq.w	263a <ull_slave_setup+0x39a>
	if (adv->lll.is_hdcd) {
    2528:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    252c:	07db      	lsls	r3, r3, #31
    252e:	d47c      	bmi.n	262a <ull_slave_setup+0x38a>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2530:	4640      	mov	r0, r8
    2532:	f012 fe9b 	bl	1526c <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2536:	f8df 913c 	ldr.w	r9, [pc, #316]	; 2674 <ull_slave_setup+0x3d4>
    253a:	fba6 4609 	umull	r4, r6, r6, r9
    253e:	a348      	add	r3, pc, #288	; (adr r3, 2660 <ull_slave_setup+0x3c0>)
    2540:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2544:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2546:	4631      	mov	r1, r6
    2548:	4620      	mov	r0, r4
    254a:	f7fe fc7d 	bl	e48 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    254e:	f8da 3008 	ldr.w	r3, [sl, #8]
    2552:	f8cd 8018 	str.w	r8, [sp, #24]
    2556:	f1a3 0a31 	sub.w	sl, r3, #49	; 0x31
    255a:	4b48      	ldr	r3, [pc, #288]	; (267c <ull_slave_setup+0x3dc>)
    255c:	9307      	str	r3, [sp, #28]
    255e:	4b48      	ldr	r3, [pc, #288]	; (2680 <ull_slave_setup+0x3e0>)
    2560:	9305      	str	r3, [sp, #20]
    2562:	f44f 73b6 	mov.w	r3, #364	; 0x16c
    2566:	9308      	str	r3, [sp, #32]
    2568:	f8d8 300c 	ldr.w	r3, [r8, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    256c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    2570:	4844      	ldr	r0, [pc, #272]	; (2684 <ull_slave_setup+0x3e4>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2572:	f04f 0b00 	mov.w	fp, #0
    2576:	e9cd b303 	strd	fp, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    257a:	fba7 0100 	umull	r0, r1, r7, r0
    257e:	2307      	movs	r3, #7
    2580:	1a20      	subs	r0, r4, r0
    2582:	fb03 1107 	mla	r1, r3, r7, r1
    2586:	eb66 0101 	sbc.w	r1, r6, r1
    258a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    258e:	2300      	movs	r3, #0
    2590:	f7fe fc5a 	bl	e48 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2596:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    259a:	fba3 0109 	umull	r0, r1, r3, r9
    259e:	a330      	add	r3, pc, #192	; (adr r3, 2660 <ull_slave_setup+0x3c0>)
    25a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    25a4:	f7fe fc50 	bl	e48 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    25a8:	3503      	adds	r5, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    25aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25ae:	b2ed      	uxtb	r5, r5
    25b0:	9000      	str	r0, [sp, #0]
    25b2:	4653      	mov	r3, sl
    25b4:	462a      	mov	r2, r5
    25b6:	2101      	movs	r1, #1
    25b8:	4658      	mov	r0, fp
    25ba:	f00e fead 	bl	11318 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    25be:	f030 0302 	bics.w	r3, r0, #2
    25c2:	d00c      	beq.n	25de <ull_slave_setup+0x33e>
    25c4:	4a30      	ldr	r2, [pc, #192]	; (2688 <ull_slave_setup+0x3e8>)
    25c6:	4931      	ldr	r1, [pc, #196]	; (268c <ull_slave_setup+0x3ec>)
    25c8:	4831      	ldr	r0, [pc, #196]	; (2690 <ull_slave_setup+0x3f0>)
    25ca:	f240 136d 	movw	r3, #365	; 0x16d
    25ce:	f01e fe61 	bl	21294 <printk>
    25d2:	4040      	eors	r0, r0
    25d4:	f380 8811 	msr	BASEPRI, r0
    25d8:	f04f 0003 	mov.w	r0, #3
    25dc:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    25de:	2201      	movs	r2, #1
    25e0:	2102      	movs	r1, #2
    25e2:	4610      	mov	r0, r2
    25e4:	f00d fcf6 	bl	ffd4 <mayfly_enable>
}
    25e8:	b013      	add	sp, #76	; 0x4c
    25ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    25ee:	f104 0124 	add.w	r1, r4, #36	; 0x24
    25f2:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    25f6:	f021 fac0 	bl	23b7a <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    25fa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    25fe:	f47f af14 	bne.w	242a <ull_slave_setup+0x18a>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    2602:	2206      	movs	r2, #6
    2604:	2100      	movs	r1, #0
    2606:	f104 0025 	add.w	r0, r4, #37	; 0x25
    260a:	f021 fae1 	bl	23bd0 <memset>
		cc->peer_addr_type = peer_addr_type;
    260e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    2612:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    2614:	a910      	add	r1, sp, #64	; 0x40
    2616:	2206      	movs	r2, #6
    2618:	f104 001f 	add.w	r0, r4, #31
    261c:	f021 faad 	bl	23b7a <memcpy>
    2620:	e712      	b.n	2448 <ull_slave_setup+0x1a8>
			cs->csa = 0x00;
    2622:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2626:	7723      	strb	r3, [r4, #28]
    2628:	e73b      	b.n	24a2 <ull_slave_setup+0x202>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    262a:	2300      	movs	r3, #0
    262c:	2201      	movs	r2, #1
    262e:	9300      	str	r3, [sp, #0]
    2630:	4618      	mov	r0, r3
    2632:	4611      	mov	r1, r2
    2634:	f00e fefa 	bl	1142c <ticker_stop>
    2638:	e77a      	b.n	2530 <ull_slave_setup+0x290>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    263a:	f011 fb0b 	bl	13c54 <ull_disable_mark_get>
    263e:	4287      	cmp	r7, r0
    2640:	f43f af72 	beq.w	2528 <ull_slave_setup+0x288>
    2644:	4a10      	ldr	r2, [pc, #64]	; (2688 <ull_slave_setup+0x3e8>)
    2646:	4913      	ldr	r1, [pc, #76]	; (2694 <ull_slave_setup+0x3f4>)
    2648:	4811      	ldr	r0, [pc, #68]	; (2690 <ull_slave_setup+0x3f0>)
    264a:	f240 13fd 	movw	r3, #509	; 0x1fd
    264e:	f01e fe21 	bl	21294 <printk>
    2652:	4040      	eors	r0, r0
    2654:	f380 8811 	msr	BASEPRI, r0
    2658:	f04f 0003 	mov.w	r0, #3
    265c:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    265e:	e763      	b.n	2528 <ull_slave_setup+0x288>
    2660:	1afd498d 	.word	0x1afd498d
    2664:	00000007 	.word	0x00000007
    2668:	431bde83 	.word	0x431bde83
    266c:	026259ff 	.word	0x026259ff
    2670:	01c9c37f 	.word	0x01c9c37f
    2674:	3b9aca00 	.word	0x3b9aca00
    2678:	00018e19 	.word	0x00018e19
    267c:	00018de9 	.word	0x00018de9
    2680:	00018e55 	.word	0x00018e55
    2684:	1afd498d 	.word	0x1afd498d
    2688:	00028198 	.word	0x00028198
    268c:	00028050 	.word	0x00028050
    2690:	00027ab4 	.word	0x00027ab4
    2694:	000281f0 	.word	0x000281f0

00002698 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    2698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    269c:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    269e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2778 <nrf_flash_sync_exe+0xe0>
{
    26a2:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    26a4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    26a8:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    26ac:	f011 fa6e 	bl	13b8c <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
    26b0:	4f32      	ldr	r7, [pc, #200]	; (277c <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
    26b2:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    26b6:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
    26ba:	f00e fef9 	bl	114b0 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    26be:	f8d8 4000 	ldr.w	r4, [r8]
    26c2:	fba4 5407 	umull	r5, r4, r4, r7
    26c6:	a32a      	add	r3, pc, #168	; (adr r3, 2770 <nrf_flash_sync_exe+0xd8>)
    26c8:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    26cc:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
    26ce:	4621      	mov	r1, r4
    26d0:	4628      	mov	r0, r5
    26d2:	f7fe fbb9 	bl	e48 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    26d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
    26d8:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    26da:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    26de:	9306      	str	r3, [sp, #24]
    26e0:	4b27      	ldr	r3, [pc, #156]	; (2780 <nrf_flash_sync_exe+0xe8>)
    26e2:	9305      	str	r3, [sp, #20]
    26e4:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    26e6:	a322      	add	r3, pc, #136	; (adr r3, 2770 <nrf_flash_sync_exe+0xd8>)
    26e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    26ec:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
    26f0:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    26f4:	f7fe fba8 	bl	e48 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    26f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
    26fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26fe:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    2702:	4820      	ldr	r0, [pc, #128]	; (2784 <nrf_flash_sync_exe+0xec>)
    2704:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
    2708:	fba7 0100 	umull	r0, r1, r7, r0
    270c:	2307      	movs	r3, #7
    270e:	1a28      	subs	r0, r5, r0
    2710:	fb03 1107 	mla	r1, r3, r7, r1
    2714:	eb64 0101 	sbc.w	r1, r4, r1
    2718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    271c:	2300      	movs	r3, #0
    271e:	f7fe fb93 	bl	e48 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2722:	9600      	str	r6, [sp, #0]
    2724:	e9cd 7001 	strd	r7, r0, [sp, #4]
    2728:	464b      	mov	r3, r9
    272a:	465a      	mov	r2, fp
    272c:	2103      	movs	r1, #3
    272e:	4650      	mov	r0, sl
    2730:	f00e fdf2 	bl	11318 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    2734:	f030 0402 	bics.w	r4, r0, #2
    2738:	d116      	bne.n	2768 <nrf_flash_sync_exe+0xd0>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    273a:	4a13      	ldr	r2, [pc, #76]	; (2788 <nrf_flash_sync_exe+0xf0>)
    273c:	4813      	ldr	r0, [pc, #76]	; (278c <nrf_flash_sync_exe+0xf4>)
    273e:	2300      	movs	r3, #0
    2740:	f01d fa6e 	bl	1fc20 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    2744:	b168      	cbz	r0, 2762 <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    2746:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    274a:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    274e:	9400      	str	r4, [sp, #0]
    2750:	4623      	mov	r3, r4
    2752:	2103      	movs	r1, #3
    2754:	f00e fe6a 	bl	1142c <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    2758:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    275c:	b00f      	add	sp, #60	; 0x3c
    275e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    2762:	f8d8 000c 	ldr.w	r0, [r8, #12]
    2766:	e7f9      	b.n	275c <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
    2768:	f06f 0047 	mvn.w	r0, #71	; 0x47
	return result;
    276c:	e7f6      	b.n	275c <nrf_flash_sync_exe+0xc4>
    276e:	bf00      	nop
    2770:	1afd498d 	.word	0x1afd498d
    2774:	00000007 	.word	0x00000007
    2778:	2000eb60 	.word	0x2000eb60
    277c:	3b9aca00 	.word	0x3b9aca00
    2780:	0001db7d 	.word	0x0001db7d
    2784:	1afd498d 	.word	0x1afd498d
    2788:	000b7b44 	.word	0x000b7b44
    278c:	2000eb70 	.word	0x2000eb70

00002790 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    2790:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    2792:	4d0f      	ldr	r5, [pc, #60]	; (27d0 <nrf_flash_sync_check_time_limit+0x40>)
{
    2794:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    2796:	f00e fe8b 	bl	114b0 <ticker_ticks_now_get>
    279a:	68a9      	ldr	r1, [r5, #8]
    279c:	f00e fe8a 	bl	114b4 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    27a0:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
    27a2:	fbb0 f4f4 	udiv	r4, r0, r4
    27a6:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    27a8:	480a      	ldr	r0, [pc, #40]	; (27d4 <nrf_flash_sync_check_time_limit+0x44>)
    27aa:	a307      	add	r3, pc, #28	; (adr r3, 27c8 <nrf_flash_sync_check_time_limit+0x38>)
    27ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    27b0:	fba1 0100 	umull	r0, r1, r1, r0
    27b4:	f7fe fb48 	bl	e48 <__aeabi_uldivmod>
    27b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    27bc:	4284      	cmp	r4, r0
    27be:	bf94      	ite	ls
    27c0:	2000      	movls	r0, #0
    27c2:	2001      	movhi	r0, #1
    27c4:	bd38      	pop	{r3, r4, r5, pc}
    27c6:	bf00      	nop
    27c8:	1afd498d 	.word	0x1afd498d
    27cc:	00000007 	.word	0x00000007
    27d0:	2000eb60 	.word	0x2000eb60
    27d4:	3b9aca00 	.word	0x3b9aca00

000027d8 <vnd_ccc_cfg_changed>:
	printk("CSTM notifications %s", notif_enabled ? "enabled" : "disabled");
    27d8:	4a04      	ldr	r2, [pc, #16]	; (27ec <vnd_ccc_cfg_changed+0x14>)
    27da:	4b05      	ldr	r3, [pc, #20]	; (27f0 <vnd_ccc_cfg_changed+0x18>)
    27dc:	4805      	ldr	r0, [pc, #20]	; (27f4 <vnd_ccc_cfg_changed+0x1c>)
    27de:	2901      	cmp	r1, #1
    27e0:	bf0c      	ite	eq
    27e2:	4611      	moveq	r1, r2
    27e4:	4619      	movne	r1, r3
    27e6:	f01e bd55 	b.w	21294 <printk>
    27ea:	bf00      	nop
    27ec:	000289d2 	.word	0x000289d2
    27f0:	000289da 	.word	0x000289da
    27f4:	000289e3 	.word	0x000289e3

000027f8 <disconnected>:
	printk("Disconnected (reason 0x%02x)\n", reason);
    27f8:	4801      	ldr	r0, [pc, #4]	; (2800 <disconnected+0x8>)
    27fa:	f01e bd4b 	b.w	21294 <printk>
    27fe:	bf00      	nop
    2800:	000289f9 	.word	0x000289f9

00002804 <connected>:
	if (err) {
    2804:	b111      	cbz	r1, 280c <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    2806:	4803      	ldr	r0, [pc, #12]	; (2814 <connected+0x10>)
    2808:	f01e bd44 	b.w	21294 <printk>
		printk("Connected\n");
    280c:	4802      	ldr	r0, [pc, #8]	; (2818 <connected+0x14>)
    280e:	f01e bd41 	b.w	21294 <printk>
    2812:	bf00      	nop
    2814:	00028a17 	.word	0x00028a17
    2818:	00028a37 	.word	0x00028a37

0000281c <hrs_notify>:
	if (heart_rate > 200U) {
    281c:	4b04      	ldr	r3, [pc, #16]	; (2830 <hrs_notify+0x14>)
    281e:	681a      	ldr	r2, [r3, #0]
    2820:	2ac8      	cmp	r2, #200	; 0xc8
		heart_rate = 0U;
    2822:	bf84      	itt	hi
    2824:	2200      	movhi	r2, #0
    2826:	601a      	strhi	r2, [r3, #0]
	bt_hrs_notify(heart_rate);
    2828:	8818      	ldrh	r0, [r3, #0]
    282a:	f002 bfe5 	b.w	57f8 <bt_hrs_notify>
    282e:	bf00      	nop
    2830:	2000ad18 	.word	0x2000ad18

00002834 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    2834:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    2836:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    2838:	b08a      	sub	sp, #40	; 0x28
    283a:	4604      	mov	r4, r0
    283c:	460e      	mov	r6, r1
    283e:	ad07      	add	r5, sp, #28
    2840:	2b03      	cmp	r3, #3
    2842:	d820      	bhi.n	2886 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    2844:	e8df f003 	tbb	[pc, r3]
    2848:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    284c:	4911      	ldr	r1, [pc, #68]	; (2894 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    284e:	4628      	mov	r0, r5
    2850:	f021 f939 	bl	23ac6 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2854:	7863      	ldrb	r3, [r4, #1]
    2856:	9304      	str	r3, [sp, #16]
    2858:	78a3      	ldrb	r3, [r4, #2]
    285a:	9303      	str	r3, [sp, #12]
    285c:	78e3      	ldrb	r3, [r4, #3]
    285e:	9302      	str	r3, [sp, #8]
    2860:	7923      	ldrb	r3, [r4, #4]
    2862:	9301      	str	r3, [sp, #4]
    2864:	7963      	ldrb	r3, [r4, #5]
    2866:	9300      	str	r3, [sp, #0]
    2868:	4a0b      	ldr	r2, [pc, #44]	; (2898 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    286a:	79a3      	ldrb	r3, [r4, #6]
    286c:	9505      	str	r5, [sp, #20]
    286e:	211e      	movs	r1, #30
    2870:	4630      	mov	r0, r6
    2872:	f01e fd1c 	bl	212ae <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    2876:	b00a      	add	sp, #40	; 0x28
    2878:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    287a:	4908      	ldr	r1, [pc, #32]	; (289c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    287c:	e7e7      	b.n	284e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    287e:	4908      	ldr	r1, [pc, #32]	; (28a0 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    2880:	e7e5      	b.n	284e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    2882:	4908      	ldr	r1, [pc, #32]	; (28a4 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    2884:	e7e3      	b.n	284e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2886:	4a08      	ldr	r2, [pc, #32]	; (28a8 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    2888:	210a      	movs	r1, #10
    288a:	4628      	mov	r0, r5
    288c:	f01e fd0f 	bl	212ae <snprintk>
		break;
    2890:	e7e0      	b.n	2854 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    2892:	bf00      	nop
    2894:	00028a42 	.word	0x00028a42
    2898:	00028a64 	.word	0x00028a64
    289c:	00028a49 	.word	0x00028a49
    28a0:	00028a50 	.word	0x00028a50
    28a4:	00028a5a 	.word	0x00028a5a
    28a8:	0002ca15 	.word	0x0002ca15

000028ac <auth_cancel>:
{
    28ac:	b500      	push	{lr}
    28ae:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    28b0:	f021 fdd4 	bl	2445c <bt_conn_get_dst>
    28b4:	4669      	mov	r1, sp
    28b6:	f7ff ffbd 	bl	2834 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing cancelled: %s\n", addr);
    28ba:	4803      	ldr	r0, [pc, #12]	; (28c8 <auth_cancel+0x1c>)
    28bc:	4669      	mov	r1, sp
    28be:	f01e fce9 	bl	21294 <printk>
}
    28c2:	b009      	add	sp, #36	; 0x24
    28c4:	f85d fb04 	ldr.w	pc, [sp], #4
    28c8:	00028a87 	.word	0x00028a87

000028cc <auth_passkey_display>:
{
    28cc:	b510      	push	{r4, lr}
    28ce:	b088      	sub	sp, #32
    28d0:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    28d2:	f021 fdc3 	bl	2445c <bt_conn_get_dst>
    28d6:	4669      	mov	r1, sp
    28d8:	f7ff ffac 	bl	2834 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
    28dc:	4803      	ldr	r0, [pc, #12]	; (28ec <auth_passkey_display+0x20>)
    28de:	4622      	mov	r2, r4
    28e0:	4669      	mov	r1, sp
    28e2:	f01e fcd7 	bl	21294 <printk>
}
    28e6:	b008      	add	sp, #32
    28e8:	bd10      	pop	{r4, pc}
    28ea:	bf00      	nop
    28ec:	00028a9e 	.word	0x00028a9e

000028f0 <buzzer_task>:
{
    28f0:	b508      	push	{r3, lr}
		if (latch_status == false)
    28f2:	4c05      	ldr	r4, [pc, #20]	; (2908 <buzzer_task+0x18>)
    28f4:	7823      	ldrb	r3, [r4, #0]
    28f6:	b913      	cbnz	r3, 28fe <buzzer_task+0xe>
			toggle_buzzer(1);
    28f8:	2001      	movs	r0, #1
    28fa:	f001 fc75 	bl	41e8 <toggle_buzzer>
		k_msleep(500);
    28fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2902:	f01d fe08 	bl	20516 <k_msleep.isra.0>
		if (latch_status == false)
    2906:	e7f5      	b.n	28f4 <buzzer_task+0x4>
    2908:	2000082b 	.word	0x2000082b

0000290c <vibration_task>:
{
    290c:	b508      	push	{r3, lr}
		if (latch_status == false)
    290e:	4c06      	ldr	r4, [pc, #24]	; (2928 <vibration_task+0x1c>)
    2910:	7823      	ldrb	r3, [r4, #0]
    2912:	b93b      	cbnz	r3, 2924 <vibration_task+0x18>
			toggle_motor(1); //1
    2914:	2001      	movs	r0, #1
			toggle_motor(0); //0
    2916:	f001 fc81 	bl	421c <toggle_motor>
		k_msleep(500);
    291a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    291e:	f01d fdfa 	bl	20516 <k_msleep.isra.0>
		if (latch_status == false)
    2922:	e7f5      	b.n	2910 <vibration_task+0x4>
			toggle_motor(0); //0
    2924:	2000      	movs	r0, #0
    2926:	e7f6      	b.n	2916 <vibration_task+0xa>
    2928:	2000082b 	.word	0x2000082b

0000292c <latch_sensor_task>:
{
    292c:	b508      	push	{r3, lr}
	init_latch();
    292e:	f000 fe57 	bl	35e0 <init_latch>
	init_output();
    2932:	f001 fc1d 	bl	4170 <init_output>
		latch_status = detect_latch();
    2936:	4c04      	ldr	r4, [pc, #16]	; (2948 <latch_sensor_task+0x1c>)
    2938:	f000 feba 	bl	36b0 <detect_latch>
    293c:	7020      	strb	r0, [r4, #0]
		k_msleep(500);
    293e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2942:	f01d fde8 	bl	20516 <k_msleep.isra.0>
	while (1)
    2946:	e7f7      	b.n	2938 <latch_sensor_task+0xc>
    2948:	2000082b 	.word	0x2000082b

0000294c <sensors_read_task>:
{
    294c:	b508      	push	{r3, lr}
	initialize_bma();
    294e:	f000 fa59 	bl	2e04 <initialize_bma>
	stepCounterEnable();
    2952:	f000 fab3 	bl	2ebc <stepCounterEnable>
	init_max30102();
    2956:	f000 fcbd 	bl	32d4 <init_max30102>
	set_max30102_for_reading_data();
    295a:	f01e f94b 	bl	20bf4 <set_max30102_for_reading_data>
	first_data_read();
    295e:	f000 fd3f 	bl	33e0 <first_data_read>
	init_max30208();
    2962:	f000 ff25 	bl	37b0 <init_max30208>
	configure_max30208();
    2966:	f000 ff41 	bl	37ec <configure_max30208>
	configure_mpu6050();
    296a:	f000 ff75 	bl	3858 <configure_mpu6050>
	display_mode = DISPLAY_MODE_TIME;
    296e:	4b11      	ldr	r3, [pc, #68]	; (29b4 <sensors_read_task+0x68>)
		switch (sensor_mode)
    2970:	4e11      	ldr	r6, [pc, #68]	; (29b8 <sensors_read_task+0x6c>)
			read_heart_rate_spio2(&heart_rate, &sp02, &valid_hr, &valid_sp02);
    2972:	4d12      	ldr	r5, [pc, #72]	; (29bc <sensors_read_task+0x70>)
    2974:	4c12      	ldr	r4, [pc, #72]	; (29c0 <sensors_read_task+0x74>)
	display_mode = DISPLAY_MODE_TIME;
    2976:	2201      	movs	r2, #1
    2978:	601a      	str	r2, [r3, #0]
		switch (sensor_mode)
    297a:	6833      	ldr	r3, [r6, #0]
    297c:	b1ab      	cbz	r3, 29aa <sensors_read_task+0x5e>
    297e:	2b01      	cmp	r3, #1
    2980:	d1fc      	bne.n	297c <sensors_read_task+0x30>
			read_heart_rate_spio2(&heart_rate, &sp02, &valid_hr, &valid_sp02);
    2982:	4910      	ldr	r1, [pc, #64]	; (29c4 <sensors_read_task+0x78>)
    2984:	4810      	ldr	r0, [pc, #64]	; (29c8 <sensors_read_task+0x7c>)
    2986:	4622      	mov	r2, r4
    2988:	462b      	mov	r3, r5
    298a:	f000 fd89 	bl	34a0 <read_heart_rate_spio2>
			max30208_read_temp(&temp_data);
    298e:	480f      	ldr	r0, [pc, #60]	; (29cc <sensors_read_task+0x80>)
    2990:	f7fe fc22 	bl	11d8 <max30208_read_temp>
			steps = getStepCounterOutput();
    2994:	f000 fb1c 	bl	2fd0 <getStepCounterOutput>
    2998:	4b0d      	ldr	r3, [pc, #52]	; (29d0 <sensors_read_task+0x84>)
    299a:	6018      	str	r0, [r3, #0]
			mpu6050_read_Acc(&mpu_data);
    299c:	480d      	ldr	r0, [pc, #52]	; (29d4 <sensors_read_task+0x88>)
    299e:	f01e f9cb 	bl	20d38 <mpu6050_read_Acc>
			hrs_notify();
    29a2:	f7ff ff3b 	bl	281c <hrs_notify>
			k_msleep(10);
    29a6:	200a      	movs	r0, #10
    29a8:	e001      	b.n	29ae <sensors_read_task+0x62>
			k_msleep(500);
    29aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			k_msleep(10);
    29ae:	f01d fdb2 	bl	20516 <k_msleep.isra.0>
			break;
    29b2:	e7e2      	b.n	297a <sensors_read_task+0x2e>
    29b4:	2000ad14 	.word	0x2000ad14
    29b8:	2000ad20 	.word	0x2000ad20
    29bc:	2000ed21 	.word	0x2000ed21
    29c0:	2000ed20 	.word	0x2000ed20
    29c4:	2000ad28 	.word	0x2000ad28
    29c8:	2000ad18 	.word	0x2000ad18
    29cc:	2000ad30 	.word	0x2000ad30
    29d0:	2000ad2c 	.word	0x2000ad2c
    29d4:	2000ecf0 	.word	0x2000ecf0

000029d8 <main>:
{
    29d8:	b570      	push	{r4, r5, r6, lr}
	err = bt_enable(NULL);
    29da:	2000      	movs	r0, #0
{
    29dc:	b088      	sub	sp, #32
	err = bt_enable(NULL);
    29de:	f007 f9d5 	bl	9d8c <bt_enable>
	if (err) {
    29e2:	4606      	mov	r6, r0
    29e4:	b130      	cbz	r0, 29f4 <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
    29e6:	4601      	mov	r1, r0
    29e8:	481f      	ldr	r0, [pc, #124]	; (2a68 <main+0x90>)
}
    29ea:	b008      	add	sp, #32
    29ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    29f0:	f01e bc50 	b.w	21294 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    29f4:	4d1d      	ldr	r5, [pc, #116]	; (2a6c <main+0x94>)
	printk("Bluetooth initialized\n");
    29f6:	481e      	ldr	r0, [pc, #120]	; (2a70 <main+0x98>)
    29f8:	f01e fc4c 	bl	21294 <printk>
		settings_load();
    29fc:	f01f fd3c 	bl	22478 <settings_load>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2a02:	ac03      	add	r4, sp, #12
    2a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2a06:	682b      	ldr	r3, [r5, #0]
    2a08:	6023      	str	r3, [r4, #0]
    2a0a:	491a      	ldr	r1, [pc, #104]	; (2a74 <main+0x9c>)
    2a0c:	9600      	str	r6, [sp, #0]
    2a0e:	4633      	mov	r3, r6
    2a10:	2204      	movs	r2, #4
    2a12:	a803      	add	r0, sp, #12
    2a14:	f007 fd3c 	bl	a490 <bt_le_adv_start>
	if (err) {
    2a18:	4601      	mov	r1, r0
    2a1a:	b1e0      	cbz	r0, 2a56 <main+0x7e>
		printk("Advertising failed to start (err %d)\n", err);
    2a1c:	4816      	ldr	r0, [pc, #88]	; (2a78 <main+0xa0>)
    2a1e:	f01e fc39 	bl	21294 <printk>
	bt_conn_cb_register(&conn_callbacks);
    2a22:	4816      	ldr	r0, [pc, #88]	; (2a7c <main+0xa4>)
	while (display_mode == DISPLAY_MODE_BOOTING)
    2a24:	4c16      	ldr	r4, [pc, #88]	; (2a80 <main+0xa8>)
	bt_conn_cb_register(&conn_callbacks);
    2a26:	f008 f8ad 	bl	ab84 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    2a2a:	4816      	ldr	r0, [pc, #88]	; (2a84 <main+0xac>)
    2a2c:	f008 fcca 	bl	b3c4 <bt_conn_auth_cb_register>
	printk("\n\n Booting Enverse Smart Watch \n\n");
    2a30:	4815      	ldr	r0, [pc, #84]	; (2a88 <main+0xb0>)
    2a32:	f01e fc2f 	bl	21294 <printk>
	while (display_mode == DISPLAY_MODE_BOOTING)
    2a36:	6823      	ldr	r3, [r4, #0]
    2a38:	b18b      	cbz	r3, 2a5e <main+0x86>
		sensor_mode = SENSOR_MODE_READ_ALL;
    2a3a:	4d14      	ldr	r5, [pc, #80]	; (2a8c <main+0xb4>)
    2a3c:	2601      	movs	r6, #1
		k_msleep(5000);
    2a3e:	f241 3088 	movw	r0, #5000	; 0x1388
    2a42:	f01d fd68 	bl	20516 <k_msleep.isra.0>
		display_mode = DISPLAY_MODE_VALUES;
    2a46:	2304      	movs	r3, #4
		k_msleep(10000);
    2a48:	f242 7010 	movw	r0, #10000	; 0x2710
		sensor_mode = SENSOR_MODE_READ_ALL;
    2a4c:	602e      	str	r6, [r5, #0]
		display_mode = DISPLAY_MODE_VALUES;
    2a4e:	6023      	str	r3, [r4, #0]
		k_msleep(10000);
    2a50:	f01d fd61 	bl	20516 <k_msleep.isra.0>
	while (1)
    2a54:	e7f3      	b.n	2a3e <main+0x66>
	printk("Advertising successfully started\n");
    2a56:	480e      	ldr	r0, [pc, #56]	; (2a90 <main+0xb8>)
    2a58:	f01e fc1c 	bl	21294 <printk>
    2a5c:	e7e1      	b.n	2a22 <main+0x4a>
		k_msleep(1000);
    2a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2a62:	f01d fd58 	bl	20516 <k_msleep.isra.0>
    2a66:	e7e6      	b.n	2a36 <main+0x5e>
    2a68:	00028ab4 	.word	0x00028ab4
    2a6c:	00027150 	.word	0x00027150
    2a70:	00028ad4 	.word	0x00028ad4
    2a74:	00027248 	.word	0x00027248
    2a78:	00028aeb 	.word	0x00028aeb
    2a7c:	20000224 	.word	0x20000224
    2a80:	2000ad14 	.word	0x2000ad14
    2a84:	200001f8 	.word	0x200001f8
    2a88:	00028b33 	.word	0x00028b33
    2a8c:	2000ad20 	.word	0x2000ad20
    2a90:	00028b11 	.word	0x00028b11

00002a94 <refresh_display>:
{
    2a94:	b508      	push	{r3, lr}
	resetDisplay();
    2a96:	f01e fa65 	bl	20f64 <resetDisplay>
	k_msleep(1);
    2a9a:	2001      	movs	r0, #1
    2a9c:	f01d fd3b 	bl	20516 <k_msleep.isra.0>
	LCD_Init();
    2aa0:	f001 face 	bl	4040 <LCD_Init>
	SetBrightness(current_brightness);
    2aa4:	4b02      	ldr	r3, [pc, #8]	; (2ab0 <refresh_display+0x1c>)
    2aa6:	6818      	ldr	r0, [r3, #0]
}
    2aa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SetBrightness(current_brightness);
    2aac:	f01e ba24 	b.w	20ef8 <SetBrightness>
    2ab0:	20000240 	.word	0x20000240

00002ab4 <display_task>:
{
    2ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ab8:	b088      	sub	sp, #32
	LCD_Init();
    2aba:	f001 fac1 	bl	4040 <LCD_Init>
	SetBrightness(255);
    2abe:	20ff      	movs	r0, #255	; 0xff
    2ac0:	f01e fa1a 	bl	20ef8 <SetBrightness>
		if (brightness_value > MAXIMUM_BRIGHTNESS)
    2ac4:	4e8e      	ldr	r6, [pc, #568]	; (2d00 <display_task+0x24c>)
		if (current_brightness < brightness_value)
    2ac6:	4d8f      	ldr	r5, [pc, #572]	; (2d04 <display_task+0x250>)
		if (brightness_value > MAXIMUM_BRIGHTNESS)
    2ac8:	6833      	ldr	r3, [r6, #0]
    2aca:	2bff      	cmp	r3, #255	; 0xff
    2acc:	dd31      	ble.n	2b32 <display_task+0x7e>
			brightness_value = MAXIMUM_BRIGHTNESS;
    2ace:	23ff      	movs	r3, #255	; 0xff
			brightness_value = MINIMUM_BRIGHTNESS;
    2ad0:	6033      	str	r3, [r6, #0]
		if (current_brightness < brightness_value)
    2ad2:	682b      	ldr	r3, [r5, #0]
    2ad4:	6832      	ldr	r2, [r6, #0]
    2ad6:	4293      	cmp	r3, r2
    2ad8:	da2f      	bge.n	2b3a <display_task+0x86>
			current_brightness += brightness_step;
    2ada:	4a8b      	ldr	r2, [pc, #556]	; (2d08 <display_task+0x254>)
    2adc:	6812      	ldr	r2, [r2, #0]
    2ade:	4413      	add	r3, r2
			current_brightness -= brightness_step;
    2ae0:	602b      	str	r3, [r5, #0]
		if (current_brightness > MAXIMUM_BRIGHTNESS)
    2ae2:	682b      	ldr	r3, [r5, #0]
    2ae4:	2bff      	cmp	r3, #255	; 0xff
    2ae6:	dd2d      	ble.n	2b44 <display_task+0x90>
			current_brightness = MAXIMUM_BRIGHTNESS;
    2ae8:	23ff      	movs	r3, #255	; 0xff
			current_brightness = MINIMUM_BRIGHTNESS;
    2aea:	602b      	str	r3, [r5, #0]
		SetBrightness(current_brightness);
    2aec:	6828      	ldr	r0, [r5, #0]
    2aee:	f01e fa03 	bl	20ef8 <SetBrightness>
		switch (display_mode)
    2af2:	4b86      	ldr	r3, [pc, #536]	; (2d0c <display_task+0x258>)
    2af4:	681c      	ldr	r4, [r3, #0]
    2af6:	2c01      	cmp	r4, #1
    2af8:	d028      	beq.n	2b4c <display_task+0x98>
    2afa:	2c04      	cmp	r4, #4
    2afc:	d040      	beq.n	2b80 <display_task+0xcc>
    2afe:	2c00      	cmp	r4, #0
    2b00:	d1e2      	bne.n	2ac8 <display_task+0x14>
			DispLogo(logo_colour[i]);
    2b02:	4f83      	ldr	r7, [pc, #524]	; (2d10 <display_task+0x25c>)
			DispStr("BOOTING", 150, 150, WHITE, BLACK);
    2b04:	4883      	ldr	r0, [pc, #524]	; (2d14 <display_task+0x260>)
    2b06:	9400      	str	r4, [sp, #0]
    2b08:	2296      	movs	r2, #150	; 0x96
    2b0a:	4611      	mov	r1, r2
    2b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2b10:	f01e fac3 	bl	2109a <DispStr>
			DispLogo(logo_colour[i]);
    2b14:	683a      	ldr	r2, [r7, #0]
    2b16:	4b80      	ldr	r3, [pc, #512]	; (2d18 <display_task+0x264>)
    2b18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    2b1c:	f001 f9b4 	bl	3e88 <DispLogo>
			if (i >= (sizeof(logo_colour) / sizeof(int)))
    2b20:	683b      	ldr	r3, [r7, #0]
    2b22:	2b03      	cmp	r3, #3
				i++;
    2b24:	bf98      	it	ls
    2b26:	1c5c      	addls	r4, r3, #1
			current_state_display = DISPLAY_MODE_BOOTING;
    2b28:	4b7c      	ldr	r3, [pc, #496]	; (2d1c <display_task+0x268>)
    2b2a:	603c      	str	r4, [r7, #0]
    2b2c:	2200      	movs	r2, #0
    2b2e:	601a      	str	r2, [r3, #0]
			break;
    2b30:	e7ca      	b.n	2ac8 <display_task+0x14>
		if (brightness_value < MINIMUM_BRIGHTNESS)
    2b32:	2b31      	cmp	r3, #49	; 0x31
    2b34:	dccd      	bgt.n	2ad2 <display_task+0x1e>
			brightness_value = MINIMUM_BRIGHTNESS;
    2b36:	2332      	movs	r3, #50	; 0x32
    2b38:	e7ca      	b.n	2ad0 <display_task+0x1c>
		else if (current_brightness > brightness_value)
    2b3a:	ddd2      	ble.n	2ae2 <display_task+0x2e>
			current_brightness -= brightness_step;
    2b3c:	4a72      	ldr	r2, [pc, #456]	; (2d08 <display_task+0x254>)
    2b3e:	6812      	ldr	r2, [r2, #0]
    2b40:	1a9b      	subs	r3, r3, r2
    2b42:	e7cd      	b.n	2ae0 <display_task+0x2c>
		if (current_brightness < MINIMUM_BRIGHTNESS)
    2b44:	2b31      	cmp	r3, #49	; 0x31
    2b46:	dcd1      	bgt.n	2aec <display_task+0x38>
			current_brightness = MINIMUM_BRIGHTNESS;
    2b48:	2332      	movs	r3, #50	; 0x32
    2b4a:	e7ce      	b.n	2aea <display_task+0x36>
			if (current_state_display != DISPLAY_MODE_TIME)
    2b4c:	4c73      	ldr	r4, [pc, #460]	; (2d1c <display_task+0x268>)
    2b4e:	6823      	ldr	r3, [r4, #0]
    2b50:	2b01      	cmp	r3, #1
    2b52:	d001      	beq.n	2b58 <display_task+0xa4>
				refresh_display();
    2b54:	f7ff ff9e 	bl	2a94 <refresh_display>
			DispStr("10 : 10", 150, 150, WHITE, BLACK);
    2b58:	2296      	movs	r2, #150	; 0x96
    2b5a:	2700      	movs	r7, #0
    2b5c:	4611      	mov	r1, r2
    2b5e:	4870      	ldr	r0, [pc, #448]	; (2d20 <display_task+0x26c>)
    2b60:	9700      	str	r7, [sp, #0]
    2b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2b66:	f01e fa98 	bl	2109a <DispStr>
			DispStr("11/11  Wed", 130, 200, WHITE, BLACK);
    2b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2b6e:	486d      	ldr	r0, [pc, #436]	; (2d24 <display_task+0x270>)
    2b70:	9700      	str	r7, [sp, #0]
    2b72:	22c8      	movs	r2, #200	; 0xc8
    2b74:	2182      	movs	r1, #130	; 0x82
    2b76:	f01e fa90 	bl	2109a <DispStr>
			current_state_display = DISPLAY_MODE_TIME;
    2b7a:	2301      	movs	r3, #1
    2b7c:	6023      	str	r3, [r4, #0]
			break;
    2b7e:	e7a3      	b.n	2ac8 <display_task+0x14>
			if (current_state_display != DISPLAY_MODE_VALUES)
    2b80:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2d1c <display_task+0x268>
    2b84:	f8d8 3000 	ldr.w	r3, [r8]
    2b88:	2b04      	cmp	r3, #4
    2b8a:	d04d      	beq.n	2c28 <display_task+0x174>
				refresh_display();
    2b8c:	f7ff ff82 	bl	2a94 <refresh_display>
				DispIcon(steps_logo, BLUE, 100, 100, 50, 50);
    2b90:	2432      	movs	r4, #50	; 0x32
    2b92:	2364      	movs	r3, #100	; 0x64
				DispStr("Steps", 90, 160, WHITE, BLACK);
    2b94:	2700      	movs	r7, #0
				DispIcon(steps_logo, BLUE, 100, 100, 50, 50);
    2b96:	461a      	mov	r2, r3
    2b98:	4863      	ldr	r0, [pc, #396]	; (2d28 <display_task+0x274>)
    2b9a:	211f      	movs	r1, #31
    2b9c:	e9cd 4400 	strd	r4, r4, [sp]
    2ba0:	f001 f9dc 	bl	3f5c <DispIcon>
				DispStr("Steps", 90, 160, WHITE, BLACK);
    2ba4:	4861      	ldr	r0, [pc, #388]	; (2d2c <display_task+0x278>)
    2ba6:	9700      	str	r7, [sp, #0]
    2ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2bac:	22a0      	movs	r2, #160	; 0xa0
    2bae:	215a      	movs	r1, #90	; 0x5a
    2bb0:	f01e fa73 	bl	2109a <DispStr>
				DispIcon(heart_logo, RED, 260, 100, 50, 50);
    2bb4:	485e      	ldr	r0, [pc, #376]	; (2d30 <display_task+0x27c>)
    2bb6:	2364      	movs	r3, #100	; 0x64
    2bb8:	f44f 7282 	mov.w	r2, #260	; 0x104
    2bbc:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    2bc0:	e9cd 4400 	strd	r4, r4, [sp]
    2bc4:	f001 f9ca 	bl	3f5c <DispIcon>
				DispStr("H R", 264, 160, WHITE, BLACK);
    2bc8:	485a      	ldr	r0, [pc, #360]	; (2d34 <display_task+0x280>)
    2bca:	9700      	str	r7, [sp, #0]
    2bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2bd0:	22a0      	movs	r2, #160	; 0xa0
    2bd2:	f44f 7184 	mov.w	r1, #264	; 0x108
    2bd6:	f01e fa60 	bl	2109a <DispStr>
				DispIcon(temperature_logo, GREEN, 100, 280, 50, 50);
    2bda:	4857      	ldr	r0, [pc, #348]	; (2d38 <display_task+0x284>)
    2bdc:	f44f 738c 	mov.w	r3, #280	; 0x118
    2be0:	2264      	movs	r2, #100	; 0x64
    2be2:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    2be6:	e9cd 4400 	strd	r4, r4, [sp]
    2bea:	f001 f9b7 	bl	3f5c <DispIcon>
				DispStr("Temp", 94, 340, WHITE, BLACK);
    2bee:	4853      	ldr	r0, [pc, #332]	; (2d3c <display_task+0x288>)
    2bf0:	9700      	str	r7, [sp, #0]
    2bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2bf6:	f44f 72aa 	mov.w	r2, #340	; 0x154
    2bfa:	215e      	movs	r1, #94	; 0x5e
    2bfc:	f01e fa4d 	bl	2109a <DispStr>
				DispIcon(spio2_logo, RED, 260, 280, 50, 50);
    2c00:	484f      	ldr	r0, [pc, #316]	; (2d40 <display_task+0x28c>)
    2c02:	f44f 738c 	mov.w	r3, #280	; 0x118
    2c06:	f44f 7282 	mov.w	r2, #260	; 0x104
    2c0a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    2c0e:	e9cd 4400 	strd	r4, r4, [sp]
    2c12:	f001 f9a3 	bl	3f5c <DispIcon>
				DispStr("Spo2", 250, 340, WHITE, BLACK);
    2c16:	484b      	ldr	r0, [pc, #300]	; (2d44 <display_task+0x290>)
    2c18:	9700      	str	r7, [sp, #0]
    2c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c1e:	f44f 72aa 	mov.w	r2, #340	; 0x154
    2c22:	21fa      	movs	r1, #250	; 0xfa
    2c24:	f01e fa39 	bl	2109a <DispStr>
			sprintf(step_count, "%d", steps);
    2c28:	4b47      	ldr	r3, [pc, #284]	; (2d48 <display_task+0x294>)
    2c2a:	4948      	ldr	r1, [pc, #288]	; (2d4c <display_task+0x298>)
    2c2c:	681a      	ldr	r2, [r3, #0]
    2c2e:	a802      	add	r0, sp, #8
			DispStr(step_count, 120, 190, WHITE, BLACK); //update step count
    2c30:	2400      	movs	r4, #0
			sprintf(step_count, "%d", steps);
    2c32:	f004 fdf5 	bl	7820 <sprintf>
			DispStr(step_count, 120, 190, WHITE, BLACK); //update step count
    2c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c3a:	9400      	str	r4, [sp, #0]
    2c3c:	22be      	movs	r2, #190	; 0xbe
    2c3e:	2178      	movs	r1, #120	; 0x78
    2c40:	a802      	add	r0, sp, #8
    2c42:	f01e fa2a 	bl	2109a <DispStr>
			if (valid_hr)
    2c46:	4b42      	ldr	r3, [pc, #264]	; (2d50 <display_task+0x29c>)
    2c48:	781b      	ldrb	r3, [r3, #0]
    2c4a:	b173      	cbz	r3, 2c6a <display_task+0x1b6>
				sprintf(hr, "%d  ", heart_rate);
    2c4c:	4b41      	ldr	r3, [pc, #260]	; (2d54 <display_task+0x2a0>)
    2c4e:	4942      	ldr	r1, [pc, #264]	; (2d58 <display_task+0x2a4>)
    2c50:	681a      	ldr	r2, [r3, #0]
    2c52:	a806      	add	r0, sp, #24
    2c54:	f004 fde4 	bl	7820 <sprintf>
				DispStr(hr, 270, 190, WHITE, BLACK); //update hr
    2c58:	9400      	str	r4, [sp, #0]
    2c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c5e:	22be      	movs	r2, #190	; 0xbe
    2c60:	f44f 7187 	mov.w	r1, #270	; 0x10e
    2c64:	a806      	add	r0, sp, #24
    2c66:	f01e fa18 	bl	2109a <DispStr>
			sprintf(temperature_value, "%.2f", temp_data);
    2c6a:	4b3c      	ldr	r3, [pc, #240]	; (2d5c <display_task+0x2a8>)
    2c6c:	6818      	ldr	r0, [r3, #0]
    2c6e:	f7fd fbab 	bl	3c8 <__aeabi_f2d>
			DispStr(t, 90, 370, WHITE, BLACK); //update temperature
    2c72:	2400      	movs	r4, #0
			sprintf(temperature_value, "%.2f", temp_data);
    2c74:	4602      	mov	r2, r0
    2c76:	460b      	mov	r3, r1
    2c78:	a804      	add	r0, sp, #16
    2c7a:	4939      	ldr	r1, [pc, #228]	; (2d60 <display_task+0x2ac>)
    2c7c:	f004 fdd0 	bl	7820 <sprintf>
			DispStr(t, 90, 370, WHITE, BLACK); //update temperature
    2c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c84:	4837      	ldr	r0, [pc, #220]	; (2d64 <display_task+0x2b0>)
    2c86:	9400      	str	r4, [sp, #0]
    2c88:	f44f 72b9 	mov.w	r2, #370	; 0x172
    2c8c:	215a      	movs	r1, #90	; 0x5a
    2c8e:	f01e fa04 	bl	2109a <DispStr>
			if (valid_sp02)
    2c92:	4b35      	ldr	r3, [pc, #212]	; (2d68 <display_task+0x2b4>)
    2c94:	781b      	ldrb	r3, [r3, #0]
    2c96:	b17b      	cbz	r3, 2cb8 <display_task+0x204>
				sprintf(sp, "%d", sp02);
    2c98:	4b34      	ldr	r3, [pc, #208]	; (2d6c <display_task+0x2b8>)
    2c9a:	492c      	ldr	r1, [pc, #176]	; (2d4c <display_task+0x298>)
    2c9c:	681a      	ldr	r2, [r3, #0]
    2c9e:	a806      	add	r0, sp, #24
    2ca0:	f004 fdbe 	bl	7820 <sprintf>
				DispStr(sp, 260, 370, WHITE, BLACK); //update spo2
    2ca4:	9400      	str	r4, [sp, #0]
    2ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2caa:	f44f 72b9 	mov.w	r2, #370	; 0x172
    2cae:	f44f 7182 	mov.w	r1, #260	; 0x104
    2cb2:	a806      	add	r0, sp, #24
    2cb4:	f01e f9f1 	bl	2109a <DispStr>
			if(!latch_status)
    2cb8:	4b2d      	ldr	r3, [pc, #180]	; (2d70 <display_task+0x2bc>)
    2cba:	781b      	ldrb	r3, [r3, #0]
    2cbc:	b9eb      	cbnz	r3, 2cfa <display_task+0x246>
				DispStr("Detached !", 128, 30, RED, BLACK);
    2cbe:	9300      	str	r3, [sp, #0]
    2cc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
				DispStr("Detached !", 128, 30, BLACK, BLACK);
    2cc4:	482b      	ldr	r0, [pc, #172]	; (2d74 <display_task+0x2c0>)
    2cc6:	221e      	movs	r2, #30
    2cc8:	2180      	movs	r1, #128	; 0x80
    2cca:	f01e f9e6 	bl	2109a <DispStr>
			current_state_display = DISPLAY_MODE_VALUES;
    2cce:	2304      	movs	r3, #4
    2cd0:	f8c8 3000 	str.w	r3, [r8]
			mpu_data = mpu_data-213;
    2cd4:	4b28      	ldr	r3, [pc, #160]	; (2d78 <display_task+0x2c4>)
			sprintf(Accx, "%d", mpu_data);
    2cd6:	491d      	ldr	r1, [pc, #116]	; (2d4c <display_task+0x298>)
			mpu_data = mpu_data-213;
    2cd8:	881a      	ldrh	r2, [r3, #0]
    2cda:	3ad5      	subs	r2, #213	; 0xd5
    2cdc:	b292      	uxth	r2, r2
			sprintf(Accx, "%d", mpu_data);
    2cde:	a806      	add	r0, sp, #24
			mpu_data = mpu_data-213;
    2ce0:	801a      	strh	r2, [r3, #0]
			sprintf(Accx, "%d", mpu_data);
    2ce2:	f004 fd9d 	bl	7820 <sprintf>
			DispStr(Accx, 190, 240, WHITE, BLACK); //update acceleration
    2ce6:	2300      	movs	r3, #0
    2ce8:	9300      	str	r3, [sp, #0]
    2cea:	22f0      	movs	r2, #240	; 0xf0
    2cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2cf0:	21be      	movs	r1, #190	; 0xbe
    2cf2:	a806      	add	r0, sp, #24
    2cf4:	f01e f9d1 	bl	2109a <DispStr>
			break;
    2cf8:	e6e6      	b.n	2ac8 <display_task+0x14>
				DispStr("Detached !", 128, 30, BLACK, BLACK);
    2cfa:	2300      	movs	r3, #0
    2cfc:	9300      	str	r3, [sp, #0]
    2cfe:	e7e1      	b.n	2cc4 <display_task+0x210>
    2d00:	20000220 	.word	0x20000220
    2d04:	20000240 	.word	0x20000240
    2d08:	2000021c 	.word	0x2000021c
    2d0c:	2000ad14 	.word	0x2000ad14
    2d10:	2000ad1c 	.word	0x2000ad1c
    2d14:	00028b55 	.word	0x00028b55
    2d18:	20000244 	.word	0x20000244
    2d1c:	2000ad10 	.word	0x2000ad10
    2d20:	00028b5d 	.word	0x00028b5d
    2d24:	00028b65 	.word	0x00028b65
    2d28:	200089bc 	.word	0x200089bc
    2d2c:	00028b70 	.word	0x00028b70
    2d30:	20001874 	.word	0x20001874
    2d34:	00028b76 	.word	0x00028b76
    2d38:	20009380 	.word	0x20009380
    2d3c:	00028b7a 	.word	0x00028b7a
    2d40:	20007ff8 	.word	0x20007ff8
    2d44:	00028b7f 	.word	0x00028b7f
    2d48:	2000ad2c 	.word	0x2000ad2c
    2d4c:	0002b6dd 	.word	0x0002b6dd
    2d50:	2000ed20 	.word	0x2000ed20
    2d54:	2000ad18 	.word	0x2000ad18
    2d58:	00028b84 	.word	0x00028b84
    2d5c:	2000ad30 	.word	0x2000ad30
    2d60:	00028b89 	.word	0x00028b89
    2d64:	00028b8e 	.word	0x00028b8e
    2d68:	2000ed21 	.word	0x2000ed21
    2d6c:	2000ad28 	.word	0x2000ad28
    2d70:	2000082b 	.word	0x2000082b
    2d74:	00028b93 	.word	0x00028b93
    2d78:	2000ecf0 	.word	0x2000ecf0

00002d7c <bma_i2c_read>:
    return write_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
}

/* BMA i2c read function */
static uint16_t bma_i2c_read(u8_t reg, u8_t *data, u16_t len, void *intf_ptr)
{
    2d7c:	b570      	push	{r4, r5, r6, lr}
    2d7e:	4606      	mov	r6, r0
    2d80:	b088      	sub	sp, #32
    2d82:	460d      	mov	r5, r1
    2d84:	4614      	mov	r4, r2
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2d86:	480d      	ldr	r0, [pc, #52]	; (2dbc <bma_i2c_read+0x40>)
    2d88:	f01c f88e 	bl	1eea8 <z_impl_device_get_binding>
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    2d8c:	f10d 0207 	add.w	r2, sp, #7
    2d90:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    2d92:	2201      	movs	r2, #1
    2d94:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    2d96:	2200      	movs	r2, #0
    2d98:	f88d 2010 	strb.w	r2, [sp, #16]

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    2d9c:	2207      	movs	r2, #7
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
    2d9e:	e9cd 5405 	strd	r5, r4, [sp, #20]
    2da2:	f88d 6007 	strb.w	r6, [sp, #7]
    2da6:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    2daa:	6883      	ldr	r3, [r0, #8]
    2dac:	2202      	movs	r2, #2
    2dae:	685c      	ldr	r4, [r3, #4]
    2db0:	a902      	add	r1, sp, #8
    2db2:	2319      	movs	r3, #25
    2db4:	47a0      	blx	r4
}
    2db6:	b2c0      	uxtb	r0, r0
    2db8:	b008      	add	sp, #32
    2dba:	bd70      	pop	{r4, r5, r6, pc}
    2dbc:	00028c3f 	.word	0x00028c3f

00002dc0 <bma_i2c_write>:
{
    2dc0:	b570      	push	{r4, r5, r6, lr}
    2dc2:	4606      	mov	r6, r0
    2dc4:	b088      	sub	sp, #32
    2dc6:	460d      	mov	r5, r1
    2dc8:	4614      	mov	r4, r2
    2dca:	480d      	ldr	r0, [pc, #52]	; (2e00 <bma_i2c_write+0x40>)
    2dcc:	f01c f86c 	bl	1eea8 <z_impl_device_get_binding>
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
    2dd0:	f10d 0207 	add.w	r2, sp, #7
    2dd4:	9202      	str	r2, [sp, #8]
	msg[0].len = 1U;
    2dd6:	2201      	movs	r2, #1
    2dd8:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    2dda:	2200      	movs	r2, #0
    2ddc:	f88d 2010 	strb.w	r2, [sp, #16]

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    2de0:	2202      	movs	r2, #2
    return write_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
    2de2:	e9cd 5405 	strd	r5, r4, [sp, #20]
    2de6:	f88d 6007 	strb.w	r6, [sp, #7]
    2dea:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    2dee:	6883      	ldr	r3, [r0, #8]
    2df0:	a902      	add	r1, sp, #8
    2df2:	685c      	ldr	r4, [r3, #4]
    2df4:	2319      	movs	r3, #25
    2df6:	47a0      	blx	r4
}
    2df8:	b2c0      	uxtb	r0, r0
    2dfa:	b008      	add	sp, #32
    2dfc:	bd70      	pop	{r4, r5, r6, pc}
    2dfe:	bf00      	nop
    2e00:	00028c3f 	.word	0x00028c3f

00002e04 <initialize_bma>:
    k_busy_wait(ms);
}

/*Initialise BMA sensor */
void initialize_bma()
{
    2e04:	b530      	push	{r4, r5, lr}
    2e06:	b08d      	sub	sp, #52	; 0x34
    2e08:	4821      	ldr	r0, [pc, #132]	; (2e90 <initialize_bma+0x8c>)
    2e0a:	f01c f84d 	bl	1eea8 <z_impl_device_get_binding>
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    if (!i2c_dev)
    2e0e:	b928      	cbnz	r0, 2e1c <initialize_bma+0x18>
    {
        printk("I2C: Device driver not found.\n");
    2e10:	4820      	ldr	r0, [pc, #128]	; (2e94 <initialize_bma+0x90>)
    if (rslt == BMA4_OK)
        printk("Writing config file : OK\n");
    else
        printk("Writing config file : FAILED!!!\n");
    bma456_device_global = bma456_device;
}
    2e12:	b00d      	add	sp, #52	; 0x34
    2e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        printk("I2C: Device driver not found.\n");
    2e18:	f01e ba3c 	b.w	21294 <printk>
    dev_addr = BMA4_I2C_ADDR_SECONDARY;
    2e1c:	4b1e      	ldr	r3, [pc, #120]	; (2e98 <initialize_bma+0x94>)
    bma456_device.intf_ptr = &dev_addr;
    2e1e:	9301      	str	r3, [sp, #4]
    dev_addr = BMA4_I2C_ADDR_SECONDARY;
    2e20:	2219      	movs	r2, #25
    2e22:	701a      	strb	r2, [r3, #0]
    bma456_device.bus_read = bma_i2c_read;
    2e24:	4a1d      	ldr	r2, [pc, #116]	; (2e9c <initialize_bma+0x98>)
    2e26:	9208      	str	r2, [sp, #32]
    bma456_device.bus_write = bma_i2c_write;
    2e28:	4a1d      	ldr	r2, [pc, #116]	; (2ea0 <initialize_bma+0x9c>)
    2e2a:	9209      	str	r2, [sp, #36]	; 0x24
    bma456_device.delay_us = bma_delay_us;
    2e2c:	4a1d      	ldr	r2, [pc, #116]	; (2ea4 <initialize_bma+0xa0>)
    2e2e:	920a      	str	r2, [sp, #40]	; 0x28
    bma456_device.read_write_len = 8;
    2e30:	2208      	movs	r2, #8
    2e32:	f8ad 2014 	strh.w	r2, [sp, #20]
    bma456_device.resolution = 12;
    2e36:	220c      	movs	r2, #12
    2e38:	f88d 200c 	strb.w	r2, [sp, #12]
    rslt |= bma456_init(&bma456_device);
    2e3c:	4668      	mov	r0, sp
    bma456_device.feature_len = BMA456_FEATURE_SIZE;
    2e3e:	2246      	movs	r2, #70	; 0x46
    2e40:	f88d 2016 	strb.w	r2, [sp, #22]
    rslt |= bma456_init(&bma456_device);
    2e44:	f01d fde9 	bl	20a1a <bma456_init>
    if (rslt == BMA4_OK)
    2e48:	b9f0      	cbnz	r0, 2e88 <initialize_bma+0x84>
        printk("Communication with BMA : OK\n");
    2e4a:	4817      	ldr	r0, [pc, #92]	; (2ea8 <initialize_bma+0xa4>)
        printk("Communication with BMA : FAILED!!! \n");
    2e4c:	f01e fa22 	bl	21294 <printk>
    bma4_set_command_register(0xB6, &bma456_device);
    2e50:	4669      	mov	r1, sp
    2e52:	20b6      	movs	r0, #182	; 0xb6
    2e54:	f01d fdd0 	bl	209f8 <bma4_set_command_register>
	return z_impl_k_sleep(timeout);
    2e58:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2e5c:	2100      	movs	r1, #0
    2e5e:	f01c fe99 	bl	1fb94 <z_impl_k_sleep>
    rslt |= bma456_write_config_file(&bma456_device);
    2e62:	4668      	mov	r0, sp
    2e64:	f000 f9c4 	bl	31f0 <bma456_write_config_file>
    if (rslt == BMA4_OK)
    2e68:	b980      	cbnz	r0, 2e8c <initialize_bma+0x88>
        printk("Writing config file : OK\n");
    2e6a:	4810      	ldr	r0, [pc, #64]	; (2eac <initialize_bma+0xa8>)
    bma456_device_global = bma456_device;
    2e6c:	4d10      	ldr	r5, [pc, #64]	; (2eb0 <initialize_bma+0xac>)
    2e6e:	466c      	mov	r4, sp
        printk("Writing config file : FAILED!!!\n");
    2e70:	f01e fa10 	bl	21294 <printk>
    bma456_device_global = bma456_device;
    2e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2e7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    2e80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    2e84:	b00d      	add	sp, #52	; 0x34
    2e86:	bd30      	pop	{r4, r5, pc}
        printk("Communication with BMA : FAILED!!! \n");
    2e88:	480a      	ldr	r0, [pc, #40]	; (2eb4 <initialize_bma+0xb0>)
    2e8a:	e7df      	b.n	2e4c <initialize_bma+0x48>
        printk("Writing config file : FAILED!!!\n");
    2e8c:	480a      	ldr	r0, [pc, #40]	; (2eb8 <initialize_bma+0xb4>)
    2e8e:	e7ed      	b.n	2e6c <initialize_bma+0x68>
    2e90:	00028c3f 	.word	0x00028c3f
    2e94:	00028c45 	.word	0x00028c45
    2e98:	2000ed22 	.word	0x2000ed22
    2e9c:	00002d7d 	.word	0x00002d7d
    2ea0:	00002dc1 	.word	0x00002dc1
    2ea4:	00020537 	.word	0x00020537
    2ea8:	00028c64 	.word	0x00028c64
    2eac:	00028ca6 	.word	0x00028ca6
    2eb0:	2000ad34 	.word	0x2000ad34
    2eb4:	00028c81 	.word	0x00028c81
    2eb8:	00028cc0 	.word	0x00028cc0

00002ebc <stepCounterEnable>:
    bma456_device_global = bma456_device;
    return data;
}

u16_t stepCounterEnable()
{
    2ebc:	b570      	push	{r4, r5, r6, lr}
    struct bma4_accel sens_data;
    struct bma4_dev bma456_device = bma456_device_global;
    2ebe:	4d37      	ldr	r5, [pc, #220]	; (2f9c <stepCounterEnable+0xe0>)
    2ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2ec2:	b08c      	sub	sp, #48	; 0x30
    struct bma4_dev bma456_device = bma456_device_global;
    2ec4:	466c      	mov	r4, sp
    2ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2ecc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rslt = 0;
    // /* Soft-reset */
    rslt |= bma4_set_command_register(0xB6, &bma456_device);
    2ed4:	4669      	mov	r1, sp
    2ed6:	20b6      	movs	r0, #182	; 0xb6
    2ed8:	f01d fd8e 	bl	209f8 <bma4_set_command_register>
    if (rslt == BMA4_OK)
    2edc:	4604      	mov	r4, r0
    2ede:	b990      	cbnz	r0, 2f06 <stepCounterEnable+0x4a>
        printk("Soft reset before enabling step counter : OK\n");
    2ee0:	482f      	ldr	r0, [pc, #188]	; (2fa0 <stepCounterEnable+0xe4>)
    else
        printk("Soft reset before enabling step counter : FAILED!!!\n");
    2ee2:	f01e f9d7 	bl	21294 <printk>
    2ee6:	2100      	movs	r1, #0
    2ee8:	f640 40cd 	movw	r0, #3277	; 0xccd
    2eec:	f01c fe52 	bl	1fb94 <z_impl_k_sleep>
    k_msleep(100);

    /* Initialize BMA456 */
    rslt |= bma456_init(&bma456_device);
    2ef0:	4668      	mov	r0, sp
    2ef2:	f01d fd92 	bl	20a1a <bma456_init>
    2ef6:	4304      	orrs	r4, r0
    2ef8:	b260      	sxtb	r0, r4
    2efa:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    2efc:	b12c      	cbz	r4, 2f0a <stepCounterEnable+0x4e>
    {
        printk("Testing communication with BMA : FAILED!!!\n");
    2efe:	4829      	ldr	r0, [pc, #164]	; (2fa4 <stepCounterEnable+0xe8>)
    //     return rslt;
    // }
    // else
    //     printk("Setting watermark : OK\n");
    bma456_device_global = bma456_device;
    printk("Step counter init : OK\n");
    2f00:	f01e f9c8 	bl	21294 <printk>
    return rslt;
    2f04:	e015      	b.n	2f32 <stepCounterEnable+0x76>
        printk("Soft reset before enabling step counter : FAILED!!!\n");
    2f06:	4828      	ldr	r0, [pc, #160]	; (2fa8 <stepCounterEnable+0xec>)
    2f08:	e7eb      	b.n	2ee2 <stepCounterEnable+0x26>
        printk("Testing communication with BMA : OK\n");
    2f0a:	4828      	ldr	r0, [pc, #160]	; (2fac <stepCounterEnable+0xf0>)
    2f0c:	f01e f9c2 	bl	21294 <printk>
    rslt = bma4_set_accel_enable(0x01, &bma456_device);
    2f10:	4669      	mov	r1, sp
    2f12:	2001      	movs	r0, #1
    2f14:	f01d fd4b 	bl	209ae <bma4_set_accel_enable>
    2f18:	b284      	uxth	r4, r0
    if (rslt == BMA4_OK)
    2f1a:	b96c      	cbnz	r4, 2f38 <stepCounterEnable+0x7c>
        printk("Enabling accelerometer : OK\n");
    2f1c:	4824      	ldr	r0, [pc, #144]	; (2fb0 <stepCounterEnable+0xf4>)
    2f1e:	f01e f9b9 	bl	21294 <printk>
    rslt = bma456_write_config_file(&bma456_device);
    2f22:	4668      	mov	r0, sp
    2f24:	f000 f964 	bl	31f0 <bma456_write_config_file>
    2f28:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    2f2a:	b13c      	cbz	r4, 2f3c <stepCounterEnable+0x80>
        printf("Load configuration fail\r\n");
    2f2c:	4821      	ldr	r0, [pc, #132]	; (2fb4 <stepCounterEnable+0xf8>)
        printf("Step counter not enabled\r\n");
    2f2e:	f004 fc8f 	bl	7850 <printf>
}
    2f32:	4620      	mov	r0, r4
    2f34:	b00c      	add	sp, #48	; 0x30
    2f36:	bd70      	pop	{r4, r5, r6, pc}
        printk("Enabling accelerometer : FAILED!!!\n");
    2f38:	481f      	ldr	r0, [pc, #124]	; (2fb8 <stepCounterEnable+0xfc>)
    2f3a:	e7e1      	b.n	2f00 <stepCounterEnable+0x44>
        printf("Load configuration successful\r\n");
    2f3c:	481f      	ldr	r0, [pc, #124]	; (2fbc <stepCounterEnable+0x100>)
    2f3e:	f004 fc87 	bl	7850 <printf>
    rslt = bma456_feature_enable(BMA456_STEP_CNTR, 1, &bma456_device);
    2f42:	2101      	movs	r1, #1
    2f44:	466a      	mov	r2, sp
    2f46:	4608      	mov	r0, r1
    2f48:	f01d fd8f 	bl	20a6a <bma456_feature_enable>
    2f4c:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    2f4e:	b10c      	cbz	r4, 2f54 <stepCounterEnable+0x98>
        printf("Step counter not enabled\r\n");
    2f50:	481b      	ldr	r0, [pc, #108]	; (2fc0 <stepCounterEnable+0x104>)
    2f52:	e7ec      	b.n	2f2e <stepCounterEnable+0x72>
        printf("Step counter enabled\r\n");
    2f54:	481b      	ldr	r0, [pc, #108]	; (2fc4 <stepCounterEnable+0x108>)
    2f56:	f004 fc7b 	bl	7850 <printf>
    rslt = bma456_map_interrupt(BMA4_INTR1_MAP, BMA456_STEP_CNTR_INT, 1, &bma456_device);
    2f5a:	4620      	mov	r0, r4
    2f5c:	466b      	mov	r3, sp
    2f5e:	2201      	movs	r2, #1
    2f60:	2102      	movs	r1, #2
    2f62:	f01d fd6e 	bl	20a42 <bma456_map_interrupt>
    2f66:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    2f68:	b124      	cbz	r4, 2f74 <stepCounterEnable+0xb8>
        printf("Error code: %d\n", rslt);
    2f6a:	4621      	mov	r1, r4
    2f6c:	4816      	ldr	r0, [pc, #88]	; (2fc8 <stepCounterEnable+0x10c>)
    2f6e:	f004 fc6f 	bl	7850 <printf>
        return rslt;
    2f72:	e7de      	b.n	2f32 <stepCounterEnable+0x76>
    rslt = bma456_step_counter_set_watermark(1, &bma456_device);
    2f74:	4669      	mov	r1, sp
    2f76:	2001      	movs	r0, #1
    2f78:	f01d fdee 	bl	20b58 <bma456_step_counter_set_watermark>
    2f7c:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    2f7e:	2c00      	cmp	r4, #0
    2f80:	d1f3      	bne.n	2f6a <stepCounterEnable+0xae>
    bma456_device_global = bma456_device;
    2f82:	466d      	mov	r5, sp
    2f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f86:	4e05      	ldr	r6, [pc, #20]	; (2f9c <stepCounterEnable+0xe0>)
    2f88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2f8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2f92:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    printk("Step counter init : OK\n");
    2f96:	480d      	ldr	r0, [pc, #52]	; (2fcc <stepCounterEnable+0x110>)
    2f98:	e7b2      	b.n	2f00 <stepCounterEnable+0x44>
    2f9a:	bf00      	nop
    2f9c:	2000ad34 	.word	0x2000ad34
    2fa0:	00028ce1 	.word	0x00028ce1
    2fa4:	00028d44 	.word	0x00028d44
    2fa8:	00028d0f 	.word	0x00028d0f
    2fac:	00028d70 	.word	0x00028d70
    2fb0:	00028d95 	.word	0x00028d95
    2fb4:	00028dd6 	.word	0x00028dd6
    2fb8:	00028db2 	.word	0x00028db2
    2fbc:	00028df0 	.word	0x00028df0
    2fc0:	00028e10 	.word	0x00028e10
    2fc4:	00028e2b 	.word	0x00028e2b
    2fc8:	00028e42 	.word	0x00028e42
    2fcc:	00028e52 	.word	0x00028e52

00002fd0 <getStepCounterOutput>:

u32_t getStepCounterOutput()
{
    2fd0:	b530      	push	{r4, r5, lr}
    struct bma4_dev bma456_device = bma456_device_global;
    2fd2:	4d0c      	ldr	r5, [pc, #48]	; (3004 <getStepCounterOutput+0x34>)
    2fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2fd6:	b08f      	sub	sp, #60	; 0x3c
    struct bma4_dev bma456_device = bma456_device_global;
    2fd8:	ac02      	add	r4, sp, #8
    2fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2fe0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rslt = 0;
    uint32_t step_out = 0;
    2fe8:	2300      	movs	r3, #0
    rslt = bma456_step_counter_output(&step_out, &bma456_device);
    2fea:	a902      	add	r1, sp, #8
    2fec:	a801      	add	r0, sp, #4
    uint32_t step_out = 0;
    2fee:	9301      	str	r3, [sp, #4]
    rslt = bma456_step_counter_output(&step_out, &bma456_device);
    2ff0:	f01d fde5 	bl	20bbe <bma456_step_counter_output>
    if (rslt == BMA4_OK)
    2ff4:	b110      	cbz	r0, 2ffc <getStepCounterOutput+0x2c>
    {
        //printk("\nSteps counter output is %u\r\n", step_out);
    }
    else
    {
        printk("Reading step count : FAILED\n");
    2ff6:	4804      	ldr	r0, [pc, #16]	; (3008 <getStepCounterOutput+0x38>)
    2ff8:	f01e f94c 	bl	21294 <printk>
    }
    return step_out;
    2ffc:	9801      	ldr	r0, [sp, #4]
    2ffe:	b00f      	add	sp, #60	; 0x3c
    3000:	bd30      	pop	{r4, r5, pc}
    3002:	bf00      	nop
    3004:	2000ad34 	.word	0x2000ad34
    3008:	00028e6a 	.word	0x00028e6a

0000300c <bma4_write_config_file>:

/*!
 *  @brief This API is used to write the binary configuration in the sensor
 */
int8_t bma4_write_config_file(struct bma4_dev *dev)
{
    300c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    300e:	4605      	mov	r5, r0
    uint8_t config_load = 0;
    uint16_t index = 0;
    uint8_t config_stream_status = 0;

    /* Disable advanced power save */
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    3010:	4629      	mov	r1, r5
    uint8_t config_load = 0;
    3012:	2000      	movs	r0, #0
    3014:	f88d 0004 	strb.w	r0, [sp, #4]
    uint8_t config_stream_status = 0;
    3018:	f88d 0005 	strb.w	r0, [sp, #5]
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    301c:	f01d fbf4 	bl	20808 <bma4_set_advance_power_save>

    /* Wait for sensor time synchronization. Refer the data-sheet for
     * more information
     */
    dev->delay_us(450, dev->intf_ptr);
    3020:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3022:	6869      	ldr	r1, [r5, #4]
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    3024:	4604      	mov	r4, r0
    dev->delay_us(450, dev->intf_ptr);
    3026:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    302a:	4798      	blx	r3
    if (rslt == BMA4_OK)
    302c:	b94c      	cbnz	r4, 3042 <bma4_write_config_file+0x36>
    {
        /* Disable config loading*/
        rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    302e:	462b      	mov	r3, r5
    3030:	2201      	movs	r2, #1
    3032:	a901      	add	r1, sp, #4
    3034:	2059      	movs	r0, #89	; 0x59
    3036:	f01d fc0b 	bl	20850 <bma4_write_regs>

        if (rslt == BMA4_OK)
    303a:	4604      	mov	r4, r0
    303c:	2800      	cmp	r0, #0
    303e:	f000 8087 	beq.w	3150 <bma4_write_config_file+0x144>
            }
        }
    }

    return rslt;
}
    3042:	4620      	mov	r0, r4
    3044:	b003      	add	sp, #12
    3046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *  @note index value should be even number.
 */
static int8_t stream_transfer_write(const uint8_t *stream_data, uint16_t index, struct bma4_dev *dev)
{
    int8_t rslt;
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
    3048:	0973      	lsrs	r3, r6, #5
                rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
    304a:	692f      	ldr	r7, [r5, #16]
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
    304c:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t asic_lsb = ((index / 2) & 0x0F);

    /* Check the dev structure as NULL */
    rslt = null_pointer_check(dev);
    3050:	4628      	mov	r0, r5
    uint8_t asic_lsb = ((index / 2) & 0x0F);
    3052:	f3c6 0343 	ubfx	r3, r6, #1, #4
                rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
    3056:	4437      	add	r7, r6
    uint8_t asic_lsb = ((index / 2) & 0x0F);
    3058:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    305c:	f01d fa6d 	bl	2053a <null_pointer_check>

    if ((rslt == BMA4_OK) && (stream_data != NULL))
    3060:	2800      	cmp	r0, #0
    3062:	d172      	bne.n	314a <bma4_write_config_file+0x13e>
    3064:	2f00      	cmp	r7, #0
    3066:	d070      	beq.n	314a <bma4_write_config_file+0x13e>
    {
        rslt = bma4_write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    3068:	462b      	mov	r3, r5
    306a:	2201      	movs	r2, #1
    306c:	f10d 0107 	add.w	r1, sp, #7
    3070:	205b      	movs	r0, #91	; 0x5b
    3072:	f01d fbed 	bl	20850 <bma4_write_regs>
        if (rslt == BMA4_OK)
    3076:	4604      	mov	r4, r0
    3078:	b978      	cbnz	r0, 309a <bma4_write_config_file+0x8e>
        {
            rslt = bma4_write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    307a:	462b      	mov	r3, r5
    307c:	2201      	movs	r2, #1
    307e:	f10d 0106 	add.w	r1, sp, #6
    3082:	205c      	movs	r0, #92	; 0x5c
    3084:	f01d fbe4 	bl	20850 <bma4_write_regs>
            if (rslt == BMA4_OK)
    3088:	4604      	mov	r4, r0
    308a:	b930      	cbnz	r0, 309a <bma4_write_config_file+0x8e>
            {
                rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, (uint8_t *)stream_data, dev->read_write_len, dev);
    308c:	8aaa      	ldrh	r2, [r5, #20]
    308e:	462b      	mov	r3, r5
    3090:	4639      	mov	r1, r7
    3092:	205e      	movs	r0, #94	; 0x5e
    3094:	f01d fa5f 	bl	20556 <write_regs>
    3098:	4604      	mov	r4, r0
            for (index = 0; index < dev->config_size; index += dev->read_write_len)
    309a:	8aab      	ldrh	r3, [r5, #20]
    309c:	441e      	add	r6, r3
    309e:	b2b6      	uxth	r6, r6
    30a0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    30a2:	42b3      	cmp	r3, r6
    30a4:	d8d0      	bhi.n	3048 <bma4_write_config_file+0x3c>
            if (rslt == BMA4_OK)
    30a6:	2c00      	cmp	r4, #0
    30a8:	d1cb      	bne.n	3042 <bma4_write_config_file+0x36>
                config_load = 0x01;
    30aa:	2601      	movs	r6, #1
                rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    30ac:	462b      	mov	r3, r5
    30ae:	4632      	mov	r2, r6
    30b0:	a901      	add	r1, sp, #4
    30b2:	2059      	movs	r0, #89	; 0x59
                config_load = 0x01;
    30b4:	f88d 6004 	strb.w	r6, [sp, #4]
                rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    30b8:	f01d fbca 	bl	20850 <bma4_write_regs>
                if (rslt == BMA4_OK)
    30bc:	4604      	mov	r4, r0
    30be:	2800      	cmp	r0, #0
    30c0:	d1bf      	bne.n	3042 <bma4_write_config_file+0x36>
                    dev->delay_us(BMA4_MS_TO_US(150), dev->intf_ptr);
    30c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    30c4:	6869      	ldr	r1, [r5, #4]
    30c6:	4825      	ldr	r0, [pc, #148]	; (315c <bma4_write_config_file+0x150>)
    30c8:	4798      	blx	r3
                    rslt = bma4_read_regs(BMA4_INTERNAL_STAT, &config_stream_status, 1, dev);
    30ca:	4632      	mov	r2, r6
    30cc:	462b      	mov	r3, r5
    30ce:	f10d 0105 	add.w	r1, sp, #5
    30d2:	202a      	movs	r0, #42	; 0x2a
    30d4:	f01d fb10 	bl	206f8 <bma4_read_regs>
                    config_stream_status = config_stream_status & BMA4_CONFIG_STREAM_MESSAGE_MSK;
    30d8:	f89d 6005 	ldrb.w	r6, [sp, #5]
    30dc:	f006 060f 	and.w	r6, r6, #15
    30e0:	f88d 6005 	strb.w	r6, [sp, #5]
                    if (rslt == BMA4_OK)
    30e4:	4604      	mov	r4, r0
    30e6:	2800      	cmp	r0, #0
    30e8:	d1ab      	bne.n	3042 <bma4_write_config_file+0x36>
                        if (config_stream_status != BMA4_ASIC_INITIALIZED)
    30ea:	2e01      	cmp	r6, #1
    30ec:	d132      	bne.n	3154 <bma4_write_config_file+0x148>
                            rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
    30ee:	4629      	mov	r1, r5
    30f0:	4630      	mov	r0, r6
    30f2:	f01d fb89 	bl	20808 <bma4_set_advance_power_save>
                            if (rslt == BMA4_OK)
    30f6:	4604      	mov	r4, r0
    30f8:	2800      	cmp	r0, #0
    30fa:	d1a2      	bne.n	3042 <bma4_write_config_file+0x36>
    uint8_t asic_lsb = 0;
    30fc:	f88d 0006 	strb.w	r0, [sp, #6]
    uint8_t asic_msb = 0;
    3100:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = null_pointer_check(dev);
    3104:	4628      	mov	r0, r5
    3106:	f01d fa18 	bl	2053a <null_pointer_check>
    if (rslt == BMA4_OK)
    310a:	4604      	mov	r4, r0
    310c:	2800      	cmp	r0, #0
    310e:	d198      	bne.n	3042 <bma4_write_config_file+0x36>
        rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    3110:	462b      	mov	r3, r5
    3112:	4632      	mov	r2, r6
    3114:	f10d 0106 	add.w	r1, sp, #6
    3118:	205b      	movs	r0, #91	; 0x5b
    311a:	f01d fa41 	bl	205a0 <read_regs>
        if (rslt == BMA4_OK)
    311e:	4604      	mov	r4, r0
    3120:	2800      	cmp	r0, #0
    3122:	d18e      	bne.n	3042 <bma4_write_config_file+0x36>
            rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    3124:	462b      	mov	r3, r5
    3126:	4632      	mov	r2, r6
    3128:	f10d 0107 	add.w	r1, sp, #7
    312c:	205c      	movs	r0, #92	; 0x5c
    312e:	f01d fa37 	bl	205a0 <read_regs>
        if (rslt == BMA4_OK)
    3132:	4604      	mov	r4, r0
    3134:	2800      	cmp	r0, #0
    3136:	d184      	bne.n	3042 <bma4_write_config_file+0x36>
            dev->asic_data.asic_lsb = asic_lsb & 0x0F;
    3138:	f89d 3006 	ldrb.w	r3, [sp, #6]
    313c:	f003 030f 	and.w	r3, r3, #15
    3140:	75eb      	strb	r3, [r5, #23]
            dev->asic_data.asic_msb = asic_msb;
    3142:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3146:	762b      	strb	r3, [r5, #24]
    return rslt;
    3148:	e77b      	b.n	3042 <bma4_write_config_file+0x36>
            }
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
    314a:	f04f 34ff 	mov.w	r4, #4294967295
    314e:	e7a4      	b.n	309a <bma4_write_config_file+0x8e>
            for (index = 0; index < dev->config_size; index += dev->read_write_len)
    3150:	4606      	mov	r6, r0
    3152:	e7a5      	b.n	30a0 <bma4_write_config_file+0x94>
                            rslt = BMA4_E_CONFIG_STREAM_ERROR;
    3154:	f06f 0404 	mvn.w	r4, #4
    3158:	e773      	b.n	3042 <bma4_write_config_file+0x36>
    315a:	bf00      	nop
    315c:	000249f0 	.word	0x000249f0

00003160 <bma4_map_interrupt>:
{
    3160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3162:	461c      	mov	r4, r3
    uint8_t data[3] = { 0, 0, 0 };
    3164:	4b21      	ldr	r3, [pc, #132]	; (31ec <bma4_map_interrupt+0x8c>)
{
    3166:	4616      	mov	r6, r2
    uint8_t data[3] = { 0, 0, 0 };
    3168:	f8b3 2003 	ldrh.w	r2, [r3, #3]
    316c:	795b      	ldrb	r3, [r3, #5]
    316e:	f88d 3006 	strb.w	r3, [sp, #6]
{
    3172:	4607      	mov	r7, r0
    uint8_t index[2] = { BMA4_INT_MAP_1_ADDR, BMA4_INT_MAP_2_ADDR };
    3174:	f245 7356 	movw	r3, #22358	; 0x5756
    rslt = null_pointer_check(dev);
    3178:	4620      	mov	r0, r4
{
    317a:	460d      	mov	r5, r1
    uint8_t data[3] = { 0, 0, 0 };
    317c:	f8ad 2004 	strh.w	r2, [sp, #4]
    uint8_t index[2] = { BMA4_INT_MAP_1_ADDR, BMA4_INT_MAP_2_ADDR };
    3180:	f8ad 3000 	strh.w	r3, [sp]
    rslt = null_pointer_check(dev);
    3184:	f01d f9d9 	bl	2053a <null_pointer_check>
    if (rslt == BMA4_OK)
    3188:	bb70      	cbnz	r0, 31e8 <bma4_map_interrupt+0x88>
        rslt = bma4_read_regs(BMA4_INT_MAP_1_ADDR, data, 3, dev);
    318a:	4623      	mov	r3, r4
    318c:	2203      	movs	r2, #3
    318e:	a901      	add	r1, sp, #4
    3190:	2056      	movs	r0, #86	; 0x56
    3192:	f01d fab1 	bl	206f8 <bma4_read_regs>
        if (rslt == BMA4_OK)
    3196:	bb38      	cbnz	r0, 31e8 <bma4_map_interrupt+0x88>
            if (enable == TRUE)
    3198:	ab02      	add	r3, sp, #8
    319a:	2e01      	cmp	r6, #1
    319c:	eb03 0607 	add.w	r6, r3, r7
                data[2] = (uint8_t)((int_map & (0xFF00)) >> 8);
    31a0:	ea4f 2215 	mov.w	r2, r5, lsr #8
                data[int_line] &= (~(uint8_t)(int_map & (0x00FF)));
    31a4:	bf17      	itett	ne
    31a6:	f816 1c04 	ldrbne.w	r1, [r6, #-4]
                data[int_line] = (uint8_t)(int_map & (0x00FF));
    31aa:	f806 5c04 	strbeq.w	r5, [r6, #-4]
                data[int_line] &= (~(uint8_t)(int_map & (0x00FF)));
    31ae:	ea21 0505 	bicne.w	r5, r1, r5
    31b2:	f806 5c04 	strbne.w	r5, [r6, #-4]
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    31b6:	bf16      	itet	ne
    31b8:	f89d 3006 	ldrbne.w	r3, [sp, #6]
                data[2] = (uint8_t)((int_map & (0xFF00)) >> 8);
    31bc:	f88d 2006 	strbeq.w	r2, [sp, #6]
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    31c0:	4393      	bicne	r3, r2
            rslt = bma4_write_regs(index[int_line], &data[int_line], 1, dev);
    31c2:	a901      	add	r1, sp, #4
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    31c4:	bf18      	it	ne
    31c6:	f88d 3006 	strbne.w	r3, [sp, #6]
            rslt = bma4_write_regs(index[int_line], &data[int_line], 1, dev);
    31ca:	f816 0c08 	ldrb.w	r0, [r6, #-8]
    31ce:	4623      	mov	r3, r4
    31d0:	2201      	movs	r2, #1
    31d2:	4439      	add	r1, r7
    31d4:	f01d fb3c 	bl	20850 <bma4_write_regs>
            if (rslt == BMA4_OK)
    31d8:	b930      	cbnz	r0, 31e8 <bma4_map_interrupt+0x88>
                rslt = bma4_write_regs(BMA4_INT_MAP_DATA_ADDR, &data[2], 1, dev);
    31da:	4623      	mov	r3, r4
    31dc:	2201      	movs	r2, #1
    31de:	f10d 0106 	add.w	r1, sp, #6
    31e2:	2058      	movs	r0, #88	; 0x58
    31e4:	f01d fb34 	bl	20850 <bma4_write_regs>
}
    31e8:	b003      	add	sp, #12
    31ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31ec:	000271f8 	.word	0x000271f8

000031f0 <bma456_write_config_file>:
 */
int8_t bma456_write_config_file(struct bma4_dev *dev)
{
    int8_t rslt = BMA4_OK;

    if (dev != NULL)
    31f0:	b190      	cbz	r0, 3218 <bma456_write_config_file+0x28>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
    31f2:	7803      	ldrb	r3, [r0, #0]
    31f4:	2b16      	cmp	r3, #22
    31f6:	d112      	bne.n	321e <bma456_write_config_file+0x2e>
        {
            /* Configuration stream read/write length boundary
             * check
             */
            if ((dev->read_write_len >= BMA456_RD_WR_MIN_LEN) && (dev->read_write_len <= BMA456_RD_WR_MAX_LEN))
    31f8:	8a83      	ldrh	r3, [r0, #20]
    31fa:	1e9a      	subs	r2, r3, #2
    31fc:	b292      	uxth	r2, r2
    31fe:	f241 71fe 	movw	r1, #6142	; 0x17fe
    3202:	428a      	cmp	r2, r1
    3204:	d80e      	bhi.n	3224 <bma456_write_config_file+0x34>
            {
                /* Even or odd check */
                if ((dev->read_write_len % 2) != 0)
    3206:	07da      	lsls	r2, r3, #31
                {
                    dev->read_write_len = dev->read_write_len - 1;
    3208:	bf44      	itt	mi
    320a:	f103 33ff 	addmi.w	r3, r3, #4294967295
    320e:	8283      	strhmi	r3, [r0, #20]
                }

                /* Assign stream data */
                dev->config_file_ptr = bma456_config_file;
    3210:	4b06      	ldr	r3, [pc, #24]	; (322c <bma456_write_config_file+0x3c>)
    3212:	6103      	str	r3, [r0, #16]
                rslt = bma4_write_config_file(dev);
    3214:	f7ff befa 	b.w	300c <bma4_write_config_file>
            rslt = BMA4_E_INVALID_SENSOR;
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
    3218:	f04f 30ff 	mov.w	r0, #4294967295
    321c:	4770      	bx	lr
            rslt = BMA4_E_INVALID_SENSOR;
    321e:	f06f 0003 	mvn.w	r0, #3
    3222:	4770      	bx	lr
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
    3224:	f06f 0009 	mvn.w	r0, #9
    }

    return rslt;
}
    3228:	4770      	bx	lr
    322a:	bf00      	nop
    322c:	00028e87 	.word	0x00028e87

00003230 <max30102_i2c_write.constprop.0>:
#endif
    return ret;
}

/* MAX30102 i2c write function */
static uint16_t max30102_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    3230:	b530      	push	{r4, r5, lr}
    3232:	4605      	mov	r5, r0
    3234:	b085      	sub	sp, #20
    3236:	460c      	mov	r4, r1
    3238:	480a      	ldr	r0, [pc, #40]	; (3264 <max30102_i2c_write.constprop.0+0x34>)
    323a:	f01b fe35 	bl	1eea8 <z_impl_device_get_binding>
	msg.len = num_bytes;
    323e:	2202      	movs	r2, #2
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    3240:	f88d 5000 	strb.w	r5, [sp]
    buffer[1] = data;
    3244:	f88d 4001 	strb.w	r4, [sp, #1]
	msg.buf = (uint8_t *)buf;
    3248:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    324c:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    324e:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    3252:	6883      	ldr	r3, [r0, #8]
    3254:	2201      	movs	r2, #1
    3256:	685c      	ldr	r4, [r3, #4]
    3258:	a901      	add	r1, sp, #4
    325a:	2357      	movs	r3, #87	; 0x57
    325c:	47a0      	blx	r4
{
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return write_bytes(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}
    325e:	b2c0      	uxtb	r0, r0
    3260:	b005      	add	sp, #20
    3262:	bd30      	pop	{r4, r5, pc}
    3264:	00028c3f 	.word	0x00028c3f

00003268 <max30102_i2c_read.constprop.0>:

/* MAX30102 i2c read function */
static uint16_t max30102_i2c_read(u8_t reg, u8_t *data, u16_t len)
    3268:	b530      	push	{r4, r5, lr}
    326a:	4605      	mov	r5, r0
    326c:	b089      	sub	sp, #36	; 0x24
    326e:	460c      	mov	r4, r1
    3270:	480d      	ldr	r0, [pc, #52]	; (32a8 <max30102_i2c_read.constprop.0+0x40>)
    3272:	f01b fe19 	bl	1eea8 <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    3276:	f10d 0207 	add.w	r2, sp, #7
    327a:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    327c:	2201      	movs	r2, #1
	msg[1].len = num_read;
    327e:	e9cd 4205 	strd	r4, r2, [sp, #20]
	msg[0].len = num_write;
    3282:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    3284:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3286:	2207      	movs	r2, #7
    3288:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    328c:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3290:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    3294:	6883      	ldr	r3, [r0, #8]
    3296:	2202      	movs	r2, #2
    3298:	685c      	ldr	r4, [r3, #4]
    329a:	a902      	add	r1, sp, #8
    329c:	2357      	movs	r3, #87	; 0x57
    329e:	47a0      	blx	r4
{
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}
    32a0:	b2c0      	uxtb	r0, r0
    32a2:	b009      	add	sp, #36	; 0x24
    32a4:	bd30      	pop	{r4, r5, pc}
    32a6:	bf00      	nop
    32a8:	00028c3f 	.word	0x00028c3f

000032ac <max30102_reset>:
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes_fifo(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}

bool max30102_reset()
{
    32ac:	b508      	push	{r3, lr}
    u16_t rslt = MAX3_OK;
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x40, 1);
    32ae:	2140      	movs	r1, #64	; 0x40
    32b0:	2009      	movs	r0, #9
    32b2:	f7ff ffbd 	bl	3230 <max30102_i2c_write.constprop.0>
    if (rslt == MAX3_OK)
    32b6:	b920      	cbnz	r0, 32c2 <max30102_reset+0x16>
    {
        printk("RESET MAX30102 : OK \n ");
    32b8:	4804      	ldr	r0, [pc, #16]	; (32cc <max30102_reset+0x20>)
    32ba:	f01d ffeb 	bl	21294 <printk>
        return true;
    32be:	2001      	movs	r0, #1
    else
    {
        printk("RESET MAX30102 : FAILED !!!\n ");
        return false;
    }
}
    32c0:	bd08      	pop	{r3, pc}
        printk("RESET MAX30102 : FAILED !!!\n ");
    32c2:	4803      	ldr	r0, [pc, #12]	; (32d0 <max30102_reset+0x24>)
    32c4:	f01d ffe6 	bl	21294 <printk>
        return false;
    32c8:	2000      	movs	r0, #0
    32ca:	e7f9      	b.n	32c0 <max30102_reset+0x14>
    32cc:	0002a687 	.word	0x0002a687
    32d0:	0002a69e 	.word	0x0002a69e

000032d4 <init_max30102>:

u16_t init_max30102()
{
    32d4:	b513      	push	{r0, r1, r4, lr}
    max30102_reset();
    32d6:	f7ff ffe9 	bl	32ac <max30102_reset>
    32da:	2100      	movs	r1, #0
    32dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    32e0:	f01c fc58 	bl	1fb94 <z_impl_k_sleep>
    k_msleep(1000);
    u8_t dummyData;
    max30102_i2c_read(0x00, &dummyData, 1);
    32e4:	f10d 0106 	add.w	r1, sp, #6
    32e8:	2000      	movs	r0, #0
    32ea:	f7ff ffbd 	bl	3268 <max30102_i2c_read.constprop.0>
    u8_t chipId;
    u16_t rslt = 0x00;
    rslt = max30102_i2c_read(MAX30102_PART_ID, &chipId, 1);
    32ee:	f10d 0107 	add.w	r1, sp, #7
    32f2:	20ff      	movs	r0, #255	; 0xff
    32f4:	f7ff ffb8 	bl	3268 <max30102_i2c_read.constprop.0>
    if (rslt == MAX3_OK)
    32f8:	4604      	mov	r4, r0
    32fa:	b950      	cbnz	r0, 3312 <init_max30102+0x3e>
    {
        if (chipId == I_AM_MAX30102)
    32fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3300:	2b15      	cmp	r3, #21
        {
            printk("Communication with MAX30102 : OK\n");
    3302:	bf0c      	ite	eq
    3304:	4804      	ldreq	r0, [pc, #16]	; (3318 <init_max30102+0x44>)
        }
        else
        {
            printk("Communication with MAX30102 : FAILED!!!\n");
    3306:	4805      	ldrne	r0, [pc, #20]	; (331c <init_max30102+0x48>)
        }
    }
    else
    {
        printk("Communication with MAX30102 : FAILED!!!\n I2C error\n");
    3308:	f01d ffc4 	bl	21294 <printk>
    }
    return rslt;
}
    330c:	4620      	mov	r0, r4
    330e:	b002      	add	sp, #8
    3310:	bd10      	pop	{r4, pc}
        printk("Communication with MAX30102 : FAILED!!!\n I2C error\n");
    3312:	4803      	ldr	r0, [pc, #12]	; (3320 <init_max30102+0x4c>)
    3314:	e7f8      	b.n	3308 <init_max30102+0x34>
    3316:	bf00      	nop
    3318:	0002a6bc 	.word	0x0002a6bc
    331c:	0002a6de 	.word	0x0002a6de
    3320:	0002a707 	.word	0x0002a707

00003324 <max30102_read_fifo>:
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
    return (rslt);
}

u16_t max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
    3324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3328:	b090      	sub	sp, #64	; 0x40
    u16_t rslt = MAX3_OK;
    u32_t temp_dat[6] = {0, 0, 0, 0, 0, 0};
    332a:	2218      	movs	r2, #24
{
    332c:	4606      	mov	r6, r0
    332e:	460d      	mov	r5, r1
    u32_t temp_dat[6] = {0, 0, 0, 0, 0, 0};
    3330:	a804      	add	r0, sp, #16
    3332:	2100      	movs	r1, #0
    3334:	f020 fc4c 	bl	23bd0 <memset>
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    3338:	4b27      	ldr	r3, [pc, #156]	; (33d8 <max30102_read_fifo+0xb4>)
    *pun_ir_led = 0;
    333a:	2400      	movs	r4, #0
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    333c:	6818      	ldr	r0, [r3, #0]
    333e:	9002      	str	r0, [sp, #8]
    3340:	889b      	ldrh	r3, [r3, #4]
    *pun_ir_led = 0;
    3342:	602c      	str	r4, [r5, #0]
    *pun_red_led = 0;
    u8_t temp1;
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    3344:	f10d 0106 	add.w	r1, sp, #6
    *pun_red_led = 0;
    3348:	6034      	str	r4, [r6, #0]
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    334a:	2004      	movs	r0, #4
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    334c:	f8ad 300c 	strh.w	r3, [sp, #12]
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    3350:	f7ff ff8a 	bl	3268 <max30102_i2c_read.constprop.0>
    max30102_i2c_read(MAX30102_FIFO_R_POINTER, &temp1, 1);
    3354:	f10d 0106 	add.w	r1, sp, #6
    3358:	2006      	movs	r0, #6
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    335a:	af02      	add	r7, sp, #8
    max30102_i2c_read(MAX30102_FIFO_R_POINTER, &temp1, 1);
    335c:	f7ff ff84 	bl	3268 <max30102_i2c_read.constprop.0>
    3360:	481e      	ldr	r0, [pc, #120]	; (33dc <max30102_read_fifo+0xb8>)
    3362:	f01b fda1 	bl	1eea8 <z_impl_device_get_binding>
static inline int i2c_burst_read(const struct device *dev,
    3366:	2207      	movs	r2, #7
	msg[0].buf = (uint8_t *)write_buf;
    3368:	eb0d 0102 	add.w	r1, sp, r2
    336c:	910a      	str	r1, [sp, #40]	; 0x28
	msg[0].len = num_write;
    336e:	2101      	movs	r1, #1
    3370:	910b      	str	r1, [sp, #44]	; 0x2c
	msg[1].len = num_read;
    3372:	2106      	movs	r1, #6
    3374:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    3378:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
	msg[1].buf = (uint8_t *)read_buf;
    337c:	970d      	str	r7, [sp, #52]	; 0x34
	msg[1].len = num_read;
    337e:	910e      	str	r1, [sp, #56]	; 0x38
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3380:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
	return api->transfer(dev, msgs, num_msgs, addr);
    3384:	6883      	ldr	r3, [r0, #8]
    3386:	2202      	movs	r2, #2
    3388:	f8d3 8004 	ldr.w	r8, [r3, #4]
    338c:	a90a      	add	r1, sp, #40	; 0x28
    338e:	2357      	movs	r3, #87	; 0x57
    3390:	47c0      	blx	r8
    max30102_i2c_read_fifo(MAX30102_FIFO_DATA_REG, temp_dat1, 6);
    for (int i = 0; i < 6; i++)
    3392:	ab04      	add	r3, sp, #16
    3394:	3401      	adds	r4, #1
        temp_dat[i] = temp_dat1[i];
    3396:	f817 2b01 	ldrb.w	r2, [r7], #1
    339a:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < 6; i++)
    339e:	2c06      	cmp	r4, #6
    33a0:	d1f8      	bne.n	3394 <max30102_read_fifo+0x70>
    *pun_ir_led = (temp_dat[0] << 16) + (temp_dat[1] << 8) + temp_dat[2];
    33a2:	9b05      	ldr	r3, [sp, #20]
    33a4:	9a04      	ldr	r2, [sp, #16]
    33a6:	021b      	lsls	r3, r3, #8
    33a8:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    33ac:	9a06      	ldr	r2, [sp, #24]
    33ae:	4413      	add	r3, r2
    33b0:	602b      	str	r3, [r5, #0]
    *pun_red_led = (temp_dat[3] << 16) + (temp_dat[4] << 8) + temp_dat[5];
    33b2:	9b08      	ldr	r3, [sp, #32]
    33b4:	9a07      	ldr	r2, [sp, #28]
    33b6:	021b      	lsls	r3, r3, #8
    33b8:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    33bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    33be:	4413      	add	r3, r2
    *pun_red_led &= 0x03FFFF; //Mask MSB [23:18]
    33c0:	f3c3 0311 	ubfx	r3, r3, #0, #18
    33c4:	6033      	str	r3, [r6, #0]
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    33c6:	682b      	ldr	r3, [r5, #0]
    return rslt;
}
    33c8:	2000      	movs	r0, #0
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    33ca:	f3c3 0311 	ubfx	r3, r3, #0, #18
    33ce:	602b      	str	r3, [r5, #0]
}
    33d0:	b010      	add	sp, #64	; 0x40
    33d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33d6:	bf00      	nop
    33d8:	000271fe 	.word	0x000271fe
    33dc:	00028c3f 	.word	0x00028c3f

000033e0 <first_data_read>:
int8_t ch_hr_valid;                   //indicator to show if the heart rate calculation is valid

uint32_t un_min, un_max, un_prev_data;

void first_data_read()
{
    33e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    un_min = 0x3FFFF;
    33e4:	4f23      	ldr	r7, [pc, #140]	; (3474 <first_data_read+0x94>)
    33e6:	4b24      	ldr	r3, [pc, #144]	; (3478 <first_data_read+0x98>)
    un_max = 0;
    33e8:	f8df b090 	ldr.w	fp, [pc, #144]	; 347c <first_data_read+0x9c>
    n_ir_buffer_length = BUFFER_SIZE; //*
    33ec:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3480 <first_data_read+0xa0>
    33f0:	4d24      	ldr	r5, [pc, #144]	; (3484 <first_data_read+0xa4>)
    un_min = 0x3FFFF;
    33f2:	603b      	str	r3, [r7, #0]
    un_max = 0;
    33f4:	2400      	movs	r4, #0
    n_ir_buffer_length = BUFFER_SIZE; //*
    33f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    33fa:	4e23      	ldr	r6, [pc, #140]	; (3488 <first_data_read+0xa8>)
    un_max = 0;
    33fc:	f8cb 4000 	str.w	r4, [fp]
{
    3400:	b087      	sub	sp, #28
    n_ir_buffer_length = BUFFER_SIZE; //*
    3402:	f8c8 3000 	str.w	r3, [r8]
    int i = 0;
    for (i = 0; i < n_ir_buffer_length; i++)
    3406:	46a9      	mov	r9, r5
    {
        u8_t data = 0;
    3408:	46a2      	mov	sl, r4
    for (i = 0; i < n_ir_buffer_length; i++)
    340a:	f8d8 1000 	ldr.w	r1, [r8]
    340e:	42a1      	cmp	r1, r4
    3410:	dc11      	bgt.n	3436 <first_data_read+0x56>
        // printf("red=");
        // printf("%d", aun_red_buffer[i]);
        // printf(",ir=");
        // printf("%d\n\r", aun_ir_buffer[i]);
    }
    un_prev_data = aun_red_buffer[i];
    3412:	4b1e      	ldr	r3, [pc, #120]	; (348c <first_data_read+0xac>)
    3414:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
    3418:	601a      	str	r2, [r3, #0]
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    341a:	4b1d      	ldr	r3, [pc, #116]	; (3490 <first_data_read+0xb0>)
    341c:	9302      	str	r3, [sp, #8]
    341e:	4b1d      	ldr	r3, [pc, #116]	; (3494 <first_data_read+0xb4>)
    3420:	9301      	str	r3, [sp, #4]
    3422:	4b1d      	ldr	r3, [pc, #116]	; (3498 <first_data_read+0xb8>)
    3424:	9300      	str	r3, [sp, #0]
    3426:	4a17      	ldr	r2, [pc, #92]	; (3484 <first_data_read+0xa4>)
    3428:	4b1c      	ldr	r3, [pc, #112]	; (349c <first_data_read+0xbc>)
    342a:	4817      	ldr	r0, [pc, #92]	; (3488 <first_data_read+0xa8>)
    342c:	f000 fa36 	bl	389c <maxim_heart_rate_and_oxygen_saturation>
}
    3430:	b007      	add	sp, #28
    3432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u8_t data = 0;
    3436:	f88d a017 	strb.w	sl, [sp, #23]
            max30102_i2c_read(MAX30102_INT1_STATUS, &data, 1);
    343a:	f10d 0117 	add.w	r1, sp, #23
    343e:	2000      	movs	r0, #0
    3440:	f7ff ff12 	bl	3268 <max30102_i2c_read.constprop.0>
        while (data != 0x40)
    3444:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3448:	2b40      	cmp	r3, #64	; 0x40
    344a:	d1f6      	bne.n	343a <first_data_read+0x5a>
        max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i)); //read from MAX30102 FIFO
    344c:	4631      	mov	r1, r6
    344e:	4628      	mov	r0, r5
    3450:	f7ff ff68 	bl	3324 <max30102_read_fifo>
        if (un_min > aun_red_buffer[i])
    3454:	f855 3b04 	ldr.w	r3, [r5], #4
    3458:	683a      	ldr	r2, [r7, #0]
    345a:	4293      	cmp	r3, r2
        if (un_max < aun_red_buffer[i])
    345c:	f8db 2000 	ldr.w	r2, [fp]
            un_min = aun_red_buffer[i]; //update signal min
    3460:	bf38      	it	cc
    3462:	603b      	strcc	r3, [r7, #0]
        if (un_max < aun_red_buffer[i])
    3464:	4293      	cmp	r3, r2
            un_max = aun_red_buffer[i]; //update signal max
    3466:	bf88      	it	hi
    3468:	f8cb 3000 	strhi.w	r3, [fp]
    for (i = 0; i < n_ir_buffer_length; i++)
    346c:	3401      	adds	r4, #1
    346e:	3604      	adds	r6, #4
    3470:	e7cb      	b.n	340a <first_data_read+0x2a>
    3472:	bf00      	nop
    3474:	2000bd14 	.word	0x2000bd14
    3478:	0003ffff 	.word	0x0003ffff
    347c:	2000bd10 	.word	0x2000bd10
    3480:	2000bd08 	.word	0x2000bd08
    3484:	2000b534 	.word	0x2000b534
    3488:	2000ad64 	.word	0x2000ad64
    348c:	2000bd18 	.word	0x2000bd18
    3490:	2000ed23 	.word	0x2000ed23
    3494:	2000bd04 	.word	0x2000bd04
    3498:	2000ed24 	.word	0x2000ed24
    349c:	2000bd0c 	.word	0x2000bd0c

000034a0 <read_heart_rate_spio2>:

void read_heart_rate_spio2(int *rate, int *spo2, bool *valid_hr, bool *valid_spo2)
{
    34a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i = 0;
    un_min = 0x3FFFF;
    34a4:	4d3f      	ldr	r5, [pc, #252]	; (35a4 <read_heart_rate_spio2+0x104>)
    34a6:	f8df 9100 	ldr.w	r9, [pc, #256]	; 35a8 <read_heart_rate_spio2+0x108>
    34aa:	f8df c100 	ldr.w	ip, [pc, #256]	; 35ac <read_heart_rate_spio2+0x10c>
{
    34ae:	b089      	sub	sp, #36	; 0x24
    34b0:	460e      	mov	r6, r1
    un_max = 0;
    34b2:	493f      	ldr	r1, [pc, #252]	; (35b0 <read_heart_rate_spio2+0x110>)
{
    34b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    un_max = 0;
    34b8:	2300      	movs	r3, #0
    un_min = 0x3FFFF;
    34ba:	4a3e      	ldr	r2, [pc, #248]	; (35b4 <read_heart_rate_spio2+0x114>)
    34bc:	602a      	str	r2, [r5, #0]
{
    34be:	4607      	mov	r7, r0
    un_max = 0;
    34c0:	600b      	str	r3, [r1, #0]
    34c2:	46ce      	mov	lr, r9
    34c4:	f44f 74f5 	mov.w	r4, #490	; 0x1ea
    34c8:	4618      	mov	r0, r3
    34ca:	469a      	mov	sl, r3

    //dumping the first 100 sets of samples in the memory and shift the last 400 sets of samples to the top
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    {
        aun_red_buffer[i - DUMP_SAMPLES] = aun_red_buffer[i];
    34cc:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
        aun_ir_buffer[i - DUMP_SAMPLES] = aun_ir_buffer[i];
    34d0:	f8de 8028 	ldr.w	r8, [lr, #40]	; 0x28
        aun_red_buffer[i - DUMP_SAMPLES] = aun_red_buffer[i];
    34d4:	f84c 1b04 	str.w	r1, [ip], #4

        //update the signal min and max
        if (un_min > aun_red_buffer[i])
    34d8:	4291      	cmp	r1, r2
    34da:	bf3c      	itt	cc
    34dc:	460a      	movcc	r2, r1
    34de:	f04f 0a01 	movcc.w	sl, #1
            un_min = aun_red_buffer[i];
        if (un_max < aun_red_buffer[i])
    34e2:	4281      	cmp	r1, r0
    34e4:	bf84      	itt	hi
    34e6:	4608      	movhi	r0, r1
    34e8:	2301      	movhi	r3, #1
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    34ea:	3c01      	subs	r4, #1
        aun_ir_buffer[i - DUMP_SAMPLES] = aun_ir_buffer[i];
    34ec:	f84e 8b04 	str.w	r8, [lr], #4
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    34f0:	d1ec      	bne.n	34cc <read_heart_rate_spio2+0x2c>
    34f2:	f1ba 0f00 	cmp.w	sl, #0
    34f6:	d000      	beq.n	34fa <read_heart_rate_spio2+0x5a>
    34f8:	602a      	str	r2, [r5, #0]
    34fa:	b10b      	cbz	r3, 3500 <read_heart_rate_spio2+0x60>
    34fc:	4b2c      	ldr	r3, [pc, #176]	; (35b0 <read_heart_rate_spio2+0x110>)
    34fe:	6018      	str	r0, [r3, #0]
    3500:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 35b8 <read_heart_rate_spio2+0x118>
    }

    //take 100 sets of samples before calculating the heart rate.
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    {
        un_prev_data = aun_red_buffer[i - 1];
    3504:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 35bc <read_heart_rate_spio2+0x11c>
        // printf("%d", aun_ir_buffer[i]);
        // printf(", HR=%d, ", n_heart_rate);
        // printf("HRvalid=%d, ", ch_hr_valid);
        // printf("SpO2=%d, ", n_sp02);
        // printf("SPO2Valid=%d\n\r", ch_spo2_valid);
        *rate = n_heart_rate;
    3508:	4d2d      	ldr	r5, [pc, #180]	; (35c0 <read_heart_rate_spio2+0x120>)
    350a:	f44f 64f5 	mov.w	r4, #1960	; 0x7a8
        u8_t data = 0;
    350e:	f04f 0b00 	mov.w	fp, #0
        un_prev_data = aun_red_buffer[i - 1];
    3512:	f858 3b04 	ldr.w	r3, [r8], #4
    3516:	f8ca 3000 	str.w	r3, [sl]
        u8_t data = 0;
    351a:	f88d b01f 	strb.w	fp, [sp, #31]
            max30102_i2c_read(MAX30102_INT1_STATUS, &data, 1);
    351e:	f10d 011f 	add.w	r1, sp, #31
    3522:	2000      	movs	r0, #0
    3524:	f7ff fea0 	bl	3268 <max30102_i2c_read.constprop.0>
        while (data != 0x40)
    3528:	f89d 301f 	ldrb.w	r3, [sp, #31]
    352c:	2b40      	cmp	r3, #64	; 0x40
    352e:	d1f6      	bne.n	351e <read_heart_rate_spio2+0x7e>
        max30102_i2c_read(MAX30102_FIFO_W_POINTER, &data, 1);
    3530:	f10d 011f 	add.w	r1, sp, #31
    3534:	2004      	movs	r0, #4
    3536:	f7ff fe97 	bl	3268 <max30102_i2c_read.constprop.0>
        max30102_i2c_read(MAX30102_FIFO_R_POINTER, &data, 1);
    353a:	f10d 011f 	add.w	r1, sp, #31
    353e:	2006      	movs	r0, #6
    3540:	f7ff fe92 	bl	3268 <max30102_i2c_read.constprop.0>
        max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i));
    3544:	eb09 0104 	add.w	r1, r9, r4
    3548:	4640      	mov	r0, r8
    354a:	f7ff feeb 	bl	3324 <max30102_read_fifo>
        *rate = n_heart_rate;
    354e:	682b      	ldr	r3, [r5, #0]
    3550:	603b      	str	r3, [r7, #0]
        *spo2 = n_sp02;
    3552:	4b1c      	ldr	r3, [pc, #112]	; (35c4 <read_heart_rate_spio2+0x124>)
        if (ch_hr_valid == 1)
    3554:	491c      	ldr	r1, [pc, #112]	; (35c8 <read_heart_rate_spio2+0x128>)
        *spo2 = n_sp02;
    3556:	681a      	ldr	r2, [r3, #0]
    3558:	6032      	str	r2, [r6, #0]
        if (ch_hr_valid == 1)
    355a:	f991 2000 	ldrsb.w	r2, [r1]
    355e:	1e50      	subs	r0, r2, #1
    3560:	4242      	negs	r2, r0
    3562:	4142      	adcs	r2, r0
    3564:	9804      	ldr	r0, [sp, #16]
    3566:	7002      	strb	r2, [r0, #0]
            *valid_hr = true;
        else
            *valid_hr = false;
        if (ch_spo2_valid == 1)
    3568:	4818      	ldr	r0, [pc, #96]	; (35cc <read_heart_rate_spio2+0x12c>)
    356a:	f990 2000 	ldrsb.w	r2, [r0]
    356e:	f102 3cff 	add.w	ip, r2, #4294967295
    3572:	f1dc 0200 	rsbs	r2, ip, #0
    3576:	eb42 020c 	adc.w	r2, r2, ip
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    357a:	3404      	adds	r4, #4
        if (ch_spo2_valid == 1)
    357c:	f8dd c014 	ldr.w	ip, [sp, #20]
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    3580:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
        if (ch_spo2_valid == 1)
    3584:	f88c 2000 	strb.w	r2, [ip]
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    3588:	d1c3      	bne.n	3512 <read_heart_rate_spio2+0x72>
            *valid_spo2 = true;
        else
            *valid_spo2 = false;
    }
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    358a:	e9cd 5101 	strd	r5, r1, [sp, #4]
    358e:	4910      	ldr	r1, [pc, #64]	; (35d0 <read_heart_rate_spio2+0x130>)
    3590:	9000      	str	r0, [sp, #0]
    3592:	4a06      	ldr	r2, [pc, #24]	; (35ac <read_heart_rate_spio2+0x10c>)
    3594:	6809      	ldr	r1, [r1, #0]
    3596:	4804      	ldr	r0, [pc, #16]	; (35a8 <read_heart_rate_spio2+0x108>)
    3598:	f000 f980 	bl	389c <maxim_heart_rate_and_oxygen_saturation>
    359c:	b009      	add	sp, #36	; 0x24
    359e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    35a2:	bf00      	nop
    35a4:	2000bd14 	.word	0x2000bd14
    35a8:	2000ad64 	.word	0x2000ad64
    35ac:	2000b534 	.word	0x2000b534
    35b0:	2000bd10 	.word	0x2000bd10
    35b4:	0003ffff 	.word	0x0003ffff
    35b8:	2000bcd8 	.word	0x2000bcd8
    35bc:	2000bd18 	.word	0x2000bd18
    35c0:	2000bd04 	.word	0x2000bd04
    35c4:	2000bd0c 	.word	0x2000bd0c
    35c8:	2000ed23 	.word	0x2000ed23
    35cc:	2000ed24 	.word	0x2000ed24
    35d0:	2000bd08 	.word	0x2000bd08

000035d4 <button_pressed>:
static struct gpio_callback button_cb_data;

void button_pressed(struct device *dev, struct gpio_callback *cb,
                    u32_t pins)
{
    printk("Device Detached\n");
    35d4:	4801      	ldr	r0, [pc, #4]	; (35dc <button_pressed+0x8>)
    35d6:	f01d be5d 	b.w	21294 <printk>
    35da:	bf00      	nop
    35dc:	0002a73b 	.word	0x0002a73b

000035e0 <init_latch>:

struct device *globalButton;
struct device *globalLed;

void init_latch()
{
    35e0:	b570      	push	{r4, r5, r6, lr}
    35e2:	4828      	ldr	r0, [pc, #160]	; (3684 <init_latch+0xa4>)
    35e4:	f01b fc60 	bl	1eea8 <z_impl_device_get_binding>
    struct device *button;
    struct device *led;
    int ret;

    button = device_get_binding(SW0_GPIO_LABEL);
    if (button == NULL)
    35e8:	4604      	mov	r4, r0
    35ea:	b928      	cbnz	r0, 35f8 <init_latch+0x18>

    led = initialize_led();
    globalButton=button;
    globalLed=led;

}
    35ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error: didn't find %s device\n", SW0_GPIO_LABEL);
    35f0:	4924      	ldr	r1, [pc, #144]	; (3684 <init_latch+0xa4>)
    35f2:	4825      	ldr	r0, [pc, #148]	; (3688 <init_latch+0xa8>)
    35f4:	f01d be4e 	b.w	21294 <printk>
    ret = gpio_pin_configure(button, SW0_GPIO_PIN, SW0_GPIO_FLAGS);
    35f8:	2107      	movs	r1, #7
    35fa:	f240 1211 	movw	r2, #273	; 0x111
    35fe:	f01d fb3c 	bl	20c7a <gpio_pin_configure>
    if (ret != 0)
    3602:	4601      	mov	r1, r0
    3604:	b130      	cbz	r0, 3614 <init_latch+0x34>
        printk("Error %d: failed to configure %s pin %d\n",
    3606:	4a1f      	ldr	r2, [pc, #124]	; (3684 <init_latch+0xa4>)
    3608:	4820      	ldr	r0, [pc, #128]	; (368c <init_latch+0xac>)
    360a:	2307      	movs	r3, #7
}
    360c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    3610:	f01d be40 	b.w	21294 <printk>
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
    3614:	68a3      	ldr	r3, [r4, #8]
    3616:	2107      	movs	r1, #7
    3618:	699d      	ldr	r5, [r3, #24]
    361a:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    361e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    3622:	4620      	mov	r0, r4
    3624:	47a8      	blx	r5
    if (ret != 0)
    3626:	4601      	mov	r1, r0
    3628:	b118      	cbz	r0, 3632 <init_latch+0x52>
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    362a:	4a16      	ldr	r2, [pc, #88]	; (3684 <init_latch+0xa4>)
    362c:	4818      	ldr	r0, [pc, #96]	; (3690 <init_latch+0xb0>)
    362e:	2307      	movs	r3, #7
    3630:	e7ec      	b.n	360c <init_latch+0x2c>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    3632:	4918      	ldr	r1, [pc, #96]	; (3694 <init_latch+0xb4>)
    3634:	4b18      	ldr	r3, [pc, #96]	; (3698 <init_latch+0xb8>)
    3636:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    3638:	2380      	movs	r3, #128	; 0x80
    363a:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    363c:	68a3      	ldr	r3, [r4, #8]
    363e:	69db      	ldr	r3, [r3, #28]
    3640:	b113      	cbz	r3, 3648 <init_latch+0x68>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    3642:	2201      	movs	r2, #1
    3644:	4620      	mov	r0, r4
    3646:	4798      	blx	r3
    3648:	4814      	ldr	r0, [pc, #80]	; (369c <init_latch+0xbc>)
    364a:	f01b fc2d 	bl	1eea8 <z_impl_device_get_binding>
{
    struct device *led;
    int ret;

    led = device_get_binding(LED0_GPIO_LABEL);
    if (led == NULL)
    364e:	4605      	mov	r5, r0
    3650:	b940      	cbnz	r0, 3664 <init_latch+0x84>
    {
        printk("Didn't find LED device %s\n", LED0_GPIO_LABEL);
    3652:	4912      	ldr	r1, [pc, #72]	; (369c <init_latch+0xbc>)
    3654:	4812      	ldr	r0, [pc, #72]	; (36a0 <init_latch+0xc0>)
    3656:	f01d fe1d 	bl	21294 <printk>
    globalButton=button;
    365a:	4b12      	ldr	r3, [pc, #72]	; (36a4 <init_latch+0xc4>)
    365c:	601c      	str	r4, [r3, #0]
    globalLed=led;
    365e:	4b12      	ldr	r3, [pc, #72]	; (36a8 <init_latch+0xc8>)
    3660:	601d      	str	r5, [r3, #0]
}
    3662:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    }

    ret = gpio_pin_configure(led, LED0_GPIO_PIN, LED0_GPIO_FLAGS);
    3664:	210a      	movs	r1, #10
    3666:	f44f 7200 	mov.w	r2, #512	; 0x200
    366a:	f01d fb06 	bl	20c7a <gpio_pin_configure>
    if (ret != 0)
    366e:	4601      	mov	r1, r0
    3670:	2800      	cmp	r0, #0
    3672:	d0f2      	beq.n	365a <init_latch+0x7a>
    {
        printk("Error %d: failed to configure LED device %s pin %d\n",
    3674:	4a09      	ldr	r2, [pc, #36]	; (369c <init_latch+0xbc>)
    3676:	480d      	ldr	r0, [pc, #52]	; (36ac <init_latch+0xcc>)
    3678:	230a      	movs	r3, #10
    367a:	f01d fe0b 	bl	21294 <printk>
               ret, LED0_GPIO_LABEL, LED0_GPIO_PIN);
        return NULL;
    367e:	2500      	movs	r5, #0
    3680:	e7eb      	b.n	365a <init_latch+0x7a>
    3682:	bf00      	nop
    3684:	0002a74c 	.word	0x0002a74c
    3688:	0002a753 	.word	0x0002a753
    368c:	0002a771 	.word	0x0002a771
    3690:	0002a79a 	.word	0x0002a79a
    3694:	2000bd1c 	.word	0x2000bd1c
    3698:	000035d5 	.word	0x000035d5
    369c:	0002a7d0 	.word	0x0002a7d0
    36a0:	0002a7d7 	.word	0x0002a7d7
    36a4:	2000bd28 	.word	0x2000bd28
    36a8:	2000bd2c 	.word	0x2000bd2c
    36ac:	0002a7f2 	.word	0x0002a7f2

000036b0 <detect_latch>:
    return match_led_to_button(globalButton,globalLed);
    36b0:	4b02      	ldr	r3, [pc, #8]	; (36bc <detect_latch+0xc>)
    36b2:	6819      	ldr	r1, [r3, #0]
    36b4:	4b02      	ldr	r3, [pc, #8]	; (36c0 <detect_latch+0x10>)
    36b6:	6818      	ldr	r0, [r3, #0]
    36b8:	f01d baf2 	b.w	20ca0 <match_led_to_button>
    36bc:	2000bd2c 	.word	0x2000bd2c
    36c0:	2000bd28 	.word	0x2000bd28

000036c4 <max30208_i2c_write.constprop.0>:
static uint16_t max30208_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    36c4:	b530      	push	{r4, r5, lr}
    36c6:	4605      	mov	r5, r0
    36c8:	b085      	sub	sp, #20
    36ca:	460c      	mov	r4, r1
    36cc:	480a      	ldr	r0, [pc, #40]	; (36f8 <max30208_i2c_write.constprop.0+0x34>)
    36ce:	f01b fbeb 	bl	1eea8 <z_impl_device_get_binding>
	msg.len = num_bytes;
    36d2:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    36d4:	f88d 5000 	strb.w	r5, [sp]
    ret = i2c_reg_write_byte(i2c_dev, slaveAddr, addr, data);
    36d8:	f88d 4001 	strb.w	r4, [sp, #1]
	msg.buf = (uint8_t *)buf;
    36dc:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    36e0:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    36e2:	f88d 300c 	strb.w	r3, [sp, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
    36e6:	2350      	movs	r3, #80	; 0x50
    36e8:	2201      	movs	r2, #1
    36ea:	a901      	add	r1, sp, #4
    36ec:	f01d fafb 	bl	20ce6 <z_impl_i2c_transfer>
}
    36f0:	b2c0      	uxtb	r0, r0
    36f2:	b005      	add	sp, #20
    36f4:	bd30      	pop	{r4, r5, pc}
    36f6:	bf00      	nop
    36f8:	00028c3f 	.word	0x00028c3f

000036fc <max30208_i2c_read.constprop.0>:
static uint16_t max30208_i2c_read(u8_t reg, u8_t *data, u16_t len)
    36fc:	b530      	push	{r4, r5, lr}
    36fe:	4605      	mov	r5, r0
    3700:	b089      	sub	sp, #36	; 0x24
    3702:	460c      	mov	r4, r1
    3704:	480c      	ldr	r0, [pc, #48]	; (3738 <max30208_i2c_read.constprop.0+0x3c>)
    3706:	f01b fbcf 	bl	1eea8 <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    370a:	f10d 0307 	add.w	r3, sp, #7
    370e:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    3710:	2301      	movs	r3, #1
	msg[1].len = num_read;
    3712:	e9cd 4305 	strd	r4, r3, [sp, #20]
	msg[0].len = num_write;
    3716:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    3718:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    371a:	2307      	movs	r3, #7
    371c:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    3720:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3724:	f88d 301c 	strb.w	r3, [sp, #28]
    3728:	2350      	movs	r3, #80	; 0x50
    372a:	2202      	movs	r2, #2
    372c:	a902      	add	r1, sp, #8
    372e:	f01d fada 	bl	20ce6 <z_impl_i2c_transfer>
}
    3732:	b2c0      	uxtb	r0, r0
    3734:	b009      	add	sp, #36	; 0x24
    3736:	bd30      	pop	{r4, r5, pc}
    3738:	00028c3f 	.word	0x00028c3f

0000373c <mpu6050_i2c_write.constprop.0.isra.0>:



/* MPU6050 i2c write function */
static uint16_t mpu6050_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    373c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    373e:	4604      	mov	r4, r0
    3740:	480a      	ldr	r0, [pc, #40]	; (376c <mpu6050_i2c_write.constprop.0.isra.0+0x30>)
    3742:	f01b fbb1 	bl	1eea8 <z_impl_device_get_binding>
	uint8_t tx_buf[2] = {reg_addr, value};
    3746:	2300      	movs	r3, #0
    3748:	f88d 3001 	strb.w	r3, [sp, #1]
	msg.len = num_bytes;
    374c:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    374e:	f88d 4000 	strb.w	r4, [sp]
	msg.buf = (uint8_t *)buf;
    3752:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    3756:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    3758:	f88d 300c 	strb.w	r3, [sp, #12]
    375c:	2368      	movs	r3, #104	; 0x68
    375e:	2201      	movs	r2, #1
    3760:	a901      	add	r1, sp, #4
    3762:	f01d fac0 	bl	20ce6 <z_impl_i2c_transfer>
	} else {
		printk("Wrote 0xAE to address 0x00.\n");
	}
    #endif
    return ret;
}
    3766:	b004      	add	sp, #16
    3768:	bd10      	pop	{r4, pc}
    376a:	bf00      	nop
    376c:	00028c3f 	.word	0x00028c3f

00003770 <mpu6050_i2c_read.constprop.0>:

/* MPU6050 i2c read function */
static uint16_t mpu6050_i2c_read(u8_t reg, u8_t *data, u16_t len)
    3770:	b530      	push	{r4, r5, lr}
    3772:	4605      	mov	r5, r0
    3774:	b089      	sub	sp, #36	; 0x24
    3776:	460c      	mov	r4, r1
    3778:	480c      	ldr	r0, [pc, #48]	; (37ac <mpu6050_i2c_read.constprop.0+0x3c>)
    377a:	f01b fb95 	bl	1eea8 <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    377e:	f10d 0307 	add.w	r3, sp, #7
    3782:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    3784:	2301      	movs	r3, #1
	msg[1].len = num_read;
    3786:	e9cd 4305 	strd	r4, r3, [sp, #20]
	msg[0].len = num_write;
    378a:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    378c:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    378e:	2307      	movs	r3, #7
    3790:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    3794:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3798:	f88d 301c 	strb.w	r3, [sp, #28]
    379c:	2368      	movs	r3, #104	; 0x68
    379e:	2202      	movs	r2, #2
    37a0:	a902      	add	r1, sp, #8
    37a2:	f01d faa0 	bl	20ce6 <z_impl_i2c_transfer>
	} else {
		printk("Read 0x%X from address %X.\n", *data, reg);
	}
    #endif
    return ret;
}
    37a6:	b2c0      	uxtb	r0, r0
    37a8:	b009      	add	sp, #36	; 0x24
    37aa:	bd30      	pop	{r4, r5, pc}
    37ac:	00028c3f 	.word	0x00028c3f

000037b0 <init_max30208>:
{
    37b0:	b513      	push	{r0, r1, r4, lr}
    rslt = max30208_i2c_read(MAX30208_PART_ID, &chipId, 1);
    37b2:	20ff      	movs	r0, #255	; 0xff
    37b4:	f10d 0107 	add.w	r1, sp, #7
    37b8:	f7ff ffa0 	bl	36fc <max30208_i2c_read.constprop.0>
    if (rslt == MAX_OK)
    37bc:	4604      	mov	r4, r0
    37be:	b950      	cbnz	r0, 37d6 <init_max30208+0x26>
        if (chipId == I_AM_MAX30208)
    37c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    37c4:	2b30      	cmp	r3, #48	; 0x30
            printk("Communication with MAX30208 : OK\n");
    37c6:	bf0c      	ite	eq
    37c8:	4805      	ldreq	r0, [pc, #20]	; (37e0 <init_max30208+0x30>)
            printk("Communication with MAX30208 : FAILED!!!\n");
    37ca:	4806      	ldrne	r0, [pc, #24]	; (37e4 <init_max30208+0x34>)
    37cc:	f01d fd62 	bl	21294 <printk>
}
    37d0:	4620      	mov	r0, r4
    37d2:	b002      	add	sp, #8
    37d4:	bd10      	pop	{r4, pc}
        printk("Communication with MAX30208 : FAILED!!!\n I2C error %d\n", rslt);
    37d6:	4601      	mov	r1, r0
    37d8:	4803      	ldr	r0, [pc, #12]	; (37e8 <init_max30208+0x38>)
    37da:	f01d fd5b 	bl	21294 <printk>
    37de:	e7f7      	b.n	37d0 <init_max30208+0x20>
    37e0:	0002a826 	.word	0x0002a826
    37e4:	0002a848 	.word	0x0002a848
    37e8:	0002a871 	.word	0x0002a871

000037ec <configure_max30208>:
{
    37ec:	b510      	push	{r4, lr}
    rslt |= max30208_i2c_write(MAX30208_INT_ENABLE, 0x00, 1);
    37ee:	2100      	movs	r1, #0
    37f0:	2001      	movs	r0, #1
    37f2:	f7ff ff67 	bl	36c4 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    37f6:	2100      	movs	r1, #0
    rslt |= max30208_i2c_write(MAX30208_INT_ENABLE, 0x00, 1);
    37f8:	4604      	mov	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    37fa:	2004      	movs	r0, #4
    37fc:	f7ff ff62 	bl	36c4 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3800:	2100      	movs	r1, #0
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    3802:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3804:	2005      	movs	r0, #5
    3806:	f7ff ff5d 	bl	36c4 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    380a:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    380c:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    380e:	2100      	movs	r1, #0
    3810:	2006      	movs	r0, #6
    3812:	f7ff ff57 	bl	36c4 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3816:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    3818:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    381a:	210f      	movs	r1, #15
    381c:	2009      	movs	r0, #9
    381e:	f7ff ff51 	bl	36c4 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    3822:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    3824:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    3826:	211a      	movs	r1, #26
    3828:	200a      	movs	r0, #10
    382a:	f7ff ff4b 	bl	36c4 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    382e:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    3830:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    3832:	21c1      	movs	r1, #193	; 0xc1
    3834:	2014      	movs	r0, #20
    3836:	f7ff ff45 	bl	36c4 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    383a:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    383c:	4304      	orrs	r4, r0
    383e:	b2a4      	uxth	r4, r4
    if (rslt == MAX_OK)
    3840:	b924      	cbnz	r4, 384c <configure_max30208+0x60>
        printk("CONFIGURING MAX30208 : OK\n");
    3842:	4803      	ldr	r0, [pc, #12]	; (3850 <configure_max30208+0x64>)
        printk("CONFIGURING MAX30208 : FAILED!!!\n");
    3844:	f01d fd26 	bl	21294 <printk>
}
    3848:	4620      	mov	r0, r4
    384a:	bd10      	pop	{r4, pc}
        printk("CONFIGURING MAX30208 : FAILED!!!\n");
    384c:	4801      	ldr	r0, [pc, #4]	; (3854 <configure_max30208+0x68>)
    384e:	e7f9      	b.n	3844 <configure_max30208+0x58>
    3850:	0002a8a8 	.word	0x0002a8a8
    3854:	0002a8c3 	.word	0x0002a8c3

00003858 <configure_mpu6050>:

/*** Config MPU6050 ***/
void configure_mpu6050()
{
    3858:	b507      	push	{r0, r1, r2, lr}
    int rslt;
	mpu6050_i2c_write(0x6B, 0x00, 1);	//Setting power
    385a:	206b      	movs	r0, #107	; 0x6b
    385c:	f7ff ff6e 	bl	373c <mpu6050_i2c_write.constprop.0.isra.0>
	mpu6050_i2c_write(0x1B, 0x00, 1);	//Setting Gyro
    3860:	201b      	movs	r0, #27
    3862:	f7ff ff6b 	bl	373c <mpu6050_i2c_write.constprop.0.isra.0>
	mpu6050_i2c_write(0x38, 0x00, 1);	//Setting Accl
    3866:	2038      	movs	r0, #56	; 0x38
    3868:	f7ff ff68 	bl	373c <mpu6050_i2c_write.constprop.0.isra.0>
    
    mpu6050_i2c_read(0x75, &rslt, 1);   //Reading Who_AM_I register of MPU6050 
    386c:	a901      	add	r1, sp, #4
    386e:	2075      	movs	r0, #117	; 0x75
    3870:	f7ff ff7e 	bl	3770 <mpu6050_i2c_read.constprop.0>
    if(rslt == 0x68)
    3874:	9b01      	ldr	r3, [sp, #4]
    3876:	2b68      	cmp	r3, #104	; 0x68
        printk("CONFIGURING MPU6050 : OK\n");
    3878:	bf0c      	ite	eq
    387a:	4803      	ldreq	r0, [pc, #12]	; (3888 <configure_mpu6050+0x30>)
    else
      printk("CONFIGURING MPU6050 : FAILED !!!\n");  
    387c:	4803      	ldrne	r0, [pc, #12]	; (388c <configure_mpu6050+0x34>)
    387e:	f01d fd09 	bl	21294 <printk>
}
    3882:	b003      	add	sp, #12
    3884:	f85d fb04 	ldr.w	pc, [sp], #4
    3888:	0002a8e5 	.word	0x0002a8e5
    388c:	0002a8ff 	.word	0x0002a8ff

00003890 <getAdcDevice>:
    3890:	4801      	ldr	r0, [pc, #4]	; (3898 <getAdcDevice+0x8>)
    3892:	f01b bb09 	b.w	1eea8 <z_impl_device_get_binding>
    3896:	bf00      	nop
    3898:	0002a921 	.word	0x0002a921

0000389c <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
    389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38a0:	b0bd      	sub	sp, #244	; 0xf4
    38a2:	4690      	mov	r8, r2
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5], n_ratio_average;
    int32_t n_nume, n_denom;
    // remove DC of ir signal
    un_ir_mean = 0;
    for (k = 0; k < n_ir_buffer_length; k++)
    38a4:	2200      	movs	r2, #0
{
    38a6:	9305      	str	r3, [sp, #20]
    38a8:	4606      	mov	r6, r0
    38aa:	460d      	mov	r5, r1
    un_ir_mean = 0;
    38ac:	4613      	mov	r3, r2
    for (k = 0; k < n_ir_buffer_length; k++)
    38ae:	42aa      	cmp	r2, r5
    38b0:	db45      	blt.n	393e <maxim_heart_rate_and_oxygen_saturation+0xa2>
        un_ir_mean += pun_ir_buffer[k];
    un_ir_mean = un_ir_mean / n_ir_buffer_length;
    38b2:	fbb3 f3f5 	udiv	r3, r3, r5
    for (k = 0; k < n_ir_buffer_length; k++)
    38b6:	4c9b      	ldr	r4, [pc, #620]	; (3b24 <maxim_heart_rate_and_oxygen_saturation+0x288>)
    38b8:	2200      	movs	r2, #0
    38ba:	4620      	mov	r0, r4
    38bc:	42aa      	cmp	r2, r5
    38be:	db43      	blt.n	3948 <maxim_heart_rate_and_oxygen_saturation+0xac>
    38c0:	4a98      	ldr	r2, [pc, #608]	; (3b24 <maxim_heart_rate_and_oxygen_saturation+0x288>)
        an_x[k] = pun_ir_buffer[k] - un_ir_mean;

    // 4 pt Moving Average
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    38c2:	2100      	movs	r1, #0
    {
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
    38c4:	6817      	ldr	r7, [r2, #0]
    38c6:	f852 3f04 	ldr.w	r3, [r2, #4]!
    38ca:	6850      	ldr	r0, [r2, #4]
    38cc:	4403      	add	r3, r0
    38ce:	6890      	ldr	r0, [r2, #8]
    38d0:	443b      	add	r3, r7
        an_x[k] = n_denom / (int32_t)4;
    38d2:	181b      	adds	r3, r3, r0
    38d4:	bf48      	it	mi
    38d6:	3303      	addmi	r3, #3
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
    38d8:	3101      	adds	r1, #1
        an_x[k] = n_denom / (int32_t)4;
    38da:	109b      	asrs	r3, r3, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    38dc:	f5b1 7ff8 	cmp.w	r1, #496	; 0x1f0
        an_x[k] = n_denom / (int32_t)4;
    38e0:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    38e4:	d1ee      	bne.n	38c4 <maxim_heart_rate_and_oxygen_saturation+0x28>
    38e6:	4890      	ldr	r0, [pc, #576]	; (3b28 <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    38e8:	4f8e      	ldr	r7, [pc, #568]	; (3b24 <maxim_heart_rate_and_oxygen_saturation+0x288>)
    38ea:	4684      	mov	ip, r0
    }

    // get difference of smoothed IR signal

    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    38ec:	2200      	movs	r2, #0
    38ee:	f240 1eef 	movw	lr, #495	; 0x1ef
        an_dx[k] = (an_x[k + 1] - an_x[k]);
    38f2:	463b      	mov	r3, r7
    38f4:	6879      	ldr	r1, [r7, #4]
    38f6:	681b      	ldr	r3, [r3, #0]
    38f8:	3201      	adds	r2, #1
    38fa:	1acb      	subs	r3, r1, r3
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    38fc:	4572      	cmp	r2, lr
        an_dx[k] = (an_x[k + 1] - an_x[k]);
    38fe:	f84c 3b04 	str.w	r3, [ip], #4
    3902:	f107 0704 	add.w	r7, r7, #4
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    3906:	d1f4      	bne.n	38f2 <maxim_heart_rate_and_oxygen_saturation+0x56>
    3908:	4a87      	ldr	r2, [pc, #540]	; (3b28 <maxim_heart_rate_and_oxygen_saturation+0x28c>)

    // 2-pt Moving Average to an_dx
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    390a:	2100      	movs	r1, #0
    {
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
    390c:	6813      	ldr	r3, [r2, #0]
    390e:	f852 7f04 	ldr.w	r7, [r2, #4]!
    3912:	443b      	add	r3, r7
    3914:	3101      	adds	r1, #1
    3916:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    391a:	105b      	asrs	r3, r3, #1
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    391c:	f5b1 7ff7 	cmp.w	r1, #494	; 0x1ee
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
    3920:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3924:	d1f2      	bne.n	390c <maxim_heart_rate_and_oxygen_saturation+0x70>
    3926:	4f80      	ldr	r7, [pc, #512]	; (3b28 <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    }

    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    3928:	2100      	movs	r1, #0
    392a:	1d4b      	adds	r3, r1, #5
    392c:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 3b2c <maxim_heart_rate_and_oxygen_saturation+0x290>
    3930:	428b      	cmp	r3, r1
    3932:	bfb4      	ite	lt
    3934:	2301      	movlt	r3, #1
    3936:	2306      	movge	r3, #6
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3938:	46bc      	mov	ip, r7
    {
        s = 0;
    393a:	2200      	movs	r2, #0
    393c:	e012      	b.n	3964 <maxim_heart_rate_and_oxygen_saturation+0xc8>
        un_ir_mean += pun_ir_buffer[k];
    393e:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    for (k = 0; k < n_ir_buffer_length; k++)
    3942:	3201      	adds	r2, #1
        un_ir_mean += pun_ir_buffer[k];
    3944:	440b      	add	r3, r1
    for (k = 0; k < n_ir_buffer_length; k++)
    3946:	e7b2      	b.n	38ae <maxim_heart_rate_and_oxygen_saturation+0x12>
        an_x[k] = pun_ir_buffer[k] - un_ir_mean;
    3948:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    394c:	1ac9      	subs	r1, r1, r3
    394e:	f840 1b04 	str.w	r1, [r0], #4
    for (k = 0; k < n_ir_buffer_length; k++)
    3952:	3201      	adds	r2, #1
    3954:	e7b2      	b.n	38bc <maxim_heart_rate_and_oxygen_saturation+0x20>
        for (k = i; k < i + HAMMING_SIZE; k++)
        {
            s -= an_dx[k] * auw_hamm[k - i];
    3956:	f85c ab04 	ldr.w	sl, [ip], #4
    395a:	46d1      	mov	r9, sl
    395c:	f83e ab02 	ldrh.w	sl, [lr], #2
    3960:	fb09 221a 	mls	r2, r9, sl, r2
        for (k = i; k < i + HAMMING_SIZE; k++)
    3964:	3b01      	subs	r3, #1
    3966:	d1f6      	bne.n	3956 <maxim_heart_rate_and_oxygen_saturation+0xba>
        }
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm
    3968:	f240 4c7a 	movw	ip, #1146	; 0x47a
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    396c:	3101      	adds	r1, #1
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm
    396e:	fb92 f2fc 	sdiv	r2, r2, ip
    3972:	f847 2b04 	str.w	r2, [r7], #4
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    3976:	f240 12e9 	movw	r2, #489	; 0x1e9
    397a:	4291      	cmp	r1, r2
    397c:	d1d5      	bne.n	392a <maxim_heart_rate_and_oxygen_saturation+0x8e>
    }

    n_th1 = 0; // threshold calculation
    397e:	461a      	mov	r2, r3
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3980:	f240 17ef 	movw	r7, #495	; 0x1ef
    {
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    3984:	f850 1b04 	ldr.w	r1, [r0], #4
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3988:	3301      	adds	r3, #1
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    398a:	2900      	cmp	r1, #0
    398c:	bfb8      	it	lt
    398e:	4249      	neglt	r1, r1
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3990:	42bb      	cmp	r3, r7
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    3992:	440a      	add	r2, r1
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3994:	d1f6      	bne.n	3984 <maxim_heart_rate_and_oxygen_saturation+0xe8>
    }
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5); //peak_height, peak_distance, max_num_peaks
    3996:	2108      	movs	r1, #8
    3998:	2005      	movs	r0, #5
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
    399a:	fb92 f2f3 	sdiv	r2, r2, r3
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5); //peak_height, peak_distance, max_num_peaks
    399e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    39a2:	9200      	str	r2, [sp, #0]
    39a4:	a909      	add	r1, sp, #36	; 0x24
    39a6:	4a60      	ldr	r2, [pc, #384]	; (3b28 <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    39a8:	a82d      	add	r0, sp, #180	; 0xb4
    39aa:	f01d fa61 	bl	20e70 <maxim_find_peaks>

    n_peak_interval_sum = 0;
    if (n_npks >= 2)
    39ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
    39b0:	2f01      	cmp	r7, #1
    39b2:	f04f 0300 	mov.w	r3, #0
    39b6:	dd38      	ble.n	3a2a <maxim_heart_rate_and_oxygen_saturation+0x18e>
    39b8:	aa2d      	add	r2, sp, #180	; 0xb4
    {
        for (k = 1; k < n_npks; k++)
    39ba:	2001      	movs	r0, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    39bc:	4611      	mov	r1, r2
    39be:	f8d2 c004 	ldr.w	ip, [r2, #4]
    39c2:	6809      	ldr	r1, [r1, #0]
        for (k = 1; k < n_npks; k++)
    39c4:	3001      	adds	r0, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    39c6:	ebac 0101 	sub.w	r1, ip, r1
        for (k = 1; k < n_npks; k++)
    39ca:	4287      	cmp	r7, r0
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    39cc:	f102 0204 	add.w	r2, r2, #4
    39d0:	440b      	add	r3, r1
        for (k = 1; k < n_npks; k++)
    39d2:	d1f3      	bne.n	39bc <maxim_heart_rate_and_oxygen_saturation+0x120>
        n_peak_interval_sum = n_peak_interval_sum / (n_npks - 1);
    39d4:	1e7a      	subs	r2, r7, #1
    39d6:	fb93 f3f2 	sdiv	r3, r3, r2
        *pn_heart_rate = (int32_t)(6000 / n_peak_interval_sum); // beats per minutes
    39da:	f241 7270 	movw	r2, #6000	; 0x1770
    39de:	fb92 f3f3 	sdiv	r3, r2, r3
    39e2:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    39e4:	6013      	str	r3, [r2, #0]
        *pch_hr_valid = 1;
    39e6:	2301      	movs	r3, #1
    39e8:	9a48      	ldr	r2, [sp, #288]	; 0x120
    39ea:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
    39ee:	7013      	strb	r3, [r2, #0]
    39f0:	a82d      	add	r0, sp, #180	; 0xb4
        for (k = 1; k < n_npks; k++)
    39f2:	4661      	mov	r1, ip
    39f4:	2300      	movs	r3, #0
    {
        *pn_heart_rate = -999;
        *pch_hr_valid = 0;
    }

    for (k = 0; k < n_npks; k++)
    39f6:	429f      	cmp	r7, r3
    39f8:	dc1b      	bgt.n	3a32 <maxim_heart_rate_and_oxygen_saturation+0x196>
    39fa:	4b4d      	ldr	r3, [pc, #308]	; (3b30 <maxim_heart_rate_and_oxygen_saturation+0x294>)
    39fc:	4949      	ldr	r1, [pc, #292]	; (3b24 <maxim_heart_rate_and_oxygen_saturation+0x288>)
    39fe:	4618      	mov	r0, r3
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;

    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    for (k = 0; k < n_ir_buffer_length; k++)
    3a00:	2200      	movs	r2, #0
    3a02:	468e      	mov	lr, r1
    3a04:	42aa      	cmp	r2, r5
    3a06:	db1b      	blt.n	3a40 <maxim_heart_rate_and_oxygen_saturation+0x1a4>
        an_x[k] = pun_ir_buffer[k];
        an_y[k] = pun_red_buffer[k];
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count = 0;
    3a08:	2000      	movs	r0, #0
    for (k = 0; k < n_npks; k++)
    3a0a:	4605      	mov	r5, r0
                    if (un_only_once > 0)
                    {
                        un_only_once = 0;
                    }
                    n_c_min = an_x[i];
                    an_exact_ir_valley_locs[k] = i;
    3a0c:	f10d 0a78 	add.w	sl, sp, #120	; 0x78
    for (k = 0; k < n_npks; k++)
    3a10:	42af      	cmp	r7, r5
    3a12:	dc1f      	bgt.n	3a54 <maxim_heart_rate_and_oxygen_saturation+0x1b8>
                }
            if (un_only_once == 0)
                n_exact_ir_valley_locs_count++;
        }
    }
    if (n_exact_ir_valley_locs_count < 2)
    3a14:	2801      	cmp	r0, #1
    3a16:	dc3f      	bgt.n	3a98 <maxim_heart_rate_and_oxygen_saturation+0x1fc>
    {
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
    3a18:	9a05      	ldr	r2, [sp, #20]
    3a1a:	4b46      	ldr	r3, [pc, #280]	; (3b34 <maxim_heart_rate_and_oxygen_saturation+0x298>)
    3a1c:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid = 0;
    3a1e:	2300      	movs	r3, #0

    if (n_ratio_average > 2 && n_ratio_average < 184)
    {
        n_spo2_calc = uch_spo2_table[n_ratio_average];
        *pn_spo2 = n_spo2_calc;
        *pch_spo2_valid = 1; //  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
    3a20:	9a46      	ldr	r2, [sp, #280]	; 0x118
    3a22:	7013      	strb	r3, [r2, #0]
    else
    {
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
        *pch_spo2_valid = 0;
    }
}
    3a24:	b03d      	add	sp, #244	; 0xf4
    3a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *pn_heart_rate = -999;
    3a2a:	9947      	ldr	r1, [sp, #284]	; 0x11c
    3a2c:	4a41      	ldr	r2, [pc, #260]	; (3b34 <maxim_heart_rate_and_oxygen_saturation+0x298>)
    3a2e:	600a      	str	r2, [r1, #0]
        *pch_hr_valid = 0;
    3a30:	e7da      	b.n	39e8 <maxim_heart_rate_and_oxygen_saturation+0x14c>
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;
    3a32:	f850 2b04 	ldr.w	r2, [r0], #4
    3a36:	3202      	adds	r2, #2
    3a38:	f841 2b04 	str.w	r2, [r1], #4
    for (k = 0; k < n_npks; k++)
    3a3c:	3301      	adds	r3, #1
    3a3e:	e7da      	b.n	39f6 <maxim_heart_rate_and_oxygen_saturation+0x15a>
        an_x[k] = pun_ir_buffer[k];
    3a40:	f856 9022 	ldr.w	r9, [r6, r2, lsl #2]
    3a44:	f841 9b04 	str.w	r9, [r1], #4
        an_y[k] = pun_red_buffer[k];
    3a48:	f858 9022 	ldr.w	r9, [r8, r2, lsl #2]
    3a4c:	f840 9b04 	str.w	r9, [r0], #4
    for (k = 0; k < n_ir_buffer_length; k++)
    3a50:	3201      	adds	r2, #1
    3a52:	e7d7      	b.n	3a04 <maxim_heart_rate_and_oxygen_saturation+0x168>
        m = an_ir_valley_locs[k];
    3a54:	f85c 6b04 	ldr.w	r6, [ip], #4
        if (m + 5 < BUFFER_SIZE - HAMMING_SIZE && m - 5 > 0)
    3a58:	1d71      	adds	r1, r6, #5
    3a5a:	f5b1 7ff7 	cmp.w	r1, #494	; 0x1ee
    3a5e:	dc0f      	bgt.n	3a80 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
    3a60:	1f72      	subs	r2, r6, #5
    3a62:	2a00      	cmp	r2, #0
    3a64:	dd0c      	ble.n	3a80 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
    3a66:	3e06      	subs	r6, #6
    3a68:	4291      	cmp	r1, r2
    3a6a:	bfb4      	ite	lt
    3a6c:	2101      	movlt	r1, #1
    3a6e:	210b      	movge	r1, #11
    3a70:	4431      	add	r1, r6
        n_c_min = 16777216; //2^24;
    3a72:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
        un_only_once = 1;
    3a76:	2601      	movs	r6, #1
            for (i = m - 5; i < m + 5; i++)
    3a78:	428a      	cmp	r2, r1
    3a7a:	d103      	bne.n	3a84 <maxim_heart_rate_and_oxygen_saturation+0x1e8>
            if (un_only_once == 0)
    3a7c:	b906      	cbnz	r6, 3a80 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
                n_exact_ir_valley_locs_count++;
    3a7e:	3001      	adds	r0, #1
    for (k = 0; k < n_npks; k++)
    3a80:	3501      	adds	r5, #1
    3a82:	e7c5      	b.n	3a10 <maxim_heart_rate_and_oxygen_saturation+0x174>
                if (an_x[i] < n_c_min)
    3a84:	f85e 9022 	ldr.w	r9, [lr, r2, lsl #2]
    3a88:	45c1      	cmp	r9, r8
                    an_exact_ir_valley_locs[k] = i;
    3a8a:	bfbe      	ittt	lt
    3a8c:	f84a 2025 	strlt.w	r2, [sl, r5, lsl #2]
    3a90:	46c8      	movlt	r8, r9
    3a92:	2600      	movlt	r6, #0
            for (i = m - 5; i < m + 5; i++)
    3a94:	3201      	adds	r2, #1
    3a96:	e7ef      	b.n	3a78 <maxim_heart_rate_and_oxygen_saturation+0x1dc>
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3a98:	2500      	movs	r5, #0
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3a9a:	6821      	ldr	r1, [r4, #0]
    3a9c:	f854 2f04 	ldr.w	r2, [r4, #4]!
    3aa0:	6866      	ldr	r6, [r4, #4]
    3aa2:	4432      	add	r2, r6
    3aa4:	4411      	add	r1, r2
    3aa6:	68a2      	ldr	r2, [r4, #8]
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3aa8:	681e      	ldr	r6, [r3, #0]
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3aaa:	188a      	adds	r2, r1, r2
    3aac:	bf48      	it	mi
    3aae:	3203      	addmi	r2, #3
    3ab0:	1092      	asrs	r2, r2, #2
    3ab2:	f844 2c04 	str.w	r2, [r4, #-4]
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3ab6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3aba:	6859      	ldr	r1, [r3, #4]
    3abc:	440a      	add	r2, r1
    3abe:	6899      	ldr	r1, [r3, #8]
    3ac0:	4432      	add	r2, r6
    3ac2:	1852      	adds	r2, r2, r1
    3ac4:	bf48      	it	mi
    3ac6:	3203      	addmi	r2, #3
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3ac8:	3501      	adds	r5, #1
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3aca:	1092      	asrs	r2, r2, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3acc:	f5b5 7ff8 	cmp.w	r5, #496	; 0x1f0
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3ad0:	f843 2c04 	str.w	r2, [r3, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3ad4:	d1e1      	bne.n	3a9a <maxim_heart_rate_and_oxygen_saturation+0x1fe>
        an_ratio[k] = 0;
    3ad6:	2300      	movs	r3, #0
    3ad8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    3adc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    3ae0:	ac1e      	add	r4, sp, #120	; 0x78
    3ae2:	930e      	str	r3, [sp, #56]	; 0x38
    3ae4:	4622      	mov	r2, r4
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE)
    3ae6:	f852 1b04 	ldr.w	r1, [r2], #4
    3aea:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    3aee:	dc93      	bgt.n	3a18 <maxim_heart_rate_and_oxygen_saturation+0x17c>
    for (k = 0; k < n_exact_ir_valley_locs_count; k++)
    3af0:	3301      	adds	r3, #1
    3af2:	4298      	cmp	r0, r3
    3af4:	d1f7      	bne.n	3ae6 <maxim_heart_rate_and_oxygen_saturation+0x24a>
    n_i_ratio_count = 0;
    3af6:	2100      	movs	r1, #0
    3af8:	4d0a      	ldr	r5, [pc, #40]	; (3b24 <maxim_heart_rate_and_oxygen_saturation+0x288>)
                if (an_y[i] > n_y_dc_max)
    3afa:	4e0d      	ldr	r6, [pc, #52]	; (3b30 <maxim_heart_rate_and_oxygen_saturation+0x294>)
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++)
    3afc:	468e      	mov	lr, r1
    3afe:	f100 3aff 	add.w	sl, r0, #4294967295
        if (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k] > 10)
    3b02:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3b06:	f854 2b04 	ldr.w	r2, [r4], #4
    3b0a:	ebac 0802 	sub.w	r8, ip, r2
    3b0e:	f1b8 0f0a 	cmp.w	r8, #10
    3b12:	f10e 0e01 	add.w	lr, lr, #1
    3b16:	dd56      	ble.n	3bc6 <maxim_heart_rate_and_oxygen_saturation+0x32a>
        n_x_dc_max = -16777216;
    3b18:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++)
    3b1c:	4613      	mov	r3, r2
        n_y_dc_max = -16777216;
    3b1e:	46b9      	mov	r9, r7
    3b20:	e018      	b.n	3b54 <maxim_heart_rate_and_oxygen_saturation+0x2b8>
    3b22:	bf00      	nop
    3b24:	2000c4f0 	.word	0x2000c4f0
    3b28:	2000bd30 	.word	0x2000bd30
    3b2c:	00028994 	.word	0x00028994
    3b30:	2000ccc0 	.word	0x2000ccc0
    3b34:	fffffc19 	.word	0xfffffc19
                if (an_x[i] > n_x_dc_max)
    3b38:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    3b3c:	42b8      	cmp	r0, r7
    3b3e:	bfc8      	it	gt
    3b40:	4607      	movgt	r7, r0
                if (an_y[i] > n_y_dc_max)
    3b42:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
                if (an_x[i] > n_x_dc_max)
    3b46:	bfc8      	it	gt
    3b48:	9307      	strgt	r3, [sp, #28]
                if (an_y[i] > n_y_dc_max)
    3b4a:	4548      	cmp	r0, r9
    3b4c:	bfc4      	itt	gt
    3b4e:	469b      	movgt	fp, r3
    3b50:	4681      	movgt	r9, r0
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++)
    3b52:	3301      	adds	r3, #1
    3b54:	459c      	cmp	ip, r3
    3b56:	dcef      	bgt.n	3b38 <maxim_heart_rate_and_oxygen_saturation+0x29c>
            n_x_ac = (an_x[an_exact_ir_valley_locs[k + 1]] - an_x[an_exact_ir_valley_locs[k]]) * (n_x_dc_max_idx - an_exact_ir_valley_locs[k]); // ir
    3b58:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    3b5c:	f855 002c 	ldr.w	r0, [r5, ip, lsl #2]
    3b60:	1ac0      	subs	r0, r0, r3
    3b62:	9b07      	ldr	r3, [sp, #28]
    3b64:	1a9b      	subs	r3, r3, r2
    3b66:	4358      	muls	r0, r3
            n_x_ac = an_x[an_exact_ir_valley_locs[k]] + n_x_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3b68:	fb90 f3f8 	sdiv	r3, r0, r8
            n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac; // subracting linear DC compoenents from raw
    3b6c:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
            n_x_ac = an_x[an_exact_ir_valley_locs[k]] + n_x_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3b70:	9306      	str	r3, [sp, #24]
            n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac; // subracting linear DC compoenents from raw
    3b72:	f855 302b 	ldr.w	r3, [r5, fp, lsl #2]
    3b76:	1a1b      	subs	r3, r3, r0
    3b78:	9806      	ldr	r0, [sp, #24]
    3b7a:	1a1b      	subs	r3, r3, r0
            n_denom = (n_x_ac * n_y_dc_max) >> 7;
    3b7c:	fb09 f303 	mul.w	r3, r9, r3
    3b80:	ea4f 19e3 	mov.w	r9, r3, asr #7
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
    3b84:	f1b9 0f00 	cmp.w	r9, #0
    3b88:	dd1d      	ble.n	3bc6 <maxim_heart_rate_and_oxygen_saturation+0x32a>
    3b8a:	2904      	cmp	r1, #4
    3b8c:	dc1b      	bgt.n	3bc6 <maxim_heart_rate_and_oxygen_saturation+0x32a>
            n_y_ac = (an_y[an_exact_ir_valley_locs[k + 1]] - an_y[an_exact_ir_valley_locs[k]]) * (n_y_dc_max_idx - an_exact_ir_valley_locs[k]); //red
    3b8e:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
    3b92:	f856 302c 	ldr.w	r3, [r6, ip, lsl #2]
    3b96:	ebab 0202 	sub.w	r2, fp, r2
    3b9a:	1a1b      	subs	r3, r3, r0
    3b9c:	435a      	muls	r2, r3
            n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac;                                                                                             // subracting linear DC compoenents from raw
    3b9e:	f856 302b 	ldr.w	r3, [r6, fp, lsl #2]
            n_y_ac = an_y[an_exact_ir_valley_locs[k]] + n_y_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3ba2:	fb92 f8f8 	sdiv	r8, r2, r8
            n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac;                                                                                             // subracting linear DC compoenents from raw
    3ba6:	1a1b      	subs	r3, r3, r0
    3ba8:	eba3 0308 	sub.w	r3, r3, r8
            n_nume = (n_y_ac * n_x_dc_max) >> 7;    //prepare X100 to preserve floating value
    3bac:	435f      	muls	r7, r3
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
    3bae:	11ff      	asrs	r7, r7, #7
    3bb0:	d009      	beq.n	3bc6 <maxim_heart_rate_and_oxygen_saturation+0x32a>
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
    3bb2:	ab3c      	add	r3, sp, #240	; 0xf0
    3bb4:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    3bb8:	2364      	movs	r3, #100	; 0x64
    3bba:	435f      	muls	r7, r3
                n_i_ratio_count++;
    3bbc:	3101      	adds	r1, #1
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
    3bbe:	fb97 f7f9 	sdiv	r7, r7, r9
    3bc2:	f84c 7cc8 	str.w	r7, [ip, #-200]
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++)
    3bc6:	45d6      	cmp	lr, sl
    3bc8:	db9b      	blt.n	3b02 <maxim_heart_rate_and_oxygen_saturation+0x266>
    maxim_sort_ascend(an_ratio, n_i_ratio_count);
    3bca:	a80a      	add	r0, sp, #40	; 0x28
    3bcc:	f01d f8e6 	bl	20d9c <maxim_sort_ascend>
    n_middle_idx = n_i_ratio_count / 2;
    3bd0:	104a      	asrs	r2, r1, #1
    if (n_middle_idx > 1)
    3bd2:	2903      	cmp	r1, #3
    3bd4:	ea4f 0382 	mov.w	r3, r2, lsl #2
    3bd8:	dd14      	ble.n	3c04 <maxim_heart_rate_and_oxygen_saturation+0x368>
        n_ratio_average = (an_ratio[n_middle_idx - 1] + an_ratio[n_middle_idx]) / 2; // use median
    3bda:	a93c      	add	r1, sp, #240	; 0xf0
    3bdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    3be0:	f851 3ccc 	ldr.w	r3, [r1, #-204]
    3be4:	f851 2cc8 	ldr.w	r2, [r1, #-200]
    3be8:	4413      	add	r3, r2
    3bea:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    3bee:	105b      	asrs	r3, r3, #1
    if (n_ratio_average > 2 && n_ratio_average < 184)
    3bf0:	1eda      	subs	r2, r3, #3
    3bf2:	2ab4      	cmp	r2, #180	; 0xb4
    3bf4:	f63f af10 	bhi.w	3a18 <maxim_heart_rate_and_oxygen_saturation+0x17c>
        n_spo2_calc = uch_spo2_table[n_ratio_average];
    3bf8:	4a05      	ldr	r2, [pc, #20]	; (3c10 <maxim_heart_rate_and_oxygen_saturation+0x374>)
    3bfa:	5cd3      	ldrb	r3, [r2, r3]
    3bfc:	9a05      	ldr	r2, [sp, #20]
    3bfe:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid = 1; //  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
    3c00:	2301      	movs	r3, #1
    3c02:	e70d      	b.n	3a20 <maxim_heart_rate_and_oxygen_saturation+0x184>
        n_ratio_average = an_ratio[n_middle_idx];
    3c04:	aa3c      	add	r2, sp, #240	; 0xf0
    3c06:	4413      	add	r3, r2
    3c08:	f853 3cc8 	ldr.w	r3, [r3, #-200]
    3c0c:	e7f0      	b.n	3bf0 <maxim_heart_rate_and_oxygen_saturation+0x354>
    3c0e:	bf00      	nop
    3c10:	0002a927 	.word	0x0002a927

00003c14 <init_lcd_output>:
const int spi_freq = 8000000;

static uint8_t data[MAX_USER_DATA_LENGTH];

s16_t init_lcd_output()
{
    3c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c18:	4828      	ldr	r0, [pc, #160]	; (3cbc <init_lcd_output+0xa8>)
    3c1a:	f01b f945 	bl	1eea8 <z_impl_device_get_binding>
    struct device *cs;
    int ret;
    cs = device_get_binding(CS_GPIO_LABEL);
    if (cs == NULL)
    3c1e:	4605      	mov	r5, r0
    3c20:	b938      	cbnz	r0, 3c32 <init_lcd_output+0x1e>
    {
        printk("Didn't find device %s\n", CS_GPIO_LABEL);
    3c22:	4827      	ldr	r0, [pc, #156]	; (3cc0 <init_lcd_output+0xac>)
    3c24:	4925      	ldr	r1, [pc, #148]	; (3cbc <init_lcd_output+0xa8>)
    3c26:	f01d fb35 	bl	21294 <printk>
        return -1;
    3c2a:	f04f 30ff 	mov.w	r0, #4294967295
    globalLcdRst = lcdRst;
    globalVciEn = vciEn;
    globalDcx = dcx;

    return 0;
}
    3c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = gpio_pin_configure(cs, CS_GPIO_PIN, CS_GPIO_FLAGS);
    3c32:	210c      	movs	r1, #12
    3c34:	f01d f93f 	bl	20eb6 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3c38:	4604      	mov	r4, r0
    3c3a:	b138      	cbz	r0, 3c4c <init_lcd_output+0x38>
        printk("Error %d: failed to configure device %s pin %d\n",
    3c3c:	230c      	movs	r3, #12
        printk("Error %d: failed to configure device %s pin %d\n",
    3c3e:	4821      	ldr	r0, [pc, #132]	; (3cc4 <init_lcd_output+0xb0>)
    3c40:	4a1e      	ldr	r2, [pc, #120]	; (3cbc <init_lcd_output+0xa8>)
    3c42:	4621      	mov	r1, r4
    3c44:	f01d fb26 	bl	21294 <printk>
        return ret;
    3c48:	b220      	sxth	r0, r4
    3c4a:	e7f0      	b.n	3c2e <init_lcd_output+0x1a>
    3c4c:	481b      	ldr	r0, [pc, #108]	; (3cbc <init_lcd_output+0xa8>)
    3c4e:	f01b f92b 	bl	1eea8 <z_impl_device_get_binding>
    if (lcdRst == NULL)
    3c52:	4606      	mov	r6, r0
    3c54:	2800      	cmp	r0, #0
    3c56:	d0e4      	beq.n	3c22 <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, LCD_RST_GPIO_PIN, LCD_RST_GPIO_FLAGS);
    3c58:	210a      	movs	r1, #10
    3c5a:	f01d f92c 	bl	20eb6 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3c5e:	4604      	mov	r4, r0
    3c60:	b108      	cbz	r0, 3c66 <init_lcd_output+0x52>
        printk("Error %d: failed to configure device %s pin %d\n",
    3c62:	230a      	movs	r3, #10
    3c64:	e7eb      	b.n	3c3e <init_lcd_output+0x2a>
    3c66:	4815      	ldr	r0, [pc, #84]	; (3cbc <init_lcd_output+0xa8>)
    3c68:	f01b f91e 	bl	1eea8 <z_impl_device_get_binding>
    if (vciEn == NULL)
    3c6c:	4680      	mov	r8, r0
    3c6e:	2800      	cmp	r0, #0
    3c70:	d0d7      	beq.n	3c22 <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, VCI_EN_GPIO_PIN, VCI_EN_GPIO_FLAGS);
    3c72:	2106      	movs	r1, #6
    3c74:	4630      	mov	r0, r6
    3c76:	f01d f91e 	bl	20eb6 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3c7a:	4604      	mov	r4, r0
    3c7c:	b108      	cbz	r0, 3c82 <init_lcd_output+0x6e>
        printk("Error %d: failed to configure device %s pin %d\n",
    3c7e:	2306      	movs	r3, #6
    3c80:	e7dd      	b.n	3c3e <init_lcd_output+0x2a>
    3c82:	480e      	ldr	r0, [pc, #56]	; (3cbc <init_lcd_output+0xa8>)
    3c84:	f01b f910 	bl	1eea8 <z_impl_device_get_binding>
    if (dcx == NULL)
    3c88:	4607      	mov	r7, r0
    3c8a:	2800      	cmp	r0, #0
    3c8c:	d0c9      	beq.n	3c22 <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, DCX_GPIO_PIN, DCX_GPIO_FLAGS);
    3c8e:	2105      	movs	r1, #5
    3c90:	4630      	mov	r0, r6
    3c92:	f01d f910 	bl	20eb6 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3c96:	4604      	mov	r4, r0
    3c98:	b108      	cbz	r0, 3c9e <init_lcd_output+0x8a>
        printk("Error %d: failed to configure device %s pin %d\n",
    3c9a:	2305      	movs	r3, #5
    3c9c:	e7cf      	b.n	3c3e <init_lcd_output+0x2a>
    printk("INITIALISING OUTPUTS : OK\n");
    3c9e:	480a      	ldr	r0, [pc, #40]	; (3cc8 <init_lcd_output+0xb4>)
    3ca0:	f01d faf8 	bl	21294 <printk>
    globalcs = cs;
    3ca4:	4b09      	ldr	r3, [pc, #36]	; (3ccc <init_lcd_output+0xb8>)
    3ca6:	601d      	str	r5, [r3, #0]
    globalLcdRst = lcdRst;
    3ca8:	4b09      	ldr	r3, [pc, #36]	; (3cd0 <init_lcd_output+0xbc>)
    3caa:	601e      	str	r6, [r3, #0]
    globalVciEn = vciEn;
    3cac:	4b09      	ldr	r3, [pc, #36]	; (3cd4 <init_lcd_output+0xc0>)
    3cae:	f8c3 8000 	str.w	r8, [r3]
    globalDcx = dcx;
    3cb2:	4b09      	ldr	r3, [pc, #36]	; (3cd8 <init_lcd_output+0xc4>)
    return 0;
    3cb4:	4620      	mov	r0, r4
    globalDcx = dcx;
    3cb6:	601f      	str	r7, [r3, #0]
    return 0;
    3cb8:	e7b9      	b.n	3c2e <init_lcd_output+0x1a>
    3cba:	bf00      	nop
    3cbc:	0002a74c 	.word	0x0002a74c
    3cc0:	0002a9df 	.word	0x0002a9df
    3cc4:	0002a9f6 	.word	0x0002a9f6
    3cc8:	0002aa26 	.word	0x0002aa26
    3ccc:	2000d49c 	.word	0x2000d49c
    3cd0:	2000d494 	.word	0x2000d494
    3cd4:	2000d498 	.word	0x2000d498
    3cd8:	2000d490 	.word	0x2000d490

00003cdc <setOutputcs>:

bool setOutputcs(bool val)
{
    3cdc:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalcs, CS_GPIO_PIN, val);
    3cde:	4b06      	ldr	r3, [pc, #24]	; (3cf8 <setOutputcs+0x1c>)
{
    3ce0:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalcs, CS_GPIO_PIN, val);
    3ce2:	210c      	movs	r1, #12
    3ce4:	6818      	ldr	r0, [r3, #0]
    3ce6:	f01d f8d6 	bl	20e96 <gpio_pin_set>
    if (err != 0)
    3cea:	b118      	cbz	r0, 3cf4 <setOutputcs+0x18>
    {
        printk("Error in gpio cs");
    3cec:	4803      	ldr	r0, [pc, #12]	; (3cfc <setOutputcs+0x20>)
    3cee:	f01d fad1 	bl	21294 <printk>
        return 1;
    3cf2:	2001      	movs	r0, #1
    }
    return 0;
}
    3cf4:	bd08      	pop	{r3, pc}
    3cf6:	bf00      	nop
    3cf8:	2000d49c 	.word	0x2000d49c
    3cfc:	0002aa41 	.word	0x0002aa41

00003d00 <setOutputLcdRst>:

bool setOutputLcdRst(bool val)
{
    3d00:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalLcdRst, LCD_RST_GPIO_PIN, val);
    3d02:	4b06      	ldr	r3, [pc, #24]	; (3d1c <setOutputLcdRst+0x1c>)
{
    3d04:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalLcdRst, LCD_RST_GPIO_PIN, val);
    3d06:	210a      	movs	r1, #10
    3d08:	6818      	ldr	r0, [r3, #0]
    3d0a:	f01d f8c4 	bl	20e96 <gpio_pin_set>
    if (err != 0)
    3d0e:	b118      	cbz	r0, 3d18 <setOutputLcdRst+0x18>
    {
        printk("Error in gpio reset");
    3d10:	4803      	ldr	r0, [pc, #12]	; (3d20 <setOutputLcdRst+0x20>)
    3d12:	f01d fabf 	bl	21294 <printk>
        return 1;
    3d16:	2001      	movs	r0, #1
    }
    return 0;
}
    3d18:	bd08      	pop	{r3, pc}
    3d1a:	bf00      	nop
    3d1c:	2000d494 	.word	0x2000d494
    3d20:	0002aa52 	.word	0x0002aa52

00003d24 <setOutputVciEn>:

bool setOutputVciEn(bool val)
{
    3d24:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalVciEn, VCI_EN_GPIO_PIN, val);
    3d26:	4b06      	ldr	r3, [pc, #24]	; (3d40 <setOutputVciEn+0x1c>)
{
    3d28:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalVciEn, VCI_EN_GPIO_PIN, val);
    3d2a:	2106      	movs	r1, #6
    3d2c:	6818      	ldr	r0, [r3, #0]
    3d2e:	f01d f8b2 	bl	20e96 <gpio_pin_set>
    if (err != 0)
    3d32:	b118      	cbz	r0, 3d3c <setOutputVciEn+0x18>
    {
        printk("Error in gpio vcien");
    3d34:	4803      	ldr	r0, [pc, #12]	; (3d44 <setOutputVciEn+0x20>)
    3d36:	f01d faad 	bl	21294 <printk>
        return 1;
    3d3a:	2001      	movs	r0, #1
    }
    return 0;
}
    3d3c:	bd08      	pop	{r3, pc}
    3d3e:	bf00      	nop
    3d40:	2000d498 	.word	0x2000d498
    3d44:	0002aa66 	.word	0x0002aa66

00003d48 <setOutputDcx>:

bool setOutputDcx(bool val)
{
    3d48:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalDcx, DCX_GPIO_PIN, val);
    3d4a:	4b06      	ldr	r3, [pc, #24]	; (3d64 <setOutputDcx+0x1c>)
{
    3d4c:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalDcx, DCX_GPIO_PIN, val);
    3d4e:	2105      	movs	r1, #5
    3d50:	6818      	ldr	r0, [r3, #0]
    3d52:	f01d f8a0 	bl	20e96 <gpio_pin_set>
    if (err != 0)
    3d56:	b118      	cbz	r0, 3d60 <setOutputDcx+0x18>
    {
        printk("Error in gpio dcx");
    3d58:	4803      	ldr	r0, [pc, #12]	; (3d68 <setOutputDcx+0x20>)
    3d5a:	f01d fa9b 	bl	21294 <printk>
        return 1;
    3d5e:	2001      	movs	r0, #1
    }
    return 0;
}
    3d60:	bd08      	pop	{r3, pc}
    3d62:	bf00      	nop
    3d64:	2000d490 	.word	0x2000d490
    3d68:	0002aa7a 	.word	0x0002aa7a

00003d6c <write_bytes>:
    return spi_write(spi, spi_cfg, &tx);
}

int write_bytes(const struct device *spi, struct spi_config *spi_cfg,
                       uint16_t addr, uint8_t *data, uint32_t num_bytes)
{
    3d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct spi_buf bufs[] =
    3d6e:	9300      	str	r3, [sp, #0]
    3d70:	9b06      	ldr	r3, [sp, #24]
    3d72:	9301      	str	r3, [sp, #4]
    struct spi_buf_set tx =
    3d74:	2301      	movs	r3, #1
    3d76:	f8cd d008 	str.w	sp, [sp, #8]
    3d7a:	9303      	str	r3, [sp, #12]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    3d7c:	6883      	ldr	r3, [r0, #8]
    3d7e:	aa02      	add	r2, sp, #8
    3d80:	681c      	ldr	r4, [r3, #0]
    3d82:	2300      	movs	r3, #0
    3d84:	47a0      	blx	r4
    int err;
    err = spi_acess(spi, spi_cfg, 0, addr, data, num_bytes);
    if (err)
    3d86:	b120      	cbz	r0, 3d92 <write_bytes+0x26>
    {
        printk("Error during SPI write\n");
    3d88:	4803      	ldr	r0, [pc, #12]	; (3d98 <write_bytes+0x2c>)
    3d8a:	f01d fa83 	bl	21294 <printk>
        return -EIO;
    3d8e:	f06f 0004 	mvn.w	r0, #4
    }
    return 0;
}
    3d92:	b004      	add	sp, #16
    3d94:	bd10      	pop	{r4, pc}
    3d96:	bf00      	nop
    3d98:	0002aa8c 	.word	0x0002aa8c

00003d9c <device_get_binding.constprop.0>:
    3d9c:	4801      	ldr	r0, [pc, #4]	; (3da4 <device_get_binding.constprop.0+0x8>)
    3d9e:	f01b b883 	b.w	1eea8 <z_impl_device_get_binding>
    3da2:	bf00      	nop
    3da4:	0002aaa4 	.word	0x0002aaa4

00003da8 <WriteComm>:
	0, 0, 0, 0
};
extern const int spi_freq;

void WriteComm(uint8_t data)
{
    3da8:	b570      	push	{r4, r5, r6, lr}
    3daa:	b088      	sub	sp, #32
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    3dac:	2400      	movs	r4, #0
    3dae:	e9cd 4405 	strd	r4, r4, [sp, #20]
{
    3db2:	f88d 000f 	strb.w	r0, [sp, #15]
	struct spi_config spi_cfg = { 0 };
    3db6:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    3db8:	f7ff fff0 	bl	3d9c <device_get_binding.constprop.0>
	if (!spi) {
    3dbc:	4605      	mov	r5, r0
    3dbe:	b920      	cbnz	r0, 3dca <WriteComm+0x22>
		printk("Could not find SPI driver\n");
    3dc0:	4812      	ldr	r0, [pc, #72]	; (3e0c <WriteComm+0x64>)
    3dc2:	f01d fa67 	bl	21294 <printk>
	if (err) {
		printk("Error writing to FRAM! errro code (%d)\n", err);
		return;
	}
	setOutputcs(1);
}
    3dc6:	b008      	add	sp, #32
    3dc8:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    3dca:	f44f 7380 	mov.w	r3, #256	; 0x100
    3dce:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    3dd2:	4b0f      	ldr	r3, [pc, #60]	; (3e10 <WriteComm+0x68>)
	setOutputcs(0);
    3dd4:	4620      	mov	r0, r4
	spi_cfg.frequency = spi_freq;
    3dd6:	681b      	ldr	r3, [r3, #0]
    3dd8:	9305      	str	r3, [sp, #20]
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3dda:	2601      	movs	r6, #1
	setOutputcs(0);
    3ddc:	f7ff ff7e 	bl	3cdc <setOutputcs>
	setOutputDcx(0);
    3de0:	4620      	mov	r0, r4
    3de2:	f7ff ffb1 	bl	3d48 <setOutputDcx>
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3de6:	a905      	add	r1, sp, #20
    3de8:	9600      	str	r6, [sp, #0]
    3dea:	f10d 030f 	add.w	r3, sp, #15
    3dee:	4622      	mov	r2, r4
    3df0:	4628      	mov	r0, r5
    3df2:	f7ff ffbb 	bl	3d6c <write_bytes>
	if (err) {
    3df6:	4601      	mov	r1, r0
    3df8:	b118      	cbz	r0, 3e02 <WriteComm+0x5a>
		printk("Error writing to FRAM! errro code (%d)\n", err);
    3dfa:	4806      	ldr	r0, [pc, #24]	; (3e14 <WriteComm+0x6c>)
    3dfc:	f01d fa4a 	bl	21294 <printk>
		return;
    3e00:	e7e1      	b.n	3dc6 <WriteComm+0x1e>
	setOutputcs(1);
    3e02:	4630      	mov	r0, r6
    3e04:	f7ff ff6a 	bl	3cdc <setOutputcs>
    3e08:	e7dd      	b.n	3dc6 <WriteComm+0x1e>
    3e0a:	bf00      	nop
    3e0c:	0002aaaa 	.word	0x0002aaaa
    3e10:	0002736c 	.word	0x0002736c
    3e14:	0002aac5 	.word	0x0002aac5

00003e18 <WriteData>:

void WriteData(uint8_t data)
{
    3e18:	b570      	push	{r4, r5, r6, lr}
    3e1a:	b088      	sub	sp, #32
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    3e1c:	2400      	movs	r4, #0
    3e1e:	e9cd 4405 	strd	r4, r4, [sp, #20]
{
    3e22:	f88d 000f 	strb.w	r0, [sp, #15]
	struct spi_config spi_cfg = { 0 };
    3e26:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    3e28:	f7ff ffb8 	bl	3d9c <device_get_binding.constprop.0>
	if (!spi) {
    3e2c:	4605      	mov	r5, r0
    3e2e:	b920      	cbnz	r0, 3e3a <WriteData+0x22>
		printk("Could not find SPI driver\n");
    3e30:	4812      	ldr	r0, [pc, #72]	; (3e7c <WriteData+0x64>)
    3e32:	f01d fa2f 	bl	21294 <printk>
	if (err) {
		printk("Error writing to FRAM! errro code (%d)\n", err);
		return;
	}
	setOutputcs(1);
}
    3e36:	b008      	add	sp, #32
    3e38:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    3e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
    3e3e:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    3e42:	4b0f      	ldr	r3, [pc, #60]	; (3e80 <WriteData+0x68>)
	setOutputcs(0);
    3e44:	4620      	mov	r0, r4
	spi_cfg.frequency = spi_freq;
    3e46:	681b      	ldr	r3, [r3, #0]
    3e48:	9305      	str	r3, [sp, #20]
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3e4a:	2601      	movs	r6, #1
	setOutputcs(0);
    3e4c:	f7ff ff46 	bl	3cdc <setOutputcs>
	setOutputDcx(1);
    3e50:	2001      	movs	r0, #1
    3e52:	f7ff ff79 	bl	3d48 <setOutputDcx>
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3e56:	a905      	add	r1, sp, #20
    3e58:	9600      	str	r6, [sp, #0]
    3e5a:	f10d 030f 	add.w	r3, sp, #15
    3e5e:	4622      	mov	r2, r4
    3e60:	4628      	mov	r0, r5
    3e62:	f7ff ff83 	bl	3d6c <write_bytes>
	if (err) {
    3e66:	4601      	mov	r1, r0
    3e68:	b118      	cbz	r0, 3e72 <WriteData+0x5a>
		printk("Error writing to FRAM! errro code (%d)\n", err);
    3e6a:	4806      	ldr	r0, [pc, #24]	; (3e84 <WriteData+0x6c>)
    3e6c:	f01d fa12 	bl	21294 <printk>
		return;
    3e70:	e7e1      	b.n	3e36 <WriteData+0x1e>
	setOutputcs(1);
    3e72:	4630      	mov	r0, r6
    3e74:	f7ff ff32 	bl	3cdc <setOutputcs>
    3e78:	e7dd      	b.n	3e36 <WriteData+0x1e>
    3e7a:	bf00      	nop
    3e7c:	0002aaaa 	.word	0x0002aaaa
    3e80:	0002736c 	.word	0x0002736c
    3e84:	0002aac5 	.word	0x0002aac5

00003e88 <DispLogo>:
	}
	setOutputcs(1);
}

void DispLogo(unsigned int color)
{
    3e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e8c:	b08b      	sub	sp, #44	; 0x2c
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    3e8e:	2500      	movs	r5, #0
    3e90:	e9cd 5507 	strd	r5, r5, [sp, #28]
{
    3e94:	9003      	str	r0, [sp, #12]
	struct spi_config spi_cfg = { 0 };
    3e96:	9509      	str	r5, [sp, #36]	; 0x24
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    3e98:	f7ff ff80 	bl	3d9c <device_get_binding.constprop.0>
	if (!spi) {
    3e9c:	4606      	mov	r6, r0
    3e9e:	b928      	cbnz	r0, 3eac <DispLogo+0x24>
		printk("Could not find SPI driver\n");
    3ea0:	482b      	ldr	r0, [pc, #172]	; (3f50 <DispLogo+0xc8>)
    3ea2:	f01d f9f7 	bl	21294 <printk>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
			}
		}
	}
	setOutputcs(1);
}
    3ea6:	b00b      	add	sp, #44	; 0x2c
    3ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	spi_cfg.operation = 256;
    3eac:	f44f 7380 	mov.w	r3, #256	; 0x100
    3eb0:	f8ad 3020 	strh.w	r3, [sp, #32]
	spi_cfg.frequency = spi_freq;
    3eb4:	4b27      	ldr	r3, [pc, #156]	; (3f54 <DispLogo+0xcc>)
			if (logo[j][i]) {
    3eb6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3f58 <DispLogo+0xd0>
	spi_cfg.frequency = spi_freq;
    3eba:	681b      	ldr	r3, [r3, #0]
    3ebc:	9307      	str	r3, [sp, #28]
	BlockWrite(xoffset, xoffset + logowidth - 1, yoffset,
    3ebe:	22c8      	movs	r2, #200	; 0xc8
    3ec0:	f240 1317 	movw	r3, #279	; 0x117
    3ec4:	f240 115d 	movw	r1, #349	; 0x15d
    3ec8:	2032      	movs	r0, #50	; 0x32
    3eca:	f01d f81f 	bl	20f0c <BlockWrite>
	setOutputcs(0);
    3ece:	4628      	mov	r0, r5
    3ed0:	f7ff ff04 	bl	3cdc <setOutputcs>
	setOutputDcx(1);
    3ed4:	2001      	movs	r0, #1
    3ed6:	f7ff ff37 	bl	3d48 <setOutputDcx>
			if (logo[j][i]) {
    3eda:	f04f 0a50 	mov.w	sl, #80	; 0x50
		for (j = 0; j < logowidth; j++) {
    3ede:	2700      	movs	r7, #0
			if (logo[j][i]) {
    3ee0:	eb05 0809 	add.w	r8, r5, r9
    3ee4:	fb0a f307 	mul.w	r3, sl, r7
    3ee8:	f818 4003 	ldrb.w	r4, [r8, r3]
    3eec:	b1ec      	cbz	r4, 3f2a <DispLogo+0xa2>
				data = color >> 8;
    3eee:	9b03      	ldr	r3, [sp, #12]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3ef0:	2401      	movs	r4, #1
				data = color >> 8;
    3ef2:	0a1b      	lsrs	r3, r3, #8
    3ef4:	f88d 3018 	strb.w	r3, [sp, #24]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3ef8:	2200      	movs	r2, #0
    3efa:	ab06      	add	r3, sp, #24
    3efc:	9400      	str	r4, [sp, #0]
    3efe:	a907      	add	r1, sp, #28
    3f00:	4630      	mov	r0, r6
    3f02:	f7ff ff33 	bl	3d6c <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    3f06:	9400      	str	r4, [sp, #0]
    3f08:	ab03      	add	r3, sp, #12
    3f0a:	2200      	movs	r2, #0
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    3f0c:	a907      	add	r1, sp, #28
    3f0e:	4630      	mov	r0, r6
		for (j = 0; j < logowidth; j++) {
    3f10:	3701      	adds	r7, #1
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    3f12:	f7ff ff2b 	bl	3d6c <write_bytes>
		for (j = 0; j < logowidth; j++) {
    3f16:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
    3f1a:	d1e3      	bne.n	3ee4 <DispLogo+0x5c>
	for (i = 0; i < logoheight; i++) {
    3f1c:	3501      	adds	r5, #1
    3f1e:	2d50      	cmp	r5, #80	; 0x50
    3f20:	d1dd      	bne.n	3ede <DispLogo+0x56>
	setOutputcs(1);
    3f22:	2001      	movs	r0, #1
    3f24:	f7ff feda 	bl	3cdc <setOutputcs>
    3f28:	e7bd      	b.n	3ea6 <DispLogo+0x1e>
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3f2a:	f04f 0b01 	mov.w	fp, #1
    3f2e:	f10d 0317 	add.w	r3, sp, #23
    3f32:	4622      	mov	r2, r4
    3f34:	f8cd b000 	str.w	fp, [sp]
    3f38:	a907      	add	r1, sp, #28
    3f3a:	4630      	mov	r0, r6
				unsigned int bg_clr = BLACK;
    3f3c:	9406      	str	r4, [sp, #24]
				data = bg_clr >> 8;
    3f3e:	f88d 4017 	strb.w	r4, [sp, #23]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3f42:	f7ff ff13 	bl	3d6c <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    3f46:	f8cd b000 	str.w	fp, [sp]
    3f4a:	ab06      	add	r3, sp, #24
    3f4c:	4622      	mov	r2, r4
    3f4e:	e7dd      	b.n	3f0c <DispLogo+0x84>
    3f50:	0002aaaa 	.word	0x0002aaaa
    3f54:	0002736c 	.word	0x0002736c
    3f58:	20002238 	.word	0x20002238

00003f5c <DispIcon>:

void DispIcon(bool pic[50][50], unsigned int color, int xstart, int ystart,
	      int height, int width)
{
    3f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f60:	b08b      	sub	sp, #44	; 0x2c
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    3f62:	2400      	movs	r4, #0
    3f64:	e9cd 4407 	strd	r4, r4, [sp, #28]
{
    3f68:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    3f6c:	9103      	str	r1, [sp, #12]
    3f6e:	4607      	mov	r7, r0
    3f70:	4616      	mov	r6, r2
    3f72:	4699      	mov	r9, r3
	struct spi_config spi_cfg = { 0 };
    3f74:	9409      	str	r4, [sp, #36]	; 0x24
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    3f76:	f7ff ff11 	bl	3d9c <device_get_binding.constprop.0>
	if (!spi) {
    3f7a:	4605      	mov	r5, r0
    3f7c:	b928      	cbnz	r0, 3f8a <DispIcon+0x2e>
		printk("Could not find SPI driver\n");
    3f7e:	482e      	ldr	r0, [pc, #184]	; (4038 <DispIcon+0xdc>)
    3f80:	f01d f988 	bl	21294 <printk>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
			}
		}
	}
	setOutputcs(1);
}
    3f84:	b00b      	add	sp, #44	; 0x2c
    3f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	spi_cfg.operation = 256;
    3f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
    3f8e:	f8ad 3020 	strh.w	r3, [sp, #32]
	spi_cfg.frequency = spi_freq;
    3f92:	4b2a      	ldr	r3, [pc, #168]	; (403c <DispIcon+0xe0>)
    3f94:	681b      	ldr	r3, [r3, #0]
    3f96:	9307      	str	r3, [sp, #28]
	BlockWrite(xstart, xstart + width - 1, ystart, ystart + height - 1);
    3f98:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3f9a:	f108 31ff 	add.w	r1, r8, #4294967295
    3f9e:	3b01      	subs	r3, #1
    3fa0:	444b      	add	r3, r9
    3fa2:	464a      	mov	r2, r9
    3fa4:	4431      	add	r1, r6
    3fa6:	4630      	mov	r0, r6
    3fa8:	f01c ffb0 	bl	20f0c <BlockWrite>
	setOutputcs(0);
    3fac:	4620      	mov	r0, r4
    3fae:	f7ff fe95 	bl	3cdc <setOutputcs>
	setOutputDcx(1);
    3fb2:	2001      	movs	r0, #1
    3fb4:	f7ff fec8 	bl	3d48 <setOutputDcx>
			if (pic[j][i]) {
    3fb8:	f04f 0a32 	mov.w	sl, #50	; 0x32
	for (i = 0; i < height; i++) {
    3fbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3fbe:	42a3      	cmp	r3, r4
    3fc0:	d836      	bhi.n	4030 <DispIcon+0xd4>
	setOutputcs(1);
    3fc2:	2001      	movs	r0, #1
    3fc4:	f7ff fe8a 	bl	3cdc <setOutputcs>
    3fc8:	e7dc      	b.n	3f84 <DispIcon+0x28>
			if (pic[j][i]) {
    3fca:	fb0a f306 	mul.w	r3, sl, r6
    3fce:	f81b 2003 	ldrb.w	r2, [fp, r3]
    3fd2:	b1d2      	cbz	r2, 400a <DispIcon+0xae>
				data = color >> 8;
    3fd4:	9b03      	ldr	r3, [sp, #12]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3fd6:	f04f 0901 	mov.w	r9, #1
				data = color >> 8;
    3fda:	0a1b      	lsrs	r3, r3, #8
    3fdc:	f88d 3018 	strb.w	r3, [sp, #24]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3fe0:	2200      	movs	r2, #0
    3fe2:	ab06      	add	r3, sp, #24
    3fe4:	f8cd 9000 	str.w	r9, [sp]
    3fe8:	a907      	add	r1, sp, #28
    3fea:	4628      	mov	r0, r5
    3fec:	f7ff febe 	bl	3d6c <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    3ff0:	f8cd 9000 	str.w	r9, [sp]
    3ff4:	ab03      	add	r3, sp, #12
    3ff6:	2200      	movs	r2, #0
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    3ff8:	a907      	add	r1, sp, #28
    3ffa:	4628      	mov	r0, r5
    3ffc:	f7ff feb6 	bl	3d6c <write_bytes>
		for (j = 0; j < width; j++) {
    4000:	3601      	adds	r6, #1
    4002:	45b0      	cmp	r8, r6
    4004:	d8e1      	bhi.n	3fca <DispIcon+0x6e>
	for (i = 0; i < height; i++) {
    4006:	3401      	adds	r4, #1
    4008:	e7d8      	b.n	3fbc <DispIcon+0x60>
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    400a:	f04f 0901 	mov.w	r9, #1
    400e:	f10d 0317 	add.w	r3, sp, #23
    4012:	f8cd 9000 	str.w	r9, [sp]
    4016:	a907      	add	r1, sp, #28
    4018:	4628      	mov	r0, r5
				unsigned int bg_clr = BLACK;
    401a:	9206      	str	r2, [sp, #24]
				data = bg_clr >> 8;
    401c:	f88d 2017 	strb.w	r2, [sp, #23]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4020:	9202      	str	r2, [sp, #8]
    4022:	f7ff fea3 	bl	3d6c <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    4026:	9a02      	ldr	r2, [sp, #8]
    4028:	f8cd 9000 	str.w	r9, [sp]
    402c:	ab06      	add	r3, sp, #24
    402e:	e7e3      	b.n	3ff8 <DispIcon+0x9c>
		for (j = 0; j < width; j++) {
    4030:	2600      	movs	r6, #0
			if (pic[j][i]) {
    4032:	eb07 0b04 	add.w	fp, r7, r4
    4036:	e7e4      	b.n	4002 <DispIcon+0xa6>
    4038:	0002aaaa 	.word	0x0002aaaa
    403c:	0002736c 	.word	0x0002736c

00004040 <LCD_Init>:
void resetDisplay()
{
	WriteComm(0x01);
}
void LCD_Init(void)
{
    4040:	b508      	push	{r3, lr}
	init_lcd_output();
    4042:	f7ff fde7 	bl	3c14 <init_lcd_output>
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
	int err;
	k_msleep(1);
    4046:	2001      	movs	r0, #1
    4048:	f01c ff46 	bl	20ed8 <k_msleep.isra.0>
	printk("Initialising DISPLAY  : ");
    404c:	4815      	ldr	r0, [pc, #84]	; (40a4 <LCD_Init+0x64>)
    404e:	f01d f921 	bl	21294 <printk>
	setOutputVciEn(1);
    4052:	2001      	movs	r0, #1
    4054:	f7ff fe66 	bl	3d24 <setOutputVciEn>
	k_msleep(100);
    4058:	2064      	movs	r0, #100	; 0x64
    405a:	f01c ff3d 	bl	20ed8 <k_msleep.isra.0>
	setOutputcs(1);
    405e:	2001      	movs	r0, #1
    4060:	f7ff fe3c 	bl	3cdc <setOutputcs>
	setOutputLcdRst(1);
    4064:	2001      	movs	r0, #1
    4066:	f7ff fe4b 	bl	3d00 <setOutputLcdRst>
	k_msleep(80);
    406a:	2050      	movs	r0, #80	; 0x50
    406c:	f01c ff34 	bl	20ed8 <k_msleep.isra.0>
	setOutputLcdRst(0);
    4070:	2000      	movs	r0, #0
    4072:	f7ff fe45 	bl	3d00 <setOutputLcdRst>
	k_msleep(80);
    4076:	2050      	movs	r0, #80	; 0x50
    4078:	f01c ff2e 	bl	20ed8 <k_msleep.isra.0>
	setOutputLcdRst(1);
    407c:	2001      	movs	r0, #1
    407e:	f7ff fe3f 	bl	3d00 <setOutputLcdRst>
	k_msleep(480);
    4082:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    4086:	f01c ff27 	bl	20ed8 <k_msleep.isra.0>
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    408a:	f7ff fe87 	bl	3d9c <device_get_binding.constprop.0>
	if (!spi) {
    408e:	b920      	cbnz	r0, 409a <LCD_Init+0x5a>
		printk("Could not find SPI driver\n");
    4090:	4805      	ldr	r0, [pc, #20]	; (40a8 <LCD_Init+0x68>)
	//spi_cfg.operation = SPI_WORD_SET(8);
	spi_cfg.operation = 256;
	spi_cfg.frequency = spi_freq;
	setDisplay();
	printk("OK\n");
}
    4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("OK\n");
    4096:	f01d b8fd 	b.w	21294 <printk>
	setDisplay();
    409a:	f01c ff66 	bl	20f6a <setDisplay>
	printk("OK\n");
    409e:	4803      	ldr	r0, [pc, #12]	; (40ac <LCD_Init+0x6c>)
    40a0:	e7f7      	b.n	4092 <LCD_Init+0x52>
    40a2:	bf00      	nop
    40a4:	0002aaed 	.word	0x0002aaed
    40a8:	0002aaaa 	.word	0x0002aaaa
    40ac:	0002a8fb 	.word	0x0002a8fb

000040b0 <WriteOneDot>:
		}
	}
}

void WriteOneDot(unsigned int color)
{
    40b0:	b570      	push	{r4, r5, r6, lr}
    40b2:	b088      	sub	sp, #32
	setOutputcs(0);
	setOutputDcx(1);
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    40b4:	2400      	movs	r4, #0
{
    40b6:	9003      	str	r0, [sp, #12]
	setOutputcs(0);
    40b8:	2000      	movs	r0, #0
    40ba:	f7ff fe0f 	bl	3cdc <setOutputcs>
	setOutputDcx(1);
    40be:	2001      	movs	r0, #1
    40c0:	f7ff fe42 	bl	3d48 <setOutputDcx>
	struct spi_config spi_cfg = { 0 };
    40c4:	e9cd 4405 	strd	r4, r4, [sp, #20]
    40c8:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    40ca:	f7ff fe67 	bl	3d9c <device_get_binding.constprop.0>
	if (!spi) {
    40ce:	4605      	mov	r5, r0
    40d0:	b920      	cbnz	r0, 40dc <WriteOneDot+0x2c>
		printk("Could not find SPI driver\n");
    40d2:	4811      	ldr	r0, [pc, #68]	; (4118 <WriteOneDot+0x68>)
    40d4:	f01d f8de 	bl	21294 <printk>
	u8_t data;
	data = color >> 8;
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
	write_bytes(spi, &spi_cfg, 0x00, &color, 1);
	setOutputcs(1);
}
    40d8:	b008      	add	sp, #32
    40da:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    40dc:	f44f 7380 	mov.w	r3, #256	; 0x100
    40e0:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    40e4:	4b0d      	ldr	r3, [pc, #52]	; (411c <WriteOneDot+0x6c>)
    40e6:	681b      	ldr	r3, [r3, #0]
    40e8:	9305      	str	r3, [sp, #20]
	data = color >> 8;
    40ea:	9b03      	ldr	r3, [sp, #12]
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    40ec:	2601      	movs	r6, #1
	data = color >> 8;
    40ee:	0a1b      	lsrs	r3, r3, #8
    40f0:	f88d 3013 	strb.w	r3, [sp, #19]
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    40f4:	4622      	mov	r2, r4
    40f6:	f10d 0313 	add.w	r3, sp, #19
    40fa:	a905      	add	r1, sp, #20
    40fc:	9600      	str	r6, [sp, #0]
    40fe:	f7ff fe35 	bl	3d6c <write_bytes>
	write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    4102:	9600      	str	r6, [sp, #0]
    4104:	ab03      	add	r3, sp, #12
    4106:	4622      	mov	r2, r4
    4108:	a905      	add	r1, sp, #20
    410a:	4628      	mov	r0, r5
    410c:	f7ff fe2e 	bl	3d6c <write_bytes>
	setOutputcs(1);
    4110:	4630      	mov	r0, r6
    4112:	f7ff fde3 	bl	3cdc <setOutputcs>
    4116:	e7df      	b.n	40d8 <WriteOneDot+0x28>
    4118:	0002aaaa 	.word	0x0002aaaa
    411c:	0002736c 	.word	0x0002736c

00004120 <DispOneChar>:
{
    4120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4124:	4604      	mov	r4, r0
    4126:	461e      	mov	r6, r3
    4128:	4608      	mov	r0, r1
	BlockWrite(Xstart, Xstart + (FONT_W - 1), Ystart,
    412a:	f102 0314 	add.w	r3, r2, #20
    412e:	310f      	adds	r1, #15
    4130:	f01c feec 	bl	20f0c <BlockWrite>
	if (index > 95) //95:ASCII CHAR NUM
    4134:	4620      	mov	r0, r4
    4136:	2c5f      	cmp	r4, #95	; 0x5f
	p = p + index;
    4138:	4c0c      	ldr	r4, [pc, #48]	; (416c <DispOneChar+0x4c>)
    413a:	f04f 032a 	mov.w	r3, #42	; 0x2a
    413e:	bf28      	it	cs
    4140:	205f      	movcs	r0, #95	; 0x5f
    4142:	fb03 4400 	mla	r4, r3, r0, r4
	for (i = 0; i < (FONT_W / 8 * FONT_H); i++) {
    4146:	18e7      	adds	r7, r4, r3
		dat = *p++;
    4148:	f814 8b01 	ldrb.w	r8, [r4], #1
    414c:	2500      	movs	r5, #0
			if ((dat << j) & 0x80) {
    414e:	fa08 f305 	lsl.w	r3, r8, r5
    4152:	061b      	lsls	r3, r3, #24
				WriteOneDot(BackColor);
    4154:	bf54      	ite	pl
    4156:	9806      	ldrpl	r0, [sp, #24]
				WriteOneDot(TextColor);
    4158:	4630      	movmi	r0, r6
		for (j = 0; j < 8; j++) {
    415a:	3501      	adds	r5, #1
				WriteOneDot(BackColor);
    415c:	f7ff ffa8 	bl	40b0 <WriteOneDot>
		for (j = 0; j < 8; j++) {
    4160:	2d08      	cmp	r5, #8
    4162:	d1f4      	bne.n	414e <DispOneChar+0x2e>
	for (i = 0; i < (FONT_W / 8 * FONT_H); i++) {
    4164:	42a7      	cmp	r7, r4
    4166:	d1ef      	bne.n	4148 <DispOneChar+0x28>
}
    4168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    416c:	200008b4 	.word	0x200008b4

00004170 <init_output>:

struct device *globalBuzzer;
struct device *globalMotor;

s16_t init_output()
{
    4170:	b570      	push	{r4, r5, r6, lr}
    4172:	4817      	ldr	r0, [pc, #92]	; (41d0 <init_output+0x60>)
    4174:	f01a fe98 	bl	1eea8 <z_impl_device_get_binding>
    struct device *buzzer;
    int ret;
    buzzer = device_get_binding(BUZZER_GPIO_LABEL);
    if (buzzer == NULL)
    4178:	4606      	mov	r6, r0
    417a:	b930      	cbnz	r0, 418a <init_output+0x1a>
    {
        printk("Didn't find device %s\n", BUZZER_GPIO_LABEL);
    417c:	4815      	ldr	r0, [pc, #84]	; (41d4 <init_output+0x64>)
    417e:	4914      	ldr	r1, [pc, #80]	; (41d0 <init_output+0x60>)
    4180:	f01d f888 	bl	21294 <printk>
        return -1;
    4184:	f04f 30ff 	mov.w	r0, #4294967295
    }
    printk("INITIALISING OUTPUTS : OK\n");
    globalBuzzer = buzzer;
    globalMotor = motor;
    return 0;
}
    4188:	bd70      	pop	{r4, r5, r6, pc}
    ret = gpio_pin_configure(buzzer, BUZZER_GPIO_PIN, BUZZER_GPIO_FLAGS);
    418a:	2104      	movs	r1, #4
    418c:	f01c ffaf 	bl	210ee <gpio_pin_configure.constprop.0>
    if (ret != 0)
    4190:	4604      	mov	r4, r0
    4192:	b138      	cbz	r0, 41a4 <init_output+0x34>
        printk("Error %d: failed to configure device %s pin %d\n",
    4194:	2304      	movs	r3, #4
        printk("Error %d: failed to configure device %s pin %d\n",
    4196:	4810      	ldr	r0, [pc, #64]	; (41d8 <init_output+0x68>)
    4198:	4a0d      	ldr	r2, [pc, #52]	; (41d0 <init_output+0x60>)
    419a:	4621      	mov	r1, r4
    419c:	f01d f87a 	bl	21294 <printk>
        return ret;
    41a0:	b220      	sxth	r0, r4
    41a2:	e7f1      	b.n	4188 <init_output+0x18>
    41a4:	480a      	ldr	r0, [pc, #40]	; (41d0 <init_output+0x60>)
    41a6:	f01a fe7f 	bl	1eea8 <z_impl_device_get_binding>
    if (motor == NULL)
    41aa:	4605      	mov	r5, r0
    41ac:	2800      	cmp	r0, #0
    41ae:	d0e5      	beq.n	417c <init_output+0xc>
    ret = gpio_pin_configure(motor, MOTOR_GPIO_PIN, MOTOR_GPIO_FLAGS);
    41b0:	2103      	movs	r1, #3
    41b2:	f01c ff9c 	bl	210ee <gpio_pin_configure.constprop.0>
    if (ret != 0)
    41b6:	4604      	mov	r4, r0
    41b8:	b108      	cbz	r0, 41be <init_output+0x4e>
        printk("Error %d: failed to configure device %s pin %d\n",
    41ba:	2303      	movs	r3, #3
    41bc:	e7eb      	b.n	4196 <init_output+0x26>
    printk("INITIALISING OUTPUTS : OK\n");
    41be:	4807      	ldr	r0, [pc, #28]	; (41dc <init_output+0x6c>)
    41c0:	f01d f868 	bl	21294 <printk>
    globalBuzzer = buzzer;
    41c4:	4b06      	ldr	r3, [pc, #24]	; (41e0 <init_output+0x70>)
    41c6:	601e      	str	r6, [r3, #0]
    globalMotor = motor;
    41c8:	4b06      	ldr	r3, [pc, #24]	; (41e4 <init_output+0x74>)
    return 0;
    41ca:	4620      	mov	r0, r4
    globalMotor = motor;
    41cc:	601d      	str	r5, [r3, #0]
    return 0;
    41ce:	e7db      	b.n	4188 <init_output+0x18>
    41d0:	0002a7d0 	.word	0x0002a7d0
    41d4:	0002a9df 	.word	0x0002a9df
    41d8:	0002a9f6 	.word	0x0002a9f6
    41dc:	0002aa26 	.word	0x0002aa26
    41e0:	2000d4a0 	.word	0x2000d4a0
    41e4:	2000d4a4 	.word	0x2000d4a4

000041e8 <toggle_buzzer>:

bool toggle_buzzer(bool val)
{
    41e8:	b538      	push	{r3, r4, r5, lr}
    if (val = 1)
    {
        for (int i = 0; i < 1000; i++)
        {
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    41ea:	4d0b      	ldr	r5, [pc, #44]	; (4218 <toggle_buzzer+0x30>)
{
    41ec:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    41f0:	6828      	ldr	r0, [r5, #0]
    41f2:	2201      	movs	r2, #1
    41f4:	2104      	movs	r1, #4
    41f6:	f01c ff8a 	bl	2110e <gpio_pin_set.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
    41fa:	20fa      	movs	r0, #250	; 0xfa
    41fc:	f022 fb00 	bl	26800 <z_impl_k_busy_wait>
            k_busy_wait(250);
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 0);
    4200:	6828      	ldr	r0, [r5, #0]
    4202:	2200      	movs	r2, #0
    4204:	2104      	movs	r1, #4
    4206:	f01c ff82 	bl	2110e <gpio_pin_set.isra.0>
    420a:	20fa      	movs	r0, #250	; 0xfa
    420c:	f022 faf8 	bl	26800 <z_impl_k_busy_wait>
        for (int i = 0; i < 1000; i++)
    4210:	3c01      	subs	r4, #1
    4212:	d1ed      	bne.n	41f0 <toggle_buzzer+0x8>
        }
    }
    else
        gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    return val;
}
    4214:	2001      	movs	r0, #1
    4216:	bd38      	pop	{r3, r4, r5, pc}
    4218:	2000d4a0 	.word	0x2000d4a0

0000421c <toggle_motor>:
bool toggle_motor(bool val)
{
    421c:	b510      	push	{r4, lr}
    if (val)
    {
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    421e:	4c09      	ldr	r4, [pc, #36]	; (4244 <toggle_motor+0x28>)
{
    4220:	4603      	mov	r3, r0
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    4222:	2201      	movs	r2, #1
    4224:	6820      	ldr	r0, [r4, #0]
    4226:	2103      	movs	r1, #3
    if (val)
    4228:	b14b      	cbz	r3, 423e <toggle_motor+0x22>
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    422a:	f01c ff70 	bl	2110e <gpio_pin_set.isra.0>
	return z_impl_k_sleep(timeout);
    422e:	2100      	movs	r1, #0
    4230:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    4234:	f01b fcae 	bl	1fb94 <z_impl_k_sleep>
        k_msleep(250);
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 0);
    4238:	6820      	ldr	r0, [r4, #0]
    423a:	2200      	movs	r2, #0
    423c:	2103      	movs	r1, #3
    }
    else
    {
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    423e:	f01c ff66 	bl	2110e <gpio_pin_set.isra.0>
    }
    4242:	bd10      	pop	{r4, pc}
    4244:	2000d4a4 	.word	0x2000d4a4

00004248 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    4248:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    424a:	4c0a      	ldr	r4, [pc, #40]	; (4274 <crc8_ccitt+0x2c>)
    424c:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    424e:	4291      	cmp	r1, r2
    4250:	d100      	bne.n	4254 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    4252:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    4254:	f811 3b01 	ldrb.w	r3, [r1], #1
    4258:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    425a:	0903      	lsrs	r3, r0, #4
    425c:	5ce3      	ldrb	r3, [r4, r3]
    425e:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    4262:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    4264:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4268:	5ce0      	ldrb	r0, [r4, r3]
    426a:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    426e:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    4270:	e7ed      	b.n	424e <crc8_ccitt+0x6>
    4272:	bf00      	nop
    4274:	0002ab06 	.word	0x0002ab06

00004278 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4278:	680b      	ldr	r3, [r1, #0]
    427a:	3301      	adds	r3, #1
    427c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    427e:	4b01      	ldr	r3, [pc, #4]	; (4284 <char_out+0xc>)
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	4718      	bx	r3
    4284:	20000254 	.word	0x20000254

00004288 <__printk_hook_install>:
	_char_out = fn;
    4288:	4b01      	ldr	r3, [pc, #4]	; (4290 <__printk_hook_install+0x8>)
    428a:	6018      	str	r0, [r3, #0]
}
    428c:	4770      	bx	lr
    428e:	bf00      	nop
    4290:	20000254 	.word	0x20000254

00004294 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    4294:	b507      	push	{r0, r1, r2, lr}
    4296:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    4298:	2100      	movs	r1, #0
{
    429a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    429c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    429e:	4803      	ldr	r0, [pc, #12]	; (42ac <vprintk+0x18>)
    42a0:	a901      	add	r1, sp, #4
    42a2:	f000 f8f9 	bl	4498 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    42a6:	b003      	add	sp, #12
    42a8:	f85d fb04 	ldr.w	pc, [sp], #4
    42ac:	00004279 	.word	0x00004279

000042b0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    42b0:	b530      	push	{r4, r5, lr}
    42b2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    42b4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    42b8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    42ba:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    42bc:	a901      	add	r1, sp, #4
    42be:	4805      	ldr	r0, [pc, #20]	; (42d4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    42c0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    42c2:	f000 f8e9 	bl	4498 <cbvprintf>

	if (ctx.count < ctx.max) {
    42c6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    42ca:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    42cc:	bfb8      	it	lt
    42ce:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    42d0:	b005      	add	sp, #20
    42d2:	bd30      	pop	{r4, r5, pc}
    42d4:	0002126f 	.word	0x0002126f

000042d8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    42d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    42dc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    42e0:	f019 0808 	ands.w	r8, r9, #8
{
    42e4:	4604      	mov	r4, r0
    42e6:	4693      	mov	fp, r2
	if (processing) {
    42e8:	d00d      	beq.n	4306 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    42ea:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    42ec:	bf0c      	ite	eq
    42ee:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    42f2:	f049 0920 	orrne.w	r9, r9, #32
    42f6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    42fa:	f38b 8811 	msr	BASEPRI, fp
    42fe:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4306:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    430a:	2902      	cmp	r1, #2
    430c:	d107      	bne.n	431e <process_event+0x46>
			evt = process_recheck(mgr);
    430e:	4620      	mov	r0, r4
    4310:	f01c ffda 	bl	212c8 <process_recheck>
		if (evt == EVT_NOP) {
    4314:	2800      	cmp	r0, #0
    4316:	d0f0      	beq.n	42fa <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    4318:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    431a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    431c:	d14e      	bne.n	43bc <process_event+0xe4>
			res = mgr->last_res;
    431e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4320:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    4322:	2f00      	cmp	r7, #0
    4324:	da15      	bge.n	4352 <process_event+0x7a>
		*clients = mgr->clients;
    4326:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4328:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    432c:	e9c4 8800 	strd	r8, r8, [r4]
    4330:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4334:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    4336:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4338:	8b21      	ldrh	r1, [r4, #24]
    433a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    433e:	45ca      	cmp	sl, r9
    4340:	d002      	beq.n	4348 <process_event+0x70>
		if (do_monitors
    4342:	68a3      	ldr	r3, [r4, #8]
    4344:	2b00      	cmp	r3, #0
    4346:	d15a      	bne.n	43fe <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    4348:	b90d      	cbnz	r5, 434e <process_event+0x76>
		    || (transit != NULL)) {
    434a:	2e00      	cmp	r6, #0
    434c:	d071      	beq.n	4432 <process_event+0x15a>
    434e:	2300      	movs	r3, #0
    4350:	e056      	b.n	4400 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4352:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4356:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4358:	2a01      	cmp	r2, #1
    435a:	d81e      	bhi.n	439a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    435c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4360:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    4362:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4364:	b289      	uxth	r1, r1
    4366:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    436a:	d10a      	bne.n	4382 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    436c:	b13d      	cbz	r5, 437e <process_event+0xa6>
    436e:	8b63      	ldrh	r3, [r4, #26]
    4370:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    4372:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    4374:	3301      	adds	r3, #1
    4376:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4378:	2a00      	cmp	r2, #0
    437a:	d1fa      	bne.n	4372 <process_event+0x9a>
    437c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    437e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4382:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4384:	4620      	mov	r0, r4
    4386:	f01c ff9f 	bl	212c8 <process_recheck>
    438a:	4606      	mov	r6, r0
    438c:	2800      	cmp	r0, #0
    438e:	d0d3      	beq.n	4338 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4390:	8b23      	ldrh	r3, [r4, #24]
    4392:	f043 0320 	orr.w	r3, r3, #32
    4396:	8323      	strh	r3, [r4, #24]
    4398:	e7cd      	b.n	4336 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    439a:	2b04      	cmp	r3, #4
    439c:	d10c      	bne.n	43b8 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    439e:	f021 0107 	bic.w	r1, r1, #7
    43a2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    43a4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    43a6:	4620      	mov	r0, r4
    43a8:	f01c ff8e 	bl	212c8 <process_recheck>
    43ac:	4605      	mov	r5, r0
    43ae:	2800      	cmp	r0, #0
    43b0:	d0c1      	beq.n	4336 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    43b2:	f041 0120 	orr.w	r1, r1, #32
    43b6:	8321      	strh	r1, [r4, #24]
    43b8:	2500      	movs	r5, #0
    43ba:	e7bc      	b.n	4336 <process_event+0x5e>
		} else if (evt == EVT_START) {
    43bc:	2803      	cmp	r0, #3
    43be:	d109      	bne.n	43d4 <process_event+0xfc>
			transit = mgr->transitions->start;
    43c0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    43c2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    43c6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    43c8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    43cc:	8323      	strh	r3, [r4, #24]
}
    43ce:	2500      	movs	r5, #0
		res = 0;
    43d0:	462f      	mov	r7, r5
    43d2:	e7b1      	b.n	4338 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    43d4:	2804      	cmp	r0, #4
    43d6:	d106      	bne.n	43e6 <process_event+0x10e>
			transit = mgr->transitions->stop;
    43d8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    43da:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    43de:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    43e0:	f043 0304 	orr.w	r3, r3, #4
    43e4:	e7f2      	b.n	43cc <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    43e6:	2805      	cmp	r0, #5
    43e8:	d106      	bne.n	43f8 <process_event+0x120>
			transit = mgr->transitions->reset;
    43ea:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    43ec:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    43f0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    43f2:	f043 0305 	orr.w	r3, r3, #5
    43f6:	e7e9      	b.n	43cc <process_event+0xf4>
    43f8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    43fa:	462e      	mov	r6, r5
    43fc:	e7e8      	b.n	43d0 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    43fe:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4400:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4404:	8321      	strh	r1, [r4, #24]
    4406:	f38b 8811 	msr	BASEPRI, fp
    440a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    440e:	b9fb      	cbnz	r3, 4450 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    4410:	bb85      	cbnz	r5, 4474 <process_event+0x19c>
			if (transit != NULL) {
    4412:	b116      	cbz	r6, 441a <process_event+0x142>
				transit(mgr, transition_complete);
    4414:	491f      	ldr	r1, [pc, #124]	; (4494 <process_event+0x1bc>)
    4416:	4620      	mov	r0, r4
    4418:	47b0      	blx	r6
	__asm__ volatile(
    441a:	f04f 0320 	mov.w	r3, #32
    441e:	f3ef 8b11 	mrs	fp, BASEPRI
    4422:	f383 8811 	msr	BASEPRI, r3
    4426:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    442a:	8b23      	ldrh	r3, [r4, #24]
    442c:	f023 0308 	bic.w	r3, r3, #8
    4430:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    4432:	8b23      	ldrh	r3, [r4, #24]
    4434:	06da      	lsls	r2, r3, #27
    4436:	d525      	bpl.n	4484 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    4438:	f023 0310 	bic.w	r3, r3, #16
    443c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    443e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    4440:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    4444:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    4448:	2900      	cmp	r1, #0
    444a:	f47f af5e 	bne.w	430a <process_event+0x32>
out:
    444e:	e754      	b.n	42fa <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    4450:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4452:	2900      	cmp	r1, #0
    4454:	d0dc      	beq.n	4410 <process_event+0x138>
	return node->next;
    4456:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    445a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    445e:	463b      	mov	r3, r7
    4460:	4652      	mov	r2, sl
    4462:	4620      	mov	r0, r4
    4464:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4466:	f1b9 0f00 	cmp.w	r9, #0
    446a:	d0d1      	beq.n	4410 <process_event+0x138>
    446c:	4649      	mov	r1, r9
    446e:	f8d9 9000 	ldr.w	r9, [r9]
    4472:	e7f2      	b.n	445a <process_event+0x182>
    4474:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    4476:	463b      	mov	r3, r7
    4478:	4652      	mov	r2, sl
    447a:	4620      	mov	r0, r4
    447c:	682d      	ldr	r5, [r5, #0]
    447e:	f01c ff3f 	bl	21300 <notify_one>
    4482:	e7c5      	b.n	4410 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4484:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4488:	bf1e      	ittt	ne
    448a:	f023 0320 	bicne.w	r3, r3, #32
    448e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    4490:	2102      	movne	r1, #2
    4492:	e7d5      	b.n	4440 <process_event+0x168>
    4494:	0002132d 	.word	0x0002132d

00004498 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    449c:	b091      	sub	sp, #68	; 0x44
    449e:	468b      	mov	fp, r1
    44a0:	9002      	str	r0, [sp, #8]
    44a2:	4692      	mov	sl, r2
    44a4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    44a6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    44a8:	f89a 0000 	ldrb.w	r0, [sl]
    44ac:	b908      	cbnz	r0, 44b2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    44ae:	4628      	mov	r0, r5
    44b0:	e35f      	b.n	4b72 <cbvprintf+0x6da>
		if (*fp != '%') {
    44b2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    44b4:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    44b8:	d007      	beq.n	44ca <cbvprintf+0x32>
			OUTC('%');
    44ba:	9b02      	ldr	r3, [sp, #8]
    44bc:	4659      	mov	r1, fp
    44be:	4798      	blx	r3
    44c0:	2800      	cmp	r0, #0
    44c2:	f2c0 8356 	blt.w	4b72 <cbvprintf+0x6da>
    44c6:	3501      	adds	r5, #1
			break;
    44c8:	e212      	b.n	48f0 <cbvprintf+0x458>
		} state = {
    44ca:	2218      	movs	r2, #24
    44cc:	2100      	movs	r1, #0
    44ce:	a80a      	add	r0, sp, #40	; 0x28
    44d0:	f01f fb7e 	bl	23bd0 <memset>
	if (*sp == '%') {
    44d4:	f89a 3001 	ldrb.w	r3, [sl, #1]
    44d8:	2b25      	cmp	r3, #37	; 0x25
    44da:	d078      	beq.n	45ce <cbvprintf+0x136>
    44dc:	2200      	movs	r2, #0
    44de:	4610      	mov	r0, r2
    44e0:	4696      	mov	lr, r2
    44e2:	4694      	mov	ip, r2
    44e4:	4616      	mov	r6, r2
    44e6:	4639      	mov	r1, r7
		switch (*sp) {
    44e8:	f817 3b01 	ldrb.w	r3, [r7], #1
    44ec:	2b2b      	cmp	r3, #43	; 0x2b
    44ee:	f000 809d 	beq.w	462c <cbvprintf+0x194>
    44f2:	f200 8094 	bhi.w	461e <cbvprintf+0x186>
    44f6:	2b20      	cmp	r3, #32
    44f8:	f000 809b 	beq.w	4632 <cbvprintf+0x19a>
    44fc:	2b23      	cmp	r3, #35	; 0x23
    44fe:	f000 809b 	beq.w	4638 <cbvprintf+0x1a0>
    4502:	b12e      	cbz	r6, 4510 <cbvprintf+0x78>
    4504:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    4508:	f046 0604 	orr.w	r6, r6, #4
    450c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    4510:	f1bc 0f00 	cmp.w	ip, #0
    4514:	d005      	beq.n	4522 <cbvprintf+0x8a>
    4516:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    451a:	f046 0608 	orr.w	r6, r6, #8
    451e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    4522:	f1be 0f00 	cmp.w	lr, #0
    4526:	d005      	beq.n	4534 <cbvprintf+0x9c>
    4528:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    452c:	f046 0610 	orr.w	r6, r6, #16
    4530:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    4534:	b128      	cbz	r0, 4542 <cbvprintf+0xaa>
    4536:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    453a:	f040 0020 	orr.w	r0, r0, #32
    453e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    4542:	b12a      	cbz	r2, 4550 <cbvprintf+0xb8>
    4544:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    4548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    454c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    4550:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    4554:	f002 0044 	and.w	r0, r2, #68	; 0x44
    4558:	2844      	cmp	r0, #68	; 0x44
    455a:	d103      	bne.n	4564 <cbvprintf+0xcc>
		conv->flag_zero = false;
    455c:	f36f 1286 	bfc	r2, #6, #1
    4560:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    4564:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    4568:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    456a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    456e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    4572:	d17b      	bne.n	466c <cbvprintf+0x1d4>
		conv->width_star = true;
    4574:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    4578:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    457c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    457e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    4582:	781a      	ldrb	r2, [r3, #0]
    4584:	2a2e      	cmp	r2, #46	; 0x2e
    4586:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    458a:	bf0c      	ite	eq
    458c:	2101      	moveq	r1, #1
    458e:	2100      	movne	r1, #0
    4590:	f361 0241 	bfi	r2, r1, #1, #1
    4594:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    4598:	d174      	bne.n	4684 <cbvprintf+0x1ec>
	if (*sp == '*') {
    459a:	785a      	ldrb	r2, [r3, #1]
    459c:	2a2a      	cmp	r2, #42	; 0x2a
    459e:	d06a      	beq.n	4676 <cbvprintf+0x1de>
	++sp;
    45a0:	3301      	adds	r3, #1
	size_t val = 0;
    45a2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    45a4:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    45a6:	4618      	mov	r0, r3
    45a8:	f810 2b01 	ldrb.w	r2, [r0], #1
    45ac:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    45b0:	2f09      	cmp	r7, #9
    45b2:	f240 808e 	bls.w	46d2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    45b6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    45ba:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    45bc:	f3c2 0040 	ubfx	r0, r2, #1, #1
    45c0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    45c4:	f361 0241 	bfi	r2, r1, #1, #1
    45c8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    45cc:	e05a      	b.n	4684 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    45ce:	f10a 0702 	add.w	r7, sl, #2
    45d2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    45d6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    45da:	07d9      	lsls	r1, r3, #31
    45dc:	f140 8149 	bpl.w	4872 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    45e0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    45e4:	f1b9 0f00 	cmp.w	r9, #0
    45e8:	da07      	bge.n	45fa <cbvprintf+0x162>
				conv->flag_dash = true;
    45ea:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    45ee:	f042 0204 	orr.w	r2, r2, #4
    45f2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    45f6:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    45fa:	075a      	lsls	r2, r3, #29
    45fc:	f140 8142 	bpl.w	4884 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    4600:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    4604:	f1b8 0f00 	cmp.w	r8, #0
    4608:	f280 8141 	bge.w	488e <cbvprintf+0x3f6>
				conv->prec_present = false;
    460c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    4610:	f36f 0341 	bfc	r3, #1, #1
    4614:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    4618:	f04f 38ff 	mov.w	r8, #4294967295
    461c:	e137      	b.n	488e <cbvprintf+0x3f6>
		switch (*sp) {
    461e:	2b2d      	cmp	r3, #45	; 0x2d
    4620:	d00c      	beq.n	463c <cbvprintf+0x1a4>
    4622:	2b30      	cmp	r3, #48	; 0x30
    4624:	f47f af6d 	bne.w	4502 <cbvprintf+0x6a>
			conv->flag_zero = true;
    4628:	2201      	movs	r2, #1
	} while (loop);
    462a:	e75c      	b.n	44e6 <cbvprintf+0x4e>
			conv->flag_plus = true;
    462c:	f04f 0c01 	mov.w	ip, #1
    4630:	e759      	b.n	44e6 <cbvprintf+0x4e>
			conv->flag_space = true;
    4632:	f04f 0e01 	mov.w	lr, #1
    4636:	e756      	b.n	44e6 <cbvprintf+0x4e>
			conv->flag_hash = true;
    4638:	2001      	movs	r0, #1
    463a:	e754      	b.n	44e6 <cbvprintf+0x4e>
		switch (*sp) {
    463c:	2601      	movs	r6, #1
    463e:	e752      	b.n	44e6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    4640:	fb0c 0202 	mla	r2, ip, r2, r0
    4644:	3a30      	subs	r2, #48	; 0x30
    4646:	4633      	mov	r3, r6
    4648:	461e      	mov	r6, r3
    464a:	f816 0b01 	ldrb.w	r0, [r6], #1
    464e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4652:	2f09      	cmp	r7, #9
    4654:	d9f4      	bls.n	4640 <cbvprintf+0x1a8>
	if (sp != wp) {
    4656:	4299      	cmp	r1, r3
    4658:	d093      	beq.n	4582 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    465a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    465e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    4660:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    4662:	f362 0141 	bfi	r1, r2, #1, #1
    4666:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    466a:	e78a      	b.n	4582 <cbvprintf+0xea>
    466c:	460b      	mov	r3, r1
	size_t val = 0;
    466e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    4670:	f04f 0c0a 	mov.w	ip, #10
    4674:	e7e8      	b.n	4648 <cbvprintf+0x1b0>
		conv->prec_star = true;
    4676:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    467a:	f042 0204 	orr.w	r2, r2, #4
    467e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    4682:	3302      	adds	r3, #2
	switch (*sp) {
    4684:	461f      	mov	r7, r3
    4686:	f817 2b01 	ldrb.w	r2, [r7], #1
    468a:	2a6c      	cmp	r2, #108	; 0x6c
    468c:	d041      	beq.n	4712 <cbvprintf+0x27a>
    468e:	d825      	bhi.n	46dc <cbvprintf+0x244>
    4690:	2a68      	cmp	r2, #104	; 0x68
    4692:	d02b      	beq.n	46ec <cbvprintf+0x254>
    4694:	2a6a      	cmp	r2, #106	; 0x6a
    4696:	d046      	beq.n	4726 <cbvprintf+0x28e>
    4698:	2a4c      	cmp	r2, #76	; 0x4c
    469a:	d04c      	beq.n	4736 <cbvprintf+0x29e>
    469c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    469e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    46a2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    46a6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    46aa:	2a78      	cmp	r2, #120	; 0x78
    46ac:	f200 80d9 	bhi.w	4862 <cbvprintf+0x3ca>
    46b0:	2a57      	cmp	r2, #87	; 0x57
    46b2:	d84d      	bhi.n	4750 <cbvprintf+0x2b8>
    46b4:	2a41      	cmp	r2, #65	; 0x41
    46b6:	d003      	beq.n	46c0 <cbvprintf+0x228>
    46b8:	3a45      	subs	r2, #69	; 0x45
    46ba:	2a02      	cmp	r2, #2
    46bc:	f200 80d1 	bhi.w	4862 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    46c0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    46c4:	2204      	movs	r2, #4
    46c6:	f362 0302 	bfi	r3, r2, #0, #3
    46ca:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    46ce:	2301      	movs	r3, #1
			break;
    46d0:	e09e      	b.n	4810 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    46d2:	fb06 2101 	mla	r1, r6, r1, r2
    46d6:	3930      	subs	r1, #48	; 0x30
    46d8:	4603      	mov	r3, r0
    46da:	e764      	b.n	45a6 <cbvprintf+0x10e>
	switch (*sp) {
    46dc:	2a74      	cmp	r2, #116	; 0x74
    46de:	d026      	beq.n	472e <cbvprintf+0x296>
    46e0:	2a7a      	cmp	r2, #122	; 0x7a
    46e2:	d1db      	bne.n	469c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    46e4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    46e8:	2206      	movs	r2, #6
    46ea:	e00d      	b.n	4708 <cbvprintf+0x270>
		if (*++sp == 'h') {
    46ec:	785a      	ldrb	r2, [r3, #1]
    46ee:	2a68      	cmp	r2, #104	; 0x68
    46f0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    46f4:	d106      	bne.n	4704 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    46f6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    46f8:	f361 02c6 	bfi	r2, r1, #3, #4
    46fc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    4700:	1c9f      	adds	r7, r3, #2
    4702:	e7cc      	b.n	469e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    4704:	4613      	mov	r3, r2
    4706:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    4708:	f362 03c6 	bfi	r3, r2, #3, #4
    470c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    4710:	e7c5      	b.n	469e <cbvprintf+0x206>
		if (*++sp == 'l') {
    4712:	785a      	ldrb	r2, [r3, #1]
    4714:	2a6c      	cmp	r2, #108	; 0x6c
    4716:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    471a:	d101      	bne.n	4720 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    471c:	2104      	movs	r1, #4
    471e:	e7eb      	b.n	46f8 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    4720:	4613      	mov	r3, r2
    4722:	2203      	movs	r2, #3
    4724:	e7f0      	b.n	4708 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    4726:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    472a:	2205      	movs	r2, #5
    472c:	e7ec      	b.n	4708 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    472e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    4732:	2207      	movs	r2, #7
    4734:	e7e8      	b.n	4708 <cbvprintf+0x270>
		conv->unsupported = true;
    4736:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    473a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    473e:	f023 0302 	bic.w	r3, r3, #2
    4742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4746:	f043 0302 	orr.w	r3, r3, #2
    474a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    474e:	e7a6      	b.n	469e <cbvprintf+0x206>
    4750:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    4754:	2920      	cmp	r1, #32
    4756:	f200 8084 	bhi.w	4862 <cbvprintf+0x3ca>
    475a:	a001      	add	r0, pc, #4	; (adr r0, 4760 <cbvprintf+0x2c8>)
    475c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    4760:	00004825 	.word	0x00004825
    4764:	00004863 	.word	0x00004863
    4768:	00004863 	.word	0x00004863
    476c:	00004863 	.word	0x00004863
    4770:	00004863 	.word	0x00004863
    4774:	00004863 	.word	0x00004863
    4778:	00004863 	.word	0x00004863
    477c:	00004863 	.word	0x00004863
    4780:	00004863 	.word	0x00004863
    4784:	000046c1 	.word	0x000046c1
    4788:	00004863 	.word	0x00004863
    478c:	00004825 	.word	0x00004825
    4790:	000047e5 	.word	0x000047e5
    4794:	000046c1 	.word	0x000046c1
    4798:	000046c1 	.word	0x000046c1
    479c:	000046c1 	.word	0x000046c1
    47a0:	00004863 	.word	0x00004863
    47a4:	000047e5 	.word	0x000047e5
    47a8:	00004863 	.word	0x00004863
    47ac:	00004863 	.word	0x00004863
    47b0:	00004863 	.word	0x00004863
    47b4:	00004863 	.word	0x00004863
    47b8:	0000482d 	.word	0x0000482d
    47bc:	00004825 	.word	0x00004825
    47c0:	00004849 	.word	0x00004849
    47c4:	00004863 	.word	0x00004863
    47c8:	00004863 	.word	0x00004863
    47cc:	00004849 	.word	0x00004849
    47d0:	00004863 	.word	0x00004863
    47d4:	00004825 	.word	0x00004825
    47d8:	00004863 	.word	0x00004863
    47dc:	00004863 	.word	0x00004863
    47e0:	00004825 	.word	0x00004825
		conv->specifier_cat = SPECIFIER_SINT;
    47e4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    47e8:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    47ea:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    47ee:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    47f2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    47f4:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    47f8:	bf02      	ittt	eq
    47fa:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    47fe:	f041 0101 	orreq.w	r1, r1, #1
    4802:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    4806:	2a63      	cmp	r2, #99	; 0x63
    4808:	d131      	bne.n	486e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    480a:	3b00      	subs	r3, #0
    480c:	bf18      	it	ne
    480e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    4810:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    4814:	f3c2 0140 	ubfx	r1, r2, #1, #1
    4818:	430b      	orrs	r3, r1
    481a:	f363 0241 	bfi	r2, r3, #1, #1
    481e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    4822:	e6d8      	b.n	45d6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    4824:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    4828:	2002      	movs	r0, #2
    482a:	e7de      	b.n	47ea <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    482c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    4830:	f003 0378 	and.w	r3, r3, #120	; 0x78
    4834:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    4838:	2103      	movs	r1, #3
    483a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    483e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    4840:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    4844:	4143      	adcs	r3, r0
    4846:	e7e3      	b.n	4810 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    4848:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    484c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    484e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    4852:	f361 0202 	bfi	r2, r1, #0, #3
    4856:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    485a:	bf14      	ite	ne
    485c:	2301      	movne	r3, #1
    485e:	2300      	moveq	r3, #0
    4860:	e7d6      	b.n	4810 <cbvprintf+0x378>
		conv->invalid = true;
    4862:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    4866:	f043 0301 	orr.w	r3, r3, #1
    486a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    486e:	2300      	movs	r3, #0
    4870:	e7ce      	b.n	4810 <cbvprintf+0x378>
		} else if (conv->width_present) {
    4872:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    4876:	2a00      	cmp	r2, #0
			width = conv->width_value;
    4878:	bfb4      	ite	lt
    487a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    487e:	f04f 39ff 	movge.w	r9, #4294967295
    4882:	e6ba      	b.n	45fa <cbvprintf+0x162>
		} else if (conv->prec_present) {
    4884:	079b      	lsls	r3, r3, #30
    4886:	f57f aec7 	bpl.w	4618 <cbvprintf+0x180>
			precision = conv->prec_value;
    488a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    488e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    4892:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    4894:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    4898:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    489c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    48a0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    48a2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    48a6:	d138      	bne.n	491a <cbvprintf+0x482>
			switch (length_mod) {
    48a8:	1ecb      	subs	r3, r1, #3
    48aa:	2b04      	cmp	r3, #4
    48ac:	d822      	bhi.n	48f4 <cbvprintf+0x45c>
    48ae:	e8df f003 	tbb	[pc, r3]
    48b2:	0903      	.short	0x0903
    48b4:	2109      	.short	0x2109
    48b6:	21          	.byte	0x21
    48b7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    48b8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    48bc:	17da      	asrs	r2, r3, #31
    48be:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    48c2:	e006      	b.n	48d2 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    48c4:	3407      	adds	r4, #7
    48c6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    48ca:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    48ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    48d2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    48d6:	f013 0603 	ands.w	r6, r3, #3
    48da:	d056      	beq.n	498a <cbvprintf+0x4f2>
			OUTS(sp, fp);
    48dc:	9802      	ldr	r0, [sp, #8]
    48de:	463b      	mov	r3, r7
    48e0:	4652      	mov	r2, sl
    48e2:	4659      	mov	r1, fp
    48e4:	f01d f8e3 	bl	21aae <outs>
    48e8:	2800      	cmp	r0, #0
    48ea:	f2c0 8142 	blt.w	4b72 <cbvprintf+0x6da>
    48ee:	4405      	add	r5, r0
			continue;
    48f0:	46ba      	mov	sl, r7
    48f2:	e5d9      	b.n	44a8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    48f4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    48f8:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    48fa:	ea4f 72e3 	mov.w	r2, r3, asr #31
    48fe:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    4902:	d105      	bne.n	4910 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    4904:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    4908:	930a      	str	r3, [sp, #40]	; 0x28
    490a:	2300      	movs	r3, #0
    490c:	930b      	str	r3, [sp, #44]	; 0x2c
    490e:	e7e0      	b.n	48d2 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    4910:	2902      	cmp	r1, #2
    4912:	d1de      	bne.n	48d2 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    4914:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    4918:	e7d0      	b.n	48bc <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    491a:	2b02      	cmp	r3, #2
    491c:	d123      	bne.n	4966 <cbvprintf+0x4ce>
			switch (length_mod) {
    491e:	1ecb      	subs	r3, r1, #3
    4920:	2b04      	cmp	r3, #4
    4922:	d813      	bhi.n	494c <cbvprintf+0x4b4>
    4924:	e8df f003 	tbb	[pc, r3]
    4928:	120a0a03 	.word	0x120a0a03
    492c:	12          	.byte	0x12
    492d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    492e:	6822      	ldr	r2, [r4, #0]
    4930:	920a      	str	r2, [sp, #40]	; 0x28
    4932:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    4934:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    4936:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    4938:	4604      	mov	r4, r0
    493a:	e7ca      	b.n	48d2 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    493c:	1de0      	adds	r0, r4, #7
    493e:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    4942:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    4946:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    494a:	e7f5      	b.n	4938 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    494c:	f854 3b04 	ldr.w	r3, [r4], #4
    4950:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    4952:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    4954:	f04f 0300 	mov.w	r3, #0
    4958:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    495a:	d0d3      	beq.n	4904 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    495c:	2902      	cmp	r1, #2
    495e:	d1b8      	bne.n	48d2 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    4960:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    4964:	e7d0      	b.n	4908 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    4966:	2b04      	cmp	r3, #4
    4968:	d109      	bne.n	497e <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    496a:	1de3      	adds	r3, r4, #7
    496c:	f023 0307 	bic.w	r3, r3, #7
    4970:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    4974:	e9d3 2300 	ldrd	r2, r3, [r3]
    4978:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    497c:	e7a9      	b.n	48d2 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    497e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    4980:	bf04      	itt	eq
    4982:	f854 3b04 	ldreq.w	r3, [r4], #4
    4986:	930a      	streq	r3, [sp, #40]	; 0x28
    4988:	e7a3      	b.n	48d2 <cbvprintf+0x43a>
		switch (conv->specifier) {
    498a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    498e:	2878      	cmp	r0, #120	; 0x78
    4990:	d8ae      	bhi.n	48f0 <cbvprintf+0x458>
    4992:	2862      	cmp	r0, #98	; 0x62
    4994:	d822      	bhi.n	49dc <cbvprintf+0x544>
    4996:	2825      	cmp	r0, #37	; 0x25
    4998:	f43f ad8f 	beq.w	44ba <cbvprintf+0x22>
    499c:	2858      	cmp	r0, #88	; 0x58
    499e:	d1a7      	bne.n	48f0 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    49a0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    49a4:	9300      	str	r3, [sp, #0]
    49a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    49aa:	ab04      	add	r3, sp, #16
    49ac:	aa0c      	add	r2, sp, #48	; 0x30
    49ae:	f01d f838 	bl	21a22 <encode_uint>
    49b2:	4682      	mov	sl, r0
			if (precision >= 0) {
    49b4:	f1b8 0f00 	cmp.w	r8, #0
    49b8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    49bc:	db0c      	blt.n	49d8 <cbvprintf+0x540>
				conv->flag_zero = false;
    49be:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    49c2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    49c6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    49ca:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    49cc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    49d0:	d902      	bls.n	49d8 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    49d2:	eba8 0303 	sub.w	r3, r8, r3
    49d6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    49d8:	4680      	mov	r8, r0
    49da:	e03d      	b.n	4a58 <cbvprintf+0x5c0>
    49dc:	3863      	subs	r0, #99	; 0x63
    49de:	2815      	cmp	r0, #21
    49e0:	d886      	bhi.n	48f0 <cbvprintf+0x458>
    49e2:	a201      	add	r2, pc, #4	; (adr r2, 49e8 <cbvprintf+0x550>)
    49e4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    49e8:	00004a69 	.word	0x00004a69
    49ec:	00004acd 	.word	0x00004acd
    49f0:	000048f1 	.word	0x000048f1
    49f4:	000048f1 	.word	0x000048f1
    49f8:	000048f1 	.word	0x000048f1
    49fc:	000048f1 	.word	0x000048f1
    4a00:	00004acd 	.word	0x00004acd
    4a04:	000048f1 	.word	0x000048f1
    4a08:	000048f1 	.word	0x000048f1
    4a0c:	000048f1 	.word	0x000048f1
    4a10:	000048f1 	.word	0x000048f1
    4a14:	00004b27 	.word	0x00004b27
    4a18:	00004af5 	.word	0x00004af5
    4a1c:	00004af9 	.word	0x00004af9
    4a20:	000048f1 	.word	0x000048f1
    4a24:	000048f1 	.word	0x000048f1
    4a28:	00004a41 	.word	0x00004a41
    4a2c:	000048f1 	.word	0x000048f1
    4a30:	00004af5 	.word	0x00004af5
    4a34:	000048f1 	.word	0x000048f1
    4a38:	000048f1 	.word	0x000048f1
    4a3c:	00004af5 	.word	0x00004af5
			if (precision >= 0) {
    4a40:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    4a44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    4a48:	db0a      	blt.n	4a60 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    4a4a:	4641      	mov	r1, r8
    4a4c:	4650      	mov	r0, sl
    4a4e:	f01f f85d 	bl	23b0c <strnlen>
			bpe = bps + len;
    4a52:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    4a56:	2600      	movs	r6, #0
		if (bps == NULL) {
    4a58:	f1ba 0f00 	cmp.w	sl, #0
    4a5c:	d10c      	bne.n	4a78 <cbvprintf+0x5e0>
    4a5e:	e747      	b.n	48f0 <cbvprintf+0x458>
				len = strlen(bps);
    4a60:	4650      	mov	r0, sl
    4a62:	f01f f84c 	bl	23afe <strlen>
    4a66:	e7f4      	b.n	4a52 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    4a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a6a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    4a6e:	2600      	movs	r6, #0
			bps = buf;
    4a70:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    4a74:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    4a78:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    4a7c:	b106      	cbz	r6, 4a80 <cbvprintf+0x5e8>
			nj_len += 1U;
    4a7e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    4a80:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    4a84:	06d0      	lsls	r0, r2, #27
    4a86:	d568      	bpl.n	4b5a <cbvprintf+0x6c2>
			nj_len += 2U;
    4a88:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    4a8a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    4a8c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    4a8e:	bf48      	it	mi
    4a90:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    4a92:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    4a94:	bf48      	it	mi
    4a96:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    4a98:	f1b9 0f00 	cmp.w	r9, #0
    4a9c:	dd76      	ble.n	4b8c <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    4a9e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    4aa2:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    4aa6:	f3c2 0380 	ubfx	r3, r2, #2, #1
    4aaa:	9303      	str	r3, [sp, #12]
    4aac:	0753      	lsls	r3, r2, #29
    4aae:	d46d      	bmi.n	4b8c <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    4ab0:	0650      	lsls	r0, r2, #25
    4ab2:	d561      	bpl.n	4b78 <cbvprintf+0x6e0>
					if (sign != 0) {
    4ab4:	b146      	cbz	r6, 4ac8 <cbvprintf+0x630>
						OUTC(sign);
    4ab6:	9b02      	ldr	r3, [sp, #8]
    4ab8:	4659      	mov	r1, fp
    4aba:	4630      	mov	r0, r6
    4abc:	4798      	blx	r3
    4abe:	2800      	cmp	r0, #0
    4ac0:	db57      	blt.n	4b72 <cbvprintf+0x6da>
						sign = 0;
    4ac2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    4ac4:	3501      	adds	r5, #1
						sign = 0;
    4ac6:	461e      	mov	r6, r3
					pad = '0';
    4ac8:	2330      	movs	r3, #48	; 0x30
    4aca:	e056      	b.n	4b7a <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    4acc:	071e      	lsls	r6, r3, #28
    4ace:	d40f      	bmi.n	4af0 <cbvprintf+0x658>
				sign = ' ';
    4ad0:	f013 0610 	ands.w	r6, r3, #16
    4ad4:	bf18      	it	ne
    4ad6:	2620      	movne	r6, #32
			sint = value->sint;
    4ad8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    4adc:	2b00      	cmp	r3, #0
    4ade:	f6bf af5f 	bge.w	49a0 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    4ae2:	4252      	negs	r2, r2
    4ae4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4ae8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    4aec:	262d      	movs	r6, #45	; 0x2d
    4aee:	e757      	b.n	49a0 <cbvprintf+0x508>
				sign = '+';
    4af0:	262b      	movs	r6, #43	; 0x2b
    4af2:	e7f1      	b.n	4ad8 <cbvprintf+0x640>
		switch (conv->specifier) {
    4af4:	2600      	movs	r6, #0
    4af6:	e753      	b.n	49a0 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    4af8:	980a      	ldr	r0, [sp, #40]	; 0x28
    4afa:	b340      	cbz	r0, 4b4e <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4afc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    4b00:	9300      	str	r3, [sp, #0]
    4b02:	aa0c      	add	r2, sp, #48	; 0x30
    4b04:	ab04      	add	r3, sp, #16
    4b06:	2100      	movs	r1, #0
    4b08:	f01c ff8b 	bl	21a22 <encode_uint>
				conv->altform_0c = true;
    4b0c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    4b10:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4b14:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    4b18:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4b1c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    4b1e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    4b22:	2600      	movs	r6, #0
				goto prec_int_pad0;
    4b24:	e746      	b.n	49b4 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    4b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    4b28:	2907      	cmp	r1, #7
    4b2a:	f63f aee1 	bhi.w	48f0 <cbvprintf+0x458>
    4b2e:	e8df f001 	tbb	[pc, r1]
    4b32:	040c      	.short	0x040c
    4b34:	08080c06 	.word	0x08080c06
    4b38:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    4b3a:	701d      	strb	r5, [r3, #0]
		break;
    4b3c:	e6d8      	b.n	48f0 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    4b3e:	801d      	strh	r5, [r3, #0]
		break;
    4b40:	e6d6      	b.n	48f0 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    4b42:	17ea      	asrs	r2, r5, #31
    4b44:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    4b48:	e6d2      	b.n	48f0 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    4b4a:	601d      	str	r5, [r3, #0]
		break;
    4b4c:	e6d0      	b.n	48f0 <cbvprintf+0x458>
			bps = "(nil)";
    4b4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 4c18 <cbvprintf+0x780>
    4b52:	4606      	mov	r6, r0
			bpe = bps + 5;
    4b54:	f10a 0805 	add.w	r8, sl, #5
    4b58:	e78e      	b.n	4a78 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    4b5a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    4b5c:	bf48      	it	mi
    4b5e:	3301      	addmi	r3, #1
    4b60:	e793      	b.n	4a8a <cbvprintf+0x5f2>
					OUTC(pad);
    4b62:	4618      	mov	r0, r3
    4b64:	9303      	str	r3, [sp, #12]
    4b66:	4659      	mov	r1, fp
    4b68:	9b02      	ldr	r3, [sp, #8]
    4b6a:	4798      	blx	r3
    4b6c:	2800      	cmp	r0, #0
    4b6e:	9b03      	ldr	r3, [sp, #12]
    4b70:	da04      	bge.n	4b7c <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    4b72:	b011      	add	sp, #68	; 0x44
    4b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    4b78:	2320      	movs	r3, #32
    4b7a:	444d      	add	r5, r9
    4b7c:	464a      	mov	r2, r9
				while (width-- > 0) {
    4b7e:	2a00      	cmp	r2, #0
    4b80:	eba5 0109 	sub.w	r1, r5, r9
    4b84:	f109 39ff 	add.w	r9, r9, #4294967295
    4b88:	dceb      	bgt.n	4b62 <cbvprintf+0x6ca>
    4b8a:	460d      	mov	r5, r1
		if (sign != 0) {
    4b8c:	b136      	cbz	r6, 4b9c <cbvprintf+0x704>
			OUTC(sign);
    4b8e:	9b02      	ldr	r3, [sp, #8]
    4b90:	4659      	mov	r1, fp
    4b92:	4630      	mov	r0, r6
    4b94:	4798      	blx	r3
    4b96:	2800      	cmp	r0, #0
    4b98:	dbeb      	blt.n	4b72 <cbvprintf+0x6da>
    4b9a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    4b9c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    4ba0:	06d9      	lsls	r1, r3, #27
    4ba2:	d401      	bmi.n	4ba8 <cbvprintf+0x710>
    4ba4:	071a      	lsls	r2, r3, #28
    4ba6:	d506      	bpl.n	4bb6 <cbvprintf+0x71e>
				OUTC('0');
    4ba8:	9b02      	ldr	r3, [sp, #8]
    4baa:	4659      	mov	r1, fp
    4bac:	2030      	movs	r0, #48	; 0x30
    4bae:	4798      	blx	r3
    4bb0:	2800      	cmp	r0, #0
    4bb2:	dbde      	blt.n	4b72 <cbvprintf+0x6da>
    4bb4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    4bb6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    4bba:	06db      	lsls	r3, r3, #27
    4bbc:	d507      	bpl.n	4bce <cbvprintf+0x736>
				OUTC(conv->specifier);
    4bbe:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    4bc2:	9b02      	ldr	r3, [sp, #8]
    4bc4:	4659      	mov	r1, fp
    4bc6:	4798      	blx	r3
    4bc8:	2800      	cmp	r0, #0
    4bca:	dbd2      	blt.n	4b72 <cbvprintf+0x6da>
    4bcc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    4bce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4bd0:	442e      	add	r6, r5
    4bd2:	1b73      	subs	r3, r6, r5
    4bd4:	2b00      	cmp	r3, #0
    4bd6:	dc16      	bgt.n	4c06 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    4bd8:	9802      	ldr	r0, [sp, #8]
    4bda:	4643      	mov	r3, r8
    4bdc:	4652      	mov	r2, sl
    4bde:	4659      	mov	r1, fp
    4be0:	f01c ff65 	bl	21aae <outs>
    4be4:	2800      	cmp	r0, #0
    4be6:	dbc4      	blt.n	4b72 <cbvprintf+0x6da>
    4be8:	4405      	add	r5, r0
		while (width > 0) {
    4bea:	44a9      	add	r9, r5
    4bec:	eba9 0305 	sub.w	r3, r9, r5
    4bf0:	2b00      	cmp	r3, #0
    4bf2:	f77f ae7d 	ble.w	48f0 <cbvprintf+0x458>
			OUTC(' ');
    4bf6:	9b02      	ldr	r3, [sp, #8]
    4bf8:	4659      	mov	r1, fp
    4bfa:	2020      	movs	r0, #32
    4bfc:	4798      	blx	r3
    4bfe:	2800      	cmp	r0, #0
    4c00:	dbb7      	blt.n	4b72 <cbvprintf+0x6da>
    4c02:	3501      	adds	r5, #1
			--width;
    4c04:	e7f2      	b.n	4bec <cbvprintf+0x754>
				OUTC('0');
    4c06:	9b02      	ldr	r3, [sp, #8]
    4c08:	4659      	mov	r1, fp
    4c0a:	2030      	movs	r0, #48	; 0x30
    4c0c:	4798      	blx	r3
    4c0e:	2800      	cmp	r0, #0
    4c10:	dbaf      	blt.n	4b72 <cbvprintf+0x6da>
    4c12:	3501      	adds	r5, #1
    4c14:	e7dd      	b.n	4bd2 <cbvprintf+0x73a>
    4c16:	bf00      	nop
    4c18:	0002ab16 	.word	0x0002ab16

00004c1c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    4c1c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    4c1e:	4910      	ldr	r1, [pc, #64]	; (4c60 <enable_logger+0x44>)
    4c20:	4810      	ldr	r0, [pc, #64]	; (4c64 <enable_logger+0x48>)
{
    4c22:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    4c24:	2200      	movs	r2, #0
    4c26:	f021 fedd 	bl	269e4 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4c2a:	4d0f      	ldr	r5, [pc, #60]	; (4c68 <enable_logger+0x4c>)
    4c2c:	490f      	ldr	r1, [pc, #60]	; (4c6c <enable_logger+0x50>)
    4c2e:	2200      	movs	r2, #0
    4c30:	2300      	movs	r3, #0
    4c32:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4c36:	2400      	movs	r4, #0
    4c38:	230e      	movs	r3, #14
    4c3a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    4c3e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4c42:	4b0b      	ldr	r3, [pc, #44]	; (4c70 <enable_logger+0x54>)
    4c44:	9400      	str	r4, [sp, #0]
    4c46:	f44f 7240 	mov.w	r2, #768	; 0x300
    4c4a:	4628      	mov	r0, r5
    4c4c:	f01b f85a 	bl	1fd04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    4c50:	4908      	ldr	r1, [pc, #32]	; (4c74 <enable_logger+0x58>)
    4c52:	4628      	mov	r0, r5
    4c54:	f021 fdd8 	bl	26808 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    4c58:	4620      	mov	r0, r4
    4c5a:	b009      	add	sp, #36	; 0x24
    4c5c:	bd30      	pop	{r4, r5, pc}
    4c5e:	bf00      	nop
    4c60:	00004c79 	.word	0x00004c79
    4c64:	2000a460 	.word	0x2000a460
    4c68:	2000a498 	.word	0x2000a498
    4c6c:	2000fe40 	.word	0x2000fe40
    4c70:	00004fd1 	.word	0x00004fd1
    4c74:	0002ab1c 	.word	0x0002ab1c

00004c78 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4c78:	4801      	ldr	r0, [pc, #4]	; (4c80 <log_process_thread_timer_expiry_fn+0x8>)
    4c7a:	f01a bfab 	b.w	1fbd4 <z_impl_k_sem_give>
    4c7e:	bf00      	nop
    4c80:	20009fa0 	.word	0x20009fa0

00004c84 <log_core_init>:
{
    4c84:	b508      	push	{r3, lr}
		log_msg_pool_init();
    4c86:	f000 fa67 	bl	5158 <log_msg_pool_init>
		log_list_init(&list);
    4c8a:	4809      	ldr	r0, [pc, #36]	; (4cb0 <log_core_init+0x2c>)
    4c8c:	f01c ff26 	bl	21adc <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    4c90:	2304      	movs	r3, #4
    4c92:	2228      	movs	r2, #40	; 0x28
    4c94:	4907      	ldr	r1, [pc, #28]	; (4cb4 <log_core_init+0x30>)
    4c96:	4808      	ldr	r0, [pc, #32]	; (4cb8 <log_core_init+0x34>)
    4c98:	f021 fbb7 	bl	2640a <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    4c9c:	4b07      	ldr	r3, [pc, #28]	; (4cbc <log_core_init+0x38>)
    4c9e:	4a08      	ldr	r2, [pc, #32]	; (4cc0 <log_core_init+0x3c>)
    4ca0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    4ca2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    4ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    4caa:	f000 bc9d 	b.w	55e8 <log_output_timestamp_freq_set>
    4cae:	bf00      	nop
    4cb0:	2000d4b4 	.word	0x2000d4b4
    4cb4:	200129f8 	.word	0x200129f8
    4cb8:	2000d4bc 	.word	0x2000d4bc
    4cbc:	20000258 	.word	0x20000258
    4cc0:	00021b1b 	.word	0x00021b1b

00004cc4 <dropped_notify>:
{
    4cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4cc6:	4b0f      	ldr	r3, [pc, #60]	; (4d04 <dropped_notify+0x40>)
    4cc8:	f3bf 8f5b 	dmb	ish
    4ccc:	2500      	movs	r5, #0
    4cce:	e853 7f00 	ldrex	r7, [r3]
    4cd2:	e843 5200 	strex	r2, r5, [r3]
    4cd6:	2a00      	cmp	r2, #0
    4cd8:	d1f9      	bne.n	4cce <dropped_notify+0xa>
    4cda:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    4cde:	4c0a      	ldr	r4, [pc, #40]	; (4d08 <dropped_notify+0x44>)
    4ce0:	4e0a      	ldr	r6, [pc, #40]	; (4d0c <dropped_notify+0x48>)
    4ce2:	1b36      	subs	r6, r6, r4
    4ce4:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    4ce6:	42b5      	cmp	r5, r6
    4ce8:	db00      	blt.n	4cec <dropped_notify+0x28>
}
    4cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    4cec:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    4cee:	795b      	ldrb	r3, [r3, #5]
    4cf0:	b12b      	cbz	r3, 4cfe <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    4cf2:	6823      	ldr	r3, [r4, #0]
    4cf4:	68db      	ldr	r3, [r3, #12]
    4cf6:	b113      	cbz	r3, 4cfe <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    4cf8:	4639      	mov	r1, r7
    4cfa:	4620      	mov	r0, r4
    4cfc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    4cfe:	3501      	adds	r5, #1
    4d00:	3410      	adds	r4, #16
    4d02:	e7f0      	b.n	4ce6 <dropped_notify+0x22>
    4d04:	2000d4ac 	.word	0x2000d4ac
    4d08:	00027130 	.word	0x00027130
    4d0c:	00027150 	.word	0x00027150

00004d10 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4d10:	4b06      	ldr	r3, [pc, #24]	; (4d2c <log_dropped+0x1c>)
    4d12:	f3bf 8f5b 	dmb	ish
    4d16:	e853 2f00 	ldrex	r2, [r3]
    4d1a:	3201      	adds	r2, #1
    4d1c:	e843 2100 	strex	r1, r2, [r3]
    4d20:	2900      	cmp	r1, #0
    4d22:	d1f8      	bne.n	4d16 <log_dropped+0x6>
    4d24:	f3bf 8f5b 	dmb	ish
}
    4d28:	4770      	bx	lr
    4d2a:	bf00      	nop
    4d2c:	2000d4ac 	.word	0x2000d4ac

00004d30 <log_source_name_get>:
    4d30:	4a04      	ldr	r2, [pc, #16]	; (4d44 <log_source_name_get+0x14>)
    4d32:	4b05      	ldr	r3, [pc, #20]	; (4d48 <log_source_name_get+0x18>)
    4d34:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    4d36:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    4d3a:	bf34      	ite	cc
    4d3c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    4d40:	2000      	movcs	r0, #0
}
    4d42:	4770      	bx	lr
    4d44:	00026fc8 	.word	0x00026fc8
    4d48:	00027130 	.word	0x00027130

00004d4c <log_backend_enable>:
	id += backend - log_backend_get(0);
    4d4c:	4a09      	ldr	r2, [pc, #36]	; (4d74 <log_backend_enable+0x28>)
	backend->cb->id = id;
    4d4e:	6843      	ldr	r3, [r0, #4]
    4d50:	1a80      	subs	r0, r0, r2
{
    4d52:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    4d54:	1100      	asrs	r0, r0, #4
	if (!backend_attached) {
    4d56:	4c08      	ldr	r4, [pc, #32]	; (4d78 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    4d58:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
    4d5a:	3001      	adds	r0, #1
	backend->cb->active = true;
    4d5c:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
    4d5e:	7118      	strb	r0, [r3, #4]
    4d60:	715a      	strb	r2, [r3, #5]
	if (!backend_attached) {
    4d62:	7823      	ldrb	r3, [r4, #0]
    4d64:	b913      	cbnz	r3, 4d6c <log_backend_enable+0x20>
    4d66:	4805      	ldr	r0, [pc, #20]	; (4d7c <log_backend_enable+0x30>)
    4d68:	f01a ff34 	bl	1fbd4 <z_impl_k_sem_give>
	backend_attached = true;
    4d6c:	2301      	movs	r3, #1
    4d6e:	7023      	strb	r3, [r4, #0]
}
    4d70:	bd10      	pop	{r4, pc}
    4d72:	bf00      	nop
    4d74:	00027130 	.word	0x00027130
    4d78:	2000ed26 	.word	0x2000ed26
    4d7c:	20009fa0 	.word	0x20009fa0

00004d80 <log_init>:
{
    4d80:	b570      	push	{r4, r5, r6, lr}
    4d82:	4b11      	ldr	r3, [pc, #68]	; (4dc8 <log_init+0x48>)
    4d84:	f3bf 8f5b 	dmb	ish
    4d88:	e853 5f00 	ldrex	r5, [r3]
    4d8c:	1c6a      	adds	r2, r5, #1
    4d8e:	e843 2100 	strex	r1, r2, [r3]
    4d92:	2900      	cmp	r1, #0
    4d94:	d1f8      	bne.n	4d88 <log_init+0x8>
    4d96:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    4d9a:	b92d      	cbnz	r5, 4da8 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    4d9c:	4c0b      	ldr	r4, [pc, #44]	; (4dcc <log_init+0x4c>)
    4d9e:	4e0c      	ldr	r6, [pc, #48]	; (4dd0 <log_init+0x50>)
    4da0:	1b36      	subs	r6, r6, r4
    4da2:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    4da4:	42b5      	cmp	r5, r6
    4da6:	db00      	blt.n	4daa <log_init+0x2a>
}
    4da8:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    4daa:	7b23      	ldrb	r3, [r4, #12]
    4dac:	b143      	cbz	r3, 4dc0 <log_init+0x40>
			if (backend->api->init != NULL) {
    4dae:	6823      	ldr	r3, [r4, #0]
    4db0:	695b      	ldr	r3, [r3, #20]
    4db2:	b103      	cbz	r3, 4db6 <log_init+0x36>
				backend->api->init();
    4db4:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    4db6:	2204      	movs	r2, #4
    4db8:	2100      	movs	r1, #0
    4dba:	4620      	mov	r0, r4
    4dbc:	f7ff ffc6 	bl	4d4c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    4dc0:	3501      	adds	r5, #1
    4dc2:	3410      	adds	r4, #16
    4dc4:	e7ee      	b.n	4da4 <log_init+0x24>
    4dc6:	bf00      	nop
    4dc8:	2000d4b0 	.word	0x2000d4b0
    4dcc:	00027130 	.word	0x00027130
    4dd0:	00027150 	.word	0x00027150

00004dd4 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    4dd4:	4b16      	ldr	r3, [pc, #88]	; (4e30 <log_strdup+0x5c>)
    4dd6:	4298      	cmp	r0, r3
{
    4dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4dda:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    4ddc:	d302      	bcc.n	4de4 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    4dde:	4b15      	ldr	r3, [pc, #84]	; (4e34 <log_strdup+0x60>)
    4de0:	4298      	cmp	r0, r3
    4de2:	d320      	bcc.n	4e26 <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    4de4:	4814      	ldr	r0, [pc, #80]	; (4e38 <log_strdup+0x64>)
    4de6:	2200      	movs	r2, #0
    4de8:	2300      	movs	r3, #0
    4dea:	a901      	add	r1, sp, #4
    4dec:	f01a fa24 	bl	1f238 <k_mem_slab_alloc>
	if (err != 0) {
    4df0:	4605      	mov	r5, r0
    4df2:	b9d8      	cbnz	r0, 4e2c <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4df4:	2201      	movs	r2, #1
    4df6:	9b01      	ldr	r3, [sp, #4]
    4df8:	f3bf 8f5b 	dmb	ish
    4dfc:	e853 1f00 	ldrex	r1, [r3]
    4e00:	e843 2000 	strex	r0, r2, [r3]
    4e04:	2800      	cmp	r0, #0
    4e06:	d1f9      	bne.n	4dfc <log_strdup+0x28>
    4e08:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    4e0c:	9801      	ldr	r0, [sp, #4]
    4e0e:	4621      	mov	r1, r4
    4e10:	221f      	movs	r2, #31
    4e12:	3004      	adds	r0, #4
    4e14:	f01e fe61 	bl	23ada <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    4e18:	9c01      	ldr	r4, [sp, #4]
    4e1a:	237e      	movs	r3, #126	; 0x7e
    4e1c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    4e20:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    4e24:	3404      	adds	r4, #4
}
    4e26:	4620      	mov	r0, r4
    4e28:	b003      	add	sp, #12
    4e2a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    4e2c:	4c03      	ldr	r4, [pc, #12]	; (4e3c <log_strdup+0x68>)
    4e2e:	e7fa      	b.n	4e26 <log_strdup+0x52>
    4e30:	00026cec 	.word	0x00026cec
    4e34:	0002d060 	.word	0x0002d060
    4e38:	2000d4bc 	.word	0x2000d4bc
    4e3c:	0002ab24 	.word	0x0002ab24

00004e40 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    4e40:	b148      	cbz	r0, 4e56 <log_is_strdup+0x16>
    4e42:	4b05      	ldr	r3, [pc, #20]	; (4e58 <log_is_strdup+0x18>)
    4e44:	4298      	cmp	r0, r3
    4e46:	d305      	bcc.n	4e54 <log_is_strdup+0x14>
    4e48:	33a0      	adds	r3, #160	; 0xa0
    4e4a:	4298      	cmp	r0, r3
    4e4c:	bf2c      	ite	cs
    4e4e:	2000      	movcs	r0, #0
    4e50:	2001      	movcc	r0, #1
    4e52:	4770      	bx	lr
    4e54:	2000      	movs	r0, #0
}
    4e56:	4770      	bx	lr
    4e58:	200129f8 	.word	0x200129f8

00004e5c <z_impl_log_process>:
{
    4e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    4e60:	4b4d      	ldr	r3, [pc, #308]	; (4f98 <z_impl_log_process+0x13c>)
    4e62:	781b      	ldrb	r3, [r3, #0]
{
    4e64:	b085      	sub	sp, #20
    4e66:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    4e68:	b903      	cbnz	r3, 4e6c <z_impl_log_process+0x10>
    4e6a:	b360      	cbz	r0, 4ec6 <z_impl_log_process+0x6a>
    4e6c:	f04f 0320 	mov.w	r3, #32
    4e70:	f3ef 8611 	mrs	r6, BASEPRI
    4e74:	f383 8811 	msr	BASEPRI, r3
    4e78:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    4e7c:	4847      	ldr	r0, [pc, #284]	; (4f9c <z_impl_log_process+0x140>)
    4e7e:	f01c fe3d 	bl	21afc <log_list_head_get>
    4e82:	4605      	mov	r5, r0
	__asm__ volatile(
    4e84:	f386 8811 	msr	BASEPRI, r6
    4e88:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    4e8c:	b178      	cbz	r0, 4eae <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4e8e:	f3bf 8f5b 	dmb	ish
    4e92:	4b43      	ldr	r3, [pc, #268]	; (4fa0 <z_impl_log_process+0x144>)
    4e94:	e853 2f00 	ldrex	r2, [r3]
    4e98:	3a01      	subs	r2, #1
    4e9a:	e843 2100 	strex	r1, r2, [r3]
    4e9e:	2900      	cmp	r1, #0
    4ea0:	d1f8      	bne.n	4e94 <z_impl_log_process+0x38>
    4ea2:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    4ea6:	b194      	cbz	r4, 4ece <z_impl_log_process+0x72>
	log_msg_put(msg);
    4ea8:	4628      	mov	r0, r5
    4eaa:	f01c ff40 	bl	21d2e <log_msg_put>
	if (!bypass && dropped_cnt) {
    4eae:	b924      	cbnz	r4, 4eba <z_impl_log_process+0x5e>
    4eb0:	4b3c      	ldr	r3, [pc, #240]	; (4fa4 <z_impl_log_process+0x148>)
    4eb2:	681b      	ldr	r3, [r3, #0]
    4eb4:	b10b      	cbz	r3, 4eba <z_impl_log_process+0x5e>
		dropped_notify();
    4eb6:	f7ff ff05 	bl	4cc4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    4eba:	4838      	ldr	r0, [pc, #224]	; (4f9c <z_impl_log_process+0x140>)
    4ebc:	f01c fe1c 	bl	21af8 <log_list_head_peek>
    4ec0:	1e04      	subs	r4, r0, #0
    4ec2:	bf18      	it	ne
    4ec4:	2401      	movne	r4, #1
}
    4ec6:	4620      	mov	r0, r4
    4ec8:	b005      	add	sp, #20
    4eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    4ece:	4b36      	ldr	r3, [pc, #216]	; (4fa8 <z_impl_log_process+0x14c>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    4ed0:	781b      	ldrb	r3, [r3, #0]
    4ed2:	b9e3      	cbnz	r3, 4f0e <z_impl_log_process+0xb2>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4ed4:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    4ed6:	07db      	lsls	r3, r3, #31
    4ed8:	d419      	bmi.n	4f0e <z_impl_log_process+0xb2>
	msg_str = log_msg_str_get(msg);
    4eda:	f01c ff3b 	bl	21d54 <log_msg_str_get>
    4ede:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    4ee0:	4628      	mov	r0, r5
    4ee2:	f01c ff02 	bl	21cea <log_msg_nargs_get>
    4ee6:	4601      	mov	r1, r0
    4ee8:	4638      	mov	r0, r7
    4eea:	f01c fe1a 	bl	21b22 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    4eee:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4fac <z_impl_log_process+0x150>
    4ef2:	4b2f      	ldr	r3, [pc, #188]	; (4fb0 <z_impl_log_process+0x154>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    4ef4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 4fb4 <z_impl_log_process+0x158>
    4ef8:	eba3 0308 	sub.w	r3, r3, r8
    4efc:	08db      	lsrs	r3, r3, #3
    4efe:	9303      	str	r3, [sp, #12]
    4f00:	4b2d      	ldr	r3, [pc, #180]	; (4fb8 <z_impl_log_process+0x15c>)
    4f02:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    4f06:	4606      	mov	r6, r0
    4f08:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    4f0c:	b936      	cbnz	r6, 4f1c <z_impl_log_process+0xc0>
    4f0e:	4e2b      	ldr	r6, [pc, #172]	; (4fbc <z_impl_log_process+0x160>)
    4f10:	4f2b      	ldr	r7, [pc, #172]	; (4fc0 <z_impl_log_process+0x164>)
    4f12:	1bbf      	subs	r7, r7, r6
    4f14:	113f      	asrs	r7, r7, #4
    4f16:	f04f 0800 	mov.w	r8, #0
    4f1a:	e03a      	b.n	4f92 <z_impl_log_process+0x136>
		idx = 31 - __builtin_clz(mask);
    4f1c:	fab6 f186 	clz	r1, r6
    4f20:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    4f24:	4649      	mov	r1, r9
    4f26:	4628      	mov	r0, r5
    4f28:	f01c fee2 	bl	21cf0 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    4f2c:	4b25      	ldr	r3, [pc, #148]	; (4fc4 <z_impl_log_process+0x168>)
    4f2e:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    4f30:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    4f32:	d302      	bcc.n	4f3a <z_impl_log_process+0xde>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    4f34:	4a24      	ldr	r2, [pc, #144]	; (4fc8 <z_impl_log_process+0x16c>)
    4f36:	4290      	cmp	r0, r2
    4f38:	d31a      	bcc.n	4f70 <z_impl_log_process+0x114>
    4f3a:	4608      	mov	r0, r1
    4f3c:	f7ff ff80 	bl	4e40 <log_is_strdup>
    4f40:	4602      	mov	r2, r0
    4f42:	b9a8      	cbnz	r0, 4f70 <z_impl_log_process+0x114>
    4f44:	4b21      	ldr	r3, [pc, #132]	; (4fcc <z_impl_log_process+0x170>)
    4f46:	4299      	cmp	r1, r3
    4f48:	d012      	beq.n	4f70 <z_impl_log_process+0x114>
	return msg->hdr.ids.source_id;
    4f4a:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    4f4c:	9903      	ldr	r1, [sp, #12]
    4f4e:	f3c3 1389 	ubfx	r3, r3, #6, #10
    4f52:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    4f54:	bf38      	it	cc
    4f56:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    4f5a:	ea4f 138a 	mov.w	r3, sl, lsl #6
    4f5e:	f043 0301 	orr.w	r3, r3, #1
    4f62:	f8ad 3000 	strh.w	r3, [sp]
    4f66:	4649      	mov	r1, r9
    4f68:	463b      	mov	r3, r7
    4f6a:	4658      	mov	r0, fp
    4f6c:	f01c fe33 	bl	21bd6 <log_3>
		mask &= ~BIT(idx);
    4f70:	2301      	movs	r3, #1
    4f72:	fa03 f109 	lsl.w	r1, r3, r9
    4f76:	ea26 0601 	bic.w	r6, r6, r1
    4f7a:	e7c7      	b.n	4f0c <z_impl_log_process+0xb0>
	return backend->cb->active;
    4f7c:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    4f7e:	795b      	ldrb	r3, [r3, #5]
    4f80:	b123      	cbz	r3, 4f8c <z_impl_log_process+0x130>
	backend->api->put(backend, msg);
    4f82:	6833      	ldr	r3, [r6, #0]
    4f84:	4629      	mov	r1, r5
    4f86:	681b      	ldr	r3, [r3, #0]
    4f88:	4630      	mov	r0, r6
    4f8a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    4f8c:	f108 0801 	add.w	r8, r8, #1
    4f90:	3610      	adds	r6, #16
    4f92:	45b8      	cmp	r8, r7
    4f94:	dbf2      	blt.n	4f7c <z_impl_log_process+0x120>
    4f96:	e787      	b.n	4ea8 <z_impl_log_process+0x4c>
    4f98:	2000ed26 	.word	0x2000ed26
    4f9c:	2000d4b4 	.word	0x2000d4b4
    4fa0:	2000d4a8 	.word	0x2000d4a8
    4fa4:	2000d4ac 	.word	0x2000d4ac
    4fa8:	2000ed27 	.word	0x2000ed27
    4fac:	00026fc8 	.word	0x00026fc8
    4fb0:	00027130 	.word	0x00027130
    4fb4:	0002ab3e 	.word	0x0002ab3e
    4fb8:	000270e8 	.word	0x000270e8
    4fbc:	00027130 	.word	0x00027130
    4fc0:	00027150 	.word	0x00027150
    4fc4:	00026cec 	.word	0x00026cec
    4fc8:	0002d060 	.word	0x0002d060
    4fcc:	0002ab24 	.word	0x0002ab24

00004fd0 <log_process_thread_func>:
{
    4fd0:	b510      	push	{r4, lr}
	log_init();
    4fd2:	f7ff fed5 	bl	4d80 <log_init>
	return z_impl_k_current_get();
    4fd6:	f01a fdf7 	bl	1fbc8 <z_impl_k_current_get>
	proc_tid = process_tid;
    4fda:	4b0c      	ldr	r3, [pc, #48]	; (500c <log_process_thread_func+0x3c>)
    4fdc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    4fde:	b130      	cbz	r0, 4fee <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    4fe0:	4b0b      	ldr	r3, [pc, #44]	; (5010 <log_process_thread_func+0x40>)
	    process_tid &&
    4fe2:	681b      	ldr	r3, [r3, #0]
    4fe4:	2b09      	cmp	r3, #9
    4fe6:	dd02      	ble.n	4fee <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    4fe8:	480a      	ldr	r0, [pc, #40]	; (5014 <log_process_thread_func+0x44>)
    4fea:	f01a fdf3 	bl	1fbd4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    4fee:	4c09      	ldr	r4, [pc, #36]	; (5014 <log_process_thread_func+0x44>)
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    4ff0:	2000      	movs	r0, #0
    4ff2:	f7ff ff33 	bl	4e5c <z_impl_log_process>
		if (log_process(false) == false) {
    4ff6:	2800      	cmp	r0, #0
    4ff8:	d1fa      	bne.n	4ff0 <log_process_thread_func+0x20>
    4ffa:	f04f 32ff 	mov.w	r2, #4294967295
    4ffe:	f04f 33ff 	mov.w	r3, #4294967295
    5002:	4620      	mov	r0, r4
    5004:	f01a fe0c 	bl	1fc20 <z_impl_k_sem_take>
    5008:	e7f2      	b.n	4ff0 <log_process_thread_func+0x20>
    500a:	bf00      	nop
    500c:	2000d4d8 	.word	0x2000d4d8
    5010:	2000d4a8 	.word	0x2000d4a8
    5014:	20009fa0 	.word	0x20009fa0

00005018 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    5018:	4b29      	ldr	r3, [pc, #164]	; (50c0 <msg_finalize+0xa8>)
{
    501a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    501c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    501e:	8141      	strh	r1, [r0, #10]
{
    5020:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    5022:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5024:	4d27      	ldr	r5, [pc, #156]	; (50c4 <msg_finalize+0xac>)
    5026:	60e0      	str	r0, [r4, #12]
    5028:	f3bf 8f5b 	dmb	ish
    502c:	e855 3f00 	ldrex	r3, [r5]
    5030:	3301      	adds	r3, #1
    5032:	e845 3200 	strex	r2, r3, [r5]
    5036:	2a00      	cmp	r2, #0
    5038:	d1f8      	bne.n	502c <msg_finalize+0x14>
    503a:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    503e:	f04f 0320 	mov.w	r3, #32
    5042:	f3ef 8611 	mrs	r6, BASEPRI
    5046:	f383 8811 	msr	BASEPRI, r3
    504a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    504e:	481e      	ldr	r0, [pc, #120]	; (50c8 <msg_finalize+0xb0>)
    5050:	4621      	mov	r1, r4
    5052:	f01c fd47 	bl	21ae4 <log_list_add_tail>
	__asm__ volatile(
    5056:	f386 8811 	msr	BASEPRI, r6
    505a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    505e:	4b1b      	ldr	r3, [pc, #108]	; (50cc <msg_finalize+0xb4>)
    5060:	781b      	ldrb	r3, [r3, #0]
    5062:	b183      	cbz	r3, 5086 <msg_finalize+0x6e>
	__asm__ volatile(
    5064:	f04f 0320 	mov.w	r3, #32
    5068:	f3ef 8411 	mrs	r4, BASEPRI
    506c:	f383 8811 	msr	BASEPRI, r3
    5070:	f3bf 8f6f 	isb	sy
    5074:	2000      	movs	r0, #0
    5076:	f7ff fef1 	bl	4e5c <z_impl_log_process>
	__asm__ volatile(
    507a:	f384 8811 	msr	BASEPRI, r4
    507e:	f3bf 8f6f 	isb	sy
}
    5082:	b002      	add	sp, #8
    5084:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    5086:	4a12      	ldr	r2, [pc, #72]	; (50d0 <msg_finalize+0xb8>)
    5088:	682b      	ldr	r3, [r5, #0]
    508a:	6812      	ldr	r2, [r2, #0]
    508c:	2a00      	cmp	r2, #0
    508e:	d0f8      	beq.n	5082 <msg_finalize+0x6a>
    5090:	2b01      	cmp	r3, #1
    5092:	d10a      	bne.n	50aa <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    5094:	2200      	movs	r2, #0
    5096:	2300      	movs	r3, #0
    5098:	e9cd 2300 	strd	r2, r3, [sp]
    509c:	480d      	ldr	r0, [pc, #52]	; (50d4 <msg_finalize+0xbc>)
    509e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    50a2:	2300      	movs	r3, #0
    50a4:	f01b f8be 	bl	20224 <z_impl_k_timer_start>
    50a8:	e7eb      	b.n	5082 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    50aa:	2b0a      	cmp	r3, #10
    50ac:	d1e9      	bne.n	5082 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    50ae:	4809      	ldr	r0, [pc, #36]	; (50d4 <msg_finalize+0xbc>)
    50b0:	f021 fca4 	bl	269fc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    50b4:	4808      	ldr	r0, [pc, #32]	; (50d8 <msg_finalize+0xc0>)
}
    50b6:	b002      	add	sp, #8
    50b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50bc:	f01a bd8a 	b.w	1fbd4 <z_impl_k_sem_give>
    50c0:	20000258 	.word	0x20000258
    50c4:	2000d4a8 	.word	0x2000d4a8
    50c8:	2000d4b4 	.word	0x2000d4b4
    50cc:	2000ed27 	.word	0x2000ed27
    50d0:	2000d4d8 	.word	0x2000d4d8
    50d4:	2000a460 	.word	0x2000a460
    50d8:	20009fa0 	.word	0x20009fa0

000050dc <z_impl_log_panic>:
{
    50dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    50de:	4f0e      	ldr	r7, [pc, #56]	; (5118 <z_impl_log_panic+0x3c>)
    50e0:	783d      	ldrb	r5, [r7, #0]
    50e2:	b975      	cbnz	r5, 5102 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    50e4:	4c0d      	ldr	r4, [pc, #52]	; (511c <z_impl_log_panic+0x40>)
    50e6:	4e0e      	ldr	r6, [pc, #56]	; (5120 <z_impl_log_panic+0x44>)
	log_init();
    50e8:	f7ff fe4a 	bl	4d80 <log_init>
    50ec:	1b36      	subs	r6, r6, r4
    50ee:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    50f0:	42b5      	cmp	r5, r6
    50f2:	db07      	blt.n	5104 <z_impl_log_panic+0x28>
    50f4:	2000      	movs	r0, #0
    50f6:	f7ff feb1 	bl	4e5c <z_impl_log_process>
		while (log_process(false) == true) {
    50fa:	2800      	cmp	r0, #0
    50fc:	d1fa      	bne.n	50f4 <z_impl_log_panic+0x18>
	panic_mode = true;
    50fe:	2301      	movs	r3, #1
    5100:	703b      	strb	r3, [r7, #0]
}
    5102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    5104:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    5106:	795b      	ldrb	r3, [r3, #5]
    5108:	b11b      	cbz	r3, 5112 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    510a:	6823      	ldr	r3, [r4, #0]
    510c:	4620      	mov	r0, r4
    510e:	691b      	ldr	r3, [r3, #16]
    5110:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    5112:	3501      	adds	r5, #1
    5114:	3410      	adds	r4, #16
    5116:	e7eb      	b.n	50f0 <z_impl_log_panic+0x14>
    5118:	2000ed27 	.word	0x2000ed27
    511c:	00027130 	.word	0x00027130
    5120:	00027150 	.word	0x00027150

00005124 <log_free>:
{
    5124:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    5126:	3804      	subs	r0, #4
    5128:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    512a:	f3bf 8f5b 	dmb	ish
    512e:	e850 3f00 	ldrex	r3, [r0]
    5132:	1e5a      	subs	r2, r3, #1
    5134:	e840 2100 	strex	r1, r2, [r0]
    5138:	2900      	cmp	r1, #0
    513a:	d1f8      	bne.n	512e <log_free+0xa>
    513c:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    5140:	2b01      	cmp	r3, #1
    5142:	d103      	bne.n	514c <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    5144:	4803      	ldr	r0, [pc, #12]	; (5154 <log_free+0x30>)
    5146:	a901      	add	r1, sp, #4
    5148:	f01a f8a6 	bl	1f298 <k_mem_slab_free>
}
    514c:	b003      	add	sp, #12
    514e:	f85d fb04 	ldr.w	pc, [sp], #4
    5152:	bf00      	nop
    5154:	2000d4bc 	.word	0x2000d4bc

00005158 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    5158:	2320      	movs	r3, #32
    515a:	4902      	ldr	r1, [pc, #8]	; (5164 <log_msg_pool_init+0xc>)
    515c:	4802      	ldr	r0, [pc, #8]	; (5168 <log_msg_pool_init+0x10>)
    515e:	461a      	mov	r2, r3
    5160:	f021 b953 	b.w	2640a <k_mem_slab_init>
    5164:	20012a98 	.word	0x20012a98
    5168:	2000d4dc 	.word	0x2000d4dc

0000516c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    516c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    516e:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    5170:	4d09      	ldr	r5, [pc, #36]	; (5198 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    5172:	9301      	str	r3, [sp, #4]
    5174:	2001      	movs	r0, #1
    5176:	f7ff fe71 	bl	4e5c <z_impl_log_process>
    517a:	4604      	mov	r4, r0
			log_dropped();
    517c:	f7ff fdc8 	bl	4d10 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    5180:	2200      	movs	r2, #0
    5182:	2300      	movs	r3, #0
    5184:	a901      	add	r1, sp, #4
    5186:	4628      	mov	r0, r5
    5188:	f01a f856 	bl	1f238 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    518c:	b108      	cbz	r0, 5192 <log_msg_no_space_handle+0x26>
    518e:	2c00      	cmp	r4, #0
    5190:	d1f0      	bne.n	5174 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    5192:	9801      	ldr	r0, [sp, #4]
    5194:	b003      	add	sp, #12
    5196:	bd30      	pop	{r4, r5, pc}
    5198:	2000d4dc 	.word	0x2000d4dc

0000519c <log_msg_chunk_alloc>:
{
    519c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    519e:	2300      	movs	r3, #0
    51a0:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    51a2:	4807      	ldr	r0, [pc, #28]	; (51c0 <log_msg_chunk_alloc+0x24>)
    51a4:	2200      	movs	r2, #0
    51a6:	2300      	movs	r3, #0
    51a8:	a901      	add	r1, sp, #4
    51aa:	f01a f845 	bl	1f238 <k_mem_slab_alloc>
	if (err != 0) {
    51ae:	b110      	cbz	r0, 51b6 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    51b0:	f7ff ffdc 	bl	516c <log_msg_no_space_handle>
    51b4:	9001      	str	r0, [sp, #4]
}
    51b6:	9801      	ldr	r0, [sp, #4]
    51b8:	b003      	add	sp, #12
    51ba:	f85d fb04 	ldr.w	pc, [sp], #4
    51be:	bf00      	nop
    51c0:	2000d4dc 	.word	0x2000d4dc

000051c4 <msg_free>:
{
    51c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    51c6:	7a03      	ldrb	r3, [r0, #8]
    51c8:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    51ca:	07dc      	lsls	r4, r3, #31
{
    51cc:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    51ce:	d41e      	bmi.n	520e <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    51d0:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    51d2:	092d      	lsrs	r5, r5, #4
    51d4:	d01b      	beq.n	520e <msg_free+0x4a>
		uint32_t smask = 0;
    51d6:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    51d8:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    51da:	9801      	ldr	r0, [sp, #4]
    51dc:	4631      	mov	r1, r6
    51de:	f01c fd87 	bl	21cf0 <log_msg_arg_get>
    51e2:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    51e4:	f7ff fe2c 	bl	4e40 <log_is_strdup>
    51e8:	b170      	cbz	r0, 5208 <msg_free+0x44>
				if (smask == 0) {
    51ea:	b934      	cbnz	r4, 51fa <msg_free+0x36>
					smask = z_log_get_s_mask(
    51ec:	9b01      	ldr	r3, [sp, #4]
    51ee:	4629      	mov	r1, r5
    51f0:	6918      	ldr	r0, [r3, #16]
    51f2:	f01c fc96 	bl	21b22 <z_log_get_s_mask>
					if (smask == 0) {
    51f6:	4604      	mov	r4, r0
    51f8:	b148      	cbz	r0, 520e <msg_free+0x4a>
				if (smask & BIT(i)) {
    51fa:	fa24 f306 	lsr.w	r3, r4, r6
    51fe:	07d9      	lsls	r1, r3, #31
    5200:	d502      	bpl.n	5208 <msg_free+0x44>
					log_free(buf);
    5202:	4638      	mov	r0, r7
    5204:	f7ff ff8e 	bl	5124 <log_free>
		for (i = 0; i < nargs; i++) {
    5208:	3601      	adds	r6, #1
    520a:	42ae      	cmp	r6, r5
    520c:	d3e5      	bcc.n	51da <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    520e:	9b01      	ldr	r3, [sp, #4]
    5210:	7a1a      	ldrb	r2, [r3, #8]
    5212:	0792      	lsls	r2, r2, #30
    5214:	d504      	bpl.n	5220 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    5216:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5218:	4c08      	ldr	r4, [pc, #32]	; (523c <msg_free+0x78>)
    521a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    521c:	9b03      	ldr	r3, [sp, #12]
    521e:	b92b      	cbnz	r3, 522c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    5220:	4806      	ldr	r0, [pc, #24]	; (523c <msg_free+0x78>)
    5222:	a901      	add	r1, sp, #4
    5224:	f01a f838 	bl	1f298 <k_mem_slab_free>
}
    5228:	b005      	add	sp, #20
    522a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    522c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    522e:	a903      	add	r1, sp, #12
    5230:	4620      	mov	r0, r4
    5232:	f01a f831 	bl	1f298 <k_mem_slab_free>
		cont = next;
    5236:	9503      	str	r5, [sp, #12]
    5238:	e7f0      	b.n	521c <msg_free+0x58>
    523a:	bf00      	nop
    523c:	2000d4dc 	.word	0x2000d4dc

00005240 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    5240:	b40e      	push	{r1, r2, r3}
    5242:	b503      	push	{r0, r1, lr}
    5244:	ab03      	add	r3, sp, #12
    5246:	4601      	mov	r1, r0
    5248:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    524c:	4804      	ldr	r0, [pc, #16]	; (5260 <print_formatted+0x20>)
	va_start(args, fmt);
    524e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    5250:	f7ff f922 	bl	4498 <cbvprintf>
	va_end(args);

	return length;
}
    5254:	b002      	add	sp, #8
    5256:	f85d eb04 	ldr.w	lr, [sp], #4
    525a:	b003      	add	sp, #12
    525c:	4770      	bx	lr
    525e:	bf00      	nop
    5260:	0002210d 	.word	0x0002210d

00005264 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    5264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5268:	461d      	mov	r5, r3
    526a:	9b08      	ldr	r3, [sp, #32]
    526c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    526e:	06da      	lsls	r2, r3, #27
{
    5270:	4604      	mov	r4, r0
    5272:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5274:	d405      	bmi.n	5282 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5276:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    5278:	bf4c      	ite	mi
    527a:	492a      	ldrmi	r1, [pc, #168]	; (5324 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    527c:	492a      	ldrpl	r1, [pc, #168]	; (5328 <hexdump_line_print+0xc4>)
    527e:	f7ff ffdf 	bl	5240 <print_formatted>
	newline_print(log_output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(log_output, " ");
    5282:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 532c <hexdump_line_print+0xc8>
{
    5286:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    528a:	45a8      	cmp	r8, r5
    528c:	db2a      	blt.n	52e4 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    528e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5330 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    5292:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 5334 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    5296:	f8df a094 	ldr.w	sl, [pc, #148]	; 532c <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    529a:	2500      	movs	r5, #0
		if (i < length) {
    529c:	42bd      	cmp	r5, r7
    529e:	d22f      	bcs.n	5300 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    52a0:	5d72      	ldrb	r2, [r6, r5]
    52a2:	4649      	mov	r1, r9
    52a4:	4620      	mov	r0, r4
    52a6:	f7ff ffcb 	bl	5240 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    52aa:	3501      	adds	r5, #1
    52ac:	2d10      	cmp	r5, #16
    52ae:	d120      	bne.n	52f2 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(log_output, "|");
    52b0:	4921      	ldr	r1, [pc, #132]	; (5338 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(log_output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    52b2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 532c <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    52b6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 533c <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    52ba:	4620      	mov	r0, r4
    52bc:	f7ff ffc0 	bl	5240 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    52c0:	2500      	movs	r5, #0
		if (i < length) {
    52c2:	42af      	cmp	r7, r5
    52c4:	d928      	bls.n	5318 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    52c6:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    52c8:	f1a2 0320 	sub.w	r3, r2, #32
    52cc:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(log_output, "%c",
    52ce:	bf28      	it	cs
    52d0:	222e      	movcs	r2, #46	; 0x2e
    52d2:	4649      	mov	r1, r9
    52d4:	4620      	mov	r0, r4
    52d6:	f7ff ffb3 	bl	5240 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    52da:	3501      	adds	r5, #1
    52dc:	2d10      	cmp	r5, #16
    52de:	d114      	bne.n	530a <hexdump_line_print+0xa6>
		}
	}
}
    52e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    52e4:	4649      	mov	r1, r9
    52e6:	4620      	mov	r0, r4
    52e8:	f7ff ffaa 	bl	5240 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    52ec:	f108 0801 	add.w	r8, r8, #1
    52f0:	e7cb      	b.n	528a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    52f2:	076a      	lsls	r2, r5, #29
    52f4:	d1d2      	bne.n	529c <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    52f6:	4651      	mov	r1, sl
    52f8:	4620      	mov	r0, r4
    52fa:	f7ff ffa1 	bl	5240 <print_formatted>
    52fe:	e7cd      	b.n	529c <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    5300:	4641      	mov	r1, r8
    5302:	4620      	mov	r0, r4
    5304:	f7ff ff9c 	bl	5240 <print_formatted>
    5308:	e7cf      	b.n	52aa <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    530a:	076b      	lsls	r3, r5, #29
    530c:	d1d9      	bne.n	52c2 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    530e:	4641      	mov	r1, r8
    5310:	4620      	mov	r0, r4
    5312:	f7ff ff95 	bl	5240 <print_formatted>
    5316:	e7d4      	b.n	52c2 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    5318:	4641      	mov	r1, r8
    531a:	4620      	mov	r0, r4
    531c:	f7ff ff90 	bl	5240 <print_formatted>
    5320:	e7db      	b.n	52da <hexdump_line_print+0x76>
    5322:	bf00      	nop
    5324:	00028b53 	.word	0x00028b53
    5328:	00028e3f 	.word	0x00028e3f
    532c:	0002a69c 	.word	0x0002a69c
    5330:	0002ab87 	.word	0x0002ab87
    5334:	0002ab81 	.word	0x0002ab81
    5338:	0002ab8b 	.word	0x0002ab8b
    533c:	0002ab8d 	.word	0x0002ab8d

00005340 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    5340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5344:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    5346:	f011 0402 	ands.w	r4, r1, #2
{
    534a:	4690      	mov	r8, r2
    534c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    5350:	4606      	mov	r6, r0
    5352:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5354:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    5358:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    535c:	d006      	beq.n	536c <prefix_print+0x2c>
	if (!format) {
    535e:	f011 0f44 	tst.w	r1, #68	; 0x44
    5362:	d136      	bne.n	53d2 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    5364:	4932      	ldr	r1, [pc, #200]	; (5430 <prefix_print+0xf0>)
    5366:	f7ff ff6b 	bl	5240 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    536a:	4604      	mov	r4, r0
	if (color) {
    536c:	f1b9 0f00 	cmp.w	r9, #0
    5370:	d00a      	beq.n	5388 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    5372:	4b30      	ldr	r3, [pc, #192]	; (5434 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    5374:	4930      	ldr	r1, [pc, #192]	; (5438 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    5376:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    537a:	4b30      	ldr	r3, [pc, #192]	; (543c <prefix_print+0xfc>)
    537c:	4630      	mov	r0, r6
    537e:	2a00      	cmp	r2, #0
    5380:	bf08      	it	eq
    5382:	461a      	moveq	r2, r3
    5384:	f7ff ff5c 	bl	5240 <print_formatted>
	if (level_on) {
    5388:	b13d      	cbz	r5, 539a <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    538a:	4b2d      	ldr	r3, [pc, #180]	; (5440 <prefix_print+0x100>)
    538c:	492d      	ldr	r1, [pc, #180]	; (5444 <prefix_print+0x104>)
    538e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    5392:	4630      	mov	r0, r6
    5394:	f7ff ff54 	bl	5240 <print_formatted>
    5398:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    539a:	f1b8 0f00 	cmp.w	r8, #0
    539e:	d044      	beq.n	542a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    53a0:	2301      	movs	r3, #1
    53a2:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    53a6:	4b28      	ldr	r3, [pc, #160]	; (5448 <prefix_print+0x108>)
    53a8:	f017 0f10 	tst.w	r7, #16
    53ac:	4f27      	ldr	r7, [pc, #156]	; (544c <prefix_print+0x10c>)
    53ae:	bf18      	it	ne
    53b0:	461f      	movne	r7, r3
    53b2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    53b6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    53ba:	f7ff fcb9 	bl	4d30 <log_source_name_get>
    53be:	4639      	mov	r1, r7
    53c0:	4602      	mov	r2, r0
    53c2:	4630      	mov	r0, r6
    53c4:	f7ff ff3c 	bl	5240 <print_formatted>
    53c8:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    53ca:	4420      	add	r0, r4
    53cc:	b005      	add	sp, #20
    53ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    53d2:	4b1f      	ldr	r3, [pc, #124]	; (5450 <prefix_print+0x110>)
    53d4:	6819      	ldr	r1, [r3, #0]
    53d6:	b331      	cbz	r1, 5426 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    53d8:	4b1e      	ldr	r3, [pc, #120]	; (5454 <prefix_print+0x114>)
    53da:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    53de:	681b      	ldr	r3, [r3, #0]
    53e0:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    53e4:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    53e8:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    53ec:	fbb4 f2fc 	udiv	r2, r4, ip
    53f0:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    53f4:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    53f8:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    53fc:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5400:	fbb4 faf1 	udiv	sl, r4, r1
    5404:	fb01 441a 	mls	r4, r1, sl, r4
    5408:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    540c:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5410:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    5414:	e9cd a101 	strd	sl, r1, [sp, #4]
    5418:	fb0e c113 	mls	r1, lr, r3, ip
    541c:	9100      	str	r1, [sp, #0]
    541e:	490e      	ldr	r1, [pc, #56]	; (5458 <prefix_print+0x118>)
    5420:	f7ff ff0e 	bl	5240 <print_formatted>
    5424:	e7a1      	b.n	536a <prefix_print+0x2a>
		length = 0;
    5426:	4608      	mov	r0, r1
    5428:	e79f      	b.n	536a <prefix_print+0x2a>
	total += print_formatted(log_output,
    542a:	4f08      	ldr	r7, [pc, #32]	; (544c <prefix_print+0x10c>)
    542c:	e7c1      	b.n	53b2 <prefix_print+0x72>
    542e:	bf00      	nop
    5430:	0002ab9e 	.word	0x0002ab9e
    5434:	00027370 	.word	0x00027370
    5438:	0002bbea 	.word	0x0002bbea
    543c:	0002ab90 	.word	0x0002ab90
    5440:	00027384 	.word	0x00027384
    5444:	0002abc3 	.word	0x0002abc3
    5448:	0002ab9a 	.word	0x0002ab9a
    544c:	0002ab95 	.word	0x0002ab95
    5450:	2000d4f8 	.word	0x2000d4f8
    5454:	2000d4fc 	.word	0x2000d4fc
    5458:	0002aba7 	.word	0x0002aba7

0000545c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    545c:	b538      	push	{r3, r4, r5, lr}
    545e:	460c      	mov	r4, r1
	if (color) {
    5460:	07e1      	lsls	r1, r4, #31
{
    5462:	4605      	mov	r5, r0
	if (color) {
    5464:	d503      	bpl.n	546e <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    5466:	4a08      	ldr	r2, [pc, #32]	; (5488 <postfix_print+0x2c>)
    5468:	4908      	ldr	r1, [pc, #32]	; (548c <postfix_print+0x30>)
    546a:	f7ff fee9 	bl	5240 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    546e:	06e2      	lsls	r2, r4, #27
    5470:	d408      	bmi.n	5484 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5472:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    5474:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    5476:	bf4c      	ite	mi
    5478:	4905      	ldrmi	r1, [pc, #20]	; (5490 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    547a:	4906      	ldrpl	r1, [pc, #24]	; (5494 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    547c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    5480:	f7ff bede 	b.w	5240 <print_formatted>
}
    5484:	bd38      	pop	{r3, r4, r5, pc}
    5486:	bf00      	nop
    5488:	0002ab90 	.word	0x0002ab90
    548c:	0002bbea 	.word	0x0002bbea
    5490:	00028b53 	.word	0x00028b53
    5494:	00028e3f 	.word	0x00028e3f

00005498 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    5498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    549c:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    549e:	f013 0807 	ands.w	r8, r3, #7
{
    54a2:	b08a      	sub	sp, #40	; 0x28
    54a4:	4605      	mov	r5, r0
    54a6:	460e      	mov	r6, r1
    54a8:	4617      	mov	r7, r2
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    54aa:	d022      	beq.n	54f2 <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    54ac:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    54ae:	8949      	ldrh	r1, [r1, #10]
    54b0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    54b4:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    54b8:	43d2      	mvns	r2, r2
    54ba:	e9cd 8300 	strd	r8, r3, [sp]
    54be:	9102      	str	r1, [sp, #8]
    54c0:	68f3      	ldr	r3, [r6, #12]
    54c2:	f002 0201 	and.w	r2, r2, #1
    54c6:	4639      	mov	r1, r7
    54c8:	f7ff ff3a 	bl	5340 <prefix_print>
    54cc:	4681      	mov	r9, r0
    54ce:	7a34      	ldrb	r4, [r6, #8]
    54d0:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    54d2:	f014 0401 	ands.w	r4, r4, #1
    54d6:	d00e      	beq.n	54f6 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    54d8:	4629      	mov	r1, r5
    54da:	4630      	mov	r0, r6
    54dc:	f01c fcac 	bl	21e38 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    54e0:	f1b8 0f00 	cmp.w	r8, #0
    54e4:	d02b      	beq.n	553e <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    54e6:	4642      	mov	r2, r8
    54e8:	4639      	mov	r1, r7
    54ea:	4628      	mov	r0, r5
    54ec:	f7ff ffb6 	bl	545c <postfix_print>
    54f0:	e025      	b.n	553e <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    54f2:	46c1      	mov	r9, r8
    54f4:	e7eb      	b.n	54ce <log_output_msg_process+0x36>
	} else if (raw_string) {
    54f6:	f1b8 0f00 	cmp.w	r8, #0
    54fa:	d126      	bne.n	554a <log_output_msg_process+0xb2>
	size_t offset = 0;
    54fc:	4627      	mov	r7, r4
		length = log_output->size;
    54fe:	68eb      	ldr	r3, [r5, #12]
    5500:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    5502:	aa06      	add	r2, sp, #24
    5504:	463b      	mov	r3, r7
    5506:	68a9      	ldr	r1, [r5, #8]
    5508:	4630      	mov	r0, r6
    550a:	f01c fc81 	bl	21e10 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    550e:	9a06      	ldr	r2, [sp, #24]
    5510:	686b      	ldr	r3, [r5, #4]
    5512:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    5514:	b13a      	cbz	r2, 5526 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    5516:	68ab      	ldr	r3, [r5, #8]
    5518:	4413      	add	r3, r2
    551a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    551e:	f1a4 030a 	sub.w	r3, r4, #10
    5522:	425c      	negs	r4, r3
    5524:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    5526:	4628      	mov	r0, r5
    5528:	f01c fde3 	bl	220f2 <log_output_flush>
		offset += length;
    552c:	9b06      	ldr	r3, [sp, #24]
    552e:	441f      	add	r7, r3
	} while (length > 0);
    5530:	2b00      	cmp	r3, #0
    5532:	d1e4      	bne.n	54fe <log_output_msg_process+0x66>
	if (eol) {
    5534:	b11c      	cbz	r4, 553e <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    5536:	4914      	ldr	r1, [pc, #80]	; (5588 <log_output_msg_process+0xf0>)
    5538:	4628      	mov	r0, r5
    553a:	f7ff fe81 	bl	5240 <print_formatted>
	}

	log_output_flush(log_output);
    553e:	4628      	mov	r0, r5
}
    5540:	b00a      	add	sp, #40	; 0x28
    5542:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
    5546:	f01c bdd4 	b.w	220f2 <log_output_flush>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    554a:	4630      	mov	r0, r6
    554c:	f01c fc02 	bl	21d54 <log_msg_str_get>
    5550:	490e      	ldr	r1, [pc, #56]	; (558c <log_output_msg_process+0xf4>)
    5552:	4602      	mov	r2, r0
    5554:	4628      	mov	r0, r5
    5556:	f7ff fe73 	bl	5240 <print_formatted>
		length = sizeof(buf);
    555a:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    555e:	aa05      	add	r2, sp, #20
    5560:	4623      	mov	r3, r4
    5562:	a906      	add	r1, sp, #24
    5564:	4630      	mov	r0, r6
		length = sizeof(buf);
    5566:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    556a:	f01c fc51 	bl	21e10 <log_msg_hexdump_data_get>
		if (length) {
    556e:	9a05      	ldr	r2, [sp, #20]
    5570:	2a00      	cmp	r2, #0
    5572:	d0b8      	beq.n	54e6 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    5574:	464b      	mov	r3, r9
    5576:	9700      	str	r7, [sp, #0]
    5578:	a906      	add	r1, sp, #24
    557a:	4628      	mov	r0, r5
    557c:	f7ff fe72 	bl	5264 <hexdump_line_print>
			offset += length;
    5580:	9b05      	ldr	r3, [sp, #20]
    5582:	441c      	add	r4, r3
		length = sizeof(buf);
    5584:	e7eb      	b.n	555e <log_output_msg_process+0xc6>
    5586:	bf00      	nop
    5588:	0002abc9 	.word	0x0002abc9
    558c:	0002bbea 	.word	0x0002bbea

00005590 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    5590:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5592:	f242 730f 	movw	r3, #9999	; 0x270f
    5596:	428b      	cmp	r3, r1
    5598:	bf28      	it	cs
    559a:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    559c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    559e:	4a0f      	ldr	r2, [pc, #60]	; (55dc <log_output_dropped_process+0x4c>)
{
    55a0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    55a2:	2105      	movs	r1, #5
    55a4:	4668      	mov	r0, sp
    55a6:	f01b fe82 	bl	212ae <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    55aa:	6863      	ldr	r3, [r4, #4]
    55ac:	490c      	ldr	r1, [pc, #48]	; (55e0 <log_output_dropped_process+0x50>)
    55ae:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    55b0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    55b2:	220b      	movs	r2, #11
    55b4:	4628      	mov	r0, r5
    55b6:	f01c fc32 	bl	21e1e <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    55ba:	6863      	ldr	r3, [r4, #4]
    55bc:	4632      	mov	r2, r6
    55be:	4669      	mov	r1, sp
    55c0:	4628      	mov	r0, r5
    55c2:	685b      	ldr	r3, [r3, #4]
    55c4:	f01c fc2b 	bl	21e1e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    55c8:	6863      	ldr	r3, [r4, #4]
    55ca:	4906      	ldr	r1, [pc, #24]	; (55e4 <log_output_dropped_process+0x54>)
    55cc:	685b      	ldr	r3, [r3, #4]
    55ce:	221b      	movs	r2, #27
    55d0:	4628      	mov	r0, r5
    55d2:	f01c fc24 	bl	21e1e <buffer_write>
		     log_output->control_block->ctx);
}
    55d6:	b002      	add	sp, #8
    55d8:	bd70      	pop	{r4, r5, r6, pc}
    55da:	bf00      	nop
    55dc:	0002b6dd 	.word	0x0002b6dd
    55e0:	0002ac07 	.word	0x0002ac07
    55e4:	0002abeb 	.word	0x0002abeb

000055e8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    55e8:	4a08      	ldr	r2, [pc, #32]	; (560c <log_output_timestamp_freq_set+0x24>)
{
    55ea:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    55ec:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    55ee:	4c08      	ldr	r4, [pc, #32]	; (5610 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    55f0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    55f2:	2100      	movs	r1, #0
    55f4:	42a0      	cmp	r0, r4
    55f6:	d804      	bhi.n	5602 <log_output_timestamp_freq_set+0x1a>
    55f8:	b101      	cbz	r1, 55fc <log_output_timestamp_freq_set+0x14>
    55fa:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    55fc:	4b05      	ldr	r3, [pc, #20]	; (5614 <log_output_timestamp_freq_set+0x2c>)
    55fe:	6018      	str	r0, [r3, #0]
}
    5600:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    5602:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5604:	005b      	lsls	r3, r3, #1
    5606:	2101      	movs	r1, #1
    5608:	e7f4      	b.n	55f4 <log_output_timestamp_freq_set+0xc>
    560a:	bf00      	nop
    560c:	2000d4fc 	.word	0x2000d4fc
    5610:	000f4240 	.word	0x000f4240
    5614:	2000d4f8 	.word	0x2000d4f8

00005618 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    5618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    561a:	4f07      	ldr	r7, [pc, #28]	; (5638 <char_out+0x20>)
{
    561c:	460d      	mov	r5, r1
    561e:	4604      	mov	r4, r0
    5620:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    5622:	42b4      	cmp	r4, r6
    5624:	d101      	bne.n	562a <char_out+0x12>
	}

	return length;
}
    5626:	4628      	mov	r0, r5
    5628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    562a:	6838      	ldr	r0, [r7, #0]
    562c:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5630:	6883      	ldr	r3, [r0, #8]
    5632:	685b      	ldr	r3, [r3, #4]
    5634:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    5636:	e7f4      	b.n	5622 <char_out+0xa>
    5638:	2000d514 	.word	0x2000d514

0000563c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    563c:	4801      	ldr	r0, [pc, #4]	; (5644 <panic+0x8>)
    563e:	f01c bd58 	b.w	220f2 <log_output_flush>
    5642:	bf00      	nop
    5644:	000273b0 	.word	0x000273b0

00005648 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    5648:	4801      	ldr	r0, [pc, #4]	; (5650 <dropped+0x8>)
    564a:	f7ff bfa1 	b.w	5590 <log_output_dropped_process>
    564e:	bf00      	nop
    5650:	000273b0 	.word	0x000273b0

00005654 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    5654:	b508      	push	{r3, lr}
    5656:	4803      	ldr	r0, [pc, #12]	; (5664 <log_backend_uart_init+0x10>)
    5658:	f019 fc26 	bl	1eea8 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    565c:	4b02      	ldr	r3, [pc, #8]	; (5668 <log_backend_uart_init+0x14>)
    565e:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    5660:	bd08      	pop	{r3, pc}
    5662:	bf00      	nop
    5664:	0002ac13 	.word	0x0002ac13
    5668:	2000d514 	.word	0x2000d514

0000566c <put>:
{
    566c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    566e:	4608      	mov	r0, r1
    5670:	460c      	mov	r4, r1
    5672:	f01c fb2d 	bl	21cd0 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5676:	4805      	ldr	r0, [pc, #20]	; (568c <put+0x20>)
    5678:	4621      	mov	r1, r4
    567a:	220f      	movs	r2, #15
    567c:	f7ff ff0c 	bl	5498 <log_output_msg_process>
	log_msg_put(msg);
    5680:	4620      	mov	r0, r4
}
    5682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5686:	f01c bb52 	b.w	21d2e <log_msg_put>
    568a:	bf00      	nop
    568c:	000273b0 	.word	0x000273b0

00005690 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5690:	4b01      	ldr	r3, [pc, #4]	; (5698 <log_backend_rtt_init+0x8>)
    5692:	2201      	movs	r2, #1
    5694:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    5696:	4770      	bx	lr
    5698:	2000ed39 	.word	0x2000ed39

0000569c <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    569c:	4b02      	ldr	r3, [pc, #8]	; (56a8 <panic+0xc>)
	log_output_flush(log_output);
    569e:	4803      	ldr	r0, [pc, #12]	; (56ac <panic+0x10>)
    56a0:	2201      	movs	r2, #1
    56a2:	701a      	strb	r2, [r3, #0]
    56a4:	f01c bd25 	b.w	220f2 <log_output_flush>
    56a8:	2000ed3a 	.word	0x2000ed3a
    56ac:	000273d8 	.word	0x000273d8

000056b0 <dropped>:
	log_output_dropped_process(log_output, cnt);
    56b0:	4801      	ldr	r0, [pc, #4]	; (56b8 <dropped+0x8>)
    56b2:	f7ff bf6d 	b.w	5590 <log_output_dropped_process>
    56b6:	bf00      	nop
    56b8:	000273d8 	.word	0x000273d8

000056bc <put>:
{
    56bc:	b510      	push	{r4, lr}
	log_msg_get(msg);
    56be:	4608      	mov	r0, r1
    56c0:	460c      	mov	r4, r1
    56c2:	f01c fb05 	bl	21cd0 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    56c6:	4805      	ldr	r0, [pc, #20]	; (56dc <put+0x20>)
    56c8:	4621      	mov	r1, r4
    56ca:	220f      	movs	r2, #15
    56cc:	f7ff fee4 	bl	5498 <log_output_msg_process>
	log_msg_put(msg);
    56d0:	4620      	mov	r0, r4
}
    56d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56d6:	f01c bb2a 	b.w	21d2e <log_msg_put>
    56da:	bf00      	nop
    56dc:	000273d8 	.word	0x000273d8

000056e0 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    56e0:	4b05      	ldr	r3, [pc, #20]	; (56f8 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    56e2:	781b      	ldrb	r3, [r3, #0]
    56e4:	b11b      	cbz	r3, 56ee <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    56e6:	f241 3088 	movw	r0, #5000	; 0x1388
    56ea:	f021 b889 	b.w	26800 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    56ee:	20a4      	movs	r0, #164	; 0xa4
    56f0:	2100      	movs	r1, #0
    56f2:	f01a ba4f 	b.w	1fb94 <z_impl_k_sleep>
    56f6:	bf00      	nop
    56f8:	2000ed3a 	.word	0x2000ed3a

000056fc <data_out_block_mode>:
{
    56fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5700:	f8df 8088 	ldr.w	r8, [pc, #136]	; 578c <data_out_block_mode+0x90>
	return z_impl_k_mutex_lock(mutex, timeout);
    5704:	f8df a088 	ldr.w	sl, [pc, #136]	; 5790 <data_out_block_mode+0x94>
{
    5708:	4607      	mov	r7, r0
    570a:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    570c:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    570e:	f898 3000 	ldrb.w	r3, [r8]
    5712:	b933      	cbnz	r3, 5722 <data_out_block_mode+0x26>
    5714:	f04f 32ff 	mov.w	r2, #4294967295
    5718:	f04f 33ff 	mov.w	r3, #4294967295
    571c:	4650      	mov	r0, sl
    571e:	f019 fde7 	bl	1f2f0 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5722:	4632      	mov	r2, r6
    5724:	4639      	mov	r1, r7
    5726:	2000      	movs	r0, #0
    5728:	f001 f9f4 	bl	6b14 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    572c:	f898 3000 	ldrb.w	r3, [r8]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5730:	4681      	mov	r9, r0
		if (!is_sync_mode()) {
    5732:	b913      	cbnz	r3, 573a <data_out_block_mode+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    5734:	4650      	mov	r0, sl
    5736:	f019 fe4d 	bl	1f3d4 <z_impl_k_mutex_unlock>
		if (ret) {
    573a:	4d16      	ldr	r5, [pc, #88]	; (5794 <data_out_block_mode+0x98>)
    573c:	f1b9 0f00 	cmp.w	r9, #0
    5740:	d018      	beq.n	5774 <data_out_block_mode+0x78>
	host_present = true;
    5742:	2301      	movs	r3, #1
    5744:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    5746:	f898 3000 	ldrb.w	r3, [r8]
    574a:	b933      	cbnz	r3, 575a <data_out_block_mode+0x5e>
}
    574c:	4630      	mov	r0, r6
    574e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (retry_cnt == 0) {
    5752:	b95c      	cbnz	r4, 576c <data_out_block_mode+0x70>
		host_present = false;
    5754:	702c      	strb	r4, [r5, #0]
    5756:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    575a:	2000      	movs	r0, #0
    575c:	f001 fa26 	bl	6bac <SEGGER_RTT_HasDataUp>
    5760:	2800      	cmp	r0, #0
    5762:	d0f3      	beq.n	574c <data_out_block_mode+0x50>
    5764:	782b      	ldrb	r3, [r5, #0]
    5766:	2b00      	cmp	r3, #0
    5768:	d1f3      	bne.n	5752 <data_out_block_mode+0x56>
    576a:	e7ef      	b.n	574c <data_out_block_mode+0x50>
			on_failed_write(retry_cnt--);
    576c:	3c01      	subs	r4, #1
    576e:	f7ff ffb7 	bl	56e0 <on_failed_write.part.0>
    5772:	e7f2      	b.n	575a <data_out_block_mode+0x5e>
		} else if (host_present) {
    5774:	782b      	ldrb	r3, [r5, #0]
    5776:	b113      	cbz	r3, 577e <data_out_block_mode+0x82>
	if (retry_cnt == 0) {
    5778:	3c01      	subs	r4, #1
    577a:	d104      	bne.n	5786 <data_out_block_mode+0x8a>
		host_present = false;
    577c:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    577e:	782b      	ldrb	r3, [r5, #0]
    5780:	2b00      	cmp	r3, #0
    5782:	d1c4      	bne.n	570e <data_out_block_mode+0x12>
    5784:	e7e2      	b.n	574c <data_out_block_mode+0x50>
    5786:	f7ff ffab 	bl	56e0 <on_failed_write.part.0>
    578a:	e7f8      	b.n	577e <data_out_block_mode+0x82>
    578c:	2000ed3a 	.word	0x2000ed3a
    5790:	20009f60 	.word	0x20009f60
    5794:	2000ed39 	.word	0x2000ed39

00005798 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    5798:	4b02      	ldr	r3, [pc, #8]	; (57a4 <hrs_init+0xc>)
    579a:	2201      	movs	r2, #1
    579c:	701a      	strb	r2, [r3, #0]

	return 0;
}
    579e:	2000      	movs	r0, #0
    57a0:	4770      	bx	lr
    57a2:	bf00      	nop
    57a4:	2000ed3d 	.word	0x2000ed3d

000057a8 <read_blsc>:
{
    57a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    57aa:	2401      	movs	r4, #1
    57ac:	9402      	str	r4, [sp, #8]
    57ae:	4c04      	ldr	r4, [pc, #16]	; (57c0 <read_blsc+0x18>)
    57b0:	9401      	str	r4, [sp, #4]
    57b2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    57b6:	9400      	str	r4, [sp, #0]
    57b8:	f01f fd2d 	bl	25216 <bt_gatt_attr_read>
}
    57bc:	b004      	add	sp, #16
    57be:	bd10      	pop	{r4, pc}
    57c0:	2000ed3d 	.word	0x2000ed3d

000057c4 <hrmc_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    57c4:	4b07      	ldr	r3, [pc, #28]	; (57e4 <hrmc_ccc_cfg_changed+0x20>)
    57c6:	4a08      	ldr	r2, [pc, #32]	; (57e8 <hrmc_ccc_cfg_changed+0x24>)
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    57c8:	4808      	ldr	r0, [pc, #32]	; (57ec <hrmc_ccc_cfg_changed+0x28>)
    57ca:	1ad2      	subs	r2, r2, r3
    57cc:	08d2      	lsrs	r2, r2, #3
    57ce:	4b08      	ldr	r3, [pc, #32]	; (57f0 <hrmc_ccc_cfg_changed+0x2c>)
    57d0:	0192      	lsls	r2, r2, #6
    57d2:	2901      	cmp	r1, #1
    57d4:	bf14      	ite	ne
    57d6:	4601      	movne	r1, r0
    57d8:	4619      	moveq	r1, r3
    57da:	f042 0203 	orr.w	r2, r2, #3
    57de:	4805      	ldr	r0, [pc, #20]	; (57f4 <hrmc_ccc_cfg_changed+0x30>)
    57e0:	f01c b9cc 	b.w	21b7c <log_1>
    57e4:	00026fc8 	.word	0x00026fc8
    57e8:	000270d0 	.word	0x000270d0
    57ec:	000289da 	.word	0x000289da
    57f0:	000289d2 	.word	0x000289d2
    57f4:	0002ac3b 	.word	0x0002ac3b

000057f8 <bt_hrs_notify>:

int bt_hrs_notify(uint16_t heartrate)
{
    57f8:	b510      	push	{r4, lr}
	int rc;
	static uint8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
    57fa:	4c0d      	ldr	r4, [pc, #52]	; (5830 <bt_hrs_notify+0x38>)
{
    57fc:	b086      	sub	sp, #24
	hrm[0] = 0x06; /* uint8, sensor contact */
    57fe:	2306      	movs	r3, #6
	hrm[1] = heartrate;
    5800:	7060      	strb	r0, [r4, #1]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    5802:	2218      	movs	r2, #24
    5804:	2100      	movs	r1, #0
    5806:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
    5808:	7023      	strb	r3, [r4, #0]
    580a:	f01e f9e1 	bl	23bd0 <memset>

	params.attr = attr;
    580e:	4b09      	ldr	r3, [pc, #36]	; (5834 <bt_hrs_notify+0x3c>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    5810:	4669      	mov	r1, sp
	params.data = data;
    5812:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    5816:	2000      	movs	r0, #0
	params.len = len;
    5818:	2302      	movs	r3, #2
    581a:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    581e:	f007 ff9b 	bl	d758 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
    5822:	f110 0f39 	cmn.w	r0, #57	; 0x39
}
    5826:	bf08      	it	eq
    5828:	2000      	moveq	r0, #0
    582a:	b006      	add	sp, #24
    582c:	bd10      	pop	{r4, pc}
    582e:	bf00      	nop
    5830:	2000ed3b 	.word	0x2000ed3b
    5834:	000273fc 	.word	0x000273fc

00005838 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    5838:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    583c:	460e      	mov	r6, r1
    583e:	4680      	mov	r8, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5840:	2108      	movs	r1, #8
    5842:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    5844:	f8df 904c 	ldr.w	r9, [pc, #76]	; 5894 <nvs_recover_last_ate+0x5c>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5848:	f01c fd22 	bl	22290 <nvs_al_size.isra.0>
	*addr -= ate_size;
    584c:	6834      	ldr	r4, [r6, #0]
    584e:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5850:	4607      	mov	r7, r0
	*addr -= ate_size;
    5852:	6034      	str	r4, [r6, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    5854:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    5858:	42ac      	cmp	r4, r5
    585a:	d803      	bhi.n	5864 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    585c:	2000      	movs	r0, #0
}
    585e:	b003      	add	sp, #12
    5860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    5864:	2308      	movs	r3, #8
    5866:	466a      	mov	r2, sp
    5868:	4621      	mov	r1, r4
    586a:	4640      	mov	r0, r8
    586c:	f01c fc6c 	bl	22148 <nvs_flash_rd>
		if (rc) {
    5870:	2800      	cmp	r0, #0
    5872:	d1f4      	bne.n	585e <nvs_recover_last_ate+0x26>
		if (!nvs_ate_crc8_check(&end_ate)) {
    5874:	4668      	mov	r0, sp
    5876:	f01c fceb 	bl	22250 <nvs_ate_crc8_check>
    587a:	b940      	cbnz	r0, 588e <nvs_recover_last_ate+0x56>
			data_end_addr += end_ate.offset + end_ate.len;
    587c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    5880:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    5884:	6034      	str	r4, [r6, #0]
			data_end_addr &= ADDR_SECT_MASK;
    5886:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    588a:	4413      	add	r3, r2
    588c:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    588e:	1be4      	subs	r4, r4, r7
    5890:	e7e2      	b.n	5858 <nvs_recover_last_ate+0x20>
    5892:	bf00      	nop
    5894:	ffff0000 	.word	0xffff0000

00005898 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    5898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    589c:	4604      	mov	r4, r0
    589e:	b093      	sub	sp, #76	; 0x4c
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    58a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    58a2:	2108      	movs	r1, #8
    58a4:	f01c fcf4 	bl	22290 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    58a8:	6863      	ldr	r3, [r4, #4]
    58aa:	0c1b      	lsrs	r3, r3, #16
    58ac:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    58ae:	4680      	mov	r8, r0
	nvs_sector_advance(fs, &sec_addr);
    58b0:	a901      	add	r1, sp, #4
    58b2:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    58b4:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
    58b6:	f01c fce0 	bl	2227a <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    58ba:	9b01      	ldr	r3, [sp, #4]
    58bc:	89a1      	ldrh	r1, [r4, #12]
    58be:	4419      	add	r1, r3
    58c0:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    58c4:	2308      	movs	r3, #8
    58c6:	aa04      	add	r2, sp, #16
    58c8:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    58ca:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    58cc:	f01c fc3c 	bl	22148 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    58d0:	2800      	cmp	r0, #0
    58d2:	f2c0 8083 	blt.w	59dc <nvs_gc+0x144>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    58d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    58d8:	aa04      	add	r2, sp, #16
    58da:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    58dc:	2300      	movs	r3, #0
		if (data8[i] != value) {
    58de:	f812 0b01 	ldrb.w	r0, [r2], #1
    58e2:	4281      	cmp	r1, r0
    58e4:	d16c      	bne.n	59c0 <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    58e6:	3301      	adds	r3, #1
    58e8:	2b08      	cmp	r3, #8
    58ea:	d1f8      	bne.n	58de <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    58ec:	9901      	ldr	r1, [sp, #4]
    58ee:	4620      	mov	r0, r4
    58f0:	f01c fc87 	bl	22202 <nvs_flash_erase_sector>
		if (rc) {
    58f4:	e072      	b.n	59dc <nvs_gc+0x144>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    58f6:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
    58f8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
    58fc:	0c1b      	lsrs	r3, r3, #16
    58fe:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    5900:	4413      	add	r3, r2
    5902:	9302      	str	r3, [sp, #8]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    5904:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 59e4 <nvs_gc+0x14c>
		gc_prev_addr = gc_addr;
    5908:	f8dd 9008 	ldr.w	r9, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    590c:	aa06      	add	r2, sp, #24
    590e:	a902      	add	r1, sp, #8
    5910:	4620      	mov	r0, r4
    5912:	f01c fcc7 	bl	222a4 <nvs_prev_ate>
		if (rc) {
    5916:	2800      	cmp	r0, #0
    5918:	d160      	bne.n	59dc <nvs_gc+0x144>
		if (nvs_ate_crc8_check(&gc_ate)) {
    591a:	a806      	add	r0, sp, #24
    591c:	f01c fc98 	bl	22250 <nvs_ate_crc8_check>
    5920:	bb80      	cbnz	r0, 5984 <nvs_gc+0xec>
		wlk_addr = fs->ate_wra;
    5922:	6863      	ldr	r3, [r4, #4]
    5924:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5926:	aa08      	add	r2, sp, #32
    5928:	a903      	add	r1, sp, #12
    592a:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
    592c:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    592e:	f01c fcb9 	bl	222a4 <nvs_prev_ate>
			if (rc) {
    5932:	2800      	cmp	r0, #0
    5934:	d152      	bne.n	59dc <nvs_gc+0x144>
			if ((wlk_ate.id == gc_ate.id) &&
    5936:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    593a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    593e:	429a      	cmp	r2, r3
    5940:	d023      	beq.n	598a <nvs_gc+0xf2>
		} while (wlk_addr != fs->ate_wra);
    5942:	6862      	ldr	r2, [r4, #4]
    5944:	9b03      	ldr	r3, [sp, #12]
    5946:	429a      	cmp	r2, r3
    5948:	d1ed      	bne.n	5926 <nvs_gc+0x8e>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    594a:	454d      	cmp	r5, r9
    594c:	d11a      	bne.n	5984 <nvs_gc+0xec>
    594e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    5952:	b1bb      	cbz	r3, 5984 <nvs_gc+0xec>
			data_addr += gc_ate.offset;
    5954:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    5958:	ea09 060a 	and.w	r6, r9, sl
			data_addr += gc_ate.offset;
    595c:	441e      	add	r6, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
    595e:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    5960:	68a3      	ldr	r3, [r4, #8]
    5962:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
    5966:	f01c fc7f 	bl	22268 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    596a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    596c:	f8bd 701c 	ldrh.w	r7, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    5970:	681d      	ldr	r5, [r3, #0]
    5972:	426d      	negs	r5, r5
	block_size =
    5974:	f005 0520 	and.w	r5, r5, #32
	while (len) {
    5978:	b96f      	cbnz	r7, 5996 <nvs_gc+0xfe>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    597a:	a906      	add	r1, sp, #24
    597c:	4620      	mov	r0, r4
    597e:	f01c fd3f 	bl	22400 <nvs_flash_ate_wrt>
			if (rc) {
    5982:	bb58      	cbnz	r0, 59dc <nvs_gc+0x144>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    5984:	45c1      	cmp	r9, r8
    5986:	d1bf      	bne.n	5908 <nvs_gc+0x70>
    5988:	e7b0      	b.n	58ec <nvs_gc+0x54>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    598a:	a808      	add	r0, sp, #32
    598c:	f01c fc60 	bl	22250 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    5990:	2800      	cmp	r0, #0
    5992:	d1d6      	bne.n	5942 <nvs_gc+0xaa>
    5994:	e7d9      	b.n	594a <nvs_gc+0xb2>
		bytes_to_copy = MIN(block_size, len);
    5996:	42bd      	cmp	r5, r7
    5998:	46ab      	mov	fp, r5
    599a:	bf28      	it	cs
    599c:	46bb      	movcs	fp, r7
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    599e:	465b      	mov	r3, fp
    59a0:	aa0a      	add	r2, sp, #40	; 0x28
    59a2:	4631      	mov	r1, r6
    59a4:	4620      	mov	r0, r4
    59a6:	f01c fbcf 	bl	22148 <nvs_flash_rd>
		if (rc) {
    59aa:	b9b8      	cbnz	r0, 59dc <nvs_gc+0x144>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
    59ac:	465a      	mov	r2, fp
    59ae:	a90a      	add	r1, sp, #40	; 0x28
    59b0:	4620      	mov	r0, r4
    59b2:	f01c fd12 	bl	223da <nvs_flash_data_wrt>
		if (rc) {
    59b6:	b988      	cbnz	r0, 59dc <nvs_gc+0x144>
		len -= bytes_to_copy;
    59b8:	eba7 070b 	sub.w	r7, r7, fp
		addr += bytes_to_copy;
    59bc:	445e      	add	r6, fp
    59be:	e7db      	b.n	5978 <nvs_gc+0xe0>
	stop_addr = gc_addr - ate_size;
    59c0:	9802      	ldr	r0, [sp, #8]
    59c2:	eba0 0808 	sub.w	r8, r0, r8
	if (!nvs_ate_crc8_check(&close_ate)) {
    59c6:	a804      	add	r0, sp, #16
    59c8:	f01c fc42 	bl	22250 <nvs_ate_crc8_check>
    59cc:	2800      	cmp	r0, #0
    59ce:	d092      	beq.n	58f6 <nvs_gc+0x5e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    59d0:	a902      	add	r1, sp, #8
    59d2:	4620      	mov	r0, r4
    59d4:	f7ff ff30 	bl	5838 <nvs_recover_last_ate>
		if (rc) {
    59d8:	2800      	cmp	r0, #0
    59da:	d093      	beq.n	5904 <nvs_gc+0x6c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    59dc:	b013      	add	sp, #76	; 0x4c
    59de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59e2:	bf00      	nop
    59e4:	ffff0000 	.word	0xffff0000

000059e8 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    59e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59ec:	4604      	mov	r4, r0
    59ee:	b086      	sub	sp, #24
    59f0:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    59f2:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    59f6:	4630      	mov	r0, r6
    59f8:	f020 fd2a 	bl	26450 <z_impl_k_mutex_init>
    59fc:	4628      	mov	r0, r5
    59fe:	f019 fa53 	bl	1eea8 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    5a02:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    5a04:	b978      	cbnz	r0, 5a26 <nvs_init+0x3e>
    5a06:	4ba2      	ldr	r3, [pc, #648]	; (5c90 <nvs_init+0x2a8>)
    5a08:	49a2      	ldr	r1, [pc, #648]	; (5c94 <nvs_init+0x2ac>)
		LOG_ERR("No valid flash device found");
    5a0a:	48a3      	ldr	r0, [pc, #652]	; (5c98 <nvs_init+0x2b0>)
    5a0c:	1ac9      	subs	r1, r1, r3
    5a0e:	08c9      	lsrs	r1, r1, #3
    5a10:	0189      	lsls	r1, r1, #6
    5a12:	f041 0101 	orr.w	r1, r1, #1
    5a16:	f01c f8a4 	bl	21b62 <log_0>
		return -ENXIO;
    5a1a:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    5a1e:	4628      	mov	r0, r5
    5a20:	b006      	add	sp, #24
    5a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    5a26:	6883      	ldr	r3, [r0, #8]
    5a28:	691b      	ldr	r3, [r3, #16]
    5a2a:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    5a2c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    5a2e:	b960      	cbnz	r0, 5a4a <nvs_init+0x62>
    5a30:	4998      	ldr	r1, [pc, #608]	; (5c94 <nvs_init+0x2ac>)
    5a32:	4b97      	ldr	r3, [pc, #604]	; (5c90 <nvs_init+0x2a8>)
		LOG_ERR("Could not obtain flash parameters");
    5a34:	4899      	ldr	r0, [pc, #612]	; (5c9c <nvs_init+0x2b4>)
    5a36:	1ac9      	subs	r1, r1, r3
    5a38:	08c9      	lsrs	r1, r1, #3
    5a3a:	0189      	lsls	r1, r1, #6
    5a3c:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
    5a40:	f01c f88f 	bl	21b62 <log_0>
		return -EINVAL;
    5a44:	f06f 0515 	mvn.w	r5, #21
    5a48:	e7e9      	b.n	5a1e <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    5a4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    5a4c:	6883      	ldr	r3, [r0, #8]
    5a4e:	691b      	ldr	r3, [r3, #16]
    5a50:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    5a52:	6803      	ldr	r3, [r0, #0]
    5a54:	3b01      	subs	r3, #1
    5a56:	2b1f      	cmp	r3, #31
    5a58:	d908      	bls.n	5a6c <nvs_init+0x84>
    5a5a:	498e      	ldr	r1, [pc, #568]	; (5c94 <nvs_init+0x2ac>)
    5a5c:	4b8c      	ldr	r3, [pc, #560]	; (5c90 <nvs_init+0x2a8>)
		LOG_ERR("Unsupported write block size");
    5a5e:	4890      	ldr	r0, [pc, #576]	; (5ca0 <nvs_init+0x2b8>)
    5a60:	1ac9      	subs	r1, r1, r3
    5a62:	08c9      	lsrs	r1, r1, #3
    5a64:	0189      	lsls	r1, r1, #6
    5a66:	f041 0101 	orr.w	r1, r1, #1
    5a6a:	e7e9      	b.n	5a40 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    5a6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5a6e:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    5a70:	aa03      	add	r2, sp, #12
    5a72:	f020 fa9d 	bl	25fb0 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    5a76:	b140      	cbz	r0, 5a8a <nvs_init+0xa2>
    5a78:	4986      	ldr	r1, [pc, #536]	; (5c94 <nvs_init+0x2ac>)
    5a7a:	4b85      	ldr	r3, [pc, #532]	; (5c90 <nvs_init+0x2a8>)
		LOG_ERR("Unable to get page info");
    5a7c:	4889      	ldr	r0, [pc, #548]	; (5ca4 <nvs_init+0x2bc>)
    5a7e:	1ac9      	subs	r1, r1, r3
    5a80:	08c9      	lsrs	r1, r1, #3
    5a82:	0189      	lsls	r1, r1, #6
    5a84:	f041 0101 	orr.w	r1, r1, #1
    5a88:	e7da      	b.n	5a40 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
    5a8a:	89a5      	ldrh	r5, [r4, #12]
    5a8c:	b12d      	cbz	r5, 5a9a <nvs_init+0xb2>
    5a8e:	9b04      	ldr	r3, [sp, #16]
    5a90:	fbb5 f2f3 	udiv	r2, r5, r3
    5a94:	fb03 5512 	mls	r5, r3, r2, r5
    5a98:	b145      	cbz	r5, 5aac <nvs_init+0xc4>
    5a9a:	497e      	ldr	r1, [pc, #504]	; (5c94 <nvs_init+0x2ac>)
    5a9c:	4b7c      	ldr	r3, [pc, #496]	; (5c90 <nvs_init+0x2a8>)
		LOG_ERR("Invalid sector size");
    5a9e:	4882      	ldr	r0, [pc, #520]	; (5ca8 <nvs_init+0x2c0>)
    5aa0:	1ac9      	subs	r1, r1, r3
    5aa2:	08c9      	lsrs	r1, r1, #3
    5aa4:	0189      	lsls	r1, r1, #6
    5aa6:	f041 0101 	orr.w	r1, r1, #1
    5aaa:	e7c9      	b.n	5a40 <nvs_init+0x58>
	if (fs->sector_count < 2) {
    5aac:	89e3      	ldrh	r3, [r4, #14]
    5aae:	2b01      	cmp	r3, #1
    5ab0:	d808      	bhi.n	5ac4 <nvs_init+0xdc>
    5ab2:	4978      	ldr	r1, [pc, #480]	; (5c94 <nvs_init+0x2ac>)
    5ab4:	4b76      	ldr	r3, [pc, #472]	; (5c90 <nvs_init+0x2a8>)
		LOG_ERR("Configuration error - sector count");
    5ab6:	487d      	ldr	r0, [pc, #500]	; (5cac <nvs_init+0x2c4>)
    5ab8:	1ac9      	subs	r1, r1, r3
    5aba:	08c9      	lsrs	r1, r1, #3
    5abc:	0189      	lsls	r1, r1, #6
    5abe:	f041 0101 	orr.w	r1, r1, #1
    5ac2:	e7bd      	b.n	5a40 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    5ac4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    5ac6:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    5ac8:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    5acc:	f04f 33ff 	mov.w	r3, #4294967295
    5ad0:	f04f 32ff 	mov.w	r2, #4294967295
    5ad4:	4630      	mov	r0, r6
    5ad6:	f019 fc0b 	bl	1f2f0 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5ada:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5adc:	2108      	movs	r1, #8
    5ade:	f01c fbd7 	bl	22290 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    5ae2:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5ae4:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    5ae6:	89e3      	ldrh	r3, [r4, #14]
    5ae8:	fa1f fa85 	uxth.w	sl, r5
    5aec:	4553      	cmp	r3, sl
    5aee:	d86f      	bhi.n	5bd0 <nvs_init+0x1e8>
	if (closed_sectors == fs->sector_count) {
    5af0:	89e3      	ldrh	r3, [r4, #14]
    5af2:	4543      	cmp	r3, r8
    5af4:	f000 80af 	beq.w	5c56 <nvs_init+0x26e>
	if (i == fs->sector_count) {
    5af8:	4553      	cmp	r3, sl
    5afa:	d10b      	bne.n	5b14 <nvs_init+0x12c>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    5afc:	9900      	ldr	r1, [sp, #0]
    5afe:	2308      	movs	r3, #8
    5b00:	464a      	mov	r2, r9
    5b02:	1bc9      	subs	r1, r1, r7
    5b04:	4620      	mov	r0, r4
    5b06:	f01c fb57 	bl	221b8 <nvs_flash_cmp_const>
		if (!rc) {
    5b0a:	b918      	cbnz	r0, 5b14 <nvs_init+0x12c>
			nvs_sector_advance(fs, &addr);
    5b0c:	89e0      	ldrh	r0, [r4, #14]
    5b0e:	4669      	mov	r1, sp
    5b10:	f01c fbb3 	bl	2227a <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    5b14:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    5b16:	f8df 8198 	ldr.w	r8, [pc, #408]	; 5cb0 <nvs_init+0x2c8>
	fs->ate_wra = addr - ate_size;
    5b1a:	1bda      	subs	r2, r3, r7
	fs->data_wra = addr & ADDR_SECT_MASK;
    5b1c:	ea03 0308 	and.w	r3, r3, r8
	fs->ate_wra = addr - ate_size;
    5b20:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    5b22:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    5b24:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    5b28:	4299      	cmp	r1, r3
    5b2a:	d30f      	bcc.n	5b4c <nvs_init+0x164>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    5b2c:	2308      	movs	r3, #8
    5b2e:	aa01      	add	r2, sp, #4
    5b30:	4620      	mov	r0, r4
    5b32:	f01c fb09 	bl	22148 <nvs_flash_rd>
		if (rc) {
    5b36:	4605      	mov	r5, r0
    5b38:	bb30      	cbnz	r0, 5b88 <nvs_init+0x1a0>
    5b3a:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    5b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
    5b40:	4591      	cmp	r9, r2
    5b42:	f040 808b 	bne.w	5c5c <nvs_init+0x274>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    5b46:	3501      	adds	r5, #1
    5b48:	2d08      	cmp	r5, #8
    5b4a:	d1f7      	bne.n	5b3c <nvs_init+0x154>
	while (fs->ate_wra > fs->data_wra) {
    5b4c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    5b50:	428b      	cmp	r3, r1
    5b52:	d907      	bls.n	5b64 <nvs_init+0x17c>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    5b54:	1a5b      	subs	r3, r3, r1
    5b56:	464a      	mov	r2, r9
    5b58:	4620      	mov	r0, r4
    5b5a:	f01c fb2d 	bl	221b8 <nvs_flash_cmp_const>
		if (rc < 0) {
    5b5e:	1e05      	subs	r5, r0, #0
    5b60:	db12      	blt.n	5b88 <nvs_init+0x1a0>
		if (!rc) {
    5b62:	d15a      	bne.n	5c1a <nvs_init+0x232>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    5b64:	6863      	ldr	r3, [r4, #4]
    5b66:	f8df 8148 	ldr.w	r8, [pc, #328]	; 5cb0 <nvs_init+0x2c8>
	nvs_sector_advance(fs, &addr);
    5b6a:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    5b6c:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    5b70:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    5b72:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    5b74:	f01c fb81 	bl	2227a <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    5b78:	89a3      	ldrh	r3, [r4, #12]
    5b7a:	9900      	ldr	r1, [sp, #0]
    5b7c:	464a      	mov	r2, r9
    5b7e:	4620      	mov	r0, r4
    5b80:	f01c fb1a 	bl	221b8 <nvs_flash_cmp_const>
	if (rc < 0) {
    5b84:	1e05      	subs	r5, r0, #0
    5b86:	da4e      	bge.n	5c26 <nvs_init+0x23e>
	return z_impl_k_mutex_unlock(mutex);
    5b88:	4630      	mov	r0, r6
    5b8a:	f019 fc23 	bl	1f3d4 <z_impl_k_mutex_unlock>
	if (rc) {
    5b8e:	2d00      	cmp	r5, #0
    5b90:	f47f af45 	bne.w	5a1e <nvs_init+0x36>
	fs->ready = true;
    5b94:	2301      	movs	r3, #1
    5b96:	7423      	strb	r3, [r4, #16]
    5b98:	4e3e      	ldr	r6, [pc, #248]	; (5c94 <nvs_init+0x2ac>)
    5b9a:	4b3d      	ldr	r3, [pc, #244]	; (5c90 <nvs_init+0x2a8>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    5b9c:	89a2      	ldrh	r2, [r4, #12]
    5b9e:	89e1      	ldrh	r1, [r4, #14]
    5ba0:	4844      	ldr	r0, [pc, #272]	; (5cb4 <nvs_init+0x2cc>)
    5ba2:	1af6      	subs	r6, r6, r3
    5ba4:	08f6      	lsrs	r6, r6, #3
    5ba6:	01b6      	lsls	r6, r6, #6
    5ba8:	f046 0603 	orr.w	r6, r6, #3
    5bac:	4633      	mov	r3, r6
    5bae:	f01b fff9 	bl	21ba4 <log_2>
	LOG_INF("alloc wra: %d, %x",
    5bb2:	6861      	ldr	r1, [r4, #4]
    5bb4:	4840      	ldr	r0, [pc, #256]	; (5cb8 <nvs_init+0x2d0>)
    5bb6:	4633      	mov	r3, r6
    5bb8:	b28a      	uxth	r2, r1
    5bba:	0c09      	lsrs	r1, r1, #16
    5bbc:	f01b fff2 	bl	21ba4 <log_2>
	LOG_INF("data wra: %d, %x",
    5bc0:	68a1      	ldr	r1, [r4, #8]
    5bc2:	483e      	ldr	r0, [pc, #248]	; (5cbc <nvs_init+0x2d4>)
    5bc4:	b28a      	uxth	r2, r1
    5bc6:	4633      	mov	r3, r6
    5bc8:	0c09      	lsrs	r1, r1, #16
    5bca:	f01b ffeb 	bl	21ba4 <log_2>
	return 0;
    5bce:	e726      	b.n	5a1e <nvs_init+0x36>
		       (uint16_t)(fs->sector_size - ate_size);
    5bd0:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    5bd2:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    5bd4:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    5bd6:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5bda:	464a      	mov	r2, r9
    5bdc:	2308      	movs	r3, #8
    5bde:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    5be0:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5be2:	f01c fae9 	bl	221b8 <nvs_flash_cmp_const>
		if (rc) {
    5be6:	b180      	cbz	r0, 5c0a <nvs_init+0x222>
			nvs_sector_advance(fs, &addr);
    5be8:	89e0      	ldrh	r0, [r4, #14]
    5bea:	4669      	mov	r1, sp
    5bec:	f01c fb45 	bl	2227a <nvs_sector_advance.isra.0>
			closed_sectors++;
    5bf0:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5bf4:	9900      	ldr	r1, [sp, #0]
    5bf6:	2308      	movs	r3, #8
    5bf8:	464a      	mov	r2, r9
    5bfa:	4620      	mov	r0, r4
			closed_sectors++;
    5bfc:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5c00:	f01c fada 	bl	221b8 <nvs_flash_cmp_const>
			if (!rc) {
    5c04:	2800      	cmp	r0, #0
    5c06:	f43f af73 	beq.w	5af0 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
    5c0a:	3501      	adds	r5, #1
    5c0c:	e76b      	b.n	5ae6 <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    5c0e:	f1ba 0f00 	cmp.w	sl, #0
    5c12:	d039      	beq.n	5c88 <nvs_init+0x2a0>
				rc = -ESPIPE;
    5c14:	f06f 051c 	mvn.w	r5, #28
    5c18:	e7b6      	b.n	5b88 <nvs_init+0x1a0>
		fs->data_wra += fs->flash_parameters->write_block_size;
    5c1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5c1c:	68a3      	ldr	r3, [r4, #8]
    5c1e:	6812      	ldr	r2, [r2, #0]
    5c20:	4413      	add	r3, r2
    5c22:	60a3      	str	r3, [r4, #8]
    5c24:	e792      	b.n	5b4c <nvs_init+0x164>
	if (rc) {
    5c26:	d0af      	beq.n	5b88 <nvs_init+0x1a0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    5c28:	6861      	ldr	r1, [r4, #4]
    5c2a:	4620      	mov	r0, r4
    5c2c:	f01c fae9 	bl	22202 <nvs_flash_erase_sector>
		if (rc) {
    5c30:	4605      	mov	r5, r0
    5c32:	2800      	cmp	r0, #0
    5c34:	d1a8      	bne.n	5b88 <nvs_init+0x1a0>
		fs->ate_wra &= ADDR_SECT_MASK;
    5c36:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    5c38:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    5c3a:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    5c3e:	4403      	add	r3, r0
    5c40:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    5c44:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    5c46:	ea00 0008 	and.w	r0, r0, r8
    5c4a:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    5c4c:	4620      	mov	r0, r4
    5c4e:	f7ff fe23 	bl	5898 <nvs_gc>
    5c52:	4605      	mov	r5, r0
end:
    5c54:	e798      	b.n	5b88 <nvs_init+0x1a0>
		rc = -EDEADLK;
    5c56:	f06f 0520 	mvn.w	r5, #32
    5c5a:	e795      	b.n	5b88 <nvs_init+0x1a0>
		if (!nvs_ate_crc8_check(&last_ate)) {
    5c5c:	a801      	add	r0, sp, #4
    5c5e:	f01c faf7 	bl	22250 <nvs_ate_crc8_check>
    5c62:	6865      	ldr	r5, [r4, #4]
    5c64:	b980      	cbnz	r0, 5c88 <nvs_init+0x2a0>
			fs->data_wra = addr & ADDR_SECT_MASK;
    5c66:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += last_ate.offset;
    5c68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    5c6c:	f8bd a008 	ldrh.w	sl, [sp, #8]
    5c70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    5c72:	ea02 0208 	and.w	r2, r2, r8
			fs->data_wra += last_ate.offset;
    5c76:	441a      	add	r2, r3
    5c78:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    5c7a:	4651      	mov	r1, sl
    5c7c:	f01c fb08 	bl	22290 <nvs_al_size.isra.0>
    5c80:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    5c82:	42aa      	cmp	r2, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    5c84:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    5c86:	d0c2      	beq.n	5c0e <nvs_init+0x226>
		fs->ate_wra -= ate_size;
    5c88:	1bed      	subs	r5, r5, r7
    5c8a:	6065      	str	r5, [r4, #4]
    5c8c:	e74a      	b.n	5b24 <nvs_init+0x13c>
    5c8e:	bf00      	nop
    5c90:	00026fc8 	.word	0x00026fc8
    5c94:	000270c8 	.word	0x000270c8
    5c98:	0002ac68 	.word	0x0002ac68
    5c9c:	0002ac84 	.word	0x0002ac84
    5ca0:	0002aca6 	.word	0x0002aca6
    5ca4:	0002acc3 	.word	0x0002acc3
    5ca8:	0002acdb 	.word	0x0002acdb
    5cac:	0002acef 	.word	0x0002acef
    5cb0:	ffff0000 	.word	0xffff0000
    5cb4:	0002ad12 	.word	0x0002ad12
    5cb8:	0002ad29 	.word	0x0002ad29
    5cbc:	0002ad3b 	.word	0x0002ad3b

00005cc0 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    5cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cc4:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    5cc6:	7c03      	ldrb	r3, [r0, #16]
{
    5cc8:	b089      	sub	sp, #36	; 0x24
    5cca:	4604      	mov	r4, r0
    5ccc:	4689      	mov	r9, r1
    5cce:	4690      	mov	r8, r2
	if (!fs->ready) {
    5cd0:	b97b      	cbnz	r3, 5cf2 <nvs_write+0x32>
    5cd2:	4b61      	ldr	r3, [pc, #388]	; (5e58 <nvs_write+0x198>)
    5cd4:	4961      	ldr	r1, [pc, #388]	; (5e5c <nvs_write+0x19c>)
		LOG_ERR("NVS not initialized");
    5cd6:	4862      	ldr	r0, [pc, #392]	; (5e60 <nvs_write+0x1a0>)
    5cd8:	1ac9      	subs	r1, r1, r3
    5cda:	08c9      	lsrs	r1, r1, #3
    5cdc:	0189      	lsls	r1, r1, #6
    5cde:	f041 0101 	orr.w	r1, r1, #1
    5ce2:	f01b ff3e 	bl	21b62 <log_0>
		return -EACCES;
    5ce6:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    5cea:	4628      	mov	r0, r5
    5cec:	b009      	add	sp, #36	; 0x24
    5cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5cf2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    5cf4:	2108      	movs	r1, #8
    5cf6:	4610      	mov	r0, r2
    5cf8:	f01c faca 	bl	22290 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    5cfc:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5cfe:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    5d00:	4610      	mov	r0, r2
    5d02:	f01c fac5 	bl	22290 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    5d06:	89a3      	ldrh	r3, [r4, #12]
    5d08:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    5d0c:	1a9b      	subs	r3, r3, r2
    5d0e:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    5d10:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    5d12:	f0c0 809d 	bcc.w	5e50 <nvs_write+0x190>
    5d16:	b11e      	cbz	r6, 5d20 <nvs_write+0x60>
	    ((len > 0) && (data == NULL))) {
    5d18:	f1b8 0f00 	cmp.w	r8, #0
    5d1c:	f000 8098 	beq.w	5e50 <nvs_write+0x190>
	wlk_addr = fs->ate_wra;
    5d20:	6863      	ldr	r3, [r4, #4]
    5d22:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5d24:	aa04      	add	r2, sp, #16
    5d26:	a903      	add	r1, sp, #12
    5d28:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    5d2a:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5d2e:	f01c fab9 	bl	222a4 <nvs_prev_ate>
		if (rc) {
    5d32:	4605      	mov	r5, r0
    5d34:	2800      	cmp	r0, #0
    5d36:	d1d8      	bne.n	5cea <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    5d38:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    5d3c:	454b      	cmp	r3, r9
    5d3e:	d005      	beq.n	5d4c <nvs_write+0x8c>
		if (wlk_addr == fs->ate_wra) {
    5d40:	6862      	ldr	r2, [r4, #4]
    5d42:	9b03      	ldr	r3, [sp, #12]
    5d44:	429a      	cmp	r2, r3
    5d46:	d1ed      	bne.n	5d24 <nvs_write+0x64>
		if (len == 0) {
    5d48:	b9de      	cbnz	r6, 5d82 <nvs_write+0xc2>
    5d4a:	e7ce      	b.n	5cea <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    5d4c:	a804      	add	r0, sp, #16
    5d4e:	f01c fa7f 	bl	22250 <nvs_ate_crc8_check>
    5d52:	2800      	cmp	r0, #0
    5d54:	d1f4      	bne.n	5d40 <nvs_write+0x80>
			if (wlk_ate.len == 0U) {
    5d56:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    5d5a:	b186      	cbz	r6, 5d7e <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    5d5c:	42b3      	cmp	r3, r6
    5d5e:	d110      	bne.n	5d82 <nvs_write+0xc2>
		rd_addr += wlk_ate.offset;
    5d60:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    5d64:	ea4f 411b 	mov.w	r1, fp, lsr #16
    5d68:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    5d6a:	4401      	add	r1, r0
    5d6c:	4633      	mov	r3, r6
    5d6e:	4642      	mov	r2, r8
    5d70:	4620      	mov	r0, r4
    5d72:	f01c f9f7 	bl	22164 <nvs_flash_block_cmp>
			if (rc <= 0) {
    5d76:	2800      	cmp	r0, #0
    5d78:	dc03      	bgt.n	5d82 <nvs_write+0xc2>
    5d7a:	4605      	mov	r5, r0
    5d7c:	e7b5      	b.n	5cea <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d0b3      	beq.n	5cea <nvs_write+0x2a>
	if (data_size) {
    5d82:	bba7      	cbnz	r7, 5dee <nvs_write+0x12e>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    5d84:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    5d88:	f04f 32ff 	mov.w	r2, #4294967295
    5d8c:	f04f 33ff 	mov.w	r3, #4294967295
    5d90:	4650      	mov	r0, sl
    5d92:	f019 faad 	bl	1f2f0 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    5d96:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 5e64 <nvs_write+0x1a4>
		if (gc_count == fs->sector_count) {
    5d9a:	89e3      	ldrh	r3, [r4, #14]
    5d9c:	429d      	cmp	r5, r3
    5d9e:	d054      	beq.n	5e4a <nvs_write+0x18a>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    5da0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    5da4:	18f9      	adds	r1, r7, r3
    5da6:	428a      	cmp	r2, r1
    5da8:	d324      	bcc.n	5df4 <nvs_write+0x134>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    5daa:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
    5dae:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    5db0:	23ff      	movs	r3, #255	; 0xff
    5db2:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    5db6:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    5dba:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
    5dbe:	f01c fa53 	bl	22268 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
    5dc2:	4632      	mov	r2, r6
    5dc4:	4641      	mov	r1, r8
    5dc6:	4620      	mov	r0, r4
    5dc8:	f01c fb07 	bl	223da <nvs_flash_data_wrt>
	if (rc) {
    5dcc:	4603      	mov	r3, r0
    5dce:	b938      	cbnz	r0, 5de0 <nvs_write+0x120>
	rc = nvs_flash_ate_wrt(fs, &entry);
    5dd0:	a906      	add	r1, sp, #24
    5dd2:	4620      	mov	r0, r4
    5dd4:	f01c fb14 	bl	22400 <nvs_flash_ate_wrt>
	rc = len;
    5dd8:	2800      	cmp	r0, #0
    5dda:	bf14      	ite	ne
    5ddc:	4603      	movne	r3, r0
    5dde:	4633      	moveq	r3, r6
    5de0:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    5de2:	4650      	mov	r0, sl
    5de4:	f019 faf6 	bl	1f3d4 <z_impl_k_mutex_unlock>
	return rc;
    5de8:	9b01      	ldr	r3, [sp, #4]
    5dea:	461d      	mov	r5, r3
    5dec:	e77d      	b.n	5cea <nvs_write+0x2a>
		required_space = data_size + ate_size;
    5dee:	4457      	add	r7, sl
    5df0:	b2bf      	uxth	r7, r7
    5df2:	e7c7      	b.n	5d84 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5df4:	2108      	movs	r1, #8
    5df6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5df8:	f01c fa4a 	bl	22290 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    5dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5e00:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    5e04:	2300      	movs	r3, #0
    5e06:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    5e0a:	1813      	adds	r3, r2, r0
    5e0c:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    5e10:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    5e12:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    5e16:	441a      	add	r2, r3
    5e18:	1a12      	subs	r2, r2, r0
    5e1a:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    5e1c:	a806      	add	r0, sp, #24
    5e1e:	f01c fa23 	bl	22268 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    5e22:	a906      	add	r1, sp, #24
    5e24:	4620      	mov	r0, r4
    5e26:	f01c faeb 	bl	22400 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    5e2a:	89e0      	ldrh	r0, [r4, #14]
    5e2c:	1d21      	adds	r1, r4, #4
    5e2e:	f01c fa24 	bl	2227a <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    5e32:	6863      	ldr	r3, [r4, #4]
    5e34:	ea03 030b 	and.w	r3, r3, fp
    5e38:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    5e3a:	4620      	mov	r0, r4
    5e3c:	f7ff fd2c 	bl	5898 <nvs_gc>
		if (rc) {
    5e40:	4603      	mov	r3, r0
    5e42:	2800      	cmp	r0, #0
    5e44:	d1cc      	bne.n	5de0 <nvs_write+0x120>
		gc_count++;
    5e46:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    5e48:	e7a7      	b.n	5d9a <nvs_write+0xda>
			rc = -ENOSPC;
    5e4a:	f06f 031b 	mvn.w	r3, #27
    5e4e:	e7c7      	b.n	5de0 <nvs_write+0x120>
		return -EINVAL;
    5e50:	f06f 0515 	mvn.w	r5, #21
    5e54:	e749      	b.n	5cea <nvs_write+0x2a>
    5e56:	bf00      	nop
    5e58:	00026fc8 	.word	0x00026fc8
    5e5c:	000270c8 	.word	0x000270c8
    5e60:	0002ac54 	.word	0x0002ac54
    5e64:	ffff0000 	.word	0xffff0000

00005e68 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    5e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5e6c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    5e6e:	7c03      	ldrb	r3, [r0, #16]
{
    5e70:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    5e74:	4604      	mov	r4, r0
    5e76:	460f      	mov	r7, r1
    5e78:	4690      	mov	r8, r2
	if (!fs->ready) {
    5e7a:	b973      	cbnz	r3, 5e9a <nvs_read_hist+0x32>
    5e7c:	4b2b      	ldr	r3, [pc, #172]	; (5f2c <nvs_read_hist+0xc4>)
    5e7e:	492c      	ldr	r1, [pc, #176]	; (5f30 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
    5e80:	482c      	ldr	r0, [pc, #176]	; (5f34 <nvs_read_hist+0xcc>)
    5e82:	1ac9      	subs	r1, r1, r3
    5e84:	08c9      	lsrs	r1, r1, #3
    5e86:	0189      	lsls	r1, r1, #6
    5e88:	f041 0101 	orr.w	r1, r1, #1
    5e8c:	f01b fe69 	bl	21b62 <log_0>
		return -EACCES;
    5e90:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    5e94:	b004      	add	sp, #16
    5e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5e9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5e9c:	2108      	movs	r1, #8
    5e9e:	f01c f9f7 	bl	22290 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    5ea2:	89a3      	ldrh	r3, [r4, #12]
    5ea4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    5ea8:	42b3      	cmp	r3, r6
    5eaa:	d33b      	bcc.n	5f24 <nvs_read_hist+0xbc>
	wlk_addr = fs->ate_wra;
    5eac:	6863      	ldr	r3, [r4, #4]
    5eae:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    5eb0:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5eb4:	aa02      	add	r2, sp, #8
    5eb6:	a901      	add	r1, sp, #4
    5eb8:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    5eba:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5ebc:	f01c f9f2 	bl	222a4 <nvs_prev_ate>
		if (rc) {
    5ec0:	2800      	cmp	r0, #0
    5ec2:	d1e7      	bne.n	5e94 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    5ec4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5ec8:	42bb      	cmp	r3, r7
    5eca:	d107      	bne.n	5edc <nvs_read_hist+0x74>
    5ecc:	a802      	add	r0, sp, #8
    5ece:	f01c f9bf 	bl	22250 <nvs_ate_crc8_check>
    5ed2:	b918      	cbnz	r0, 5edc <nvs_read_hist+0x74>
			cnt_his++;
    5ed4:	f10a 0a01 	add.w	sl, sl, #1
    5ed8:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    5edc:	6862      	ldr	r2, [r4, #4]
    5ede:	9b01      	ldr	r3, [sp, #4]
    5ee0:	429a      	cmp	r2, r3
    5ee2:	d018      	beq.n	5f16 <nvs_read_hist+0xae>
	while (cnt_his <= cnt) {
    5ee4:	45ca      	cmp	sl, r9
    5ee6:	d9e5      	bls.n	5eb4 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    5ee8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    5eec:	b1bb      	cbz	r3, 5f1e <nvs_read_hist+0xb6>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    5eee:	45ca      	cmp	sl, r9
    5ef0:	d315      	bcc.n	5f1e <nvs_read_hist+0xb6>
	rd_addr += wlk_ate.offset;
    5ef2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    5ef6:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    5ef8:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    5efa:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    5efe:	bf28      	it	cs
    5f00:	4633      	movcs	r3, r6
    5f02:	4642      	mov	r2, r8
    5f04:	4429      	add	r1, r5
    5f06:	4620      	mov	r0, r4
    5f08:	f01c f91e 	bl	22148 <nvs_flash_rd>
	if (rc) {
    5f0c:	2800      	cmp	r0, #0
    5f0e:	d1c1      	bne.n	5e94 <nvs_read_hist+0x2c>
	return wlk_ate.len;
    5f10:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    5f14:	e7be      	b.n	5e94 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    5f16:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5f1a:	42bb      	cmp	r3, r7
    5f1c:	d0e4      	beq.n	5ee8 <nvs_read_hist+0x80>
		return -ENOENT;
    5f1e:	f06f 0001 	mvn.w	r0, #1
    5f22:	e7b7      	b.n	5e94 <nvs_read_hist+0x2c>
		return -EINVAL;
    5f24:	f06f 0015 	mvn.w	r0, #21
    5f28:	e7b4      	b.n	5e94 <nvs_read_hist+0x2c>
    5f2a:	bf00      	nop
    5f2c:	00026fc8 	.word	0x00026fc8
    5f30:	000270c8 	.word	0x000270c8
    5f34:	0002ac54 	.word	0x0002ac54

00005f38 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    5f38:	4b08      	ldr	r3, [pc, #32]	; (5f5c <get_flash_area_from_id+0x24>)
{
    5f3a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    5f3c:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    5f3e:	4b08      	ldr	r3, [pc, #32]	; (5f60 <get_flash_area_from_id+0x28>)
{
    5f40:	4601      	mov	r1, r0
    5f42:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    5f44:	2300      	movs	r3, #0
    5f46:	429c      	cmp	r4, r3
    5f48:	dc01      	bgt.n	5f4e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    5f4a:	2000      	movs	r0, #0
}
    5f4c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    5f4e:	4610      	mov	r0, r2
    5f50:	3210      	adds	r2, #16
    5f52:	7805      	ldrb	r5, [r0, #0]
    5f54:	428d      	cmp	r5, r1
    5f56:	d0f9      	beq.n	5f4c <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    5f58:	3301      	adds	r3, #1
    5f5a:	e7f4      	b.n	5f46 <get_flash_area_from_id+0xe>
    5f5c:	000274d8 	.word	0x000274d8
    5f60:	2000028c 	.word	0x2000028c

00005f64 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    5f64:	4b08      	ldr	r3, [pc, #32]	; (5f88 <flash_area_open+0x24>)
    5f66:	681b      	ldr	r3, [r3, #0]
{
    5f68:	b510      	push	{r4, lr}
    5f6a:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    5f6c:	b12b      	cbz	r3, 5f7a <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    5f6e:	f7ff ffe3 	bl	5f38 <get_flash_area_from_id>
	if (area == NULL) {
    5f72:	b128      	cbz	r0, 5f80 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    5f74:	6020      	str	r0, [r4, #0]
	return 0;
    5f76:	2000      	movs	r0, #0
}
    5f78:	bd10      	pop	{r4, pc}
		return -EACCES;
    5f7a:	f06f 000c 	mvn.w	r0, #12
    5f7e:	e7fb      	b.n	5f78 <flash_area_open+0x14>
		return -ENOENT;
    5f80:	f06f 0001 	mvn.w	r0, #1
    5f84:	e7f8      	b.n	5f78 <flash_area_open+0x14>
    5f86:	bf00      	nop
    5f88:	2000028c 	.word	0x2000028c

00005f8c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    5f8c:	b530      	push	{r4, r5, lr}
    5f8e:	b089      	sub	sp, #36	; 0x24
    5f90:	460c      	mov	r4, r1
    5f92:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    5f94:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    5f96:	f7ff ffcf 	bl	5f38 <get_flash_area_from_id>
	if (fa == NULL) {
    5f9a:	b1b8      	cbz	r0, 5fcc <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    5f9c:	6843      	ldr	r3, [r0, #4]
    5f9e:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    5fa0:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    5fa2:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    5fa4:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    5fa6:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    5faa:	2300      	movs	r3, #0
	cb_data->status = 0;
    5fac:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    5fb0:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    5fb2:	f01c fa41 	bl	22438 <device_get_binding>
	if (flash_dev == NULL) {
    5fb6:	b160      	cbz	r0, 5fd2 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    5fb8:	4907      	ldr	r1, [pc, #28]	; (5fd8 <flash_area_get_sectors+0x4c>)
    5fba:	aa01      	add	r2, sp, #4
    5fbc:	f01f fffc 	bl	25fb8 <flash_page_foreach>
	if (cb_data->status == 0) {
    5fc0:	9807      	ldr	r0, [sp, #28]
    5fc2:	b908      	cbnz	r0, 5fc8 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    5fc4:	9b05      	ldr	r3, [sp, #20]
    5fc6:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    5fc8:	b009      	add	sp, #36	; 0x24
    5fca:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    5fcc:	f06f 0015 	mvn.w	r0, #21
    5fd0:	e7fa      	b.n	5fc8 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    5fd2:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    5fd6:	e7f7      	b.n	5fc8 <flash_area_get_sectors+0x3c>
    5fd8:	0002243d 	.word	0x0002243d

00005fdc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    5fdc:	4b10      	ldr	r3, [pc, #64]	; (6020 <settings_save_one+0x44>)
{
    5fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    5fe2:	681c      	ldr	r4, [r3, #0]
{
    5fe4:	4605      	mov	r5, r0
    5fe6:	460e      	mov	r6, r1
    5fe8:	4617      	mov	r7, r2
	if (!cs) {
    5fea:	b1ac      	cbz	r4, 6018 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    5fec:	f04f 32ff 	mov.w	r2, #4294967295
    5ff0:	f04f 33ff 	mov.w	r3, #4294967295
    5ff4:	480b      	ldr	r0, [pc, #44]	; (6024 <settings_save_one+0x48>)
    5ff6:	f019 f97b 	bl	1f2f0 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    5ffa:	6863      	ldr	r3, [r4, #4]
    5ffc:	4632      	mov	r2, r6
    5ffe:	f8d3 8008 	ldr.w	r8, [r3, #8]
    6002:	4629      	mov	r1, r5
    6004:	463b      	mov	r3, r7
    6006:	4620      	mov	r0, r4
    6008:	47c0      	blx	r8
    600a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    600c:	4805      	ldr	r0, [pc, #20]	; (6024 <settings_save_one+0x48>)
    600e:	f019 f9e1 	bl	1f3d4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    6012:	4620      	mov	r0, r4
    6014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    6018:	f06f 0401 	mvn.w	r4, #1
    601c:	e7f9      	b.n	6012 <settings_save_one+0x36>
    601e:	bf00      	nop
    6020:	2000d534 	.word	0x2000d534
    6024:	20009f74 	.word	0x20009f74

00006028 <settings_src_register>:
	parent->next = child;
    6028:	2300      	movs	r3, #0
    602a:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    602c:	4b04      	ldr	r3, [pc, #16]	; (6040 <settings_src_register+0x18>)
    602e:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    6030:	b912      	cbnz	r2, 6038 <settings_src_register+0x10>
	list->head = node;
    6032:	e9c3 0000 	strd	r0, r0, [r3]
}
    6036:	4770      	bx	lr
	parent->next = child;
    6038:	6010      	str	r0, [r2, #0]
	list->tail = node;
    603a:	6058      	str	r0, [r3, #4]
}
    603c:	4770      	bx	lr
    603e:	bf00      	nop
    6040:	2000d52c 	.word	0x2000d52c

00006044 <settings_dst_register>:
	settings_save_dst = cs;
    6044:	4b01      	ldr	r3, [pc, #4]	; (604c <settings_dst_register+0x8>)
    6046:	6018      	str	r0, [r3, #0]
}
    6048:	4770      	bx	lr
    604a:	bf00      	nop
    604c:	2000d534 	.word	0x2000d534

00006050 <settings_load_subtree>:
{
    6050:	b530      	push	{r4, r5, lr}
    6052:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    6054:	2300      	movs	r3, #0
{
    6056:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    6058:	e9cd 3302 	strd	r3, r3, [sp, #8]
    605c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    605e:	f04f 33ff 	mov.w	r3, #4294967295
    6062:	480c      	ldr	r0, [pc, #48]	; (6094 <settings_load_subtree+0x44>)
    6064:	f04f 32ff 	mov.w	r2, #4294967295
    6068:	f019 f942 	bl	1f2f0 <z_impl_k_mutex_lock>
	return list->head;
    606c:	4b0a      	ldr	r3, [pc, #40]	; (6098 <settings_load_subtree+0x48>)
    606e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    6070:	b134      	cbz	r4, 6080 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    6072:	6863      	ldr	r3, [r4, #4]
    6074:	4620      	mov	r0, r4
    6076:	681b      	ldr	r3, [r3, #0]
    6078:	a901      	add	r1, sp, #4
    607a:	4798      	blx	r3
	return node->next;
    607c:	6824      	ldr	r4, [r4, #0]
    607e:	e7f7      	b.n	6070 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    6080:	4628      	mov	r0, r5
    6082:	f000 f8d3 	bl	622c <settings_commit_subtree>
    6086:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    6088:	4802      	ldr	r0, [pc, #8]	; (6094 <settings_load_subtree+0x44>)
    608a:	f019 f9a3 	bl	1f3d4 <z_impl_k_mutex_unlock>
}
    608e:	4620      	mov	r0, r4
    6090:	b005      	add	sp, #20
    6092:	bd30      	pop	{r4, r5, pc}
    6094:	20009f74 	.word	0x20009f74
    6098:	2000d52c 	.word	0x2000d52c

0000609c <settings_load_subtree_direct>:
{
    609c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    609e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    60a2:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    60a4:	f04f 33ff 	mov.w	r3, #4294967295
    60a8:	480a      	ldr	r0, [pc, #40]	; (60d4 <settings_load_subtree_direct+0x38>)
    60aa:	f04f 32ff 	mov.w	r2, #4294967295
    60ae:	f019 f91f 	bl	1f2f0 <z_impl_k_mutex_lock>
	return list->head;
    60b2:	4b09      	ldr	r3, [pc, #36]	; (60d8 <settings_load_subtree_direct+0x3c>)
    60b4:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    60b6:	b134      	cbz	r4, 60c6 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    60b8:	6863      	ldr	r3, [r4, #4]
    60ba:	4620      	mov	r0, r4
    60bc:	681b      	ldr	r3, [r3, #0]
    60be:	a901      	add	r1, sp, #4
    60c0:	4798      	blx	r3
	return node->next;
    60c2:	6824      	ldr	r4, [r4, #0]
    60c4:	e7f7      	b.n	60b6 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    60c6:	4803      	ldr	r0, [pc, #12]	; (60d4 <settings_load_subtree_direct+0x38>)
    60c8:	f019 f984 	bl	1f3d4 <z_impl_k_mutex_unlock>
}
    60cc:	2000      	movs	r0, #0
    60ce:	b004      	add	sp, #16
    60d0:	bd10      	pop	{r4, pc}
    60d2:	bf00      	nop
    60d4:	20009f74 	.word	0x20009f74
    60d8:	2000d52c 	.word	0x2000d52c

000060dc <settings_store_init>:
	list->head = NULL;
    60dc:	4b02      	ldr	r3, [pc, #8]	; (60e8 <settings_store_init+0xc>)
    60de:	2200      	movs	r2, #0
	list->tail = NULL;
    60e0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    60e4:	4770      	bx	lr
    60e6:	bf00      	nop
    60e8:	2000d52c 	.word	0x2000d52c

000060ec <settings_init>:
	list->head = NULL;
    60ec:	4b02      	ldr	r3, [pc, #8]	; (60f8 <settings_init+0xc>)
    60ee:	2200      	movs	r2, #0
	list->tail = NULL;
    60f0:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    60f4:	f7ff bff2 	b.w	60dc <settings_store_init>
    60f8:	2000d538 	.word	0x2000d538

000060fc <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    60fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6100:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    6102:	460e      	mov	r6, r1
    6104:	b109      	cbz	r1, 610a <settings_parse_and_lookup+0xe>
		*next = NULL;
    6106:	2300      	movs	r3, #0
    6108:	600b      	str	r3, [r1, #0]
    610a:	4c1e      	ldr	r4, [pc, #120]	; (6184 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    610c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 6188 <settings_parse_and_lookup+0x8c>
    6110:	2500      	movs	r5, #0
    6112:	4544      	cmp	r4, r8
    6114:	d308      	bcc.n	6128 <settings_parse_and_lookup+0x2c>
	return list->head;
    6116:	4b1d      	ldr	r3, [pc, #116]	; (618c <settings_parse_and_lookup+0x90>)
    6118:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    611a:	b10c      	cbz	r4, 6120 <settings_parse_and_lookup+0x24>
    611c:	3c14      	subs	r4, #20
    611e:	b9c4      	cbnz	r4, 6152 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    6120:	4628      	mov	r0, r5
    6122:	b002      	add	sp, #8
    6124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    6128:	6821      	ldr	r1, [r4, #0]
    612a:	aa01      	add	r2, sp, #4
    612c:	4638      	mov	r0, r7
    612e:	f01c f9aa 	bl	22486 <settings_name_steq>
    6132:	b160      	cbz	r0, 614e <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    6134:	b925      	cbnz	r5, 6140 <settings_parse_and_lookup+0x44>
			if (next) {
    6136:	b10e      	cbz	r6, 613c <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    6138:	9b01      	ldr	r3, [sp, #4]
    613a:	6033      	str	r3, [r6, #0]
    613c:	4625      	mov	r5, r4
    613e:	e006      	b.n	614e <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    6140:	6829      	ldr	r1, [r5, #0]
    6142:	6820      	ldr	r0, [r4, #0]
    6144:	2200      	movs	r2, #0
    6146:	f01c f99e 	bl	22486 <settings_name_steq>
    614a:	2800      	cmp	r0, #0
    614c:	d1f3      	bne.n	6136 <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    614e:	3414      	adds	r4, #20
    6150:	e7df      	b.n	6112 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    6152:	6821      	ldr	r1, [r4, #0]
    6154:	aa01      	add	r2, sp, #4
    6156:	4638      	mov	r0, r7
    6158:	f01c f995 	bl	22486 <settings_name_steq>
    615c:	b160      	cbz	r0, 6178 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    615e:	b925      	cbnz	r5, 616a <settings_parse_and_lookup+0x6e>
			if (next) {
    6160:	b10e      	cbz	r6, 6166 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    6162:	9b01      	ldr	r3, [sp, #4]
    6164:	6033      	str	r3, [r6, #0]
    6166:	4625      	mov	r5, r4
    6168:	e006      	b.n	6178 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    616a:	6829      	ldr	r1, [r5, #0]
    616c:	6820      	ldr	r0, [r4, #0]
    616e:	2200      	movs	r2, #0
    6170:	f01c f989 	bl	22486 <settings_name_steq>
    6174:	2800      	cmp	r0, #0
    6176:	d1f3      	bne.n	6160 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6178:	f114 0f14 	cmn.w	r4, #20
    617c:	d0d0      	beq.n	6120 <settings_parse_and_lookup+0x24>
	return node->next;
    617e:	6964      	ldr	r4, [r4, #20]
    6180:	e7cb      	b.n	611a <settings_parse_and_lookup+0x1e>
    6182:	bf00      	nop
    6184:	00026f50 	.word	0x00026f50
    6188:	00026fc8 	.word	0x00026fc8
    618c:	2000d538 	.word	0x2000d538

00006190 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    6190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6194:	b085      	sub	sp, #20
    6196:	4605      	mov	r5, r0
    6198:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    619c:	9003      	str	r0, [sp, #12]
{
    619e:	460c      	mov	r4, r1
    61a0:	4616      	mov	r6, r2
    61a2:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
    61a4:	f1b8 0f00 	cmp.w	r8, #0
    61a8:	d018      	beq.n	61dc <settings_call_set_handler+0x4c>
    61aa:	f8d8 1000 	ldr.w	r1, [r8]
    61ae:	b181      	cbz	r1, 61d2 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    61b0:	aa03      	add	r2, sp, #12
    61b2:	f01c f968 	bl	22486 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    61b6:	b960      	cbnz	r0, 61d2 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    61b8:	2000      	movs	r0, #0
    61ba:	e007      	b.n	61cc <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    61bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    61c0:	9300      	str	r3, [sp, #0]
    61c2:	9803      	ldr	r0, [sp, #12]
    61c4:	463b      	mov	r3, r7
    61c6:	4632      	mov	r2, r6
    61c8:	4621      	mov	r1, r4
    61ca:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    61cc:	b005      	add	sp, #20
    61ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    61d2:	f8d8 9004 	ldr.w	r9, [r8, #4]
    61d6:	f1b9 0f00 	cmp.w	r9, #0
    61da:	d1ef      	bne.n	61bc <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    61dc:	a903      	add	r1, sp, #12
    61de:	4628      	mov	r0, r5
    61e0:	f7ff ff8c 	bl	60fc <settings_parse_and_lookup>
		if (!ch) {
    61e4:	2800      	cmp	r0, #0
    61e6:	d0e7      	beq.n	61b8 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    61e8:	f8d0 8008 	ldr.w	r8, [r0, #8]
    61ec:	9803      	ldr	r0, [sp, #12]
    61ee:	4632      	mov	r2, r6
    61f0:	463b      	mov	r3, r7
    61f2:	4621      	mov	r1, r4
    61f4:	47c0      	blx	r8
		if (rc != 0) {
    61f6:	4606      	mov	r6, r0
    61f8:	2800      	cmp	r0, #0
    61fa:	d0dd      	beq.n	61b8 <settings_call_set_handler+0x28>
    61fc:	4b08      	ldr	r3, [pc, #32]	; (6220 <settings_call_set_handler+0x90>)
    61fe:	4c09      	ldr	r4, [pc, #36]	; (6224 <settings_call_set_handler+0x94>)
			LOG_ERR("set-value failure. key: %s error(%d)",
    6200:	4628      	mov	r0, r5
    6202:	1ae4      	subs	r4, r4, r3
    6204:	08e4      	lsrs	r4, r4, #3
    6206:	f7fe fde5 	bl	4dd4 <log_strdup>
    620a:	01a4      	lsls	r4, r4, #6
    620c:	f044 0401 	orr.w	r4, r4, #1
    6210:	4601      	mov	r1, r0
    6212:	4623      	mov	r3, r4
    6214:	4804      	ldr	r0, [pc, #16]	; (6228 <settings_call_set_handler+0x98>)
    6216:	4632      	mov	r2, r6
    6218:	f01b fcc4 	bl	21ba4 <log_2>
    621c:	e7cc      	b.n	61b8 <settings_call_set_handler+0x28>
    621e:	bf00      	nop
    6220:	00026fc8 	.word	0x00026fc8
    6224:	00027110 	.word	0x00027110
    6228:	0002ad66 	.word	0x0002ad66

0000622c <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    622e:	4c1a      	ldr	r4, [pc, #104]	; (6298 <settings_commit_subtree+0x6c>)
    6230:	4f1a      	ldr	r7, [pc, #104]	; (629c <settings_commit_subtree+0x70>)
{
    6232:	4606      	mov	r6, r0
	rc = 0;
    6234:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6236:	42bc      	cmp	r4, r7
    6238:	d306      	bcc.n	6248 <settings_commit_subtree+0x1c>
	return list->head;
    623a:	4b19      	ldr	r3, [pc, #100]	; (62a0 <settings_commit_subtree+0x74>)
    623c:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    623e:	b10c      	cbz	r4, 6244 <settings_commit_subtree+0x18>
    6240:	3c14      	subs	r4, #20
    6242:	b99c      	cbnz	r4, 626c <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    6244:	4628      	mov	r0, r5
    6246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6248:	b91e      	cbnz	r6, 6252 <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    624a:	68e3      	ldr	r3, [r4, #12]
    624c:	b94b      	cbnz	r3, 6262 <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    624e:	3414      	adds	r4, #20
    6250:	e7f1      	b.n	6236 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6252:	6820      	ldr	r0, [r4, #0]
    6254:	2200      	movs	r2, #0
    6256:	4631      	mov	r1, r6
    6258:	f01c f915 	bl	22486 <settings_name_steq>
    625c:	2800      	cmp	r0, #0
    625e:	d1f4      	bne.n	624a <settings_commit_subtree+0x1e>
    6260:	e7f5      	b.n	624e <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    6262:	4798      	blx	r3
				rc = rc2;
    6264:	2d00      	cmp	r5, #0
    6266:	bf08      	it	eq
    6268:	4605      	moveq	r5, r0
    626a:	e7f0      	b.n	624e <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    626c:	b936      	cbnz	r6, 627c <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    626e:	68e3      	ldr	r3, [r4, #12]
    6270:	b963      	cbnz	r3, 628c <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6272:	f114 0f14 	cmn.w	r4, #20
    6276:	d0e5      	beq.n	6244 <settings_commit_subtree+0x18>
	return node->next;
    6278:	6964      	ldr	r4, [r4, #20]
    627a:	e7e0      	b.n	623e <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    627c:	6820      	ldr	r0, [r4, #0]
    627e:	2200      	movs	r2, #0
    6280:	4631      	mov	r1, r6
    6282:	f01c f900 	bl	22486 <settings_name_steq>
    6286:	2800      	cmp	r0, #0
    6288:	d1f1      	bne.n	626e <settings_commit_subtree+0x42>
    628a:	e7f2      	b.n	6272 <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    628c:	4798      	blx	r3
				rc = rc2;
    628e:	2d00      	cmp	r5, #0
    6290:	bf08      	it	eq
    6292:	4605      	moveq	r5, r0
    6294:	e7ed      	b.n	6272 <settings_commit_subtree+0x46>
    6296:	bf00      	nop
    6298:	00026f50 	.word	0x00026f50
    629c:	00026fc8 	.word	0x00026fc8
    62a0:	2000d538 	.word	0x2000d538

000062a4 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    62a4:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    62a6:	4c06      	ldr	r4, [pc, #24]	; (62c0 <settings_subsys_init+0x1c>)
    62a8:	7823      	ldrb	r3, [r4, #0]
    62aa:	b93b      	cbnz	r3, 62bc <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    62ac:	f7ff ff1e 	bl	60ec <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    62b0:	f000 f864 	bl	637c <settings_backend_init>

	if (!err) {
    62b4:	b908      	cbnz	r0, 62ba <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    62b6:	2301      	movs	r3, #1
    62b8:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    62ba:	bd10      	pop	{r4, pc}
		return 0;
    62bc:	2000      	movs	r0, #0
    62be:	e7fc      	b.n	62ba <settings_subsys_init+0x16>
    62c0:	2000ed3e 	.word	0x2000ed3e

000062c4 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    62c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    62c8:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    62ca:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 6378 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    62ce:	3401      	adds	r4, #1
{
    62d0:	b098      	sub	sp, #96	; 0x60
    62d2:	4680      	mov	r8, r0
    62d4:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
    62d6:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    62d8:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    62dc:	1e65      	subs	r5, r4, #1
    62de:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    62e0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    62e4:	d045      	beq.n	6372 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    62e6:	234a      	movs	r3, #74	; 0x4a
    62e8:	aa05      	add	r2, sp, #20
    62ea:	4629      	mov	r1, r5
    62ec:	4630      	mov	r0, r6
    62ee:	f01c f89c 	bl	2242a <nvs_read>
    62f2:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    62f6:	343f      	adds	r4, #63	; 0x3f
    62f8:	b2a4      	uxth	r4, r4
    62fa:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    62fc:	4621      	mov	r1, r4
    62fe:	2301      	movs	r3, #1
    6300:	f10d 020b 	add.w	r2, sp, #11
    6304:	4630      	mov	r0, r6
    6306:	f01c f890 	bl	2242a <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    630a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    630c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    630e:	dc03      	bgt.n	6318 <settings_nvs_load+0x54>
    6310:	2800      	cmp	r0, #0
    6312:	dc03      	bgt.n	631c <settings_nvs_load+0x58>
{
    6314:	462c      	mov	r4, r5
    6316:	e7e1      	b.n	62dc <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    6318:	2800      	cmp	r0, #0
    631a:	dc16      	bgt.n	634a <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    631c:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    6320:	42ab      	cmp	r3, r5
    6322:	d109      	bne.n	6338 <settings_nvs_load+0x74>
				cf->last_name_id--;
    6324:	4642      	mov	r2, r8
    6326:	1e6b      	subs	r3, r5, #1
    6328:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    632c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    6330:	2302      	movs	r3, #2
    6332:	4630      	mov	r0, r6
    6334:	f7ff fcc4 	bl	5cc0 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    6338:	4629      	mov	r1, r5
    633a:	4630      	mov	r0, r6
    633c:	f01c f871 	bl	22422 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    6340:	4621      	mov	r1, r4
    6342:	4630      	mov	r0, r6
    6344:	f01c f86d 	bl	22422 <nvs_delete>
			continue;
    6348:	e7e4      	b.n	6314 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    634a:	ab18      	add	r3, sp, #96	; 0x60
    634c:	441f      	add	r7, r3
    634e:	2300      	movs	r3, #0
    6350:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    6354:	4652      	mov	r2, sl
    6356:	f8cd 9000 	str.w	r9, [sp]
    635a:	ab03      	add	r3, sp, #12
    635c:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    635e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    6360:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    6364:	f7ff ff14 	bl	6190 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    6368:	2800      	cmp	r0, #0
    636a:	d0d3      	beq.n	6314 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    636c:	b018      	add	sp, #96	; 0x60
    636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6372:	2000      	movs	r0, #0
	return ret;
    6374:	e7fa      	b.n	636c <settings_nvs_load+0xa8>
    6376:	bf00      	nop
    6378:	000224f9 	.word	0x000224f9

0000637c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    637c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    637e:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    6380:	4669      	mov	r1, sp
    6382:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
    6384:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    6386:	f7ff fded 	bl	5f64 <flash_area_open>
	if (rc) {
    638a:	4604      	mov	r4, r0
    638c:	2800      	cmp	r0, #0
    638e:	d136      	bne.n	63fe <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    6390:	aa02      	add	r2, sp, #8
    6392:	a901      	add	r1, sp, #4
    6394:	2004      	movs	r0, #4
    6396:	f7ff fdf9 	bl	5f8c <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    639a:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    639e:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    63a0:	d02d      	beq.n	63fe <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    63a2:	b138      	cbz	r0, 63b4 <settings_backend_init+0x38>
    63a4:	340c      	adds	r4, #12
    63a6:	d005      	beq.n	63b4 <settings_backend_init+0x38>
		k_panic();
    63a8:	4040      	eors	r0, r0
    63aa:	f380 8811 	msr	BASEPRI, r0
    63ae:	f04f 0004 	mov.w	r0, #4
    63b2:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    63b4:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    63b6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    63ba:	d223      	bcs.n	6404 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    63bc:	9a00      	ldr	r2, [sp, #0]
    63be:	2300      	movs	r3, #0
    63c0:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    63c2:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    63c4:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    63c6:	4285      	cmp	r5, r0
    63c8:	b29c      	uxth	r4, r3
    63ca:	d303      	bcc.n	63d4 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    63cc:	3301      	adds	r3, #1
    63ce:	2b08      	cmp	r3, #8
    63d0:	d1f8      	bne.n	63c4 <settings_backend_init+0x48>
    63d2:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    63d4:	4d0d      	ldr	r5, [pc, #52]	; (640c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    63d6:	6853      	ldr	r3, [r2, #4]
    63d8:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    63da:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    63dc:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    63de:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    63e0:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    63e2:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    63e4:	f01c f91f 	bl	22626 <settings_nvs_backend_init>
	if (rc) {
    63e8:	4604      	mov	r4, r0
    63ea:	b940      	cbnz	r0, 63fe <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    63ec:	4e08      	ldr	r6, [pc, #32]	; (6410 <settings_backend_init+0x94>)
    63ee:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    63f0:	4628      	mov	r0, r5
    63f2:	f7ff fe19 	bl	6028 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    63f6:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    63f8:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    63fa:	f7ff fe23 	bl	6044 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    63fe:	4620      	mov	r0, r4
    6400:	b004      	add	sp, #16
    6402:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    6404:	f06f 0424 	mvn.w	r4, #36	; 0x24
    6408:	e7f9      	b.n	63fe <settings_backend_init+0x82>
    640a:	bf00      	nop
    640c:	2000d540 	.word	0x2000d540
    6410:	20000290 	.word	0x20000290

00006414 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    6414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6416:	4605      	mov	r5, r0
	__asm__ volatile(
    6418:	f04f 0320 	mov.w	r3, #32
    641c:	f3ef 8611 	mrs	r6, BASEPRI
    6420:	f383 8811 	msr	BASEPRI, r3
    6424:	f3bf 8f6f 	isb	sy
	return list->head;
    6428:	4b09      	ldr	r3, [pc, #36]	; (6450 <pm_state_notify+0x3c>)
    642a:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    642c:	b15c      	cbz	r4, 6446 <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    642e:	4f09      	ldr	r7, [pc, #36]	; (6454 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    6430:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    6434:	2d00      	cmp	r5, #0
    6436:	bf08      	it	eq
    6438:	4613      	moveq	r3, r2
		if (callback) {
    643a:	b10b      	cbz	r3, 6440 <pm_state_notify+0x2c>
			callback(z_power_state.state);
    643c:	7838      	ldrb	r0, [r7, #0]
    643e:	4798      	blx	r3
	return node->next;
    6440:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6442:	2c00      	cmp	r4, #0
    6444:	d1f4      	bne.n	6430 <pm_state_notify+0x1c>
	__asm__ volatile(
    6446:	f386 8811 	msr	BASEPRI, r6
    644a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    644e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6450:	2000d580 	.word	0x2000d580
    6454:	2000d588 	.word	0x2000d588

00006458 <pm_system_suspend>:
	return z_power_state.state;
}


enum pm_state pm_system_suspend(int32_t ticks)
{
    6458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (z_forced_power_state == false) {
    645c:	4f18      	ldr	r7, [pc, #96]	; (64c0 <pm_system_suspend+0x68>)
    645e:	4c19      	ldr	r4, [pc, #100]	; (64c4 <pm_system_suspend+0x6c>)
    6460:	783b      	ldrb	r3, [r7, #0]
{
    6462:	4601      	mov	r1, r0
	if (z_forced_power_state == false) {
    6464:	b93b      	cbnz	r3, 6476 <pm_system_suspend+0x1e>
		z_power_state = pm_policy_next_state(ticks);
    6466:	466d      	mov	r5, sp
    6468:	4628      	mov	r0, r5
    646a:	f01c f8f8 	bl	2265e <pm_policy_next_state>
    646e:	e895 0003 	ldmia.w	r5, {r0, r1}
    6472:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    6476:	7825      	ldrb	r5, [r4, #0]
    6478:	b1f5      	cbz	r5, 64b8 <pm_system_suspend+0x60>
	post_ops_done = 0;
    647a:	4e13      	ldr	r6, [pc, #76]	; (64c8 <pm_system_suspend+0x70>)
    647c:	f04f 0800 	mov.w	r8, #0
	pm_state_notify(true);
    6480:	2001      	movs	r0, #1
	if (deep_sleep) {
    6482:	3d04      	subs	r5, #4
	post_ops_done = 0;
    6484:	f8c6 8000 	str.w	r8, [r6]
	pm_state_notify(true);
    6488:	f7ff ffc4 	bl	6414 <pm_state_notify>
	if (deep_sleep) {
    648c:	2d01      	cmp	r5, #1
 * pm_system_suspend to disable the corresponding pm_system_resume notification.
 *
 */
static inline void pm_idle_exit_notification_disable(void)
{
	pm_idle_exit_notify = 0U;
    648e:	bf98      	it	ls
    6490:	4b0e      	ldrls	r3, [pc, #56]	; (64cc <pm_system_suspend+0x74>)
	pm_power_state_set(z_power_state);
    6492:	e894 0003 	ldmia.w	r4, {r0, r1}
    6496:	bf98      	it	ls
    6498:	f883 8000 	strbls.w	r8, [r3]
    649c:	f01d fbcf 	bl	23c3e <pm_power_state_set>
	if (!post_ops_done) {
    64a0:	6830      	ldr	r0, [r6, #0]
    64a2:	b940      	cbnz	r0, 64b6 <pm_system_suspend+0x5e>
		post_ops_done = 1;
    64a4:	2301      	movs	r3, #1
		z_forced_power_state = false;
    64a6:	7038      	strb	r0, [r7, #0]
		post_ops_done = 1;
    64a8:	6033      	str	r3, [r6, #0]
		pm_state_notify(false);
    64aa:	f7ff ffb3 	bl	6414 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    64ae:	e894 0003 	ldmia.w	r4, {r0, r1}
    64b2:	f01d fbd7 	bl	23c64 <pm_power_state_exit_post_ops>
	return z_power_state.state;
    64b6:	7825      	ldrb	r5, [r4, #0]
	return pm_policy_mgr(ticks);
}
    64b8:	4628      	mov	r0, r5
    64ba:	b002      	add	sp, #8
    64bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64c0:	2000ed3f 	.word	0x2000ed3f
    64c4:	2000d588 	.word	0x2000d588
    64c8:	200002a0 	.word	0x200002a0
    64cc:	2000f2bf 	.word	0x2000f2bf

000064d0 <pm_system_resume>:

void pm_system_resume(void)
{
    64d0:	b508      	push	{r3, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    64d2:	4b06      	ldr	r3, [pc, #24]	; (64ec <pm_system_resume+0x1c>)
    64d4:	6818      	ldr	r0, [r3, #0]
    64d6:	b940      	cbnz	r0, 64ea <pm_system_resume+0x1a>
		post_ops_done = 1;
    64d8:	2201      	movs	r2, #1
    64da:	601a      	str	r2, [r3, #0]
		pm_state_notify(false);
    64dc:	f7ff ff9a 	bl	6414 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    64e0:	4b03      	ldr	r3, [pc, #12]	; (64f0 <pm_system_resume+0x20>)
    64e2:	e893 0003 	ldmia.w	r3, {r0, r1}
    64e6:	f01d fbbd 	bl	23c64 <pm_power_state_exit_post_ops>
	}
}
    64ea:	bd08      	pop	{r3, pc}
    64ec:	200002a0 	.word	0x200002a0
    64f0:	2000d588 	.word	0x2000d588

000064f4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    64f4:	b510      	push	{r4, lr}
    64f6:	4807      	ldr	r0, [pc, #28]	; (6514 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    64f8:	4c07      	ldr	r4, [pc, #28]	; (6518 <uart_console_init+0x24>)
    64fa:	f018 fcd5 	bl	1eea8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    64fe:	4b07      	ldr	r3, [pc, #28]	; (651c <uart_console_init+0x28>)
    6500:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    6502:	4620      	mov	r0, r4
    6504:	f001 f97a 	bl	77fc <__stdout_hook_install>
	__printk_hook_install(console_out);
    6508:	4620      	mov	r0, r4
    650a:	f7fd febd 	bl	4288 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    650e:	2000      	movs	r0, #0
    6510:	bd10      	pop	{r4, pc}
    6512:	bf00      	nop
    6514:	0002ac13 	.word	0x0002ac13
    6518:	00006521 	.word	0x00006521
    651c:	2000d590 	.word	0x2000d590

00006520 <console_out>:
	if ('\n' == c) {
    6520:	280a      	cmp	r0, #10
{
    6522:	b538      	push	{r3, r4, r5, lr}
    6524:	4d07      	ldr	r5, [pc, #28]	; (6544 <console_out+0x24>)
    6526:	4604      	mov	r4, r0
	if ('\n' == c) {
    6528:	d104      	bne.n	6534 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    652a:	6828      	ldr	r0, [r5, #0]
    652c:	6883      	ldr	r3, [r0, #8]
    652e:	210d      	movs	r1, #13
    6530:	685b      	ldr	r3, [r3, #4]
    6532:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    6534:	6828      	ldr	r0, [r5, #0]
    6536:	6883      	ldr	r3, [r0, #8]
    6538:	b2e1      	uxtb	r1, r4
    653a:	685b      	ldr	r3, [r3, #4]
    653c:	4798      	blx	r3
}
    653e:	4620      	mov	r0, r4
    6540:	bd38      	pop	{r3, r4, r5, pc}
    6542:	bf00      	nop
    6544:	2000d590 	.word	0x2000d590

00006548 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6548:	4b08      	ldr	r3, [pc, #32]	; (656c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    654a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    654c:	1ac3      	subs	r3, r0, r3
{
    654e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6550:	4907      	ldr	r1, [pc, #28]	; (6570 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    6552:	109b      	asrs	r3, r3, #2
{
    6554:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6556:	4359      	muls	r1, r3
    6558:	4806      	ldr	r0, [pc, #24]	; (6574 <onoff_stop+0x2c>)
    655a:	2240      	movs	r2, #64	; 0x40
    655c:	f01c f89f 	bl	2269e <stop>
	notify(mgr, res);
    6560:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6562:	4601      	mov	r1, r0
	notify(mgr, res);
    6564:	4620      	mov	r0, r4
}
    6566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    656a:	4718      	bx	r3
    656c:	2000d5a4 	.word	0x2000d5a4
    6570:	b6db6db7 	.word	0xb6db6db7
    6574:	20009d48 	.word	0x20009d48

00006578 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6578:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    657a:	4c0c      	ldr	r4, [pc, #48]	; (65ac <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    657c:	4a0c      	ldr	r2, [pc, #48]	; (65b0 <onoff_start+0x38>)
    657e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    6580:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6582:	9300      	str	r3, [sp, #0]
{
    6584:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6586:	460b      	mov	r3, r1
    6588:	490a      	ldr	r1, [pc, #40]	; (65b4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    658a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    658c:	4361      	muls	r1, r4
{
    658e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6590:	4809      	ldr	r0, [pc, #36]	; (65b8 <onoff_start+0x40>)
    6592:	f01c f8b1 	bl	226f8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6596:	1e01      	subs	r1, r0, #0
    6598:	da05      	bge.n	65a6 <onoff_start+0x2e>
		notify(mgr, err);
    659a:	4630      	mov	r0, r6
    659c:	462b      	mov	r3, r5
	}
}
    659e:	b002      	add	sp, #8
    65a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    65a4:	4718      	bx	r3
}
    65a6:	b002      	add	sp, #8
    65a8:	bd70      	pop	{r4, r5, r6, pc}
    65aa:	bf00      	nop
    65ac:	2000d5a4 	.word	0x2000d5a4
    65b0:	00022767 	.word	0x00022767
    65b4:	b6db6db7 	.word	0xb6db6db7
    65b8:	20009d48 	.word	0x20009d48

000065bc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    65bc:	2200      	movs	r2, #0
{
    65be:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    65c0:	2101      	movs	r1, #1
{
    65c2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    65c4:	4610      	mov	r0, r2
    65c6:	f000 fcab 	bl	6f20 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    65ca:	2000      	movs	r0, #0
    65cc:	f000 fc76 	bl	6ebc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    65d0:	480f      	ldr	r0, [pc, #60]	; (6610 <clk_init+0x54>)
    65d2:	f017 ff63 	bl	1e49c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    65d6:	4b0f      	ldr	r3, [pc, #60]	; (6614 <clk_init+0x58>)
    65d8:	4298      	cmp	r0, r3
    65da:	d115      	bne.n	6608 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    65dc:	f01f fd6c 	bl	260b8 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    65e0:	68e6      	ldr	r6, [r4, #12]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    65e2:	490d      	ldr	r1, [pc, #52]	; (6618 <clk_init+0x5c>)
    65e4:	4630      	mov	r0, r6
    65e6:	f01a febe 	bl	21366 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    65ea:	2800      	cmp	r0, #0
    65ec:	db0b      	blt.n	6606 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    65ee:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    65f0:	4909      	ldr	r1, [pc, #36]	; (6618 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    65f2:	2501      	movs	r5, #1
    65f4:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    65f6:	f104 001c 	add.w	r0, r4, #28
    65fa:	f01a feb4 	bl	21366 <onoff_manager_init>
		if (err < 0) {
    65fe:	2800      	cmp	r0, #0
    6600:	db01      	blt.n	6606 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6602:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    6604:	2000      	movs	r0, #0
}
    6606:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6608:	f06f 0004 	mvn.w	r0, #4
    660c:	e7fb      	b.n	6606 <clk_init+0x4a>
    660e:	bf00      	nop
    6610:	00006651 	.word	0x00006651
    6614:	0bad0000 	.word	0x0bad0000
    6618:	00027508 	.word	0x00027508

0000661c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    661c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    661e:	230c      	movs	r3, #12
    6620:	4809      	ldr	r0, [pc, #36]	; (6648 <clkstarted_handle.constprop.0+0x2c>)
    6622:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    6624:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    6626:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    6628:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    662c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    662e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    6630:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    6632:	4418      	add	r0, r3
    6634:	f01c f820 	bl	22678 <set_on_state>
	if (callback) {
    6638:	b12d      	cbz	r5, 6646 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    663a:	4632      	mov	r2, r6
    663c:	462b      	mov	r3, r5
    663e:	4803      	ldr	r0, [pc, #12]	; (664c <clkstarted_handle.constprop.0+0x30>)
}
    6640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    6644:	4718      	bx	r3
}
    6646:	bd70      	pop	{r4, r5, r6, pc}
    6648:	2000d5a4 	.word	0x2000d5a4
    664c:	20009d48 	.word	0x20009d48

00006650 <clock_event_handler>:
	switch (event) {
    6650:	b110      	cbz	r0, 6658 <clock_event_handler+0x8>
    6652:	2801      	cmp	r0, #1
    6654:	d004      	beq.n	6660 <clock_event_handler+0x10>
    6656:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    6658:	4b03      	ldr	r3, [pc, #12]	; (6668 <clock_event_handler+0x18>)
    665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    665c:	075b      	lsls	r3, r3, #29
    665e:	d101      	bne.n	6664 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6660:	f7ff bfdc 	b.w	661c <clkstarted_handle.constprop.0>
}
    6664:	4770      	bx	lr
    6666:	bf00      	nop
    6668:	2000d5a4 	.word	0x2000d5a4

0000666c <generic_hfclk_start>:
{
    666c:	b508      	push	{r3, lr}
	__asm__ volatile(
    666e:	f04f 0320 	mov.w	r3, #32
    6672:	f3ef 8111 	mrs	r1, BASEPRI
    6676:	f383 8811 	msr	BASEPRI, r3
    667a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    667e:	4a12      	ldr	r2, [pc, #72]	; (66c8 <generic_hfclk_start+0x5c>)
    6680:	6813      	ldr	r3, [r2, #0]
    6682:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    6686:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    668a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    668c:	d00c      	beq.n	66a8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    668e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6692:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6696:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    669a:	f013 0301 	ands.w	r3, r3, #1
    669e:	d003      	beq.n	66a8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    66a0:	480a      	ldr	r0, [pc, #40]	; (66cc <generic_hfclk_start+0x60>)
    66a2:	f01b ffe9 	bl	22678 <set_on_state>
			already_started = true;
    66a6:	2301      	movs	r3, #1
	__asm__ volatile(
    66a8:	f381 8811 	msr	BASEPRI, r1
    66ac:	f3bf 8f6f 	isb	sy
	if (already_started) {
    66b0:	b123      	cbz	r3, 66bc <generic_hfclk_start+0x50>
}
    66b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    66b6:	2000      	movs	r0, #0
    66b8:	f7ff bfb0 	b.w	661c <clkstarted_handle.constprop.0>
}
    66bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    66c0:	2001      	movs	r0, #1
    66c2:	f01f bd03 	b.w	260cc <nrfx_clock_start>
    66c6:	bf00      	nop
    66c8:	2000d5f4 	.word	0x2000d5f4
    66cc:	2000d5e4 	.word	0x2000d5e4

000066d0 <api_blocking_start>:
{
    66d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    66d2:	2200      	movs	r2, #0
    66d4:	2301      	movs	r3, #1
    66d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    66da:	ab04      	add	r3, sp, #16
    66dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    66e0:	4a09      	ldr	r2, [pc, #36]	; (6708 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    66e2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    66e6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    66e8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    66ec:	f01c f834 	bl	22758 <api_start>
	if (err < 0) {
    66f0:	2800      	cmp	r0, #0
    66f2:	db05      	blt.n	6700 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    66f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    66f8:	2300      	movs	r3, #0
    66fa:	4668      	mov	r0, sp
    66fc:	f019 fa90 	bl	1fc20 <z_impl_k_sem_take>
}
    6700:	b007      	add	sp, #28
    6702:	f85d fb04 	ldr.w	pc, [sp], #4
    6706:	bf00      	nop
    6708:	00022785 	.word	0x00022785

0000670c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    670c:	4b09      	ldr	r3, [pc, #36]	; (6734 <generic_hfclk_stop+0x28>)
    670e:	f3bf 8f5b 	dmb	ish
    6712:	e853 2f00 	ldrex	r2, [r3]
    6716:	f022 0102 	bic.w	r1, r2, #2
    671a:	e843 1000 	strex	r0, r1, [r3]
    671e:	2800      	cmp	r0, #0
    6720:	d1f7      	bne.n	6712 <generic_hfclk_stop+0x6>
    6722:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6726:	07d3      	lsls	r3, r2, #31
    6728:	d402      	bmi.n	6730 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    672a:	2001      	movs	r0, #1
    672c:	f017 bec6 	b.w	1e4bc <nrfx_clock_stop>
}
    6730:	4770      	bx	lr
    6732:	bf00      	nop
    6734:	2000d5f4 	.word	0x2000d5f4

00006738 <z_nrf_clock_control_get_onoff>:
}
    6738:	4a02      	ldr	r2, [pc, #8]	; (6744 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    673a:	b2c3      	uxtb	r3, r0
}
    673c:	201c      	movs	r0, #28
    673e:	fb03 2000 	mla	r0, r3, r0, r2
    6742:	4770      	bx	lr
    6744:	2000d5a4 	.word	0x2000d5a4

00006748 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6748:	4b09      	ldr	r3, [pc, #36]	; (6770 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    674a:	f3bf 8f5b 	dmb	ish
    674e:	e853 2f00 	ldrex	r2, [r3]
    6752:	f042 0101 	orr.w	r1, r2, #1
    6756:	e843 1000 	strex	r0, r1, [r3]
    675a:	2800      	cmp	r0, #0
    675c:	d1f7      	bne.n	674e <z_nrf_clock_bt_ctlr_hf_request+0x6>
    675e:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    6762:	0793      	lsls	r3, r2, #30
    6764:	d402      	bmi.n	676c <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6766:	2001      	movs	r0, #1
    6768:	f01f bcb0 	b.w	260cc <nrfx_clock_start>
}
    676c:	4770      	bx	lr
    676e:	bf00      	nop
    6770:	2000d5f4 	.word	0x2000d5f4

00006774 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6774:	4b09      	ldr	r3, [pc, #36]	; (679c <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    6776:	f3bf 8f5b 	dmb	ish
    677a:	e853 2f00 	ldrex	r2, [r3]
    677e:	f022 0101 	bic.w	r1, r2, #1
    6782:	e843 1000 	strex	r0, r1, [r3]
    6786:	2800      	cmp	r0, #0
    6788:	d1f7      	bne.n	677a <z_nrf_clock_bt_ctlr_hf_release+0x6>
    678a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    678e:	0793      	lsls	r3, r2, #30
    6790:	d402      	bmi.n	6798 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6792:	2001      	movs	r0, #1
    6794:	f017 be92 	b.w	1e4bc <nrfx_clock_stop>
}
    6798:	4770      	bx	lr
    679a:	bf00      	nop
    679c:	2000d5f4 	.word	0x2000d5f4

000067a0 <z_nrf_clock_control_lf_on>:
{
    67a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    67a4:	4939      	ldr	r1, [pc, #228]	; (688c <z_nrf_clock_control_lf_on+0xec>)
    67a6:	f3bf 8f5b 	dmb	ish
    67aa:	4607      	mov	r7, r0
    67ac:	2201      	movs	r2, #1
    67ae:	e851 3f00 	ldrex	r3, [r1]
    67b2:	e841 2000 	strex	r0, r2, [r1]
    67b6:	2800      	cmp	r0, #0
    67b8:	d1f9      	bne.n	67ae <z_nrf_clock_control_lf_on+0xe>
    67ba:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    67be:	b933      	cbnz	r3, 67ce <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    67c0:	4933      	ldr	r1, [pc, #204]	; (6890 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    67c2:	4834      	ldr	r0, [pc, #208]	; (6894 <z_nrf_clock_control_lf_on+0xf4>)
    67c4:	604b      	str	r3, [r1, #4]
    67c6:	60cb      	str	r3, [r1, #12]
    67c8:	608a      	str	r2, [r1, #8]
    67ca:	f01a fddf 	bl	2138c <onoff_request>
	switch (start_mode) {
    67ce:	1e7b      	subs	r3, r7, #1
    67d0:	2b01      	cmp	r3, #1
    67d2:	d82f      	bhi.n	6834 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    67d4:	2f01      	cmp	r7, #1
    67d6:	d107      	bne.n	67e8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    67d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    67dc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    67e0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    67e4:	2b01      	cmp	r3, #1
    67e6:	d025      	beq.n	6834 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    67e8:	f020 f804 	bl	267f4 <k_is_in_isr>
    67ec:	4604      	mov	r4, r0
    67ee:	b918      	cbnz	r0, 67f8 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    67f0:	4b29      	ldr	r3, [pc, #164]	; (6898 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    67f2:	781b      	ldrb	r3, [r3, #0]
    67f4:	2b00      	cmp	r3, #0
    67f6:	d141      	bne.n	687c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    67f8:	f04f 0320 	mov.w	r3, #32
    67fc:	f3ef 8611 	mrs	r6, BASEPRI
    6800:	f383 8811 	msr	BASEPRI, r3
    6804:	f3bf 8f6f 	isb	sy
    6808:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    680a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 689c <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    680e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    6812:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6816:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    681a:	03d2      	lsls	r2, r2, #15
    681c:	d50c      	bpl.n	6838 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    681e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6822:	2b01      	cmp	r3, #1
    6824:	d001      	beq.n	682a <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    6826:	2f01      	cmp	r7, #1
    6828:	d106      	bne.n	6838 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    682a:	b30c      	cbz	r4, 6870 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    682c:	f386 8811 	msr	BASEPRI, r6
    6830:	f3bf 8f6f 	isb	sy
}
    6834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    6838:	b1ac      	cbz	r4, 6866 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    683a:	4630      	mov	r0, r6
    683c:	f000 fbf6 	bl	702c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6840:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    6844:	2b00      	cmp	r3, #0
    6846:	d1e4      	bne.n	6812 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6848:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    684c:	2a00      	cmp	r2, #0
    684e:	d0e0      	beq.n	6812 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6850:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    6854:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    6858:	2301      	movs	r3, #1
    685a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    685e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6862:	60ab      	str	r3, [r5, #8]
}
    6864:	e7d5      	b.n	6812 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    6866:	2100      	movs	r1, #0
    6868:	2021      	movs	r0, #33	; 0x21
    686a:	f019 f993 	bl	1fb94 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    686e:	e7e7      	b.n	6840 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    6870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6874:	2202      	movs	r2, #2
    6876:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    687a:	e7db      	b.n	6834 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    687c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6880:	2202      	movs	r2, #2
    6882:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    6886:	4606      	mov	r6, r0
}
    6888:	e7bf      	b.n	680a <z_nrf_clock_control_lf_on+0x6a>
    688a:	bf00      	nop
    688c:	2000d5f8 	.word	0x2000d5f8
    6890:	2000d594 	.word	0x2000d594
    6894:	2000d5c0 	.word	0x2000d5c0
    6898:	2000f2c0 	.word	0x2000f2c0
    689c:	e000e100 	.word	0xe000e100

000068a0 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    68a0:	4a04      	ldr	r2, [pc, #16]	; (68b4 <sys_clock_timeout_handler+0x14>)
    68a2:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    68a4:	1ac8      	subs	r0, r1, r3
    68a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    68aa:	4403      	add	r3, r0
    68ac:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    68ae:	f019 bc1d 	b.w	200ec <z_clock_announce>
    68b2:	bf00      	nop
    68b4:	2000d608 	.word	0x2000d608

000068b8 <set_absolute_alarm>:
{
    68b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    68bc:	0086      	lsls	r6, r0, #2
    68be:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    68c2:	f100 0450 	add.w	r4, r0, #80	; 0x50
    68c6:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    68ca:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    68cc:	b2a4      	uxth	r4, r4
    68ce:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    68d2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    68d6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    68da:	f8df 806c 	ldr.w	r8, [pc, #108]	; 6948 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    68de:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    68e2:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    68e6:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    68e8:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    68ec:	eba3 0309 	sub.w	r3, r3, r9
    68f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    68f4:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    68f8:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    68fa:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    68fe:	d102      	bne.n	6906 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    6900:	2013      	movs	r0, #19
    6902:	f01f ff7d 	bl	26800 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    6906:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    690a:	1aab      	subs	r3, r5, r2
    690c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    6910:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    6914:	bf88      	it	hi
    6916:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6918:	2300      	movs	r3, #0
    691a:	6023      	str	r3, [r4, #0]
    691c:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    691e:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6922:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    6926:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    692a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    692e:	4599      	cmp	r9, r3
    6930:	d006      	beq.n	6940 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    6932:	1aeb      	subs	r3, r5, r3
    6934:	3b02      	subs	r3, #2
    6936:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    693a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    693e:	d801      	bhi.n	6944 <set_absolute_alarm+0x8c>
}
    6940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    6944:	462b      	mov	r3, r5
    6946:	e7cf      	b.n	68e8 <set_absolute_alarm+0x30>
    6948:	40011000 	.word	0x40011000

0000694c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    694e:	2500      	movs	r5, #0
    return p_reg->INTENSET & mask;
    6950:	4c10      	ldr	r4, [pc, #64]	; (6994 <rtc_nrf_isr+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6952:	462f      	mov	r7, r5
    6954:	4b10      	ldr	r3, [pc, #64]	; (6998 <rtc_nrf_isr+0x4c>)
    6956:	681e      	ldr	r6, [r3, #0]
    6958:	b105      	cbz	r5, 695c <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    695c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    6960:	03d2      	lsls	r2, r2, #15
    6962:	d5fa      	bpl.n	695a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6964:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    6968:	2a00      	cmp	r2, #0
    696a:	d0f6      	beq.n	695a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    696c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    6970:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6974:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6978:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    697c:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6980:	2501      	movs	r5, #1
			if (handler) {
    6982:	b126      	cbz	r6, 698e <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    6984:	685a      	ldr	r2, [r3, #4]
    6986:	601f      	str	r7, [r3, #0]
    6988:	2000      	movs	r0, #0
    698a:	47b0      	blx	r6
    698c:	e7e2      	b.n	6954 <rtc_nrf_isr+0x8>
    698e:	601e      	str	r6, [r3, #0]
}
    6990:	e7e3      	b.n	695a <rtc_nrf_isr+0xe>
    6992:	bf00      	nop
    6994:	40011000 	.word	0x40011000
    6998:	2000d5fc 	.word	0x2000d5fc

0000699c <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    699c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    699e:	4c0f      	ldr	r4, [pc, #60]	; (69dc <z_clock_driver_init+0x40>)
    69a0:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    69a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    69a6:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    69aa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    69ae:	4b0c      	ldr	r3, [pc, #48]	; (69e0 <z_clock_driver_init+0x44>)
    69b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    69b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    69b8:	2101      	movs	r1, #1
    69ba:	462a      	mov	r2, r5
    69bc:	2011      	movs	r0, #17
    69be:	f000 faaf 	bl	6f20 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    69c2:	2011      	movs	r0, #17
    69c4:	f000 fa7a 	bl	6ebc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    69c8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    69ca:	4a06      	ldr	r2, [pc, #24]	; (69e4 <z_clock_driver_init+0x48>)
    69cc:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    69ce:	2002      	movs	r0, #2
    69d0:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    69d2:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    69d4:	f7ff fee4 	bl	67a0 <z_nrf_clock_control_lf_on>

	return 0;
}
    69d8:	4628      	mov	r0, r5
    69da:	bd38      	pop	{r3, r4, r5, pc}
    69dc:	40011000 	.word	0x40011000
    69e0:	e000e100 	.word	0xe000e100
    69e4:	2000d604 	.word	0x2000d604

000069e8 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    69e8:	4a13      	ldr	r2, [pc, #76]	; (6a38 <z_clock_set_timeout+0x50>)
    69ea:	f1b0 3fff 	cmp.w	r0, #4294967295
    69ee:	bf14      	ite	ne
    69f0:	4603      	movne	r3, r0
    69f2:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    69f4:	3b01      	subs	r3, #1
    69f6:	2b00      	cmp	r3, #0
    69f8:	dd1c      	ble.n	6a34 <z_clock_set_timeout+0x4c>
    69fa:	4293      	cmp	r3, r2
    69fc:	bfa8      	it	ge
    69fe:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    6a00:	4a0e      	ldr	r2, [pc, #56]	; (6a3c <z_clock_set_timeout+0x54>)
    6a02:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    6a06:	4a0e      	ldr	r2, [pc, #56]	; (6a40 <z_clock_set_timeout+0x58>)
    6a08:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    6a0a:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    6a0c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    6a10:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    6a14:	bf18      	it	ne
    6a16:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6a18:	3201      	adds	r2, #1
    6a1a:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    6a1c:	4a09      	ldr	r2, [pc, #36]	; (6a44 <z_clock_set_timeout+0x5c>)
    6a1e:	480a      	ldr	r0, [pc, #40]	; (6a48 <z_clock_set_timeout+0x60>)
    6a20:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    6a22:	2000      	movs	r0, #0
    6a24:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    6a26:	4a04      	ldr	r2, [pc, #16]	; (6a38 <z_clock_set_timeout+0x50>)
    6a28:	4293      	cmp	r3, r2
    6a2a:	bf94      	ite	ls
    6a2c:	18c9      	addls	r1, r1, r3
    6a2e:	1889      	addhi	r1, r1, r2
    6a30:	f7ff bf42 	b.w	68b8 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6a34:	2300      	movs	r3, #0
    6a36:	e7e3      	b.n	6a00 <z_clock_set_timeout+0x18>
    6a38:	007fffff 	.word	0x007fffff
    6a3c:	40011000 	.word	0x40011000
    6a40:	2000d608 	.word	0x2000d608
    6a44:	2000d5fc 	.word	0x2000d5fc
    6a48:	000068a1 	.word	0x000068a1

00006a4c <z_clock_elapsed>:
	__asm__ volatile(
    6a4c:	f04f 0220 	mov.w	r2, #32
    6a50:	f3ef 8311 	mrs	r3, BASEPRI
    6a54:	f382 8811 	msr	BASEPRI, r2
    6a58:	f3bf 8f6f 	isb	sy
    6a5c:	4a06      	ldr	r2, [pc, #24]	; (6a78 <z_clock_elapsed+0x2c>)
    6a5e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    6a62:	4a06      	ldr	r2, [pc, #24]	; (6a7c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    6a64:	6812      	ldr	r2, [r2, #0]
    6a66:	1a80      	subs	r0, r0, r2
    6a68:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    6a6c:	f383 8811 	msr	BASEPRI, r3
    6a70:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    6a74:	4770      	bx	lr
    6a76:	bf00      	nop
    6a78:	40011000 	.word	0x40011000
    6a7c:	2000d608 	.word	0x2000d608

00006a80 <z_timer_cycle_get_32>:
	__asm__ volatile(
    6a80:	f04f 0320 	mov.w	r3, #32
    6a84:	f3ef 8211 	mrs	r2, BASEPRI
    6a88:	f383 8811 	msr	BASEPRI, r3
    6a8c:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    6a90:	4906      	ldr	r1, [pc, #24]	; (6aac <z_timer_cycle_get_32+0x2c>)
    6a92:	4b07      	ldr	r3, [pc, #28]	; (6ab0 <z_timer_cycle_get_32+0x30>)
    6a94:	6808      	ldr	r0, [r1, #0]
    6a96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    6a9a:	f382 8811 	msr	BASEPRI, r2
    6a9e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    6aa2:	1a1b      	subs	r3, r3, r0
    6aa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    6aa8:	4418      	add	r0, r3
    6aaa:	4770      	bx	lr
    6aac:	2000d608 	.word	0x2000d608
    6ab0:	40011000 	.word	0x40011000

00006ab4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    6ab4:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6ab6:	4c11      	ldr	r4, [pc, #68]	; (6afc <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6ab8:	4a11      	ldr	r2, [pc, #68]	; (6b00 <_DoInit+0x4c>)
    6aba:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6abc:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6abe:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6ac2:	4b10      	ldr	r3, [pc, #64]	; (6b04 <_DoInit+0x50>)
    6ac4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6ac6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    6ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    6acc:	4a0e      	ldr	r2, [pc, #56]	; (6b08 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    6ace:	490f      	ldr	r1, [pc, #60]	; (6b0c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    6ad0:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    6ad2:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    6ad4:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    6ad6:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    6ad8:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    6ada:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6adc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6ade:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    6ae0:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6ae2:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6ae4:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    6ae6:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    6ae8:	f01c ffed 	bl	23ac6 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    6aec:	4908      	ldr	r1, [pc, #32]	; (6b10 <_DoInit+0x5c>)
    6aee:	4620      	mov	r0, r4
    6af0:	f01c ffe9 	bl	23ac6 <strcpy>
  p->acID[6] = ' ';
    6af4:	2320      	movs	r3, #32
    6af6:	71a3      	strb	r3, [r4, #6]
}
    6af8:	bd10      	pop	{r4, pc}
    6afa:	bf00      	nop
    6afc:	2000d60c 	.word	0x2000d60c
    6b00:	0002adbb 	.word	0x0002adbb
    6b04:	2000ed50 	.word	0x2000ed50
    6b08:	2000ed40 	.word	0x2000ed40
    6b0c:	0002adc4 	.word	0x0002adc4
    6b10:	0002adc8 	.word	0x0002adc8

00006b14 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    6b18:	4f23      	ldr	r7, [pc, #140]	; (6ba8 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    6b1a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6b1e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    6b20:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6b24:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    6b26:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6b28:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6b2a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6b2c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6b2e:	d834      	bhi.n	6b9a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6b30:	f8d2 a020 	ldr.w	sl, [r2, #32]
    6b34:	ebaa 0905 	sub.w	r9, sl, r5
    6b38:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    6b3c:	4294      	cmp	r4, r2
    6b3e:	d811      	bhi.n	6b64 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    6b40:	f04f 0918 	mov.w	r9, #24
    6b44:	fb06 9309 	mla	r3, r6, r9, r9
    6b48:	443b      	add	r3, r7
    6b4a:	4622      	mov	r2, r4
    6b4c:	6858      	ldr	r0, [r3, #4]
    6b4e:	4641      	mov	r1, r8
    6b50:	4428      	add	r0, r5
    6b52:	f01d f812 	bl	23b7a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    6b56:	fb09 7606 	mla	r6, r9, r6, r7
    6b5a:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    6b5c:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    6b5e:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    6b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    6b64:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    6b66:	429c      	cmp	r4, r3
    6b68:	d81b      	bhi.n	6ba2 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    6b6a:	fb00 bb0b 	mla	fp, r0, fp, fp
    6b6e:	44bb      	add	fp, r7
    6b70:	464a      	mov	r2, r9
    6b72:	f8db 0004 	ldr.w	r0, [fp, #4]
    6b76:	442c      	add	r4, r5
    6b78:	4428      	add	r0, r5
    6b7a:	f01c fffe 	bl	23b7a <memcpy>
      if (NumBytes) {
    6b7e:	ebb4 040a 	subs.w	r4, r4, sl
    6b82:	d006      	beq.n	6b92 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    6b84:	f8db 0004 	ldr.w	r0, [fp, #4]
    6b88:	4622      	mov	r2, r4
    6b8a:	eb08 0109 	add.w	r1, r8, r9
    6b8e:	f01c fff4 	bl	23b7a <memcpy>
      pRing->WrOff = NumBytes;
    6b92:	2018      	movs	r0, #24
    6b94:	fb00 7606 	mla	r6, r0, r6, r7
    6b98:	e7e0      	b.n	6b5c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    6b9a:	3b01      	subs	r3, #1
    6b9c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    6b9e:	42a3      	cmp	r3, r4
    6ba0:	d2ce      	bcs.n	6b40 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    6ba2:	2000      	movs	r0, #0
    6ba4:	e7dc      	b.n	6b60 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    6ba6:	bf00      	nop
    6ba8:	2000d60c 	.word	0x2000d60c

00006bac <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    6bac:	4b03      	ldr	r3, [pc, #12]	; (6bbc <SEGGER_RTT_HasDataUp+0x10>)
    6bae:	2218      	movs	r2, #24
    6bb0:	fb02 3300 	mla	r3, r2, r0, r3
    6bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    6bb6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    6bb8:	1a80      	subs	r0, r0, r2
    6bba:	4770      	bx	lr
    6bbc:	2000d60c 	.word	0x2000d60c

00006bc0 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    6bc0:	4b01      	ldr	r3, [pc, #4]	; (6bc8 <uECC_get_rng+0x8>)
    6bc2:	6818      	ldr	r0, [r3, #0]
    6bc4:	4770      	bx	lr
    6bc6:	bf00      	nop
    6bc8:	200002a4 	.word	0x200002a4

00006bcc <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    6bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    6bce:	2208      	movs	r2, #8
{
    6bd0:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    6bd2:	f01b ff9a 	bl	22b0a <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    6bd6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    6bd8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    6bda:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    6bdc:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    6bde:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    6be0:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    6be2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    6be4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    6be6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    6be8:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6bea:	4613      	mov	r3, r2
    6bec:	466a      	mov	r2, sp
{
    6bee:	460c      	mov	r4, r1
    6bf0:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    6bf2:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6bf4:	4611      	mov	r1, r2
    6bf6:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    6bf8:	e9cd 7701 	strd	r7, r7, [sp, #4]
    6bfc:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6bfe:	f01b fe91 	bl	22924 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6c02:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6c04:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6c06:	4630      	mov	r0, r6
    6c08:	f01b fe8c 	bl	22924 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    6c0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6c0e:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    6c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6c12:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    6c14:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6c16:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    6c18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6c1a:	4405      	add	r5, r0
	tmp[7] = 0;
    6c1c:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6c20:	4610      	mov	r0, r2
    6c22:	4611      	mov	r1, r2
    6c24:	f01b fe7e 	bl	22924 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6c28:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6c2a:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6c2c:	4630      	mov	r0, r6
    6c2e:	f01b fe79 	bl	22924 <uECC_vli_add>
    6c32:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    6c34:	6a20      	ldr	r0, [r4, #32]
    6c36:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    6c38:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6c3a:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    6c3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6c3e:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    6c40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    6c42:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    6c44:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    6c46:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6c48:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    6c4a:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6c4e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6c50:	f01b fe68 	bl	22924 <uECC_vli_add>
    6c54:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    6c56:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6c58:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    6c5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    6c5c:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    6c60:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    6c62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6c64:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    6c66:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    6c6a:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    6c6c:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    6c70:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    6c72:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    6c76:	6a20      	ldr	r0, [r4, #32]
    6c78:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6c7a:	4630      	mov	r0, r6
    6c7c:	f01b fe52 	bl	22924 <uECC_vli_add>
    6c80:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    6c82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6c84:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    6c86:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6c88:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    6c8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6c8c:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    6c8e:	6a20      	ldr	r0, [r4, #32]
    6c90:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    6c92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6c94:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6c96:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    6c98:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6c9c:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6c9e:	f01b ff6a 	bl	22b76 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    6ca2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6ca4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    6ca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6ca8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    6caa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6cac:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    6cae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6cb0:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    6cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6cb4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    6cb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6cb8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6cba:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6cbc:	2308      	movs	r3, #8
    6cbe:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    6cc0:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6cc4:	f01b ff57 	bl	22b76 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    6cc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6cca:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    6ccc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6cce:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    6cd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6cd2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    6cd4:	6a23      	ldr	r3, [r4, #32]
    6cd6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    6cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6cda:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    6cdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    6cde:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    6ce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6ce4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6ce6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6ce8:	2308      	movs	r3, #8
    6cea:	4630      	mov	r0, r6
    6cec:	f01b ff43 	bl	22b76 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    6cf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6cf2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    6cf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    6cf6:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    6cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6cfc:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    6cfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6d00:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    6d02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    6d04:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    6d08:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6d0a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6d0c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6d0e:	2308      	movs	r3, #8
    6d10:	4630      	mov	r0, r6
    6d12:	f01b ff30 	bl	22b76 <uECC_vli_sub>

	if (carry < 0) {
    6d16:	1a2d      	subs	r5, r5, r0
    6d18:	d410      	bmi.n	6d3c <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    6d1a:	4c0d      	ldr	r4, [pc, #52]	; (6d50 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    6d1c:	b935      	cbnz	r5, 6d2c <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    6d1e:	2208      	movs	r2, #8
    6d20:	4631      	mov	r1, r6
    6d22:	4620      	mov	r0, r4
    6d24:	f01b fefd 	bl	22b22 <uECC_vli_cmp_unsafe>
		while (carry || 
    6d28:	2801      	cmp	r0, #1
    6d2a:	d00f      	beq.n	6d4c <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6d2c:	2308      	movs	r3, #8
    6d2e:	4622      	mov	r2, r4
    6d30:	4631      	mov	r1, r6
    6d32:	4630      	mov	r0, r6
    6d34:	f01b ff1f 	bl	22b76 <uECC_vli_sub>
    6d38:	1a2d      	subs	r5, r5, r0
    6d3a:	e7ef      	b.n	6d1c <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6d3c:	4a04      	ldr	r2, [pc, #16]	; (6d50 <vli_mmod_fast_secp256r1+0x184>)
    6d3e:	2308      	movs	r3, #8
    6d40:	4631      	mov	r1, r6
    6d42:	4630      	mov	r0, r6
    6d44:	f01b fdee 	bl	22924 <uECC_vli_add>
		while (carry < 0);
    6d48:	182d      	adds	r5, r5, r0
    6d4a:	d4f8      	bmi.n	6d3e <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    6d4c:	b009      	add	sp, #36	; 0x24
    6d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d50:	00027518 	.word	0x00027518

00006d54 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    6d54:	4904      	ldr	r1, [pc, #16]	; (6d68 <sub_bytes+0x14>)
    6d56:	1e43      	subs	r3, r0, #1
    6d58:	300f      	adds	r0, #15
    6d5a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6d5e:	5c8a      	ldrb	r2, [r1, r2]
    6d60:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    6d62:	4283      	cmp	r3, r0
    6d64:	d1f9      	bne.n	6d5a <sub_bytes+0x6>
	}
}
    6d66:	4770      	bx	lr
    6d68:	0002adcf 	.word	0x0002adcf

00006d6c <tc_aes128_set_encrypt_key>:
{
    6d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    6d6e:	4e26      	ldr	r6, [pc, #152]	; (6e08 <tc_aes128_set_encrypt_key+0x9c>)
{
    6d70:	4607      	mov	r7, r0
    6d72:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    6d74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    6d76:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    6d78:	ad01      	add	r5, sp, #4
    6d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6d7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6d80:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    6d84:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    6d88:	4638      	mov	r0, r7
    6d8a:	2f00      	cmp	r7, #0
    6d8c:	d038      	beq.n	6e00 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    6d8e:	2c00      	cmp	r4, #0
    6d90:	d038      	beq.n	6e04 <tc_aes128_set_encrypt_key+0x98>
    6d92:	1f38      	subs	r0, r7, #4
    6d94:	4621      	mov	r1, r4
    6d96:	4602      	mov	r2, r0
    6d98:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6d9a:	784b      	ldrb	r3, [r1, #1]
    6d9c:	780d      	ldrb	r5, [r1, #0]
    6d9e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6da0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    6da4:	78cd      	ldrb	r5, [r1, #3]
    6da6:	432b      	orrs	r3, r5
    6da8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    6daa:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6dac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    6db0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6db2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    6db6:	d1f0      	bne.n	6d9a <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6db8:	4c14      	ldr	r4, [pc, #80]	; (6e0c <tc_aes128_set_encrypt_key+0xa0>)
    6dba:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    6dbc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    6dbe:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    6dc0:	d116      	bne.n	6df0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6dc2:	f3c3 4207 	ubfx	r2, r3, #16, #8
    6dc6:	5ca5      	ldrb	r5, [r4, r2]
    6dc8:	0e1a      	lsrs	r2, r3, #24
    6dca:	5ca2      	ldrb	r2, [r4, r2]
    6dcc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    6dd0:	f3c3 2507 	ubfx	r5, r3, #8, #8
    6dd4:	b2db      	uxtb	r3, r3
    6dd6:	5d65      	ldrb	r5, [r4, r5]
    6dd8:	5ce3      	ldrb	r3, [r4, r3]
    6dda:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    6dde:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    6de2:	ad0c      	add	r5, sp, #48	; 0x30
    6de4:	f021 0303 	bic.w	r3, r1, #3
    6de8:	442b      	add	r3, r5
    6dea:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    6dee:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    6df0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    6df4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    6df6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    6df8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    6dfa:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    6dfc:	d1de      	bne.n	6dbc <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    6dfe:	2001      	movs	r0, #1
}
    6e00:	b00d      	add	sp, #52	; 0x34
    6e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    6e04:	4620      	mov	r0, r4
    6e06:	e7fb      	b.n	6e00 <tc_aes128_set_encrypt_key+0x94>
    6e08:	00027164 	.word	0x00027164
    6e0c:	0002adcf 	.word	0x0002adcf

00006e10 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    6e10:	4a0a      	ldr	r2, [pc, #40]	; (6e3c <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    6e12:	490b      	ldr	r1, [pc, #44]	; (6e40 <arch_swap+0x30>)
	_current->arch.basepri = key;
    6e14:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    6e16:	6809      	ldr	r1, [r1, #0]
    6e18:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6e1c:	4909      	ldr	r1, [pc, #36]	; (6e44 <arch_swap+0x34>)
	_current->arch.basepri = key;
    6e1e:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6e20:	684b      	ldr	r3, [r1, #4]
    6e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6e26:	604b      	str	r3, [r1, #4]
    6e28:	2300      	movs	r3, #0
    6e2a:	f383 8811 	msr	BASEPRI, r3
    6e2e:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6e32:	6893      	ldr	r3, [r2, #8]
}
    6e34:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    6e38:	4770      	bx	lr
    6e3a:	bf00      	nop
    6e3c:	2000ecac 	.word	0x2000ecac
    6e40:	0002897c 	.word	0x0002897c
    6e44:	e000ed00 	.word	0xe000ed00

00006e48 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6e48:	4912      	ldr	r1, [pc, #72]	; (6e94 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    6e4a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6e4c:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    6e50:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    6e52:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    6e56:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6e5a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6e5c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    6e60:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    6e64:	4f0c      	ldr	r7, [pc, #48]	; (6e98 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    6e66:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    6e6a:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    6e6c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    6e6e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    6e70:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    6e72:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    6e74:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    6e76:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    6e7a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    6e7c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    6e7e:	f000 fbe5 	bl	764c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    6e82:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    6e86:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    6e8a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    6e8e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    6e92:	4770      	bx	lr
    ldr r1, =_kernel
    6e94:	2000ecac 	.word	0x2000ecac
    ldr v4, =_SCS_ICSR
    6e98:	e000ed04 	.word	0xe000ed04

00006e9c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    6e9c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    6ea0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    6ea2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    6ea6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    6eaa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    6eac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    6eb0:	2902      	cmp	r1, #2
    beq _oops
    6eb2:	d0ff      	beq.n	6eb4 <_oops>

00006eb4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    6eb4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    6eb6:	f01c fd87 	bl	239c8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    6eba:	bd01      	pop	{r0, pc}

00006ebc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6ebc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6ebe:	2b00      	cmp	r3, #0
    6ec0:	db08      	blt.n	6ed4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ec2:	2201      	movs	r2, #1
    6ec4:	f000 001f 	and.w	r0, r0, #31
    6ec8:	fa02 f000 	lsl.w	r0, r2, r0
    6ecc:	095b      	lsrs	r3, r3, #5
    6ece:	4a02      	ldr	r2, [pc, #8]	; (6ed8 <arch_irq_enable+0x1c>)
    6ed0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    6ed4:	4770      	bx	lr
    6ed6:	bf00      	nop
    6ed8:	e000e100 	.word	0xe000e100

00006edc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6edc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6ede:	2b00      	cmp	r3, #0
    6ee0:	db0d      	blt.n	6efe <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ee2:	2201      	movs	r2, #1
    6ee4:	095b      	lsrs	r3, r3, #5
    6ee6:	f000 001f 	and.w	r0, r0, #31
    6eea:	fa02 f000 	lsl.w	r0, r2, r0
    6eee:	3320      	adds	r3, #32
    6ef0:	4a03      	ldr	r2, [pc, #12]	; (6f00 <arch_irq_disable+0x24>)
    6ef2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6efa:	f3bf 8f6f 	isb	sy
}
    6efe:	4770      	bx	lr
    6f00:	e000e100 	.word	0xe000e100

00006f04 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    6f04:	4b05      	ldr	r3, [pc, #20]	; (6f1c <arch_irq_is_enabled+0x18>)
    6f06:	0942      	lsrs	r2, r0, #5
    6f08:	f000 001f 	and.w	r0, r0, #31
    6f0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    6f10:	2301      	movs	r3, #1
    6f12:	fa03 f000 	lsl.w	r0, r3, r0
}
    6f16:	4010      	ands	r0, r2
    6f18:	4770      	bx	lr
    6f1a:	bf00      	nop
    6f1c:	e000e100 	.word	0xe000e100

00006f20 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    6f20:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    6f22:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6f24:	bfa8      	it	ge
    6f26:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    6f2a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6f2e:	bfb8      	it	lt
    6f30:	4b06      	ldrlt	r3, [pc, #24]	; (6f4c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6f32:	ea4f 1141 	mov.w	r1, r1, lsl #5
    6f36:	bfac      	ite	ge
    6f38:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6f3c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6f40:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6f42:	bfb4      	ite	lt
    6f44:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6f46:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    6f4a:	4770      	bx	lr
    6f4c:	e000ed14 	.word	0xe000ed14

00006f50 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    6f50:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    6f52:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    6f54:	4b04      	ldr	r3, [pc, #16]	; (6f68 <_arch_isr_direct_pm+0x18>)
    6f56:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6f58:	b118      	cbz	r0, 6f62 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    6f5a:	2200      	movs	r2, #0
    6f5c:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    6f5e:	f018 f845 	bl	1efec <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    6f62:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    6f64:	bd08      	pop	{r3, pc}
    6f66:	bf00      	nop
    6f68:	2000ecac 	.word	0x2000ecac

00006f6c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    6f6c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    6f70:	9b00      	ldr	r3, [sp, #0]
    6f72:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    6f76:	490a      	ldr	r1, [pc, #40]	; (6fa0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    6f78:	9b01      	ldr	r3, [sp, #4]
    6f7a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    6f7e:	9b02      	ldr	r3, [sp, #8]
    6f80:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    6f84:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    6f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    6f8c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    6f90:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    6f94:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    6f96:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    6f98:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    6f9a:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6f9c:	4770      	bx	lr
    6f9e:	bf00      	nop
    6fa0:	00021469 	.word	0x00021469

00006fa4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    6fa4:	4a09      	ldr	r2, [pc, #36]	; (6fcc <z_check_thread_stack_fail+0x28>)
{
    6fa6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    6fa8:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    6faa:	b170      	cbz	r0, 6fca <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    6fac:	f113 0f16 	cmn.w	r3, #22
    6fb0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    6fb2:	d005      	beq.n	6fc0 <z_check_thread_stack_fail+0x1c>
    6fb4:	f1a0 0220 	sub.w	r2, r0, #32
    6fb8:	429a      	cmp	r2, r3
    6fba:	d805      	bhi.n	6fc8 <z_check_thread_stack_fail+0x24>
    6fbc:	4283      	cmp	r3, r0
    6fbe:	d203      	bcs.n	6fc8 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    6fc0:	4281      	cmp	r1, r0
    6fc2:	bf28      	it	cs
    6fc4:	2000      	movcs	r0, #0
    6fc6:	4770      	bx	lr
    6fc8:	2000      	movs	r0, #0
}
    6fca:	4770      	bx	lr
    6fcc:	2000ecac 	.word	0x2000ecac

00006fd0 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    6fd0:	b508      	push	{r3, lr}
    6fd2:	4604      	mov	r4, r0
    6fd4:	460e      	mov	r6, r1
    6fd6:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    6fd8:	f000 fb2c 	bl	7634 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    6fdc:	4b08      	ldr	r3, [pc, #32]	; (7000 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    6fde:	4620      	mov	r0, r4
	_current = main_thread;
    6fe0:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    6fe2:	f000 fb33 	bl	764c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    6fe6:	4628      	mov	r0, r5
    6fe8:	f386 8809 	msr	PSP, r6
    6fec:	2100      	movs	r1, #0
    6fee:	b663      	cpsie	if
    6ff0:	f381 8811 	msr	BASEPRI, r1
    6ff4:	f3bf 8f6f 	isb	sy
    6ff8:	2200      	movs	r2, #0
    6ffa:	2300      	movs	r3, #0
    6ffc:	f01a fa34 	bl	21468 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    7000:	2000ecac 	.word	0x2000ecac

00007004 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    7004:	4901      	ldr	r1, [pc, #4]	; (700c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    7006:	2210      	movs	r2, #16
	str	r2, [r1]
    7008:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    700a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    700c:	e000ed10 	.word	0xe000ed10

00007010 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    7010:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    7012:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    7014:	f380 8811 	msr	BASEPRI, r0
	isb
    7018:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    701c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    7020:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    7022:	b662      	cpsie	i
	isb
    7024:	f3bf 8f6f 	isb	sy

	bx	lr
    7028:	4770      	bx	lr
    702a:	bf00      	nop

0000702c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    702c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    702e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    7030:	f381 8811 	msr	BASEPRI, r1

	wfe
    7034:	bf20      	wfe

	msr	BASEPRI, r0
    7036:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    703a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    703c:	4770      	bx	lr
    703e:	bf00      	nop

00007040 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7040:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7042:	4606      	mov	r6, r0

	if (esf != NULL) {
    7044:	460c      	mov	r4, r1
    7046:	b301      	cbz	r1, 708a <z_arm_fatal_error+0x4a>
    7048:	4b13      	ldr	r3, [pc, #76]	; (7098 <z_arm_fatal_error+0x58>)
    704a:	4d14      	ldr	r5, [pc, #80]	; (709c <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    704c:	4814      	ldr	r0, [pc, #80]	; (70a0 <z_arm_fatal_error+0x60>)
    704e:	1aed      	subs	r5, r5, r3
    7050:	08ed      	lsrs	r5, r5, #3
    7052:	01ad      	lsls	r5, r5, #6
    7054:	f045 0501 	orr.w	r5, r5, #1
    7058:	f8ad 5000 	strh.w	r5, [sp]
    705c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    7060:	6809      	ldr	r1, [r1, #0]
    7062:	f01a fdb8 	bl	21bd6 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    7066:	f8ad 5000 	strh.w	r5, [sp]
    706a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    706e:	68e1      	ldr	r1, [r4, #12]
    7070:	480c      	ldr	r0, [pc, #48]	; (70a4 <z_arm_fatal_error+0x64>)
    7072:	f01a fdb0 	bl	21bd6 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    7076:	69e1      	ldr	r1, [r4, #28]
    7078:	480b      	ldr	r0, [pc, #44]	; (70a8 <z_arm_fatal_error+0x68>)
    707a:	462a      	mov	r2, r5
    707c:	f01a fd7e 	bl	21b7c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    7080:	69a1      	ldr	r1, [r4, #24]
    7082:	480a      	ldr	r0, [pc, #40]	; (70ac <z_arm_fatal_error+0x6c>)
    7084:	462a      	mov	r2, r5
    7086:	f01a fd79 	bl	21b7c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    708a:	4621      	mov	r1, r4
    708c:	4630      	mov	r0, r6
}
    708e:	b002      	add	sp, #8
    7090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    7094:	f017 bf4c 	b.w	1ef30 <z_fatal_error>
    7098:	00026fc8 	.word	0x00026fc8
    709c:	00027100 	.word	0x00027100
    70a0:	0002aecf 	.word	0x0002aecf
    70a4:	0002aefe 	.word	0x0002aefe
    70a8:	0002af2d 	.word	0x0002af2d
    70ac:	0002af3c 	.word	0x0002af3c

000070b0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    70b0:	bf30      	wfi
    b z_SysNmiOnReset
    70b2:	f7ff bffd 	b.w	70b0 <z_SysNmiOnReset>
    70b6:	bf00      	nop

000070b8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    70b8:	4a0e      	ldr	r2, [pc, #56]	; (70f4 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    70ba:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    70bc:	4b0e      	ldr	r3, [pc, #56]	; (70f8 <z_arm_prep_c+0x40>)
    70be:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    70c2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    70c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    70c8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    70cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    70d0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    70d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    70d8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    70dc:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    70e0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    70e4:	f017 ffcc 	bl	1f080 <z_bss_zero>
	z_data_copy();
    70e8:	f018 ff1a 	bl	1ff20 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    70ec:	f000 fa74 	bl	75d8 <z_arm_interrupt_init>
	z_cstart();
    70f0:	f017 ffea 	bl	1f0c8 <z_cstart>
    70f4:	00000000 	.word	0x00000000
    70f8:	e000ed00 	.word	0xe000ed00

000070fc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    70fc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    70fe:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    7100:	4a0b      	ldr	r2, [pc, #44]	; (7130 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    7102:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    7104:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    7106:	bf1e      	ittt	ne
	movne	r1, #0
    7108:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    710a:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    710c:	f017 ff6e 	blne	1efec <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    7110:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    7112:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    7116:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    711a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    711e:	4905      	ldr	r1, [pc, #20]	; (7134 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    7120:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    7122:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    7124:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    7126:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    712a:	4903      	ldr	r1, [pc, #12]	; (7138 <_isr_wrapper+0x3c>)
	bx r1
    712c:	4708      	bx	r1
    712e:	0000      	.short	0x0000
	ldr r2, =_kernel
    7130:	2000ecac 	.word	0x2000ecac
	ldr r1, =_sw_isr_table
    7134:	00026d8c 	.word	0x00026d8c
	ldr r1, =z_arm_int_exit
    7138:	000075bd 	.word	0x000075bd

0000713c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    713c:	f01c fd7d 	bl	23c3a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7140:	2020      	movs	r0, #32
    msr BASEPRI, r0
    7142:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    7146:	4808      	ldr	r0, [pc, #32]	; (7168 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    7148:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    714c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    714e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    7152:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    7156:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    7158:	4308      	orrs	r0, r1
    msr CONTROL, r0
    715a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    715e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    7162:	f7ff ffa9 	bl	70b8 <z_arm_prep_c>
    7166:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    7168:	200118a0 	.word	0x200118a0

0000716c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    716c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    7170:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    7174:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    7176:	4672      	mov	r2, lr
	bl z_arm_fault
    7178:	f000 f94e 	bl	7418 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    717c:	bd01      	pop	{r0, pc}
    717e:	bf00      	nop

00007180 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    7180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7184:	4b35      	ldr	r3, [pc, #212]	; (725c <mem_manage_fault+0xdc>)
    7186:	4c36      	ldr	r4, [pc, #216]	; (7260 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7188:	4d36      	ldr	r5, [pc, #216]	; (7264 <mem_manage_fault+0xe4>)
    718a:	1ae4      	subs	r4, r4, r3
    718c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    718e:	01a4      	lsls	r4, r4, #6
    7190:	f044 0901 	orr.w	r9, r4, #1
{
    7194:	4607      	mov	r7, r0
    7196:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    7198:	4833      	ldr	r0, [pc, #204]	; (7268 <mem_manage_fault+0xe8>)
    719a:	4649      	mov	r1, r9
{
    719c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    719e:	f01a fce0 	bl	21b62 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    71a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    71a4:	06db      	lsls	r3, r3, #27
    71a6:	d503      	bpl.n	71b0 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    71a8:	4830      	ldr	r0, [pc, #192]	; (726c <mem_manage_fault+0xec>)
    71aa:	4649      	mov	r1, r9
    71ac:	f01a fcd9 	bl	21b62 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    71b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    71b2:	0718      	lsls	r0, r3, #28
    71b4:	d504      	bpl.n	71c0 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    71b6:	482e      	ldr	r0, [pc, #184]	; (7270 <mem_manage_fault+0xf0>)
    71b8:	f044 0101 	orr.w	r1, r4, #1
    71bc:	f01a fcd1 	bl	21b62 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    71c0:	4d28      	ldr	r5, [pc, #160]	; (7264 <mem_manage_fault+0xe4>)
    71c2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    71c4:	0799      	lsls	r1, r3, #30
    71c6:	d423      	bmi.n	7210 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    71c8:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    71cc:	4d25      	ldr	r5, [pc, #148]	; (7264 <mem_manage_fault+0xe4>)
    71ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
    71d0:	07db      	lsls	r3, r3, #31
    71d2:	d504      	bpl.n	71de <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    71d4:	4827      	ldr	r0, [pc, #156]	; (7274 <mem_manage_fault+0xf4>)
    71d6:	f044 0101 	orr.w	r1, r4, #1
    71da:	f01a fcc2 	bl	21b62 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    71de:	6aab      	ldr	r3, [r5, #40]	; 0x28
    71e0:	0698      	lsls	r0, r3, #26
    71e2:	d504      	bpl.n	71ee <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    71e4:	4824      	ldr	r0, [pc, #144]	; (7278 <mem_manage_fault+0xf8>)
    71e6:	f044 0101 	orr.w	r1, r4, #1
    71ea:	f01a fcba 	bl	21b62 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    71ee:	4b1d      	ldr	r3, [pc, #116]	; (7264 <mem_manage_fault+0xe4>)
    71f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    71f2:	06d1      	lsls	r1, r2, #27
    71f4:	d424      	bmi.n	7240 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    71f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    71f8:	0792      	lsls	r2, r2, #30
    71fa:	d421      	bmi.n	7240 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    71fc:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    71fe:	4a19      	ldr	r2, [pc, #100]	; (7264 <mem_manage_fault+0xe4>)
    7200:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7202:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    7206:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    7208:	2300      	movs	r3, #0
    720a:	7033      	strb	r3, [r6, #0]

	return reason;
}
    720c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    7210:	f044 0a01 	orr.w	sl, r4, #1
    7214:	4819      	ldr	r0, [pc, #100]	; (727c <mem_manage_fault+0xfc>)
    7216:	4651      	mov	r1, sl
    7218:	f01a fca3 	bl	21b62 <log_0>
		uint32_t temp = SCB->MMFAR;
    721c:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    7220:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7222:	061a      	lsls	r2, r3, #24
    7224:	d5d0      	bpl.n	71c8 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    7226:	4816      	ldr	r0, [pc, #88]	; (7280 <mem_manage_fault+0x100>)
    7228:	4652      	mov	r2, sl
    722a:	4649      	mov	r1, r9
    722c:	f01a fca6 	bl	21b7c <log_1>
			if (from_hard_fault) {
    7230:	f1b8 0f00 	cmp.w	r8, #0
    7234:	d0ca      	beq.n	71cc <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7236:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    723c:	62ab      	str	r3, [r5, #40]	; 0x28
    723e:	e7c5      	b.n	71cc <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    7240:	685b      	ldr	r3, [r3, #4]
    7242:	051b      	lsls	r3, r3, #20
    7244:	d5da      	bpl.n	71fc <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    7246:	4639      	mov	r1, r7
    7248:	4648      	mov	r0, r9
    724a:	f7ff feab 	bl	6fa4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    724e:	2800      	cmp	r0, #0
    7250:	d0d4      	beq.n	71fc <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    7252:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    7256:	2002      	movs	r0, #2
    7258:	e7d1      	b.n	71fe <mem_manage_fault+0x7e>
    725a:	bf00      	nop
    725c:	00026fc8 	.word	0x00026fc8
    7260:	00027100 	.word	0x00027100
    7264:	e000ed00 	.word	0xe000ed00
    7268:	0002af6a 	.word	0x0002af6a
    726c:	0002af80 	.word	0x0002af80
    7270:	0002afb3 	.word	0x0002afb3
    7274:	0002aff4 	.word	0x0002aff4
    7278:	0002b013 	.word	0x0002b013
    727c:	0002afc6 	.word	0x0002afc6
    7280:	0002afde 	.word	0x0002afde

00007284 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    7284:	b570      	push	{r4, r5, r6, lr}
    7286:	4b23      	ldr	r3, [pc, #140]	; (7314 <usage_fault.constprop.0+0x90>)
    7288:	4c23      	ldr	r4, [pc, #140]	; (7318 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    728a:	4d24      	ldr	r5, [pc, #144]	; (731c <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    728c:	4824      	ldr	r0, [pc, #144]	; (7320 <usage_fault.constprop.0+0x9c>)
    728e:	1ae4      	subs	r4, r4, r3
    7290:	08e4      	lsrs	r4, r4, #3
    7292:	01a4      	lsls	r4, r4, #6
    7294:	f044 0601 	orr.w	r6, r4, #1
    7298:	4631      	mov	r1, r6
    729a:	f01a fc62 	bl	21b62 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    729e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    72a0:	019b      	lsls	r3, r3, #6
    72a2:	d503      	bpl.n	72ac <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    72a4:	481f      	ldr	r0, [pc, #124]	; (7324 <usage_fault.constprop.0+0xa0>)
    72a6:	4631      	mov	r1, r6
    72a8:	f01a fc5b 	bl	21b62 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    72ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
    72ae:	01dd      	lsls	r5, r3, #7
    72b0:	d504      	bpl.n	72bc <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    72b2:	481d      	ldr	r0, [pc, #116]	; (7328 <usage_fault.constprop.0+0xa4>)
    72b4:	f044 0101 	orr.w	r1, r4, #1
    72b8:	f01a fc53 	bl	21b62 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    72bc:	4d17      	ldr	r5, [pc, #92]	; (731c <usage_fault.constprop.0+0x98>)
    72be:	6aab      	ldr	r3, [r5, #40]	; 0x28
    72c0:	0318      	lsls	r0, r3, #12
    72c2:	d504      	bpl.n	72ce <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    72c4:	4819      	ldr	r0, [pc, #100]	; (732c <usage_fault.constprop.0+0xa8>)
    72c6:	f044 0101 	orr.w	r1, r4, #1
    72ca:	f01a fc4a 	bl	21b62 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    72ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
    72d0:	0359      	lsls	r1, r3, #13
    72d2:	d504      	bpl.n	72de <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    72d4:	4816      	ldr	r0, [pc, #88]	; (7330 <usage_fault.constprop.0+0xac>)
    72d6:	f044 0101 	orr.w	r1, r4, #1
    72da:	f01a fc42 	bl	21b62 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    72de:	4d0f      	ldr	r5, [pc, #60]	; (731c <usage_fault.constprop.0+0x98>)
    72e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    72e2:	039a      	lsls	r2, r3, #14
    72e4:	d504      	bpl.n	72f0 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    72e6:	4813      	ldr	r0, [pc, #76]	; (7334 <usage_fault.constprop.0+0xb0>)
    72e8:	f044 0101 	orr.w	r1, r4, #1
    72ec:	f01a fc39 	bl	21b62 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    72f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    72f2:	03db      	lsls	r3, r3, #15
    72f4:	d504      	bpl.n	7300 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    72f6:	4810      	ldr	r0, [pc, #64]	; (7338 <usage_fault.constprop.0+0xb4>)
    72f8:	f044 0101 	orr.w	r1, r4, #1
    72fc:	f01a fc31 	bl	21b62 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    7300:	4a06      	ldr	r2, [pc, #24]	; (731c <usage_fault.constprop.0+0x98>)
    7302:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7304:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    7308:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    730c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    730e:	2000      	movs	r0, #0
    7310:	bd70      	pop	{r4, r5, r6, pc}
    7312:	bf00      	nop
    7314:	00026fc8 	.word	0x00026fc8
    7318:	00027100 	.word	0x00027100
    731c:	e000ed00 	.word	0xe000ed00
    7320:	0002b042 	.word	0x0002b042
    7324:	0002b05a 	.word	0x0002b05a
    7328:	0002b06d 	.word	0x0002b06d
    732c:	0002b087 	.word	0x0002b087
    7330:	0002b0a5 	.word	0x0002b0a5
    7334:	0002b0ca 	.word	0x0002b0ca
    7338:	0002b0e4 	.word	0x0002b0e4

0000733c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7340:	4b2a      	ldr	r3, [pc, #168]	; (73ec <bus_fault.constprop.0+0xb0>)
    7342:	4c2b      	ldr	r4, [pc, #172]	; (73f0 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7344:	4d2b      	ldr	r5, [pc, #172]	; (73f4 <bus_fault.constprop.0+0xb8>)
    7346:	1ae4      	subs	r4, r4, r3
    7348:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    734a:	01a4      	lsls	r4, r4, #6
    734c:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7350:	4607      	mov	r7, r0
    7352:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    7354:	4828      	ldr	r0, [pc, #160]	; (73f8 <bus_fault.constprop.0+0xbc>)
    7356:	4641      	mov	r1, r8
    7358:	f01a fc03 	bl	21b62 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    735c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    735e:	04d9      	lsls	r1, r3, #19
    7360:	d503      	bpl.n	736a <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    7362:	4826      	ldr	r0, [pc, #152]	; (73fc <bus_fault.constprop.0+0xc0>)
    7364:	4641      	mov	r1, r8
    7366:	f01a fbfc 	bl	21b62 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    736a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    736c:	051a      	lsls	r2, r3, #20
    736e:	d504      	bpl.n	737a <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    7370:	4823      	ldr	r0, [pc, #140]	; (7400 <bus_fault.constprop.0+0xc4>)
    7372:	f044 0101 	orr.w	r1, r4, #1
    7376:	f01a fbf4 	bl	21b62 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    737a:	4d1e      	ldr	r5, [pc, #120]	; (73f4 <bus_fault.constprop.0+0xb8>)
    737c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    737e:	059b      	lsls	r3, r3, #22
    7380:	d512      	bpl.n	73a8 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    7382:	f044 0801 	orr.w	r8, r4, #1
    7386:	481f      	ldr	r0, [pc, #124]	; (7404 <bus_fault.constprop.0+0xc8>)
    7388:	4641      	mov	r1, r8
    738a:	f01a fbea 	bl	21b62 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    738e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    7390:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7392:	0418      	lsls	r0, r3, #16
    7394:	d508      	bpl.n	73a8 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    7396:	481c      	ldr	r0, [pc, #112]	; (7408 <bus_fault.constprop.0+0xcc>)
    7398:	4642      	mov	r2, r8
    739a:	f01a fbef 	bl	21b7c <log_1>
			if (from_hard_fault) {
    739e:	b11f      	cbz	r7, 73a8 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    73a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    73a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    73a6:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    73a8:	4d12      	ldr	r5, [pc, #72]	; (73f4 <bus_fault.constprop.0+0xb8>)
    73aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    73ac:	0559      	lsls	r1, r3, #21
    73ae:	d504      	bpl.n	73ba <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    73b0:	4816      	ldr	r0, [pc, #88]	; (740c <bus_fault.constprop.0+0xd0>)
    73b2:	f044 0101 	orr.w	r1, r4, #1
    73b6:	f01a fbd4 	bl	21b62 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    73ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
    73bc:	05da      	lsls	r2, r3, #23
    73be:	d50d      	bpl.n	73dc <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    73c0:	4813      	ldr	r0, [pc, #76]	; (7410 <bus_fault.constprop.0+0xd4>)
    73c2:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    73c6:	f01a fbcc 	bl	21b62 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    73ca:	4a0a      	ldr	r2, [pc, #40]	; (73f4 <bus_fault.constprop.0+0xb8>)
    73cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    73ce:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    73d0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    73d4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    73d6:	7030      	strb	r0, [r6, #0]
}
    73d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    73dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    73de:	049b      	lsls	r3, r3, #18
    73e0:	d5f3      	bpl.n	73ca <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    73e2:	480c      	ldr	r0, [pc, #48]	; (7414 <bus_fault.constprop.0+0xd8>)
    73e4:	f044 0101 	orr.w	r1, r4, #1
    73e8:	e7ed      	b.n	73c6 <bus_fault.constprop.0+0x8a>
    73ea:	bf00      	nop
    73ec:	00026fc8 	.word	0x00026fc8
    73f0:	00027100 	.word	0x00027100
    73f4:	e000ed00 	.word	0xe000ed00
    73f8:	0002b10f 	.word	0x0002b10f
    73fc:	0002b125 	.word	0x0002b125
    7400:	0002afb3 	.word	0x0002afb3
    7404:	0002b136 	.word	0x0002b136
    7408:	0002b14f 	.word	0x0002b14f
    740c:	0002b164 	.word	0x0002b164
    7410:	0002b17f 	.word	0x0002b17f
    7414:	0002b013 	.word	0x0002b013

00007418 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    741c:	4b58      	ldr	r3, [pc, #352]	; (7580 <z_arm_fault+0x168>)
    741e:	685e      	ldr	r6, [r3, #4]
{
    7420:	b08b      	sub	sp, #44	; 0x2c
    7422:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7424:	f3c6 0408 	ubfx	r4, r6, #0, #9
    7428:	2500      	movs	r5, #0
    742a:	f385 8811 	msr	BASEPRI, r5
    742e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7432:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    7436:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    743a:	d10d      	bne.n	7458 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    743c:	f002 030c 	and.w	r3, r2, #12
    7440:	2b08      	cmp	r3, #8
    7442:	d10b      	bne.n	745c <z_arm_fault+0x44>
    7444:	494f      	ldr	r1, [pc, #316]	; (7584 <z_arm_fault+0x16c>)
    7446:	4b50      	ldr	r3, [pc, #320]	; (7588 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    7448:	4850      	ldr	r0, [pc, #320]	; (758c <z_arm_fault+0x174>)
    744a:	1ac9      	subs	r1, r1, r3
    744c:	08c9      	lsrs	r1, r1, #3
    744e:	0189      	lsls	r1, r1, #6
    7450:	f041 0101 	orr.w	r1, r1, #1
    7454:	f01a fb85 	bl	21b62 <log_0>
		return NULL;
    7458:	462f      	mov	r7, r5
    745a:	e003      	b.n	7464 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    745c:	0712      	lsls	r2, r2, #28
    745e:	d401      	bmi.n	7464 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    7460:	4607      	mov	r7, r0
			*nested_exc = true;
    7462:	2501      	movs	r5, #1
	*recoverable = false;
    7464:	2300      	movs	r3, #0
    7466:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    746a:	1ee3      	subs	r3, r4, #3
    746c:	2b09      	cmp	r3, #9
    746e:	d86e      	bhi.n	754e <z_arm_fault+0x136>
    7470:	e8df f003 	tbb	[pc, r3]
    7474:	40605c05 	.word	0x40605c05
    7478:	6d6d6d6d 	.word	0x6d6d6d6d
    747c:	646d      	.short	0x646d
    747e:	4b42      	ldr	r3, [pc, #264]	; (7588 <z_arm_fault+0x170>)
    7480:	4e40      	ldr	r6, [pc, #256]	; (7584 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7482:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7580 <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
    7486:	4842      	ldr	r0, [pc, #264]	; (7590 <z_arm_fault+0x178>)
    7488:	1af6      	subs	r6, r6, r3
    748a:	08f6      	lsrs	r6, r6, #3
    748c:	01b6      	lsls	r6, r6, #6
    748e:	f046 0601 	orr.w	r6, r6, #1
    7492:	4631      	mov	r1, r6
    7494:	f01a fb65 	bl	21b62 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7498:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    749c:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    74a0:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    74a4:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    74a8:	d005      	beq.n	74b6 <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
    74aa:	483a      	ldr	r0, [pc, #232]	; (7594 <z_arm_fault+0x17c>)
    74ac:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    74ae:	f01a fb58 	bl	21b62 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    74b2:	2400      	movs	r4, #0
}
    74b4:	e021      	b.n	74fa <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    74b6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    74ba:	005b      	lsls	r3, r3, #1
    74bc:	d51d      	bpl.n	74fa <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
    74be:	4836      	ldr	r0, [pc, #216]	; (7598 <z_arm_fault+0x180>)
    74c0:	4631      	mov	r1, r6
    74c2:	f01a fb4e 	bl	21b62 <log_0>
		if (SCB_MMFSR != 0) {
    74c6:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    74ca:	b133      	cbz	r3, 74da <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    74cc:	f10d 0207 	add.w	r2, sp, #7
    74d0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    74d2:	4638      	mov	r0, r7
    74d4:	f7ff fe54 	bl	7180 <mem_manage_fault>
    74d8:	e00e      	b.n	74f8 <z_arm_fault+0xe0>
		} else if (SCB_BFSR != 0) {
    74da:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    74de:	b12b      	cbz	r3, 74ec <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    74e0:	f10d 0107 	add.w	r1, sp, #7
    74e4:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    74e6:	f7ff ff29 	bl	733c <bus_fault.constprop.0>
    74ea:	e005      	b.n	74f8 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
    74ec:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    74f0:	b29b      	uxth	r3, r3
    74f2:	b113      	cbz	r3, 74fa <z_arm_fault+0xe2>
			reason = usage_fault(esf);
    74f4:	f7ff fec6 	bl	7284 <usage_fault.constprop.0>
    74f8:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    74fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74fe:	b993      	cbnz	r3, 7526 <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7500:	2220      	movs	r2, #32
    7502:	4639      	mov	r1, r7
    7504:	a802      	add	r0, sp, #8
    7506:	f01c fb38 	bl	23b7a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    750a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    750c:	b39d      	cbz	r5, 7576 <z_arm_fault+0x15e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    750e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7512:	b922      	cbnz	r2, 751e <z_arm_fault+0x106>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    7514:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7518:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    751c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    751e:	a902      	add	r1, sp, #8
    7520:	4620      	mov	r0, r4
    7522:	f7ff fd8d 	bl	7040 <z_arm_fatal_error>
}
    7526:	b00b      	add	sp, #44	; 0x2c
    7528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    752c:	f10d 0207 	add.w	r2, sp, #7
    7530:	2100      	movs	r1, #0
    7532:	e7ce      	b.n	74d2 <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
    7534:	f10d 0107 	add.w	r1, sp, #7
    7538:	2000      	movs	r0, #0
    753a:	e7d4      	b.n	74e6 <z_arm_fault+0xce>
    753c:	4911      	ldr	r1, [pc, #68]	; (7584 <z_arm_fault+0x16c>)
    753e:	4b12      	ldr	r3, [pc, #72]	; (7588 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
    7540:	4816      	ldr	r0, [pc, #88]	; (759c <z_arm_fault+0x184>)
    7542:	1ac9      	subs	r1, r1, r3
    7544:	08c9      	lsrs	r1, r1, #3
    7546:	0189      	lsls	r1, r1, #6
    7548:	f041 0101 	orr.w	r1, r1, #1
    754c:	e7af      	b.n	74ae <z_arm_fault+0x96>
    754e:	4a0e      	ldr	r2, [pc, #56]	; (7588 <z_arm_fault+0x170>)
    7550:	4b0c      	ldr	r3, [pc, #48]	; (7584 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
    7552:	4813      	ldr	r0, [pc, #76]	; (75a0 <z_arm_fault+0x188>)
    7554:	4913      	ldr	r1, [pc, #76]	; (75a4 <z_arm_fault+0x18c>)
    7556:	1a9b      	subs	r3, r3, r2
    7558:	08db      	lsrs	r3, r3, #3
    755a:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    755e:	ea4f 1383 	mov.w	r3, r3, lsl #6
    7562:	bf18      	it	ne
    7564:	4601      	movne	r1, r0
    7566:	f043 0301 	orr.w	r3, r3, #1
    756a:	480f      	ldr	r0, [pc, #60]	; (75a8 <z_arm_fault+0x190>)
    756c:	f1a4 0210 	sub.w	r2, r4, #16
    7570:	f01a fb18 	bl	21ba4 <log_2>
    7574:	e79d      	b.n	74b2 <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7576:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    757a:	f023 0301 	bic.w	r3, r3, #1
    757e:	e7cd      	b.n	751c <z_arm_fault+0x104>
    7580:	e000ed00 	.word	0xe000ed00
    7584:	00027100 	.word	0x00027100
    7588:	00026fc8 	.word	0x00026fc8
    758c:	0002b197 	.word	0x0002b197
    7590:	0002b1c2 	.word	0x0002b1c2
    7594:	0002b1d9 	.word	0x0002b1d9
    7598:	0002b1fa 	.word	0x0002b1fa
    759c:	0002b219 	.word	0x0002b219
    75a0:	0002b264 	.word	0x0002b264
    75a4:	0002b24f 	.word	0x0002b24f
    75a8:	0002b27d 	.word	0x0002b27d

000075ac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    75ac:	4a02      	ldr	r2, [pc, #8]	; (75b8 <z_arm_fault_init+0xc>)
    75ae:	6953      	ldr	r3, [r2, #20]
    75b0:	f043 0310 	orr.w	r3, r3, #16
    75b4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    75b6:	4770      	bx	lr
    75b8:	e000ed00 	.word	0xe000ed00

000075bc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    75bc:	4b04      	ldr	r3, [pc, #16]	; (75d0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    75be:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    75c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    75c2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    75c4:	d003      	beq.n	75ce <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    75c6:	4903      	ldr	r1, [pc, #12]	; (75d4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    75c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    75cc:	600a      	str	r2, [r1, #0]

000075ce <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    75ce:	4770      	bx	lr
	ldr r3, =_kernel
    75d0:	2000ecac 	.word	0x2000ecac
	ldr r1, =_SCS_ICSR
    75d4:	e000ed04 	.word	0xe000ed04

000075d8 <z_arm_interrupt_init>:
    75d8:	4804      	ldr	r0, [pc, #16]	; (75ec <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    75da:	2300      	movs	r3, #0
    75dc:	2120      	movs	r1, #32
    75de:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    75e0:	3301      	adds	r3, #1
    75e2:	2b30      	cmp	r3, #48	; 0x30
    75e4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    75e8:	d1f9      	bne.n	75de <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    75ea:	4770      	bx	lr
    75ec:	e000e100 	.word	0xe000e100

000075f0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    75f0:	b508      	push	{r3, lr}
	if (_current == thread) {
    75f2:	4b0e      	ldr	r3, [pc, #56]	; (762c <z_impl_k_thread_abort+0x3c>)
    75f4:	689b      	ldr	r3, [r3, #8]
    75f6:	4283      	cmp	r3, r0
    75f8:	d107      	bne.n	760a <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    75fa:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    75fe:	b193      	cbz	r3, 7626 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7600:	4a0b      	ldr	r2, [pc, #44]	; (7630 <z_impl_k_thread_abort+0x40>)
    7602:	6853      	ldr	r3, [r2, #4]
    7604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7608:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    760a:	f018 f919 	bl	1f840 <z_thread_single_abort>
	__asm__ volatile(
    760e:	f04f 0320 	mov.w	r3, #32
    7612:	f3ef 8011 	mrs	r0, BASEPRI
    7616:	f383 8811 	msr	BASEPRI, r3
    761a:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    761e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    7622:	f01f b803 	b.w	2662c <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    7626:	f018 fbf5 	bl	1fe14 <z_self_abort>
    762a:	bf00      	nop
    762c:	2000ecac 	.word	0x2000ecac
    7630:	e000ed00 	.word	0xe000ed00

00007634 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7634:	4b02      	ldr	r3, [pc, #8]	; (7640 <z_arm_configure_static_mpu_regions+0xc>)
    7636:	4a03      	ldr	r2, [pc, #12]	; (7644 <z_arm_configure_static_mpu_regions+0x10>)
    7638:	4803      	ldr	r0, [pc, #12]	; (7648 <z_arm_configure_static_mpu_regions+0x14>)
    763a:	2101      	movs	r1, #1
    763c:	f000 b8bc 	b.w	77b8 <arm_core_mpu_configure_static_mpu_regions>
    7640:	20040000 	.word	0x20040000
    7644:	20000000 	.word	0x20000000
    7648:	000275c4 	.word	0x000275c4

0000764c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    764c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    764e:	4b05      	ldr	r3, [pc, #20]	; (7664 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    7650:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    7652:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    7654:	4a04      	ldr	r2, [pc, #16]	; (7668 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    7656:	2120      	movs	r1, #32
    7658:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    765c:	4618      	mov	r0, r3
    765e:	2101      	movs	r1, #1
    7660:	f000 b8b4 	b.w	77cc <arm_core_mpu_configure_dynamic_mpu_regions>
    7664:	2000d6b4 	.word	0x2000d6b4
    7668:	150b0000 	.word	0x150b0000

0000766c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    766e:	4f2a      	ldr	r7, [pc, #168]	; (7718 <mpu_configure_regions+0xac>)
    7670:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    7672:	2100      	movs	r1, #0
    7674:	42b1      	cmp	r1, r6
    7676:	da14      	bge.n	76a2 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    7678:	6844      	ldr	r4, [r0, #4]
    767a:	2c00      	cmp	r4, #0
    767c:	d048      	beq.n	7710 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    767e:	b1c3      	cbz	r3, 76b2 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    7680:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    7684:	ea14 0f0c 	tst.w	r4, ip
    7688:	d00d      	beq.n	76a6 <mpu_configure_regions+0x3a>
    768a:	4a24      	ldr	r2, [pc, #144]	; (771c <mpu_configure_regions+0xb0>)
    768c:	4b24      	ldr	r3, [pc, #144]	; (7720 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    768e:	4825      	ldr	r0, [pc, #148]	; (7724 <mpu_configure_regions+0xb8>)
    7690:	1ad2      	subs	r2, r2, r3
    7692:	08d2      	lsrs	r2, r2, #3
    7694:	0192      	lsls	r2, r2, #6
    7696:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    769a:	f01a fa6f 	bl	21b7c <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    769e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    76a2:	4610      	mov	r0, r2
    76a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    76a6:	2c1f      	cmp	r4, #31
    76a8:	d9ef      	bls.n	768a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    76aa:	6805      	ldr	r5, [r0, #0]
		&&
    76ac:	ea1c 0f05 	tst.w	ip, r5
    76b0:	d1eb      	bne.n	768a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    76b2:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    76b4:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    76b6:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    76ba:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    76bc:	d916      	bls.n	76ec <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    76be:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    76c2:	d815      	bhi.n	76f0 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    76c4:	3c01      	subs	r4, #1
    76c6:	fab4 f484 	clz	r4, r4
    76ca:	f1c4 041f 	rsb	r4, r4, #31
    76ce:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    76d0:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    76d2:	ea4c 0404 	orr.w	r4, ip, r4
    76d6:	d90d      	bls.n	76f4 <mpu_configure_regions+0x88>
    76d8:	4a10      	ldr	r2, [pc, #64]	; (771c <mpu_configure_regions+0xb0>)
    76da:	4b11      	ldr	r3, [pc, #68]	; (7720 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    76dc:	4812      	ldr	r0, [pc, #72]	; (7728 <mpu_configure_regions+0xbc>)
    76de:	1ad2      	subs	r2, r2, r3
    76e0:	08d2      	lsrs	r2, r2, #3
    76e2:	0192      	lsls	r2, r2, #6
    76e4:	f042 0201 	orr.w	r2, r2, #1
    76e8:	4629      	mov	r1, r5
    76ea:	e7d6      	b.n	769a <mpu_configure_regions+0x2e>
		return REGION_32B;
    76ec:	2408      	movs	r4, #8
    76ee:	e7ef      	b.n	76d0 <mpu_configure_regions+0x64>
		return REGION_4G;
    76f0:	243e      	movs	r4, #62	; 0x3e
    76f2:	e7ed      	b.n	76d0 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    76f4:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    76f8:	432a      	orrs	r2, r5
    76fa:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    76fe:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    7702:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7706:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    770a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    770e:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    7710:	3101      	adds	r1, #1
    7712:	300c      	adds	r0, #12
    7714:	e7ae      	b.n	7674 <mpu_configure_regions+0x8>
    7716:	bf00      	nop
    7718:	e000ed00 	.word	0xe000ed00
    771c:	000270f0 	.word	0x000270f0
    7720:	00026fc8 	.word	0x00026fc8
    7724:	0002b294 	.word	0x0002b294
    7728:	0002b2b7 	.word	0x0002b2b7

0000772c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    772c:	4b04      	ldr	r3, [pc, #16]	; (7740 <arm_core_mpu_enable+0x14>)
    772e:	2205      	movs	r2, #5
    7730:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    7734:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7738:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    773c:	4770      	bx	lr
    773e:	bf00      	nop
    7740:	e000ed00 	.word	0xe000ed00

00007744 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    7744:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7748:	4b02      	ldr	r3, [pc, #8]	; (7754 <arm_core_mpu_disable+0x10>)
    774a:	2200      	movs	r2, #0
    774c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7750:	4770      	bx	lr
    7752:	bf00      	nop
    7754:	e000ed00 	.word	0xe000ed00

00007758 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7758:	4914      	ldr	r1, [pc, #80]	; (77ac <arm_mpu_init+0x54>)
    775a:	6808      	ldr	r0, [r1, #0]
    775c:	2808      	cmp	r0, #8
{
    775e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    7760:	d821      	bhi.n	77a6 <arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    7762:	f7ff ffef 	bl	7744 <arm_core_mpu_disable>
	MPU->RNR = index;
    7766:	4c12      	ldr	r4, [pc, #72]	; (77b0 <arm_mpu_init+0x58>)
    7768:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    776a:	2200      	movs	r2, #0
    776c:	4290      	cmp	r0, r2
    776e:	f101 010c 	add.w	r1, r1, #12
    7772:	d105      	bne.n	7780 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7774:	4b0f      	ldr	r3, [pc, #60]	; (77b4 <arm_mpu_init+0x5c>)
    7776:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    7778:	f7ff ffd8 	bl	772c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    777c:	2000      	movs	r0, #0
}
    777e:	bd10      	pop	{r4, pc}
    7780:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7784:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    7788:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    778c:	4313      	orrs	r3, r2
    778e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7792:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7796:	f851 3c04 	ldr.w	r3, [r1, #-4]
    779a:	f043 0301 	orr.w	r3, r3, #1
    779e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    77a2:	3201      	adds	r2, #1
    77a4:	e7e2      	b.n	776c <arm_mpu_init+0x14>
		return -1;
    77a6:	f04f 30ff 	mov.w	r0, #4294967295
    77aa:	e7e8      	b.n	777e <arm_mpu_init+0x26>
    77ac:	000275d0 	.word	0x000275d0
    77b0:	e000ed00 	.word	0xe000ed00
    77b4:	2000f150 	.word	0x2000f150

000077b8 <arm_core_mpu_configure_static_mpu_regions>:
{
    77b8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    77ba:	4c03      	ldr	r4, [pc, #12]	; (77c8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    77bc:	2301      	movs	r3, #1
    77be:	7822      	ldrb	r2, [r4, #0]
    77c0:	f7ff ff54 	bl	766c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    77c4:	7020      	strb	r0, [r4, #0]
}
    77c6:	bd10      	pop	{r4, pc}
    77c8:	2000f150 	.word	0x2000f150

000077cc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    77cc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    77ce:	4a09      	ldr	r2, [pc, #36]	; (77f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    77d0:	2300      	movs	r3, #0
    77d2:	7812      	ldrb	r2, [r2, #0]
    77d4:	f7ff ff4a 	bl	766c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    77d8:	f110 0f16 	cmn.w	r0, #22
    77dc:	d003      	beq.n	77e6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    77de:	4b06      	ldr	r3, [pc, #24]	; (77f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    77e0:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    77e2:	2807      	cmp	r0, #7
    77e4:	dd00      	ble.n	77e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    77e6:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    77e8:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    77ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    77f0:	3001      	adds	r0, #1
    77f2:	e7f6      	b.n	77e2 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    77f4:	2000f150 	.word	0x2000f150
    77f8:	e000ed00 	.word	0xe000ed00

000077fc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    77fc:	4b01      	ldr	r3, [pc, #4]	; (7804 <__stdout_hook_install+0x8>)
    77fe:	6018      	str	r0, [r3, #0]
}
    7800:	4770      	bx	lr
    7802:	bf00      	nop
    7804:	200002a8 	.word	0x200002a8

00007808 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    7808:	3902      	subs	r1, #2
    780a:	2901      	cmp	r1, #1
    780c:	d802      	bhi.n	7814 <z_impl_zephyr_fputc+0xc>
    780e:	4b03      	ldr	r3, [pc, #12]	; (781c <z_impl_zephyr_fputc+0x14>)
    7810:	681b      	ldr	r3, [r3, #0]
    7812:	4718      	bx	r3
}
    7814:	f04f 30ff 	mov.w	r0, #4294967295
    7818:	4770      	bx	lr
    781a:	bf00      	nop
    781c:	200002a8 	.word	0x200002a8

00007820 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    7820:	b40e      	push	{r1, r2, r3}
    7822:	b50f      	push	{r0, r1, r2, r3, lr}
    7824:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    7826:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    782a:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    782e:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    7830:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    7832:	4806      	ldr	r0, [pc, #24]	; (784c <sprintf+0x2c>)
	va_start(vargs, format);
    7834:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    7836:	a902      	add	r1, sp, #8
    7838:	f7fc fe2e 	bl	4498 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    783c:	9b02      	ldr	r3, [sp, #8]
    783e:	2200      	movs	r2, #0
    7840:	701a      	strb	r2, [r3, #0]
	return r;
}
    7842:	b004      	add	sp, #16
    7844:	f85d eb04 	ldr.w	lr, [sp], #4
    7848:	b003      	add	sp, #12
    784a:	4770      	bx	lr
    784c:	00023c21 	.word	0x00023c21

00007850 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    7850:	b40f      	push	{r0, r1, r2, r3}
    7852:	b507      	push	{r0, r1, r2, lr}
    7854:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    7856:	2102      	movs	r1, #2
{
    7858:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    785c:	4804      	ldr	r0, [pc, #16]	; (7870 <printf+0x20>)
	va_start(vargs, format);
    785e:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    7860:	f7fc fe1a 	bl	4498 <cbvprintf>
	va_end(vargs);

	return r;
}
    7864:	b003      	add	sp, #12
    7866:	f85d eb04 	ldr.w	lr, [sp], #4
    786a:	b004      	add	sp, #16
    786c:	4770      	bx	lr
    786e:	bf00      	nop
    7870:	00023c1d 	.word	0x00023c1d

00007874 <nordicsemi_nrf52_init>:
    7874:	f04f 0320 	mov.w	r3, #32
    7878:	f3ef 8211 	mrs	r2, BASEPRI
    787c:	f383 8811 	msr	BASEPRI, r3
    7880:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    7884:	4906      	ldr	r1, [pc, #24]	; (78a0 <nordicsemi_nrf52_init+0x2c>)
    7886:	2301      	movs	r3, #1
    7888:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    788c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7890:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    7894:	f382 8811 	msr	BASEPRI, r2
    7898:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    789c:	2000      	movs	r0, #0
    789e:	4770      	bx	lr
    78a0:	4001e000 	.word	0x4001e000

000078a4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    78a4:	b120      	cbz	r0, 78b0 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    78a6:	4b03      	ldr	r3, [pc, #12]	; (78b4 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    78a8:	0180      	lsls	r0, r0, #6
    78aa:	f043 0301 	orr.w	r3, r3, #1
    78ae:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    78b0:	4770      	bx	lr
    78b2:	bf00      	nop
    78b4:	00027240 	.word	0x00027240

000078b8 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    78b8:	4b0e      	ldr	r3, [pc, #56]	; (78f4 <bt_hex_real+0x3c>)
    78ba:	2940      	cmp	r1, #64	; 0x40
{
    78bc:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    78be:	bf28      	it	cs
    78c0:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    78c2:	4c0d      	ldr	r4, [pc, #52]	; (78f8 <bt_hex_real+0x40>)
    78c4:	1846      	adds	r6, r0, r1
    78c6:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    78c8:	42b0      	cmp	r0, r6
    78ca:	f103 0302 	add.w	r3, r3, #2
    78ce:	d104      	bne.n	78da <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    78d0:	2300      	movs	r3, #0
    78d2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    78d6:	4807      	ldr	r0, [pc, #28]	; (78f4 <bt_hex_real+0x3c>)
    78d8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    78da:	7802      	ldrb	r2, [r0, #0]
    78dc:	0912      	lsrs	r2, r2, #4
    78de:	5ca2      	ldrb	r2, [r4, r2]
    78e0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    78e4:	f810 2b01 	ldrb.w	r2, [r0], #1
    78e8:	f002 020f 	and.w	r2, r2, #15
    78ec:	5ca2      	ldrb	r2, [r4, r2]
    78ee:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    78f2:	e7e9      	b.n	78c8 <bt_hex_real+0x10>
    78f4:	2000f16f 	.word	0x2000f16f
    78f8:	0002b2f0 	.word	0x0002b2f0

000078fc <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    78fc:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    78fe:	7803      	ldrb	r3, [r0, #0]
    7900:	b08b      	sub	sp, #44	; 0x2c
    7902:	4604      	mov	r4, r0
    7904:	ad07      	add	r5, sp, #28
    7906:	2b03      	cmp	r3, #3
    7908:	d821      	bhi.n	794e <bt_addr_le_str_real+0x52>
    790a:	e8df f003 	tbb	[pc, r3]
    790e:	1a02      	.short	0x1a02
    7910:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    7912:	4912      	ldr	r1, [pc, #72]	; (795c <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    7914:	4628      	mov	r0, r5
    7916:	f01c f8d6 	bl	23ac6 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    791a:	7863      	ldrb	r3, [r4, #1]
    791c:	9304      	str	r3, [sp, #16]
    791e:	78a3      	ldrb	r3, [r4, #2]
    7920:	9303      	str	r3, [sp, #12]
    7922:	78e3      	ldrb	r3, [r4, #3]
    7924:	9302      	str	r3, [sp, #8]
    7926:	7923      	ldrb	r3, [r4, #4]
    7928:	9301      	str	r3, [sp, #4]
    792a:	7963      	ldrb	r3, [r4, #5]
    792c:	9300      	str	r3, [sp, #0]
    792e:	4a0c      	ldr	r2, [pc, #48]	; (7960 <bt_addr_le_str_real+0x64>)
    7930:	79a3      	ldrb	r3, [r4, #6]
    7932:	9505      	str	r5, [sp, #20]
    7934:	211e      	movs	r1, #30
    7936:	480b      	ldr	r0, [pc, #44]	; (7964 <bt_addr_le_str_real+0x68>)
    7938:	f019 fcb9 	bl	212ae <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    793c:	4809      	ldr	r0, [pc, #36]	; (7964 <bt_addr_le_str_real+0x68>)
    793e:	b00b      	add	sp, #44	; 0x2c
    7940:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    7942:	4909      	ldr	r1, [pc, #36]	; (7968 <bt_addr_le_str_real+0x6c>)
    7944:	e7e6      	b.n	7914 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    7946:	4909      	ldr	r1, [pc, #36]	; (796c <bt_addr_le_str_real+0x70>)
    7948:	e7e4      	b.n	7914 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    794a:	4909      	ldr	r1, [pc, #36]	; (7970 <bt_addr_le_str_real+0x74>)
    794c:	e7e2      	b.n	7914 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    794e:	4a09      	ldr	r2, [pc, #36]	; (7974 <bt_addr_le_str_real+0x78>)
    7950:	210a      	movs	r1, #10
    7952:	4628      	mov	r0, r5
    7954:	f019 fcab 	bl	212ae <snprintk>
		break;
    7958:	e7df      	b.n	791a <bt_addr_le_str_real+0x1e>
    795a:	bf00      	nop
    795c:	00028a42 	.word	0x00028a42
    7960:	00028a64 	.word	0x00028a64
    7964:	2000f151 	.word	0x2000f151
    7968:	00028a49 	.word	0x00028a49
    796c:	00028a50 	.word	0x00028a50
    7970:	00028a5a 	.word	0x00028a5a
    7974:	0002ca15 	.word	0x0002ca15

00007978 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    7978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    797c:	4b64      	ldr	r3, [pc, #400]	; (7b10 <ecc_thread+0x198>)
    797e:	4d65      	ldr	r5, [pc, #404]	; (7b14 <ecc_thread+0x19c>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7980:	f8df 8194 	ldr.w	r8, [pc, #404]	; 7b18 <ecc_thread+0x1a0>
	return z_impl_k_sem_take(sem, timeout);
    7984:	f8df 9194 	ldr.w	r9, [pc, #404]	; 7b1c <ecc_thread+0x1a4>
    7988:	1aed      	subs	r5, r5, r3
    798a:	08ed      	lsrs	r5, r5, #3
    798c:	4647      	mov	r7, r8
    798e:	f04f 32ff 	mov.w	r2, #4294967295
    7992:	f04f 33ff 	mov.w	r3, #4294967295
    7996:	4648      	mov	r0, r9
    7998:	f018 f942 	bl	1fc20 <z_impl_k_sem_take>
    799c:	f3bf 8f5b 	dmb	ish
    79a0:	f8d8 4000 	ldr.w	r4, [r8]
    79a4:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    79a8:	f014 0401 	ands.w	r4, r4, #1
    79ac:	d05a      	beq.n	7a64 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    79ae:	f8df a170 	ldr.w	sl, [pc, #368]	; 7b20 <ecc_thread+0x1a8>
    79b2:	4c5c      	ldr	r4, [pc, #368]	; (7b24 <ecc_thread+0x1ac>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    79b4:	4e5c      	ldr	r6, [pc, #368]	; (7b28 <ecc_thread+0x1b0>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    79b6:	485d      	ldr	r0, [pc, #372]	; (7b2c <ecc_thread+0x1b4>)
    79b8:	4652      	mov	r2, sl
    79ba:	4621      	mov	r1, r4
    79bc:	f01a ff06 	bl	227cc <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    79c0:	bbe8      	cbnz	r0, 7a3e <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    79c2:	01a9      	lsls	r1, r5, #6
    79c4:	485a      	ldr	r0, [pc, #360]	; (7b30 <ecc_thread+0x1b8>)
    79c6:	f041 0101 	orr.w	r1, r1, #1
    79ca:	f01a f8ca 	bl	21b62 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    79ce:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    79d2:	f04f 32ff 	mov.w	r2, #4294967295
    79d6:	f04f 33ff 	mov.w	r3, #4294967295
    79da:	2001      	movs	r0, #1
    79dc:	f000 fb1a 	bl	8014 <bt_buf_get_rx>
    79e0:	f100 0608 	add.w	r6, r0, #8
    79e4:	2102      	movs	r1, #2
    79e6:	4604      	mov	r4, r0
    79e8:	4630      	mov	r0, r6
    79ea:	f01e f91a 	bl	25c22 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    79ee:	233e      	movs	r3, #62	; 0x3e
    79f0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    79f2:	2342      	movs	r3, #66	; 0x42
    79f4:	7043      	strb	r3, [r0, #1]
    79f6:	2101      	movs	r1, #1
    79f8:	4630      	mov	r0, r6
    79fa:	f01e f912 	bl	25c22 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    79fe:	2308      	movs	r3, #8
    7a00:	7003      	strb	r3, [r0, #0]
    7a02:	2141      	movs	r1, #65	; 0x41
    7a04:	4630      	mov	r0, r6
    7a06:	f01e f90c 	bl	25c22 <net_buf_simple_add>
    7a0a:	4606      	mov	r6, r0
	evt->status = status;
    7a0c:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    7a10:	f1ba 0f00 	cmp.w	sl, #0
    7a14:	d01d      	beq.n	7a52 <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    7a16:	2240      	movs	r2, #64	; 0x40
    7a18:	2100      	movs	r1, #0
    7a1a:	f01c f8d9 	bl	23bd0 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7a1e:	f3bf 8f5b 	dmb	ish
    7a22:	e857 3f00 	ldrex	r3, [r7]
    7a26:	f023 0301 	bic.w	r3, r3, #1
    7a2a:	e847 3200 	strex	r2, r3, [r7]
    7a2e:	2a00      	cmp	r2, #0
    7a30:	d1f7      	bne.n	7a22 <ecc_thread+0xaa>
    7a32:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    7a36:	4620      	mov	r0, r4
	bt_recv(buf);
    7a38:	f002 f85a 	bl	9af0 <bt_recv>
	while (true) {
    7a3c:	e7a7      	b.n	798e <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    7a3e:	2220      	movs	r2, #32
    7a40:	4631      	mov	r1, r6
    7a42:	4620      	mov	r0, r4
    7a44:	f01c f888 	bl	23b58 <memcmp>
    7a48:	2800      	cmp	r0, #0
    7a4a:	d0b4      	beq.n	79b6 <ecc_thread+0x3e>
	return 0;
    7a4c:	f04f 0a00 	mov.w	sl, #0
    7a50:	e7bf      	b.n	79d2 <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    7a52:	4936      	ldr	r1, [pc, #216]	; (7b2c <ecc_thread+0x1b4>)
    7a54:	f01c f97c 	bl	23d50 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    7a58:	3120      	adds	r1, #32
    7a5a:	f106 0021 	add.w	r0, r6, #33	; 0x21
    7a5e:	f01c f977 	bl	23d50 <sys_memcpy_swap.constprop.0>
    7a62:	e7dc      	b.n	7a1e <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7a64:	f3bf 8f5b 	dmb	ish
    7a68:	f8d8 3000 	ldr.w	r3, [r8]
    7a6c:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    7a70:	079b      	lsls	r3, r3, #30
    7a72:	d58c      	bpl.n	798e <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    7a74:	492a      	ldr	r1, [pc, #168]	; (7b20 <ecc_thread+0x1a8>)
    7a76:	482d      	ldr	r0, [pc, #180]	; (7b2c <ecc_thread+0x1b4>)
    7a78:	f01b fd6d 	bl	23556 <uECC_valid_public_key>
	if (ret < 0) {
    7a7c:	1e01      	subs	r1, r0, #0
    7a7e:	da38      	bge.n	7af2 <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    7a80:	01aa      	lsls	r2, r5, #6
    7a82:	482c      	ldr	r0, [pc, #176]	; (7b34 <ecc_thread+0x1bc>)
    7a84:	f042 0201 	orr.w	r2, r2, #1
    7a88:	f01a f878 	bl	21b7c <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7a8c:	f04f 32ff 	mov.w	r2, #4294967295
    7a90:	f04f 33ff 	mov.w	r3, #4294967295
    7a94:	2001      	movs	r0, #1
    7a96:	f000 fabd 	bl	8014 <bt_buf_get_rx>
    7a9a:	f100 0a08 	add.w	sl, r0, #8
    7a9e:	2102      	movs	r1, #2
    7aa0:	4606      	mov	r6, r0
    7aa2:	4650      	mov	r0, sl
    7aa4:	f01e f8bd 	bl	25c22 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    7aa8:	233e      	movs	r3, #62	; 0x3e
    7aaa:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7aac:	2322      	movs	r3, #34	; 0x22
    7aae:	7043      	strb	r3, [r0, #1]
    7ab0:	2101      	movs	r1, #1
    7ab2:	4650      	mov	r0, sl
    7ab4:	f01e f8b5 	bl	25c22 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    7ab8:	2309      	movs	r3, #9
    7aba:	7003      	strb	r3, [r0, #0]
    7abc:	2121      	movs	r1, #33	; 0x21
    7abe:	4650      	mov	r0, sl
    7ac0:	f01e f8af 	bl	25c22 <net_buf_simple_add>
    7ac4:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    7ac6:	3001      	adds	r0, #1
    7ac8:	b9e4      	cbnz	r4, 7b04 <ecc_thread+0x18c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    7aca:	221f      	movs	r2, #31
    7acc:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    7ace:	21ff      	movs	r1, #255	; 0xff
    7ad0:	2220      	movs	r2, #32
    7ad2:	f01c f87d 	bl	23bd0 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7ad6:	f3bf 8f5b 	dmb	ish
    7ada:	e857 3f00 	ldrex	r3, [r7]
    7ade:	f023 0302 	bic.w	r3, r3, #2
    7ae2:	e847 3200 	strex	r2, r3, [r7]
    7ae6:	2a00      	cmp	r2, #0
    7ae8:	d1f7      	bne.n	7ada <ecc_thread+0x162>
    7aea:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    7aee:	4630      	mov	r0, r6
    7af0:	e7a2      	b.n	7a38 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be, ecc.private_key_be,
    7af2:	4a0e      	ldr	r2, [pc, #56]	; (7b2c <ecc_thread+0x1b4>)
    7af4:	4b0a      	ldr	r3, [pc, #40]	; (7b20 <ecc_thread+0x1a8>)
    7af6:	f1a2 0120 	sub.w	r1, r2, #32
    7afa:	4610      	mov	r0, r2
    7afc:	f01a feb5 	bl	2286a <uECC_shared_secret>
    7b00:	4604      	mov	r4, r0
    7b02:	e7c3      	b.n	7a8c <ecc_thread+0x114>
		evt->status = 0U;
    7b04:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    7b06:	4909      	ldr	r1, [pc, #36]	; (7b2c <ecc_thread+0x1b4>)
		evt->status = 0U;
    7b08:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    7b0a:	f01c f921 	bl	23d50 <sys_memcpy_swap.constprop.0>
    7b0e:	e7e2      	b.n	7ad6 <ecc_thread+0x15e>
    7b10:	00026fc8 	.word	0x00026fc8
    7b14:	00027088 	.word	0x00027088
    7b18:	2000d6c0 	.word	0x2000d6c0
    7b1c:	20009f88 	.word	0x20009f88
    7b20:	000275f0 	.word	0x000275f0
    7b24:	2000f1f0 	.word	0x2000f1f0
    7b28:	0002b364 	.word	0x0002b364
    7b2c:	2000f210 	.word	0x2000f210
    7b30:	0002b308 	.word	0x0002b308
    7b34:	0002b331 	.word	0x0002b331

00007b38 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    7b38:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    7b3a:	7d05      	ldrb	r5, [r0, #20]
    7b3c:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    7b3e:	b9ad      	cbnz	r5, 7b6c <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    7b40:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    7b42:	881a      	ldrh	r2, [r3, #0]
    7b44:	f242 0125 	movw	r1, #8229	; 0x2025
    7b48:	428a      	cmp	r2, r1
    7b4a:	d017      	beq.n	7b7c <bt_hci_ecc_send+0x44>
    7b4c:	f242 0126 	movw	r1, #8230	; 0x2026
    7b50:	428a      	cmp	r2, r1
    7b52:	d03c      	beq.n	7bce <bt_hci_ecc_send+0x96>
    7b54:	f242 0101 	movw	r1, #8193	; 0x2001
    7b58:	428a      	cmp	r2, r1
    7b5a:	d107      	bne.n	7b6c <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    7b5c:	78da      	ldrb	r2, [r3, #3]
    7b5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7b62:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    7b64:	791a      	ldrb	r2, [r3, #4]
    7b66:	f022 0201 	bic.w	r2, r2, #1
    7b6a:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    7b6c:	4b31      	ldr	r3, [pc, #196]	; (7c34 <bt_hci_ecc_send+0xfc>)
    7b6e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    7b72:	4620      	mov	r0, r4
    7b74:	691b      	ldr	r3, [r3, #16]
}
    7b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    7b7a:	4718      	bx	r3
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    7b7c:	2103      	movs	r1, #3
    7b7e:	3008      	adds	r0, #8
    7b80:	f01e f86e 	bl	25c60 <net_buf_simple_pull>
	net_buf_unref(buf);
    7b84:	4620      	mov	r0, r4
    7b86:	f015 f949 	bl	1ce1c <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7b8a:	f3bf 8f5b 	dmb	ish
    7b8e:	4b2a      	ldr	r3, [pc, #168]	; (7c38 <bt_hci_ecc_send+0x100>)
    7b90:	681a      	ldr	r2, [r3, #0]
    7b92:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    7b96:	0790      	lsls	r0, r2, #30
    7b98:	d507      	bpl.n	7baa <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    7b9a:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    7b9c:	4629      	mov	r1, r5
    7b9e:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    7ba2:	f01c f8b1 	bl	23d08 <send_cmd_status>
}
    7ba6:	2000      	movs	r0, #0
    7ba8:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7baa:	f3bf 8f5b 	dmb	ish
    7bae:	e853 2f00 	ldrex	r2, [r3]
    7bb2:	f042 0101 	orr.w	r1, r2, #1
    7bb6:	e843 1000 	strex	r0, r1, [r3]
    7bba:	2800      	cmp	r0, #0
    7bbc:	d1f7      	bne.n	7bae <bt_hci_ecc_send+0x76>
    7bbe:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    7bc2:	07d1      	lsls	r1, r2, #31
    7bc4:	d4e9      	bmi.n	7b9a <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    7bc6:	481d      	ldr	r0, [pc, #116]	; (7c3c <bt_hci_ecc_send+0x104>)
    7bc8:	f018 f804 	bl	1fbd4 <z_impl_k_sem_give>
}
    7bcc:	e7e6      	b.n	7b9c <bt_hci_ecc_send+0x64>
    7bce:	2103      	movs	r1, #3
    7bd0:	3008      	adds	r0, #8
    7bd2:	f01e f845 	bl	25c60 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7bd6:	f3bf 8f5b 	dmb	ish
    7bda:	4b17      	ldr	r3, [pc, #92]	; (7c38 <bt_hci_ecc_send+0x100>)
    7bdc:	681a      	ldr	r2, [r3, #0]
    7bde:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7be2:	07d2      	lsls	r2, r2, #31
    7be4:	d507      	bpl.n	7bf6 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    7be6:	250c      	movs	r5, #12
	net_buf_unref(buf);
    7be8:	4620      	mov	r0, r4
    7bea:	f015 f917 	bl	1ce1c <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    7bee:	4629      	mov	r1, r5
    7bf0:	f242 0026 	movw	r0, #8230	; 0x2026
    7bf4:	e7d5      	b.n	7ba2 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    7bf6:	89a2      	ldrh	r2, [r4, #12]
    7bf8:	2a3f      	cmp	r2, #63	; 0x3f
    7bfa:	d919      	bls.n	7c30 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7bfc:	f3bf 8f5b 	dmb	ish
    7c00:	e853 2f00 	ldrex	r2, [r3]
    7c04:	f042 0102 	orr.w	r1, r2, #2
    7c08:	e843 1000 	strex	r0, r1, [r3]
    7c0c:	2800      	cmp	r0, #0
    7c0e:	d1f7      	bne.n	7c00 <bt_hci_ecc_send+0xc8>
    7c10:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    7c14:	0793      	lsls	r3, r2, #30
    7c16:	d4e6      	bmi.n	7be6 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    7c18:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.public_key_be, cmd->key, 32);
    7c1a:	4809      	ldr	r0, [pc, #36]	; (7c40 <bt_hci_ecc_send+0x108>)
    7c1c:	f01c f898 	bl	23d50 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &cmd->key[32], 32);
    7c20:	4808      	ldr	r0, [pc, #32]	; (7c44 <bt_hci_ecc_send+0x10c>)
    7c22:	3120      	adds	r1, #32
    7c24:	f01c f894 	bl	23d50 <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    7c28:	4804      	ldr	r0, [pc, #16]	; (7c3c <bt_hci_ecc_send+0x104>)
    7c2a:	f017 ffd3 	bl	1fbd4 <z_impl_k_sem_give>
}
    7c2e:	e7db      	b.n	7be8 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    7c30:	2512      	movs	r5, #18
    7c32:	e7d9      	b.n	7be8 <bt_hci_ecc_send+0xb0>
    7c34:	20000000 	.word	0x20000000
    7c38:	2000d6c0 	.word	0x2000d6c0
    7c3c:	20009f88 	.word	0x20009f88
    7c40:	2000f210 	.word	0x2000f210
    7c44:	2000f230 	.word	0x2000f230

00007c48 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    7c48:	b510      	push	{r4, lr}
    7c4a:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7c4c:	4c0c      	ldr	r4, [pc, #48]	; (7c80 <bt_hci_ecc_init+0x38>)
    7c4e:	490d      	ldr	r1, [pc, #52]	; (7c84 <bt_hci_ecc_init+0x3c>)
    7c50:	2200      	movs	r2, #0
    7c52:	2300      	movs	r3, #0
    7c54:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7c58:	2300      	movs	r3, #0
    7c5a:	220a      	movs	r2, #10
    7c5c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    7c60:	e9cd 3301 	strd	r3, r3, [sp, #4]
    7c64:	9300      	str	r3, [sp, #0]
    7c66:	f44f 628a 	mov.w	r2, #1104	; 0x450
    7c6a:	4b07      	ldr	r3, [pc, #28]	; (7c88 <bt_hci_ecc_init+0x40>)
    7c6c:	4620      	mov	r0, r4
    7c6e:	f018 f849 	bl	1fd04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    7c72:	4906      	ldr	r1, [pc, #24]	; (7c8c <bt_hci_ecc_init+0x44>)
    7c74:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    7c76:	b008      	add	sp, #32
    7c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c7c:	f01e bdc4 	b.w	26808 <z_impl_k_thread_name_set>
    7c80:	2000a520 	.word	0x2000a520
    7c84:	20010160 	.word	0x20010160
    7c88:	00007979 	.word	0x00007979
    7c8c:	0002b352 	.word	0x0002b352

00007c90 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    7c90:	b538      	push	{r3, r4, r5, lr}
    7c92:	4b14      	ldr	r3, [pc, #80]	; (7ce4 <save_id+0x54>)
    7c94:	4c14      	ldr	r4, [pc, #80]	; (7ce8 <save_id+0x58>)
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    7c96:	4d15      	ldr	r5, [pc, #84]	; (7cec <save_id+0x5c>)
	BT_INFO("Saving ID");
    7c98:	4815      	ldr	r0, [pc, #84]	; (7cf0 <save_id+0x60>)
    7c9a:	1ae4      	subs	r4, r4, r3
    7c9c:	08e4      	lsrs	r4, r4, #3
    7c9e:	01a4      	lsls	r4, r4, #6
    7ca0:	f044 0103 	orr.w	r1, r4, #3
    7ca4:	f019 ff5d 	bl	21b62 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    7ca8:	79ea      	ldrb	r2, [r5, #7]
    7caa:	4812      	ldr	r0, [pc, #72]	; (7cf4 <save_id+0x64>)
    7cac:	4629      	mov	r1, r5
    7cae:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    7cb2:	f7fe f993 	bl	5fdc <settings_save_one>
	if (err) {
    7cb6:	4601      	mov	r1, r0
    7cb8:	b120      	cbz	r0, 7cc4 <save_id+0x34>
		BT_ERR("Failed to save ID (err %d)", err);
    7cba:	480f      	ldr	r0, [pc, #60]	; (7cf8 <save_id+0x68>)
    7cbc:	f044 0201 	orr.w	r2, r4, #1
    7cc0:	f019 ff5c 	bl	21b7c <log_1>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    7cc4:	79ea      	ldrb	r2, [r5, #7]
    7cc6:	490d      	ldr	r1, [pc, #52]	; (7cfc <save_id+0x6c>)
    7cc8:	480d      	ldr	r0, [pc, #52]	; (7d00 <save_id+0x70>)
    7cca:	0112      	lsls	r2, r2, #4
    7ccc:	f7fe f986 	bl	5fdc <settings_save_one>
	if (err) {
    7cd0:	4601      	mov	r1, r0
    7cd2:	b130      	cbz	r0, 7ce2 <save_id+0x52>
		BT_ERR("Failed to save IRK (err %d)", err);
    7cd4:	f044 0201 	orr.w	r2, r4, #1
    7cd8:	480a      	ldr	r0, [pc, #40]	; (7d04 <save_id+0x74>)
	}
#endif
}
    7cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Failed to save IRK (err %d)", err);
    7cde:	f019 bf4d 	b.w	21b7c <log_1>
}
    7ce2:	bd38      	pop	{r3, r4, r5, pc}
    7ce4:	00026fc8 	.word	0x00026fc8
    7ce8:	000270a8 	.word	0x000270a8
    7cec:	20000000 	.word	0x20000000
    7cf0:	0002b384 	.word	0x0002b384
    7cf4:	0002b38e 	.word	0x0002b38e
    7cf8:	0002b394 	.word	0x0002b394
    7cfc:	20000120 	.word	0x20000120
    7d00:	0002b3af 	.word	0x0002b3af
    7d04:	0002b3b6 	.word	0x0002b3b6

00007d08 <set>:
{
    7d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7d0c:	4605      	mov	r5, r0
    7d0e:	4616      	mov	r6, r2
    7d10:	461f      	mov	r7, r3
	if (!name) {
    7d12:	b960      	cbnz	r0, 7d2e <set+0x26>
    7d14:	4942      	ldr	r1, [pc, #264]	; (7e20 <set+0x118>)
    7d16:	4b43      	ldr	r3, [pc, #268]	; (7e24 <set+0x11c>)
		BT_ERR("Insufficient number of arguments");
    7d18:	4843      	ldr	r0, [pc, #268]	; (7e28 <set+0x120>)
    7d1a:	1ac9      	subs	r1, r1, r3
    7d1c:	08c9      	lsrs	r1, r1, #3
    7d1e:	0189      	lsls	r1, r1, #6
    7d20:	f041 0101 	orr.w	r1, r1, #1
    7d24:	f019 ff1d 	bl	21b62 <log_0>
	return -ENOENT;
    7d28:	f06f 0401 	mvn.w	r4, #1
    7d2c:	e01c      	b.n	7d68 <set+0x60>
	len = settings_name_next(name, &next);
    7d2e:	a901      	add	r1, sp, #4
    7d30:	f01a fbcc 	bl	224cc <settings_name_next>
	if (!strncmp(name, "id", len)) {
    7d34:	493d      	ldr	r1, [pc, #244]	; (7e2c <set+0x124>)
    7d36:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    7d38:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    7d3a:	4628      	mov	r0, r5
    7d3c:	f01b fefb 	bl	23b36 <strncmp>
    7d40:	4604      	mov	r4, r0
    7d42:	bb90      	cbnz	r0, 7daa <set+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7d44:	f3bf 8f5b 	dmb	ish
    7d48:	4d39      	ldr	r5, [pc, #228]	; (7e30 <set+0x128>)
    7d4a:	682b      	ldr	r3, [r5, #0]
    7d4c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    7d50:	075b      	lsls	r3, r3, #29
    7d52:	d50d      	bpl.n	7d70 <set+0x68>
    7d54:	4932      	ldr	r1, [pc, #200]	; (7e20 <set+0x118>)
    7d56:	4b33      	ldr	r3, [pc, #204]	; (7e24 <set+0x11c>)
			BT_WARN("Ignoring identities stored in flash");
    7d58:	4836      	ldr	r0, [pc, #216]	; (7e34 <set+0x12c>)
    7d5a:	1ac9      	subs	r1, r1, r3
    7d5c:	08c9      	lsrs	r1, r1, #3
    7d5e:	0189      	lsls	r1, r1, #6
    7d60:	f041 0102 	orr.w	r1, r1, #2
    7d64:	f019 fefd 	bl	21b62 <log_0>
}
    7d68:	4620      	mov	r0, r4
    7d6a:	b002      	add	sp, #8
    7d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    7d70:	3d94      	subs	r5, #148	; 0x94
    7d72:	2207      	movs	r2, #7
    7d74:	4629      	mov	r1, r5
    7d76:	4638      	mov	r0, r7
    7d78:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    7d7a:	2806      	cmp	r0, #6
    7d7c:	d810      	bhi.n	7da0 <set+0x98>
    7d7e:	4b29      	ldr	r3, [pc, #164]	; (7e24 <set+0x11c>)
    7d80:	4927      	ldr	r1, [pc, #156]	; (7e20 <set+0x118>)
				BT_ERR("Invalid length ID address in storage");
    7d82:	482d      	ldr	r0, [pc, #180]	; (7e38 <set+0x130>)
    7d84:	1ac9      	subs	r1, r1, r3
    7d86:	08c9      	lsrs	r1, r1, #3
    7d88:	0189      	lsls	r1, r1, #6
    7d8a:	f041 0101 	orr.w	r1, r1, #1
    7d8e:	f019 fee8 	bl	21b62 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    7d92:	2207      	movs	r2, #7
    7d94:	4621      	mov	r1, r4
    7d96:	4628      	mov	r0, r5
    7d98:	f01b ff1a 	bl	23bd0 <memset>
			bt_dev.id_count = 0U;
    7d9c:	71ec      	strb	r4, [r5, #7]
    7d9e:	e7e3      	b.n	7d68 <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    7da0:	2307      	movs	r3, #7
    7da2:	fbb0 f0f3 	udiv	r0, r0, r3
    7da6:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    7da8:	e7de      	b.n	7d68 <set+0x60>
	if (!strncmp(name, "name", len)) {
    7daa:	4924      	ldr	r1, [pc, #144]	; (7e3c <set+0x134>)
    7dac:	4642      	mov	r2, r8
    7dae:	4628      	mov	r0, r5
    7db0:	f01b fec1 	bl	23b36 <strncmp>
    7db4:	4604      	mov	r4, r0
    7db6:	b9a8      	cbnz	r0, 7de4 <set+0xdc>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    7db8:	4921      	ldr	r1, [pc, #132]	; (7e40 <set+0x138>)
    7dba:	2241      	movs	r2, #65	; 0x41
    7dbc:	4638      	mov	r0, r7
    7dbe:	47b0      	blx	r6
		if (len < 0) {
    7dc0:	1e01      	subs	r1, r0, #0
    7dc2:	da0a      	bge.n	7dda <set+0xd2>
    7dc4:	4b17      	ldr	r3, [pc, #92]	; (7e24 <set+0x11c>)
    7dc6:	4a16      	ldr	r2, [pc, #88]	; (7e20 <set+0x118>)
			BT_ERR("Failed to read device name from storage"
    7dc8:	481e      	ldr	r0, [pc, #120]	; (7e44 <set+0x13c>)
    7dca:	1ad2      	subs	r2, r2, r3
    7dcc:	08d2      	lsrs	r2, r2, #3
    7dce:	0192      	lsls	r2, r2, #6
    7dd0:	f042 0201 	orr.w	r2, r2, #1
    7dd4:	f019 fed2 	bl	21b7c <log_1>
    7dd8:	e7c6      	b.n	7d68 <set+0x60>
			bt_dev.name[len] = '\0';
    7dda:	481b      	ldr	r0, [pc, #108]	; (7e48 <set+0x140>)
    7ddc:	4408      	add	r0, r1
    7dde:	f880 4160 	strb.w	r4, [r0, #352]	; 0x160
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    7de2:	e7c1      	b.n	7d68 <set+0x60>
	if (!strncmp(name, "irk", len)) {
    7de4:	4919      	ldr	r1, [pc, #100]	; (7e4c <set+0x144>)
    7de6:	4642      	mov	r2, r8
    7de8:	4628      	mov	r0, r5
    7dea:	f01b fea4 	bl	23b36 <strncmp>
    7dee:	4604      	mov	r4, r0
    7df0:	2800      	cmp	r0, #0
    7df2:	d199      	bne.n	7d28 <set+0x20>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
    7df4:	4916      	ldr	r1, [pc, #88]	; (7e50 <set+0x148>)
    7df6:	2210      	movs	r2, #16
    7df8:	4638      	mov	r0, r7
    7dfa:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
    7dfc:	280f      	cmp	r0, #15
    7dfe:	d8b3      	bhi.n	7d68 <set+0x60>
    7e00:	4b08      	ldr	r3, [pc, #32]	; (7e24 <set+0x11c>)
    7e02:	4907      	ldr	r1, [pc, #28]	; (7e20 <set+0x118>)
				BT_ERR("Invalid length IRK in storage");
    7e04:	4813      	ldr	r0, [pc, #76]	; (7e54 <set+0x14c>)
    7e06:	1ac9      	subs	r1, r1, r3
    7e08:	08c9      	lsrs	r1, r1, #3
    7e0a:	0189      	lsls	r1, r1, #6
    7e0c:	f041 0101 	orr.w	r1, r1, #1
    7e10:	f019 fea7 	bl	21b62 <log_0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
    7e14:	2210      	movs	r2, #16
    7e16:	4621      	mov	r1, r4
    7e18:	480d      	ldr	r0, [pc, #52]	; (7e50 <set+0x148>)
    7e1a:	f01b fed9 	bl	23bd0 <memset>
    7e1e:	e7a3      	b.n	7d68 <set+0x60>
    7e20:	000270a8 	.word	0x000270a8
    7e24:	00026fc8 	.word	0x00026fc8
    7e28:	0002b3d2 	.word	0x0002b3d2
    7e2c:	00028a57 	.word	0x00028a57
    7e30:	20000094 	.word	0x20000094
    7e34:	0002b3f3 	.word	0x0002b3f3
    7e38:	0002b417 	.word	0x0002b417
    7e3c:	0002bdca 	.word	0x0002bdca
    7e40:	20000160 	.word	0x20000160
    7e44:	0002b43c 	.word	0x0002b43c
    7e48:	20000000 	.word	0x20000000
    7e4c:	0002b3b2 	.word	0x0002b3b2
    7e50:	20000120 	.word	0x20000120
    7e54:	0002b46e 	.word	0x0002b46e

00007e58 <bt_settings_encode_key>:
{
    7e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e5c:	b088      	sub	sp, #32
		snprintk(path, path_size,
    7e5e:	799c      	ldrb	r4, [r3, #6]
{
    7e60:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    7e64:	795d      	ldrb	r5, [r3, #5]
    7e66:	791e      	ldrb	r6, [r3, #4]
    7e68:	78df      	ldrb	r7, [r3, #3]
    7e6a:	f893 c002 	ldrb.w	ip, [r3, #2]
    7e6e:	f893 e001 	ldrb.w	lr, [r3, #1]
    7e72:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    7e74:	f1b8 0f00 	cmp.w	r8, #0
    7e78:	d00e      	beq.n	7e98 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    7e7a:	e9cd 3806 	strd	r3, r8, [sp, #24]
    7e7e:	e9cd ce04 	strd	ip, lr, [sp, #16]
    7e82:	4613      	mov	r3, r2
    7e84:	e9cd 6702 	strd	r6, r7, [sp, #8]
    7e88:	e9cd 4500 	strd	r4, r5, [sp]
    7e8c:	4a08      	ldr	r2, [pc, #32]	; (7eb0 <bt_settings_encode_key+0x58>)
    7e8e:	f019 fa0e 	bl	212ae <snprintk>
}
    7e92:	b008      	add	sp, #32
    7e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    7e98:	e9cd e305 	strd	lr, r3, [sp, #20]
    7e9c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    7ea0:	4613      	mov	r3, r2
    7ea2:	e9cd 5601 	strd	r5, r6, [sp, #4]
    7ea6:	4a03      	ldr	r2, [pc, #12]	; (7eb4 <bt_settings_encode_key+0x5c>)
    7ea8:	9400      	str	r4, [sp, #0]
    7eaa:	f019 fa00 	bl	212ae <snprintk>
}
    7eae:	e7f0      	b.n	7e92 <bt_settings_encode_key+0x3a>
    7eb0:	0002b48c 	.word	0x0002b48c
    7eb4:	0002b4b0 	.word	0x0002b4b0

00007eb8 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7eb8:	4909      	ldr	r1, [pc, #36]	; (7ee0 <bt_settings_save_id+0x28>)
    7eba:	f3bf 8f5b 	dmb	ish
    7ebe:	e851 3f00 	ldrex	r3, [r1]
    7ec2:	f043 0201 	orr.w	r2, r3, #1
    7ec6:	e841 2000 	strex	r0, r2, [r1]
    7eca:	2800      	cmp	r0, #0
    7ecc:	d1f7      	bne.n	7ebe <bt_settings_save_id+0x6>
    7ece:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7ed2:	07db      	lsls	r3, r3, #31
    7ed4:	d403      	bmi.n	7ede <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    7ed6:	4803      	ldr	r0, [pc, #12]	; (7ee4 <bt_settings_save_id+0x2c>)
    7ed8:	3908      	subs	r1, #8
    7eda:	f01e bb3d 	b.w	26558 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    7ede:	4770      	bx	lr
    7ee0:	200002b4 	.word	0x200002b4
    7ee4:	2000ac68 	.word	0x2000ac68

00007ee8 <commit>:

static int commit(void)
{
    7ee8:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    7eea:	4c1d      	ldr	r4, [pc, #116]	; (7f60 <commit+0x78>)
    7eec:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
    7ef0:	b913      	cbnz	r3, 7ef8 <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    7ef2:	481c      	ldr	r0, [pc, #112]	; (7f64 <commit+0x7c>)
    7ef4:	f001 ffc4 	bl	9e80 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    7ef8:	79e3      	ldrb	r3, [r4, #7]
    7efa:	b99b      	cbnz	r3, 7f24 <commit+0x3c>
		bt_setup_public_id_addr();
    7efc:	f002 f87a 	bl	9ff4 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    7f00:	79e3      	ldrb	r3, [r4, #7]
    7f02:	b97b      	cbnz	r3, 7f24 <commit+0x3c>
		int err;

		err = bt_setup_random_id_addr();
    7f04:	f002 f95c 	bl	a1c0 <bt_setup_random_id_addr>
		if (err) {
    7f08:	4604      	mov	r4, r0
    7f0a:	b158      	cbz	r0, 7f24 <commit+0x3c>
    7f0c:	4916      	ldr	r1, [pc, #88]	; (7f68 <commit+0x80>)
    7f0e:	4b17      	ldr	r3, [pc, #92]	; (7f6c <commit+0x84>)
			BT_ERR("Unable to setup an identity address");
    7f10:	4817      	ldr	r0, [pc, #92]	; (7f70 <commit+0x88>)
    7f12:	1ac9      	subs	r1, r1, r3
    7f14:	08c9      	lsrs	r1, r1, #3
    7f16:	0189      	lsls	r1, r1, #6
    7f18:	f041 0101 	orr.w	r1, r1, #1
    7f1c:	f019 fe21 	bl	21b62 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    7f20:	4620      	mov	r0, r4
    7f22:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7f24:	4d13      	ldr	r5, [pc, #76]	; (7f74 <commit+0x8c>)
    7f26:	f3bf 8f5b 	dmb	ish
    7f2a:	682b      	ldr	r3, [r5, #0]
    7f2c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7f30:	079b      	lsls	r3, r3, #30
    7f32:	d401      	bmi.n	7f38 <commit+0x50>
		bt_finalize_init();
    7f34:	f001 feb2 	bl	9c9c <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7f38:	f3bf 8f5b 	dmb	ish
    7f3c:	e855 4f00 	ldrex	r4, [r5]
    7f40:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    7f44:	e845 3200 	strex	r2, r3, [r5]
    7f48:	2a00      	cmp	r2, #0
    7f4a:	d1f7      	bne.n	7f3c <commit+0x54>
    7f4c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    7f50:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    7f54:	d0e4      	beq.n	7f20 <commit+0x38>
		bt_settings_save_id();
    7f56:	f7ff ffaf 	bl	7eb8 <bt_settings_save_id>
	return 0;
    7f5a:	2400      	movs	r4, #0
    7f5c:	e7e0      	b.n	7f20 <commit+0x38>
    7f5e:	bf00      	nop
    7f60:	20000000 	.word	0x20000000
    7f64:	0002b4d1 	.word	0x0002b4d1
    7f68:	000270a8 	.word	0x000270a8
    7f6c:	00026fc8 	.word	0x00026fc8
    7f70:	0002b4e9 	.word	0x0002b4e9
    7f74:	20000094 	.word	0x20000094

00007f78 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    7f78:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    7f7a:	f7fe f993 	bl	62a4 <settings_subsys_init>
	if (err) {
    7f7e:	4604      	mov	r4, r0
    7f80:	b150      	cbz	r0, 7f98 <bt_settings_init+0x20>
    7f82:	4a06      	ldr	r2, [pc, #24]	; (7f9c <bt_settings_init+0x24>)
    7f84:	4b06      	ldr	r3, [pc, #24]	; (7fa0 <bt_settings_init+0x28>)
    7f86:	1ad2      	subs	r2, r2, r3
    7f88:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
    7f8a:	0192      	lsls	r2, r2, #6
    7f8c:	4601      	mov	r1, r0
    7f8e:	f042 0201 	orr.w	r2, r2, #1
    7f92:	4804      	ldr	r0, [pc, #16]	; (7fa4 <bt_settings_init+0x2c>)
    7f94:	f019 fdf2 	bl	21b7c <log_1>
		return err;
	}

	return 0;
}
    7f98:	4620      	mov	r0, r4
    7f9a:	bd10      	pop	{r4, pc}
    7f9c:	000270a8 	.word	0x000270a8
    7fa0:	00026fc8 	.word	0x00026fc8
    7fa4:	0002b50d 	.word	0x0002b50d

00007fa8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    7fa8:	b430      	push	{r4, r5}
    7faa:	4603      	mov	r3, r0
    7fac:	4608      	mov	r0, r1
	switch (src->type) {
    7fae:	781a      	ldrb	r2, [r3, #0]
    7fb0:	2a01      	cmp	r2, #1
    7fb2:	d013      	beq.n	7fdc <uuid_to_uuid128+0x34>
    7fb4:	2a02      	cmp	r2, #2
    7fb6:	d026      	beq.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7fb8:	b972      	cbnz	r2, 7fd8 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    7fba:	4a15      	ldr	r2, [pc, #84]	; (8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>)
    7fbc:	f102 0410 	add.w	r4, r2, #16
    7fc0:	f852 5b04 	ldr.w	r5, [r2], #4
    7fc4:	f841 5b04 	str.w	r5, [r1], #4
    7fc8:	42a2      	cmp	r2, r4
    7fca:	d1f9      	bne.n	7fc0 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    7fcc:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    7fce:	7812      	ldrb	r2, [r2, #0]
    7fd0:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    7fd2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    7fd4:	0a1b      	lsrs	r3, r3, #8
    7fd6:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    7fd8:	bc30      	pop	{r4, r5}
    7fda:	4770      	bx	lr
		*dst = uuid128_base;
    7fdc:	4a0c      	ldr	r2, [pc, #48]	; (8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>)
    7fde:	f102 0410 	add.w	r4, r2, #16
    7fe2:	f852 5b04 	ldr.w	r5, [r2], #4
    7fe6:	f841 5b04 	str.w	r5, [r1], #4
    7fea:	42a2      	cmp	r2, r4
    7fec:	d1f9      	bne.n	7fe2 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    7fee:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    7ff0:	7812      	ldrb	r2, [r2, #0]
    7ff2:	700a      	strb	r2, [r1, #0]
    7ff4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    7ff8:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    7ffa:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    7ffc:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    7ffe:	0a1b      	lsrs	r3, r3, #8
    8000:	7382      	strb	r2, [r0, #14]
    8002:	7403      	strb	r3, [r0, #16]
}
    8004:	e7e8      	b.n	7fd8 <uuid_to_uuid128+0x30>
}
    8006:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    8008:	2211      	movs	r2, #17
    800a:	4619      	mov	r1, r3
    800c:	f01b bdb5 	b.w	23b7a <memcpy>
    8010:	0002b541 	.word	0x0002b541

00008014 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    8014:	b538      	push	{r3, r4, r5, lr}
    8016:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    8018:	4805      	ldr	r0, [pc, #20]	; (8030 <bt_buf_get_rx+0x1c>)
    801a:	f01d fdac 	bl	25b76 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    801e:	4604      	mov	r4, r0
    8020:	b120      	cbz	r0, 802c <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    8022:	2100      	movs	r1, #0
    8024:	3008      	adds	r0, #8
    8026:	f01d fdc5 	bl	25bb4 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    802a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    802c:	4620      	mov	r0, r4
    802e:	bd38      	pop	{r3, r4, r5, pc}
    8030:	2000a0b8 	.word	0x2000a0b8

00008034 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    8034:	b570      	push	{r4, r5, r6, lr}
    8036:	4602      	mov	r2, r0
    8038:	460b      	mov	r3, r1
	__asm__ volatile(
    803a:	f04f 0120 	mov.w	r1, #32
    803e:	f3ef 8511 	mrs	r5, BASEPRI
    8042:	f381 8811 	msr	BASEPRI, r1
    8046:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    804a:	480c      	ldr	r0, [pc, #48]	; (807c <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    804c:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    804e:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    8052:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
    8056:	f385 8811 	msr	BASEPRI, r5
    805a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    805e:	b924      	cbnz	r4, 806a <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    8060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8064:	2001      	movs	r0, #1
    8066:	f7ff bfd5 	b.w	8014 <bt_buf_get_rx>
    806a:	2301      	movs	r3, #1
    806c:	f104 0008 	add.w	r0, r4, #8
    8070:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    8072:	81a1      	strh	r1, [r4, #12]
    8074:	f01d fd9e 	bl	25bb4 <net_buf_simple_reserve>
}
    8078:	4620      	mov	r0, r4
    807a:	bd70      	pop	{r4, r5, r6, pc}
    807c:	20000000 	.word	0x20000000

00008080 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    8080:	b570      	push	{r4, r5, r6, lr}
    8082:	4604      	mov	r4, r0
	switch (evt) {
    8084:	2c0f      	cmp	r4, #15
{
    8086:	460d      	mov	r5, r1
    8088:	4610      	mov	r0, r2
    808a:	4619      	mov	r1, r3
	switch (evt) {
    808c:	d805      	bhi.n	809a <bt_buf_get_evt+0x1a>
    808e:	2c0d      	cmp	r4, #13
    8090:	d912      	bls.n	80b8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    8092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    8096:	f7ff bfcd 	b.w	8034 <bt_buf_get_cmd_complete>
	switch (evt) {
    809a:	2c13      	cmp	r4, #19
    809c:	d10c      	bne.n	80b8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    809e:	480b      	ldr	r0, [pc, #44]	; (80cc <bt_buf_get_evt+0x4c>)
    80a0:	f01d fd69 	bl	25b76 <net_buf_alloc_fixed>
			if (buf) {
    80a4:	4604      	mov	r4, r0
    80a6:	b128      	cbz	r0, 80b4 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    80a8:	2100      	movs	r1, #0
    80aa:	3008      	adds	r0, #8
    80ac:	f01d fd82 	bl	25bb4 <net_buf_simple_reserve>
    80b0:	2301      	movs	r3, #1
    80b2:	7523      	strb	r3, [r4, #20]
}
    80b4:	4620      	mov	r0, r4
    80b6:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    80b8:	4602      	mov	r2, r0
    80ba:	460b      	mov	r3, r1
		if (discardable) {
    80bc:	b10d      	cbz	r5, 80c2 <bt_buf_get_evt+0x42>
    80be:	4804      	ldr	r0, [pc, #16]	; (80d0 <bt_buf_get_evt+0x50>)
    80c0:	e7ee      	b.n	80a0 <bt_buf_get_evt+0x20>
}
    80c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    80c6:	2001      	movs	r0, #1
    80c8:	f7ff bfa4 	b.w	8014 <bt_buf_get_rx>
    80cc:	2000a0e0 	.word	0x2000a0e0
    80d0:	2000a040 	.word	0x2000a040

000080d4 <bt_adv_foreach>:
{
    80d4:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    80d6:	4801      	ldr	r0, [pc, #4]	; (80dc <bt_adv_foreach+0x8>)
    80d8:	4718      	bx	r3
    80da:	bf00      	nop
    80dc:	20000018 	.word	0x20000018

000080e0 <le_dhkey_complete>:
	if (dh_key_cb) {
    80e0:	4905      	ldr	r1, [pc, #20]	; (80f8 <le_dhkey_complete+0x18>)
    80e2:	680b      	ldr	r3, [r1, #0]
    80e4:	b133      	cbz	r3, 80f4 <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    80e6:	6882      	ldr	r2, [r0, #8]
		dh_key_cb = NULL;
    80e8:	2000      	movs	r0, #0
    80ea:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    80ec:	7811      	ldrb	r1, [r2, #0]
    80ee:	b901      	cbnz	r1, 80f2 <le_dhkey_complete+0x12>
    80f0:	1c50      	adds	r0, r2, #1
    80f2:	4718      	bx	r3
}
    80f4:	4770      	bx	lr
    80f6:	bf00      	nop
    80f8:	2000d6dc 	.word	0x2000d6dc

000080fc <ver_str>:
{
    80fc:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    80fe:	4d0b      	ldr	r5, [pc, #44]	; (812c <ver_str+0x30>)
{
    8100:	4606      	mov	r6, r0
	const char * const str[] = {
    8102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    8104:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    8106:	466c      	mov	r4, sp
    8108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    810a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    810c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    810e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    8112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    8116:	2e0b      	cmp	r6, #11
		return str[ver];
    8118:	bf9b      	ittet	ls
    811a:	ab0c      	addls	r3, sp, #48	; 0x30
    811c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    8120:	4803      	ldrhi	r0, [pc, #12]	; (8130 <ver_str+0x34>)
		return str[ver];
    8122:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    8126:	b00c      	add	sp, #48	; 0x30
    8128:	bd70      	pop	{r4, r5, r6, pc}
    812a:	bf00      	nop
    812c:	00027190 	.word	0x00027190
    8130:	0002b644 	.word	0x0002b644

00008134 <le_rpa_invalidate>:
{
    8134:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8136:	4c08      	ldr	r4, [pc, #32]	; (8158 <le_rpa_invalidate+0x24>)
    8138:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    813c:	4620      	mov	r0, r4
    813e:	f01b fecc 	bl	23eda <atomic_and>
    8142:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    8146:	4620      	mov	r0, r4
    8148:	f01b fec7 	bl	23eda <atomic_and>
}
    814c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_adv_foreach(adv_rpa_invalidate, NULL);
    8150:	4802      	ldr	r0, [pc, #8]	; (815c <le_rpa_invalidate+0x28>)
    8152:	2100      	movs	r1, #0
    8154:	f7ff bfbe 	b.w	80d4 <bt_adv_foreach>
    8158:	20000094 	.word	0x20000094
    815c:	00023fc1 	.word	0x00023fc1

00008160 <hci_data_buf_overflow>:
    8160:	4905      	ldr	r1, [pc, #20]	; (8178 <hci_data_buf_overflow+0x18>)
    8162:	4a06      	ldr	r2, [pc, #24]	; (817c <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    8164:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    8166:	4806      	ldr	r0, [pc, #24]	; (8180 <hci_data_buf_overflow+0x20>)
    8168:	1a52      	subs	r2, r2, r1
    816a:	08d2      	lsrs	r2, r2, #3
    816c:	0192      	lsls	r2, r2, #6
    816e:	7819      	ldrb	r1, [r3, #0]
    8170:	f042 0202 	orr.w	r2, r2, #2
    8174:	f019 bd02 	b.w	21b7c <log_1>
    8178:	00026fc8 	.word	0x00026fc8
    817c:	00027080 	.word	0x00027080
    8180:	0002b64c 	.word	0x0002b64c

00008184 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    8184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    8186:	4f0a      	ldr	r7, [pc, #40]	; (81b0 <id_find+0x2c>)
{
    8188:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    818a:	2500      	movs	r5, #0
    818c:	79fb      	ldrb	r3, [r7, #7]
    818e:	b2ec      	uxtb	r4, r5
    8190:	42a3      	cmp	r3, r4
    8192:	d802      	bhi.n	819a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    8194:	f06f 0401 	mvn.w	r4, #1
    8198:	e008      	b.n	81ac <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    819a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    819e:	4439      	add	r1, r7
    81a0:	4630      	mov	r0, r6
    81a2:	f01b feaf 	bl	23f04 <bt_addr_le_cmp>
    81a6:	3501      	adds	r5, #1
    81a8:	2800      	cmp	r0, #0
    81aa:	d1ef      	bne.n	818c <id_find+0x8>
}
    81ac:	4620      	mov	r0, r4
    81ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    81b0:	20000000 	.word	0x20000000

000081b4 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    81b4:	6843      	ldr	r3, [r0, #4]
{
    81b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    81b8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    81ba:	0558      	lsls	r0, r3, #21
    81bc:	d502      	bpl.n	81c4 <valid_adv_param+0x10>
		return false;
    81be:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    81c0:	b003      	add	sp, #12
    81c2:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    81c4:	6922      	ldr	r2, [r4, #16]
    81c6:	b12a      	cbz	r2, 81d4 <valid_adv_param+0x20>
    81c8:	07d9      	lsls	r1, r3, #31
    81ca:	d5f8      	bpl.n	81be <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
    81cc:	f003 0324 	and.w	r3, r3, #36	; 0x24
    81d0:	2b24      	cmp	r3, #36	; 0x24
    81d2:	d0f4      	beq.n	81be <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    81d4:	4d1a      	ldr	r5, [pc, #104]	; (8240 <valid_adv_param+0x8c>)
    81d6:	7820      	ldrb	r0, [r4, #0]
    81d8:	79eb      	ldrb	r3, [r5, #7]
    81da:	4283      	cmp	r3, r0
    81dc:	d9ef      	bls.n	81be <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    81de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    81e2:	2300      	movs	r3, #0
    81e4:	4669      	mov	r1, sp
    81e6:	4428      	add	r0, r5
    81e8:	9300      	str	r3, [sp, #0]
    81ea:	f8cd 3003 	str.w	r3, [sp, #3]
    81ee:	f01b fe89 	bl	23f04 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    81f2:	2800      	cmp	r0, #0
    81f4:	d0e3      	beq.n	81be <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    81f6:	6860      	ldr	r0, [r4, #4]
    81f8:	07c2      	lsls	r2, r0, #31
    81fa:	d406      	bmi.n	820a <valid_adv_param+0x56>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    81fc:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    8200:	2b08      	cmp	r3, #8
    8202:	d802      	bhi.n	820a <valid_adv_param+0x56>
    8204:	68a3      	ldr	r3, [r4, #8]
    8206:	2b9f      	cmp	r3, #159	; 0x9f
    8208:	d9d9      	bls.n	81be <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    820a:	f010 0f30 	tst.w	r0, #48	; 0x30
    820e:	d002      	beq.n	8216 <valid_adv_param+0x62>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    8210:	6923      	ldr	r3, [r4, #16]
    8212:	2b00      	cmp	r3, #0
    8214:	d0d3      	beq.n	81be <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    8216:	06c3      	lsls	r3, r0, #27
    8218:	d401      	bmi.n	821e <valid_adv_param+0x6a>
    821a:	6923      	ldr	r3, [r4, #16]
    821c:	b943      	cbnz	r3, 8230 <valid_adv_param+0x7c>
		if (param->interval_min > param->interval_max ||
    821e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    8222:	429a      	cmp	r2, r3
    8224:	d8cb      	bhi.n	81be <valid_adv_param+0xa>
    8226:	2a1f      	cmp	r2, #31
    8228:	d9c9      	bls.n	81be <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    822a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    822e:	d8c6      	bhi.n	81be <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    8230:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    8234:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    8238:	bf18      	it	ne
    823a:	2001      	movne	r0, #1
    823c:	e7c0      	b.n	81c0 <valid_adv_param+0xc>
    823e:	bf00      	nop
    8240:	20000000 	.word	0x20000000

00008244 <le_pkey_complete>:
{
    8244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    8246:	6885      	ldr	r5, [r0, #8]
    8248:	480f      	ldr	r0, [pc, #60]	; (8288 <le_pkey_complete+0x44>)
    824a:	f06f 0110 	mvn.w	r1, #16
    824e:	f01b fe44 	bl	23eda <atomic_and>
	if (!evt->status) {
    8252:	782b      	ldrb	r3, [r5, #0]
    8254:	b943      	cbnz	r3, 8268 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    8256:	1c69      	adds	r1, r5, #1
    8258:	480c      	ldr	r0, [pc, #48]	; (828c <le_pkey_complete+0x48>)
    825a:	2240      	movs	r2, #64	; 0x40
    825c:	f01b fc8d 	bl	23b7a <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8260:	4809      	ldr	r0, [pc, #36]	; (8288 <le_pkey_complete+0x44>)
    8262:	2108      	movs	r1, #8
    8264:	f01b fe57 	bl	23f16 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8268:	4e09      	ldr	r6, [pc, #36]	; (8290 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    826a:	4f08      	ldr	r7, [pc, #32]	; (828c <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    826c:	6834      	ldr	r4, [r6, #0]
    826e:	b90c      	cbnz	r4, 8274 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    8270:	6034      	str	r4, [r6, #0]
}
    8272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    8274:	782a      	ldrb	r2, [r5, #0]
    8276:	6823      	ldr	r3, [r4, #0]
    8278:	2a00      	cmp	r2, #0
    827a:	bf0c      	ite	eq
    827c:	4638      	moveq	r0, r7
    827e:	2000      	movne	r0, #0
    8280:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8282:	6864      	ldr	r4, [r4, #4]
    8284:	e7f3      	b.n	826e <le_pkey_complete+0x2a>
    8286:	bf00      	nop
    8288:	20000094 	.word	0x20000094
    828c:	2000f250 	.word	0x2000f250
    8290:	2000d6e0 	.word	0x2000d6e0

00008294 <unpair>:
{
    8294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8298:	4606      	mov	r6, r0
    829a:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
    829c:	f002 fee6 	bl	b06c <bt_conn_lookup_addr_le>
	if (conn) {
    82a0:	4604      	mov	r4, r0
    82a2:	b9b0      	cbnz	r0, 82d2 <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
    82a4:	4639      	mov	r1, r7
    82a6:	4630      	mov	r0, r6
    82a8:	f007 fc80 	bl	fbac <bt_keys_find_addr>
		if (keys) {
    82ac:	4605      	mov	r5, r0
    82ae:	b110      	cbz	r0, 82b6 <unpair+0x22>
			bt_keys_clear(keys);
    82b0:	4628      	mov	r0, r5
    82b2:	f007 fc8b 	bl	fbcc <bt_keys_clear>
	bt_gatt_clear(id, addr);
    82b6:	4639      	mov	r1, r7
    82b8:	4630      	mov	r0, r6
    82ba:	f005 fcb9 	bl	dc30 <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
    82be:	4b10      	ldr	r3, [pc, #64]	; (8300 <unpair+0x6c>)
    82c0:	681b      	ldr	r3, [r3, #0]
    82c2:	b1db      	cbz	r3, 82fc <unpair+0x68>
    82c4:	6a1b      	ldr	r3, [r3, #32]
    82c6:	b1cb      	cbz	r3, 82fc <unpair+0x68>
		bt_auth->bond_deleted(id, addr);
    82c8:	4639      	mov	r1, r7
    82ca:	4630      	mov	r0, r6
}
    82cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
    82d0:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
    82d2:	7883      	ldrb	r3, [r0, #2]
    82d4:	2b01      	cmp	r3, #1
    82d6:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
    82da:	bf04      	itt	eq
    82dc:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
    82e0:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    82e4:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
    82e8:	bf18      	it	ne
    82ea:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    82ec:	f01c f8b8 	bl	24460 <bt_conn_disconnect>
		bt_conn_unref(conn);
    82f0:	4620      	mov	r0, r4
    82f2:	f01c f87a 	bl	243ea <bt_conn_unref>
		if (!keys) {
    82f6:	2d00      	cmp	r5, #0
    82f8:	d1da      	bne.n	82b0 <unpair+0x1c>
    82fa:	e7d3      	b.n	82a4 <unpair+0x10>
}
    82fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8300:	2000d6e8 	.word	0x2000d6e8

00008304 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8304:	6883      	ldr	r3, [r0, #8]
{
    8306:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8308:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    830a:	4620      	mov	r0, r4
    830c:	f002 fdba 	bl	ae84 <bt_conn_lookup_handle>
	if (!conn) {
    8310:	b960      	cbnz	r0, 832c <le_data_len_change+0x28>
    8312:	4a08      	ldr	r2, [pc, #32]	; (8334 <le_data_len_change+0x30>)
    8314:	4b08      	ldr	r3, [pc, #32]	; (8338 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8316:	4809      	ldr	r0, [pc, #36]	; (833c <le_data_len_change+0x38>)
    8318:	1ad2      	subs	r2, r2, r3
    831a:	08d2      	lsrs	r2, r2, #3
    831c:	0192      	lsls	r2, r2, #6
    831e:	4621      	mov	r1, r4
    8320:	f042 0201 	orr.w	r2, r2, #1
}
    8324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8328:	f019 bc28 	b.w	21b7c <log_1>
}
    832c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    8330:	f01c b85b 	b.w	243ea <bt_conn_unref>
    8334:	00027080 	.word	0x00027080
    8338:	00026fc8 	.word	0x00026fc8
    833c:	0002b674 	.word	0x0002b674

00008340 <hci_disconn_complete_prio>:
{
    8340:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8342:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    8344:	781a      	ldrb	r2, [r3, #0]
    8346:	b9da      	cbnz	r2, 8380 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8348:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    834c:	4628      	mov	r0, r5
    834e:	f002 fd99 	bl	ae84 <bt_conn_lookup_handle>
	if (!conn) {
    8352:	4604      	mov	r4, r0
    8354:	b960      	cbnz	r0, 8370 <hci_disconn_complete_prio+0x30>
    8356:	4b0b      	ldr	r3, [pc, #44]	; (8384 <hci_disconn_complete_prio+0x44>)
    8358:	4a0b      	ldr	r2, [pc, #44]	; (8388 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    835a:	480c      	ldr	r0, [pc, #48]	; (838c <hci_disconn_complete_prio+0x4c>)
    835c:	1ad2      	subs	r2, r2, r3
    835e:	08d2      	lsrs	r2, r2, #3
    8360:	0192      	lsls	r2, r2, #6
    8362:	4629      	mov	r1, r5
    8364:	f042 0201 	orr.w	r2, r2, #1
}
    8368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    836c:	f019 bc06 	b.w	21b7c <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    8370:	2101      	movs	r1, #1
    8372:	f002 fd8f 	bl	ae94 <bt_conn_set_state>
	bt_conn_unref(conn);
    8376:	4620      	mov	r0, r4
}
    8378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    837c:	f01c b835 	b.w	243ea <bt_conn_unref>
}
    8380:	bd38      	pop	{r3, r4, r5, pc}
    8382:	bf00      	nop
    8384:	00026fc8 	.word	0x00026fc8
    8388:	00027080 	.word	0x00027080
    838c:	0002b698 	.word	0x0002b698

00008390 <hci_disconn_complete>:
{
    8390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8392:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8394:	7835      	ldrb	r5, [r6, #0]
    8396:	b9f5      	cbnz	r5, 83d6 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8398:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    839c:	4638      	mov	r0, r7
    839e:	f002 fd71 	bl	ae84 <bt_conn_lookup_handle>
	if (!conn) {
    83a2:	4604      	mov	r4, r0
    83a4:	b960      	cbnz	r0, 83c0 <hci_disconn_complete+0x30>
    83a6:	4b0c      	ldr	r3, [pc, #48]	; (83d8 <hci_disconn_complete+0x48>)
    83a8:	4a0c      	ldr	r2, [pc, #48]	; (83dc <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    83aa:	480d      	ldr	r0, [pc, #52]	; (83e0 <hci_disconn_complete+0x50>)
    83ac:	1ad2      	subs	r2, r2, r3
    83ae:	08d2      	lsrs	r2, r2, #3
    83b0:	0192      	lsls	r2, r2, #6
    83b2:	4639      	mov	r1, r7
    83b4:	f042 0201 	orr.w	r2, r2, #1
}
    83b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    83bc:	f019 bbde 	b.w	21b7c <log_1>
	conn->err = evt->reason;
    83c0:	78f3      	ldrb	r3, [r6, #3]
    83c2:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    83c4:	4629      	mov	r1, r5
    83c6:	f002 fd65 	bl	ae94 <bt_conn_set_state>
	conn->handle = 0U;
    83ca:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    83cc:	4620      	mov	r0, r4
}
    83ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    83d2:	f01c b80a 	b.w	243ea <bt_conn_unref>
}
    83d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83d8:	00026fc8 	.word	0x00026fc8
    83dc:	00027080 	.word	0x00027080
    83e0:	0002b698 	.word	0x0002b698

000083e4 <hci_hardware_error>:
{
    83e4:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    83e6:	2101      	movs	r1, #1
    83e8:	3008      	adds	r0, #8
    83ea:	f01d fc41 	bl	25c70 <net_buf_simple_pull_mem>
    83ee:	4b06      	ldr	r3, [pc, #24]	; (8408 <hci_hardware_error+0x24>)
    83f0:	4a06      	ldr	r2, [pc, #24]	; (840c <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    83f2:	7801      	ldrb	r1, [r0, #0]
    83f4:	4806      	ldr	r0, [pc, #24]	; (8410 <hci_hardware_error+0x2c>)
    83f6:	1ad2      	subs	r2, r2, r3
    83f8:	08d2      	lsrs	r2, r2, #3
    83fa:	0192      	lsls	r2, r2, #6
}
    83fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    8400:	f042 0201 	orr.w	r2, r2, #1
    8404:	f019 bbba 	b.w	21b7c <log_1>
    8408:	00026fc8 	.word	0x00026fc8
    840c:	00027080 	.word	0x00027080
    8410:	0002b6be 	.word	0x0002b6be

00008414 <hci_vendor_event>:
{
    8414:	b510      	push	{r4, lr}
    8416:	4a0a      	ldr	r2, [pc, #40]	; (8440 <hci_vendor_event+0x2c>)
    8418:	4c0a      	ldr	r4, [pc, #40]	; (8444 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    841a:	8981      	ldrh	r1, [r0, #12]
    841c:	6880      	ldr	r0, [r0, #8]
    841e:	1aa4      	subs	r4, r4, r2
    8420:	f7ff fa4a 	bl	78b8 <bt_hex_real>
    8424:	f7fc fcd6 	bl	4dd4 <log_strdup>
    8428:	08e4      	lsrs	r4, r4, #3
    842a:	01a4      	lsls	r4, r4, #6
    842c:	f044 0402 	orr.w	r4, r4, #2
    8430:	4601      	mov	r1, r0
    8432:	4622      	mov	r2, r4
    8434:	4804      	ldr	r0, [pc, #16]	; (8448 <hci_vendor_event+0x34>)
}
    8436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    843a:	f019 bb9f 	b.w	21b7c <log_1>
    843e:	bf00      	nop
    8440:	00026fc8 	.word	0x00026fc8
    8444:	00027080 	.word	0x00027080
    8448:	0002b6e0 	.word	0x0002b6e0

0000844c <le_conn_update_complete>:
{
    844c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    844e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8450:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8454:	4630      	mov	r0, r6
    8456:	f002 fd15 	bl	ae84 <bt_conn_lookup_handle>
	if (!conn) {
    845a:	4604      	mov	r4, r0
    845c:	b968      	cbnz	r0, 847a <le_conn_update_complete+0x2e>
    845e:	4b25      	ldr	r3, [pc, #148]	; (84f4 <le_conn_update_complete+0xa8>)
    8460:	4a25      	ldr	r2, [pc, #148]	; (84f8 <le_conn_update_complete+0xac>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8462:	4826      	ldr	r0, [pc, #152]	; (84fc <le_conn_update_complete+0xb0>)
    8464:	1ad2      	subs	r2, r2, r3
    8466:	08d2      	lsrs	r2, r2, #3
    8468:	0192      	lsls	r2, r2, #6
    846a:	f042 0201 	orr.w	r2, r2, #1
    846e:	4631      	mov	r1, r6
}
    8470:	b002      	add	sp, #8
    8472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8476:	f019 bb81 	b.w	21b7c <log_1>
	if (!evt->status) {
    847a:	782b      	ldrb	r3, [r5, #0]
    847c:	b9cb      	cbnz	r3, 84b2 <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    847e:	792a      	ldrb	r2, [r5, #4]
    8480:	78eb      	ldrb	r3, [r5, #3]
    8482:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8486:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    848a:	79aa      	ldrb	r2, [r5, #6]
    848c:	796b      	ldrb	r3, [r5, #5]
    848e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8492:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8496:	79eb      	ldrb	r3, [r5, #7]
    8498:	7a2a      	ldrb	r2, [r5, #8]
    849a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    849e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    84a2:	f002 fae1 	bl	aa68 <notify_le_param_updated>
	bt_conn_unref(conn);
    84a6:	4620      	mov	r0, r4
}
    84a8:	b002      	add	sp, #8
    84aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    84ae:	f01b bf9c 	b.w	243ea <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    84b2:	2b1a      	cmp	r3, #26
    84b4:	d1f7      	bne.n	84a6 <le_conn_update_complete+0x5a>
    84b6:	78c3      	ldrb	r3, [r0, #3]
    84b8:	2b01      	cmp	r3, #1
    84ba:	d1f4      	bne.n	84a6 <le_conn_update_complete+0x5a>
		   !atomic_test_and_set_bit(conn->flags,
    84bc:	210a      	movs	r1, #10
    84be:	3004      	adds	r0, #4
    84c0:	f01b fd38 	bl	23f34 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    84c4:	2800      	cmp	r0, #0
    84c6:	d1ee      	bne.n	84a6 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    84c8:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    84cc:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    84d0:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    84d4:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    84d8:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    84dc:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    84e0:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
    84e2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    84e6:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    84ea:	4620      	mov	r0, r4
    84ec:	f003 f922 	bl	b734 <bt_l2cap_update_conn_param>
    84f0:	e7d9      	b.n	84a6 <le_conn_update_complete+0x5a>
    84f2:	bf00      	nop
    84f4:	00026fc8 	.word	0x00026fc8
    84f8:	00027080 	.word	0x00027080
    84fc:	0002b674 	.word	0x0002b674

00008500 <id_create>:
{
    8500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8504:	4f28      	ldr	r7, [pc, #160]	; (85a8 <id_create+0xa8>)
    8506:	ebc0 08c0 	rsb	r8, r0, r0, lsl #3
{
    850a:	b086      	sub	sp, #24
    850c:	4605      	mov	r5, r0
    850e:	4614      	mov	r4, r2
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8510:	44b8      	add	r8, r7
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8512:	460e      	mov	r6, r1
    8514:	b351      	cbz	r1, 856c <id_create+0x6c>
    8516:	2300      	movs	r3, #0
    8518:	4669      	mov	r1, sp
    851a:	4630      	mov	r0, r6
    851c:	9300      	str	r3, [sp, #0]
    851e:	f8cd 3003 	str.w	r3, [sp, #3]
    8522:	f01b fcef 	bl	23f04 <bt_addr_le_cmp>
    8526:	b308      	cbz	r0, 856c <id_create+0x6c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    8528:	4631      	mov	r1, r6
    852a:	4640      	mov	r0, r8
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    852c:	f01b fcf0 	bl	23f10 <bt_addr_le_copy>
		uint8_t zero_irk[16] = { 0 };
    8530:	2300      	movs	r3, #0
			memcpy(&bt_dev.irk[id], irk, 16);
    8532:	3512      	adds	r5, #18
		uint8_t zero_irk[16] = { 0 };
    8534:	e9cd 3302 	strd	r3, r3, [sp, #8]
    8538:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
    853c:	eb07 1505 	add.w	r5, r7, r5, lsl #4
		if (irk && memcmp(irk, zero_irk, 16)) {
    8540:	b32c      	cbz	r4, 858e <id_create+0x8e>
    8542:	2210      	movs	r2, #16
    8544:	a902      	add	r1, sp, #8
    8546:	4620      	mov	r0, r4
    8548:	f01b fb06 	bl	23b58 <memcmp>
    854c:	b1f8      	cbz	r0, 858e <id_create+0x8e>
			memcpy(&bt_dev.irk[id], irk, 16);
    854e:	2210      	movs	r2, #16
    8550:	4621      	mov	r1, r4
    8552:	4628      	mov	r0, r5
				memcpy(irk, &bt_dev.irk[id], 16);
    8554:	f01b fb11 	bl	23b7a <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8558:	4814      	ldr	r0, [pc, #80]	; (85ac <id_create+0xac>)
    855a:	f01b fccd 	bl	23ef8 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    855e:	0783      	lsls	r3, r0, #30
    8560:	d51f      	bpl.n	85a2 <id_create+0xa2>
}
    8562:	b006      	add	sp, #24
    8564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_settings_save_id();
    8568:	f7ff bca6 	b.w	7eb8 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    856c:	a802      	add	r0, sp, #8
    856e:	f01b fc6d 	bl	23e4c <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    8572:	a802      	add	r0, sp, #8
    8574:	f7ff fe06 	bl	8184 <id_find>
    8578:	2800      	cmp	r0, #0
    857a:	daf7      	bge.n	856c <id_create+0x6c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    857c:	a902      	add	r1, sp, #8
    857e:	4640      	mov	r0, r8
    8580:	f01b fcc6 	bl	23f10 <bt_addr_le_copy>
		if (addr) {
    8584:	2e00      	cmp	r6, #0
    8586:	d0d3      	beq.n	8530 <id_create+0x30>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8588:	4641      	mov	r1, r8
    858a:	4630      	mov	r0, r6
    858c:	e7ce      	b.n	852c <id_create+0x2c>
			bt_rand(&bt_dev.irk[id], 16);
    858e:	2110      	movs	r1, #16
    8590:	4628      	mov	r0, r5
    8592:	f00a fb77 	bl	12c84 <bt_rand>
			if (irk) {
    8596:	2c00      	cmp	r4, #0
    8598:	d0de      	beq.n	8558 <id_create+0x58>
				memcpy(irk, &bt_dev.irk[id], 16);
    859a:	2210      	movs	r2, #16
    859c:	4629      	mov	r1, r5
    859e:	4620      	mov	r0, r4
    85a0:	e7d8      	b.n	8554 <id_create+0x54>
}
    85a2:	b006      	add	sp, #24
    85a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    85a8:	20000000 	.word	0x20000000
    85ac:	20000094 	.word	0x20000094

000085b0 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    85b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    85b2:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    85b4:	7803      	ldrb	r3, [r0, #0]
    85b6:	f88d 3004 	strb.w	r3, [sp, #4]
{
    85ba:	4605      	mov	r5, r0
	struct adv_id_check_data check_data = {
    85bc:	2300      	movs	r3, #0
		.id = adv->id,
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    85be:	4824      	ldr	r0, [pc, #144]	; (8650 <le_adv_start_add_conn+0xa0>)
	struct adv_id_check_data check_data = {
    85c0:	f88d 3005 	strb.w	r3, [sp, #5]
{
    85c4:	460f      	mov	r7, r1
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    85c6:	a901      	add	r1, sp, #4
    85c8:	f7ff fd84 	bl	80d4 <bt_adv_foreach>
	if (check_data.adv_enabled) {
    85cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    85d0:	bba3      	cbnz	r3, 863c <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    85d2:	462e      	mov	r6, r5
    85d4:	4a1f      	ldr	r2, [pc, #124]	; (8654 <le_adv_start_add_conn+0xa4>)
    85d6:	f816 1b09 	ldrb.w	r1, [r6], #9
    85da:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    85de:	4630      	mov	r0, r6
    85e0:	a902      	add	r1, sp, #8
    85e2:	9302      	str	r3, [sp, #8]
    85e4:	f8cd 300b 	str.w	r3, [sp, #11]
    85e8:	f01b fc8c 	bl	23f04 <bt_addr_le_cmp>
    85ec:	782a      	ldrb	r2, [r5, #0]
    85ee:	4604      	mov	r4, r0
    85f0:	b9b0      	cbnz	r0, 8620 <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    85f2:	4b19      	ldr	r3, [pc, #100]	; (8658 <le_adv_start_add_conn+0xa8>)
    85f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
    85f6:	8e99      	ldrh	r1, [r3, #52]	; 0x34
    85f8:	9004      	str	r0, [sp, #16]
    85fa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    85fe:	f8ad 1014 	strh.w	r1, [sp, #20]
    8602:	4610      	mov	r0, r2
    8604:	a904      	add	r1, sp, #16
    8606:	f88d 3016 	strb.w	r3, [sp, #22]
    860a:	f002 fc0d 	bl	ae28 <bt_conn_add_le>
		if (!conn) {
    860e:	4605      	mov	r5, r0
    8610:	b1d0      	cbz	r0, 8648 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    8612:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8614:	f002 fc3e 	bl	ae94 <bt_conn_set_state>
	*out_conn = conn;
    8618:	603d      	str	r5, [r7, #0]
	return 0;
}
    861a:	4620      	mov	r0, r4
    861c:	b007      	add	sp, #28
    861e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    8620:	4631      	mov	r1, r6
    8622:	4610      	mov	r0, r2
    8624:	f002 fd40 	bl	b0a8 <bt_conn_exists_le>
    8628:	4604      	mov	r4, r0
    862a:	b950      	cbnz	r0, 8642 <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    862c:	7828      	ldrb	r0, [r5, #0]
    862e:	4631      	mov	r1, r6
    8630:	f002 fbfa 	bl	ae28 <bt_conn_add_le>
	if (!conn) {
    8634:	4605      	mov	r5, r0
    8636:	b138      	cbz	r0, 8648 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8638:	2105      	movs	r1, #5
    863a:	e7eb      	b.n	8614 <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    863c:	f06f 0422 	mvn.w	r4, #34	; 0x22
    8640:	e7eb      	b.n	861a <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    8642:	f06f 0415 	mvn.w	r4, #21
    8646:	e7e8      	b.n	861a <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    8648:	f06f 040b 	mvn.w	r4, #11
    864c:	e7e5      	b.n	861a <le_adv_start_add_conn+0x6a>
    864e:	bf00      	nop
    8650:	00023f97 	.word	0x00023f97
    8654:	20000000 	.word	0x20000000
    8658:	00027190 	.word	0x00027190

0000865c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    865c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    865e:	4c0d      	ldr	r4, [pc, #52]	; (8694 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    8660:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    8662:	2205      	movs	r2, #5
    8664:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    8668:	f002 fd44 	bl	b0f4 <bt_conn_lookup_state_le>
		if (!conn) {
    866c:	b978      	cbnz	r0, 868e <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
    866e:	4b0a      	ldr	r3, [pc, #40]	; (8698 <find_pending_connect.part.0+0x3c>)
    8670:	6b18      	ldr	r0, [r3, #48]	; 0x30
    8672:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    8674:	9000      	str	r0, [sp, #0]
    8676:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    867a:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    867e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    8682:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    8686:	2204      	movs	r2, #4
    8688:	4669      	mov	r1, sp
    868a:	f002 fd33 	bl	b0f4 <bt_conn_lookup_state_le>
}
    868e:	b002      	add	sp, #8
    8690:	bd10      	pop	{r4, pc}
    8692:	bf00      	nop
    8694:	20000000 	.word	0x20000000
    8698:	00027190 	.word	0x00027190

0000869c <handle_event>:
{
    869c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    869e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    86a2:	4605      	mov	r5, r0
    86a4:	4608      	mov	r0, r1
		if (handler->event != event) {
    86a6:	7811      	ldrb	r1, [r2, #0]
    86a8:	42a9      	cmp	r1, r5
    86aa:	d01a      	beq.n	86e2 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    86ac:	3208      	adds	r2, #8
    86ae:	4293      	cmp	r3, r2
    86b0:	d1f9      	bne.n	86a6 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    86b2:	8986      	ldrh	r6, [r0, #12]
    86b4:	4b16      	ldr	r3, [pc, #88]	; (8710 <handle_event+0x74>)
    86b6:	4c17      	ldr	r4, [pc, #92]	; (8714 <handle_event+0x78>)
    86b8:	6880      	ldr	r0, [r0, #8]
    86ba:	4631      	mov	r1, r6
    86bc:	1ae4      	subs	r4, r4, r3
    86be:	f7ff f8fb 	bl	78b8 <bt_hex_real>
    86c2:	f7fc fb87 	bl	4dd4 <log_strdup>
    86c6:	08e4      	lsrs	r4, r4, #3
    86c8:	01a4      	lsls	r4, r4, #6
    86ca:	f044 0402 	orr.w	r4, r4, #2
    86ce:	4603      	mov	r3, r0
    86d0:	f8ad 4000 	strh.w	r4, [sp]
    86d4:	4810      	ldr	r0, [pc, #64]	; (8718 <handle_event+0x7c>)
    86d6:	4632      	mov	r2, r6
    86d8:	4629      	mov	r1, r5
    86da:	f019 fa7c 	bl	21bd6 <log_3>
}
    86de:	b002      	add	sp, #8
    86e0:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    86e2:	8981      	ldrh	r1, [r0, #12]
    86e4:	7853      	ldrb	r3, [r2, #1]
    86e6:	428b      	cmp	r3, r1
    86e8:	d90d      	bls.n	8706 <handle_event+0x6a>
    86ea:	4a09      	ldr	r2, [pc, #36]	; (8710 <handle_event+0x74>)
    86ec:	4b09      	ldr	r3, [pc, #36]	; (8714 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    86ee:	480b      	ldr	r0, [pc, #44]	; (871c <handle_event+0x80>)
    86f0:	1a9b      	subs	r3, r3, r2
    86f2:	08db      	lsrs	r3, r3, #3
    86f4:	019b      	lsls	r3, r3, #6
    86f6:	f043 0301 	orr.w	r3, r3, #1
    86fa:	462a      	mov	r2, r5
}
    86fc:	b002      	add	sp, #8
    86fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    8702:	f019 ba4f 	b.w	21ba4 <log_2>
		handler->handler(buf);
    8706:	6853      	ldr	r3, [r2, #4]
}
    8708:	b002      	add	sp, #8
    870a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    870e:	4718      	bx	r3
    8710:	00026fc8 	.word	0x00026fc8
    8714:	00027080 	.word	0x00027080
    8718:	0002b726 	.word	0x0002b726
    871c:	0002b704 	.word	0x0002b704

00008720 <hci_le_meta_event>:
{
    8720:	b510      	push	{r4, lr}
    8722:	2101      	movs	r1, #1
    8724:	4604      	mov	r4, r0
    8726:	3008      	adds	r0, #8
    8728:	f01d faa2 	bl	25c70 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    872c:	4621      	mov	r1, r4
    872e:	4a03      	ldr	r2, [pc, #12]	; (873c <hci_le_meta_event+0x1c>)
    8730:	7800      	ldrb	r0, [r0, #0]
}
    8732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8736:	230a      	movs	r3, #10
    8738:	f7ff bfb0 	b.w	869c <handle_event>
    873c:	000276d0 	.word	0x000276d0

00008740 <hci_cmd_done>:
{
    8740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8744:	4607      	mov	r7, r0
    8746:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8748:	7990      	ldrb	r0, [r2, #6]
    874a:	4e35      	ldr	r6, [pc, #212]	; (8820 <hci_cmd_done+0xe0>)
{
    874c:	4688      	mov	r8, r1
    874e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8750:	f014 faa6 	bl	1cca0 <net_buf_pool_get>
    8754:	4286      	cmp	r6, r0
    8756:	d016      	beq.n	8786 <hci_cmd_done+0x46>
    8758:	4b32      	ldr	r3, [pc, #200]	; (8824 <hci_cmd_done+0xe4>)
    875a:	4d33      	ldr	r5, [pc, #204]	; (8828 <hci_cmd_done+0xe8>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    875c:	79a0      	ldrb	r0, [r4, #6]
    875e:	9700      	str	r7, [sp, #0]
    8760:	1aed      	subs	r5, r5, r3
    8762:	08ed      	lsrs	r5, r5, #3
    8764:	9001      	str	r0, [sp, #4]
    8766:	f014 fa9b 	bl	1cca0 <net_buf_pool_get>
    876a:	01ad      	lsls	r5, r5, #6
    876c:	f045 0502 	orr.w	r5, r5, #2
    8770:	e9cd 0602 	strd	r0, r6, [sp, #8]
    8774:	462b      	mov	r3, r5
    8776:	482d      	ldr	r0, [pc, #180]	; (882c <hci_cmd_done+0xec>)
    8778:	2204      	movs	r2, #4
    877a:	4669      	mov	r1, sp
    877c:	f019 fa47 	bl	21c0e <log_n>
}
    8780:	b005      	add	sp, #20
    8782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    8786:	4620      	mov	r0, r4
    8788:	f014 fa92 	bl	1ccb0 <net_buf_id>
    878c:	4d28      	ldr	r5, [pc, #160]	; (8830 <hci_cmd_done+0xf0>)
    878e:	f04f 090c 	mov.w	r9, #12
    8792:	fb09 5000 	mla	r0, r9, r0, r5
    8796:	8843      	ldrh	r3, [r0, #2]
    8798:	42bb      	cmp	r3, r7
    879a:	d011      	beq.n	87c0 <hci_cmd_done+0x80>
    879c:	4b21      	ldr	r3, [pc, #132]	; (8824 <hci_cmd_done+0xe4>)
    879e:	4e22      	ldr	r6, [pc, #136]	; (8828 <hci_cmd_done+0xe8>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    87a0:	4620      	mov	r0, r4
    87a2:	1af6      	subs	r6, r6, r3
    87a4:	f014 fa84 	bl	1ccb0 <net_buf_id>
    87a8:	08f6      	lsrs	r6, r6, #3
    87aa:	fb09 5000 	mla	r0, r9, r0, r5
    87ae:	01b6      	lsls	r6, r6, #6
    87b0:	f046 0602 	orr.w	r6, r6, #2
    87b4:	8842      	ldrh	r2, [r0, #2]
    87b6:	481f      	ldr	r0, [pc, #124]	; (8834 <hci_cmd_done+0xf4>)
    87b8:	4633      	mov	r3, r6
    87ba:	4639      	mov	r1, r7
    87bc:	f019 f9f2 	bl	21ba4 <log_2>
	if (cmd(buf)->state && !status) {
    87c0:	4620      	mov	r0, r4
    87c2:	f014 fa75 	bl	1ccb0 <net_buf_id>
    87c6:	260c      	movs	r6, #12
    87c8:	fb06 5000 	mla	r0, r6, r0, r5
    87cc:	6843      	ldr	r3, [r0, #4]
    87ce:	b16b      	cbz	r3, 87ec <hci_cmd_done+0xac>
    87d0:	f1b8 0f00 	cmp.w	r8, #0
    87d4:	d10a      	bne.n	87ec <hci_cmd_done+0xac>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    87d6:	4620      	mov	r0, r4
    87d8:	f014 fa6a 	bl	1ccb0 <net_buf_id>
    87dc:	fb06 5000 	mla	r0, r6, r0, r5
    87e0:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    87e2:	e9d3 0100 	ldrd	r0, r1, [r3]
    87e6:	7a1a      	ldrb	r2, [r3, #8]
    87e8:	f01b fbaf 	bl	23f4a <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    87ec:	4620      	mov	r0, r4
    87ee:	f014 fa5f 	bl	1ccb0 <net_buf_id>
    87f2:	260c      	movs	r6, #12
    87f4:	fb06 5000 	mla	r0, r6, r0, r5
    87f8:	6883      	ldr	r3, [r0, #8]
    87fa:	2b00      	cmp	r3, #0
    87fc:	d0c0      	beq.n	8780 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    87fe:	4620      	mov	r0, r4
    8800:	f014 fa56 	bl	1ccb0 <net_buf_id>
    8804:	4370      	muls	r0, r6
    8806:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    880a:	4620      	mov	r0, r4
    880c:	f014 fa50 	bl	1ccb0 <net_buf_id>
    8810:	fb06 5500 	mla	r5, r6, r0, r5
    8814:	68a8      	ldr	r0, [r5, #8]
}
    8816:	b005      	add	sp, #20
    8818:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
    881c:	f017 b9da 	b.w	1fbd4 <z_impl_k_sem_give>
    8820:	2000a090 	.word	0x2000a090
    8824:	00026fc8 	.word	0x00026fc8
    8828:	00027080 	.word	0x00027080
    882c:	0002b748 	.word	0x0002b748
    8830:	2000d6c4 	.word	0x2000d6c4
    8834:	0002b77d 	.word	0x0002b77d

00008838 <hci_cmd_status>:
{
    8838:	b538      	push	{r3, r4, r5, lr}
    883a:	2104      	movs	r1, #4
    883c:	4604      	mov	r4, r0
    883e:	3008      	adds	r0, #8
    8840:	f01d fa16 	bl	25c70 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    8844:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    8846:	7801      	ldrb	r1, [r0, #0]
    8848:	8840      	ldrh	r0, [r0, #2]
    884a:	4622      	mov	r2, r4
    884c:	f7ff ff78 	bl	8740 <hci_cmd_done>
	if (ncmd) {
    8850:	b125      	cbz	r5, 885c <hci_cmd_status+0x24>
    8852:	4803      	ldr	r0, [pc, #12]	; (8860 <hci_cmd_status+0x28>)
}
    8854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8858:	f017 b9bc 	b.w	1fbd4 <z_impl_k_sem_give>
    885c:	bd38      	pop	{r3, r4, r5, pc}
    885e:	bf00      	nop
    8860:	200000e8 	.word	0x200000e8

00008864 <hci_cmd_complete>:
{
    8864:	b538      	push	{r3, r4, r5, lr}
    8866:	2103      	movs	r1, #3
    8868:	4604      	mov	r4, r0
    886a:	3008      	adds	r0, #8
    886c:	f01d fa00 	bl	25c70 <net_buf_simple_pull_mem>
	status = buf->data[0];
    8870:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    8872:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    8874:	7819      	ldrb	r1, [r3, #0]
    8876:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    887a:	4622      	mov	r2, r4
    887c:	f7ff ff60 	bl	8740 <hci_cmd_done>
	if (ncmd) {
    8880:	b125      	cbz	r5, 888c <hci_cmd_complete+0x28>
    8882:	4803      	ldr	r0, [pc, #12]	; (8890 <hci_cmd_complete+0x2c>)
}
    8884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8888:	f017 b9a4 	b.w	1fbd4 <z_impl_k_sem_give>
    888c:	bd38      	pop	{r3, r4, r5, pc}
    888e:	bf00      	nop
    8890:	200000e8 	.word	0x200000e8

00008894 <hci_tx_thread>:
{
    8894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8898:	4d51      	ldr	r5, [pc, #324]	; (89e0 <hci_tx_thread+0x14c>)
    889a:	4b52      	ldr	r3, [pc, #328]	; (89e4 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    889c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 89e8 <hci_tx_thread+0x154>
		BT_ASSERT(err == 0);
    88a0:	f8df a148 	ldr.w	sl, [pc, #328]	; 89ec <hci_tx_thread+0x158>
    88a4:	1aed      	subs	r5, r5, r3
    88a6:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    88a8:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    88ac:	4850      	ldr	r0, [pc, #320]	; (89f0 <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    88ae:	f36f 3310 	bfc	r3, #12, #5
    88b2:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    88b6:	f002 fa81 	bl	adbc <bt_conn_prepare_events>
    88ba:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    88bc:	484a      	ldr	r0, [pc, #296]	; (89e8 <hci_tx_thread+0x154>)
    88be:	f04f 32ff 	mov.w	r2, #4294967295
    88c2:	f04f 33ff 	mov.w	r3, #4294967295
    88c6:	4639      	mov	r1, r7
    88c8:	f017 fcf6 	bl	202b8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    88cc:	b160      	cbz	r0, 88e8 <hci_tx_thread+0x54>
    88ce:	4949      	ldr	r1, [pc, #292]	; (89f4 <hci_tx_thread+0x160>)
    88d0:	4849      	ldr	r0, [pc, #292]	; (89f8 <hci_tx_thread+0x164>)
    88d2:	f241 437b 	movw	r3, #5243	; 0x147b
    88d6:	4652      	mov	r2, sl
    88d8:	f018 fcdc 	bl	21294 <printk>
    88dc:	4040      	eors	r0, r0
    88de:	f380 8811 	msr	BASEPRI, r0
    88e2:	f04f 0003 	mov.w	r0, #3
    88e6:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    88e8:	4e44      	ldr	r6, [pc, #272]	; (89fc <hci_tx_thread+0x168>)
{
    88ea:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 89e8 <hci_tx_thread+0x154>
    88ee:	f106 0be8 	add.w	fp, r6, #232	; 0xe8
	for (; count; ev++, count--) {
    88f2:	b917      	cbnz	r7, 88fa <hci_tx_thread+0x66>
	z_impl_k_yield();
    88f4:	f017 f8c6 	bl	1fa84 <z_impl_k_yield>
	while (1) {
    88f8:	e7d6      	b.n	88a8 <hci_tx_thread+0x14>
		switch (ev->state) {
    88fa:	f8d8 100c 	ldr.w	r1, [r8, #12]
    88fe:	f3c1 3104 	ubfx	r1, r1, #12, #5
    8902:	2901      	cmp	r1, #1
    8904:	d959      	bls.n	89ba <hci_tx_thread+0x126>
    8906:	2904      	cmp	r1, #4
    8908:	d163      	bne.n	89d2 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    890a:	f898 300c 	ldrb.w	r3, [r8, #12]
    890e:	2b00      	cmp	r3, #0
    8910:	d157      	bne.n	89c2 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8912:	483b      	ldr	r0, [pc, #236]	; (8a00 <hci_tx_thread+0x16c>)
    8914:	2200      	movs	r2, #0
    8916:	2300      	movs	r3, #0
    8918:	f01d f932 	bl	25b80 <net_buf_get>
	BT_ASSERT(buf);
    891c:	4604      	mov	r4, r0
    891e:	b960      	cbnz	r0, 893a <hci_tx_thread+0xa6>
    8920:	4938      	ldr	r1, [pc, #224]	; (8a04 <hci_tx_thread+0x170>)
    8922:	4835      	ldr	r0, [pc, #212]	; (89f8 <hci_tx_thread+0x164>)
    8924:	f241 4318 	movw	r3, #5144	; 0x1418
    8928:	4652      	mov	r2, sl
    892a:	f018 fcb3 	bl	21294 <printk>
    892e:	4040      	eors	r0, r0
    8930:	f380 8811 	msr	BASEPRI, r0
    8934:	f04f 0003 	mov.w	r0, #3
    8938:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    893a:	f04f 33ff 	mov.w	r3, #4294967295
    893e:	f04f 32ff 	mov.w	r2, #4294967295
    8942:	4658      	mov	r0, fp
    8944:	f017 f96c 	bl	1fc20 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    8948:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    894c:	b163      	cbz	r3, 8968 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    894e:	01a9      	lsls	r1, r5, #6
    8950:	482d      	ldr	r0, [pc, #180]	; (8a08 <hci_tx_thread+0x174>)
    8952:	f041 0101 	orr.w	r1, r1, #1
    8956:	f019 f904 	bl	21b62 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    895a:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    895e:	f014 fa5d 	bl	1ce1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8962:	2300      	movs	r3, #0
    8964:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    8968:	4620      	mov	r0, r4
    896a:	f01d f934 	bl	25bd6 <net_buf_ref>
    896e:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
		return bt_hci_ecc_send(buf);
    8972:	4620      	mov	r0, r4
    8974:	f7ff f8e0 	bl	7b38 <bt_hci_ecc_send>
	if (err) {
    8978:	4601      	mov	r1, r0
    897a:	b1f0      	cbz	r0, 89ba <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    897c:	01aa      	lsls	r2, r5, #6
    897e:	4823      	ldr	r0, [pc, #140]	; (8a0c <hci_tx_thread+0x178>)
    8980:	f042 0201 	orr.w	r2, r2, #1
    8984:	f019 f8fa 	bl	21b7c <log_1>
	z_impl_k_sem_give(sem);
    8988:	4821      	ldr	r0, [pc, #132]	; (8a10 <hci_tx_thread+0x17c>)
    898a:	f017 f923 	bl	1fbd4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    898e:	4620      	mov	r0, r4
    8990:	f014 f98e 	bl	1ccb0 <net_buf_id>
    8994:	4b1f      	ldr	r3, [pc, #124]	; (8a14 <hci_tx_thread+0x180>)
    8996:	220c      	movs	r2, #12
    8998:	fb02 3000 	mla	r0, r2, r0, r3
    899c:	211f      	movs	r1, #31
    899e:	8840      	ldrh	r0, [r0, #2]
    89a0:	4622      	mov	r2, r4
    89a2:	f7ff fecd 	bl	8740 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    89a6:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    89aa:	f014 fa37 	bl	1ce1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    89ae:	2300      	movs	r3, #0
		net_buf_unref(buf);
    89b0:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    89b2:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
		net_buf_unref(buf);
    89b6:	f014 fa31 	bl	1ce1c <net_buf_unref>
	for (; count; ev++, count--) {
    89ba:	f108 0814 	add.w	r8, r8, #20
    89be:	3f01      	subs	r7, #1
    89c0:	e797      	b.n	88f2 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    89c2:	2b01      	cmp	r3, #1
    89c4:	d1f9      	bne.n	89ba <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    89c6:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    89ca:	3834      	subs	r0, #52	; 0x34
    89cc:	f002 fc9a 	bl	b304 <bt_conn_process_tx>
    89d0:	e7f3      	b.n	89ba <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    89d2:	01aa      	lsls	r2, r5, #6
    89d4:	4810      	ldr	r0, [pc, #64]	; (8a18 <hci_tx_thread+0x184>)
    89d6:	f042 0202 	orr.w	r2, r2, #2
    89da:	f019 f8cf 	bl	21b7c <log_1>
    89de:	e7ec      	b.n	89ba <hci_tx_thread+0x126>
    89e0:	00027080 	.word	0x00027080
    89e4:	00026fc8 	.word	0x00026fc8
    89e8:	200002b8 	.word	0x200002b8
    89ec:	0002b7b0 	.word	0x0002b7b0
    89f0:	200002cc 	.word	0x200002cc
    89f4:	0002b7e4 	.word	0x0002b7e4
    89f8:	0002b7ed 	.word	0x0002b7ed
    89fc:	20000000 	.word	0x20000000
    8a00:	20000104 	.word	0x20000104
    8a04:	0002b555 	.word	0x0002b555
    8a08:	0002b80a 	.word	0x0002b80a
    8a0c:	0002b825 	.word	0x0002b825
    8a10:	200000e8 	.word	0x200000e8
    8a14:	2000d6c4 	.word	0x2000d6c4
    8a18:	0002b847 	.word	0x0002b847

00008a1c <hci_num_completed_packets>:
{
    8a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a20:	4d3d      	ldr	r5, [pc, #244]	; (8b18 <hci_num_completed_packets+0xfc>)
    8a22:	4b3e      	ldr	r3, [pc, #248]	; (8b1c <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    8a24:	f8d0 8008 	ldr.w	r8, [r0, #8]
    8a28:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8b20 <hci_num_completed_packets+0x104>
    8a2c:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    8a2e:	2600      	movs	r6, #0
    8a30:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    8a32:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    8a34:	f898 3000 	ldrb.w	r3, [r8]
    8a38:	429e      	cmp	r6, r3
    8a3a:	db01      	blt.n	8a40 <hci_num_completed_packets+0x24>
}
    8a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    8a40:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    8a44:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    8a48:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    8a4c:	4658      	mov	r0, fp
    8a4e:	f002 fa19 	bl	ae84 <bt_conn_lookup_handle>
		if (!conn) {
    8a52:	4604      	mov	r4, r0
    8a54:	b1d8      	cbz	r0, 8a8e <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8a56:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    8a5a:	2f00      	cmp	r7, #0
    8a5c:	d033      	beq.n	8ac6 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    8a5e:	f04f 0320 	mov.w	r3, #32
    8a62:	f3ef 8211 	mrs	r2, BASEPRI
    8a66:	f383 8811 	msr	BASEPRI, r3
    8a6a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    8a6e:	69e3      	ldr	r3, [r4, #28]
    8a70:	b1b3      	cbz	r3, 8aa0 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    8a72:	3b01      	subs	r3, #1
    8a74:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    8a76:	f382 8811 	msr	BASEPRI, r2
    8a7a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    8a7e:	4620      	mov	r0, r4
    8a80:	f001 ffee 	bl	aa60 <bt_conn_get_pkts>
    8a84:	3f01      	subs	r7, #1
    8a86:	f017 f8a5 	bl	1fbd4 <z_impl_k_sem_give>
    8a8a:	b2bf      	uxth	r7, r7
    8a8c:	e7e5      	b.n	8a5a <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    8a8e:	01aa      	lsls	r2, r5, #6
    8a90:	4824      	ldr	r0, [pc, #144]	; (8b24 <hci_num_completed_packets+0x108>)
    8a92:	f042 0201 	orr.w	r2, r2, #1
    8a96:	4659      	mov	r1, fp
    8a98:	f019 f870 	bl	21b7c <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    8a9c:	3601      	adds	r6, #1
    8a9e:	e7c9      	b.n	8a34 <hci_num_completed_packets+0x18>
	return list->head;
    8aa0:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    8aa2:	b12b      	cbz	r3, 8ab0 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8aa4:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    8aa6:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    8aa8:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8aaa:	428b      	cmp	r3, r1
	list->tail = node;
    8aac:	bf08      	it	eq
    8aae:	61a0      	streq	r0, [r4, #24]
    8ab0:	f382 8811 	msr	BASEPRI, r2
    8ab4:	f3bf 8f6f 	isb	sy
			if (!node) {
    8ab8:	b94b      	cbnz	r3, 8ace <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    8aba:	01a9      	lsls	r1, r5, #6
    8abc:	481a      	ldr	r0, [pc, #104]	; (8b28 <hci_num_completed_packets+0x10c>)
    8abe:	f041 0101 	orr.w	r1, r1, #1
    8ac2:	f019 f84e 	bl	21b62 <log_0>
		bt_conn_unref(conn);
    8ac6:	4620      	mov	r0, r4
    8ac8:	f01b fc8f 	bl	243ea <bt_conn_unref>
    8acc:	e7e6      	b.n	8a9c <hci_num_completed_packets+0x80>
	__asm__ volatile(
    8ace:	f04f 0220 	mov.w	r2, #32
    8ad2:	f3ef 8111 	mrs	r1, BASEPRI
    8ad6:	f382 8811 	msr	BASEPRI, r2
    8ada:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    8ade:	68da      	ldr	r2, [r3, #12]
    8ae0:	61e2      	str	r2, [r4, #28]
	return list->tail;
    8ae2:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    8ae4:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    8ae8:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    8aec:	b98a      	cbnz	r2, 8b12 <hci_num_completed_packets+0xf6>
	list->head = node;
    8aee:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    8af2:	f381 8811 	msr	BASEPRI, r1
    8af6:	f3bf 8f6f 	isb	sy
    8afa:	2100      	movs	r1, #0
    8afc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    8b00:	f01b fa18 	bl	23f34 <atomic_test_and_set_bit>
    8b04:	2800      	cmp	r0, #0
    8b06:	d1ba      	bne.n	8a7e <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
    8b08:	4659      	mov	r1, fp
    8b0a:	4650      	mov	r0, sl
    8b0c:	f01d fd24 	bl	26558 <k_queue_append>
    8b10:	e7b5      	b.n	8a7e <hci_num_completed_packets+0x62>
	parent->next = child;
    8b12:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8b14:	6263      	str	r3, [r4, #36]	; 0x24
}
    8b16:	e7ec      	b.n	8af2 <hci_num_completed_packets+0xd6>
    8b18:	00027080 	.word	0x00027080
    8b1c:	00026fc8 	.word	0x00026fc8
    8b20:	2000ac68 	.word	0x2000ac68
    8b24:	0002b868 	.word	0x0002b868
    8b28:	0002b884 	.word	0x0002b884

00008b2c <bt_hci_cmd_create>:
{
    8b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    8b30:	f04f 32ff 	mov.w	r2, #4294967295
    8b34:	f04f 33ff 	mov.w	r3, #4294967295
    8b38:	4606      	mov	r6, r0
    8b3a:	4817      	ldr	r0, [pc, #92]	; (8b98 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    8b3c:	4d17      	ldr	r5, [pc, #92]	; (8b9c <bt_hci_cmd_create+0x70>)
{
    8b3e:	460f      	mov	r7, r1
    8b40:	f01d f819 	bl	25b76 <net_buf_alloc_fixed>
    8b44:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    8b46:	f100 0a08 	add.w	sl, r0, #8
    8b4a:	2100      	movs	r1, #0
    8b4c:	f04f 0800 	mov.w	r8, #0
    8b50:	4650      	mov	r0, sl
    8b52:	f01d f82f 	bl	25bb4 <net_buf_simple_reserve>
    8b56:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    8b5a:	4620      	mov	r0, r4
    8b5c:	f014 f8a8 	bl	1ccb0 <net_buf_id>
    8b60:	f04f 090c 	mov.w	r9, #12
    8b64:	fb09 5000 	mla	r0, r9, r0, r5
    8b68:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    8b6a:	4620      	mov	r0, r4
    8b6c:	f014 f8a0 	bl	1ccb0 <net_buf_id>
    8b70:	fb09 5000 	mla	r0, r9, r0, r5
    8b74:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    8b78:	4620      	mov	r0, r4
    8b7a:	f014 f899 	bl	1ccb0 <net_buf_id>
    8b7e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    8b82:	2103      	movs	r1, #3
    8b84:	f8c5 8004 	str.w	r8, [r5, #4]
    8b88:	4650      	mov	r0, sl
    8b8a:	f01d f84a 	bl	25c22 <net_buf_simple_add>
	hdr->param_len = param_len;
    8b8e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    8b90:	8006      	strh	r6, [r0, #0]
}
    8b92:	4620      	mov	r0, r4
    8b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b98:	2000a090 	.word	0x2000a090
    8b9c:	2000d6c4 	.word	0x2000d6c4

00008ba0 <bt_hci_cmd_send>:
{
    8ba0:	b538      	push	{r3, r4, r5, lr}
    8ba2:	4605      	mov	r5, r0
	if (!buf) {
    8ba4:	460c      	mov	r4, r1
    8ba6:	b919      	cbnz	r1, 8bb0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    8ba8:	f7ff ffc0 	bl	8b2c <bt_hci_cmd_create>
		if (!buf) {
    8bac:	4604      	mov	r4, r0
    8bae:	b1f0      	cbz	r0, 8bee <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    8bb0:	f640 4335 	movw	r3, #3125	; 0xc35
    8bb4:	429d      	cmp	r5, r3
    8bb6:	d114      	bne.n	8be2 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    8bb8:	4620      	mov	r0, r4
    8bba:	f7fe ffbd 	bl	7b38 <bt_hci_ecc_send>
		if (err) {
    8bbe:	4605      	mov	r5, r0
    8bc0:	b168      	cbz	r0, 8bde <bt_hci_cmd_send+0x3e>
    8bc2:	4b0c      	ldr	r3, [pc, #48]	; (8bf4 <bt_hci_cmd_send+0x54>)
    8bc4:	4a0c      	ldr	r2, [pc, #48]	; (8bf8 <bt_hci_cmd_send+0x58>)
    8bc6:	1ad2      	subs	r2, r2, r3
    8bc8:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    8bca:	0192      	lsls	r2, r2, #6
    8bcc:	4601      	mov	r1, r0
    8bce:	f042 0201 	orr.w	r2, r2, #1
    8bd2:	480a      	ldr	r0, [pc, #40]	; (8bfc <bt_hci_cmd_send+0x5c>)
    8bd4:	f018 ffd2 	bl	21b7c <log_1>
			net_buf_unref(buf);
    8bd8:	4620      	mov	r0, r4
    8bda:	f014 f91f 	bl	1ce1c <net_buf_unref>
}
    8bde:	4628      	mov	r0, r5
    8be0:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8be2:	4807      	ldr	r0, [pc, #28]	; (8c00 <bt_hci_cmd_send+0x60>)
    8be4:	4621      	mov	r1, r4
    8be6:	f01c ffe9 	bl	25bbc <net_buf_put>
	return 0;
    8bea:	2500      	movs	r5, #0
    8bec:	e7f7      	b.n	8bde <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    8bee:	f06f 0536 	mvn.w	r5, #54	; 0x36
    8bf2:	e7f4      	b.n	8bde <bt_hci_cmd_send+0x3e>
    8bf4:	00026fc8 	.word	0x00026fc8
    8bf8:	00027080 	.word	0x00027080
    8bfc:	0002b825 	.word	0x0002b825
    8c00:	20000104 	.word	0x20000104

00008c04 <le_ltk_request>:
{
    8c04:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    8c06:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8c08:	882e      	ldrh	r6, [r5, #0]
    8c0a:	b2b7      	uxth	r7, r6
{
    8c0c:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    8c0e:	4638      	mov	r0, r7
    8c10:	f002 f938 	bl	ae84 <bt_conn_lookup_handle>
	if (!conn) {
    8c14:	4604      	mov	r4, r0
    8c16:	b968      	cbnz	r0, 8c34 <le_ltk_request+0x30>
    8c18:	4b27      	ldr	r3, [pc, #156]	; (8cb8 <le_ltk_request+0xb4>)
    8c1a:	4a28      	ldr	r2, [pc, #160]	; (8cbc <le_ltk_request+0xb8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8c1c:	4828      	ldr	r0, [pc, #160]	; (8cc0 <le_ltk_request+0xbc>)
    8c1e:	1ad2      	subs	r2, r2, r3
    8c20:	08d2      	lsrs	r2, r2, #3
    8c22:	0192      	lsls	r2, r2, #6
    8c24:	f042 0201 	orr.w	r2, r2, #1
    8c28:	4639      	mov	r1, r7
}
    8c2a:	b007      	add	sp, #28
    8c2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8c30:	f018 bfa4 	b.w	21b7c <log_1>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    8c34:	af02      	add	r7, sp, #8
    8c36:	f8d5 2002 	ldr.w	r2, [r5, #2]
    8c3a:	f8d5 3006 	ldr.w	r3, [r5, #6]
    8c3e:	9701      	str	r7, [sp, #4]
    8c40:	8969      	ldrh	r1, [r5, #10]
    8c42:	9100      	str	r1, [sp, #0]
    8c44:	f01c fdf6 	bl	25834 <bt_smp_request_ltk>
    8c48:	b328      	cbz	r0, 8c96 <le_ltk_request+0x92>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    8c4a:	2112      	movs	r1, #18
    8c4c:	f242 001a 	movw	r0, #8218	; 0x201a
    8c50:	f7ff ff6c 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    8c54:	4605      	mov	r5, r0
    8c56:	b970      	cbnz	r0, 8c76 <le_ltk_request+0x72>
    8c58:	4918      	ldr	r1, [pc, #96]	; (8cbc <le_ltk_request+0xb8>)
    8c5a:	4b17      	ldr	r3, [pc, #92]	; (8cb8 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    8c5c:	4819      	ldr	r0, [pc, #100]	; (8cc4 <le_ltk_request+0xc0>)
    8c5e:	1ac9      	subs	r1, r1, r3
    8c60:	08c9      	lsrs	r1, r1, #3
    8c62:	0189      	lsls	r1, r1, #6
    8c64:	f041 0101 	orr.w	r1, r1, #1
    8c68:	f018 ff7b 	bl	21b62 <log_0>
	bt_conn_unref(conn);
    8c6c:	4620      	mov	r0, r4
    8c6e:	f01b fbbc 	bl	243ea <bt_conn_unref>
}
    8c72:	b007      	add	sp, #28
    8c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c76:	2112      	movs	r1, #18
    8c78:	3008      	adds	r0, #8
    8c7a:	f01c ffd2 	bl	25c22 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    8c7e:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    8c80:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    8c84:	2210      	movs	r2, #16
    8c86:	f01a ff78 	bl	23b7a <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    8c8a:	4629      	mov	r1, r5
    8c8c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8c90:	f7ff ff86 	bl	8ba0 <bt_hci_cmd_send>
    8c94:	e7ea      	b.n	8c6c <le_ltk_request+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    8c96:	2102      	movs	r1, #2
    8c98:	f242 001b 	movw	r0, #8219	; 0x201b
    8c9c:	f7ff ff46 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    8ca0:	4605      	mov	r5, r0
    8ca2:	2800      	cmp	r0, #0
    8ca4:	d0d8      	beq.n	8c58 <le_ltk_request+0x54>
    8ca6:	2102      	movs	r1, #2
    8ca8:	3008      	adds	r0, #8
    8caa:	f01c ffba 	bl	25c22 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8cae:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    8cb0:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8cb2:	f242 001b 	movw	r0, #8219	; 0x201b
    8cb6:	e7eb      	b.n	8c90 <le_ltk_request+0x8c>
    8cb8:	00026fc8 	.word	0x00026fc8
    8cbc:	00027080 	.word	0x00027080
    8cc0:	0002b674 	.word	0x0002b674
    8cc4:	0002b89b 	.word	0x0002b89b

00008cc8 <le_conn_param_neg_reply>:
{
    8cc8:	b570      	push	{r4, r5, r6, lr}
    8cca:	4606      	mov	r6, r0
    8ccc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    8cce:	f242 0021 	movw	r0, #8225	; 0x2021
    8cd2:	2103      	movs	r1, #3
    8cd4:	f7ff ff2a 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    8cd8:	4604      	mov	r4, r0
    8cda:	b958      	cbnz	r0, 8cf4 <le_conn_param_neg_reply+0x2c>
    8cdc:	490c      	ldr	r1, [pc, #48]	; (8d10 <le_conn_param_neg_reply+0x48>)
    8cde:	4b0d      	ldr	r3, [pc, #52]	; (8d14 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    8ce0:	480d      	ldr	r0, [pc, #52]	; (8d18 <le_conn_param_neg_reply+0x50>)
    8ce2:	1ac9      	subs	r1, r1, r3
    8ce4:	08c9      	lsrs	r1, r1, #3
    8ce6:	0189      	lsls	r1, r1, #6
}
    8ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    8cec:	f041 0101 	orr.w	r1, r1, #1
    8cf0:	f018 bf37 	b.w	21b62 <log_0>
    8cf4:	2103      	movs	r1, #3
    8cf6:	3008      	adds	r0, #8
    8cf8:	f01c ff93 	bl	25c22 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    8cfc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    8cfe:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8d00:	4621      	mov	r1, r4
    8d02:	f242 0021 	movw	r0, #8225	; 0x2021
}
    8d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8d0a:	f7ff bf49 	b.w	8ba0 <bt_hci_cmd_send>
    8d0e:	bf00      	nop
    8d10:	00027080 	.word	0x00027080
    8d14:	00026fc8 	.word	0x00026fc8
    8d18:	0002b8b2 	.word	0x0002b8b2

00008d1c <le_conn_param_req>:
{
    8d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    8d1e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8d20:	78d9      	ldrb	r1, [r3, #3]
    8d22:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    8d24:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8d26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8d2a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    8d2e:	7959      	ldrb	r1, [r3, #5]
    8d30:	791a      	ldrb	r2, [r3, #4]
    8d32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8d36:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    8d3a:	799a      	ldrb	r2, [r3, #6]
    8d3c:	79d9      	ldrb	r1, [r3, #7]
    8d3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8d42:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8d46:	7a1a      	ldrb	r2, [r3, #8]
    8d48:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    8d4a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8d4c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    8d50:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    8d52:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    8d56:	f002 f895 	bl	ae84 <bt_conn_lookup_handle>
	if (!conn) {
    8d5a:	4606      	mov	r6, r0
    8d5c:	b980      	cbnz	r0, 8d80 <le_conn_param_req+0x64>
    8d5e:	4b20      	ldr	r3, [pc, #128]	; (8de0 <le_conn_param_req+0xc4>)
    8d60:	4a20      	ldr	r2, [pc, #128]	; (8de4 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8d62:	4821      	ldr	r0, [pc, #132]	; (8de8 <le_conn_param_req+0xcc>)
    8d64:	1ad2      	subs	r2, r2, r3
    8d66:	08d2      	lsrs	r2, r2, #3
    8d68:	0192      	lsls	r2, r2, #6
    8d6a:	4621      	mov	r1, r4
    8d6c:	f042 0201 	orr.w	r2, r2, #1
    8d70:	f018 ff04 	bl	21b7c <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    8d74:	2102      	movs	r1, #2
    8d76:	4620      	mov	r0, r4
    8d78:	f7ff ffa6 	bl	8cc8 <le_conn_param_neg_reply>
}
    8d7c:	b003      	add	sp, #12
    8d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    8d80:	4669      	mov	r1, sp
    8d82:	f001 fea1 	bl	aac8 <le_param_req>
    8d86:	b938      	cbnz	r0, 8d98 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    8d88:	211e      	movs	r1, #30
    8d8a:	4620      	mov	r0, r4
    8d8c:	f7ff ff9c 	bl	8cc8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    8d90:	4630      	mov	r0, r6
    8d92:	f01b fb2a 	bl	243ea <bt_conn_unref>
    8d96:	e7f1      	b.n	8d7c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    8d98:	210e      	movs	r1, #14
    8d9a:	f242 0020 	movw	r0, #8224	; 0x2020
    8d9e:	f7ff fec5 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    8da2:	4605      	mov	r5, r0
    8da4:	2800      	cmp	r0, #0
    8da6:	d0f3      	beq.n	8d90 <le_conn_param_req+0x74>
    8da8:	210e      	movs	r1, #14
    8daa:	3008      	adds	r0, #8
    8dac:	f01c ff39 	bl	25c22 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    8db0:	220e      	movs	r2, #14
    8db2:	4604      	mov	r4, r0
    8db4:	2100      	movs	r1, #0
    8db6:	f01a ff0b 	bl	23bd0 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    8dba:	f8bd 3000 	ldrh.w	r3, [sp]
    8dbe:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    8dc0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8dc4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    8dc6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8dca:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8dcc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    8dd0:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8dd2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    8dd4:	4629      	mov	r1, r5
    8dd6:	f242 0020 	movw	r0, #8224	; 0x2020
    8dda:	f7ff fee1 	bl	8ba0 <bt_hci_cmd_send>
    8dde:	e7d7      	b.n	8d90 <le_conn_param_req+0x74>
    8de0:	00026fc8 	.word	0x00026fc8
    8de4:	00027080 	.word	0x00027080
    8de8:	0002b674 	.word	0x0002b674

00008dec <bt_hci_cmd_send_sync>:
{
    8dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8df0:	4607      	mov	r7, r0
    8df2:	b086      	sub	sp, #24
    8df4:	4615      	mov	r5, r2
	if (!buf) {
    8df6:	460c      	mov	r4, r1
    8df8:	b921      	cbnz	r1, 8e04 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    8dfa:	f7ff fe97 	bl	8b2c <bt_hci_cmd_create>
		if (!buf) {
    8dfe:	4604      	mov	r4, r0
    8e00:	2800      	cmp	r0, #0
    8e02:	d057      	beq.n	8eb4 <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8e04:	2201      	movs	r2, #1
    8e06:	2100      	movs	r1, #0
    8e08:	4668      	mov	r0, sp
    8e0a:	f01d fce3 	bl	267d4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    8e0e:	4620      	mov	r0, r4
    8e10:	f013 ff4e 	bl	1ccb0 <net_buf_id>
    8e14:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8ebc <bt_hci_cmd_send_sync+0xd0>
    8e18:	230c      	movs	r3, #12
    8e1a:	fb03 8000 	mla	r0, r3, r0, r8
    8e1e:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    8e22:	4620      	mov	r0, r4
    8e24:	f01c fed7 	bl	25bd6 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8e28:	4825      	ldr	r0, [pc, #148]	; (8ec0 <bt_hci_cmd_send_sync+0xd4>)
    8e2a:	4621      	mov	r1, r4
    8e2c:	f01c fec6 	bl	25bbc <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    8e30:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8e34:	2300      	movs	r3, #0
    8e36:	4668      	mov	r0, sp
    8e38:	f016 fef2 	bl	1fc20 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    8e3c:	4606      	mov	r6, r0
    8e3e:	b180      	cbz	r0, 8e62 <bt_hci_cmd_send_sync+0x76>
    8e40:	4a20      	ldr	r2, [pc, #128]	; (8ec4 <bt_hci_cmd_send_sync+0xd8>)
    8e42:	4921      	ldr	r1, [pc, #132]	; (8ec8 <bt_hci_cmd_send_sync+0xdc>)
    8e44:	4821      	ldr	r0, [pc, #132]	; (8ecc <bt_hci_cmd_send_sync+0xe0>)
    8e46:	f240 134d 	movw	r3, #333	; 0x14d
    8e4a:	f018 fa23 	bl	21294 <printk>
    8e4e:	4820      	ldr	r0, [pc, #128]	; (8ed0 <bt_hci_cmd_send_sync+0xe4>)
    8e50:	4631      	mov	r1, r6
    8e52:	f018 fa1f 	bl	21294 <printk>
    8e56:	4040      	eors	r0, r0
    8e58:	f380 8811 	msr	BASEPRI, r0
    8e5c:	f04f 0003 	mov.w	r0, #3
    8e60:	df02      	svc	2
	status = cmd(buf)->status;
    8e62:	4620      	mov	r0, r4
    8e64:	f013 ff24 	bl	1ccb0 <net_buf_id>
    8e68:	230c      	movs	r3, #12
    8e6a:	4358      	muls	r0, r3
    8e6c:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    8e70:	b1be      	cbz	r6, 8ea2 <bt_hci_cmd_send_sync+0xb6>
    8e72:	4a18      	ldr	r2, [pc, #96]	; (8ed4 <bt_hci_cmd_send_sync+0xe8>)
    8e74:	4b18      	ldr	r3, [pc, #96]	; (8ed8 <bt_hci_cmd_send_sync+0xec>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    8e76:	4819      	ldr	r0, [pc, #100]	; (8edc <bt_hci_cmd_send_sync+0xf0>)
    8e78:	1a9b      	subs	r3, r3, r2
    8e7a:	08db      	lsrs	r3, r3, #3
    8e7c:	019b      	lsls	r3, r3, #6
    8e7e:	f043 0302 	orr.w	r3, r3, #2
    8e82:	4632      	mov	r2, r6
    8e84:	4639      	mov	r1, r7
    8e86:	f018 fe8d 	bl	21ba4 <log_2>
		net_buf_unref(buf);
    8e8a:	4620      	mov	r0, r4
    8e8c:	f013 ffc6 	bl	1ce1c <net_buf_unref>
			return -EIO;
    8e90:	2e09      	cmp	r6, #9
    8e92:	bf0c      	ite	eq
    8e94:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    8e98:	f06f 0004 	mvnne.w	r0, #4
}
    8e9c:	b006      	add	sp, #24
    8e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    8ea2:	b115      	cbz	r5, 8eaa <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
    8ea4:	602c      	str	r4, [r5, #0]
	return 0;
    8ea6:	4630      	mov	r0, r6
    8ea8:	e7f8      	b.n	8e9c <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    8eaa:	4620      	mov	r0, r4
    8eac:	f013 ffb6 	bl	1ce1c <net_buf_unref>
	return 0;
    8eb0:	4628      	mov	r0, r5
    8eb2:	e7f3      	b.n	8e9c <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
    8eb4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8eb8:	e7f0      	b.n	8e9c <bt_hci_cmd_send_sync+0xb0>
    8eba:	bf00      	nop
    8ebc:	2000d6c4 	.word	0x2000d6c4
    8ec0:	20000104 	.word	0x20000104
    8ec4:	0002b7b0 	.word	0x0002b7b0
    8ec8:	0002b7e4 	.word	0x0002b7e4
    8ecc:	0002b7ed 	.word	0x0002b7ed
    8ed0:	0002b8cc 	.word	0x0002b8cc
    8ed4:	00026fc8 	.word	0x00026fc8
    8ed8:	00027080 	.word	0x00027080
    8edc:	0002b8ec 	.word	0x0002b8ec

00008ee0 <set_random_address>:
{
    8ee0:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    8ee2:	4e15      	ldr	r6, [pc, #84]	; (8f38 <set_random_address+0x58>)
    8ee4:	2206      	movs	r2, #6
    8ee6:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    8eea:	4605      	mov	r5, r0
    8eec:	f01a fe34 	bl	23b58 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    8ef0:	4604      	mov	r4, r0
    8ef2:	b1d8      	cbz	r0, 8f2c <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    8ef4:	2106      	movs	r1, #6
    8ef6:	f242 0005 	movw	r0, #8197	; 0x2005
    8efa:	f7ff fe17 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    8efe:	4604      	mov	r4, r0
    8f00:	b1b0      	cbz	r0, 8f30 <set_random_address+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8f02:	2206      	movs	r2, #6
    8f04:	4629      	mov	r1, r5
    8f06:	3008      	adds	r0, #8
    8f08:	f01c fe91 	bl	25c2e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    8f0c:	4621      	mov	r1, r4
    8f0e:	2200      	movs	r2, #0
    8f10:	f242 0005 	movw	r0, #8197	; 0x2005
    8f14:	f7ff ff6a 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    8f18:	4604      	mov	r4, r0
    8f1a:	b938      	cbnz	r0, 8f2c <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    8f1c:	4629      	mov	r1, r5
    8f1e:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    8f22:	f01a fff2 	bl	23f0a <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    8f26:	2301      	movs	r3, #1
    8f28:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    8f2c:	4620      	mov	r0, r4
    8f2e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    8f30:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8f34:	e7fa      	b.n	8f2c <set_random_address+0x4c>
    8f36:	bf00      	nop
    8f38:	20000000 	.word	0x20000000

00008f3c <le_set_private_addr>:
{
    8f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8f3e:	4d16      	ldr	r5, [pc, #88]	; (8f98 <le_set_private_addr+0x5c>)
    8f40:	4603      	mov	r3, r0
    8f42:	f105 0094 	add.w	r0, r5, #148	; 0x94
    8f46:	f01a ffd7 	bl	23ef8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    8f4a:	04c2      	lsls	r2, r0, #19
    8f4c:	d422      	bmi.n	8f94 <le_set_private_addr+0x58>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    8f4e:	f103 0012 	add.w	r0, r3, #18
    8f52:	4669      	mov	r1, sp
    8f54:	eb05 1000 	add.w	r0, r5, r0, lsl #4
    8f58:	f01a febf 	bl	23cda <bt_rpa_create>
	if (!err) {
    8f5c:	4604      	mov	r4, r0
    8f5e:	b950      	cbnz	r0, 8f76 <le_set_private_addr+0x3a>
		err = set_random_address(&rpa);
    8f60:	4668      	mov	r0, sp
    8f62:	f7ff ffbd 	bl	8ee0 <set_random_address>
		if (!err) {
    8f66:	4604      	mov	r4, r0
    8f68:	b928      	cbnz	r0, 8f76 <le_set_private_addr+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8f6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    8f6e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    8f72:	f01a ffd0 	bl	23f16 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_RPA_TIMEOUT_SET)) {
    8f76:	4809      	ldr	r0, [pc, #36]	; (8f9c <le_set_private_addr+0x60>)
    8f78:	210d      	movs	r1, #13
    8f7a:	f01a ffdb 	bl	23f34 <atomic_test_and_set_bit>
    8f7e:	b930      	cbnz	r0, 8f8e <le_set_private_addr+0x52>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8f80:	4907      	ldr	r1, [pc, #28]	; (8fa0 <le_set_private_addr+0x64>)
    8f82:	4808      	ldr	r0, [pc, #32]	; (8fa4 <le_set_private_addr+0x68>)
    8f84:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
    8f88:	2300      	movs	r3, #0
    8f8a:	f016 ff7d 	bl	1fe88 <k_delayed_work_submit_to_queue>
}
    8f8e:	4620      	mov	r0, r4
    8f90:	b003      	add	sp, #12
    8f92:	bd30      	pop	{r4, r5, pc}
		return 0;
    8f94:	2400      	movs	r4, #0
    8f96:	e7fa      	b.n	8f8e <le_set_private_addr+0x52>
    8f98:	20000000 	.word	0x20000000
    8f9c:	20000094 	.word	0x20000094
    8fa0:	20000130 	.word	0x20000130
    8fa4:	2000ac68 	.word	0x2000ac68

00008fa8 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    8fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    8fac:	f011 0401 	ands.w	r4, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    8fb0:	4605      	mov	r5, r0
    8fb2:	460f      	mov	r7, r1
    8fb4:	4690      	mov	r8, r2
    8fb6:	461e      	mov	r6, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    8fb8:	d035      	beq.n	9026 <le_adv_set_random_addr.isra.0+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    8fba:	b132      	cbz	r2, 8fca <le_adv_set_random_addr.isra.0+0x22>
    8fbc:	068b      	lsls	r3, r1, #26
    8fbe:	d504      	bpl.n	8fca <le_adv_set_random_addr.isra.0+0x22>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    8fc0:	4b28      	ldr	r3, [pc, #160]	; (9064 <le_adv_set_random_addr.isra.0+0xbc>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    8fc2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    8fc6:	065c      	lsls	r4, r3, #25
    8fc8:	d548      	bpl.n	905c <le_adv_set_random_addr.isra.0+0xb4>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    8fca:	0778      	lsls	r0, r7, #29
    8fcc:	d40b      	bmi.n	8fe6 <le_adv_set_random_addr.isra.0+0x3e>
		return le_set_private_addr(adv->id);
    8fce:	4628      	mov	r0, r5
    8fd0:	f7ff ffb4 	bl	8f3c <le_set_private_addr>
			if (err) {
    8fd4:	bb00      	cbnz	r0, 9018 <le_adv_set_random_addr.isra.0+0x70>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    8fd6:	f1b8 0f00 	cmp.w	r8, #0
    8fda:	d03d      	beq.n	9058 <le_adv_set_random_addr.isra.0+0xb0>
    8fdc:	06b9      	lsls	r1, r7, #26
    8fde:	d53b      	bpl.n	9058 <le_adv_set_random_addr.isra.0+0xb0>
				*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    8fe0:	2303      	movs	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
    8fe2:	7033      	strb	r3, [r6, #0]
		if (err) {
    8fe4:	e018      	b.n	9018 <le_adv_set_random_addr.isra.0+0x70>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    8fe6:	4c1f      	ldr	r4, [pc, #124]	; (9064 <le_adv_set_random_addr.isra.0+0xbc>)
    8fe8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    8fec:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    8ff0:	5ce3      	ldrb	r3, [r4, r3]
    8ff2:	2b01      	cmp	r3, #1
    8ff4:	d008      	beq.n	9008 <le_adv_set_random_addr.isra.0+0x60>
			*own_addr_type = id_addr->type;
    8ff6:	eba9 0505 	sub.w	r5, r9, r5
    8ffa:	5d63      	ldrb	r3, [r4, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    8ffc:	f1b8 0f00 	cmp.w	r8, #0
    9000:	d10c      	bne.n	901c <le_adv_set_random_addr.isra.0+0x74>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    9002:	7033      	strb	r3, [r6, #0]
	return 0;
    9004:	2000      	movs	r0, #0
    9006:	e007      	b.n	9018 <le_adv_set_random_addr.isra.0+0x70>
				err = set_adv_random_address(adv, &id_addr->a);
    9008:	2007      	movs	r0, #7
    900a:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    900e:	4420      	add	r0, r4
    9010:	f7ff ff66 	bl	8ee0 <set_random_address>
				if (err) {
    9014:	2800      	cmp	r0, #0
    9016:	d0ee      	beq.n	8ff6 <le_adv_set_random_addr.isra.0+0x4e>
}
    9018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    901c:	06ba      	lsls	r2, r7, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    901e:	bf48      	it	mi
    9020:	f043 0302 	orrmi.w	r3, r3, #2
    9024:	e7ed      	b.n	9002 <le_adv_set_random_addr.isra.0+0x5a>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    9026:	074b      	lsls	r3, r1, #29
    9028:	d514      	bpl.n	9054 <le_adv_set_random_addr.isra.0+0xac>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    902a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 9064 <le_adv_set_random_addr.isra.0+0xbc>
    902e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    9032:	00c7      	lsls	r7, r0, #3
    9034:	f818 3003 	ldrb.w	r3, [r8, r3]
    9038:	2b01      	cmp	r3, #1
    903a:	d109      	bne.n	9050 <le_adv_set_random_addr.isra.0+0xa8>
				err = set_adv_random_address(adv, &id_addr->a);
    903c:	2007      	movs	r0, #7
    903e:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    9042:	4440      	add	r0, r8
    9044:	f7ff ff4c 	bl	8ee0 <set_random_address>
			*own_addr_type = id_addr->type;
    9048:	1b7d      	subs	r5, r7, r5
    904a:	f818 3005 	ldrb.w	r3, [r8, r5]
    904e:	e7c8      	b.n	8fe2 <le_adv_set_random_addr.isra.0+0x3a>
	int err = 0;
    9050:	4620      	mov	r0, r4
    9052:	e7f9      	b.n	9048 <le_adv_set_random_addr.isra.0+0xa0>
		return le_set_private_addr(adv->id);
    9054:	f7ff ff72 	bl	8f3c <le_set_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    9058:	2301      	movs	r3, #1
    905a:	e7c2      	b.n	8fe2 <le_adv_set_random_addr.isra.0+0x3a>
			return -ENOTSUP;
    905c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9060:	e7da      	b.n	9018 <le_adv_set_random_addr.isra.0+0x70>
    9062:	bf00      	nop
    9064:	20000000 	.word	0x20000000

00009068 <set_le_adv_enable_legacy>:
{
    9068:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    906a:	4606      	mov	r6, r0
    906c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    906e:	f242 000a 	movw	r0, #8202	; 0x200a
    9072:	2101      	movs	r1, #1
    9074:	f7ff fd5a 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    9078:	4604      	mov	r4, r0
    907a:	b1e8      	cbz	r0, 90b8 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    907c:	3008      	adds	r0, #8
	if (enable) {
    907e:	b1cd      	cbz	r5, 90b4 <set_le_adv_enable_legacy+0x4c>
    9080:	2101      	movs	r1, #1
    9082:	f01c fddd 	bl	25c40 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    9086:	3610      	adds	r6, #16
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    9088:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    908a:	4620      	mov	r0, r4
    908c:	9302      	str	r3, [sp, #8]
	state->target = target;
    908e:	9601      	str	r6, [sp, #4]
	state->val = val;
    9090:	f88d 500c 	strb.w	r5, [sp, #12]
    9094:	f013 fe0c 	bl	1ccb0 <net_buf_id>
    9098:	4b09      	ldr	r3, [pc, #36]	; (90c0 <set_le_adv_enable_legacy+0x58>)
    909a:	220c      	movs	r2, #12
    909c:	fb02 3300 	mla	r3, r2, r0, r3
    90a0:	aa01      	add	r2, sp, #4
    90a2:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    90a4:	4621      	mov	r1, r4
    90a6:	2200      	movs	r2, #0
    90a8:	f242 000a 	movw	r0, #8202	; 0x200a
    90ac:	f7ff fe9e 	bl	8dec <bt_hci_cmd_send_sync>
}
    90b0:	b004      	add	sp, #16
    90b2:	bd70      	pop	{r4, r5, r6, pc}
    90b4:	4629      	mov	r1, r5
    90b6:	e7e4      	b.n	9082 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    90b8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    90bc:	e7f8      	b.n	90b0 <set_le_adv_enable_legacy+0x48>
    90be:	bf00      	nop
    90c0:	2000d6c4 	.word	0x2000d6c4

000090c4 <le_update_private_addr>:
{
    90c4:	b538      	push	{r3, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    90c6:	4b19      	ldr	r3, [pc, #100]	; (912c <le_update_private_addr+0x68>)
    90c8:	f103 0028 	add.w	r0, r3, #40	; 0x28
    90cc:	f01a ff14 	bl	23ef8 <atomic_get>
		if (adv &&
    90d0:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    90d2:	f3c0 1580 	ubfx	r5, r0, #6, #1
    90d6:	d412      	bmi.n	90fe <le_update_private_addr+0x3a>
	uint8_t id = BT_ID_DEFAULT;
    90d8:	2400      	movs	r4, #0
	bool adv_enabled = false;
    90da:	4625      	mov	r5, r4
	err = le_set_private_addr(id);
    90dc:	4620      	mov	r0, r4
    90de:	f7ff ff2d 	bl	8f3c <le_set_private_addr>
	if (err) {
    90e2:	4601      	mov	r1, r0
    90e4:	b1c8      	cbz	r0, 911a <le_update_private_addr+0x56>
    90e6:	4b12      	ldr	r3, [pc, #72]	; (9130 <le_update_private_addr+0x6c>)
    90e8:	4a12      	ldr	r2, [pc, #72]	; (9134 <le_update_private_addr+0x70>)
		BT_WARN("Failed to update RPA address (%d)", err);
    90ea:	4813      	ldr	r0, [pc, #76]	; (9138 <le_update_private_addr+0x74>)
    90ec:	1ad2      	subs	r2, r2, r3
    90ee:	08d2      	lsrs	r2, r2, #3
    90f0:	0192      	lsls	r2, r2, #6
}
    90f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Failed to update RPA address (%d)", err);
    90f6:	f042 0202 	orr.w	r2, r2, #2
    90fa:	f018 bd3f 	b.w	21b7c <log_1>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    90fe:	f103 0028 	add.w	r0, r3, #40	; 0x28
    9102:	f01a fef9 	bl	23ef8 <atomic_get>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    9106:	0502      	lsls	r2, r0, #20
    9108:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    910c:	d4e4      	bmi.n	90d8 <le_update_private_addr+0x14>
			id = adv->id;
    910e:	4618      	mov	r0, r3
    9110:	f810 4f18 	ldrb.w	r4, [r0, #24]!
			set_le_adv_enable_legacy(adv, false);
    9114:	f7ff ffa8 	bl	9068 <set_le_adv_enable_legacy>
    9118:	e7e0      	b.n	90dc <le_update_private_addr+0x18>
	if (adv && adv_enabled) {
    911a:	b12d      	cbz	r5, 9128 <le_update_private_addr+0x64>
}
    911c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_le_adv_enable_legacy(adv, true);
    9120:	4806      	ldr	r0, [pc, #24]	; (913c <le_update_private_addr+0x78>)
    9122:	2101      	movs	r1, #1
    9124:	f7ff bfa0 	b.w	9068 <set_le_adv_enable_legacy>
}
    9128:	bd38      	pop	{r3, r4, r5, pc}
    912a:	bf00      	nop
    912c:	20000000 	.word	0x20000000
    9130:	00026fc8 	.word	0x00026fc8
    9134:	00027080 	.word	0x00027080
    9138:	0002b908 	.word	0x0002b908
    913c:	20000018 	.word	0x20000018

00009140 <rpa_timeout>:
{
    9140:	b507      	push	{r0, r1, r2, lr}
	bool adv_enabled = false;
    9142:	2300      	movs	r3, #0
    9144:	f88d 3007 	strb.w	r3, [sp, #7]
	le_rpa_invalidate();
    9148:	f7fe fff4 	bl	8134 <le_rpa_invalidate>
	bt_adv_foreach(adv_is_private_enabled, &adv_enabled);
    914c:	480d      	ldr	r0, [pc, #52]	; (9184 <rpa_timeout+0x44>)
    914e:	f10d 0107 	add.w	r1, sp, #7
    9152:	f7fe ffbf 	bl	80d4 <bt_adv_foreach>
	if (!(adv_enabled ||
    9156:	f89d 3007 	ldrb.w	r3, [sp, #7]
    915a:	b973      	cbnz	r3, 917a <rpa_timeout+0x3a>
    915c:	480a      	ldr	r0, [pc, #40]	; (9188 <rpa_timeout+0x48>)
    915e:	f01a fecb 	bl	23ef8 <atomic_get>
    9162:	0501      	lsls	r1, r0, #20
    9164:	d409      	bmi.n	917a <rpa_timeout+0x3a>
    9166:	4808      	ldr	r0, [pc, #32]	; (9188 <rpa_timeout+0x48>)
    9168:	f01a fec6 	bl	23ef8 <atomic_get>
    916c:	0682      	lsls	r2, r0, #26
    916e:	d506      	bpl.n	917e <rpa_timeout+0x3e>
    9170:	4805      	ldr	r0, [pc, #20]	; (9188 <rpa_timeout+0x48>)
    9172:	f01a fec1 	bl	23ef8 <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    9176:	0603      	lsls	r3, r0, #24
    9178:	d501      	bpl.n	917e <rpa_timeout+0x3e>
	le_update_private_addr();
    917a:	f7ff ffa3 	bl	90c4 <le_update_private_addr>
}
    917e:	b003      	add	sp, #12
    9180:	f85d fb04 	ldr.w	pc, [sp], #4
    9184:	00023fe1 	.word	0x00023fe1
    9188:	20000094 	.word	0x20000094

0000918c <hci_le_read_max_data_len>:
{
    918c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    918e:	4606      	mov	r6, r0
    9190:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    9192:	aa01      	add	r2, sp, #4
    9194:	2100      	movs	r1, #0
    9196:	f242 002f 	movw	r0, #8239	; 0x202f
    919a:	f7ff fe27 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    919e:	4604      	mov	r4, r0
    91a0:	b160      	cbz	r0, 91bc <hci_le_read_max_data_len+0x30>
    91a2:	490c      	ldr	r1, [pc, #48]	; (91d4 <hci_le_read_max_data_len+0x48>)
    91a4:	4b0c      	ldr	r3, [pc, #48]	; (91d8 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    91a6:	480d      	ldr	r0, [pc, #52]	; (91dc <hci_le_read_max_data_len+0x50>)
    91a8:	1ac9      	subs	r1, r1, r3
    91aa:	08c9      	lsrs	r1, r1, #3
    91ac:	0189      	lsls	r1, r1, #6
    91ae:	f041 0101 	orr.w	r1, r1, #1
    91b2:	f018 fcd6 	bl	21b62 <log_0>
}
    91b6:	4620      	mov	r0, r4
    91b8:	b002      	add	sp, #8
    91ba:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    91bc:	9801      	ldr	r0, [sp, #4]
    91be:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    91c0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    91c4:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    91c6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    91ca:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    91cc:	f013 fe26 	bl	1ce1c <net_buf_unref>
	return 0;
    91d0:	e7f1      	b.n	91b6 <hci_le_read_max_data_len+0x2a>
    91d2:	bf00      	nop
    91d4:	00027080 	.word	0x00027080
    91d8:	00026fc8 	.word	0x00026fc8
    91dc:	0002b92a 	.word	0x0002b92a

000091e0 <hci_id_add>:
{
    91e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    91e4:	4605      	mov	r5, r0
    91e6:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    91e8:	f242 0027 	movw	r0, #8231	; 0x2027
    91ec:	2127      	movs	r1, #39	; 0x27
{
    91ee:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    91f0:	f7ff fc9c 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    91f4:	4604      	mov	r4, r0
    91f6:	b1e8      	cbz	r0, 9234 <hci_id_add+0x54>
	return net_buf_simple_add(&buf->b, len);
    91f8:	2127      	movs	r1, #39	; 0x27
    91fa:	3008      	adds	r0, #8
    91fc:	f01c fd11 	bl	25c22 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    9200:	4641      	mov	r1, r8
    9202:	4606      	mov	r6, r0
    9204:	f01a fe84 	bl	23f10 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
    9208:	4639      	mov	r1, r7
    920a:	2210      	movs	r2, #16
    920c:	1df0      	adds	r0, r6, #7
    920e:	f01a fcb4 	bl	23b7a <memcpy>
	memcpy(cp->local_irk, bt_dev.irk[id], 16);
    9212:	490a      	ldr	r1, [pc, #40]	; (923c <hci_id_add+0x5c>)
    9214:	3512      	adds	r5, #18
    9216:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    921a:	2210      	movs	r2, #16
    921c:	f106 0017 	add.w	r0, r6, #23
    9220:	f01a fcab 	bl	23b7a <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    9224:	4621      	mov	r1, r4
    9226:	2200      	movs	r2, #0
}
    9228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    922c:	f242 0027 	movw	r0, #8231	; 0x2027
    9230:	f7ff bddc 	b.w	8dec <bt_hci_cmd_send_sync>
}
    9234:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    923c:	20000000 	.word	0x20000000

00009240 <hci_set_ad>:
{
    9240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9244:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    9246:	2120      	movs	r1, #32
{
    9248:	4682      	mov	sl, r0
    924a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    924c:	f7ff fc6e 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    9250:	4606      	mov	r6, r0
    9252:	2800      	cmp	r0, #0
    9254:	d05c      	beq.n	9310 <hci_set_ad+0xd0>
    9256:	2120      	movs	r1, #32
    9258:	3008      	adds	r0, #8
    925a:	f01c fce2 	bl	25c22 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    925e:	2220      	movs	r2, #32
    9260:	2100      	movs	r1, #0
    9262:	4681      	mov	r9, r0
    9264:	f01a fcb4 	bl	23bd0 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    9268:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    926c:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    9270:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    9272:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    9274:	f8d4 8000 	ldr.w	r8, [r4]
    9278:	2300      	movs	r3, #0
    927a:	6862      	ldr	r2, [r4, #4]
    927c:	4293      	cmp	r3, r2
    927e:	d30d      	bcc.n	929c <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    9280:	9b00      	ldr	r3, [sp, #0]
    9282:	3408      	adds	r4, #8
    9284:	429c      	cmp	r4, r3
    9286:	d1f5      	bne.n	9274 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9288:	2200      	movs	r2, #0
    928a:	4631      	mov	r1, r6
    928c:	4650      	mov	r0, sl
	*data_len = set_data_len;
    928e:	f889 5000 	strb.w	r5, [r9]
}
    9292:	b003      	add	sp, #12
    9294:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9298:	f7ff bda8 	b.w	8dec <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    929c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    92a0:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    92a4:	1ca8      	adds	r0, r5, #2
    92a6:	1881      	adds	r1, r0, r2
    92a8:	291f      	cmp	r1, #31
    92aa:	d91a      	bls.n	92e2 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    92ac:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    92b0:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    92b4:	d101      	bne.n	92ba <hci_set_ad+0x7a>
    92b6:	2a00      	cmp	r2, #0
    92b8:	dc11      	bgt.n	92de <hci_set_ad+0x9e>
    92ba:	4b17      	ldr	r3, [pc, #92]	; (9318 <hci_set_ad+0xd8>)
    92bc:	4917      	ldr	r1, [pc, #92]	; (931c <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    92be:	4818      	ldr	r0, [pc, #96]	; (9320 <hci_set_ad+0xe0>)
    92c0:	1ac9      	subs	r1, r1, r3
    92c2:	08c9      	lsrs	r1, r1, #3
    92c4:	0189      	lsls	r1, r1, #6
    92c6:	f041 0101 	orr.w	r1, r1, #1
    92ca:	f018 fc4a 	bl	21b62 <log_0>
		net_buf_unref(buf);
    92ce:	4630      	mov	r0, r6
    92d0:	f013 fda4 	bl	1ce1c <net_buf_unref>
					return -EINVAL;
    92d4:	f06f 0015 	mvn.w	r0, #21
}
    92d8:	b003      	add	sp, #12
    92da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    92de:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    92e2:	b2d7      	uxtb	r7, r2
    92e4:	1c79      	adds	r1, r7, #1
    92e6:	f80b 1005 	strb.w	r1, [fp, r5]
    92ea:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    92ec:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    92ee:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    92f2:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    92f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    92fa:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    92fc:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    92fe:	f01a fc3c 	bl	23b7a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    9302:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    9304:	443d      	add	r5, r7
    9306:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    9308:	3301      	adds	r3, #1
    930a:	f108 0808 	add.w	r8, r8, #8
    930e:	e7b4      	b.n	927a <hci_set_ad+0x3a>
		return -ENOBUFS;
    9310:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9314:	e7e0      	b.n	92d8 <hci_set_ad+0x98>
    9316:	bf00      	nop
    9318:	00026fc8 	.word	0x00026fc8
    931c:	00027080 	.word	0x00027080
    9320:	0002b94a 	.word	0x0002b94a

00009324 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    9324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9328:	b087      	sub	sp, #28
    932a:	4606      	mov	r6, r0
    932c:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    9330:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    9334:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    9338:	460c      	mov	r4, r1
    933a:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    933c:	2100      	movs	r1, #0
    933e:	2210      	movs	r2, #16
    9340:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    9342:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
    9344:	f01a fc44 	bl	23bd0 <memset>
	if (use_name) {
    9348:	f1b8 0f00 	cmp.w	r8, #0
    934c:	d00e      	beq.n	936c <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    934e:	bbb4      	cbnz	r4, 93be <le_adv_update.constprop.0+0x9a>
    9350:	2d00      	cmp	r5, #0
    9352:	d13f      	bne.n	93d4 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    9354:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 9408 <le_adv_update.constprop.0+0xe4>
    9358:	4658      	mov	r0, fp
    935a:	f01a fbd0 	bl	23afe <strlen>
    935e:	2309      	movs	r3, #9
    9360:	f88d 3000 	strb.w	r3, [sp]
    9364:	f88d 0001 	strb.w	r0, [sp, #1]
    9368:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    936c:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    9370:	f1b8 0f00 	cmp.w	r8, #0
    9374:	d030      	beq.n	93d8 <le_adv_update.constprop.0+0xb4>
    9376:	f1ba 0f00 	cmp.w	sl, #0
    937a:	d12d      	bne.n	93d8 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    937c:	2301      	movs	r3, #1
			d[1].data = &data;
    937e:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    9382:	9305      	str	r3, [sp, #20]
			d_len = 2;
    9384:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    9386:	a902      	add	r1, sp, #8
    9388:	f242 0008 	movw	r0, #8200	; 0x2008
    938c:	f7ff ff58 	bl	9240 <hci_set_ad>
		if (err) {
    9390:	4604      	mov	r4, r0
    9392:	b938      	cbnz	r0, 93a4 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    9394:	f1ba 0f00 	cmp.w	sl, #0
    9398:	d120      	bne.n	93dc <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    939a:	2104      	movs	r1, #4
    939c:	f106 0010 	add.w	r0, r6, #16
    93a0:	f01a fdb9 	bl	23f16 <atomic_or>
}
    93a4:	4620      	mov	r0, r4
    93a6:	b007      	add	sp, #28
    93a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    93ac:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    93b0:	3a08      	subs	r2, #8
    93b2:	2a01      	cmp	r2, #1
    93b4:	d925      	bls.n	9402 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    93b6:	3301      	adds	r3, #1
    93b8:	429f      	cmp	r7, r3
    93ba:	d1f7      	bne.n	93ac <le_adv_update.constprop.0+0x88>
    93bc:	e7c8      	b.n	9350 <le_adv_update.constprop.0+0x2c>
    93be:	2300      	movs	r3, #0
    93c0:	e7fa      	b.n	93b8 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    93c2:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    93c6:	3a08      	subs	r2, #8
    93c8:	2a01      	cmp	r2, #1
    93ca:	d91a      	bls.n	9402 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    93cc:	3301      	adds	r3, #1
    93ce:	4599      	cmp	r9, r3
    93d0:	d1f7      	bne.n	93c2 <le_adv_update.constprop.0+0x9e>
    93d2:	e7bf      	b.n	9354 <le_adv_update.constprop.0+0x30>
    93d4:	2300      	movs	r3, #0
    93d6:	e7fa      	b.n	93ce <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    93d8:	2201      	movs	r2, #1
    93da:	e7d4      	b.n	9386 <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
    93dc:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    93e0:	2201      	movs	r2, #1
    93e2:	f1b8 0f00 	cmp.w	r8, #0
    93e6:	d003      	beq.n	93f0 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    93e8:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    93ea:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    93ee:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    93f0:	a902      	add	r1, sp, #8
    93f2:	f242 0009 	movw	r0, #8201	; 0x2009
    93f6:	f7ff ff23 	bl	9240 <hci_set_ad>
		if (err) {
    93fa:	2800      	cmp	r0, #0
    93fc:	d0cd      	beq.n	939a <le_adv_update.constprop.0+0x76>
    93fe:	4604      	mov	r4, r0
    9400:	e7d0      	b.n	93a4 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    9402:	f06f 0415 	mvn.w	r4, #21
    9406:	e7cd      	b.n	93a4 <le_adv_update.constprop.0+0x80>
    9408:	20000160 	.word	0x20000160

0000940c <conn_auto_initiate>:
{
    940c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    940e:	7b43      	ldrb	r3, [r0, #13]
    9410:	2b07      	cmp	r3, #7
{
    9412:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    9414:	d169      	bne.n	94ea <conn_auto_initiate+0xde>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    9416:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9418:	4630      	mov	r0, r6
    941a:	f01a fd6d 	bl	23ef8 <atomic_get>
    941e:	0483      	lsls	r3, r0, #18
    9420:	d41b      	bmi.n	945a <conn_auto_initiate+0x4e>
    9422:	78e3      	ldrb	r3, [r4, #3]
    9424:	b123      	cbz	r3, 9430 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    9426:	4b32      	ldr	r3, [pc, #200]	; (94f0 <conn_auto_initiate+0xe4>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    9428:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    942c:	071d      	lsls	r5, r3, #28
    942e:	d514      	bpl.n	945a <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    9430:	2102      	movs	r1, #2
    9432:	f242 0016 	movw	r0, #8214	; 0x2016
    9436:	f7ff fb79 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    943a:	4605      	mov	r5, r0
    943c:	b168      	cbz	r0, 945a <conn_auto_initiate+0x4e>
    943e:	2102      	movs	r1, #2
    9440:	3008      	adds	r0, #8
    9442:	f01c fbee 	bl	25c22 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    9446:	8823      	ldrh	r3, [r4, #0]
    9448:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    944a:	4629      	mov	r1, r5
    944c:	f242 0016 	movw	r0, #8214	; 0x2016
}
    9450:	b004      	add	sp, #16
    9452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9456:	f7ff bba3 	b.w	8ba0 <bt_hci_cmd_send>
    945a:	4630      	mov	r0, r6
    945c:	f01a fd4c 	bl	23ef8 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9460:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    9464:	4d22      	ldr	r5, [pc, #136]	; (94f0 <conn_auto_initiate+0xe4>)
    9466:	f3c0 3100 	ubfx	r1, r0, #12, #1
    946a:	d11c      	bne.n	94a6 <conn_auto_initiate+0x9a>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    946c:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    9470:	07d8      	lsls	r0, r3, #31
    9472:	d518      	bpl.n	94a6 <conn_auto_initiate+0x9a>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    9474:	2302      	movs	r3, #2
    9476:	9100      	str	r1, [sp, #0]
    9478:	461a      	mov	r2, r3
    947a:	4620      	mov	r0, r4
    947c:	f01a fe48 	bl	24110 <bt_le_set_phy>
		if (!err) {
    9480:	4601      	mov	r1, r0
    9482:	b930      	cbnz	r0, 9492 <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9484:	2180      	movs	r1, #128	; 0x80
    9486:	4630      	mov	r0, r6
}
    9488:	b004      	add	sp, #16
    948a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    948e:	f01a bd42 	b.w	23f16 <atomic_or>
    9492:	4a18      	ldr	r2, [pc, #96]	; (94f4 <conn_auto_initiate+0xe8>)
    9494:	4b18      	ldr	r3, [pc, #96]	; (94f8 <conn_auto_initiate+0xec>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    9496:	4819      	ldr	r0, [pc, #100]	; (94fc <conn_auto_initiate+0xf0>)
    9498:	1ad2      	subs	r2, r2, r3
    949a:	08d2      	lsrs	r2, r2, #3
    949c:	0192      	lsls	r2, r2, #6
    949e:	f042 0201 	orr.w	r2, r2, #1
    94a2:	f018 fb6b 	bl	21b7c <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    94a6:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    94aa:	069a      	lsls	r2, r3, #26
    94ac:	d51d      	bpl.n	94ea <conn_auto_initiate+0xde>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    94ae:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    94b2:	689b      	ldr	r3, [r3, #8]
    94b4:	079b      	lsls	r3, r3, #30
    94b6:	d518      	bpl.n	94ea <conn_auto_initiate+0xde>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    94b8:	f10d 010e 	add.w	r1, sp, #14
    94bc:	a803      	add	r0, sp, #12
    94be:	f7ff fe65 	bl	918c <hci_le_read_max_data_len>
			if (!err) {
    94c2:	b990      	cbnz	r0, 94ea <conn_auto_initiate+0xde>
				err = bt_le_set_data_len(conn,
    94c4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    94c8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    94cc:	4620      	mov	r0, r4
    94ce:	f01a fe02 	bl	240d6 <bt_le_set_data_len>
				if (err) {
    94d2:	4601      	mov	r1, r0
    94d4:	b148      	cbz	r0, 94ea <conn_auto_initiate+0xde>
    94d6:	4a07      	ldr	r2, [pc, #28]	; (94f4 <conn_auto_initiate+0xe8>)
    94d8:	4b07      	ldr	r3, [pc, #28]	; (94f8 <conn_auto_initiate+0xec>)
					BT_ERR("Failed to set data len (%d)", err);
    94da:	4809      	ldr	r0, [pc, #36]	; (9500 <conn_auto_initiate+0xf4>)
    94dc:	1ad2      	subs	r2, r2, r3
    94de:	08d2      	lsrs	r2, r2, #3
    94e0:	0192      	lsls	r2, r2, #6
    94e2:	f042 0201 	orr.w	r2, r2, #1
    94e6:	f018 fb49 	bl	21b7c <log_1>
}
    94ea:	b004      	add	sp, #16
    94ec:	bd70      	pop	{r4, r5, r6, pc}
    94ee:	bf00      	nop
    94f0:	20000000 	.word	0x20000000
    94f4:	00027080 	.word	0x00027080
    94f8:	00026fc8 	.word	0x00026fc8
    94fc:	0002b963 	.word	0x0002b963
    9500:	0002b97d 	.word	0x0002b97d

00009504 <le_phy_update_complete>:
{
    9504:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9506:	6883      	ldr	r3, [r0, #8]
    9508:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    950c:	4628      	mov	r0, r5
    950e:	f001 fcb9 	bl	ae84 <bt_conn_lookup_handle>
	if (!conn) {
    9512:	4604      	mov	r4, r0
    9514:	b960      	cbnz	r0, 9530 <le_phy_update_complete+0x2c>
    9516:	4b11      	ldr	r3, [pc, #68]	; (955c <le_phy_update_complete+0x58>)
    9518:	4a11      	ldr	r2, [pc, #68]	; (9560 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    951a:	4812      	ldr	r0, [pc, #72]	; (9564 <le_phy_update_complete+0x60>)
    951c:	1ad2      	subs	r2, r2, r3
    951e:	08d2      	lsrs	r2, r2, #3
    9520:	0192      	lsls	r2, r2, #6
    9522:	4629      	mov	r1, r5
    9524:	f042 0201 	orr.w	r2, r2, #1
}
    9528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    952c:	f018 bb26 	b.w	21b7c <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    9530:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9532:	f06f 0180 	mvn.w	r1, #128	; 0x80
    9536:	4628      	mov	r0, r5
    9538:	f01a fccf 	bl	23eda <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    953c:	0603      	lsls	r3, r0, #24
    953e:	d507      	bpl.n	9550 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9544:	4628      	mov	r0, r5
    9546:	f01a fce6 	bl	23f16 <atomic_or>
		conn_auto_initiate(conn);
    954a:	4620      	mov	r0, r4
    954c:	f7ff ff5e 	bl	940c <conn_auto_initiate>
	bt_conn_unref(conn);
    9550:	4620      	mov	r0, r4
}
    9552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    9556:	f01a bf48 	b.w	243ea <bt_conn_unref>
    955a:	bf00      	nop
    955c:	00026fc8 	.word	0x00026fc8
    9560:	00027080 	.word	0x00027080
    9564:	0002b674 	.word	0x0002b674

00009568 <le_remote_feat_complete>:
{
    9568:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    956a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    956c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    9570:	4630      	mov	r0, r6
    9572:	f001 fc87 	bl	ae84 <bt_conn_lookup_handle>
	if (!conn) {
    9576:	4604      	mov	r4, r0
    9578:	b960      	cbnz	r0, 9594 <le_remote_feat_complete+0x2c>
    957a:	4a10      	ldr	r2, [pc, #64]	; (95bc <le_remote_feat_complete+0x54>)
    957c:	4b10      	ldr	r3, [pc, #64]	; (95c0 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    957e:	4811      	ldr	r0, [pc, #68]	; (95c4 <le_remote_feat_complete+0x5c>)
    9580:	1ad2      	subs	r2, r2, r3
    9582:	08d2      	lsrs	r2, r2, #3
    9584:	0192      	lsls	r2, r2, #6
    9586:	4631      	mov	r1, r6
    9588:	f042 0201 	orr.w	r2, r2, #1
}
    958c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9590:	f018 baf4 	b.w	21b7c <log_1>
	if (!evt->status) {
    9594:	782b      	ldrb	r3, [r5, #0]
    9596:	b923      	cbnz	r3, 95a2 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    9598:	2208      	movs	r2, #8
    959a:	1ce9      	adds	r1, r5, #3
    959c:	30ac      	adds	r0, #172	; 0xac
    959e:	f01a faec 	bl	23b7a <memcpy>
    95a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    95a6:	1d20      	adds	r0, r4, #4
    95a8:	f01a fcb5 	bl	23f16 <atomic_or>
	conn_auto_initiate(conn);
    95ac:	4620      	mov	r0, r4
    95ae:	f7ff ff2d 	bl	940c <conn_auto_initiate>
	bt_conn_unref(conn);
    95b2:	4620      	mov	r0, r4
}
    95b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    95b8:	f01a bf17 	b.w	243ea <bt_conn_unref>
    95bc:	00027080 	.word	0x00027080
    95c0:	00026fc8 	.word	0x00026fc8
    95c4:	0002b674 	.word	0x0002b674

000095c8 <bt_unpair>:
{
    95c8:	b530      	push	{r4, r5, lr}
    95ca:	b085      	sub	sp, #20
    95cc:	460d      	mov	r5, r1
    95ce:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
    95d2:	b9c8      	cbnz	r0, 9608 <bt_unpair+0x40>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    95d4:	b949      	cbnz	r1, 95ea <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
    95d6:	490e      	ldr	r1, [pc, #56]	; (9610 <bt_unpair+0x48>)
    95d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    95dc:	f10d 0207 	add.w	r2, sp, #7
    95e0:	f006 fa68 	bl	fab4 <bt_foreach_bond>
		return 0;
    95e4:	2000      	movs	r0, #0
}
    95e6:	b005      	add	sp, #20
    95e8:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    95ea:	9002      	str	r0, [sp, #8]
    95ec:	a902      	add	r1, sp, #8
    95ee:	f8cd 000b 	str.w	r0, [sp, #11]
    95f2:	4628      	mov	r0, r5
    95f4:	f01a fc86 	bl	23f04 <bt_addr_le_cmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    95f8:	2800      	cmp	r0, #0
    95fa:	d0ec      	beq.n	95d6 <bt_unpair+0xe>
	unpair(id, addr);
    95fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9600:	4629      	mov	r1, r5
    9602:	f7fe fe47 	bl	8294 <unpair>
	return 0;
    9606:	e7ed      	b.n	95e4 <bt_unpair+0x1c>
		return -EINVAL;
    9608:	f06f 0015 	mvn.w	r0, #21
    960c:	e7eb      	b.n	95e6 <bt_unpair+0x1e>
    960e:	bf00      	nop
    9610:	00023f6d 	.word	0x00023f6d

00009614 <bt_security_err_get>:
	switch (hci_err) {
    9614:	2829      	cmp	r0, #41	; 0x29
    9616:	bf9a      	itte	ls
    9618:	4b01      	ldrls	r3, [pc, #4]	; (9620 <bt_security_err_get+0xc>)
    961a:	5c18      	ldrbls	r0, [r3, r0]
{
    961c:	2008      	movhi	r0, #8
}
    961e:	4770      	bx	lr
    9620:	0002bf62 	.word	0x0002bf62

00009624 <hci_encrypt_key_refresh_complete>:
{
    9624:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    9626:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    9628:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    962c:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    962e:	4630      	mov	r0, r6
    9630:	f001 fc28 	bl	ae84 <bt_conn_lookup_handle>
	if (!conn) {
    9634:	4604      	mov	r4, r0
    9636:	b960      	cbnz	r0, 9652 <hci_encrypt_key_refresh_complete+0x2e>
    9638:	4a1f      	ldr	r2, [pc, #124]	; (96b8 <hci_encrypt_key_refresh_complete+0x94>)
    963a:	4b20      	ldr	r3, [pc, #128]	; (96bc <hci_encrypt_key_refresh_complete+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    963c:	4820      	ldr	r0, [pc, #128]	; (96c0 <hci_encrypt_key_refresh_complete+0x9c>)
    963e:	1ad2      	subs	r2, r2, r3
    9640:	08d2      	lsrs	r2, r2, #3
    9642:	0192      	lsls	r2, r2, #6
    9644:	4631      	mov	r1, r6
    9646:	f042 0201 	orr.w	r2, r2, #1
}
    964a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    964e:	f018 ba95 	b.w	21b7c <log_1>
	if (status) {
    9652:	b165      	cbz	r5, 966e <hci_encrypt_key_refresh_complete+0x4a>
		bt_conn_security_changed(conn, status,
    9654:	4628      	mov	r0, r5
    9656:	f7ff ffdd 	bl	9614 <bt_security_err_get>
    965a:	4629      	mov	r1, r5
    965c:	4602      	mov	r2, r0
    965e:	4620      	mov	r0, r4
    9660:	f001 fa6c 	bl	ab3c <bt_conn_security_changed>
	bt_conn_unref(conn);
    9664:	4620      	mov	r0, r4
}
    9666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    966a:	f01a bebe 	b.w	243ea <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    966e:	7883      	ldrb	r3, [r0, #2]
    9670:	2b01      	cmp	r3, #1
    9672:	d107      	bne.n	9684 <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
    9674:	f006 f930 	bl	f8d8 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    9678:	4620      	mov	r0, r4
    967a:	f01a fc07 	bl	23e8c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    967e:	2800      	cmp	r0, #0
    9680:	bf08      	it	eq
    9682:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    9684:	4628      	mov	r0, r5
    9686:	f7ff ffc5 	bl	9614 <bt_security_err_get>
    968a:	4629      	mov	r1, r5
    968c:	4602      	mov	r2, r0
    968e:	4620      	mov	r0, r4
    9690:	f001 fa54 	bl	ab3c <bt_conn_security_changed>
	if (status) {
    9694:	2d00      	cmp	r5, #0
    9696:	d0e5      	beq.n	9664 <hci_encrypt_key_refresh_complete+0x40>
    9698:	4b08      	ldr	r3, [pc, #32]	; (96bc <hci_encrypt_key_refresh_complete+0x98>)
    969a:	4907      	ldr	r1, [pc, #28]	; (96b8 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Failed to set required security level");
    969c:	4809      	ldr	r0, [pc, #36]	; (96c4 <hci_encrypt_key_refresh_complete+0xa0>)
    969e:	1ac9      	subs	r1, r1, r3
    96a0:	08c9      	lsrs	r1, r1, #3
    96a2:	0189      	lsls	r1, r1, #6
    96a4:	f041 0101 	orr.w	r1, r1, #1
    96a8:	f018 fa5b 	bl	21b62 <log_0>
		bt_conn_disconnect(conn, status);
    96ac:	4629      	mov	r1, r5
    96ae:	4620      	mov	r0, r4
    96b0:	f01a fed6 	bl	24460 <bt_conn_disconnect>
    96b4:	e7d6      	b.n	9664 <hci_encrypt_key_refresh_complete+0x40>
    96b6:	bf00      	nop
    96b8:	00027080 	.word	0x00027080
    96bc:	00026fc8 	.word	0x00026fc8
    96c0:	0002b698 	.word	0x0002b698
    96c4:	0002b999 	.word	0x0002b999

000096c8 <hci_encrypt_change>:
{
    96c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    96ca:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    96cc:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    96d0:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    96d2:	4638      	mov	r0, r7
    96d4:	f001 fbd6 	bl	ae84 <bt_conn_lookup_handle>
	if (!conn) {
    96d8:	4604      	mov	r4, r0
    96da:	b960      	cbnz	r0, 96f6 <hci_encrypt_change+0x2e>
    96dc:	4b20      	ldr	r3, [pc, #128]	; (9760 <hci_encrypt_change+0x98>)
    96de:	4a21      	ldr	r2, [pc, #132]	; (9764 <hci_encrypt_change+0x9c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    96e0:	4821      	ldr	r0, [pc, #132]	; (9768 <hci_encrypt_change+0xa0>)
    96e2:	1ad2      	subs	r2, r2, r3
    96e4:	08d2      	lsrs	r2, r2, #3
    96e6:	0192      	lsls	r2, r2, #6
    96e8:	4639      	mov	r1, r7
    96ea:	f042 0201 	orr.w	r2, r2, #1
}
    96ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    96f2:	f018 ba43 	b.w	21b7c <log_1>
	if (status) {
    96f6:	b165      	cbz	r5, 9712 <hci_encrypt_change+0x4a>
		bt_conn_security_changed(conn, status,
    96f8:	4628      	mov	r0, r5
    96fa:	f7ff ff8b 	bl	9614 <bt_security_err_get>
    96fe:	4629      	mov	r1, r5
    9700:	4602      	mov	r2, r0
    9702:	4620      	mov	r0, r4
    9704:	f001 fa1a 	bl	ab3c <bt_conn_security_changed>
	bt_conn_unref(conn);
    9708:	4620      	mov	r0, r4
}
    970a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    970e:	f01a be6c 	b.w	243ea <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    9712:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    9714:	78f3      	ldrb	r3, [r6, #3]
    9716:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    9718:	2a01      	cmp	r2, #1
    971a:	d108      	bne.n	972e <hci_encrypt_change+0x66>
		if (conn->encrypt) {
    971c:	b10b      	cbz	r3, 9722 <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
    971e:	f006 f8db 	bl	f8d8 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    9722:	4620      	mov	r0, r4
    9724:	f01a fbb2 	bl	23e8c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    9728:	2800      	cmp	r0, #0
    972a:	bf08      	it	eq
    972c:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    972e:	4628      	mov	r0, r5
    9730:	f7ff ff70 	bl	9614 <bt_security_err_get>
    9734:	4629      	mov	r1, r5
    9736:	4602      	mov	r2, r0
    9738:	4620      	mov	r0, r4
    973a:	f001 f9ff 	bl	ab3c <bt_conn_security_changed>
	if (status) {
    973e:	2d00      	cmp	r5, #0
    9740:	d0e2      	beq.n	9708 <hci_encrypt_change+0x40>
    9742:	4b07      	ldr	r3, [pc, #28]	; (9760 <hci_encrypt_change+0x98>)
    9744:	4907      	ldr	r1, [pc, #28]	; (9764 <hci_encrypt_change+0x9c>)
		BT_ERR("Failed to set required security level");
    9746:	4809      	ldr	r0, [pc, #36]	; (976c <hci_encrypt_change+0xa4>)
    9748:	1ac9      	subs	r1, r1, r3
    974a:	08c9      	lsrs	r1, r1, #3
    974c:	0189      	lsls	r1, r1, #6
    974e:	f041 0101 	orr.w	r1, r1, #1
    9752:	f018 fa06 	bl	21b62 <log_0>
		bt_conn_disconnect(conn, status);
    9756:	4629      	mov	r1, r5
    9758:	4620      	mov	r0, r4
    975a:	f01a fe81 	bl	24460 <bt_conn_disconnect>
    975e:	e7d3      	b.n	9708 <hci_encrypt_change+0x40>
    9760:	00026fc8 	.word	0x00026fc8
    9764:	00027080 	.word	0x00027080
    9768:	0002b698 	.word	0x0002b698
    976c:	0002b999 	.word	0x0002b999

00009770 <bt_id_add>:
{
    9770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9772:	4c5d      	ldr	r4, [pc, #372]	; (98e8 <bt_id_add+0x178>)
    9774:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    9778:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
    977c:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    977e:	b10a      	cbz	r2, 9784 <bt_id_add+0x14>
    9780:	429a      	cmp	r2, r3
    9782:	d208      	bcs.n	9796 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
    9784:	3301      	adds	r3, #1
    9786:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    978a:	7a2b      	ldrb	r3, [r5, #8]
    978c:	f043 0304 	orr.w	r3, r3, #4
    9790:	722b      	strb	r3, [r5, #8]
}
    9792:	b003      	add	sp, #12
    9794:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9796:	2100      	movs	r1, #0
    9798:	2206      	movs	r2, #6
    979a:	4608      	mov	r0, r1
    979c:	f001 fcaa 	bl	b0f4 <bt_conn_lookup_state_le>
	if (conn) {
    97a0:	4606      	mov	r6, r0
    97a2:	b178      	cbz	r0, 97c4 <bt_id_add+0x54>
    97a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    97a8:	f104 0094 	add.w	r0, r4, #148	; 0x94
    97ac:	f01a fbb3 	bl	23f16 <atomic_or>
	keys->state |= flag;
    97b0:	7a2b      	ldrb	r3, [r5, #8]
		bt_conn_unref(conn);
    97b2:	4630      	mov	r0, r6
	keys->state |= flag;
    97b4:	f043 0301 	orr.w	r3, r3, #1
    97b8:	722b      	strb	r3, [r5, #8]
}
    97ba:	b003      	add	sp, #12
    97bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    97c0:	f01a be13 	b.w	243ea <bt_conn_unref>
	bt_adv_foreach(adv_pause_enabled, NULL);
    97c4:	4601      	mov	r1, r0
    97c6:	4849      	ldr	r0, [pc, #292]	; (98ec <bt_id_add+0x17c>)
    97c8:	f7fe fc84 	bl	80d4 <bt_adv_foreach>
	if (bt_dev.le.rl_entries) {
    97cc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    97d0:	b173      	cbz	r3, 97f0 <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    97d2:	4630      	mov	r0, r6
    97d4:	f01a fc44 	bl	24060 <addr_res_enable>
		if (err) {
    97d8:	b150      	cbz	r0, 97f0 <bt_id_add+0x80>
    97da:	4945      	ldr	r1, [pc, #276]	; (98f0 <bt_id_add+0x180>)
    97dc:	4b45      	ldr	r3, [pc, #276]	; (98f4 <bt_id_add+0x184>)
			BT_WARN("Failed to disable address resolution");
    97de:	4846      	ldr	r0, [pc, #280]	; (98f8 <bt_id_add+0x188>)
    97e0:	1ac9      	subs	r1, r1, r3
    97e2:	08c9      	lsrs	r1, r1, #3
    97e4:	0189      	lsls	r1, r1, #6
    97e6:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    97ea:	f018 f9ba 	bl	21b62 <log_0>
	if (err) {
    97ee:	e023      	b.n	9838 <bt_id_add+0xc8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    97f0:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    97f4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    97f8:	429a      	cmp	r2, r3
    97fa:	d127      	bne.n	984c <bt_id_add+0xdc>
    97fc:	4b3d      	ldr	r3, [pc, #244]	; (98f4 <bt_id_add+0x184>)
    97fe:	4e3c      	ldr	r6, [pc, #240]	; (98f0 <bt_id_add+0x180>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    9800:	483e      	ldr	r0, [pc, #248]	; (98fc <bt_id_add+0x18c>)
    9802:	1af6      	subs	r6, r6, r3
    9804:	08f6      	lsrs	r6, r6, #3
    9806:	01b6      	lsls	r6, r6, #6
    9808:	f046 0102 	orr.w	r1, r6, #2
    980c:	f018 f9a9 	bl	21b62 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    9810:	2200      	movs	r2, #0
    9812:	4611      	mov	r1, r2
    9814:	f242 0029 	movw	r0, #8233	; 0x2029
    9818:	f7ff fae8 	bl	8dec <bt_hci_cmd_send_sync>
		if (err) {
    981c:	b118      	cbz	r0, 9826 <bt_id_add+0xb6>
			BT_ERR("Failed to clear resolution list");
    981e:	4838      	ldr	r0, [pc, #224]	; (9900 <bt_id_add+0x190>)
    9820:	f046 0101 	orr.w	r1, r6, #1
    9824:	e7e1      	b.n	97ea <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
    9826:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    982a:	3301      	adds	r3, #1
    982c:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    9830:	7a2b      	ldrb	r3, [r5, #8]
    9832:	f043 0304 	orr.w	r3, r3, #4
    9836:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    9838:	2001      	movs	r0, #1
    983a:	f01a fc11 	bl	24060 <addr_res_enable>
	bt_adv_foreach(adv_unpause_enabled, NULL);
    983e:	4831      	ldr	r0, [pc, #196]	; (9904 <bt_id_add+0x194>)
    9840:	2100      	movs	r1, #0
}
    9842:	b003      	add	sp, #12
    9844:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    9848:	f7fe bc44 	b.w	80d4 <bt_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    984c:	462a      	mov	r2, r5
    984e:	1c6f      	adds	r7, r5, #1
    9850:	f812 0b2a 	ldrb.w	r0, [r2], #42
    9854:	4639      	mov	r1, r7
    9856:	f7ff fcc3 	bl	91e0 <hci_id_add>
	if (err) {
    985a:	4606      	mov	r6, r0
    985c:	b140      	cbz	r0, 9870 <bt_id_add+0x100>
    985e:	4924      	ldr	r1, [pc, #144]	; (98f0 <bt_id_add+0x180>)
    9860:	4b24      	ldr	r3, [pc, #144]	; (98f4 <bt_id_add+0x184>)
		BT_ERR("Failed to add IRK to controller");
    9862:	4829      	ldr	r0, [pc, #164]	; (9908 <bt_id_add+0x198>)
    9864:	1ac9      	subs	r1, r1, r3
    9866:	08c9      	lsrs	r1, r1, #3
    9868:	0189      	lsls	r1, r1, #6
    986a:	f041 0101 	orr.w	r1, r1, #1
    986e:	e7bc      	b.n	97ea <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
    9870:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9874:	3301      	adds	r3, #1
    9876:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
    987a:	7a2b      	ldrb	r3, [r5, #8]
    987c:	f043 0304 	orr.w	r3, r3, #4
    9880:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    9882:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    9886:	075b      	lsls	r3, r3, #29
    9888:	d408      	bmi.n	989c <bt_id_add+0x12c>
    988a:	4919      	ldr	r1, [pc, #100]	; (98f0 <bt_id_add+0x180>)
    988c:	4b19      	ldr	r3, [pc, #100]	; (98f4 <bt_id_add+0x184>)
		BT_WARN("Set privacy mode command is not supported");
    988e:	481f      	ldr	r0, [pc, #124]	; (990c <bt_id_add+0x19c>)
    9890:	1ac9      	subs	r1, r1, r3
    9892:	08c9      	lsrs	r1, r1, #3
    9894:	0189      	lsls	r1, r1, #6
    9896:	f041 0102 	orr.w	r1, r1, #2
    989a:	e7a6      	b.n	97ea <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
    989c:	4639      	mov	r1, r7
    989e:	4668      	mov	r0, sp
    98a0:	f01a fb36 	bl	23f10 <bt_addr_le_copy>
	cp.mode = mode;
    98a4:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    98a6:	2108      	movs	r1, #8
    98a8:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    98ac:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    98b0:	f7ff f93c 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    98b4:	4604      	mov	r4, r0
    98b6:	b940      	cbnz	r0, 98ca <bt_id_add+0x15a>
    98b8:	490d      	ldr	r1, [pc, #52]	; (98f0 <bt_id_add+0x180>)
    98ba:	4b0e      	ldr	r3, [pc, #56]	; (98f4 <bt_id_add+0x184>)
		BT_ERR("Failed to set privacy mode");
    98bc:	4814      	ldr	r0, [pc, #80]	; (9910 <bt_id_add+0x1a0>)
    98be:	1ac9      	subs	r1, r1, r3
    98c0:	08c9      	lsrs	r1, r1, #3
    98c2:	0189      	lsls	r1, r1, #6
    98c4:	f041 0101 	orr.w	r1, r1, #1
    98c8:	e78f      	b.n	97ea <bt_id_add+0x7a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    98ca:	2208      	movs	r2, #8
    98cc:	4669      	mov	r1, sp
    98ce:	4410      	add	r0, r2
    98d0:	f01c f9ad 	bl	25c2e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    98d4:	4632      	mov	r2, r6
    98d6:	4621      	mov	r1, r4
    98d8:	f242 004e 	movw	r0, #8270	; 0x204e
    98dc:	f7ff fa86 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    98e0:	2800      	cmp	r0, #0
    98e2:	d0a9      	beq.n	9838 <bt_id_add+0xc8>
    98e4:	e7e8      	b.n	98b8 <bt_id_add+0x148>
    98e6:	bf00      	nop
    98e8:	20000000 	.word	0x20000000
    98ec:	00024001 	.word	0x00024001
    98f0:	00027080 	.word	0x00027080
    98f4:	00026fc8 	.word	0x00026fc8
    98f8:	0002b9bf 	.word	0x0002b9bf
    98fc:	0002b9e4 	.word	0x0002b9e4
    9900:	0002ba15 	.word	0x0002ba15
    9904:	0002402b 	.word	0x0002402b
    9908:	0002ba35 	.word	0x0002ba35
    990c:	0002ba55 	.word	0x0002ba55
    9910:	0002ba7f 	.word	0x0002ba7f

00009914 <bt_id_del>:
{
    9914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    9918:	4d44      	ldr	r5, [pc, #272]	; (9a2c <bt_id_del+0x118>)
    991a:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    991e:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
{
    9922:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    9924:	b112      	cbz	r2, 992c <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    9926:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    9928:	4293      	cmp	r3, r2
    992a:	dd08      	ble.n	993e <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
    992c:	3b01      	subs	r3, #1
    992e:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    9932:	7a23      	ldrb	r3, [r4, #8]
    9934:	f023 0304 	bic.w	r3, r3, #4
    9938:	7223      	strb	r3, [r4, #8]
}
    993a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    993e:	2100      	movs	r1, #0
    9940:	2206      	movs	r2, #6
    9942:	4608      	mov	r0, r1
    9944:	f001 fbd6 	bl	b0f4 <bt_conn_lookup_state_le>
	if (conn) {
    9948:	4606      	mov	r6, r0
    994a:	b170      	cbz	r0, 996a <bt_id_del+0x56>
    994c:	f105 0094 	add.w	r0, r5, #148	; 0x94
    9950:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    9954:	f01a fadf 	bl	23f16 <atomic_or>
	keys->state |= flag;
    9958:	7a23      	ldrb	r3, [r4, #8]
    995a:	f043 0302 	orr.w	r3, r3, #2
    995e:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    9960:	4630      	mov	r0, r6
}
    9962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    9966:	f01a bd40 	b.w	243ea <bt_conn_unref>
	bt_adv_foreach(adv_pause_enabled, NULL);
    996a:	4601      	mov	r1, r0
    996c:	4830      	ldr	r0, [pc, #192]	; (9a30 <bt_id_del+0x11c>)
    996e:	f7fe fbb1 	bl	80d4 <bt_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    9972:	4630      	mov	r0, r6
    9974:	f01a fb74 	bl	24060 <addr_res_enable>
	if (err) {
    9978:	4606      	mov	r6, r0
    997a:	b1b0      	cbz	r0, 99aa <bt_id_del+0x96>
    997c:	4a2d      	ldr	r2, [pc, #180]	; (9a34 <bt_id_del+0x120>)
    997e:	4b2e      	ldr	r3, [pc, #184]	; (9a38 <bt_id_del+0x124>)
    9980:	1ad2      	subs	r2, r2, r3
    9982:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    9984:	0192      	lsls	r2, r2, #6
    9986:	4601      	mov	r1, r0
    9988:	f042 0201 	orr.w	r2, r2, #1
    998c:	482b      	ldr	r0, [pc, #172]	; (9a3c <bt_id_del+0x128>)
    998e:	f018 f8f5 	bl	21b7c <log_1>
	if (bt_dev.le.rl_entries) {
    9992:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    9996:	b113      	cbz	r3, 999e <bt_id_del+0x8a>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    9998:	2001      	movs	r0, #1
    999a:	f01a fb61 	bl	24060 <addr_res_enable>
}
    999e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    99a2:	4827      	ldr	r0, [pc, #156]	; (9a40 <bt_id_del+0x12c>)
    99a4:	2100      	movs	r1, #0
    99a6:	f7fe bb95 	b.w	80d4 <bt_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    99aa:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    99ae:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
    99b2:	429a      	cmp	r2, r3
    99b4:	d20c      	bcs.n	99d0 <bt_id_del+0xbc>
		bt_dev.le.rl_entries--;
    99b6:	3b01      	subs	r3, #1
    99b8:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    99bc:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    99be:	4921      	ldr	r1, [pc, #132]	; (9a44 <bt_id_del+0x130>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    99c0:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    99c4:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    99c6:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    99c8:	2002      	movs	r0, #2
    99ca:	f006 f889 	bl	fae0 <bt_keys_foreach>
		goto done;
    99ce:	e7e0      	b.n	9992 <bt_id_del+0x7e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    99d0:	2107      	movs	r1, #7
    99d2:	f242 0028 	movw	r0, #8232	; 0x2028
    99d6:	f7ff f8a9 	bl	8b2c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    99da:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    99de:	4607      	mov	r7, r0
    99e0:	b950      	cbnz	r0, 99f8 <bt_id_del+0xe4>
    99e2:	4b15      	ldr	r3, [pc, #84]	; (9a38 <bt_id_del+0x124>)
    99e4:	4913      	ldr	r1, [pc, #76]	; (9a34 <bt_id_del+0x120>)
		BT_ERR("Failed to remove IRK from controller");
    99e6:	4818      	ldr	r0, [pc, #96]	; (9a48 <bt_id_del+0x134>)
    99e8:	1ac9      	subs	r1, r1, r3
    99ea:	08c9      	lsrs	r1, r1, #3
    99ec:	0189      	lsls	r1, r1, #6
    99ee:	f041 0101 	orr.w	r1, r1, #1
    99f2:	f018 f8b6 	bl	21b62 <log_0>
		goto done;
    99f6:	e7cc      	b.n	9992 <bt_id_del+0x7e>
	return net_buf_simple_add(&buf->b, len);
    99f8:	2107      	movs	r1, #7
    99fa:	3008      	adds	r0, #8
    99fc:	f01c f911 	bl	25c22 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    9a00:	4641      	mov	r1, r8
    9a02:	f01a fa85 	bl	23f10 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    9a06:	4632      	mov	r2, r6
    9a08:	4639      	mov	r1, r7
    9a0a:	f242 0028 	movw	r0, #8232	; 0x2028
    9a0e:	f7ff f9ed 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    9a12:	2800      	cmp	r0, #0
    9a14:	d1e5      	bne.n	99e2 <bt_id_del+0xce>
	bt_dev.le.rl_entries--;
    9a16:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    9a1a:	3b01      	subs	r3, #1
    9a1c:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
    9a20:	7a23      	ldrb	r3, [r4, #8]
    9a22:	f023 0304 	bic.w	r3, r3, #4
    9a26:	7223      	strb	r3, [r4, #8]
    9a28:	e7b3      	b.n	9992 <bt_id_del+0x7e>
    9a2a:	bf00      	nop
    9a2c:	20000000 	.word	0x20000000
    9a30:	00024001 	.word	0x00024001
    9a34:	00027080 	.word	0x00027080
    9a38:	00026fc8 	.word	0x00026fc8
    9a3c:	0002ba9a 	.word	0x0002ba9a
    9a40:	0002402b 	.word	0x0002402b
    9a44:	0002404b 	.word	0x0002404b
    9a48:	0002bac7 	.word	0x0002bac7

00009a4c <hci_event_prio>:
{
    9a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a50:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    9a52:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    9a56:	4630      	mov	r0, r6
    9a58:	f01c f91a 	bl	25c90 <net_buf_simple_headroom>
	state->len = buf->len;
    9a5c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9a60:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    9a64:	4605      	mov	r5, r0
    9a66:	d80c      	bhi.n	9a82 <hci_event_prio+0x36>
    9a68:	4a1c      	ldr	r2, [pc, #112]	; (9adc <hci_event_prio+0x90>)
    9a6a:	491d      	ldr	r1, [pc, #116]	; (9ae0 <hci_event_prio+0x94>)
    9a6c:	481d      	ldr	r0, [pc, #116]	; (9ae4 <hci_event_prio+0x98>)
    9a6e:	f641 03b8 	movw	r3, #6328	; 0x18b8
    9a72:	f017 fc0f 	bl	21294 <printk>
    9a76:	4040      	eors	r0, r0
    9a78:	f380 8811 	msr	BASEPRI, r0
    9a7c:	f04f 0003 	mov.w	r0, #3
    9a80:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    9a82:	4630      	mov	r0, r6
    9a84:	2102      	movs	r1, #2
    9a86:	f01c f8f3 	bl	25c70 <net_buf_simple_pull_mem>
    9a8a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9a8c:	7800      	ldrb	r0, [r0, #0]
    9a8e:	f01a f9eb 	bl	23e68 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9a92:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9a94:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9a96:	d40c      	bmi.n	9ab2 <hci_event_prio+0x66>
    9a98:	4a10      	ldr	r2, [pc, #64]	; (9adc <hci_event_prio+0x90>)
    9a9a:	4913      	ldr	r1, [pc, #76]	; (9ae8 <hci_event_prio+0x9c>)
    9a9c:	4811      	ldr	r0, [pc, #68]	; (9ae4 <hci_event_prio+0x98>)
    9a9e:	f641 03bc 	movw	r3, #6332	; 0x18bc
    9aa2:	f017 fbf7 	bl	21294 <printk>
    9aa6:	4040      	eors	r0, r0
    9aa8:	f380 8811 	msr	BASEPRI, r0
    9aac:	f04f 0003 	mov.w	r0, #3
    9ab0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    9ab2:	2305      	movs	r3, #5
    9ab4:	4a0d      	ldr	r2, [pc, #52]	; (9aec <hci_event_prio+0xa0>)
    9ab6:	7838      	ldrb	r0, [r7, #0]
    9ab8:	4621      	mov	r1, r4
    9aba:	f7fe fdef 	bl	869c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    9abe:	07b3      	lsls	r3, r6, #30
    9ac0:	d507      	bpl.n	9ad2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    9ac2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    9ac4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    9ac8:	fa10 f585 	uxtah	r5, r0, r5
    9acc:	60a5      	str	r5, [r4, #8]
}
    9ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    9ad2:	4620      	mov	r0, r4
}
    9ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    9ad8:	f013 b9a0 	b.w	1ce1c <net_buf_unref>
    9adc:	0002b7b0 	.word	0x0002b7b0
    9ae0:	0002baec 	.word	0x0002baec
    9ae4:	0002b7ed 	.word	0x0002b7ed
    9ae8:	0002bb05 	.word	0x0002bb05
    9aec:	00027780 	.word	0x00027780

00009af0 <bt_recv>:
{
    9af0:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    9af2:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    9af4:	2901      	cmp	r1, #1
{
    9af6:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    9af8:	d04b      	beq.n	9b92 <bt_recv+0xa2>
    9afa:	2903      	cmp	r1, #3
    9afc:	d178      	bne.n	9bf0 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9afe:	8983      	ldrh	r3, [r0, #12]
    9b00:	2b03      	cmp	r3, #3
    9b02:	d80c      	bhi.n	9b1e <bt_recv+0x2e>
    9b04:	4a42      	ldr	r2, [pc, #264]	; (9c10 <bt_recv+0x120>)
    9b06:	4943      	ldr	r1, [pc, #268]	; (9c14 <bt_recv+0x124>)
    9b08:	4843      	ldr	r0, [pc, #268]	; (9c18 <bt_recv+0x128>)
    9b0a:	f240 43ac 	movw	r3, #1196	; 0x4ac
    9b0e:	f017 fbc1 	bl	21294 <printk>
    9b12:	4040      	eors	r0, r0
    9b14:	f380 8811 	msr	BASEPRI, r0
    9b18:	f04f 0003 	mov.w	r0, #3
    9b1c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    9b1e:	2104      	movs	r1, #4
    9b20:	f104 0008 	add.w	r0, r4, #8
    9b24:	f01c f8a4 	bl	25c70 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    9b28:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    9b2a:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    9b2c:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9b2e:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    9b30:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    9b34:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    9b36:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9b38:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    9b3a:	d00d      	beq.n	9b58 <bt_recv+0x68>
    9b3c:	4837      	ldr	r0, [pc, #220]	; (9c1c <bt_recv+0x12c>)
    9b3e:	4b38      	ldr	r3, [pc, #224]	; (9c20 <bt_recv+0x130>)
    9b40:	1a1b      	subs	r3, r3, r0
    9b42:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    9b44:	019b      	lsls	r3, r3, #6
    9b46:	4837      	ldr	r0, [pc, #220]	; (9c24 <bt_recv+0x134>)
    9b48:	f043 0301 	orr.w	r3, r3, #1
    9b4c:	f018 f82a 	bl	21ba4 <log_2>
	net_buf_unref(buf);
    9b50:	4620      	mov	r0, r4
    9b52:	f013 f963 	bl	1ce1c <net_buf_unref>
    9b56:	e01a      	b.n	9b8e <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    9b58:	f001 f994 	bl	ae84 <bt_conn_lookup_handle>
	if (!conn) {
    9b5c:	4605      	mov	r5, r0
    9b5e:	b958      	cbnz	r0, 9b78 <bt_recv+0x88>
    9b60:	4b2e      	ldr	r3, [pc, #184]	; (9c1c <bt_recv+0x12c>)
    9b62:	4a2f      	ldr	r2, [pc, #188]	; (9c20 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    9b64:	8ae1      	ldrh	r1, [r4, #22]
    9b66:	4830      	ldr	r0, [pc, #192]	; (9c28 <bt_recv+0x138>)
    9b68:	1ad2      	subs	r2, r2, r3
    9b6a:	08d2      	lsrs	r2, r2, #3
    9b6c:	0192      	lsls	r2, r2, #6
    9b6e:	f042 0201 	orr.w	r2, r2, #1
    9b72:	f018 f803 	bl	21b7c <log_1>
		net_buf_unref(buf);
    9b76:	e7eb      	b.n	9b50 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    9b78:	f001 fc40 	bl	b3fc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    9b7c:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    9b7e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    9b80:	4621      	mov	r1, r4
    9b82:	4628      	mov	r0, r5
    9b84:	f001 f828 	bl	abd8 <bt_conn_recv>
	bt_conn_unref(conn);
    9b88:	4628      	mov	r0, r5
    9b8a:	f01a fc2e 	bl	243ea <bt_conn_unref>
		return 0;
    9b8e:	2000      	movs	r0, #0
}
    9b90:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9b92:	8983      	ldrh	r3, [r0, #12]
    9b94:	2b01      	cmp	r3, #1
    9b96:	d80c      	bhi.n	9bb2 <bt_recv+0xc2>
    9b98:	4a1d      	ldr	r2, [pc, #116]	; (9c10 <bt_recv+0x120>)
    9b9a:	491e      	ldr	r1, [pc, #120]	; (9c14 <bt_recv+0x124>)
    9b9c:	481e      	ldr	r0, [pc, #120]	; (9c18 <bt_recv+0x128>)
    9b9e:	f241 4305 	movw	r3, #5125	; 0x1405
    9ba2:	f017 fb77 	bl	21294 <printk>
    9ba6:	4040      	eors	r0, r0
    9ba8:	f380 8811 	msr	BASEPRI, r0
    9bac:	f04f 0003 	mov.w	r0, #3
    9bb0:	df02      	svc	2
    9bb2:	2102      	movs	r1, #2
    9bb4:	f104 0008 	add.w	r0, r4, #8
    9bb8:	f01c f85a 	bl	25c70 <net_buf_simple_pull_mem>
    9bbc:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    9bbe:	7800      	ldrb	r0, [r0, #0]
    9bc0:	f01a f952 	bl	23e68 <bt_hci_evt_get_flags>
    9bc4:	0783      	lsls	r3, r0, #30
    9bc6:	d40c      	bmi.n	9be2 <bt_recv+0xf2>
    9bc8:	4a11      	ldr	r2, [pc, #68]	; (9c10 <bt_recv+0x120>)
    9bca:	4918      	ldr	r1, [pc, #96]	; (9c2c <bt_recv+0x13c>)
    9bcc:	4812      	ldr	r0, [pc, #72]	; (9c18 <bt_recv+0x128>)
    9bce:	f241 4309 	movw	r3, #5129	; 0x1409
    9bd2:	f017 fb5f 	bl	21294 <printk>
    9bd6:	4040      	eors	r0, r0
    9bd8:	f380 8811 	msr	BASEPRI, r0
    9bdc:	f04f 0003 	mov.w	r0, #3
    9be0:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    9be2:	4a13      	ldr	r2, [pc, #76]	; (9c30 <bt_recv+0x140>)
    9be4:	7828      	ldrb	r0, [r5, #0]
    9be6:	2306      	movs	r3, #6
    9be8:	4621      	mov	r1, r4
    9bea:	f7fe fd57 	bl	869c <handle_event>
    9bee:	e7af      	b.n	9b50 <bt_recv+0x60>
    9bf0:	4b0a      	ldr	r3, [pc, #40]	; (9c1c <bt_recv+0x12c>)
    9bf2:	4a0b      	ldr	r2, [pc, #44]	; (9c20 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9bf4:	480f      	ldr	r0, [pc, #60]	; (9c34 <bt_recv+0x144>)
    9bf6:	1ad2      	subs	r2, r2, r3
    9bf8:	08d2      	lsrs	r2, r2, #3
    9bfa:	0192      	lsls	r2, r2, #6
    9bfc:	f042 0201 	orr.w	r2, r2, #1
    9c00:	f017 ffbc 	bl	21b7c <log_1>
		net_buf_unref(buf);
    9c04:	4620      	mov	r0, r4
    9c06:	f013 f909 	bl	1ce1c <net_buf_unref>
		return -EINVAL;
    9c0a:	f06f 0015 	mvn.w	r0, #21
    9c0e:	e7bf      	b.n	9b90 <bt_recv+0xa0>
    9c10:	0002b7b0 	.word	0x0002b7b0
    9c14:	0002baec 	.word	0x0002baec
    9c18:	0002b7ed 	.word	0x0002b7ed
    9c1c:	00026fc8 	.word	0x00026fc8
    9c20:	00027080 	.word	0x00027080
    9c24:	0002bb1e 	.word	0x0002bb1e
    9c28:	0002bb42 	.word	0x0002bb42
    9c2c:	0002bb64 	.word	0x0002bb64
    9c30:	00027740 	.word	0x00027740
    9c34:	0002bb92 	.word	0x0002bb92

00009c38 <bt_recv_prio>:
{
    9c38:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9c3a:	7d03      	ldrb	r3, [r0, #20]
    9c3c:	2b01      	cmp	r3, #1
{
    9c3e:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9c40:	d00c      	beq.n	9c5c <bt_recv_prio+0x24>
    9c42:	4a09      	ldr	r2, [pc, #36]	; (9c68 <bt_recv_prio+0x30>)
    9c44:	4909      	ldr	r1, [pc, #36]	; (9c6c <bt_recv_prio+0x34>)
    9c46:	480a      	ldr	r0, [pc, #40]	; (9c70 <bt_recv_prio+0x38>)
    9c48:	f641 03ff 	movw	r3, #6399	; 0x18ff
    9c4c:	f017 fb22 	bl	21294 <printk>
    9c50:	4040      	eors	r0, r0
    9c52:	f380 8811 	msr	BASEPRI, r0
    9c56:	f04f 0003 	mov.w	r0, #3
    9c5a:	df02      	svc	2
	hci_event_prio(buf);
    9c5c:	4620      	mov	r0, r4
    9c5e:	f7ff fef5 	bl	9a4c <hci_event_prio>
}
    9c62:	2000      	movs	r0, #0
    9c64:	bd10      	pop	{r4, pc}
    9c66:	bf00      	nop
    9c68:	0002b7b0 	.word	0x0002b7b0
    9c6c:	0002bba6 	.word	0x0002bba6
    9c70:	0002b7ed 	.word	0x0002b7ed

00009c74 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    9c74:	4a08      	ldr	r2, [pc, #32]	; (9c98 <bt_hci_driver_register+0x24>)
{
    9c76:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    9c78:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
    9c7c:	b930      	cbnz	r0, 9c8c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    9c7e:	68d9      	ldr	r1, [r3, #12]
    9c80:	b139      	cbz	r1, 9c92 <bt_hci_driver_register+0x1e>
    9c82:	6919      	ldr	r1, [r3, #16]
    9c84:	b129      	cbz	r1, 9c92 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    9c86:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	return 0;
    9c8a:	4770      	bx	lr
		return -EALREADY;
    9c8c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    9c90:	4770      	bx	lr
		return -EINVAL;
    9c92:	f06f 0015 	mvn.w	r0, #21
}
    9c96:	4770      	bx	lr
    9c98:	20000000 	.word	0x20000000

00009c9c <bt_finalize_init>:
{
    9c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9ca0:	4d2b      	ldr	r5, [pc, #172]	; (9d50 <bt_finalize_init+0xb4>)
    9ca2:	4c2c      	ldr	r4, [pc, #176]	; (9d54 <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    9ca4:	4e2c      	ldr	r6, [pc, #176]	; (9d58 <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
    9ca6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 9d5c <bt_finalize_init+0xc0>
{
    9caa:	b087      	sub	sp, #28
    9cac:	2102      	movs	r1, #2
    9cae:	f105 0094 	add.w	r0, r5, #148	; 0x94
    9cb2:	f01a f930 	bl	23f16 <atomic_or>
    9cb6:	4b2a      	ldr	r3, [pc, #168]	; (9d60 <bt_finalize_init+0xc4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    9cb8:	492a      	ldr	r1, [pc, #168]	; (9d64 <bt_finalize_init+0xc8>)
    9cba:	1ae4      	subs	r4, r4, r3
    9cbc:	79eb      	ldrb	r3, [r5, #7]
    9cbe:	4628      	mov	r0, r5
    9cc0:	2b01      	cmp	r3, #1
    9cc2:	bf88      	it	hi
    9cc4:	460e      	movhi	r6, r1
    9cc6:	f7fd fe19 	bl	78fc <bt_addr_le_str_real>
    9cca:	f7fb f883 	bl	4dd4 <log_strdup>
    9cce:	08e4      	lsrs	r4, r4, #3
    9cd0:	01a4      	lsls	r4, r4, #6
    9cd2:	f044 0803 	orr.w	r8, r4, #3
    9cd6:	4602      	mov	r2, r0
    9cd8:	4631      	mov	r1, r6
    9cda:	4823      	ldr	r0, [pc, #140]	; (9d68 <bt_finalize_init+0xcc>)
    9cdc:	4643      	mov	r3, r8
    9cde:	f017 ff61 	bl	21ba4 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    9ce2:	462f      	mov	r7, r5
    9ce4:	2601      	movs	r6, #1
    9ce6:	79eb      	ldrb	r3, [r5, #7]
    9ce8:	429e      	cmp	r6, r3
    9cea:	f107 0707 	add.w	r7, r7, #7
    9cee:	db22      	blt.n	9d36 <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    9cf0:	f895 6034 	ldrb.w	r6, [r5, #52]	; 0x34
    9cf4:	4630      	mov	r0, r6
    9cf6:	f7fe fa01 	bl	80fc <ver_str>
    9cfa:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    9cfc:	9304      	str	r3, [sp, #16]
    9cfe:	f044 0403 	orr.w	r4, r4, #3
    9d02:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
    9d04:	9305      	str	r3, [sp, #20]
    9d06:	e9cd 0602 	strd	r0, r6, [sp, #8]
    9d0a:	4623      	mov	r3, r4
    9d0c:	a902      	add	r1, sp, #8
    9d0e:	2204      	movs	r2, #4
    9d10:	4816      	ldr	r0, [pc, #88]	; (9d6c <bt_finalize_init+0xd0>)
    9d12:	f017 ff7c 	bl	21c0e <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    9d16:	f895 6035 	ldrb.w	r6, [r5, #53]	; 0x35
    9d1a:	4630      	mov	r0, r6
    9d1c:	f7fe f9ee 	bl	80fc <ver_str>
    9d20:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    9d22:	f8ad 4000 	strh.w	r4, [sp]
    9d26:	4601      	mov	r1, r0
    9d28:	4632      	mov	r2, r6
    9d2a:	4811      	ldr	r0, [pc, #68]	; (9d70 <bt_finalize_init+0xd4>)
    9d2c:	f017 ff53 	bl	21bd6 <log_3>
}
    9d30:	b007      	add	sp, #28
    9d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    9d36:	4638      	mov	r0, r7
    9d38:	f7fd fde0 	bl	78fc <bt_addr_le_str_real>
    9d3c:	f7fb f84a 	bl	4dd4 <log_strdup>
    9d40:	4631      	mov	r1, r6
    9d42:	4602      	mov	r2, r0
    9d44:	4643      	mov	r3, r8
    9d46:	4648      	mov	r0, r9
    9d48:	f017 ff2c 	bl	21ba4 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    9d4c:	3601      	adds	r6, #1
    9d4e:	e7ca      	b.n	9ce6 <bt_finalize_init+0x4a>
    9d50:	20000000 	.word	0x20000000
    9d54:	00027080 	.word	0x00027080
    9d58:	00028b54 	.word	0x00028b54
    9d5c:	0002bbdc 	.word	0x0002bbdc
    9d60:	00026fc8 	.word	0x00026fc8
    9d64:	0002bbc9 	.word	0x0002bbc9
    9d68:	0002bbcd 	.word	0x0002bbcd
    9d6c:	0002bbed 	.word	0x0002bbed
    9d70:	0002bc2b 	.word	0x0002bc2b

00009d74 <init_work>:
{
    9d74:	b510      	push	{r4, lr}
	err = bt_init();
    9d76:	f7f7 fab3 	bl	12e0 <bt_init>
	if (ready_cb) {
    9d7a:	4b03      	ldr	r3, [pc, #12]	; (9d88 <init_work+0x14>)
    9d7c:	681b      	ldr	r3, [r3, #0]
    9d7e:	b113      	cbz	r3, 9d86 <init_work+0x12>
}
    9d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    9d84:	4718      	bx	r3
}
    9d86:	bd10      	pop	{r4, pc}
    9d88:	2000d6e4 	.word	0x2000d6e4

00009d8c <bt_enable>:
{
    9d8c:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    9d8e:	4d31      	ldr	r5, [pc, #196]	; (9e54 <bt_enable+0xc8>)
    9d90:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
    9d94:	b088      	sub	sp, #32
    9d96:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    9d98:	b973      	cbnz	r3, 9db8 <bt_enable+0x2c>
    9d9a:	4b2f      	ldr	r3, [pc, #188]	; (9e58 <bt_enable+0xcc>)
    9d9c:	492f      	ldr	r1, [pc, #188]	; (9e5c <bt_enable+0xd0>)
		BT_ERR("No HCI driver registered");
    9d9e:	4830      	ldr	r0, [pc, #192]	; (9e60 <bt_enable+0xd4>)
    9da0:	1ac9      	subs	r1, r1, r3
    9da2:	08c9      	lsrs	r1, r1, #3
    9da4:	0189      	lsls	r1, r1, #6
    9da6:	f041 0101 	orr.w	r1, r1, #1
    9daa:	f017 feda 	bl	21b62 <log_0>
		return -ENODEV;
    9dae:	f06f 0412 	mvn.w	r4, #18
}
    9db2:	4620      	mov	r0, r4
    9db4:	b008      	add	sp, #32
    9db6:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9db8:	2100      	movs	r1, #0
    9dba:	f105 0094 	add.w	r0, r5, #148	; 0x94
    9dbe:	f01a f8b9 	bl	23f34 <atomic_test_and_set_bit>
    9dc2:	2800      	cmp	r0, #0
    9dc4:	d143      	bne.n	9e4e <bt_enable+0xc2>
		err = bt_settings_init();
    9dc6:	f7fe f8d7 	bl	7f78 <bt_settings_init>
		if (err) {
    9dca:	4604      	mov	r4, r0
    9dcc:	2800      	cmp	r0, #0
    9dce:	d1f0      	bne.n	9db2 <bt_enable+0x26>
	ready_cb = cb;
    9dd0:	4b24      	ldr	r3, [pc, #144]	; (9e64 <bt_enable+0xd8>)
    9dd2:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9dd4:	2200      	movs	r2, #0
    9dd6:	2300      	movs	r3, #0
    9dd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9ddc:	f06f 0308 	mvn.w	r3, #8
    9de0:	e9cd 0302 	strd	r0, r3, [sp, #8]
    9de4:	e9cd 0000 	strd	r0, r0, [sp]
    9de8:	9004      	str	r0, [sp, #16]
    9dea:	4b1f      	ldr	r3, [pc, #124]	; (9e68 <bt_enable+0xdc>)
    9dec:	491f      	ldr	r1, [pc, #124]	; (9e6c <bt_enable+0xe0>)
    9dee:	4820      	ldr	r0, [pc, #128]	; (9e70 <bt_enable+0xe4>)
    9df0:	f44f 7220 	mov.w	r2, #640	; 0x280
    9df4:	f015 ff86 	bl	1fd04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    9df8:	491e      	ldr	r1, [pc, #120]	; (9e74 <bt_enable+0xe8>)
    9dfa:	481d      	ldr	r0, [pc, #116]	; (9e70 <bt_enable+0xe4>)
    9dfc:	f01c fd04 	bl	26808 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    9e00:	f7fd ff22 	bl	7c48 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    9e04:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    9e08:	68db      	ldr	r3, [r3, #12]
    9e0a:	4798      	blx	r3
	if (err) {
    9e0c:	4604      	mov	r4, r0
    9e0e:	b158      	cbz	r0, 9e28 <bt_enable+0x9c>
    9e10:	4b11      	ldr	r3, [pc, #68]	; (9e58 <bt_enable+0xcc>)
    9e12:	4a12      	ldr	r2, [pc, #72]	; (9e5c <bt_enable+0xd0>)
    9e14:	1ad2      	subs	r2, r2, r3
    9e16:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    9e18:	0192      	lsls	r2, r2, #6
    9e1a:	4601      	mov	r1, r0
    9e1c:	f042 0201 	orr.w	r2, r2, #1
    9e20:	4815      	ldr	r0, [pc, #84]	; (9e78 <bt_enable+0xec>)
    9e22:	f017 feab 	bl	21b7c <log_1>
		return err;
    9e26:	e7c4      	b.n	9db2 <bt_enable+0x26>
	if (!cb) {
    9e28:	b926      	cbnz	r6, 9e34 <bt_enable+0xa8>
}
    9e2a:	b008      	add	sp, #32
    9e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    9e30:	f7f7 ba56 	b.w	12e0 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    9e34:	4601      	mov	r1, r0
    9e36:	f105 0090 	add.w	r0, r5, #144	; 0x90
    9e3a:	f01a f87b 	bl	23f34 <atomic_test_and_set_bit>
    9e3e:	2800      	cmp	r0, #0
    9e40:	d1b7      	bne.n	9db2 <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    9e42:	480e      	ldr	r0, [pc, #56]	; (9e7c <bt_enable+0xf0>)
    9e44:	f105 0188 	add.w	r1, r5, #136	; 0x88
    9e48:	f01c fb86 	bl	26558 <k_queue_append>
    9e4c:	e7b1      	b.n	9db2 <bt_enable+0x26>
		return -EALREADY;
    9e4e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    9e52:	e7ae      	b.n	9db2 <bt_enable+0x26>
    9e54:	20000000 	.word	0x20000000
    9e58:	00026fc8 	.word	0x00026fc8
    9e5c:	00027080 	.word	0x00027080
    9e60:	0002bd77 	.word	0x0002bd77
    9e64:	2000d6e4 	.word	0x2000d6e4
    9e68:	00008895 	.word	0x00008895
    9e6c:	200105e0 	.word	0x200105e0
    9e70:	2000a5a8 	.word	0x2000a5a8
    9e74:	0002bd90 	.word	0x0002bd90
    9e78:	0002bd96 	.word	0x0002bd96
    9e7c:	2000ac68 	.word	0x2000ac68

00009e80 <bt_set_name>:
{
    9e80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9e82:	4605      	mov	r5, r0
	size_t len = strlen(name);
    9e84:	f019 fe3b 	bl	23afe <strlen>
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    9e88:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    9e8a:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    9e8c:	d83a      	bhi.n	9f04 <bt_set_name+0x84>
	if (!strcmp(bt_dev.name, name)) {
    9e8e:	4e1f      	ldr	r6, [pc, #124]	; (9f0c <bt_set_name+0x8c>)
    9e90:	4629      	mov	r1, r5
    9e92:	f506 70b0 	add.w	r0, r6, #352	; 0x160
    9e96:	f019 fe42 	bl	23b1e <strcmp>
    9e9a:	b910      	cbnz	r0, 9ea2 <bt_set_name+0x22>
	return 0;
    9e9c:	2000      	movs	r0, #0
}
    9e9e:	b004      	add	sp, #16
    9ea0:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
    9ea2:	4622      	mov	r2, r4
    9ea4:	4629      	mov	r1, r5
    9ea6:	f506 70b0 	add.w	r0, r6, #352	; 0x160
    9eaa:	f019 fe16 	bl	23ada <strncpy>
	bt_dev.name[len] = '\0';
    9eae:	1933      	adds	r3, r6, r4
    9eb0:	2200      	movs	r2, #0
    9eb2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9eb6:	f106 0028 	add.w	r0, r6, #40	; 0x28
    9eba:	f01a f81d 	bl	23ef8 <atomic_get>
	if (adv && atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME)) {
    9ebe:	0603      	lsls	r3, r0, #24
    9ec0:	d50e      	bpl.n	9ee0 <bt_set_name+0x60>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    9ec2:	2309      	movs	r3, #9
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    9ec4:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    9ec6:	a902      	add	r1, sp, #8
    9ec8:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    9ecc:	f88d 3000 	strb.w	r3, [sp]
    9ed0:	f88d 4001 	strb.w	r4, [sp, #1]
    9ed4:	9501      	str	r5, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    9ed6:	f8cd d008 	str.w	sp, [sp, #8]
    9eda:	9203      	str	r2, [sp, #12]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    9edc:	f7ff f9b0 	bl	9240 <hci_set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    9ee0:	490b      	ldr	r1, [pc, #44]	; (9f10 <bt_set_name+0x90>)
    9ee2:	480c      	ldr	r0, [pc, #48]	; (9f14 <bt_set_name+0x94>)
    9ee4:	4622      	mov	r2, r4
    9ee6:	f7fc f879 	bl	5fdc <settings_save_one>
		if (err) {
    9eea:	2800      	cmp	r0, #0
    9eec:	d0d6      	beq.n	9e9c <bt_set_name+0x1c>
    9eee:	4b0a      	ldr	r3, [pc, #40]	; (9f18 <bt_set_name+0x98>)
    9ef0:	490a      	ldr	r1, [pc, #40]	; (9f1c <bt_set_name+0x9c>)
			BT_WARN("Unable to store name");
    9ef2:	480b      	ldr	r0, [pc, #44]	; (9f20 <bt_set_name+0xa0>)
    9ef4:	1ac9      	subs	r1, r1, r3
    9ef6:	08c9      	lsrs	r1, r1, #3
    9ef8:	0189      	lsls	r1, r1, #6
    9efa:	f041 0102 	orr.w	r1, r1, #2
    9efe:	f017 fe30 	bl	21b62 <log_0>
    9f02:	e7cb      	b.n	9e9c <bt_set_name+0x1c>
		return -ENOMEM;
    9f04:	f06f 000b 	mvn.w	r0, #11
    9f08:	e7c9      	b.n	9e9e <bt_set_name+0x1e>
    9f0a:	bf00      	nop
    9f0c:	20000000 	.word	0x20000000
    9f10:	20000160 	.word	0x20000160
    9f14:	0002bdb2 	.word	0x0002bdb2
    9f18:	00026fc8 	.word	0x00026fc8
    9f1c:	00027080 	.word	0x00027080
    9f20:	0002bdba 	.word	0x0002bdba

00009f24 <bt_get_name>:
}
    9f24:	4800      	ldr	r0, [pc, #0]	; (9f28 <bt_get_name+0x4>)
    9f26:	4770      	bx	lr
    9f28:	20000160 	.word	0x20000160

00009f2c <bt_id_create>:
{
    9f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f2e:	460e      	mov	r6, r1
    9f30:	b087      	sub	sp, #28
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9f32:	4605      	mov	r5, r0
    9f34:	b930      	cbnz	r0, 9f44 <bt_id_create+0x18>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    9f36:	4f2b      	ldr	r7, [pc, #172]	; (9fe4 <bt_id_create+0xb8>)
    9f38:	79fb      	ldrb	r3, [r7, #7]
    9f3a:	2b01      	cmp	r3, #1
    9f3c:	d12a      	bne.n	9f94 <bt_id_create+0x68>
		return -ENOMEM;
    9f3e:	f06f 040b 	mvn.w	r4, #11
    9f42:	e024      	b.n	9f8e <bt_id_create+0x62>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9f44:	2300      	movs	r3, #0
    9f46:	a902      	add	r1, sp, #8
    9f48:	9302      	str	r3, [sp, #8]
    9f4a:	f8cd 300b 	str.w	r3, [sp, #11]
    9f4e:	f019 ffd9 	bl	23f04 <bt_addr_le_cmp>
    9f52:	2800      	cmp	r0, #0
    9f54:	d0ef      	beq.n	9f36 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    9f56:	782b      	ldrb	r3, [r5, #0]
    9f58:	2b01      	cmp	r3, #1
    9f5a:	d104      	bne.n	9f66 <bt_id_create+0x3a>
    9f5c:	79ab      	ldrb	r3, [r5, #6]
    9f5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9f62:	2bc0      	cmp	r3, #192	; 0xc0
    9f64:	d00c      	beq.n	9f80 <bt_id_create+0x54>
    9f66:	4920      	ldr	r1, [pc, #128]	; (9fe8 <bt_id_create+0xbc>)
    9f68:	4b20      	ldr	r3, [pc, #128]	; (9fec <bt_id_create+0xc0>)
			BT_ERR("Only static random identity address supported");
    9f6a:	4821      	ldr	r0, [pc, #132]	; (9ff0 <bt_id_create+0xc4>)
    9f6c:	1ac9      	subs	r1, r1, r3
    9f6e:	08c9      	lsrs	r1, r1, #3
    9f70:	0189      	lsls	r1, r1, #6
    9f72:	f041 0101 	orr.w	r1, r1, #1
    9f76:	f017 fdf4 	bl	21b62 <log_0>
			return -EINVAL;
    9f7a:	f06f 0415 	mvn.w	r4, #21
    9f7e:	e006      	b.n	9f8e <bt_id_create+0x62>
		if (id_find(addr) >= 0) {
    9f80:	4628      	mov	r0, r5
    9f82:	f7fe f8ff 	bl	8184 <id_find>
    9f86:	2800      	cmp	r0, #0
    9f88:	dbd5      	blt.n	9f36 <bt_id_create+0xa>
			return -EALREADY;
    9f8a:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    9f8e:	4620      	mov	r0, r4
    9f90:	b007      	add	sp, #28
    9f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f94:	f107 0094 	add.w	r0, r7, #148	; 0x94
    9f98:	f019 ffae 	bl	23ef8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9f9c:	f010 0001 	ands.w	r0, r0, #1
    9fa0:	d117      	bne.n	9fd2 <bt_id_create+0xa6>
		uint8_t zero_irk[16] = { 0 };
    9fa2:	e9cd 0002 	strd	r0, r0, [sp, #8]
    9fa6:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    9faa:	2d00      	cmp	r5, #0
    9fac:	d0e5      	beq.n	9f7a <bt_id_create+0x4e>
    9fae:	9000      	str	r0, [sp, #0]
    9fb0:	4669      	mov	r1, sp
    9fb2:	f8cd 0003 	str.w	r0, [sp, #3]
    9fb6:	4628      	mov	r0, r5
    9fb8:	f019 ffa4 	bl	23f04 <bt_addr_le_cmp>
    9fbc:	2800      	cmp	r0, #0
    9fbe:	d0dc      	beq.n	9f7a <bt_id_create+0x4e>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    9fc0:	2e00      	cmp	r6, #0
    9fc2:	d0da      	beq.n	9f7a <bt_id_create+0x4e>
		    !(irk && memcmp(irk, zero_irk, 16))) {
    9fc4:	2210      	movs	r2, #16
    9fc6:	a902      	add	r1, sp, #8
    9fc8:	4630      	mov	r0, r6
    9fca:	f019 fdc5 	bl	23b58 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    9fce:	2800      	cmp	r0, #0
    9fd0:	d0d3      	beq.n	9f7a <bt_id_create+0x4e>
	new_id = bt_dev.id_count++;
    9fd2:	79fc      	ldrb	r4, [r7, #7]
	id_create(new_id, addr, irk);
    9fd4:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
    9fd6:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    9fd8:	4629      	mov	r1, r5
    9fda:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    9fdc:	71fb      	strb	r3, [r7, #7]
	id_create(new_id, addr, irk);
    9fde:	f7fe fa8f 	bl	8500 <id_create>
	return new_id;
    9fe2:	e7d4      	b.n	9f8e <bt_id_create+0x62>
    9fe4:	20000000 	.word	0x20000000
    9fe8:	00027080 	.word	0x00027080
    9fec:	00026fc8 	.word	0x00026fc8
    9ff0:	0002bdcf 	.word	0x0002bdcf

00009ff4 <bt_setup_public_id_addr>:
{
    9ff4:	b570      	push	{r4, r5, r6, lr}
    9ff6:	b08c      	sub	sp, #48	; 0x30
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    9ff8:	aa01      	add	r2, sp, #4
    9ffa:	2100      	movs	r1, #0
    9ffc:	f241 0009 	movw	r0, #4105	; 0x1009
    a000:	f7fe fef4 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    a004:	4e3b      	ldr	r6, [pc, #236]	; (a0f4 <bt_setup_public_id_addr+0x100>)
    a006:	4604      	mov	r4, r0
    a008:	b168      	cbz	r0, a026 <bt_setup_public_id_addr+0x32>
    a00a:	493b      	ldr	r1, [pc, #236]	; (a0f8 <bt_setup_public_id_addr+0x104>)
    a00c:	4b3b      	ldr	r3, [pc, #236]	; (a0fc <bt_setup_public_id_addr+0x108>)
		BT_WARN("Failed to read public address");
    a00e:	483c      	ldr	r0, [pc, #240]	; (a100 <bt_setup_public_id_addr+0x10c>)
    a010:	1ac9      	subs	r1, r1, r3
    a012:	08c9      	lsrs	r1, r1, #3
    a014:	0189      	lsls	r1, r1, #6
    a016:	f041 0102 	orr.w	r1, r1, #2
    a01a:	f017 fda2 	bl	21b62 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a01e:	2300      	movs	r3, #0
    a020:	71f3      	strb	r3, [r6, #7]
}
    a022:	b00c      	add	sp, #48	; 0x30
    a024:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    a026:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a028:	689d      	ldr	r5, [r3, #8]
    a02a:	9008      	str	r0, [sp, #32]
    a02c:	3501      	adds	r5, #1
    a02e:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    a032:	2206      	movs	r2, #6
    a034:	a908      	add	r1, sp, #32
    a036:	4628      	mov	r0, r5
    a038:	f019 fd8e 	bl	23b58 <memcmp>
    a03c:	b918      	cbnz	r0, a046 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    a03e:	9801      	ldr	r0, [sp, #4]
    a040:	f012 feec 	bl	1ce1c <net_buf_unref>
    a044:	e7eb      	b.n	a01e <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    a046:	23ff      	movs	r3, #255	; 0xff
    a048:	2206      	movs	r2, #6
    a04a:	a904      	add	r1, sp, #16
    a04c:	4628      	mov	r0, r5
    a04e:	f88d 3010 	strb.w	r3, [sp, #16]
    a052:	f88d 3011 	strb.w	r3, [sp, #17]
    a056:	f88d 3012 	strb.w	r3, [sp, #18]
    a05a:	f88d 3013 	strb.w	r3, [sp, #19]
    a05e:	f88d 3014 	strb.w	r3, [sp, #20]
    a062:	f88d 3015 	strb.w	r3, [sp, #21]
    a066:	f019 fd77 	bl	23b58 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a06a:	2800      	cmp	r0, #0
    a06c:	d0e7      	beq.n	a03e <bt_setup_public_id_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    a06e:	4629      	mov	r1, r5
    a070:	f10d 0009 	add.w	r0, sp, #9
    a074:	f019 ff49 	bl	23f0a <bt_addr_copy>
	net_buf_unref(rsp);
    a078:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    a07a:	f88d 4008 	strb.w	r4, [sp, #8]
	net_buf_unref(rsp);
    a07e:	f012 fecd 	bl	1ce1c <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a082:	2301      	movs	r3, #1
	memset(ir, 0, 16);
    a084:	2210      	movs	r2, #16
    a086:	4621      	mov	r1, r4
    a088:	a808      	add	r0, sp, #32
	bt_dev.id_count = bt_read_public_addr(&addr);
    a08a:	71f3      	strb	r3, [r6, #7]
	memset(ir, 0, 16);
    a08c:	f019 fda0 	bl	23bd0 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
    a090:	f896 3086 	ldrb.w	r3, [r6, #134]	; 0x86
    a094:	079b      	lsls	r3, r3, #30
    a096:	d510      	bpl.n	a0ba <bt_setup_public_id_addr+0xc6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    a098:	aa04      	add	r2, sp, #16
    a09a:	4621      	mov	r1, r4
    a09c:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    a0a0:	f7fe fea4 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    a0a4:	b1c8      	cbz	r0, a0da <bt_setup_public_id_addr+0xe6>
    a0a6:	4914      	ldr	r1, [pc, #80]	; (a0f8 <bt_setup_public_id_addr+0x104>)
    a0a8:	4b14      	ldr	r3, [pc, #80]	; (a0fc <bt_setup_public_id_addr+0x108>)
		BT_WARN("Failed to read identity root");
    a0aa:	4816      	ldr	r0, [pc, #88]	; (a104 <bt_setup_public_id_addr+0x110>)
    a0ac:	1ac9      	subs	r1, r1, r3
    a0ae:	08c9      	lsrs	r1, r1, #3
    a0b0:	0189      	lsls	r1, r1, #6
    a0b2:	f041 0102 	orr.w	r1, r1, #2
    a0b6:	f017 fd54 	bl	21b62 <log_0>
	if (!bt_smp_irk_get(ir, ir_irk)) {
    a0ba:	a904      	add	r1, sp, #16
    a0bc:	a808      	add	r0, sp, #32
    a0be:	f01b fc5b 	bl	25978 <bt_smp_irk_get>
    a0c2:	b1a8      	cbz	r0, a0f0 <bt_setup_public_id_addr+0xfc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a0c4:	4810      	ldr	r0, [pc, #64]	; (a108 <bt_setup_public_id_addr+0x114>)
    a0c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a0ca:	f019 ff24 	bl	23f16 <atomic_or>
	uint8_t *irk = NULL;
    a0ce:	2200      	movs	r2, #0
	id_create(BT_ID_DEFAULT, &addr, irk);
    a0d0:	a902      	add	r1, sp, #8
    a0d2:	2000      	movs	r0, #0
    a0d4:	f7fe fa14 	bl	8500 <id_create>
    a0d8:	e7a3      	b.n	a022 <bt_setup_public_id_addr+0x2e>
	rp = (void *)rsp->data;
    a0da:	9b04      	ldr	r3, [sp, #16]
	memcpy(ir, rp->ir, 16);
    a0dc:	6899      	ldr	r1, [r3, #8]
    a0de:	2210      	movs	r2, #16
    a0e0:	3101      	adds	r1, #1
    a0e2:	a808      	add	r0, sp, #32
    a0e4:	f019 fd49 	bl	23b7a <memcpy>
	net_buf_unref(rsp);
    a0e8:	9804      	ldr	r0, [sp, #16]
    a0ea:	f012 fe97 	bl	1ce1c <net_buf_unref>
    a0ee:	e7e4      	b.n	a0ba <bt_setup_public_id_addr+0xc6>
		irk = ir_irk;
    a0f0:	aa04      	add	r2, sp, #16
    a0f2:	e7ed      	b.n	a0d0 <bt_setup_public_id_addr+0xdc>
    a0f4:	20000000 	.word	0x20000000
    a0f8:	00027080 	.word	0x00027080
    a0fc:	00026fc8 	.word	0x00026fc8
    a100:	0002bdfd 	.word	0x0002bdfd
    a104:	0002be1b 	.word	0x0002be1b
    a108:	20000094 	.word	0x20000094

0000a10c <bt_read_static_addr>:
{
    a10c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a110:	4b25      	ldr	r3, [pc, #148]	; (a1a8 <bt_read_static_addr+0x9c>)
    a112:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    a116:	f014 0401 	ands.w	r4, r4, #1
{
    a11a:	4607      	mov	r7, r0
    a11c:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a11e:	d10a      	bne.n	a136 <bt_read_static_addr+0x2a>
    a120:	4922      	ldr	r1, [pc, #136]	; (a1ac <bt_read_static_addr+0xa0>)
    a122:	4b23      	ldr	r3, [pc, #140]	; (a1b0 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    a124:	4823      	ldr	r0, [pc, #140]	; (a1b4 <bt_read_static_addr+0xa8>)
    a126:	1ac9      	subs	r1, r1, r3
    a128:	08c9      	lsrs	r1, r1, #3
    a12a:	0189      	lsls	r1, r1, #6
    a12c:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    a130:	f017 fd17 	bl	21b62 <log_0>
    a134:	e012      	b.n	a15c <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    a136:	aa01      	add	r2, sp, #4
    a138:	2100      	movs	r1, #0
    a13a:	f64f 4009 	movw	r0, #64521	; 0xfc09
    a13e:	f7fe fe55 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    a142:	4605      	mov	r5, r0
    a144:	b170      	cbz	r0, a164 <bt_read_static_addr+0x58>
    a146:	4b1a      	ldr	r3, [pc, #104]	; (a1b0 <bt_read_static_addr+0xa4>)
    a148:	4918      	ldr	r1, [pc, #96]	; (a1ac <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    a14a:	481b      	ldr	r0, [pc, #108]	; (a1b8 <bt_read_static_addr+0xac>)
    a14c:	1ac9      	subs	r1, r1, r3
    a14e:	08c9      	lsrs	r1, r1, #3
    a150:	0189      	lsls	r1, r1, #6
    a152:	f041 0102 	orr.w	r1, r1, #2
    a156:	f017 fd04 	bl	21b62 <log_0>
		return 0;
    a15a:	2400      	movs	r4, #0
}
    a15c:	4620      	mov	r0, r4
    a15e:	b002      	add	sp, #8
    a160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    a164:	9b01      	ldr	r3, [sp, #4]
    a166:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    a168:	785c      	ldrb	r4, [r3, #1]
    a16a:	42b4      	cmp	r4, r6
    a16c:	bf28      	it	cs
    a16e:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    a170:	f04f 0816 	mov.w	r8, #22
    a174:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    a176:	42a5      	cmp	r5, r4
    a178:	db0d      	blt.n	a196 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    a17a:	9801      	ldr	r0, [sp, #4]
    a17c:	f012 fe4e 	bl	1ce1c <net_buf_unref>
	if (!cnt) {
    a180:	2c00      	cmp	r4, #0
    a182:	d1eb      	bne.n	a15c <bt_read_static_addr+0x50>
    a184:	4909      	ldr	r1, [pc, #36]	; (a1ac <bt_read_static_addr+0xa0>)
    a186:	4b0a      	ldr	r3, [pc, #40]	; (a1b0 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    a188:	480c      	ldr	r0, [pc, #48]	; (a1bc <bt_read_static_addr+0xb0>)
    a18a:	1ac9      	subs	r1, r1, r3
    a18c:	08c9      	lsrs	r1, r1, #3
    a18e:	0189      	lsls	r1, r1, #6
    a190:	f041 0102 	orr.w	r1, r1, #2
    a194:	e7cc      	b.n	a130 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    a196:	fb08 7005 	mla	r0, r8, r5, r7
    a19a:	2216      	movs	r2, #22
    a19c:	4631      	mov	r1, r6
    a19e:	f019 fcec 	bl	23b7a <memcpy>
	for (i = 0; i < cnt; i++) {
    a1a2:	3501      	adds	r5, #1
    a1a4:	e7e7      	b.n	a176 <bt_read_static_addr+0x6a>
    a1a6:	bf00      	nop
    a1a8:	20000000 	.word	0x20000000
    a1ac:	00027080 	.word	0x00027080
    a1b0:	00026fc8 	.word	0x00026fc8
    a1b4:	0002be38 	.word	0x0002be38
    a1b8:	0002be64 	.word	0x0002be64
    a1bc:	0002be84 	.word	0x0002be84

0000a1c0 <bt_setup_random_id_addr>:
{
    a1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!bt_dev.id_count) {
    a1c4:	f8df 808c 	ldr.w	r8, [pc, #140]	; a254 <bt_setup_random_id_addr+0x94>
    a1c8:	f898 4007 	ldrb.w	r4, [r8, #7]
{
    a1cc:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
    a1ce:	bba4      	cbnz	r4, a23a <bt_setup_random_id_addr+0x7a>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    a1d0:	2101      	movs	r1, #1
    a1d2:	a806      	add	r0, sp, #24
    a1d4:	f7ff ff9a 	bl	a10c <bt_read_static_addr>
    a1d8:	f888 0007 	strb.w	r0, [r8, #7]
		if (bt_dev.id_count) {
    a1dc:	b368      	cbz	r0, a23a <bt_setup_random_id_addr+0x7a>
    a1de:	f04f 0916 	mov.w	r9, #22
    a1e2:	f108 0a94 	add.w	sl, r8, #148	; 0x94
    a1e6:	b2e5      	uxtb	r5, r4
				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    a1e8:	fb09 f705 	mul.w	r7, r9, r5
    a1ec:	1db8      	adds	r0, r7, #6
    a1ee:	ab06      	add	r3, sp, #24
    a1f0:	a902      	add	r1, sp, #8
    a1f2:	4418      	add	r0, r3
    a1f4:	f01b fbc0 	bl	25978 <bt_smp_irk_get>
    a1f8:	b1e8      	cbz	r0, a236 <bt_setup_random_id_addr+0x76>
    a1fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a1fe:	4650      	mov	r0, sl
    a200:	f019 fe89 	bl	23f16 <atomic_or>
				uint8_t *irk = NULL;
    a204:	2600      	movs	r6, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    a206:	ab06      	add	r3, sp, #24
    a208:	19d9      	adds	r1, r3, r7
    a20a:	f10d 0001 	add.w	r0, sp, #1
    a20e:	f019 fe7c 	bl	23f0a <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    a212:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    a214:	4632      	mov	r2, r6
    a216:	4669      	mov	r1, sp
    a218:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    a21a:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    a21e:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    a220:	f7fe f96e 	bl	8500 <id_create>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    a224:	f898 2007 	ldrb.w	r2, [r8, #7]
    a228:	b2e3      	uxtb	r3, r4
    a22a:	429a      	cmp	r2, r3
    a22c:	d8db      	bhi.n	a1e6 <bt_setup_random_id_addr+0x26>
}
    a22e:	2000      	movs	r0, #0
    a230:	b00c      	add	sp, #48	; 0x30
    a232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
    a236:	ae02      	add	r6, sp, #8
    a238:	e7e5      	b.n	a206 <bt_setup_random_id_addr+0x46>
    a23a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a23e:	4806      	ldr	r0, [pc, #24]	; (a258 <bt_setup_random_id_addr+0x98>)
    a240:	f019 fe69 	bl	23f16 <atomic_or>
	return bt_id_create(NULL, NULL);
    a244:	2100      	movs	r1, #0
    a246:	4608      	mov	r0, r1
}
    a248:	b00c      	add	sp, #48	; 0x30
    a24a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
    a24e:	f7ff be6d 	b.w	9f2c <bt_id_create>
    a252:	bf00      	nop
    a254:	20000000 	.word	0x20000000
    a258:	20000094 	.word	0x20000094

0000a25c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    a260:	690d      	ldr	r5, [r1, #16]
{
    a262:	b08f      	sub	sp, #60	; 0x3c
    a264:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    a266:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    a268:	ebb5 0b03 	subs.w	fp, r5, r3
{
    a26c:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a26e:	4883      	ldr	r0, [pc, #524]	; (a47c <bt_le_adv_start_legacy+0x220>)
	struct bt_conn *conn = NULL;
    a270:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
    a272:	bf18      	it	ne
    a274:	f04f 0b01 	movne.w	fp, #1
    a278:	f019 fe3e 	bl	23ef8 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a27c:	0787      	lsls	r7, r0, #30
{
    a27e:	460c      	mov	r4, r1
    a280:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a282:	f140 80ed 	bpl.w	a460 <bt_le_adv_start_legacy+0x204>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    a286:	4608      	mov	r0, r1
    a288:	f7fd ff94 	bl	81b4 <valid_adv_param>
    a28c:	4607      	mov	r7, r0
    a28e:	2800      	cmp	r0, #0
    a290:	f000 80e9 	beq.w	a466 <bt_le_adv_start_legacy+0x20a>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    a294:	f106 0810 	add.w	r8, r6, #16
    a298:	4640      	mov	r0, r8
    a29a:	f019 fe2d 	bl	23ef8 <atomic_get>
    a29e:	f3c0 1180 	ubfx	r1, r0, #6, #1
    a2a2:	0640      	lsls	r0, r0, #25
    a2a4:	f100 80e2 	bmi.w	a46c <bt_le_adv_start_legacy+0x210>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    a2a8:	220f      	movs	r2, #15
    a2aa:	a80a      	add	r0, sp, #40	; 0x28
    a2ac:	9105      	str	r1, [sp, #20]
    a2ae:	f019 fc8f 	bl	23bd0 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    a2b2:	68a3      	ldr	r3, [r4, #8]
    a2b4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    a2b8:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    a2ba:	68e3      	ldr	r3, [r4, #12]
    a2bc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    a2c0:	f019 fdfc 	bl	23ebc <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    a2c4:	7832      	ldrb	r2, [r6, #0]
    a2c6:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    a2c8:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
    a2ca:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    a2ce:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    a2d0:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    a2d4:	d004      	beq.n	a2e0 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a2d6:	4869      	ldr	r0, [pc, #420]	; (a47c <bt_le_adv_start_legacy+0x220>)
    a2d8:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    a2dc:	f019 fdfd 	bl	23eda <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    a2e0:	4b67      	ldr	r3, [pc, #412]	; (a480 <bt_le_adv_start_legacy+0x224>)
	adv->id = param->id;
    a2e2:	7820      	ldrb	r0, [r4, #0]
    a2e4:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    a2e6:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    a2ea:	465a      	mov	r2, fp
    a2ec:	6861      	ldr	r1, [r4, #4]
    a2ee:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    a2f2:	f7fe fe59 	bl	8fa8 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    a2f6:	4683      	mov	fp, r0
    a2f8:	2800      	cmp	r0, #0
    a2fa:	d16f      	bne.n	a3dc <bt_le_adv_start_legacy+0x180>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
    a2fc:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    a300:	2d00      	cmp	r5, #0
    a302:	d048      	beq.n	a396 <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    a304:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    a306:	f019 fe03 	bl	23f10 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a30a:	6860      	ldr	r0, [r4, #4]
    a30c:	07c1      	lsls	r1, r0, #31
    a30e:	d54a      	bpl.n	a3a6 <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
    a310:	2d00      	cmp	r5, #0
    a312:	d045      	beq.n	a3a0 <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    a314:	f010 0f10 	tst.w	r0, #16
    a318:	bf14      	ite	ne
    a31a:	2304      	movne	r3, #4
    a31c:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    a31e:	6921      	ldr	r1, [r4, #16]
    a320:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    a324:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    a328:	f019 fdf2 	bl	23f10 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    a32c:	210f      	movs	r1, #15
    a32e:	f242 0006 	movw	r0, #8198	; 0x2006
    a332:	f7fe fbfb 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    a336:	4683      	mov	fp, r0
    a338:	2800      	cmp	r0, #0
    a33a:	f000 809a 	beq.w	a472 <bt_le_adv_start_legacy+0x216>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a33e:	220f      	movs	r2, #15
    a340:	a90a      	add	r1, sp, #40	; 0x28
    a342:	3008      	adds	r0, #8
    a344:	f01b fc73 	bl	25c2e <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    a348:	2200      	movs	r2, #0
    a34a:	4659      	mov	r1, fp
    a34c:	f242 0006 	movw	r0, #8198	; 0x2006
    a350:	f7fe fd4c 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    a354:	2800      	cmp	r0, #0
    a356:	f040 808f 	bne.w	a478 <bt_le_adv_start_legacy+0x21c>
		return err;
	}

	if (!dir_adv) {
    a35a:	b37d      	cbz	r5, a3bc <bt_le_adv_start_legacy+0x160>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a35c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a35e:	07da      	lsls	r2, r3, #31
    a360:	d440      	bmi.n	a3e4 <bt_le_adv_start_legacy+0x188>
	return set_le_adv_enable_legacy(adv, enable);
    a362:	2101      	movs	r1, #1
    a364:	4630      	mov	r0, r6
    a366:	f7fe fe7f 	bl	9068 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    a36a:	4683      	mov	fp, r0
    a36c:	2800      	cmp	r0, #0
    a36e:	d070      	beq.n	a452 <bt_le_adv_start_legacy+0x1f6>
    a370:	4b44      	ldr	r3, [pc, #272]	; (a484 <bt_le_adv_start_legacy+0x228>)
    a372:	4945      	ldr	r1, [pc, #276]	; (a488 <bt_le_adv_start_legacy+0x22c>)
		BT_ERR("Failed to start advertiser");
    a374:	4845      	ldr	r0, [pc, #276]	; (a48c <bt_le_adv_start_legacy+0x230>)
    a376:	1ac9      	subs	r1, r1, r3
    a378:	08c9      	lsrs	r1, r1, #3
    a37a:	0189      	lsls	r1, r1, #6
    a37c:	f041 0101 	orr.w	r1, r1, #1
    a380:	f017 fbef 	bl	21b62 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    a384:	9807      	ldr	r0, [sp, #28]
    a386:	b348      	cbz	r0, a3dc <bt_le_adv_start_legacy+0x180>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a388:	2100      	movs	r1, #0
    a38a:	f000 fd83 	bl	ae94 <bt_conn_set_state>
			bt_conn_unref(conn);
    a38e:	9807      	ldr	r0, [sp, #28]
    a390:	f01a f82b 	bl	243ea <bt_conn_unref>
    a394:	e022      	b.n	a3dc <bt_le_adv_start_legacy+0x180>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    a396:	9508      	str	r5, [sp, #32]
    a398:	a908      	add	r1, sp, #32
    a39a:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    a39e:	e7b2      	b.n	a306 <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
    a3a0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    a3a4:	e7c2      	b.n	a32c <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    a3a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a3a8:	b933      	cbnz	r3, a3b8 <bt_le_adv_start_legacy+0x15c>
    a3aa:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    a3ae:	f1c7 0303 	rsb	r3, r7, #3
    a3b2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    a3b6:	e7b9      	b.n	a32c <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    a3b8:	2701      	movs	r7, #1
    a3ba:	e7f8      	b.n	a3ae <bt_le_adv_start_legacy+0x152>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    a3bc:	6863      	ldr	r3, [r4, #4]
    a3be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    a3c2:	e9cd 7301 	strd	r7, r3, [sp, #4]
    a3c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a3c8:	9300      	str	r3, [sp, #0]
    a3ca:	4652      	mov	r2, sl
    a3cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a3ce:	4649      	mov	r1, r9
    a3d0:	4630      	mov	r0, r6
    a3d2:	f7fe ffa7 	bl	9324 <le_adv_update.constprop.0>
		if (err) {
    a3d6:	4683      	mov	fp, r0
    a3d8:	2800      	cmp	r0, #0
    a3da:	d0bf      	beq.n	a35c <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    a3dc:	4658      	mov	r0, fp
    a3de:	b00f      	add	sp, #60	; 0x3c
    a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    a3e4:	a907      	add	r1, sp, #28
    a3e6:	4630      	mov	r0, r6
    a3e8:	f7fe f8e2 	bl	85b0 <le_adv_start_add_conn>
		if (err) {
    a3ec:	4683      	mov	fp, r0
    a3ee:	2800      	cmp	r0, #0
    a3f0:	d0b7      	beq.n	a362 <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
    a3f2:	f110 0f0c 	cmn.w	r0, #12
    a3f6:	d1f1      	bne.n	a3dc <bt_le_adv_start_legacy+0x180>
    a3f8:	2d00      	cmp	r5, #0
    a3fa:	d1ef      	bne.n	a3dc <bt_le_adv_start_legacy+0x180>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    a3fc:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    a3fe:	079b      	lsls	r3, r3, #30
    a400:	d4ec      	bmi.n	a3dc <bt_le_adv_start_legacy+0x180>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    a402:	6860      	ldr	r0, [r4, #4]
    a404:	f080 0002 	eor.w	r0, r0, #2
    a408:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    a40c:	f00b 0201 	and.w	r2, fp, #1
    a410:	210c      	movs	r1, #12
    a412:	4640      	mov	r0, r8
    a414:	f019 fd99 	bl	23f4a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    a418:	6862      	ldr	r2, [r4, #4]
    a41a:	2107      	movs	r1, #7
    a41c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    a420:	4640      	mov	r0, r8
    a422:	f019 fd92 	bl	23f4a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    a426:	6862      	ldr	r2, [r4, #4]
    a428:	2108      	movs	r1, #8
    a42a:	f002 0201 	and.w	r2, r2, #1
    a42e:	4640      	mov	r0, r8
    a430:	f019 fd8b 	bl	23f4a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    a434:	463a      	mov	r2, r7
    a436:	2109      	movs	r1, #9
    a438:	4640      	mov	r0, r8
    a43a:	f019 fd86 	bl	23f4a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    a43e:	6862      	ldr	r2, [r4, #4]
    a440:	210b      	movs	r1, #11
    a442:	f3c2 0280 	ubfx	r2, r2, #2, #1
    a446:	4640      	mov	r0, r8
    a448:	f019 fd7f 	bl	23f4a <atomic_set_bit_to>
	return 0;
    a44c:	f04f 0b00 	mov.w	fp, #0
    a450:	e7c4      	b.n	a3dc <bt_le_adv_start_legacy+0x180>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    a452:	9807      	ldr	r0, [sp, #28]
    a454:	b108      	cbz	r0, a45a <bt_le_adv_start_legacy+0x1fe>
		bt_conn_unref(conn);
    a456:	f019 ffc8 	bl	243ea <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    a45a:	2d00      	cmp	r5, #0
    a45c:	d1d6      	bne.n	a40c <bt_le_adv_start_legacy+0x1b0>
    a45e:	e7d0      	b.n	a402 <bt_le_adv_start_legacy+0x1a6>
		return -EAGAIN;
    a460:	f06f 0b0a 	mvn.w	fp, #10
    a464:	e7ba      	b.n	a3dc <bt_le_adv_start_legacy+0x180>
		return -EINVAL;
    a466:	f06f 0b15 	mvn.w	fp, #21
    a46a:	e7b7      	b.n	a3dc <bt_le_adv_start_legacy+0x180>
		return -EALREADY;
    a46c:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    a470:	e7b4      	b.n	a3dc <bt_le_adv_start_legacy+0x180>
		return -ENOBUFS;
    a472:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    a476:	e7b1      	b.n	a3dc <bt_le_adv_start_legacy+0x180>
    a478:	4683      	mov	fp, r0
    a47a:	e7af      	b.n	a3dc <bt_le_adv_start_legacy+0x180>
    a47c:	20000094 	.word	0x20000094
    a480:	20000000 	.word	0x20000000
    a484:	00026fc8 	.word	0x00026fc8
    a488:	00027080 	.word	0x00027080
    a48c:	0002bead 	.word	0x0002bead

0000a490 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    a490:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    a492:	9c04      	ldr	r4, [sp, #16]
    a494:	e9cd 3400 	strd	r3, r4, [sp]
    a498:	4613      	mov	r3, r2
    a49a:	460a      	mov	r2, r1
    a49c:	4601      	mov	r1, r0
    a49e:	4802      	ldr	r0, [pc, #8]	; (a4a8 <bt_le_adv_start+0x18>)
    a4a0:	f7ff fedc 	bl	a25c <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    a4a4:	b002      	add	sp, #8
    a4a6:	bd10      	pop	{r4, pc}
    a4a8:	20000018 	.word	0x20000018

0000a4ac <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    a4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a4ae:	4c1f      	ldr	r4, [pc, #124]	; (a52c <bt_le_adv_resume+0x80>)
    a4b0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a4b4:	f019 fd20 	bl	23ef8 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    a4b8:	04c0      	lsls	r0, r0, #19
    a4ba:	d535      	bpl.n	a528 <bt_le_adv_resume+0x7c>
    a4bc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a4c0:	f019 fd1a 	bl	23ef8 <atomic_get>
    a4c4:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a4c6:	f3c0 1580 	ubfx	r5, r0, #6, #1
    a4ca:	d42d      	bmi.n	a528 <bt_le_adv_resume+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a4cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a4d0:	f019 fd12 	bl	23ef8 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    a4d4:	05c2      	lsls	r2, r0, #23
    a4d6:	d527      	bpl.n	a528 <bt_le_adv_resume+0x7c>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    a4d8:	a901      	add	r1, sp, #4
    a4da:	f104 0018 	add.w	r0, r4, #24
    a4de:	f7fe f867 	bl	85b0 <le_adv_start_add_conn>
	if (err) {
    a4e2:	bb08      	cbnz	r0, a528 <bt_le_adv_resume+0x7c>
    a4e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a4e8:	f019 fd06 	bl	23ef8 <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    a4ec:	0503      	lsls	r3, r0, #20
    a4ee:	d402      	bmi.n	a4f6 <bt_le_adv_resume+0x4a>
		return le_set_private_addr(adv->id);
    a4f0:	7e20      	ldrb	r0, [r4, #24]
    a4f2:	f7fe fd23 	bl	8f3c <le_set_private_addr>
	return set_le_adv_enable_legacy(adv, enable);
    a4f6:	480e      	ldr	r0, [pc, #56]	; (a530 <bt_le_adv_resume+0x84>)
    a4f8:	2101      	movs	r1, #1
    a4fa:	f7fe fdb5 	bl	9068 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    a4fe:	b150      	cbz	r0, a516 <bt_le_adv_resume+0x6a>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a500:	9801      	ldr	r0, [sp, #4]
    a502:	2100      	movs	r1, #0
    a504:	f000 fcc6 	bl	ae94 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a508:	480a      	ldr	r0, [pc, #40]	; (a534 <bt_le_adv_resume+0x88>)
    a50a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    a50e:	f019 fce4 	bl	23eda <atomic_and>
	return (old & mask) != 0;
    a512:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    a516:	9801      	ldr	r0, [sp, #4]
    a518:	f019 ff67 	bl	243ea <bt_conn_unref>
	if (persist_paused) {
    a51c:	b125      	cbz	r5, a528 <bt_le_adv_resume+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a51e:	4805      	ldr	r0, [pc, #20]	; (a534 <bt_le_adv_resume+0x88>)
    a520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    a524:	f019 fcf7 	bl	23f16 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    a528:	b003      	add	sp, #12
    a52a:	bd30      	pop	{r4, r5, pc}
    a52c:	20000000 	.word	0x20000000
    a530:	20000018 	.word	0x20000018
    a534:	20000028 	.word	0x20000028

0000a538 <enh_conn_complete>:
{
    a538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a53c:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a540:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    a544:	b086      	sub	sp, #24
    a546:	4604      	mov	r4, r0
    a548:	4876      	ldr	r0, [pc, #472]	; (a724 <enh_conn_complete+0x1ec>)
    a54a:	f019 fcc6 	bl	23eda <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    a54e:	0441      	lsls	r1, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    a550:	fa1f f788 	uxth.w	r7, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    a554:	d504      	bpl.n	a560 <enh_conn_complete+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    a556:	4974      	ldr	r1, [pc, #464]	; (a728 <enh_conn_complete+0x1f0>)
    a558:	2200      	movs	r2, #0
    a55a:	2002      	movs	r0, #2
    a55c:	f005 fac0 	bl	fae0 <bt_keys_foreach>
	if (evt->status) {
    a560:	7825      	ldrb	r5, [r4, #0]
    a562:	b385      	cbz	r5, a5c6 <enh_conn_complete+0x8e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a564:	2d3c      	cmp	r5, #60	; 0x3c
    a566:	d120      	bne.n	a5aa <enh_conn_complete+0x72>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a568:	f06f 0140 	mvn.w	r1, #64	; 0x40
    a56c:	486f      	ldr	r0, [pc, #444]	; (a72c <enh_conn_complete+0x1f4>)
    a56e:	f019 fcb4 	bl	23eda <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    a572:	2000      	movs	r0, #0
    a574:	f7fe f872 	bl	865c <find_pending_connect.part.0>
		if (!conn) {
    a578:	4604      	mov	r4, r0
    a57a:	b960      	cbnz	r0, a596 <enh_conn_complete+0x5e>
    a57c:	4b6c      	ldr	r3, [pc, #432]	; (a730 <enh_conn_complete+0x1f8>)
    a57e:	496d      	ldr	r1, [pc, #436]	; (a734 <enh_conn_complete+0x1fc>)
			BT_ERR("No pending slave connection");
    a580:	486d      	ldr	r0, [pc, #436]	; (a738 <enh_conn_complete+0x200>)
    a582:	1ac9      	subs	r1, r1, r3
    a584:	08c9      	lsrs	r1, r1, #3
    a586:	0189      	lsls	r1, r1, #6
    a588:	f041 0101 	orr.w	r1, r1, #1
}
    a58c:	b006      	add	sp, #24
    a58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
    a592:	f017 bae6 	b.w	21b62 <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    a596:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a598:	2100      	movs	r1, #0
    a59a:	f000 fc7b 	bl	ae94 <bt_conn_set_state>
		bt_conn_unref(conn);
    a59e:	4620      	mov	r0, r4
}
    a5a0:	b006      	add	sp, #24
    a5a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    a5a6:	f019 bf20 	b.w	243ea <bt_conn_unref>
    a5aa:	4b61      	ldr	r3, [pc, #388]	; (a730 <enh_conn_complete+0x1f8>)
    a5ac:	4a61      	ldr	r2, [pc, #388]	; (a734 <enh_conn_complete+0x1fc>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    a5ae:	4863      	ldr	r0, [pc, #396]	; (a73c <enh_conn_complete+0x204>)
    a5b0:	1ad2      	subs	r2, r2, r3
    a5b2:	08d2      	lsrs	r2, r2, #3
    a5b4:	0192      	lsls	r2, r2, #6
    a5b6:	f042 0202 	orr.w	r2, r2, #2
    a5ba:	4629      	mov	r1, r5
}
    a5bc:	b006      	add	sp, #24
    a5be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    a5c2:	f017 badb 	b.w	21b7c <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    a5c6:	7923      	ldrb	r3, [r4, #4]
    a5c8:	3b02      	subs	r3, #2
    a5ca:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    a5cc:	f104 0604 	add.w	r6, r4, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    a5d0:	d839      	bhi.n	a646 <enh_conn_complete+0x10e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    a5d2:	4631      	mov	r1, r6
    a5d4:	a804      	add	r0, sp, #16
    a5d6:	f019 fc9b 	bl	23f10 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    a5da:	f89d 3010 	ldrb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    a5de:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    a5e2:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    a5e4:	f10d 0009 	add.w	r0, sp, #9
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    a5e8:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    a5ec:	f019 fc8d 	bl	23f0a <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    a5f0:	2301      	movs	r3, #1
    a5f2:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    a5f6:	78e3      	ldrb	r3, [r4, #3]
    a5f8:	2b01      	cmp	r3, #1
    a5fa:	d10c      	bne.n	a616 <enh_conn_complete+0xde>
    a5fc:	a804      	add	r0, sp, #16
    a5fe:	f7fe f82d 	bl	865c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a602:	78e3      	ldrb	r3, [r4, #3]
    a604:	2b01      	cmp	r3, #1
    a606:	4605      	mov	r5, r0
    a608:	d104      	bne.n	a614 <enh_conn_complete+0xdc>
    a60a:	4848      	ldr	r0, [pc, #288]	; (a72c <enh_conn_complete+0x1f4>)
    a60c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    a610:	f019 fc63 	bl	23eda <atomic_and>
	if (!conn) {
    a614:	bb55      	cbnz	r5, a66c <enh_conn_complete+0x134>
    a616:	4a46      	ldr	r2, [pc, #280]	; (a730 <enh_conn_complete+0x1f8>)
    a618:	4c46      	ldr	r4, [pc, #280]	; (a734 <enh_conn_complete+0x1fc>)
		BT_ERR("No pending conn for peer %s",
    a61a:	4630      	mov	r0, r6
    a61c:	1aa4      	subs	r4, r4, r2
    a61e:	f7fd f96d 	bl	78fc <bt_addr_le_str_real>
    a622:	f7fa fbd7 	bl	4dd4 <log_strdup>
    a626:	08e4      	lsrs	r4, r4, #3
    a628:	01a4      	lsls	r4, r4, #6
    a62a:	f044 0401 	orr.w	r4, r4, #1
    a62e:	4601      	mov	r1, r0
    a630:	4622      	mov	r2, r4
    a632:	4843      	ldr	r0, [pc, #268]	; (a740 <enh_conn_complete+0x208>)
    a634:	f017 faa2 	bl	21b7c <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    a638:	211f      	movs	r1, #31
    a63a:	4638      	mov	r0, r7
    a63c:	f019 fd30 	bl	240a0 <bt_hci_disconnect>
}
    a640:	b006      	add	sp, #24
    a642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    a646:	78e3      	ldrb	r3, [r4, #3]
    a648:	2b01      	cmp	r3, #1
    a64a:	bf04      	itt	eq
    a64c:	4b3d      	ldreq	r3, [pc, #244]	; (a744 <enh_conn_complete+0x20c>)
    a64e:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    a652:	4631      	mov	r1, r6
    a654:	4628      	mov	r0, r5
    a656:	f019 fd1b 	bl	24090 <bt_lookup_id_addr>
    a65a:	4601      	mov	r1, r0
    a65c:	a804      	add	r0, sp, #16
    a65e:	f019 fc57 	bl	23f10 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    a662:	4631      	mov	r1, r6
    a664:	a802      	add	r0, sp, #8
    a666:	f019 fc53 	bl	23f10 <bt_addr_le_copy>
    a66a:	e7c4      	b.n	a5f6 <enh_conn_complete+0xbe>
	conn->handle = handle;
    a66c:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    a66e:	a904      	add	r1, sp, #16
	conn->handle = handle;
    a670:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    a674:	f019 fc4c 	bl	23f10 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    a678:	7e22      	ldrb	r2, [r4, #24]
    a67a:	7de3      	ldrb	r3, [r4, #23]
    a67c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a680:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    a684:	7ea2      	ldrb	r2, [r4, #26]
    a686:	7e63      	ldrb	r3, [r4, #25]
    a688:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a68c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    a690:	7ee3      	ldrb	r3, [r4, #27]
    a692:	7f22      	ldrb	r2, [r4, #28]
    a694:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a698:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    a69c:	78e7      	ldrb	r7, [r4, #3]
    a69e:	70ef      	strb	r7, [r5, #3]
	conn->err = 0U;
    a6a0:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a6a2:	2f01      	cmp	r7, #1
	conn->err = 0U;
    a6a4:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a6a6:	d125      	bne.n	a6f4 <enh_conn_complete+0x1bc>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a6a8:	4e26      	ldr	r6, [pc, #152]	; (a744 <enh_conn_complete+0x20c>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    a6aa:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    a6ae:	a902      	add	r1, sp, #8
    a6b0:	f019 fc2e 	bl	23f10 <bt_addr_le_copy>
    a6b4:	f106 0028 	add.w	r0, r6, #40	; 0x28
    a6b8:	f019 fc1e 	bl	23ef8 <atomic_get>
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    a6bc:	0502      	lsls	r2, r0, #20
    a6be:	f3c0 23c0 	ubfx	r3, r0, #11, #1
    a6c2:	d425      	bmi.n	a710 <enh_conn_complete+0x1d8>
				if (bt_addr_cmp(&evt->local_rpa,
    a6c4:	340b      	adds	r4, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
    a6c6:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
    a6ca:	2206      	movs	r2, #6
    a6cc:	4669      	mov	r1, sp
    a6ce:	4620      	mov	r0, r4
						BT_ADDR_ANY) != 0) {
    a6d0:	9300      	str	r3, [sp, #0]
    a6d2:	f8ad 3004 	strh.w	r3, [sp, #4]
    a6d6:	f019 fa3f 	bl	23b58 <memcmp>
    a6da:	4603      	mov	r3, r0
					bt_addr_copy(&conn->le.resp_addr.a,
    a6dc:	f105 0097 	add.w	r0, r5, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
    a6e0:	b19b      	cbz	r3, a70a <enh_conn_complete+0x1d2>
					bt_addr_copy(&conn->le.resp_addr.a,
    a6e2:	4621      	mov	r1, r4
					bt_addr_copy(&conn->le.resp_addr.a,
    a6e4:	f019 fc11 	bl	23f0a <bt_addr_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    a6e8:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
    a6ec:	065b      	lsls	r3, r3, #25
    a6ee:	d501      	bpl.n	a6f4 <enh_conn_complete+0x1bc>
			bt_le_adv_resume();
    a6f0:	f7ff fedc 	bl	a4ac <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    a6f4:	2107      	movs	r1, #7
    a6f6:	4628      	mov	r0, r5
    a6f8:	f000 fbcc 	bl	ae94 <bt_conn_set_state>
	conn_auto_initiate(conn);
    a6fc:	4628      	mov	r0, r5
    a6fe:	f7fe fe85 	bl	940c <conn_auto_initiate>
	bt_conn_unref(conn);
    a702:	4628      	mov	r0, r5
    a704:	f019 fe71 	bl	243ea <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a708:	e79a      	b.n	a640 <enh_conn_complete+0x108>
					bt_addr_copy(&conn->le.resp_addr.a,
    a70a:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    a70e:	e7e9      	b.n	a6e4 <enh_conn_complete+0x1ac>
						&bt_dev.id_addr[conn->id]);
    a710:	7a29      	ldrb	r1, [r5, #8]
    a712:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    a716:	4431      	add	r1, r6
    a718:	f105 0096 	add.w	r0, r5, #150	; 0x96
    a71c:	f019 fbf8 	bl	23f10 <bt_addr_le_copy>
    a720:	e7e2      	b.n	a6e8 <enh_conn_complete+0x1b0>
    a722:	bf00      	nop
    a724:	20000094 	.word	0x20000094
    a728:	0002419f 	.word	0x0002419f
    a72c:	20000028 	.word	0x20000028
    a730:	00026fc8 	.word	0x00026fc8
    a734:	00027080 	.word	0x00027080
    a738:	0002bec8 	.word	0x0002bec8
    a73c:	0002bee4 	.word	0x0002bee4
    a740:	0002befd 	.word	0x0002befd
    a744:	20000000 	.word	0x20000000

0000a748 <le_legacy_conn_complete>:
{
    a748:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    a74a:	6881      	ldr	r1, [r0, #8]
{
    a74c:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
    a74e:	780b      	ldrb	r3, [r1, #0]
    a750:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    a754:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    a758:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    a75c:	78cb      	ldrb	r3, [r1, #3]
    a75e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    a762:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    a766:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    a76a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    a76e:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    a772:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    a776:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    a77a:	7c4b      	ldrb	r3, [r1, #17]
    a77c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    a780:	a803      	add	r0, sp, #12
    a782:	3104      	adds	r1, #4
    a784:	f019 fbc4 	bl	23f10 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    a788:	f10d 0013 	add.w	r0, sp, #19
    a78c:	4908      	ldr	r1, [pc, #32]	; (a7b0 <le_legacy_conn_complete+0x68>)
    a78e:	f019 fbbc 	bl	23f0a <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    a792:	2300      	movs	r3, #0
    a794:	4669      	mov	r1, sp
    a796:	f10d 0019 	add.w	r0, sp, #25
    a79a:	9300      	str	r3, [sp, #0]
    a79c:	f8ad 3004 	strh.w	r3, [sp, #4]
    a7a0:	f019 fbb3 	bl	23f0a <bt_addr_copy>
	enh_conn_complete(&enh);
    a7a4:	a802      	add	r0, sp, #8
    a7a6:	f7ff fec7 	bl	a538 <enh_conn_complete>
}
    a7aa:	b00b      	add	sp, #44	; 0x2c
    a7ac:	f85d fb04 	ldr.w	pc, [sp], #4
    a7b0:	2000002d 	.word	0x2000002d

0000a7b4 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    a7b6:	4d21      	ldr	r5, [pc, #132]	; (a83c <bt_pub_key_gen+0x88>)
    a7b8:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
    a7bc:	f003 0306 	and.w	r3, r3, #6
    a7c0:	2b06      	cmp	r3, #6
    a7c2:	d00d      	beq.n	a7e0 <bt_pub_key_gen+0x2c>
    a7c4:	4b1e      	ldr	r3, [pc, #120]	; (a840 <bt_pub_key_gen+0x8c>)
    a7c6:	491f      	ldr	r1, [pc, #124]	; (a844 <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    a7c8:	481f      	ldr	r0, [pc, #124]	; (a848 <bt_pub_key_gen+0x94>)
    a7ca:	1ac9      	subs	r1, r1, r3
    a7cc:	08c9      	lsrs	r1, r1, #3
    a7ce:	0189      	lsls	r1, r1, #6
    a7d0:	f041 0102 	orr.w	r1, r1, #2
    a7d4:	f017 f9c5 	bl	21b62 <log_0>
		return -ENOTSUP;
    a7d8:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    a7dc:	4620      	mov	r0, r4
    a7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    a7e0:	4e1a      	ldr	r6, [pc, #104]	; (a84c <bt_pub_key_gen+0x98>)
    a7e2:	6833      	ldr	r3, [r6, #0]
    a7e4:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    a7e6:	6030      	str	r0, [r6, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a7e8:	2104      	movs	r1, #4
    a7ea:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a7ee:	f019 fba1 	bl	23f34 <atomic_test_and_set_bit>
    a7f2:	4607      	mov	r7, r0
    a7f4:	bb00      	cbnz	r0, a838 <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a7f6:	f06f 0108 	mvn.w	r1, #8
    a7fa:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a7fe:	f019 fb6c 	bl	23eda <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    a802:	463a      	mov	r2, r7
    a804:	4639      	mov	r1, r7
    a806:	f242 0025 	movw	r0, #8229	; 0x2025
    a80a:	f7fe faef 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    a80e:	4604      	mov	r4, r0
    a810:	2800      	cmp	r0, #0
    a812:	d0e3      	beq.n	a7dc <bt_pub_key_gen+0x28>
    a814:	4b0a      	ldr	r3, [pc, #40]	; (a840 <bt_pub_key_gen+0x8c>)
    a816:	490b      	ldr	r1, [pc, #44]	; (a844 <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    a818:	480d      	ldr	r0, [pc, #52]	; (a850 <bt_pub_key_gen+0x9c>)
    a81a:	1ac9      	subs	r1, r1, r3
    a81c:	08c9      	lsrs	r1, r1, #3
    a81e:	0189      	lsls	r1, r1, #6
    a820:	f041 0101 	orr.w	r1, r1, #1
    a824:	f017 f99d 	bl	21b62 <log_0>
    a828:	f06f 0110 	mvn.w	r1, #16
    a82c:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a830:	f019 fb53 	bl	23eda <atomic_and>
		pub_key_cb = NULL;
    a834:	6037      	str	r7, [r6, #0]
		return err;
    a836:	e7d1      	b.n	a7dc <bt_pub_key_gen+0x28>
		return 0;
    a838:	2400      	movs	r4, #0
    a83a:	e7cf      	b.n	a7dc <bt_pub_key_gen+0x28>
    a83c:	20000000 	.word	0x20000000
    a840:	00026fc8 	.word	0x00026fc8
    a844:	00027080 	.word	0x00027080
    a848:	0002bf19 	.word	0x0002bf19
    a84c:	2000d6e0 	.word	0x2000d6e0
    a850:	0002bf38 	.word	0x0002bf38

0000a854 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    a854:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a856:	4804      	ldr	r0, [pc, #16]	; (a868 <bt_pub_key_get+0x14>)
    a858:	f019 fb4e 	bl	23ef8 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
    a85c:	f010 0f08 	tst.w	r0, #8
	}

	return NULL;
}
    a860:	4802      	ldr	r0, [pc, #8]	; (a86c <bt_pub_key_get+0x18>)
    a862:	bf08      	it	eq
    a864:	2000      	moveq	r0, #0
    a866:	bd08      	pop	{r3, pc}
    a868:	20000094 	.word	0x20000094
    a86c:	2000f250 	.word	0x2000f250

0000a870 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
    a872:	4d1c      	ldr	r5, [pc, #112]	; (a8e4 <bt_dh_key_gen+0x74>)
    a874:	682b      	ldr	r3, [r5, #0]
    a876:	428b      	cmp	r3, r1
{
    a878:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    a87a:	d02d      	beq.n	a8d8 <bt_dh_key_gen+0x68>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a87c:	b113      	cbz	r3, a884 <bt_dh_key_gen+0x14>
		return -EBUSY;
    a87e:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    a882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a884:	4818      	ldr	r0, [pc, #96]	; (a8e8 <bt_dh_key_gen+0x78>)
    a886:	f019 fb37 	bl	23ef8 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a88a:	06c2      	lsls	r2, r0, #27
    a88c:	f3c0 1700 	ubfx	r7, r0, #4, #1
    a890:	d4f5      	bmi.n	a87e <bt_dh_key_gen+0xe>
    a892:	4815      	ldr	r0, [pc, #84]	; (a8e8 <bt_dh_key_gen+0x78>)
    a894:	f019 fb30 	bl	23ef8 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a898:	0703      	lsls	r3, r0, #28
    a89a:	d520      	bpl.n	a8de <bt_dh_key_gen+0x6e>
	dh_key_cb = cb;
    a89c:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    a89e:	f242 0026 	movw	r0, #8230	; 0x2026
    a8a2:	2140      	movs	r1, #64	; 0x40
    a8a4:	f7fe f942 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
    a8a8:	4604      	mov	r4, r0
    a8aa:	b918      	cbnz	r0, a8b4 <bt_dh_key_gen+0x44>
		dh_key_cb = NULL;
    a8ac:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    a8ae:	f06f 0036 	mvn.w	r0, #54	; 0x36
    a8b2:	e7e6      	b.n	a882 <bt_dh_key_gen+0x12>
	return net_buf_simple_add(&buf->b, len);
    a8b4:	2140      	movs	r1, #64	; 0x40
    a8b6:	3008      	adds	r0, #8
    a8b8:	f01b f9b3 	bl	25c22 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    a8bc:	2240      	movs	r2, #64	; 0x40
    a8be:	4631      	mov	r1, r6
    a8c0:	f019 f95b 	bl	23b7a <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    a8c4:	463a      	mov	r2, r7
    a8c6:	4621      	mov	r1, r4
    a8c8:	f242 0026 	movw	r0, #8230	; 0x2026
    a8cc:	f7fe fa8e 	bl	8dec <bt_hci_cmd_send_sync>
	if (err) {
    a8d0:	2800      	cmp	r0, #0
    a8d2:	d0d6      	beq.n	a882 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    a8d4:	602f      	str	r7, [r5, #0]
		return err;
    a8d6:	e7d4      	b.n	a882 <bt_dh_key_gen+0x12>
		return -EALREADY;
    a8d8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    a8dc:	e7d1      	b.n	a882 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    a8de:	f06f 0030 	mvn.w	r0, #48	; 0x30
    a8e2:	e7ce      	b.n	a882 <bt_dh_key_gen+0x12>
    a8e4:	2000d6dc 	.word	0x2000d6dc
    a8e8:	20000094 	.word	0x20000094

0000a8ec <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    a8ec:	2300      	movs	r3, #0
	tx->user_data = NULL;
    a8ee:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    a8f2:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    a8f4:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    a8f6:	4801      	ldr	r0, [pc, #4]	; (a8fc <tx_free+0x10>)
    a8f8:	f01b be2e 	b.w	26558 <k_queue_append>
    a8fc:	20009fe8 	.word	0x20009fe8

0000a900 <notify_connected>:
{
    a900:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a902:	4b09      	ldr	r3, [pc, #36]	; (a928 <notify_connected+0x28>)
    a904:	681d      	ldr	r5, [r3, #0]
{
    a906:	4604      	mov	r4, r0
			cb->connected(conn, conn->err);
    a908:	7b21      	ldrb	r1, [r4, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
    a90a:	b92d      	cbnz	r5, a918 <notify_connected+0x18>
	if (!conn->err) {
    a90c:	b951      	cbnz	r1, a924 <notify_connected+0x24>
		bt_gatt_connected(conn);
    a90e:	4620      	mov	r0, r4
}
    a910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    a914:	f003 b8d4 	b.w	dac0 <bt_gatt_connected>
		if (cb->connected) {
    a918:	682b      	ldr	r3, [r5, #0]
    a91a:	b10b      	cbz	r3, a920 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    a91c:	4620      	mov	r0, r4
    a91e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a920:	69ad      	ldr	r5, [r5, #24]
    a922:	e7f1      	b.n	a908 <notify_connected+0x8>
}
    a924:	bd38      	pop	{r3, r4, r5, pc}
    a926:	bf00      	nop
    a928:	2000d6ec 	.word	0x2000d6ec

0000a92c <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    a92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    a930:	694d      	ldr	r5, [r1, #20]
{
    a932:	4604      	mov	r4, r0
    a934:	460e      	mov	r6, r1
    a936:	4691      	mov	r9, r2
    a938:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    a93a:	f04f 33ff 	mov.w	r3, #4294967295
    a93e:	4844      	ldr	r0, [pc, #272]	; (aa50 <send_frag+0x124>)
    a940:	f04f 32ff 	mov.w	r2, #4294967295
    a944:	f015 f96c 	bl	1fc20 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    a948:	7b63      	ldrb	r3, [r4, #13]
    a94a:	2b07      	cmp	r3, #7
    a94c:	d151      	bne.n	a9f2 <send_frag+0xc6>
	__asm__ volatile(
    a94e:	f04f 0320 	mov.w	r3, #32
    a952:	f3ef 8211 	mrs	r2, BASEPRI
    a956:	f383 8811 	msr	BASEPRI, r3
    a95a:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    a95e:	69a3      	ldr	r3, [r4, #24]
    a960:	2d00      	cmp	r5, #0
    a962:	d058      	beq.n	aa16 <send_frag+0xea>
	parent->next = child;
    a964:	2100      	movs	r1, #0
    a966:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    a968:	2b00      	cmp	r3, #0
    a96a:	d151      	bne.n	aa10 <send_frag+0xe4>
	list->head = node;
    a96c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    a970:	f382 8811 	msr	BASEPRI, r2
    a974:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    a978:	2104      	movs	r1, #4
    a97a:	f106 0008 	add.w	r0, r6, #8
    a97e:	f01b f967 	bl	25c50 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a982:	8823      	ldrh	r3, [r4, #0]
    a984:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    a988:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a98c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a98e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a992:	3b04      	subs	r3, #4
    a994:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    a996:	2302      	movs	r3, #2
    a998:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    a99a:	4630      	mov	r0, r6
    a99c:	f019 fc0f 	bl	241be <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    a9a0:	4601      	mov	r1, r0
    a9a2:	2800      	cmp	r0, #0
    a9a4:	d051      	beq.n	aa4a <send_frag+0x11e>
    a9a6:	4b2b      	ldr	r3, [pc, #172]	; (aa54 <send_frag+0x128>)
    a9a8:	4a2b      	ldr	r2, [pc, #172]	; (aa58 <send_frag+0x12c>)
		BT_ERR("Unable to send to driver (err %d)", err);
    a9aa:	482c      	ldr	r0, [pc, #176]	; (aa5c <send_frag+0x130>)
    a9ac:	1ad2      	subs	r2, r2, r3
    a9ae:	08d2      	lsrs	r2, r2, #3
    a9b0:	0192      	lsls	r2, r2, #6
    a9b2:	f042 0201 	orr.w	r2, r2, #1
    a9b6:	f017 f8e1 	bl	21b7c <log_1>
	__asm__ volatile(
    a9ba:	f04f 0320 	mov.w	r3, #32
    a9be:	f3ef 8011 	mrs	r0, BASEPRI
    a9c2:	f383 8811 	msr	BASEPRI, r3
    a9c6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    a9ca:	2d00      	cmp	r5, #0
    a9cc:	d037      	beq.n	aa3e <send_frag+0x112>
	return list->head;
    a9ce:	6963      	ldr	r3, [r4, #20]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a9d0:	2200      	movs	r2, #0
    a9d2:	b153      	cbz	r3, a9ea <send_frag+0xbe>
    a9d4:	429d      	cmp	r5, r3
    a9d6:	d12f      	bne.n	aa38 <send_frag+0x10c>
	return node->next;
    a9d8:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    a9da:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    a9dc:	bb3a      	cbnz	r2, aa2e <send_frag+0x102>
    a9de:	428d      	cmp	r5, r1
	list->head = node;
    a9e0:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    a9e2:	d100      	bne.n	a9e6 <send_frag+0xba>
	list->tail = node;
    a9e4:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    a9e6:	2300      	movs	r3, #0
    a9e8:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    a9ea:	f380 8811 	msr	BASEPRI, r0
    a9ee:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    a9f2:	4817      	ldr	r0, [pc, #92]	; (aa50 <send_frag+0x124>)
    a9f4:	f015 f8ee 	bl	1fbd4 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    a9f8:	b115      	cbz	r5, aa00 <send_frag+0xd4>
		tx_free(tx);
    a9fa:	4628      	mov	r0, r5
    a9fc:	f7ff ff76 	bl	a8ec <tx_free>
	}

	if (always_consume) {
    aa00:	b11f      	cbz	r7, aa0a <send_frag+0xde>
		net_buf_unref(buf);
    aa02:	4630      	mov	r0, r6
    aa04:	f012 fa0a 	bl	1ce1c <net_buf_unref>
	}
	return false;
    aa08:	2700      	movs	r7, #0
}
    aa0a:	4638      	mov	r0, r7
    aa0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aa10:	601d      	str	r5, [r3, #0]
	list->tail = node;
    aa12:	61a5      	str	r5, [r4, #24]
}
    aa14:	e7ac      	b.n	a970 <send_frag+0x44>
		if (tail_tx) {
    aa16:	b133      	cbz	r3, aa26 <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    aa18:	f103 080c 	add.w	r8, r3, #12
    aa1c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    aa1e:	3301      	adds	r3, #1
    aa20:	f8c8 3000 	str.w	r3, [r8]
    aa24:	e7a4      	b.n	a970 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    aa26:	69e3      	ldr	r3, [r4, #28]
    aa28:	f104 081c 	add.w	r8, r4, #28
    aa2c:	e7f7      	b.n	aa1e <send_frag+0xf2>
Z_GENLIST_REMOVE(slist, snode)
    aa2e:	428d      	cmp	r5, r1
	parent->next = child;
    aa30:	6013      	str	r3, [r2, #0]
	list->tail = node;
    aa32:	bf08      	it	eq
    aa34:	61a2      	streq	r2, [r4, #24]
}
    aa36:	e7d6      	b.n	a9e6 <send_frag+0xba>
	return node->next;
    aa38:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aa3a:	681b      	ldr	r3, [r3, #0]
    aa3c:	e7c9      	b.n	a9d2 <send_frag+0xa6>
			(*pending_no_cb)--;
    aa3e:	f8d8 3000 	ldr.w	r3, [r8]
    aa42:	3b01      	subs	r3, #1
    aa44:	f8c8 3000 	str.w	r3, [r8]
    aa48:	e7cf      	b.n	a9ea <send_frag+0xbe>
	return true;
    aa4a:	2701      	movs	r7, #1
    aa4c:	e7dd      	b.n	aa0a <send_frag+0xde>
    aa4e:	bf00      	nop
    aa50:	200000c8 	.word	0x200000c8
    aa54:	00026fc8 	.word	0x00026fc8
    aa58:	00026fd8 	.word	0x00026fd8
    aa5c:	0002b825 	.word	0x0002b825

0000aa60 <bt_conn_get_pkts>:
}
    aa60:	4800      	ldr	r0, [pc, #0]	; (aa64 <bt_conn_get_pkts+0x4>)
    aa62:	4770      	bx	lr
    aa64:	200000c8 	.word	0x200000c8

0000aa68 <notify_le_param_updated>:
{
    aa68:	b570      	push	{r4, r5, r6, lr}
    aa6a:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aa6c:	f3bf 8f5b 	dmb	ish
    aa70:	6863      	ldr	r3, [r4, #4]
    aa72:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    aa76:	059b      	lsls	r3, r3, #22
    aa78:	f100 0004 	add.w	r0, r0, #4
    aa7c:	d511      	bpl.n	aaa2 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    aa7e:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    aa82:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    aa86:	429a      	cmp	r2, r3
    aa88:	d80b      	bhi.n	aaa2 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    aa8a:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    aa8e:	429a      	cmp	r2, r3
    aa90:	d307      	bcc.n	aaa2 <notify_le_param_updated+0x3a>
	    conn->le.latency == conn->le.pending_latency &&
    aa92:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
    aa96:	429a      	cmp	r2, r3
    aa98:	d103      	bne.n	aaa2 <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    aa9a:	f46f 7100 	mvn.w	r1, #512	; 0x200
    aa9e:	f019 fbd3 	bl	24248 <atomic_and>
	for (cb = callback_list; cb; cb = cb->_next) {
    aaa2:	4b08      	ldr	r3, [pc, #32]	; (aac4 <notify_le_param_updated+0x5c>)
    aaa4:	681d      	ldr	r5, [r3, #0]
    aaa6:	b905      	cbnz	r5, aaaa <notify_le_param_updated+0x42>
}
    aaa8:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    aaaa:	68ee      	ldr	r6, [r5, #12]
    aaac:	b13e      	cbz	r6, aabe <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
    aaae:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    aab2:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    aab6:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    aaba:	4620      	mov	r0, r4
    aabc:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    aabe:	69ad      	ldr	r5, [r5, #24]
    aac0:	e7f1      	b.n	aaa6 <notify_le_param_updated+0x3e>
    aac2:	bf00      	nop
    aac4:	2000d6ec 	.word	0x2000d6ec

0000aac8 <le_param_req>:
{
    aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aaca:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    aacc:	4608      	mov	r0, r1
{
    aace:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    aad0:	f019 fb44 	bl	2415c <bt_le_conn_params_valid>
    aad4:	4604      	mov	r4, r0
    aad6:	b910      	cbnz	r0, aade <le_param_req+0x16>
		return false;
    aad8:	2400      	movs	r4, #0
}
    aada:	4620      	mov	r0, r4
    aadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    aade:	4b09      	ldr	r3, [pc, #36]	; (ab04 <le_param_req+0x3c>)
    aae0:	681e      	ldr	r6, [r3, #0]
    aae2:	2e00      	cmp	r6, #0
    aae4:	d0f9      	beq.n	aada <le_param_req+0x12>
		if (!cb->le_param_req) {
    aae6:	68b3      	ldr	r3, [r6, #8]
    aae8:	b90b      	cbnz	r3, aaee <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    aaea:	69b6      	ldr	r6, [r6, #24]
    aaec:	e7f9      	b.n	aae2 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    aaee:	4629      	mov	r1, r5
    aaf0:	4638      	mov	r0, r7
    aaf2:	4798      	blx	r3
    aaf4:	2800      	cmp	r0, #0
    aaf6:	d0ef      	beq.n	aad8 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    aaf8:	4628      	mov	r0, r5
    aafa:	f019 fb2f 	bl	2415c <bt_le_conn_params_valid>
    aafe:	2800      	cmp	r0, #0
    ab00:	d1f3      	bne.n	aaea <le_param_req+0x22>
    ab02:	e7e9      	b.n	aad8 <le_param_req+0x10>
    ab04:	2000d6ec 	.word	0x2000d6ec

0000ab08 <bt_conn_identity_resolved>:
{
    ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    ab0a:	78c3      	ldrb	r3, [r0, #3]
{
    ab0c:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    ab0e:	b93b      	cbnz	r3, ab20 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    ab10:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    ab14:	4b08      	ldr	r3, [pc, #32]	; (ab38 <bt_conn_identity_resolved+0x30>)
    ab16:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ab18:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    ab1c:	b91d      	cbnz	r5, ab26 <bt_conn_identity_resolved+0x1e>
}
    ab1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    ab20:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    ab24:	e7f6      	b.n	ab14 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    ab26:	692b      	ldr	r3, [r5, #16]
    ab28:	b11b      	cbz	r3, ab32 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ab2a:	463a      	mov	r2, r7
    ab2c:	4631      	mov	r1, r6
    ab2e:	4620      	mov	r0, r4
    ab30:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ab32:	69ad      	ldr	r5, [r5, #24]
    ab34:	e7f2      	b.n	ab1c <bt_conn_identity_resolved+0x14>
    ab36:	bf00      	nop
    ab38:	2000d6ec 	.word	0x2000d6ec

0000ab3c <bt_conn_security_changed>:
{
    ab3c:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    ab3e:	7a43      	ldrb	r3, [r0, #9]
    ab40:	7283      	strb	r3, [r0, #10]
{
    ab42:	4604      	mov	r4, r0
    ab44:	4615      	mov	r5, r2
	bt_l2cap_security_changed(conn, hci_err);
    ab46:	f019 fd22 	bl	2458e <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    ab4a:	4b0d      	ldr	r3, [pc, #52]	; (ab80 <bt_conn_security_changed+0x44>)
    ab4c:	681e      	ldr	r6, [r3, #0]
    ab4e:	b96e      	cbnz	r6, ab6c <bt_conn_security_changed+0x30>
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
    ab50:	b9a5      	cbnz	r5, ab7c <bt_conn_security_changed+0x40>
    ab52:	7a63      	ldrb	r3, [r4, #9]
    ab54:	2b01      	cmp	r3, #1
    ab56:	d911      	bls.n	ab7c <bt_conn_security_changed+0x40>
		if (conn->type == BT_CONN_TYPE_LE) {
    ab58:	78a3      	ldrb	r3, [r4, #2]
    ab5a:	2b01      	cmp	r3, #1
    ab5c:	d10e      	bne.n	ab7c <bt_conn_security_changed+0x40>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    ab5e:	7a20      	ldrb	r0, [r4, #8]
    ab60:	f104 0188 	add.w	r1, r4, #136	; 0x88
}
    ab64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    ab68:	f005 b94a 	b.w	fe00 <bt_keys_update_usage>
		if (cb->security_changed) {
    ab6c:	6973      	ldr	r3, [r6, #20]
    ab6e:	b11b      	cbz	r3, ab78 <bt_conn_security_changed+0x3c>
			cb->security_changed(conn, conn->sec_level, err);
    ab70:	7a61      	ldrb	r1, [r4, #9]
    ab72:	462a      	mov	r2, r5
    ab74:	4620      	mov	r0, r4
    ab76:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ab78:	69b6      	ldr	r6, [r6, #24]
    ab7a:	e7e8      	b.n	ab4e <bt_conn_security_changed+0x12>
}
    ab7c:	bd70      	pop	{r4, r5, r6, pc}
    ab7e:	bf00      	nop
    ab80:	2000d6ec 	.word	0x2000d6ec

0000ab84 <bt_conn_cb_register>:
	cb->_next = callback_list;
    ab84:	4b02      	ldr	r3, [pc, #8]	; (ab90 <bt_conn_cb_register+0xc>)
    ab86:	681a      	ldr	r2, [r3, #0]
    ab88:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    ab8a:	6018      	str	r0, [r3, #0]
}
    ab8c:	4770      	bx	lr
    ab8e:	bf00      	nop
    ab90:	2000d6ec 	.word	0x2000d6ec

0000ab94 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    ab94:	b570      	push	{r4, r5, r6, lr}
    ab96:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    ab98:	f100 0634 	add.w	r6, r0, #52	; 0x34
    ab9c:	2200      	movs	r2, #0
    ab9e:	2300      	movs	r3, #0
    aba0:	4630      	mov	r0, r6
    aba2:	f01a ffed 	bl	25b80 <net_buf_get>
    aba6:	4605      	mov	r5, r0
    aba8:	b958      	cbnz	r0, abc2 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    abaa:	4620      	mov	r0, r4
    abac:	f019 fbd9 	bl	24362 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    abb0:	f104 0158 	add.w	r1, r4, #88	; 0x58
    abb4:	4807      	ldr	r0, [pc, #28]	; (abd4 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    abb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    abba:	2200      	movs	r2, #0
    abbc:	2300      	movs	r3, #0
    abbe:	f015 b963 	b.w	1fe88 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    abc2:	6968      	ldr	r0, [r5, #20]
    abc4:	b108      	cbz	r0, abca <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    abc6:	f7ff fe91 	bl	a8ec <tx_free>
		net_buf_unref(buf);
    abca:	4628      	mov	r0, r5
    abcc:	f012 f926 	bl	1ce1c <net_buf_unref>
    abd0:	e7e4      	b.n	ab9c <conn_cleanup+0x8>
    abd2:	bf00      	nop
    abd4:	2000ac68 	.word	0x2000ac68

0000abd8 <bt_conn_recv>:
{
    abd8:	b570      	push	{r4, r5, r6, lr}
    abda:	4616      	mov	r6, r2
    abdc:	4604      	mov	r4, r0
    abde:	460d      	mov	r5, r1
	tx_notify(conn);
    abe0:	f019 fb41 	bl	24266 <tx_notify>
	switch (flags) {
    abe4:	2e01      	cmp	r6, #1
    abe6:	d02b      	beq.n	ac40 <bt_conn_recv+0x68>
    abe8:	2e02      	cmp	r6, #2
    abea:	d158      	bne.n	ac9e <bt_conn_recv+0xc6>
		if (conn->rx) {
    abec:	6923      	ldr	r3, [r4, #16]
    abee:	b163      	cbz	r3, ac0a <bt_conn_recv+0x32>
    abf0:	4b35      	ldr	r3, [pc, #212]	; (acc8 <bt_conn_recv+0xf0>)
    abf2:	4936      	ldr	r1, [pc, #216]	; (accc <bt_conn_recv+0xf4>)
			BT_ERR("Unexpected first L2CAP frame");
    abf4:	4836      	ldr	r0, [pc, #216]	; (acd0 <bt_conn_recv+0xf8>)
    abf6:	1ac9      	subs	r1, r1, r3
    abf8:	08c9      	lsrs	r1, r1, #3
    abfa:	0189      	lsls	r1, r1, #6
    abfc:	f041 0101 	orr.w	r1, r1, #1
    ac00:	f016 ffaf 	bl	21b62 <log_0>
			bt_conn_reset_rx_state(conn);
    ac04:	4620      	mov	r0, r4
    ac06:	f019 fbac 	bl	24362 <bt_conn_reset_rx_state>
		conn->rx = buf;
    ac0a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    ac0c:	6923      	ldr	r3, [r4, #16]
    ac0e:	8999      	ldrh	r1, [r3, #12]
    ac10:	2901      	cmp	r1, #1
    ac12:	d958      	bls.n	acc6 <bt_conn_recv+0xee>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    ac14:	689a      	ldr	r2, [r3, #8]
    ac16:	8812      	ldrh	r2, [r2, #0]
    ac18:	3204      	adds	r2, #4
    ac1a:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    ac1c:	428a      	cmp	r2, r1
    ac1e:	d852      	bhi.n	acc6 <bt_conn_recv+0xee>
	if (conn->rx->len > acl_total_len) {
    ac20:	d249      	bcs.n	acb6 <bt_conn_recv+0xde>
    ac22:	4829      	ldr	r0, [pc, #164]	; (acc8 <bt_conn_recv+0xf0>)
    ac24:	4b29      	ldr	r3, [pc, #164]	; (accc <bt_conn_recv+0xf4>)
    ac26:	1a1b      	subs	r3, r3, r0
    ac28:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    ac2a:	019b      	lsls	r3, r3, #6
    ac2c:	4829      	ldr	r0, [pc, #164]	; (acd4 <bt_conn_recv+0xfc>)
    ac2e:	f043 0301 	orr.w	r3, r3, #1
    ac32:	f016 ffb7 	bl	21ba4 <log_2>
		bt_conn_reset_rx_state(conn);
    ac36:	4620      	mov	r0, r4
}
    ac38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    ac3c:	f019 bb91 	b.w	24362 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    ac40:	6920      	ldr	r0, [r4, #16]
    ac42:	b968      	cbnz	r0, ac60 <bt_conn_recv+0x88>
    ac44:	4921      	ldr	r1, [pc, #132]	; (accc <bt_conn_recv+0xf4>)
    ac46:	4b20      	ldr	r3, [pc, #128]	; (acc8 <bt_conn_recv+0xf0>)
			BT_ERR("Unexpected L2CAP continuation");
    ac48:	4823      	ldr	r0, [pc, #140]	; (acd8 <bt_conn_recv+0x100>)
    ac4a:	1ac9      	subs	r1, r1, r3
    ac4c:	08c9      	lsrs	r1, r1, #3
    ac4e:	0189      	lsls	r1, r1, #6
    ac50:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    ac54:	f016 ff85 	bl	21b62 <log_0>
			bt_conn_reset_rx_state(conn);
    ac58:	4620      	mov	r0, r4
    ac5a:	f019 fb82 	bl	24362 <bt_conn_reset_rx_state>
    ac5e:	e001      	b.n	ac64 <bt_conn_recv+0x8c>
		if (!buf->len) {
    ac60:	89ae      	ldrh	r6, [r5, #12]
    ac62:	b926      	cbnz	r6, ac6e <bt_conn_recv+0x96>
			net_buf_unref(buf);
    ac64:	4628      	mov	r0, r5
}
    ac66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    ac6a:	f012 b8d7 	b.w	1ce1c <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    ac6e:	3008      	adds	r0, #8
    ac70:	f01b f812 	bl	25c98 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    ac74:	4286      	cmp	r6, r0
    ac76:	d908      	bls.n	ac8a <bt_conn_recv+0xb2>
    ac78:	4914      	ldr	r1, [pc, #80]	; (accc <bt_conn_recv+0xf4>)
    ac7a:	4b13      	ldr	r3, [pc, #76]	; (acc8 <bt_conn_recv+0xf0>)
			BT_ERR("Not enough buffer space for L2CAP data");
    ac7c:	4817      	ldr	r0, [pc, #92]	; (acdc <bt_conn_recv+0x104>)
    ac7e:	1ac9      	subs	r1, r1, r3
    ac80:	08c9      	lsrs	r1, r1, #3
    ac82:	0189      	lsls	r1, r1, #6
    ac84:	f041 0101 	orr.w	r1, r1, #1
    ac88:	e7e4      	b.n	ac54 <bt_conn_recv+0x7c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ac8a:	6920      	ldr	r0, [r4, #16]
    ac8c:	89aa      	ldrh	r2, [r5, #12]
    ac8e:	68a9      	ldr	r1, [r5, #8]
    ac90:	3008      	adds	r0, #8
    ac92:	f01a ffcc 	bl	25c2e <net_buf_simple_add_mem>
		net_buf_unref(buf);
    ac96:	4628      	mov	r0, r5
    ac98:	f012 f8c0 	bl	1ce1c <net_buf_unref>
		break;
    ac9c:	e7b6      	b.n	ac0c <bt_conn_recv+0x34>
    ac9e:	4a0a      	ldr	r2, [pc, #40]	; (acc8 <bt_conn_recv+0xf0>)
    aca0:	4b0a      	ldr	r3, [pc, #40]	; (accc <bt_conn_recv+0xf4>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    aca2:	480f      	ldr	r0, [pc, #60]	; (ace0 <bt_conn_recv+0x108>)
    aca4:	1a9b      	subs	r3, r3, r2
    aca6:	08db      	lsrs	r3, r3, #3
    aca8:	019b      	lsls	r3, r3, #6
    acaa:	f043 0201 	orr.w	r2, r3, #1
    acae:	4631      	mov	r1, r6
    acb0:	f016 ff64 	bl	21b7c <log_1>
		bt_conn_reset_rx_state(conn);
    acb4:	e7d0      	b.n	ac58 <bt_conn_recv+0x80>
	conn->rx = NULL;
    acb6:	2200      	movs	r2, #0
    acb8:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    acba:	4620      	mov	r0, r4
    acbc:	4619      	mov	r1, r3
}
    acbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    acc2:	f000 bcff 	b.w	b6c4 <bt_l2cap_recv>
}
    acc6:	bd70      	pop	{r4, r5, r6, pc}
    acc8:	00026fc8 	.word	0x00026fc8
    accc:	00026fd8 	.word	0x00026fd8
    acd0:	0002bf8c 	.word	0x0002bf8c
    acd4:	0002c00c 	.word	0x0002c00c
    acd8:	0002bfa9 	.word	0x0002bfa9
    acdc:	0002bfc7 	.word	0x0002bfc7
    ace0:	0002bfee 	.word	0x0002bfee

0000ace4 <bt_conn_send_cb>:
{
    ace4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ace8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    acea:	7b43      	ldrb	r3, [r0, #13]
    acec:	2b07      	cmp	r3, #7
{
    acee:	4606      	mov	r6, r0
    acf0:	460d      	mov	r5, r1
    acf2:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    acf4:	d00f      	beq.n	ad16 <bt_conn_send_cb+0x32>
    acf6:	4b2a      	ldr	r3, [pc, #168]	; (ada0 <bt_conn_send_cb+0xbc>)
    acf8:	492a      	ldr	r1, [pc, #168]	; (ada4 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    acfa:	482b      	ldr	r0, [pc, #172]	; (ada8 <bt_conn_send_cb+0xc4>)
    acfc:	1ac9      	subs	r1, r1, r3
    acfe:	08c9      	lsrs	r1, r1, #3
    ad00:	0189      	lsls	r1, r1, #6
    ad02:	f041 0101 	orr.w	r1, r1, #1
    ad06:	f016 ff2c 	bl	21b62 <log_0>
		net_buf_unref(buf);
    ad0a:	4628      	mov	r0, r5
    ad0c:	f012 f886 	bl	1ce1c <net_buf_unref>
			return -ENOTCONN;
    ad10:	f06f 0038 	mvn.w	r0, #56	; 0x38
    ad14:	e020      	b.n	ad58 <bt_conn_send_cb+0x74>
	if (cb) {
    ad16:	2a00      	cmp	r2, #0
    ad18:	d040      	beq.n	ad9c <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    ad1a:	f014 ff55 	bl	1fbc8 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    ad1e:	4b23      	ldr	r3, [pc, #140]	; (adac <bt_conn_send_cb+0xc8>)
    ad20:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    ad22:	4823      	ldr	r0, [pc, #140]	; (adb0 <bt_conn_send_cb+0xcc>)
    ad24:	bf07      	ittee	eq
    ad26:	2200      	moveq	r2, #0
    ad28:	2300      	moveq	r3, #0
    ad2a:	f04f 32ff 	movne.w	r2, #4294967295
    ad2e:	f04f 33ff 	movne.w	r3, #4294967295
    ad32:	f014 fb93 	bl	1f45c <z_impl_k_queue_get>
    ad36:	4604      	mov	r4, r0
		if (!tx) {
    ad38:	b980      	cbnz	r0, ad5c <bt_conn_send_cb+0x78>
    ad3a:	4b19      	ldr	r3, [pc, #100]	; (ada0 <bt_conn_send_cb+0xbc>)
    ad3c:	4919      	ldr	r1, [pc, #100]	; (ada4 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    ad3e:	481d      	ldr	r0, [pc, #116]	; (adb4 <bt_conn_send_cb+0xd0>)
    ad40:	1ac9      	subs	r1, r1, r3
    ad42:	08c9      	lsrs	r1, r1, #3
    ad44:	0189      	lsls	r1, r1, #6
    ad46:	f041 0101 	orr.w	r1, r1, #1
    ad4a:	f016 ff0a 	bl	21b62 <log_0>
			net_buf_unref(buf);
    ad4e:	4628      	mov	r0, r5
    ad50:	f012 f864 	bl	1ce1c <net_buf_unref>
			return -ENOBUFS;
    ad54:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    ad5c:	7b73      	ldrb	r3, [r6, #13]
    ad5e:	2b07      	cmp	r3, #7
    ad60:	d010      	beq.n	ad84 <bt_conn_send_cb+0xa0>
    ad62:	4b0f      	ldr	r3, [pc, #60]	; (ada0 <bt_conn_send_cb+0xbc>)
    ad64:	490f      	ldr	r1, [pc, #60]	; (ada4 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    ad66:	4814      	ldr	r0, [pc, #80]	; (adb8 <bt_conn_send_cb+0xd4>)
    ad68:	1ac9      	subs	r1, r1, r3
    ad6a:	08c9      	lsrs	r1, r1, #3
    ad6c:	0189      	lsls	r1, r1, #6
    ad6e:	f041 0102 	orr.w	r1, r1, #2
    ad72:	f016 fef6 	bl	21b62 <log_0>
			net_buf_unref(buf);
    ad76:	4628      	mov	r0, r5
    ad78:	f012 f850 	bl	1ce1c <net_buf_unref>
			tx_free(tx);
    ad7c:	4620      	mov	r0, r4
    ad7e:	f7ff fdb5 	bl	a8ec <tx_free>
    ad82:	e7c5      	b.n	ad10 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    ad84:	2300      	movs	r3, #0
		tx->user_data = user_data;
    ad86:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    ad8a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    ad8c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    ad8e:	f106 0034 	add.w	r0, r6, #52	; 0x34
    ad92:	4629      	mov	r1, r5
    ad94:	f01a ff12 	bl	25bbc <net_buf_put>
	return 0;
    ad98:	2000      	movs	r0, #0
    ad9a:	e7dd      	b.n	ad58 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    ad9c:	614a      	str	r2, [r1, #20]
    ad9e:	e7f6      	b.n	ad8e <bt_conn_send_cb+0xaa>
    ada0:	00026fc8 	.word	0x00026fc8
    ada4:	00026fd8 	.word	0x00026fd8
    ada8:	0002c027 	.word	0x0002c027
    adac:	2000ac80 	.word	0x2000ac80
    adb0:	20009fe8 	.word	0x20009fe8
    adb4:	0002c036 	.word	0x0002c036
    adb8:	0002c054 	.word	0x0002c054

0000adbc <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    adbc:	b570      	push	{r4, r5, r6, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    adbe:	4b17      	ldr	r3, [pc, #92]	; (ae1c <bt_conn_prepare_events+0x60>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    adc0:	4c17      	ldr	r4, [pc, #92]	; (ae20 <bt_conn_prepare_events+0x64>)
    adc2:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    adc4:	2101      	movs	r1, #1
{
    adc6:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    adc8:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    adca:	f01b ff66 	bl	26c9a <k_poll_event_init>
    adce:	f3bf 8f5b 	dmb	ish
    add2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    add6:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    adda:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    adde:	b90b      	cbnz	r3, ade4 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
    ade0:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    ade2:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    ade4:	7b63      	ldrb	r3, [r4, #13]
    ade6:	b953      	cbnz	r3, adfe <bt_conn_prepare_events+0x42>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ade8:	f06f 0140 	mvn.w	r1, #64	; 0x40
    adec:	1d20      	adds	r0, r4, #4
    adee:	f019 fa2b 	bl	24248 <atomic_and>
    adf2:	0643      	lsls	r3, r0, #25
    adf4:	d503      	bpl.n	adfe <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
    adf6:	4620      	mov	r0, r4
    adf8:	f7ff fecc 	bl	ab94 <conn_cleanup>
    adfc:	e7f0      	b.n	ade0 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
    adfe:	7b63      	ldrb	r3, [r4, #13]
    ae00:	2b07      	cmp	r3, #7
    ae02:	d1ed      	bne.n	ade0 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
    ae04:	4b07      	ldr	r3, [pc, #28]	; (ae24 <bt_conn_prepare_events+0x68>)
    ae06:	4630      	mov	r0, r6
    ae08:	2200      	movs	r2, #0
    ae0a:	2104      	movs	r1, #4
    ae0c:	f01b ff45 	bl	26c9a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    ae10:	2301      	movs	r3, #1
    ae12:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    ae16:	2002      	movs	r0, #2
	return ev_count;
    ae18:	e7e3      	b.n	ade2 <bt_conn_prepare_events+0x26>
    ae1a:	bf00      	nop
    ae1c:	200002f4 	.word	0x200002f4
    ae20:	2000a630 	.word	0x2000a630
    ae24:	2000a664 	.word	0x2000a664

0000ae28 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    ae28:	b570      	push	{r4, r5, r6, lr}
    ae2a:	4606      	mov	r6, r0
    ae2c:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    ae2e:	4811      	ldr	r0, [pc, #68]	; (ae74 <bt_conn_add_le+0x4c>)
    ae30:	2101      	movs	r1, #1
    ae32:	f019 fa3e 	bl	242b2 <bt_conn_new>
	if (!conn) {
    ae36:	4604      	mov	r4, r0
    ae38:	b1c8      	cbz	r0, ae6e <bt_conn_add_le+0x46>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ae3a:	2230      	movs	r2, #48	; 0x30
    ae3c:	2100      	movs	r1, #0
    ae3e:	3058      	adds	r0, #88	; 0x58
    ae40:	f018 fec6 	bl	23bd0 <memset>
    ae44:	4b0c      	ldr	r3, [pc, #48]	; (ae78 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ae46:	4a0d      	ldr	r2, [pc, #52]	; (ae7c <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    ae48:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    ae4a:	2300      	movs	r3, #0
    ae4c:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    ae50:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    ae52:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
    ae54:	2207      	movs	r2, #7
    ae56:	4629      	mov	r1, r5
    ae58:	f104 0088 	add.w	r0, r4, #136	; 0x88
    ae5c:	f018 fe8d 	bl	23b7a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    ae60:	2301      	movs	r3, #1
    ae62:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    ae64:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    ae66:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    ae68:	4b05      	ldr	r3, [pc, #20]	; (ae80 <bt_conn_add_le+0x58>)
    ae6a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    ae6e:	4620      	mov	r0, r4
    ae70:	bd70      	pop	{r4, r5, r6, pc}
    ae72:	bf00      	nop
    ae74:	2000a630 	.word	0x2000a630
    ae78:	0000b19d 	.word	0x0000b19d
    ae7c:	000242ad 	.word	0x000242ad
    ae80:	00280018 	.word	0x00280018

0000ae84 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    ae84:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    ae86:	2101      	movs	r1, #1
    ae88:	4801      	ldr	r0, [pc, #4]	; (ae90 <bt_conn_lookup_handle+0xc>)
    ae8a:	f019 bac5 	b.w	24418 <conn_lookup_handle>
    ae8e:	bf00      	nop
    ae90:	2000a630 	.word	0x2000a630

0000ae94 <bt_conn_set_state>:
{
    ae94:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    ae96:	7b46      	ldrb	r6, [r0, #13]
    ae98:	428e      	cmp	r6, r1
{
    ae9a:	4604      	mov	r4, r0
    ae9c:	460d      	mov	r5, r1
	if (conn->state == state) {
    ae9e:	d112      	bne.n	aec6 <bt_conn_set_state+0x32>
    aea0:	4b68      	ldr	r3, [pc, #416]	; (b044 <bt_conn_set_state+0x1b0>)
    aea2:	4a69      	ldr	r2, [pc, #420]	; (b048 <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
    aea4:	4869      	ldr	r0, [pc, #420]	; (b04c <bt_conn_set_state+0x1b8>)
    aea6:	2e08      	cmp	r6, #8
    aea8:	eba2 0203 	sub.w	r2, r2, r3
    aeac:	bf96      	itet	ls
    aeae:	4b68      	ldrls	r3, [pc, #416]	; (b050 <bt_conn_set_state+0x1bc>)
    aeb0:	4968      	ldrhi	r1, [pc, #416]	; (b054 <bt_conn_set_state+0x1c0>)
    aeb2:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    aeb6:	08d2      	lsrs	r2, r2, #3
    aeb8:	0192      	lsls	r2, r2, #6
    aeba:	f042 0202 	orr.w	r2, r2, #2
}
    aebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    aec2:	f016 be5b 	b.w	21b7c <log_1>
	conn->state = state;
    aec6:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    aec8:	b90e      	cbnz	r6, aece <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
    aeca:	f019 fa73 	bl	243b4 <bt_conn_ref>
	switch (conn->state) {
    aece:	7b63      	ldrb	r3, [r4, #13]
    aed0:	2b08      	cmp	r3, #8
    aed2:	f200 80ac 	bhi.w	b02e <bt_conn_set_state+0x19a>
    aed6:	e8df f003 	tbb	[pc, r3]
    aeda:	053e      	.short	0x053e
    aedc:	b4b4b4b4 	.word	0xb4b4b4b4
    aee0:	1cb4      	.short	0x1cb4
    aee2:	b4          	.byte	0xb4
    aee3:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    aee4:	4d5c      	ldr	r5, [pc, #368]	; (b058 <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
    aee6:	2600      	movs	r6, #0
	__asm__ volatile(
    aee8:	f04f 0320 	mov.w	r3, #32
    aeec:	f3ef 8211 	mrs	r2, BASEPRI
    aef0:	f383 8811 	msr	BASEPRI, r3
    aef4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    aef8:	69e3      	ldr	r3, [r4, #28]
    aefa:	2b00      	cmp	r3, #0
    aefc:	d078      	beq.n	aff0 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
    aefe:	3b01      	subs	r3, #1
    af00:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    af02:	f382 8811 	msr	BASEPRI, r2
    af06:	f3bf 8f6f 	isb	sy
    af0a:	4628      	mov	r0, r5
    af0c:	f014 fe62 	bl	1fbd4 <z_impl_k_sem_give>
}
    af10:	e7ea      	b.n	aee8 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
    af12:	78a3      	ldrb	r3, [r4, #2]
    af14:	2b04      	cmp	r3, #4
    af16:	f000 8094 	beq.w	b042 <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
    af1a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    af1e:	f01b fb0f 	bl	26540 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    af22:	2100      	movs	r1, #0
    af24:	484d      	ldr	r0, [pc, #308]	; (b05c <bt_conn_set_state+0x1c8>)
    af26:	f015 fa23 	bl	20370 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    af2a:	2300      	movs	r3, #0
	list->tail = NULL;
    af2c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
    af30:	4620      	mov	r0, r4
    af32:	f000 faf7 	bl	b524 <bt_l2cap_connected>
		notify_connected(conn);
    af36:	4620      	mov	r0, r4
    af38:	f7ff fce2 	bl	a900 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    af3c:	78e3      	ldrb	r3, [r4, #3]
    af3e:	2b01      	cmp	r3, #1
    af40:	d17f      	bne.n	b042 <bt_conn_set_state+0x1ae>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    af42:	f104 0158 	add.w	r1, r4, #88	; 0x58
    af46:	4846      	ldr	r0, [pc, #280]	; (b060 <bt_conn_set_state+0x1cc>)
}
    af48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    af4c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    af50:	2300      	movs	r3, #0
    af52:	f014 bf99 	b.w	1fe88 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    af56:	78a3      	ldrb	r3, [r4, #2]
    af58:	2b04      	cmp	r3, #4
    af5a:	d104      	bne.n	af66 <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
    af5c:	4620      	mov	r0, r4
}
    af5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    af62:	f019 ba42 	b.w	243ea <bt_conn_unref>
		switch (old_state) {
    af66:	2e08      	cmp	r6, #8
    af68:	d86b      	bhi.n	b042 <bt_conn_set_state+0x1ae>
    af6a:	a301      	add	r3, pc, #4	; (adr r3, af70 <bt_conn_set_state+0xdc>)
    af6c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    af70:	0000afdd 	.word	0x0000afdd
    af74:	0000af95 	.word	0x0000af95
    af78:	0000afcf 	.word	0x0000afcf
    af7c:	0000af5d 	.word	0x0000af5d
    af80:	0000af5d 	.word	0x0000af5d
    af84:	0000afcf 	.word	0x0000afcf
    af88:	0000afcf 	.word	0x0000afcf
    af8c:	0000afdd 	.word	0x0000afdd
    af90:	0000afdd 	.word	0x0000afdd
			tx_notify(conn);
    af94:	4620      	mov	r0, r4
    af96:	f019 f966 	bl	24266 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    af9a:	78a3      	ldrb	r3, [r4, #2]
    af9c:	2b01      	cmp	r3, #1
    af9e:	d103      	bne.n	afa8 <bt_conn_set_state+0x114>
				k_delayed_work_cancel(&conn->deferred_work);
    afa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    afa4:	f01b fc98 	bl	268d8 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    afa8:	f3bf 8f5b 	dmb	ish
    afac:	3404      	adds	r4, #4
    afae:	e854 3f00 	ldrex	r3, [r4]
    afb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    afb6:	e844 3200 	strex	r2, r3, [r4]
    afba:	2a00      	cmp	r2, #0
    afbc:	d1f7      	bne.n	afae <bt_conn_set_state+0x11a>
    afbe:	f3bf 8f5b 	dmb	ish
    afc2:	4826      	ldr	r0, [pc, #152]	; (b05c <bt_conn_set_state+0x1c8>)
}
    afc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    afc8:	2100      	movs	r1, #0
    afca:	f015 b9d1 	b.w	20370 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    afce:	7b23      	ldrb	r3, [r4, #12]
    afd0:	2b00      	cmp	r3, #0
    afd2:	d0c3      	beq.n	af5c <bt_conn_set_state+0xc8>
				notify_connected(conn);
    afd4:	4620      	mov	r0, r4
    afd6:	f7ff fc93 	bl	a900 <notify_connected>
    afda:	e7bf      	b.n	af5c <bt_conn_set_state+0xc8>
    afdc:	4a1a      	ldr	r2, [pc, #104]	; (b048 <bt_conn_set_state+0x1b4>)
    afde:	4b19      	ldr	r3, [pc, #100]	; (b044 <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
    afe0:	4820      	ldr	r0, [pc, #128]	; (b064 <bt_conn_set_state+0x1d0>)
    afe2:	1ad2      	subs	r2, r2, r3
    afe4:	08d2      	lsrs	r2, r2, #3
    afe6:	0192      	lsls	r2, r2, #6
    afe8:	f042 0202 	orr.w	r2, r2, #2
    afec:	4629      	mov	r1, r5
    afee:	e766      	b.n	aebe <bt_conn_set_state+0x2a>
	return list->head;
    aff0:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    aff2:	b128      	cbz	r0, b000 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    aff4:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    aff6:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    aff8:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    affa:	4288      	cmp	r0, r1
	list->tail = node;
    affc:	bf08      	it	eq
    affe:	61a3      	streq	r3, [r4, #24]
    b000:	f382 8811 	msr	BASEPRI, r2
    b004:	f3bf 8f6f 	isb	sy
		if (!node) {
    b008:	b1d8      	cbz	r0, b042 <bt_conn_set_state+0x1ae>
	__asm__ volatile(
    b00a:	f04f 0220 	mov.w	r2, #32
    b00e:	f3ef 8311 	mrs	r3, BASEPRI
    b012:	f382 8811 	msr	BASEPRI, r2
    b016:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    b01a:	68c2      	ldr	r2, [r0, #12]
    b01c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    b01e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    b020:	f383 8811 	msr	BASEPRI, r3
    b024:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    b028:	f7ff fc60 	bl	a8ec <tx_free>
    b02c:	e76d      	b.n	af0a <bt_conn_set_state+0x76>
    b02e:	4a06      	ldr	r2, [pc, #24]	; (b048 <bt_conn_set_state+0x1b4>)
    b030:	4b04      	ldr	r3, [pc, #16]	; (b044 <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
    b032:	480d      	ldr	r0, [pc, #52]	; (b068 <bt_conn_set_state+0x1d4>)
    b034:	1ad2      	subs	r2, r2, r3
    b036:	08d2      	lsrs	r2, r2, #3
    b038:	0192      	lsls	r2, r2, #6
    b03a:	f042 0202 	orr.w	r2, r2, #2
    b03e:	4629      	mov	r1, r5
    b040:	e73d      	b.n	aebe <bt_conn_set_state+0x2a>
}
    b042:	bd70      	pop	{r4, r5, r6, pc}
    b044:	00026fc8 	.word	0x00026fc8
    b048:	00026fd8 	.word	0x00026fd8
    b04c:	0002c084 	.word	0x0002c084
    b050:	000277b8 	.word	0x000277b8
    b054:	0002c07a 	.word	0x0002c07a
    b058:	200000c8 	.word	0x200000c8
    b05c:	200002f4 	.word	0x200002f4
    b060:	2000ac68 	.word	0x2000ac68
    b064:	0002c095 	.word	0x0002c095
    b068:	0002c0ac 	.word	0x0002c0ac

0000b06c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    b06c:	b570      	push	{r4, r5, r6, lr}
    b06e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b070:	480c      	ldr	r0, [pc, #48]	; (b0a4 <bt_conn_lookup_addr_le+0x38>)
{
    b072:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b074:	f019 f99e 	bl	243b4 <bt_conn_ref>

		if (!conn) {
    b078:	4604      	mov	r4, r0
    b07a:	b128      	cbz	r0, b088 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b07c:	7883      	ldrb	r3, [r0, #2]
    b07e:	2b01      	cmp	r3, #1
    b080:	d004      	beq.n	b08c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    b082:	f019 f9b2 	bl	243ea <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    b086:	2400      	movs	r4, #0
}
    b088:	4620      	mov	r0, r4
    b08a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    b08c:	4629      	mov	r1, r5
    b08e:	4632      	mov	r2, r6
    b090:	f019 f970 	bl	24374 <bt_conn_is_peer_addr_le>
    b094:	4605      	mov	r5, r0
    b096:	2800      	cmp	r0, #0
    b098:	d1f6      	bne.n	b088 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    b09a:	4620      	mov	r0, r4
    b09c:	f019 f9a5 	bl	243ea <bt_conn_unref>
	return NULL;
    b0a0:	462c      	mov	r4, r5
			continue;
    b0a2:	e7f1      	b.n	b088 <bt_conn_lookup_addr_le+0x1c>
    b0a4:	2000a630 	.word	0x2000a630

0000b0a8 <bt_conn_exists_le>:
{
    b0a8:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    b0aa:	f7ff ffdf 	bl	b06c <bt_conn_lookup_addr_le>
	if (conn) {
    b0ae:	4604      	mov	r4, r0
    b0b0:	b1a0      	cbz	r0, b0dc <bt_conn_exists_le+0x34>
    b0b2:	4b0b      	ldr	r3, [pc, #44]	; (b0e0 <bt_conn_exists_le+0x38>)
    b0b4:	4a0b      	ldr	r2, [pc, #44]	; (b0e4 <bt_conn_exists_le+0x3c>)
    b0b6:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    b0b8:	7b43      	ldrb	r3, [r0, #13]
    b0ba:	480b      	ldr	r0, [pc, #44]	; (b0e8 <bt_conn_exists_le+0x40>)
    b0bc:	2b08      	cmp	r3, #8
    b0be:	bf96      	itet	ls
    b0c0:	490a      	ldrls	r1, [pc, #40]	; (b0ec <bt_conn_exists_le+0x44>)
    b0c2:	490b      	ldrhi	r1, [pc, #44]	; (b0f0 <bt_conn_exists_le+0x48>)
    b0c4:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    b0c8:	08d2      	lsrs	r2, r2, #3
    b0ca:	0192      	lsls	r2, r2, #6
    b0cc:	f042 0202 	orr.w	r2, r2, #2
    b0d0:	f016 fd54 	bl	21b7c <log_1>
		bt_conn_unref(conn);
    b0d4:	4620      	mov	r0, r4
    b0d6:	f019 f988 	bl	243ea <bt_conn_unref>
		return true;
    b0da:	2001      	movs	r0, #1
}
    b0dc:	bd10      	pop	{r4, pc}
    b0de:	bf00      	nop
    b0e0:	00026fc8 	.word	0x00026fc8
    b0e4:	00026fd8 	.word	0x00026fd8
    b0e8:	0002c0c8 	.word	0x0002c0c8
    b0ec:	000277b8 	.word	0x000277b8
    b0f0:	0002c07a 	.word	0x0002c07a

0000b0f4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    b0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0f6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b0f8:	480f      	ldr	r0, [pc, #60]	; (b138 <bt_conn_lookup_state_le+0x44>)
{
    b0fa:	460e      	mov	r6, r1
    b0fc:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b0fe:	f019 f959 	bl	243b4 <bt_conn_ref>

		if (!conn) {
    b102:	4604      	mov	r4, r0
    b104:	b1b0      	cbz	r0, b134 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b106:	7883      	ldrb	r3, [r0, #2]
    b108:	2b01      	cmp	r3, #1
    b10a:	d003      	beq.n	b114 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    b10c:	f019 f952 	bl	243b4 <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    b110:	2400      	movs	r4, #0
			continue;
    b112:	e00f      	b.n	b134 <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    b114:	b146      	cbz	r6, b128 <bt_conn_lookup_state_le+0x34>
    b116:	4632      	mov	r2, r6
    b118:	4629      	mov	r1, r5
    b11a:	f019 f92b 	bl	24374 <bt_conn_is_peer_addr_le>
    b11e:	b918      	cbnz	r0, b128 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    b120:	4620      	mov	r0, r4
    b122:	f019 f962 	bl	243ea <bt_conn_unref>
    b126:	e7f3      	b.n	b110 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    b128:	7b63      	ldrb	r3, [r4, #13]
    b12a:	42bb      	cmp	r3, r7
    b12c:	d1f8      	bne.n	b120 <bt_conn_lookup_state_le+0x2c>
    b12e:	7a23      	ldrb	r3, [r4, #8]
    b130:	42ab      	cmp	r3, r5
    b132:	d1f5      	bne.n	b120 <bt_conn_lookup_state_le+0x2c>
}
    b134:	4620      	mov	r0, r4
    b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b138:	2000a630 	.word	0x2000a630

0000b13c <send_conn_le_param_update>:
{
    b13c:	b538      	push	{r3, r4, r5, lr}
    b13e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    b140:	4608      	mov	r0, r1
{
    b142:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    b144:	f019 f80a 	bl	2415c <bt_le_conn_params_valid>
    b148:	b318      	cbz	r0, b192 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b14a:	4b13      	ldr	r3, [pc, #76]	; (b198 <send_conn_le_param_update+0x5c>)
    b14c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    b150:	0799      	lsls	r1, r3, #30
    b152:	d407      	bmi.n	b164 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    b154:	78e3      	ldrb	r3, [r4, #3]
    b156:	b183      	cbz	r3, b17a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    b158:	4629      	mov	r1, r5
    b15a:	4620      	mov	r0, r4
}
    b15c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    b160:	f000 bae8 	b.w	b734 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b164:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b168:	079a      	lsls	r2, r3, #30
    b16a:	d5f3      	bpl.n	b154 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b16c:	f3bf 8f5b 	dmb	ish
    b170:	6863      	ldr	r3, [r4, #4]
    b172:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    b176:	055b      	lsls	r3, r3, #21
    b178:	d4ec      	bmi.n	b154 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    b17a:	4629      	mov	r1, r5
    b17c:	4620      	mov	r0, r4
    b17e:	f019 f990 	bl	244a2 <bt_conn_le_conn_update>
		if (rc == 0) {
    b182:	b928      	cbnz	r0, b190 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    b184:	88ab      	ldrh	r3, [r5, #4]
    b186:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    b18a:	88eb      	ldrh	r3, [r5, #6]
    b18c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    b190:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b192:	f06f 0015 	mvn.w	r0, #21
    b196:	e7fb      	b.n	b190 <send_conn_le_param_update+0x54>
    b198:	20000000 	.word	0x20000000

0000b19c <deferred_work>:
{
    b19c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    b19e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    b1a2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    b1a4:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    b1a8:	b99b      	cbnz	r3, b1d2 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
    b1aa:	4628      	mov	r0, r5
    b1ac:	f019 f9d9 	bl	24562 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    b1b0:	4b22      	ldr	r3, [pc, #136]	; (b23c <deferred_work+0xa0>)
    b1b2:	681e      	ldr	r6, [r3, #0]
    b1b4:	b92e      	cbnz	r6, b1c2 <deferred_work+0x26>
		bt_conn_unref(conn);
    b1b6:	4628      	mov	r0, r5
}
    b1b8:	b002      	add	sp, #8
    b1ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    b1be:	f019 b914 	b.w	243ea <bt_conn_unref>
		if (cb->disconnected) {
    b1c2:	6873      	ldr	r3, [r6, #4]
    b1c4:	b11b      	cbz	r3, b1ce <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
    b1c6:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    b1ca:	4628      	mov	r0, r5
    b1cc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b1ce:	69b6      	ldr	r6, [r6, #24]
    b1d0:	e7f0      	b.n	b1b4 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    b1d2:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    b1d6:	2b01      	cmp	r3, #1
    b1d8:	d128      	bne.n	b22c <deferred_work+0x90>
	if (atomic_test_and_clear_bit(conn->flags,
    b1da:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b1de:	f46f 7100 	mvn.w	r1, #512	; 0x200
    b1e2:	4630      	mov	r0, r6
    b1e4:	f019 f830 	bl	24248 <atomic_and>
    b1e8:	0583      	lsls	r3, r0, #22
    b1ea:	d521      	bpl.n	b230 <deferred_work+0x94>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    b1ec:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    b1f0:	f8ad 3000 	strh.w	r3, [sp]
    b1f4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    b1f8:	f8ad 3002 	strh.w	r3, [sp, #2]
    b1fc:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    b200:	f8ad 3004 	strh.w	r3, [sp, #4]
    b204:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    b208:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    b20c:	4669      	mov	r1, sp
    b20e:	4628      	mov	r0, r5
    b210:	f7ff ff94 	bl	b13c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b214:	f3bf 8f5b 	dmb	ish
    b218:	e856 3f00 	ldrex	r3, [r6]
    b21c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b220:	e846 3200 	strex	r2, r3, [r6]
    b224:	2a00      	cmp	r2, #0
    b226:	d1f7      	bne.n	b218 <deferred_work+0x7c>
    b228:	f3bf 8f5b 	dmb	ish
}
    b22c:	b002      	add	sp, #8
    b22e:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
    b230:	4a03      	ldr	r2, [pc, #12]	; (b240 <deferred_work+0xa4>)
    b232:	6810      	ldr	r0, [r2, #0]
    b234:	6851      	ldr	r1, [r2, #4]
    b236:	466b      	mov	r3, sp
    b238:	c303      	stmia	r3!, {r0, r1}
    b23a:	e7e7      	b.n	b20c <deferred_work+0x70>
    b23c:	2000d6ec 	.word	0x2000d6ec
    b240:	000271f0 	.word	0x000271f0

0000b244 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    b244:	b538      	push	{r3, r4, r5, lr}
    b246:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    b248:	490c      	ldr	r1, [pc, #48]	; (b27c <bt_conn_create_pdu_timeout+0x38>)
    b24a:	2800      	cmp	r0, #0
    b24c:	bf08      	it	eq
    b24e:	4608      	moveq	r0, r1
    b250:	f01a fc91 	bl	25b76 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    b254:	4604      	mov	r4, r0
    b256:	b958      	cbnz	r0, b270 <bt_conn_create_pdu_timeout+0x2c>
    b258:	4909      	ldr	r1, [pc, #36]	; (b280 <bt_conn_create_pdu_timeout+0x3c>)
    b25a:	4b0a      	ldr	r3, [pc, #40]	; (b284 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    b25c:	480a      	ldr	r0, [pc, #40]	; (b288 <bt_conn_create_pdu_timeout+0x44>)
    b25e:	1ac9      	subs	r1, r1, r3
    b260:	08c9      	lsrs	r1, r1, #3
    b262:	0189      	lsls	r1, r1, #6
    b264:	f041 0102 	orr.w	r1, r1, #2
    b268:	f016 fc7b 	bl	21b62 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    b26c:	4620      	mov	r0, r4
    b26e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    b270:	1d29      	adds	r1, r5, #4
    b272:	3008      	adds	r0, #8
    b274:	f01a fc9e 	bl	25bb4 <net_buf_simple_reserve>
	return buf;
    b278:	e7f8      	b.n	b26c <bt_conn_create_pdu_timeout+0x28>
    b27a:	bf00      	nop
    b27c:	2000a018 	.word	0x2000a018
    b280:	00026fd8 	.word	0x00026fd8
    b284:	00026fc8 	.word	0x00026fc8
    b288:	0002c0eb 	.word	0x0002c0eb

0000b28c <bt_conn_create_frag_timeout>:
{
    b28c:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    b28e:	4801      	ldr	r0, [pc, #4]	; (b294 <bt_conn_create_frag_timeout+0x8>)
    b290:	f7ff bfd8 	b.w	b244 <bt_conn_create_pdu_timeout>
    b294:	2000a068 	.word	0x2000a068

0000b298 <create_frag>:
{
    b298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b29c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    b29e:	f04f 33ff 	mov.w	r3, #4294967295
    b2a2:	f04f 32ff 	mov.w	r2, #4294967295
    b2a6:	2000      	movs	r0, #0
{
    b2a8:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    b2aa:	f7ff ffef 	bl	b28c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    b2ae:	7b73      	ldrb	r3, [r6, #13]
    b2b0:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    b2b2:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    b2b4:	f04f 0600 	mov.w	r6, #0
    b2b8:	d005      	beq.n	b2c6 <create_frag+0x2e>
		net_buf_unref(frag);
    b2ba:	f011 fdaf 	bl	1ce1c <net_buf_unref>
		return NULL;
    b2be:	4635      	mov	r5, r6
}
    b2c0:	4628      	mov	r0, r5
    b2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    b2c6:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    b2c8:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    b2cc:	4e0c      	ldr	r6, [pc, #48]	; (b300 <create_frag+0x68>)
    b2ce:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b2d0:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    b2d4:	f01a fce0 	bl	25c98 <net_buf_simple_tailroom>
    b2d8:	4580      	cmp	r8, r0
    b2da:	d20c      	bcs.n	b2f6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    b2dc:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b2e0:	f854 1f08 	ldr.w	r1, [r4, #8]!
    b2e4:	4632      	mov	r2, r6
    b2e6:	4638      	mov	r0, r7
    b2e8:	f01a fca1 	bl	25c2e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    b2ec:	4631      	mov	r1, r6
    b2ee:	4620      	mov	r0, r4
    b2f0:	f01a fcb6 	bl	25c60 <net_buf_simple_pull>
    b2f4:	e7e4      	b.n	b2c0 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    b2f6:	4638      	mov	r0, r7
    b2f8:	f01a fcce 	bl	25c98 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b2fc:	b286      	uxth	r6, r0
    b2fe:	e7ef      	b.n	b2e0 <create_frag+0x48>
    b300:	20000000 	.word	0x20000000

0000b304 <bt_conn_process_tx>:
{
    b304:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    b306:	7b43      	ldrb	r3, [r0, #13]
{
    b308:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    b30a:	b95b      	cbnz	r3, b324 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b30c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    b310:	3004      	adds	r0, #4
    b312:	f018 ff99 	bl	24248 <atomic_and>
    b316:	0643      	lsls	r3, r0, #25
    b318:	d504      	bpl.n	b324 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    b31a:	4620      	mov	r0, r4
}
    b31c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    b320:	f7ff bc38 	b.w	ab94 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    b324:	2200      	movs	r2, #0
    b326:	2300      	movs	r3, #0
    b328:	f104 0034 	add.w	r0, r4, #52	; 0x34
    b32c:	f01a fc28 	bl	25b80 <net_buf_get>
	BT_ASSERT(buf);
    b330:	4605      	mov	r5, r0
    b332:	b960      	cbnz	r0, b34e <bt_conn_process_tx+0x4a>
    b334:	4a1f      	ldr	r2, [pc, #124]	; (b3b4 <bt_conn_process_tx+0xb0>)
    b336:	4920      	ldr	r1, [pc, #128]	; (b3b8 <bt_conn_process_tx+0xb4>)
    b338:	4820      	ldr	r0, [pc, #128]	; (b3bc <bt_conn_process_tx+0xb8>)
    b33a:	f240 535f 	movw	r3, #1375	; 0x55f
    b33e:	f015 ffa9 	bl	21294 <printk>
    b342:	4040      	eors	r0, r0
    b344:	f380 8811 	msr	BASEPRI, r0
    b348:	f04f 0003 	mov.w	r0, #3
    b34c:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    b34e:	4e1c      	ldr	r6, [pc, #112]	; (b3c0 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    b350:	89aa      	ldrh	r2, [r5, #12]
    b352:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    b356:	429a      	cmp	r2, r3
    b358:	d807      	bhi.n	b36a <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    b35a:	2300      	movs	r3, #0
    b35c:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    b35e:	4629      	mov	r1, r5
    b360:	4620      	mov	r0, r4
    b362:	f7ff fae3 	bl	a92c <send_frag>
	if (!send_buf(conn, buf)) {
    b366:	b130      	cbz	r0, b376 <bt_conn_process_tx+0x72>
}
    b368:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    b36a:	4629      	mov	r1, r5
    b36c:	4620      	mov	r0, r4
    b36e:	f7ff ff93 	bl	b298 <create_frag>
	if (!frag) {
    b372:	4601      	mov	r1, r0
    b374:	b920      	cbnz	r0, b380 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    b376:	4628      	mov	r0, r5
}
    b378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    b37c:	f011 bd4e 	b.w	1ce1c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    b380:	2301      	movs	r3, #1
    b382:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    b384:	4620      	mov	r0, r4
    b386:	f7ff fad1 	bl	a92c <send_frag>
    b38a:	2800      	cmp	r0, #0
    b38c:	d0f3      	beq.n	b376 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    b38e:	89aa      	ldrh	r2, [r5, #12]
    b390:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    b394:	429a      	cmp	r2, r3
    b396:	d802      	bhi.n	b39e <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    b398:	2300      	movs	r3, #0
    b39a:	2203      	movs	r2, #3
    b39c:	e7df      	b.n	b35e <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    b39e:	4629      	mov	r1, r5
    b3a0:	4620      	mov	r0, r4
    b3a2:	f7ff ff79 	bl	b298 <create_frag>
		if (!frag) {
    b3a6:	4601      	mov	r1, r0
    b3a8:	2800      	cmp	r0, #0
    b3aa:	d0e4      	beq.n	b376 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    b3ac:	2301      	movs	r3, #1
    b3ae:	461a      	mov	r2, r3
    b3b0:	e7e8      	b.n	b384 <bt_conn_process_tx+0x80>
    b3b2:	bf00      	nop
    b3b4:	0002c114 	.word	0x0002c114
    b3b8:	0002b555 	.word	0x0002b555
    b3bc:	0002b7ed 	.word	0x0002b7ed
    b3c0:	20000000 	.word	0x20000000

0000b3c4 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    b3c4:	4b0c      	ldr	r3, [pc, #48]	; (b3f8 <bt_conn_auth_cb_register+0x34>)
    b3c6:	b908      	cbnz	r0, b3cc <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    b3c8:	6018      	str	r0, [r3, #0]
		return 0;
    b3ca:	4770      	bx	lr
	}

	if (bt_auth) {
    b3cc:	681a      	ldr	r2, [r3, #0]
    b3ce:	b962      	cbnz	r2, b3ea <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    b3d0:	6902      	ldr	r2, [r0, #16]
    b3d2:	b93a      	cbnz	r2, b3e4 <bt_conn_auth_cb_register+0x20>
    b3d4:	6802      	ldr	r2, [r0, #0]
    b3d6:	b95a      	cbnz	r2, b3f0 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    b3d8:	6842      	ldr	r2, [r0, #4]
    b3da:	b94a      	cbnz	r2, b3f0 <bt_conn_auth_cb_register+0x2c>
    b3dc:	6882      	ldr	r2, [r0, #8]
    b3de:	b93a      	cbnz	r2, b3f0 <bt_conn_auth_cb_register+0x2c>
    b3e0:	6942      	ldr	r2, [r0, #20]
    b3e2:	b92a      	cbnz	r2, b3f0 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    b3e4:	6018      	str	r0, [r3, #0]
	return 0;
    b3e6:	2000      	movs	r0, #0
    b3e8:	4770      	bx	lr
		return -EALREADY;
    b3ea:	f06f 0044 	mvn.w	r0, #68	; 0x44
    b3ee:	4770      	bx	lr
		return -EINVAL;
    b3f0:	f06f 0015 	mvn.w	r0, #21
}
    b3f4:	4770      	bx	lr
    b3f6:	bf00      	nop
    b3f8:	2000d6e8 	.word	0x2000d6e8

0000b3fc <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    b3fc:	4b03      	ldr	r3, [pc, #12]	; (b40c <bt_conn_index+0x10>)
    b3fe:	1ac0      	subs	r0, r0, r3
    b400:	4b03      	ldr	r3, [pc, #12]	; (b410 <bt_conn_index+0x14>)
    b402:	1180      	asrs	r0, r0, #6
    b404:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    b406:	b2c0      	uxtb	r0, r0
    b408:	4770      	bx	lr
    b40a:	bf00      	nop
    b40c:	2000a630 	.word	0x2000a630
    b410:	aaaaaaab 	.word	0xaaaaaaab

0000b414 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    b414:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    b416:	490b      	ldr	r1, [pc, #44]	; (b444 <bt_conn_init+0x30>)
    b418:	480b      	ldr	r0, [pc, #44]	; (b448 <bt_conn_init+0x34>)
    b41a:	f01b f89d 	bl	26558 <k_queue_append>
    b41e:	490b      	ldr	r1, [pc, #44]	; (b44c <bt_conn_init+0x38>)
    b420:	4809      	ldr	r0, [pc, #36]	; (b448 <bt_conn_init+0x34>)
    b422:	f01b f899 	bl	26558 <k_queue_append>
    b426:	490a      	ldr	r1, [pc, #40]	; (b450 <bt_conn_init+0x3c>)
    b428:	4807      	ldr	r0, [pc, #28]	; (b448 <bt_conn_init+0x34>)
    b42a:	f01b f895 	bl	26558 <k_queue_append>
	}

	bt_att_init();
    b42e:	f019 fc3d 	bl	24cac <bt_att_init>

	err = bt_smp_init();
    b432:	f004 fae1 	bl	f9f8 <bt_smp_init>
	if (err) {
    b436:	4604      	mov	r4, r0
    b438:	b908      	cbnz	r0, b43e <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    b43a:	f019 f8fe 	bl	2463a <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    b43e:	4620      	mov	r0, r4
    b440:	bd10      	pop	{r4, pc}
    b442:	bf00      	nop
    b444:	2000d6f0 	.word	0x2000d6f0
    b448:	20009fe8 	.word	0x20009fe8
    b44c:	2000d700 	.word	0x2000d700
    b450:	2000d710 	.word	0x2000d710

0000b454 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    b454:	4a0b      	ldr	r2, [pc, #44]	; (b484 <l2cap_accept+0x30>)
{
    b456:	b508      	push	{r3, lr}
    b458:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    b45a:	6810      	ldr	r0, [r2, #0]
    b45c:	b918      	cbnz	r0, b466 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    b45e:	4b0a      	ldr	r3, [pc, #40]	; (b488 <l2cap_accept+0x34>)
    b460:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    b462:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    b464:	bd08      	pop	{r3, pc}
    b466:	4909      	ldr	r1, [pc, #36]	; (b48c <l2cap_accept+0x38>)
    b468:	4a09      	ldr	r2, [pc, #36]	; (b490 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    b46a:	480a      	ldr	r0, [pc, #40]	; (b494 <l2cap_accept+0x40>)
    b46c:	1a52      	subs	r2, r2, r1
    b46e:	08d2      	lsrs	r2, r2, #3
    b470:	0192      	lsls	r2, r2, #6
    b472:	f042 0201 	orr.w	r2, r2, #1
    b476:	4619      	mov	r1, r3
    b478:	f016 fb80 	bl	21b7c <log_1>
	return -ENOMEM;
    b47c:	f06f 000b 	mvn.w	r0, #11
    b480:	e7f0      	b.n	b464 <l2cap_accept+0x10>
    b482:	bf00      	nop
    b484:	2000a6f0 	.word	0x2000a6f0
    b488:	000277fc 	.word	0x000277fc
    b48c:	00026fc8 	.word	0x00026fc8
    b490:	00027098 	.word	0x00027098
    b494:	0002c1a1 	.word	0x0002c1a1

0000b498 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b49a:	4605      	mov	r5, r0
    b49c:	460f      	mov	r7, r1
    b49e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    b4a0:	2300      	movs	r3, #0
    b4a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b4a6:	2104      	movs	r1, #4
    b4a8:	2000      	movs	r0, #0
    b4aa:	f7ff fecb 	bl	b244 <bt_conn_create_pdu_timeout>
	if (!buf) {
    b4ae:	4604      	mov	r4, r0
    b4b0:	b960      	cbnz	r0, b4cc <l2cap_create_le_sig_pdu.constprop.0+0x34>
    b4b2:	4a0a      	ldr	r2, [pc, #40]	; (b4dc <l2cap_create_le_sig_pdu.constprop.0+0x44>)
    b4b4:	4b0a      	ldr	r3, [pc, #40]	; (b4e0 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    b4b6:	480b      	ldr	r0, [pc, #44]	; (b4e4 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    b4b8:	1ad2      	subs	r2, r2, r3
    b4ba:	08d2      	lsrs	r2, r2, #3
    b4bc:	0192      	lsls	r2, r2, #6
    b4be:	f042 0201 	orr.w	r2, r2, #1
    b4c2:	4629      	mov	r1, r5
    b4c4:	f016 fb5a 	bl	21b7c <log_1>
}
    b4c8:	4620      	mov	r0, r4
    b4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    b4cc:	2104      	movs	r1, #4
    b4ce:	3008      	adds	r0, #8
    b4d0:	f01a fba7 	bl	25c22 <net_buf_simple_add>
	hdr->code = code;
    b4d4:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    b4d6:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    b4d8:	8046      	strh	r6, [r0, #2]
	return buf;
    b4da:	e7f5      	b.n	b4c8 <l2cap_create_le_sig_pdu.constprop.0+0x30>
    b4dc:	00027098 	.word	0x00027098
    b4e0:	00026fc8 	.word	0x00026fc8
    b4e4:	0002c1c8 	.word	0x0002c1c8

0000b4e8 <l2cap_rtx_timeout>:
{
    b4e8:	b538      	push	{r3, r4, r5, lr}
    b4ea:	4a0b      	ldr	r2, [pc, #44]	; (b518 <l2cap_rtx_timeout+0x30>)
    b4ec:	4b0b      	ldr	r3, [pc, #44]	; (b51c <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    b4ee:	4604      	mov	r4, r0
    b4f0:	1ad2      	subs	r2, r2, r3
    b4f2:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    b4f6:	480a      	ldr	r0, [pc, #40]	; (b520 <l2cap_rtx_timeout+0x38>)
    b4f8:	08d2      	lsrs	r2, r2, #3
    b4fa:	0192      	lsls	r2, r2, #6
    b4fc:	4621      	mov	r1, r4
    b4fe:	f042 0201 	orr.w	r2, r2, #1
    b502:	f016 fb3b 	bl	21b7c <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    b506:	4628      	mov	r0, r5
    b508:	4621      	mov	r1, r4
    b50a:	f018 fff4 	bl	244f6 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    b50e:	4620      	mov	r0, r4
}
    b510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    b514:	f019 b810 	b.w	24538 <bt_l2cap_chan_del>
    b518:	00027098 	.word	0x00027098
    b51c:	00026fc8 	.word	0x00026fc8
    b520:	0002c1f0 	.word	0x0002c1f0

0000b524 <bt_l2cap_connected>:
{
    b524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b528:	4e2a      	ldr	r6, [pc, #168]	; (b5d4 <bt_l2cap_connected+0xb0>)
    b52a:	4f2b      	ldr	r7, [pc, #172]	; (b5d8 <bt_l2cap_connected+0xb4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b52c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; b5dc <bt_l2cap_connected+0xb8>
{
    b530:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b532:	42be      	cmp	r6, r7
    b534:	d302      	bcc.n	b53c <bt_l2cap_connected+0x18>
}
    b536:	b003      	add	sp, #12
    b538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    b53c:	6873      	ldr	r3, [r6, #4]
    b53e:	a901      	add	r1, sp, #4
    b540:	4628      	mov	r0, r5
    b542:	4798      	blx	r3
    b544:	2800      	cmp	r0, #0
    b546:	db40      	blt.n	b5ca <bt_l2cap_connected+0xa6>
		ch = BT_L2CAP_LE_CHAN(chan);
    b548:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    b54a:	8833      	ldrh	r3, [r6, #0]
    b54c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    b550:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    b554:	2230      	movs	r2, #48	; 0x30
    b556:	2100      	movs	r1, #0
    b558:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    b55c:	f8d6 9008 	ldr.w	r9, [r6, #8]
    b560:	f018 fb36 	bl	23bd0 <memset>
    b564:	f8c4 8014 	str.w	r8, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b568:	f104 0340 	add.w	r3, r4, #64	; 0x40
    b56c:	2200      	movs	r2, #0
    b56e:	f3bf 8f5b 	dmb	ish
    b572:	e853 1f00 	ldrex	r1, [r3]
    b576:	e843 2000 	strex	r0, r2, [r3]
    b57a:	2800      	cmp	r0, #0
    b57c:	d1f9      	bne.n	b572 <bt_l2cap_connected+0x4e>
    b57e:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    b582:	60a2      	str	r2, [r4, #8]
	return list->tail;
    b584:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    b586:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
    b58a:	bb02      	cbnz	r2, b5ce <bt_l2cap_connected+0xaa>
	list->head = node;
    b58c:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
    b590:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    b592:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    b594:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    b596:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    b59a:	681b      	ldr	r3, [r3, #0]
    b59c:	b103      	cbz	r3, b5a0 <bt_l2cap_connected+0x7c>
			chan->ops->connected(chan);
    b59e:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b5a0:	9b01      	ldr	r3, [sp, #4]
    b5a2:	f3bf 8f5b 	dmb	ish
    b5a6:	3340      	adds	r3, #64	; 0x40
    b5a8:	e853 2f00 	ldrex	r2, [r3]
    b5ac:	f042 0201 	orr.w	r2, r2, #1
    b5b0:	e843 2100 	strex	r1, r2, [r3]
    b5b4:	2900      	cmp	r1, #0
    b5b6:	d1f7      	bne.n	b5a8 <bt_l2cap_connected+0x84>
    b5b8:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    b5bc:	9801      	ldr	r0, [sp, #4]
    b5be:	6843      	ldr	r3, [r0, #4]
    b5c0:	699b      	ldr	r3, [r3, #24]
    b5c2:	b113      	cbz	r3, b5ca <bt_l2cap_connected+0xa6>
			chan->ops->status(chan, chan->status);
    b5c4:	f100 0140 	add.w	r1, r0, #64	; 0x40
    b5c8:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b5ca:	360c      	adds	r6, #12
    b5cc:	e7b1      	b.n	b532 <bt_l2cap_connected+0xe>
	parent->next = child;
    b5ce:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b5d0:	652b      	str	r3, [r5, #80]	; 0x50
}
    b5d2:	e7dd      	b.n	b590 <bt_l2cap_connected+0x6c>
    b5d4:	00026f0c 	.word	0x00026f0c
    b5d8:	00026f30 	.word	0x00026f30
    b5dc:	0000b4e9 	.word	0x0000b4e9

0000b5e0 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    b5e0:	898b      	ldrh	r3, [r1, #12]
    b5e2:	2b03      	cmp	r3, #3
{
    b5e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b5e6:	4606      	mov	r6, r0
    b5e8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    b5ea:	d80a      	bhi.n	b602 <l2cap_recv+0x22>
    b5ec:	492e      	ldr	r1, [pc, #184]	; (b6a8 <l2cap_recv+0xc8>)
    b5ee:	4b2f      	ldr	r3, [pc, #188]	; (b6ac <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    b5f0:	482f      	ldr	r0, [pc, #188]	; (b6b0 <l2cap_recv+0xd0>)
    b5f2:	1ac9      	subs	r1, r1, r3
    b5f4:	08c9      	lsrs	r1, r1, #3
    b5f6:	0189      	lsls	r1, r1, #6
    b5f8:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    b5fc:	f016 fab1 	bl	21b62 <log_0>
		return 0;
    b600:	e013      	b.n	b62a <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    b602:	2104      	movs	r1, #4
    b604:	f105 0008 	add.w	r0, r5, #8
    b608:	f01a fb32 	bl	25c70 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    b60c:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    b60e:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    b610:	428a      	cmp	r2, r1
    b612:	4604      	mov	r4, r0
    b614:	d00c      	beq.n	b630 <l2cap_recv+0x50>
    b616:	4825      	ldr	r0, [pc, #148]	; (b6ac <l2cap_recv+0xcc>)
    b618:	4b23      	ldr	r3, [pc, #140]	; (b6a8 <l2cap_recv+0xc8>)
    b61a:	1a1b      	subs	r3, r3, r0
    b61c:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    b61e:	019b      	lsls	r3, r3, #6
    b620:	4824      	ldr	r0, [pc, #144]	; (b6b4 <l2cap_recv+0xd4>)
    b622:	f043 0301 	orr.w	r3, r3, #1
    b626:	f016 fabd 	bl	21ba4 <log_2>
}
    b62a:	2000      	movs	r0, #0
    b62c:	b002      	add	sp, #8
    b62e:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    b630:	7843      	ldrb	r3, [r0, #1]
    b632:	b943      	cbnz	r3, b646 <l2cap_recv+0x66>
    b634:	491c      	ldr	r1, [pc, #112]	; (b6a8 <l2cap_recv+0xc8>)
    b636:	4b1d      	ldr	r3, [pc, #116]	; (b6ac <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    b638:	481f      	ldr	r0, [pc, #124]	; (b6b8 <l2cap_recv+0xd8>)
    b63a:	1ac9      	subs	r1, r1, r3
    b63c:	08c9      	lsrs	r1, r1, #3
    b63e:	0189      	lsls	r1, r1, #6
    b640:	f041 0101 	orr.w	r1, r1, #1
    b644:	e7da      	b.n	b5fc <l2cap_recv+0x1c>
	switch (hdr->code) {
    b646:	7801      	ldrb	r1, [r0, #0]
    b648:	2901      	cmp	r1, #1
    b64a:	d0ee      	beq.n	b62a <l2cap_recv+0x4a>
    b64c:	2913      	cmp	r1, #19
    b64e:	d10a      	bne.n	b666 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    b650:	2a01      	cmp	r2, #1
    b652:	d8ea      	bhi.n	b62a <l2cap_recv+0x4a>
    b654:	4914      	ldr	r1, [pc, #80]	; (b6a8 <l2cap_recv+0xc8>)
    b656:	4b15      	ldr	r3, [pc, #84]	; (b6ac <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    b658:	4818      	ldr	r0, [pc, #96]	; (b6bc <l2cap_recv+0xdc>)
    b65a:	1ac9      	subs	r1, r1, r3
    b65c:	08c9      	lsrs	r1, r1, #3
    b65e:	0189      	lsls	r1, r1, #6
    b660:	f041 0101 	orr.w	r1, r1, #1
    b664:	e7ca      	b.n	b5fc <l2cap_recv+0x1c>
    b666:	4b11      	ldr	r3, [pc, #68]	; (b6ac <l2cap_recv+0xcc>)
    b668:	4a0f      	ldr	r2, [pc, #60]	; (b6a8 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    b66a:	4815      	ldr	r0, [pc, #84]	; (b6c0 <l2cap_recv+0xe0>)
    b66c:	1ad2      	subs	r2, r2, r3
    b66e:	08d2      	lsrs	r2, r2, #3
    b670:	0192      	lsls	r2, r2, #6
    b672:	f042 0202 	orr.w	r2, r2, #2
    b676:	f016 fa81 	bl	21b7c <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    b67a:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    b67c:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    b67e:	2202      	movs	r2, #2
    b680:	2001      	movs	r0, #1
    b682:	f7ff ff09 	bl	b498 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    b686:	4604      	mov	r4, r0
    b688:	2800      	cmp	r0, #0
    b68a:	d0ce      	beq.n	b62a <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    b68c:	2102      	movs	r1, #2
    b68e:	3008      	adds	r0, #8
    b690:	f01a fac7 	bl	25c22 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    b694:	2300      	movs	r3, #0
    b696:	7003      	strb	r3, [r0, #0]
    b698:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    b69a:	4622      	mov	r2, r4
    b69c:	9300      	str	r3, [sp, #0]
    b69e:	2105      	movs	r1, #5
    b6a0:	4628      	mov	r0, r5
    b6a2:	f018 ff91 	bl	245c8 <bt_l2cap_send_cb>
}
    b6a6:	e7c0      	b.n	b62a <l2cap_recv+0x4a>
    b6a8:	00027098 	.word	0x00027098
    b6ac:	00026fc8 	.word	0x00026fc8
    b6b0:	0002c200 	.word	0x0002c200
    b6b4:	0002c21e 	.word	0x0002c21e
    b6b8:	0002c23f 	.word	0x0002c23f
    b6bc:	0002c260 	.word	0x0002c260
    b6c0:	0002c27c 	.word	0x0002c27c

0000b6c4 <bt_l2cap_recv>:
{
    b6c4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    b6c6:	898b      	ldrh	r3, [r1, #12]
    b6c8:	2b03      	cmp	r3, #3
{
    b6ca:	4605      	mov	r5, r0
    b6cc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    b6ce:	d80e      	bhi.n	b6ee <bt_l2cap_recv+0x2a>
    b6d0:	4914      	ldr	r1, [pc, #80]	; (b724 <bt_l2cap_recv+0x60>)
    b6d2:	4b15      	ldr	r3, [pc, #84]	; (b728 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    b6d4:	4815      	ldr	r0, [pc, #84]	; (b72c <bt_l2cap_recv+0x68>)
    b6d6:	1ac9      	subs	r1, r1, r3
    b6d8:	08c9      	lsrs	r1, r1, #3
    b6da:	0189      	lsls	r1, r1, #6
    b6dc:	f041 0101 	orr.w	r1, r1, #1
    b6e0:	f016 fa3f 	bl	21b62 <log_0>
	net_buf_unref(buf);
    b6e4:	4620      	mov	r0, r4
}
    b6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    b6ea:	f011 bb97 	b.w	1ce1c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    b6ee:	2104      	movs	r1, #4
    b6f0:	f104 0008 	add.w	r0, r4, #8
    b6f4:	f01a fabc 	bl	25c70 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    b6f8:	8841      	ldrh	r1, [r0, #2]
    b6fa:	4628      	mov	r0, r5
    b6fc:	f018 ff8d 	bl	2461a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b700:	b950      	cbnz	r0, b718 <bt_l2cap_recv+0x54>
    b702:	4b09      	ldr	r3, [pc, #36]	; (b728 <bt_l2cap_recv+0x64>)
    b704:	4a07      	ldr	r2, [pc, #28]	; (b724 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    b706:	480a      	ldr	r0, [pc, #40]	; (b730 <bt_l2cap_recv+0x6c>)
    b708:	1ad2      	subs	r2, r2, r3
    b70a:	08d2      	lsrs	r2, r2, #3
    b70c:	0192      	lsls	r2, r2, #6
    b70e:	f042 0202 	orr.w	r2, r2, #2
    b712:	f016 fa33 	bl	21b7c <log_1>
		net_buf_unref(buf);
    b716:	e7e5      	b.n	b6e4 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    b718:	6843      	ldr	r3, [r0, #4]
    b71a:	4621      	mov	r1, r4
    b71c:	691b      	ldr	r3, [r3, #16]
    b71e:	4798      	blx	r3
    b720:	e7e0      	b.n	b6e4 <bt_l2cap_recv+0x20>
    b722:	bf00      	nop
    b724:	00027098 	.word	0x00027098
    b728:	00026fc8 	.word	0x00026fc8
    b72c:	0002c29a 	.word	0x0002c29a
    b730:	0002c2b7 	.word	0x0002c2b7

0000b734 <bt_l2cap_update_conn_param>:
{
    b734:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b736:	460c      	mov	r4, r1
	ident++;
    b738:	4914      	ldr	r1, [pc, #80]	; (b78c <bt_l2cap_update_conn_param+0x58>)
    b73a:	780b      	ldrb	r3, [r1, #0]
    b73c:	3301      	adds	r3, #1
	if (!ident) {
    b73e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    b742:	bf08      	it	eq
    b744:	2301      	moveq	r3, #1
    b746:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    b748:	7809      	ldrb	r1, [r1, #0]
{
    b74a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    b74c:	2208      	movs	r2, #8
    b74e:	2012      	movs	r0, #18
    b750:	f7ff fea2 	bl	b498 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    b754:	4606      	mov	r6, r0
    b756:	b1b0      	cbz	r0, b786 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    b758:	2108      	movs	r1, #8
    b75a:	4408      	add	r0, r1
    b75c:	f01a fa61 	bl	25c22 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    b760:	8822      	ldrh	r2, [r4, #0]
    b762:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    b764:	8862      	ldrh	r2, [r4, #2]
    b766:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    b768:	88a2      	ldrh	r2, [r4, #4]
    b76a:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    b76c:	88e2      	ldrh	r2, [r4, #6]
    b76e:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    b770:	2400      	movs	r4, #0
    b772:	9400      	str	r4, [sp, #0]
    b774:	4623      	mov	r3, r4
    b776:	4632      	mov	r2, r6
    b778:	2105      	movs	r1, #5
    b77a:	4628      	mov	r0, r5
    b77c:	f018 ff24 	bl	245c8 <bt_l2cap_send_cb>
	return 0;
    b780:	4620      	mov	r0, r4
}
    b782:	b002      	add	sp, #8
    b784:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    b786:	f06f 000b 	mvn.w	r0, #11
    b78a:	e7fa      	b.n	b782 <bt_l2cap_update_conn_param+0x4e>
    b78c:	2000f290 	.word	0x2000f290

0000b790 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    b790:	4b02      	ldr	r3, [pc, #8]	; (b79c <att_cfm_sent+0xc>)
    b792:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    b796:	f018 bf63 	b.w	24660 <att_sent>
    b79a:	bf00      	nop
    b79c:	000249bd 	.word	0x000249bd

0000b7a0 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    b7a0:	4b02      	ldr	r3, [pc, #8]	; (b7ac <att_rsp_sent+0xc>)
    b7a2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    b7a6:	f018 bf5b 	b.w	24660 <att_sent>
    b7aa:	bf00      	nop
    b7ac:	000249d9 	.word	0x000249d9

0000b7b0 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    b7b0:	4b02      	ldr	r3, [pc, #8]	; (b7bc <att_req_sent+0xc>)
    b7b2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    b7b6:	f018 bf53 	b.w	24660 <att_sent>
    b7ba:	bf00      	nop
    b7bc:	0000b9bd 	.word	0x0000b9bd

0000b7c0 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    b7c0:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    b7c2:	7b43      	ldrb	r3, [r0, #13]
    b7c4:	2b07      	cmp	r3, #7
    b7c6:	d00b      	beq.n	b7e0 <att_get+0x20>
    b7c8:	4918      	ldr	r1, [pc, #96]	; (b82c <att_get+0x6c>)
    b7ca:	4b19      	ldr	r3, [pc, #100]	; (b830 <att_get+0x70>)
		BT_WARN("Not connected");
    b7cc:	4819      	ldr	r0, [pc, #100]	; (b834 <att_get+0x74>)
    b7ce:	1ac9      	subs	r1, r1, r3
    b7d0:	08c9      	lsrs	r1, r1, #3
    b7d2:	0189      	lsls	r1, r1, #6
    b7d4:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
    b7d8:	f016 f9c3 	bl	21b62 <log_0>
		return NULL;
    b7dc:	2400      	movs	r4, #0
    b7de:	e00e      	b.n	b7fe <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    b7e0:	2104      	movs	r1, #4
    b7e2:	f018 ff1a 	bl	2461a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b7e6:	4604      	mov	r4, r0
    b7e8:	b958      	cbnz	r0, b802 <att_get+0x42>
    b7ea:	4910      	ldr	r1, [pc, #64]	; (b82c <att_get+0x6c>)
    b7ec:	4b10      	ldr	r3, [pc, #64]	; (b830 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    b7ee:	4812      	ldr	r0, [pc, #72]	; (b838 <att_get+0x78>)
    b7f0:	1ac9      	subs	r1, r1, r3
    b7f2:	08c9      	lsrs	r1, r1, #3
    b7f4:	0189      	lsls	r1, r1, #6
    b7f6:	f041 0101 	orr.w	r1, r1, #1
    b7fa:	f016 f9b2 	bl	21b62 <log_0>
	}

	return att_chan->att;
}
    b7fe:	4620      	mov	r0, r4
    b800:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b802:	f3bf 8f5b 	dmb	ish
    b806:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    b80a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    b80e:	075b      	lsls	r3, r3, #29
    b810:	d508      	bpl.n	b824 <att_get+0x64>
    b812:	4906      	ldr	r1, [pc, #24]	; (b82c <att_get+0x6c>)
    b814:	4b06      	ldr	r3, [pc, #24]	; (b830 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    b816:	4809      	ldr	r0, [pc, #36]	; (b83c <att_get+0x7c>)
    b818:	1ac9      	subs	r1, r1, r3
    b81a:	08c9      	lsrs	r1, r1, #3
    b81c:	0189      	lsls	r1, r1, #6
    b81e:	f041 0102 	orr.w	r1, r1, #2
    b822:	e7d9      	b.n	b7d8 <att_get+0x18>
	return att_chan->att;
    b824:	f850 4c08 	ldr.w	r4, [r0, #-8]
    b828:	e7e9      	b.n	b7fe <att_get+0x3e>
    b82a:	bf00      	nop
    b82c:	00026fc8 	.word	0x00026fc8
    b830:	00026fc8 	.word	0x00026fc8
    b834:	0002c2f3 	.word	0x0002c2f3
    b838:	0002c301 	.word	0x0002c301
    b83c:	0002c31c 	.word	0x0002c31c

0000b840 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    b840:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    b842:	3808      	subs	r0, #8
    b844:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    b846:	a901      	add	r1, sp, #4
    b848:	4802      	ldr	r0, [pc, #8]	; (b854 <bt_att_released+0x14>)
    b84a:	f013 fd25 	bl	1f298 <k_mem_slab_free>
}
    b84e:	b003      	add	sp, #12
    b850:	f85d fb04 	ldr.w	pc, [sp], #4
    b854:	20009f28 	.word	0x20009f28

0000b858 <find_type_cb>:
{
    b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    b85c:	f8d2 9000 	ldr.w	r9, [r2]
{
    b860:	b091      	sub	sp, #68	; 0x44
    b862:	4607      	mov	r7, r0
    b864:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b866:	2500      	movs	r5, #0
    b868:	f642 0301 	movw	r3, #10241	; 0x2801
    b86c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    b86e:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b872:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    b876:	a90b      	add	r1, sp, #44	; 0x2c
{
    b878:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b87a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    b87e:	f018 fa9c 	bl	23dba <bt_uuid_cmp>
    b882:	2800      	cmp	r0, #0
    b884:	d066      	beq.n	b954 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    b886:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b88a:	6838      	ldr	r0, [r7, #0]
    b88c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    b890:	a90b      	add	r1, sp, #44	; 0x2c
    b892:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    b896:	f018 fa90 	bl	23dba <bt_uuid_cmp>
    b89a:	b138      	cbz	r0, b8ac <find_type_cb+0x54>
		if (data->group &&
    b89c:	68a3      	ldr	r3, [r4, #8]
    b89e:	b11b      	cbz	r3, b8a8 <find_type_cb+0x50>
    b8a0:	885a      	ldrh	r2, [r3, #2]
    b8a2:	42b2      	cmp	r2, r6
    b8a4:	d200      	bcs.n	b8a8 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    b8a6:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    b8a8:	2001      	movs	r0, #1
    b8aa:	e009      	b.n	b8c0 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    b8ac:	6861      	ldr	r1, [r4, #4]
    b8ae:	4608      	mov	r0, r1
    b8b0:	f018 fece 	bl	24650 <net_buf_frags_len>
    b8b4:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    b8b8:	1a1b      	subs	r3, r3, r0
    b8ba:	2b03      	cmp	r3, #3
    b8bc:	d803      	bhi.n	b8c6 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    b8be:	2000      	movs	r0, #0
}
    b8c0:	b011      	add	sp, #68	; 0x44
    b8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    b8c6:	4608      	mov	r0, r1
    b8c8:	f01a f989 	bl	25bde <net_buf_frag_last>
    b8cc:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    b8ce:	6860      	ldr	r0, [r4, #4]
    b8d0:	f018 febe 	bl	24650 <net_buf_frags_len>
    b8d4:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    b8d8:	f105 0b08 	add.w	fp, r5, #8
    b8dc:	ebaa 0a00 	sub.w	sl, sl, r0
    b8e0:	4658      	mov	r0, fp
    b8e2:	f01a f9d9 	bl	25c98 <net_buf_simple_tailroom>
    b8e6:	4582      	cmp	sl, r0
    b8e8:	d237      	bcs.n	b95a <find_type_cb+0x102>
    b8ea:	6860      	ldr	r0, [r4, #4]
    b8ec:	f018 feb0 	bl	24650 <net_buf_frags_len>
    b8f0:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    b8f4:	1a18      	subs	r0, r3, r0
	if (!len) {
    b8f6:	b970      	cbnz	r0, b916 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    b8f8:	6863      	ldr	r3, [r4, #4]
    b8fa:	7998      	ldrb	r0, [r3, #6]
    b8fc:	f011 f9d0 	bl	1cca0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    b900:	2200      	movs	r2, #0
    b902:	2300      	movs	r3, #0
    b904:	f01a f937 	bl	25b76 <net_buf_alloc_fixed>
		if (!frag) {
    b908:	4605      	mov	r5, r0
    b90a:	2800      	cmp	r0, #0
    b90c:	d0d7      	beq.n	b8be <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    b90e:	4601      	mov	r1, r0
    b910:	6860      	ldr	r0, [r4, #4]
    b912:	f01a f975 	bl	25c00 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    b916:	2300      	movs	r3, #0
    b918:	9300      	str	r3, [sp, #0]
    b91a:	f8d7 9004 	ldr.w	r9, [r7, #4]
    b91e:	4639      	mov	r1, r7
    b920:	2310      	movs	r3, #16
    b922:	aa02      	add	r2, sp, #8
    b924:	4640      	mov	r0, r8
    b926:	47c8      	blx	r9
	if (read < 0) {
    b928:	1e07      	subs	r7, r0, #0
    b92a:	db13      	blt.n	b954 <find_type_cb+0xfc>
	if (read != data->value_len) {
    b92c:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    b92e:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    b930:	42ba      	cmp	r2, r7
    b932:	d037      	beq.n	b9a4 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    b934:	4601      	mov	r1, r0
    b936:	a80b      	add	r0, sp, #44	; 0x2c
    b938:	f018 fa6d 	bl	23e16 <bt_uuid_create>
    b93c:	b988      	cbnz	r0, b962 <find_type_cb+0x10a>
    b93e:	4a1b      	ldr	r2, [pc, #108]	; (b9ac <find_type_cb+0x154>)
    b940:	4b1b      	ldr	r3, [pc, #108]	; (b9b0 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    b942:	7c21      	ldrb	r1, [r4, #16]
    b944:	481b      	ldr	r0, [pc, #108]	; (b9b4 <find_type_cb+0x15c>)
    b946:	1ad2      	subs	r2, r2, r3
    b948:	08d2      	lsrs	r2, r2, #3
    b94a:	0192      	lsls	r2, r2, #6
    b94c:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    b950:	f016 f914 	bl	21b7c <log_1>
	data->group = NULL;
    b954:	2300      	movs	r3, #0
    b956:	60a3      	str	r3, [r4, #8]
    b958:	e7a6      	b.n	b8a8 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    b95a:	4658      	mov	r0, fp
    b95c:	f01a f99c 	bl	25c98 <net_buf_simple_tailroom>
    b960:	e7c9      	b.n	b8f6 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    b962:	b2fa      	uxtb	r2, r7
    b964:	a902      	add	r1, sp, #8
    b966:	a806      	add	r0, sp, #24
    b968:	f018 fa55 	bl	23e16 <bt_uuid_create>
    b96c:	b948      	cbnz	r0, b982 <find_type_cb+0x12a>
    b96e:	4a0f      	ldr	r2, [pc, #60]	; (b9ac <find_type_cb+0x154>)
    b970:	4b0f      	ldr	r3, [pc, #60]	; (b9b0 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    b972:	4811      	ldr	r0, [pc, #68]	; (b9b8 <find_type_cb+0x160>)
    b974:	1ad2      	subs	r2, r2, r3
    b976:	08d2      	lsrs	r2, r2, #3
    b978:	0192      	lsls	r2, r2, #6
    b97a:	f042 0202 	orr.w	r2, r2, #2
    b97e:	4639      	mov	r1, r7
    b980:	e7e6      	b.n	b950 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    b982:	a906      	add	r1, sp, #24
    b984:	a80b      	add	r0, sp, #44	; 0x2c
    b986:	f018 fa18 	bl	23dba <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    b98a:	2800      	cmp	r0, #0
    b98c:	d1e2      	bne.n	b954 <find_type_cb+0xfc>
	data->err = 0x00;
    b98e:	2300      	movs	r3, #0
    b990:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    b992:	2104      	movs	r1, #4
    b994:	f105 0008 	add.w	r0, r5, #8
    b998:	f01a f943 	bl	25c22 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    b99c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    b99e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    b9a0:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    b9a2:	e781      	b.n	b8a8 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    b9a4:	a902      	add	r1, sp, #8
    b9a6:	f018 f8d7 	bl	23b58 <memcmp>
    b9aa:	e7ee      	b.n	b98a <find_type_cb+0x132>
    b9ac:	00026fc8 	.word	0x00026fc8
    b9b0:	00026fc8 	.word	0x00026fc8
    b9b4:	0002c340 	.word	0x0002c340
    b9b8:	0002c35f 	.word	0x0002c35f

0000b9bc <chan_req_sent>:
	if (chan->req) {
    b9bc:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    b9c0:	b13b      	cbz	r3, b9d2 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b9c2:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    b9c6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b9ca:	4802      	ldr	r0, [pc, #8]	; (b9d4 <chan_req_sent+0x18>)
    b9cc:	2300      	movs	r3, #0
    b9ce:	f014 ba5b 	b.w	1fe88 <k_delayed_work_submit_to_queue>
}
    b9d2:	4770      	bx	lr
    b9d4:	2000ac68 	.word	0x2000ac68

0000b9d8 <chan_send>:
{
    b9d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b9dc:	688b      	ldr	r3, [r1, #8]
    b9de:	781b      	ldrb	r3, [r3, #0]
    b9e0:	2bd2      	cmp	r3, #210	; 0xd2
{
    b9e2:	4606      	mov	r6, r0
    b9e4:	460c      	mov	r4, r1
    b9e6:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    b9e8:	d116      	bne.n	ba18 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    b9ea:	6803      	ldr	r3, [r0, #0]
    b9ec:	6818      	ldr	r0, [r3, #0]
    b9ee:	f003 fa15 	bl	ee1c <bt_smp_sign>
		if (err) {
    b9f2:	4605      	mov	r5, r0
    b9f4:	b180      	cbz	r0, ba18 <chan_send+0x40>
    b9f6:	4b24      	ldr	r3, [pc, #144]	; (ba88 <chan_send+0xb0>)
    b9f8:	4924      	ldr	r1, [pc, #144]	; (ba8c <chan_send+0xb4>)
			BT_ERR("Error signing data");
    b9fa:	4825      	ldr	r0, [pc, #148]	; (ba90 <chan_send+0xb8>)
    b9fc:	1ac9      	subs	r1, r1, r3
    b9fe:	08c9      	lsrs	r1, r1, #3
    ba00:	0189      	lsls	r1, r1, #6
    ba02:	f041 0101 	orr.w	r1, r1, #1
    ba06:	f016 f8ac 	bl	21b62 <log_0>
			net_buf_unref(buf);
    ba0a:	4620      	mov	r0, r4
    ba0c:	f011 fa06 	bl	1ce1c <net_buf_unref>
}
    ba10:	4628      	mov	r0, r5
    ba12:	b003      	add	sp, #12
    ba14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    ba18:	f104 0008 	add.w	r0, r4, #8
    ba1c:	f01a f938 	bl	25c90 <net_buf_simple_headroom>
	state->len = buf->len;
    ba20:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    ba24:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    ba26:	b957      	cbnz	r7, ba3e <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
    ba28:	68a3      	ldr	r3, [r4, #8]
    ba2a:	7818      	ldrb	r0, [r3, #0]
    ba2c:	f018 fe2e 	bl	2468c <att_op_get_type>
    ba30:	1e43      	subs	r3, r0, #1
    ba32:	b2db      	uxtb	r3, r3
    ba34:	2b04      	cmp	r3, #4
    ba36:	bf9c      	itt	ls
    ba38:	4a16      	ldrls	r2, [pc, #88]	; (ba94 <chan_send+0xbc>)
    ba3a:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    ba3e:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    ba40:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    ba44:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    ba46:	4b14      	ldr	r3, [pc, #80]	; (ba98 <chan_send+0xc0>)
    ba48:	429f      	cmp	r7, r3
    ba4a:	d018      	beq.n	ba7e <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
    ba4c:	4b13      	ldr	r3, [pc, #76]	; (ba9c <chan_send+0xc4>)
    ba4e:	429f      	cmp	r7, r3
    ba50:	d017      	beq.n	ba82 <chan_send+0xaa>
		return att_sent;
    ba52:	4913      	ldr	r1, [pc, #76]	; (baa0 <chan_send+0xc8>)
    ba54:	4b13      	ldr	r3, [pc, #76]	; (baa4 <chan_send+0xcc>)
    ba56:	4a14      	ldr	r2, [pc, #80]	; (baa8 <chan_send+0xd0>)
    ba58:	428f      	cmp	r7, r1
    ba5a:	bf18      	it	ne
    ba5c:	4613      	movne	r3, r2
			       &chan->chan.chan);
    ba5e:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    ba60:	9600      	str	r6, [sp, #0]
    ba62:	4622      	mov	r2, r4
    ba64:	2104      	movs	r1, #4
    ba66:	f018 fdaf 	bl	245c8 <bt_l2cap_send_cb>
	if (err) {
    ba6a:	4605      	mov	r5, r0
    ba6c:	2800      	cmp	r0, #0
    ba6e:	d0cf      	beq.n	ba10 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
    ba70:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    ba72:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    ba76:	fa10 f088 	uxtah	r0, r0, r8
    ba7a:	60a0      	str	r0, [r4, #8]
}
    ba7c:	e7c8      	b.n	ba10 <chan_send+0x38>
		return att_rsp_sent;
    ba7e:	4b0b      	ldr	r3, [pc, #44]	; (baac <chan_send+0xd4>)
    ba80:	e7ed      	b.n	ba5e <chan_send+0x86>
		return att_cfm_sent;
    ba82:	4b0b      	ldr	r3, [pc, #44]	; (bab0 <chan_send+0xd8>)
    ba84:	e7eb      	b.n	ba5e <chan_send+0x86>
    ba86:	bf00      	nop
    ba88:	00026fc8 	.word	0x00026fc8
    ba8c:	00026fc8 	.word	0x00026fc8
    ba90:	0002c37e 	.word	0x0002c37e
    ba94:	0002781c 	.word	0x0002781c
    ba98:	000249d9 	.word	0x000249d9
    ba9c:	000249bd 	.word	0x000249bd
    baa0:	0000b9bd 	.word	0x0000b9bd
    baa4:	0000b7b1 	.word	0x0000b7b1
    baa8:	00024661 	.word	0x00024661
    baac:	0000b7a1 	.word	0x0000b7a1
    bab0:	0000b791 	.word	0x0000b791

0000bab4 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    bab4:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    bab6:	4a07      	ldr	r2, [pc, #28]	; (bad4 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    bab8:	4604      	mov	r4, r0
    baba:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    babc:	f7ff ff8c 	bl	b9d8 <chan_send>
	if (err) {
    bac0:	b130      	cbz	r0, bad0 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    bac2:	4629      	mov	r1, r5
    bac4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
    bac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    bacc:	f01a b876 	b.w	25bbc <net_buf_put>
}
    bad0:	bd38      	pop	{r3, r4, r5, pc}
    bad2:	bf00      	nop
    bad4:	000249d9 	.word	0x000249d9

0000bad8 <read_group_cb>:
{
    bad8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    badc:	4605      	mov	r5, r0
    bade:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bae0:	f04f 0800 	mov.w	r8, #0
    bae4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bae8:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    baea:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    baec:	f88d 8008 	strb.w	r8, [sp, #8]
    baf0:	a902      	add	r1, sp, #8
{
    baf2:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    baf4:	f8ad 300a 	strh.w	r3, [sp, #10]
    baf8:	f018 f95f 	bl	23dba <bt_uuid_cmp>
    bafc:	b1a0      	cbz	r0, bb28 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bafe:	f642 0301 	movw	r3, #10241	; 0x2801
    bb02:	6828      	ldr	r0, [r5, #0]
    bb04:	f88d 800c 	strb.w	r8, [sp, #12]
    bb08:	a903      	add	r1, sp, #12
    bb0a:	f8ad 300e 	strh.w	r3, [sp, #14]
    bb0e:	f018 f954 	bl	23dba <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    bb12:	b148      	cbz	r0, bb28 <read_group_cb+0x50>
		if (data->group &&
    bb14:	6923      	ldr	r3, [r4, #16]
    bb16:	b11b      	cbz	r3, bb20 <read_group_cb+0x48>
    bb18:	885a      	ldrh	r2, [r3, #2]
    bb1a:	42b2      	cmp	r2, r6
    bb1c:	d200      	bcs.n	bb20 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    bb1e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    bb20:	2001      	movs	r0, #1
}
    bb22:	b004      	add	sp, #16
    bb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bb28:	6861      	ldr	r1, [r4, #4]
    bb2a:	6828      	ldr	r0, [r5, #0]
    bb2c:	f018 f945 	bl	23dba <bt_uuid_cmp>
    bb30:	b110      	cbz	r0, bb38 <read_group_cb+0x60>
		data->group = NULL;
    bb32:	2300      	movs	r3, #0
    bb34:	6123      	str	r3, [r4, #16]
    bb36:	e7f3      	b.n	bb20 <read_group_cb+0x48>
	if (data->rsp->len &&
    bb38:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    bb3a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    bb3c:	781a      	ldrb	r2, [r3, #0]
    bb3e:	b13a      	cbz	r2, bb50 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    bb40:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    bb44:	8981      	ldrh	r1, [r0, #12]
    bb46:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    bb48:	4293      	cmp	r3, r2
    bb4a:	da01      	bge.n	bb50 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    bb4c:	2000      	movs	r0, #0
    bb4e:	e7e8      	b.n	bb22 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    bb50:	2104      	movs	r1, #4
    bb52:	3008      	adds	r0, #8
    bb54:	f01a f865 	bl	25c22 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    bb58:	4b09      	ldr	r3, [pc, #36]	; (bb80 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    bb5a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    bb5c:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    bb5e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    bb60:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    bb62:	4629      	mov	r1, r5
    bb64:	9300      	str	r3, [sp, #0]
    bb66:	9401      	str	r4, [sp, #4]
    bb68:	2300      	movs	r3, #0
    bb6a:	4638      	mov	r0, r7
    bb6c:	f018 fe9b 	bl	248a6 <att_chan_read>
	if (read < 0) {
    bb70:	2800      	cmp	r0, #0
    bb72:	dbeb      	blt.n	bb4c <read_group_cb+0x74>
	if (!data->group) {
    bb74:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    bb76:	3800      	subs	r0, #0
    bb78:	bf18      	it	ne
    bb7a:	2001      	movne	r0, #1
    bb7c:	e7d1      	b.n	bb22 <read_group_cb+0x4a>
    bb7e:	bf00      	nop
    bb80:	00024795 	.word	0x00024795

0000bb84 <read_type_cb>:
{
    bb84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    bb88:	f8d2 8000 	ldr.w	r8, [r2]
{
    bb8c:	4606      	mov	r6, r0
    bb8e:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bb90:	6800      	ldr	r0, [r0, #0]
    bb92:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    bb94:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    bb98:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bb9a:	f018 f90e 	bl	23dba <bt_uuid_cmp>
    bb9e:	4607      	mov	r7, r0
    bba0:	2800      	cmp	r0, #0
    bba2:	d13e      	bne.n	bc22 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    bba4:	4628      	mov	r0, r5
    bba6:	2215      	movs	r2, #21
    bba8:	4631      	mov	r1, r6
    bbaa:	f019 fbc2 	bl	25332 <bt_gatt_check_perm>
    bbae:	4605      	mov	r5, r0
    bbb0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    bbb2:	b148      	cbz	r0, bbc8 <read_type_cb+0x44>
		if (data->rsp->len) {
    bbb4:	68e3      	ldr	r3, [r4, #12]
    bbb6:	781b      	ldrb	r3, [r3, #0]
    bbb8:	b923      	cbnz	r3, bbc4 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    bbba:	2500      	movs	r5, #0
}
    bbbc:	4628      	mov	r0, r5
    bbbe:	b003      	add	sp, #12
    bbc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    bbc4:	7527      	strb	r7, [r4, #20]
    bbc6:	e7f8      	b.n	bbba <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    bbc8:	68a0      	ldr	r0, [r4, #8]
    bbca:	f01a f808 	bl	25bde <net_buf_frag_last>
    bbce:	2102      	movs	r1, #2
    bbd0:	3008      	adds	r0, #8
    bbd2:	f01a f826 	bl	25c22 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    bbd6:	4b14      	ldr	r3, [pc, #80]	; (bc28 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    bbd8:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    bbda:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    bbdc:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    bbe0:	4631      	mov	r1, r6
    bbe2:	9300      	str	r3, [sp, #0]
    bbe4:	9401      	str	r4, [sp, #4]
    bbe6:	462b      	mov	r3, r5
    bbe8:	4640      	mov	r0, r8
    bbea:	f018 fe5c 	bl	248a6 <att_chan_read>
	if (read < 0) {
    bbee:	2800      	cmp	r0, #0
    bbf0:	da07      	bge.n	bc02 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    bbf2:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    bbf6:	bf26      	itte	cs
    bbf8:	4240      	negcs	r0, r0
    bbfa:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    bbfc:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    bbfe:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    bc00:	e7dc      	b.n	bbbc <read_type_cb+0x38>
	if (!data->item) {
    bc02:	6923      	ldr	r3, [r4, #16]
    bc04:	2b00      	cmp	r3, #0
    bc06:	d0d8      	beq.n	bbba <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    bc08:	68a0      	ldr	r0, [r4, #8]
    bc0a:	f018 fd21 	bl	24650 <net_buf_frags_len>
    bc0e:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    bc12:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    bc14:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    bc16:	7818      	ldrb	r0, [r3, #0]
    bc18:	4285      	cmp	r5, r0
    bc1a:	bf94      	ite	ls
    bc1c:	2500      	movls	r5, #0
    bc1e:	2501      	movhi	r5, #1
    bc20:	e7cc      	b.n	bbbc <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    bc22:	2501      	movs	r5, #1
    bc24:	e7ca      	b.n	bbbc <read_type_cb+0x38>
    bc26:	bf00      	nop
    bc28:	0002466d 	.word	0x0002466d

0000bc2c <prep_write_cb>:
{
    bc2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bc30:	4614      	mov	r4, r2
    bc32:	4606      	mov	r6, r0
    bc34:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    bc36:	222a      	movs	r2, #42	; 0x2a
    bc38:	4601      	mov	r1, r0
    bc3a:	6820      	ldr	r0, [r4, #0]
    bc3c:	f019 fb79 	bl	25332 <bt_gatt_check_perm>
    bc40:	4605      	mov	r5, r0
    bc42:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    bc44:	2800      	cmp	r0, #0
    bc46:	d12e      	bne.n	bca6 <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    bc48:	7cb3      	ldrb	r3, [r6, #18]
    bc4a:	065b      	lsls	r3, r3, #25
    bc4c:	d516      	bpl.n	bc7c <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    bc4e:	2301      	movs	r3, #1
    bc50:	9301      	str	r3, [sp, #4]
    bc52:	89e3      	ldrh	r3, [r4, #14]
    bc54:	9300      	str	r3, [sp, #0]
    bc56:	f8d6 8008 	ldr.w	r8, [r6, #8]
    bc5a:	89a3      	ldrh	r3, [r4, #12]
    bc5c:	68a2      	ldr	r2, [r4, #8]
    bc5e:	6820      	ldr	r0, [r4, #0]
    bc60:	4631      	mov	r1, r6
    bc62:	47c0      	blx	r8
	if (write != 0) {
    bc64:	b150      	cbz	r0, bc7c <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    bc66:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    bc6a:	bf26      	itte	cs
    bc6c:	4243      	negcs	r3, r0
    bc6e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    bc70:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    bc72:	7423      	strb	r3, [r4, #16]
}
    bc74:	4628      	mov	r0, r5
    bc76:	b002      	add	sp, #8
    bc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    bc7c:	480b      	ldr	r0, [pc, #44]	; (bcac <prep_write_cb+0x80>)
    bc7e:	2200      	movs	r2, #0
    bc80:	2300      	movs	r3, #0
    bc82:	f019 ff78 	bl	25b76 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    bc86:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    bc88:	b908      	cbnz	r0, bc8e <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    bc8a:	2309      	movs	r3, #9
    bc8c:	e7f1      	b.n	bc72 <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    bc8e:	89e3      	ldrh	r3, [r4, #14]
    bc90:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    bc92:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    bc94:	89a2      	ldrh	r2, [r4, #12]
    bc96:	68a1      	ldr	r1, [r4, #8]
    bc98:	3008      	adds	r0, #8
    bc9a:	f019 ffc8 	bl	25c2e <net_buf_simple_add_mem>
	data->err = 0U;
    bc9e:	2300      	movs	r3, #0
    bca0:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    bca2:	2501      	movs	r5, #1
    bca4:	e7e6      	b.n	bc74 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    bca6:	2500      	movs	r5, #0
    bca8:	e7e4      	b.n	bc74 <prep_write_cb+0x48>
    bcaa:	bf00      	nop
    bcac:	2000a108 	.word	0x2000a108

0000bcb0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    bcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    bcb2:	2300      	movs	r3, #0
{
    bcb4:	4606      	mov	r6, r0
    bcb6:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    bcb8:	4828      	ldr	r0, [pc, #160]	; (bd5c <bt_att_accept+0xac>)
    bcba:	2200      	movs	r2, #0
    bcbc:	4669      	mov	r1, sp
    bcbe:	f013 fabb 	bl	1f238 <k_mem_slab_alloc>
    bcc2:	4604      	mov	r4, r0
    bcc4:	b178      	cbz	r0, bce6 <bt_att_accept+0x36>
    bcc6:	4a26      	ldr	r2, [pc, #152]	; (bd60 <bt_att_accept+0xb0>)
    bcc8:	4b26      	ldr	r3, [pc, #152]	; (bd64 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
    bcca:	4827      	ldr	r0, [pc, #156]	; (bd68 <bt_att_accept+0xb8>)
    bccc:	1ad2      	subs	r2, r2, r3
    bcce:	08d2      	lsrs	r2, r2, #3
    bcd0:	0192      	lsls	r2, r2, #6
    bcd2:	f042 0201 	orr.w	r2, r2, #1
    bcd6:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    bcd8:	f015 ff50 	bl	21b7c <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    bcdc:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    bce0:	4620      	mov	r0, r4
    bce2:	b003      	add	sp, #12
    bce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    bce6:	4601      	mov	r1, r0
    bce8:	2244      	movs	r2, #68	; 0x44
    bcea:	9800      	ldr	r0, [sp, #0]
    bcec:	f017 ff70 	bl	23bd0 <memset>
	att->conn = conn;
    bcf0:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    bcf2:	481e      	ldr	r0, [pc, #120]	; (bd6c <bt_att_accept+0xbc>)
	list->tail = NULL;
    bcf4:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    bcf6:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    bcfa:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    bcfe:	2200      	movs	r2, #0
    bd00:	2300      	movs	r3, #0
    bd02:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    bd04:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    bd06:	f013 fa97 	bl	1f238 <k_mem_slab_alloc>
    bd0a:	4604      	mov	r4, r0
    bd0c:	b148      	cbz	r0, bd22 <bt_att_accept+0x72>
    bd0e:	4a14      	ldr	r2, [pc, #80]	; (bd60 <bt_att_accept+0xb0>)
    bd10:	4b14      	ldr	r3, [pc, #80]	; (bd64 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    bd12:	6829      	ldr	r1, [r5, #0]
    bd14:	4816      	ldr	r0, [pc, #88]	; (bd70 <bt_att_accept+0xc0>)
    bd16:	1ad2      	subs	r2, r2, r3
    bd18:	08d2      	lsrs	r2, r2, #3
    bd1a:	0192      	lsls	r2, r2, #6
    bd1c:	f042 0201 	orr.w	r2, r2, #1
    bd20:	e7da      	b.n	bcd8 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    bd22:	4601      	mov	r1, r0
    bd24:	f44f 728c 	mov.w	r2, #280	; 0x118
    bd28:	9801      	ldr	r0, [sp, #4]
    bd2a:	f017 ff51 	bl	23bd0 <memset>
	chan->chan.chan.ops = &ops;
    bd2e:	9801      	ldr	r0, [sp, #4]
    bd30:	4b10      	ldr	r3, [pc, #64]	; (bd74 <bt_att_accept+0xc4>)
    bd32:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    bd34:	30c8      	adds	r0, #200	; 0xc8
    bd36:	f01a fc03 	bl	26540 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bd3a:	9b01      	ldr	r3, [sp, #4]
    bd3c:	f3bf 8f5b 	dmb	ish
    bd40:	33c0      	adds	r3, #192	; 0xc0
    bd42:	e853 2f00 	ldrex	r2, [r3]
    bd46:	e843 4100 	strex	r1, r4, [r3]
    bd4a:	2900      	cmp	r1, #0
    bd4c:	d1f9      	bne.n	bd42 <bt_att_accept+0x92>
    bd4e:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    bd52:	9b01      	ldr	r3, [sp, #4]
    bd54:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    bd58:	603b      	str	r3, [r7, #0]
	return 0;
    bd5a:	e7c1      	b.n	bce0 <bt_att_accept+0x30>
    bd5c:	20009f0c 	.word	0x20009f0c
    bd60:	00026fc8 	.word	0x00026fc8
    bd64:	00026fc8 	.word	0x00026fc8
    bd68:	0002c391 	.word	0x0002c391
    bd6c:	20009f28 	.word	0x20009f28
    bd70:	0002c3b6 	.word	0x0002c3b6
    bd74:	20000304 	.word	0x20000304

0000bd78 <bt_att_connected>:
{
    bd78:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    bd7a:	2104      	movs	r1, #4
{
    bd7c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    bd7e:	6800      	ldr	r0, [r0, #0]
    bd80:	f018 fc3b 	bl	245fa <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    bd84:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    bd88:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    bd8a:	b93b      	cbnz	r3, bd9c <bt_att_connected+0x24>
    bd8c:	f105 000c 	add.w	r0, r5, #12
    bd90:	f01a fbd6 	bl	26540 <z_impl_k_queue_init>
    bd94:	f105 0024 	add.w	r0, r5, #36	; 0x24
    bd98:	f01a fbd2 	bl	26540 <z_impl_k_queue_init>
	parent->next = child;
    bd9c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    bd9e:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
Z_GENLIST_PREPEND(slist, snode)
    bda2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    bda4:	f504 7386 	add.w	r3, r4, #268	; 0x10c
	list->head = node;
    bda8:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    bdaa:	b902      	cbnz	r2, bdae <bt_att_connected+0x36>
	list->tail = node;
    bdac:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bdae:	f3bf 8f5b 	dmb	ish
    bdb2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    bdb6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    bdba:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    bdbc:	bf5e      	ittt	pl
    bdbe:	2317      	movpl	r3, #23
    bdc0:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    bdc4:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    bdc8:	2230      	movs	r2, #48	; 0x30
    bdca:	2100      	movs	r1, #0
    bdcc:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    bdd0:	f017 fefe 	bl	23bd0 <memset>
    bdd4:	4b01      	ldr	r3, [pc, #4]	; (bddc <bt_att_connected+0x64>)
    bdd6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
    bdda:	bd38      	pop	{r3, r4, r5, pc}
    bddc:	0000c86d 	.word	0x0000c86d

0000bde0 <bt_att_chan_create_pdu>:
{
    bde0:	b538      	push	{r3, r4, r5, lr}
    bde2:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    bde4:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    bde8:	3201      	adds	r2, #1
    bdea:	428a      	cmp	r2, r1
    bdec:	d90c      	bls.n	be08 <bt_att_chan_create_pdu+0x28>
    bdee:	481a      	ldr	r0, [pc, #104]	; (be58 <bt_att_chan_create_pdu+0x78>)
    bdf0:	4b1a      	ldr	r3, [pc, #104]	; (be5c <bt_att_chan_create_pdu+0x7c>)
    bdf2:	1a1b      	subs	r3, r3, r0
    bdf4:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    bdf6:	019b      	lsls	r3, r3, #6
    bdf8:	4819      	ldr	r0, [pc, #100]	; (be60 <bt_att_chan_create_pdu+0x80>)
    bdfa:	f043 0302 	orr.w	r3, r3, #2
    bdfe:	f015 fed1 	bl	21ba4 <log_2>
		return NULL;
    be02:	2400      	movs	r4, #0
}
    be04:	4620      	mov	r0, r4
    be06:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    be08:	4628      	mov	r0, r5
    be0a:	f018 fc3f 	bl	2468c <att_op_get_type>
    be0e:	2802      	cmp	r0, #2
    be10:	d001      	beq.n	be16 <bt_att_chan_create_pdu+0x36>
    be12:	2804      	cmp	r0, #4
    be14:	d114      	bne.n	be40 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    be16:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    be1a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    be1c:	2100      	movs	r1, #0
    be1e:	4608      	mov	r0, r1
    be20:	f018 fbcf 	bl	245c2 <bt_l2cap_create_pdu_timeout>
    be24:	4604      	mov	r4, r0
	if (!buf) {
    be26:	b980      	cbnz	r0, be4a <bt_att_chan_create_pdu+0x6a>
    be28:	4b0b      	ldr	r3, [pc, #44]	; (be58 <bt_att_chan_create_pdu+0x78>)
    be2a:	4a0c      	ldr	r2, [pc, #48]	; (be5c <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    be2c:	480d      	ldr	r0, [pc, #52]	; (be64 <bt_att_chan_create_pdu+0x84>)
    be2e:	1ad2      	subs	r2, r2, r3
    be30:	08d2      	lsrs	r2, r2, #3
    be32:	0192      	lsls	r2, r2, #6
    be34:	f042 0201 	orr.w	r2, r2, #1
    be38:	4629      	mov	r1, r5
    be3a:	f015 fe9f 	bl	21b7c <log_1>
		return NULL;
    be3e:	e7e1      	b.n	be04 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    be40:	f04f 32ff 	mov.w	r2, #4294967295
    be44:	f04f 33ff 	mov.w	r3, #4294967295
    be48:	e7e8      	b.n	be1c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    be4a:	2101      	movs	r1, #1
    be4c:	3008      	adds	r0, #8
    be4e:	f019 fee8 	bl	25c22 <net_buf_simple_add>
	hdr->code = op;
    be52:	7005      	strb	r5, [r0, #0]
	return buf;
    be54:	e7d6      	b.n	be04 <bt_att_chan_create_pdu+0x24>
    be56:	bf00      	nop
    be58:	00026fc8 	.word	0x00026fc8
    be5c:	00026fc8 	.word	0x00026fc8
    be60:	0002c3db 	.word	0x0002c3db
    be64:	0002c1c8 	.word	0x0002c1c8

0000be68 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    be68:	898b      	ldrh	r3, [r1, #12]
{
    be6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be6e:	4604      	mov	r4, r0
    be70:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    be72:	b963      	cbnz	r3, be8e <bt_att_recv+0x26>
    be74:	494c      	ldr	r1, [pc, #304]	; (bfa8 <bt_att_recv+0x140>)
    be76:	4b4d      	ldr	r3, [pc, #308]	; (bfac <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    be78:	484d      	ldr	r0, [pc, #308]	; (bfb0 <bt_att_recv+0x148>)
    be7a:	1ac9      	subs	r1, r1, r3
    be7c:	08c9      	lsrs	r1, r1, #3
    be7e:	0189      	lsls	r1, r1, #6
    be80:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    be84:	f015 fe6d 	bl	21b62 <log_0>
}
    be88:	2000      	movs	r0, #0
    be8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    be8e:	2101      	movs	r1, #1
    be90:	f108 0008 	add.w	r0, r8, #8
    be94:	f019 feec 	bl	25c70 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    be98:	f854 3c08 	ldr.w	r3, [r4, #-8]
    be9c:	4605      	mov	r5, r0
    be9e:	2b00      	cmp	r3, #0
    bea0:	d0f2      	beq.n	be88 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    bea2:	7801      	ldrb	r1, [r0, #0]
    bea4:	4a43      	ldr	r2, [pc, #268]	; (bfb4 <bt_att_recv+0x14c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    bea6:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    beaa:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    beac:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    beb0:	4288      	cmp	r0, r1
    beb2:	d11e      	bne.n	bef2 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    beb4:	00d8      	lsls	r0, r3, #3
    beb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    beba:	789f      	ldrb	r7, [r3, #2]
    bebc:	2f01      	cmp	r7, #1
    bebe:	d133      	bne.n	bf28 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bec0:	f3bf 8f5b 	dmb	ish
    bec4:	34b8      	adds	r4, #184	; 0xb8
    bec6:	e854 3f00 	ldrex	r3, [r4]
    beca:	f043 0101 	orr.w	r1, r3, #1
    bece:	e844 1c00 	strex	ip, r1, [r4]
    bed2:	f1bc 0f00 	cmp.w	ip, #0
    bed6:	d1f6      	bne.n	bec6 <bt_att_recv+0x5e>
    bed8:	f3bf 8f5b 	dmb	ish
    bedc:	07d9      	lsls	r1, r3, #31
    bede:	d53e      	bpl.n	bf5e <bt_att_recv+0xf6>
    bee0:	4931      	ldr	r1, [pc, #196]	; (bfa8 <bt_att_recv+0x140>)
    bee2:	4b32      	ldr	r3, [pc, #200]	; (bfac <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    bee4:	4834      	ldr	r0, [pc, #208]	; (bfb8 <bt_att_recv+0x150>)
    bee6:	1ac9      	subs	r1, r1, r3
    bee8:	08c9      	lsrs	r1, r1, #3
    beea:	0189      	lsls	r1, r1, #6
    beec:	f041 0102 	orr.w	r1, r1, #2
    bef0:	e7c8      	b.n	be84 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    bef2:	3301      	adds	r3, #1
    bef4:	2b0e      	cmp	r3, #14
    bef6:	d1d9      	bne.n	beac <bt_att_recv+0x44>
    bef8:	4b2c      	ldr	r3, [pc, #176]	; (bfac <bt_att_recv+0x144>)
    befa:	4a2b      	ldr	r2, [pc, #172]	; (bfa8 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    befc:	482f      	ldr	r0, [pc, #188]	; (bfbc <bt_att_recv+0x154>)
    befe:	1ad2      	subs	r2, r2, r3
    bf00:	08d2      	lsrs	r2, r2, #3
    bf02:	0192      	lsls	r2, r2, #6
    bf04:	f042 0202 	orr.w	r2, r2, #2
    bf08:	f015 fe38 	bl	21b7c <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    bf0c:	7829      	ldrb	r1, [r5, #0]
    bf0e:	4608      	mov	r0, r1
    bf10:	f018 fbbc 	bl	2468c <att_op_get_type>
    bf14:	2800      	cmp	r0, #0
    bf16:	d0b7      	beq.n	be88 <bt_att_recv+0x20>
	if (!req) {
    bf18:	2900      	cmp	r1, #0
    bf1a:	d0b5      	beq.n	be88 <bt_att_recv+0x20>
    bf1c:	2306      	movs	r3, #6
    bf1e:	2200      	movs	r2, #0
    bf20:	4630      	mov	r0, r6
    bf22:	f018 fdf2 	bl	24b0a <send_err_rsp.part.0>
    bf26:	e7af      	b.n	be88 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    bf28:	2f05      	cmp	r7, #5
    bf2a:	d118      	bne.n	bf5e <bt_att_recv+0xf6>
    bf2c:	f3bf 8f5b 	dmb	ish
    bf30:	34b8      	adds	r4, #184	; 0xb8
    bf32:	e854 3f00 	ldrex	r3, [r4]
    bf36:	f043 0102 	orr.w	r1, r3, #2
    bf3a:	e844 1c00 	strex	ip, r1, [r4]
    bf3e:	f1bc 0f00 	cmp.w	ip, #0
    bf42:	d1f6      	bne.n	bf32 <bt_att_recv+0xca>
    bf44:	f3bf 8f5b 	dmb	ish
    bf48:	079b      	lsls	r3, r3, #30
    bf4a:	d508      	bpl.n	bf5e <bt_att_recv+0xf6>
    bf4c:	4916      	ldr	r1, [pc, #88]	; (bfa8 <bt_att_recv+0x140>)
    bf4e:	4b17      	ldr	r3, [pc, #92]	; (bfac <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    bf50:	481b      	ldr	r0, [pc, #108]	; (bfc0 <bt_att_recv+0x158>)
    bf52:	1ac9      	subs	r1, r1, r3
    bf54:	08c9      	lsrs	r1, r1, #3
    bf56:	0189      	lsls	r1, r1, #6
    bf58:	f041 0102 	orr.w	r1, r1, #2
    bf5c:	e792      	b.n	be84 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    bf5e:	1813      	adds	r3, r2, r0
    bf60:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    bf64:	785a      	ldrb	r2, [r3, #1]
    bf66:	428a      	cmp	r2, r1
    bf68:	d90e      	bls.n	bf88 <bt_att_recv+0x120>
    bf6a:	4a10      	ldr	r2, [pc, #64]	; (bfac <bt_att_recv+0x144>)
    bf6c:	4b0e      	ldr	r3, [pc, #56]	; (bfa8 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    bf6e:	4815      	ldr	r0, [pc, #84]	; (bfc4 <bt_att_recv+0x15c>)
    bf70:	1a9b      	subs	r3, r3, r2
    bf72:	08db      	lsrs	r3, r3, #3
    bf74:	019b      	lsls	r3, r3, #6
    bf76:	782a      	ldrb	r2, [r5, #0]
    bf78:	f043 0301 	orr.w	r3, r3, #1
    bf7c:	f015 fe12 	bl	21ba4 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    bf80:	2f01      	cmp	r7, #1
    bf82:	d181      	bne.n	be88 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    bf84:	2304      	movs	r3, #4
    bf86:	e00a      	b.n	bf9e <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    bf88:	685b      	ldr	r3, [r3, #4]
    bf8a:	4641      	mov	r1, r8
    bf8c:	4630      	mov	r0, r6
    bf8e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    bf90:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    bf92:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    bf94:	f47f af78 	bne.w	be88 <bt_att_recv+0x20>
    bf98:	2800      	cmp	r0, #0
    bf9a:	f43f af75 	beq.w	be88 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    bf9e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    bfa0:	2900      	cmp	r1, #0
    bfa2:	f43f af71 	beq.w	be88 <bt_att_recv+0x20>
    bfa6:	e7ba      	b.n	bf1e <bt_att_recv+0xb6>
    bfa8:	00026fc8 	.word	0x00026fc8
    bfac:	00026fc8 	.word	0x00026fc8
    bfb0:	0002c400 	.word	0x0002c400
    bfb4:	00027830 	.word	0x00027830
    bfb8:	0002c41b 	.word	0x0002c41b
    bfbc:	0002c475 	.word	0x0002c475
    bfc0:	0002c437 	.word	0x0002c437
    bfc4:	0002c456 	.word	0x0002c456

0000bfc8 <att_write_rsp>:
{
    bfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfcc:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    bfce:	6803      	ldr	r3, [r0, #0]
    bfd0:	460e      	mov	r6, r1
    bfd2:	3900      	subs	r1, #0
{
    bfd4:	b086      	sub	sp, #24
    bfd6:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    bfd8:	bf18      	it	ne
    bfda:	2101      	movne	r1, #1
    bfdc:	6818      	ldr	r0, [r3, #0]
{
    bfde:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    bfe0:	f019 f9d2 	bl	25388 <bt_gatt_change_aware>
    bfe4:	2800      	cmp	r0, #0
    bfe6:	d04d      	beq.n	c084 <att_write_rsp+0xbc>
	if (!handle) {
    bfe8:	2f00      	cmp	r7, #0
    bfea:	d04d      	beq.n	c088 <att_write_rsp+0xc0>
	(void)memset(&data, 0, sizeof(data));
    bfec:	2218      	movs	r2, #24
    bfee:	2100      	movs	r1, #0
    bff0:	4668      	mov	r0, sp
    bff2:	f017 fded 	bl	23bd0 <memset>
	if (rsp) {
    bff6:	f1b8 0f00 	cmp.w	r8, #0
    bffa:	d126      	bne.n	c04a <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    bffc:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    bffe:	4a23      	ldr	r2, [pc, #140]	; (c08c <att_write_rsp+0xc4>)
	data.conn = chan->att->conn;
    c000:	681b      	ldr	r3, [r3, #0]
    c002:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    c004:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    c008:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    c00c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c00e:	9303      	str	r3, [sp, #12]
	data.len = len;
    c010:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    c014:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c018:	2301      	movs	r3, #1
    c01a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c01e:	4639      	mov	r1, r7
    c020:	466b      	mov	r3, sp
    c022:	4638      	mov	r0, r7
	data.req = req;
    c024:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c028:	f018 fb5d 	bl	246e6 <bt_gatt_foreach_attr>
	if (data.err) {
    c02c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c030:	b30c      	cbz	r4, c076 <att_write_rsp+0xae>
		if (rsp) {
    c032:	f1b8 0f00 	cmp.w	r8, #0
    c036:	d019      	beq.n	c06c <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    c038:	9801      	ldr	r0, [sp, #4]
    c03a:	f010 feef 	bl	1ce1c <net_buf_unref>
	if (!req) {
    c03e:	b976      	cbnz	r6, c05e <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c040:	2400      	movs	r4, #0
}
    c042:	4620      	mov	r0, r4
    c044:	b006      	add	sp, #24
    c046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    c04a:	2200      	movs	r2, #0
    c04c:	4641      	mov	r1, r8
    c04e:	4628      	mov	r0, r5
    c050:	f7ff fec6 	bl	bde0 <bt_att_chan_create_pdu>
    c054:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    c056:	2800      	cmp	r0, #0
    c058:	d1d0      	bne.n	bffc <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    c05a:	240e      	movs	r4, #14
    c05c:	e7f1      	b.n	c042 <att_write_rsp+0x7a>
    c05e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c062:	463a      	mov	r2, r7
    c064:	4631      	mov	r1, r6
    c066:	4628      	mov	r0, r5
    c068:	f018 fd4f 	bl	24b0a <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c06c:	2e18      	cmp	r6, #24
    c06e:	d1e7      	bne.n	c040 <att_write_rsp+0x78>
    c070:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c074:	e7e5      	b.n	c042 <att_write_rsp+0x7a>
	if (data.buf) {
    c076:	9901      	ldr	r1, [sp, #4]
    c078:	2900      	cmp	r1, #0
    c07a:	d0e1      	beq.n	c040 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c07c:	4628      	mov	r0, r5
    c07e:	f7ff fd19 	bl	bab4 <bt_att_chan_send_rsp.constprop.0>
    c082:	e7de      	b.n	c042 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c084:	2412      	movs	r4, #18
    c086:	e7dc      	b.n	c042 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    c088:	2401      	movs	r4, #1
    c08a:	e7da      	b.n	c042 <att_write_rsp+0x7a>
    c08c:	000247b5 	.word	0x000247b5

0000c090 <att_signed_write_cmd>:
{
    c090:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    c094:	4688      	mov	r8, r1
	struct bt_conn *conn = chan->chan.chan.conn;
    c096:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(req->handle);
    c098:	f858 3f08 	ldr.w	r3, [r8, #8]!
{
    c09c:	460c      	mov	r4, r1
    c09e:	4606      	mov	r6, r0
	return net_buf_simple_push(&buf->b, len);
    c0a0:	2101      	movs	r1, #1
    c0a2:	4640      	mov	r0, r8
	handle = sys_le16_to_cpu(req->handle);
    c0a4:	881f      	ldrh	r7, [r3, #0]
    c0a6:	f019 fdd3 	bl	25c50 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    c0aa:	4628      	mov	r0, r5
    c0ac:	4621      	mov	r1, r4
    c0ae:	f002 fe39 	bl	ed24 <bt_smp_sign_verify>
	if (err) {
    c0b2:	4605      	mov	r5, r0
    c0b4:	b168      	cbz	r0, c0d2 <att_signed_write_cmd+0x42>
    c0b6:	4b12      	ldr	r3, [pc, #72]	; (c100 <att_signed_write_cmd+0x70>)
    c0b8:	4912      	ldr	r1, [pc, #72]	; (c104 <att_signed_write_cmd+0x74>)
		BT_ERR("Error verifying data");
    c0ba:	4813      	ldr	r0, [pc, #76]	; (c108 <att_signed_write_cmd+0x78>)
    c0bc:	1ac9      	subs	r1, r1, r3
    c0be:	08c9      	lsrs	r1, r1, #3
    c0c0:	0189      	lsls	r1, r1, #6
    c0c2:	f041 0101 	orr.w	r1, r1, #1
    c0c6:	f015 fd4c 	bl	21b62 <log_0>
		return 0;
    c0ca:	2000      	movs	r0, #0
}
    c0cc:	b004      	add	sp, #16
    c0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull(&buf->b, len);
    c0d2:	2101      	movs	r1, #1
    c0d4:	4640      	mov	r0, r8
    c0d6:	f019 fdc3 	bl	25c60 <net_buf_simple_pull>
    c0da:	2102      	movs	r1, #2
    c0dc:	4640      	mov	r0, r8
    c0de:	f019 fdbf 	bl	25c60 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
    c0e2:	89a3      	ldrh	r3, [r4, #12]
    c0e4:	3b0c      	subs	r3, #12
    c0e6:	b29b      	uxth	r3, r3
    c0e8:	9302      	str	r3, [sp, #8]
    c0ea:	68a3      	ldr	r3, [r4, #8]
    c0ec:	462a      	mov	r2, r5
    c0ee:	e9cd 5300 	strd	r5, r3, [sp]
    c0f2:	4629      	mov	r1, r5
    c0f4:	463b      	mov	r3, r7
    c0f6:	4630      	mov	r0, r6
    c0f8:	f7ff ff66 	bl	bfc8 <att_write_rsp>
    c0fc:	e7e6      	b.n	c0cc <att_signed_write_cmd+0x3c>
    c0fe:	bf00      	nop
    c100:	00026fc8 	.word	0x00026fc8
    c104:	00026fc8 	.word	0x00026fc8
    c108:	0002c48f 	.word	0x0002c48f

0000c10c <bt_att_create_pdu>:
{
    c10c:	b570      	push	{r4, r5, r6, lr}
    c10e:	460e      	mov	r6, r1
    c110:	4615      	mov	r5, r2
	att = att_get(conn);
    c112:	f7ff fb55 	bl	b7c0 <att_get>
	if (!att) {
    c116:	b1c0      	cbz	r0, c14a <bt_att_create_pdu+0x3e>
	return list->head;
    c118:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    c11a:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c11c:	b15b      	cbz	r3, c136 <bt_att_create_pdu+0x2a>
    c11e:	f5b3 708a 	subs.w	r0, r3, #276	; 0x114
    c122:	d008      	beq.n	c136 <bt_att_create_pdu+0x2a>
	return node->next;
    c124:	681b      	ldr	r3, [r3, #0]
    c126:	b10b      	cbz	r3, c12c <bt_att_create_pdu+0x20>
    c128:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    c12c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    c130:	4291      	cmp	r1, r2
    c132:	d90c      	bls.n	c14e <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c134:	b98b      	cbnz	r3, c15a <bt_att_create_pdu+0x4e>
    c136:	4a0e      	ldr	r2, [pc, #56]	; (c170 <bt_att_create_pdu+0x64>)
    c138:	4b0e      	ldr	r3, [pc, #56]	; (c174 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    c13a:	480f      	ldr	r0, [pc, #60]	; (c178 <bt_att_create_pdu+0x6c>)
    c13c:	1ad2      	subs	r2, r2, r3
    c13e:	08d2      	lsrs	r2, r2, #3
    c140:	0192      	lsls	r2, r2, #6
    c142:	f042 0202 	orr.w	r2, r2, #2
    c146:	f015 fd19 	bl	21b7c <log_1>
}
    c14a:	2000      	movs	r0, #0
    c14c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    c14e:	462a      	mov	r2, r5
    c150:	4631      	mov	r1, r6
}
    c152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    c156:	f7ff be43 	b.w	bde0 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c15a:	f513 748a 	adds.w	r4, r3, #276	; 0x114
    c15e:	d004      	beq.n	c16a <bt_att_create_pdu+0x5e>
	return node->next;
    c160:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c164:	b10c      	cbz	r4, c16a <bt_att_create_pdu+0x5e>
    c166:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
{
    c16a:	4618      	mov	r0, r3
    c16c:	4623      	mov	r3, r4
    c16e:	e7dd      	b.n	c12c <bt_att_create_pdu+0x20>
    c170:	00026fc8 	.word	0x00026fc8
    c174:	00026fc8 	.word	0x00026fc8
    c178:	0002c4a4 	.word	0x0002c4a4

0000c17c <att_prepare_write_req>:
{
    c17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c180:	460c      	mov	r4, r1
    c182:	b087      	sub	sp, #28
    c184:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    c186:	2104      	movs	r1, #4
    c188:	f104 0008 	add.w	r0, r4, #8
    c18c:	f019 fd70 	bl	25c70 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    c190:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    c194:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    c198:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    c19c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    c1a0:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    c1a2:	2101      	movs	r1, #1
    c1a4:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    c1a6:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    c1aa:	f019 f8ed 	bl	25388 <bt_gatt_change_aware>
    c1ae:	2800      	cmp	r0, #0
    c1b0:	d04a      	beq.n	c248 <att_prepare_write_req+0xcc>
	if (!handle) {
    c1b2:	2e00      	cmp	r6, #0
    c1b4:	d04a      	beq.n	c24c <att_prepare_write_req+0xd0>
	(void)memset(&data, 0, sizeof(data));
    c1b6:	2214      	movs	r2, #20
    c1b8:	2100      	movs	r1, #0
    c1ba:	a801      	add	r0, sp, #4
    c1bc:	f017 fd08 	bl	23bd0 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c1c0:	2301      	movs	r3, #1
    c1c2:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    c1c6:	4a23      	ldr	r2, [pc, #140]	; (c254 <att_prepare_write_req+0xd8>)
	data.conn = conn;
    c1c8:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    c1cc:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    c1ce:	ab01      	add	r3, sp, #4
    c1d0:	4631      	mov	r1, r6
    c1d2:	4630      	mov	r0, r6
	data.offset = offset;
    c1d4:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    c1d8:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    c1dc:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    c1e0:	f018 fa81 	bl	246e6 <bt_gatt_foreach_attr>
	if (data.err) {
    c1e4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c1e8:	b154      	cbz	r4, c200 <att_prepare_write_req+0x84>
	if (!req) {
    c1ea:	4623      	mov	r3, r4
    c1ec:	4632      	mov	r2, r6
    c1ee:	2116      	movs	r1, #22
    c1f0:	4628      	mov	r0, r5
    c1f2:	f018 fc8a 	bl	24b0a <send_err_rsp.part.0>
		return 0;
    c1f6:	2400      	movs	r4, #0
}
    c1f8:	4620      	mov	r0, r4
    c1fa:	b007      	add	sp, #28
    c1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    c200:	6828      	ldr	r0, [r5, #0]
    c202:	9902      	ldr	r1, [sp, #8]
    c204:	3024      	adds	r0, #36	; 0x24
    c206:	f019 fcd9 	bl	25bbc <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    c20a:	4622      	mov	r2, r4
    c20c:	2117      	movs	r1, #23
    c20e:	4658      	mov	r0, fp
    c210:	f7ff ff7c 	bl	c10c <bt_att_create_pdu>
    c214:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c216:	b1d8      	cbz	r0, c250 <att_prepare_write_req+0xd4>
	return net_buf_simple_add(&buf->b, len);
    c218:	2104      	movs	r1, #4
    c21a:	3008      	adds	r0, #8
    c21c:	f019 fd01 	bl	25c22 <net_buf_simple_add>
    c220:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    c222:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    c226:	f8a0 9002 	strh.w	r9, [r0, #2]
    c22a:	9802      	ldr	r0, [sp, #8]
    c22c:	4639      	mov	r1, r7
    c22e:	3008      	adds	r0, #8
    c230:	f019 fcf7 	bl	25c22 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    c234:	4641      	mov	r1, r8
    c236:	463a      	mov	r2, r7
    c238:	1d30      	adds	r0, r6, #4
    c23a:	f017 fc9e 	bl	23b7a <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c23e:	9902      	ldr	r1, [sp, #8]
    c240:	4628      	mov	r0, r5
    c242:	f7ff fc37 	bl	bab4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    c246:	e7d7      	b.n	c1f8 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c248:	2412      	movs	r4, #18
    c24a:	e7d5      	b.n	c1f8 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    c24c:	2401      	movs	r4, #1
    c24e:	e7d3      	b.n	c1f8 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    c250:	240e      	movs	r4, #14
    c252:	e7d1      	b.n	c1f8 <att_prepare_write_req+0x7c>
    c254:	0000bc2d 	.word	0x0000bc2d

0000c258 <att_read_group_req>:
{
    c258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    c25c:	898c      	ldrh	r4, [r1, #12]
    c25e:	3c04      	subs	r4, #4
    c260:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    c262:	2c02      	cmp	r4, #2
{
    c264:	4605      	mov	r5, r0
    c266:	b08c      	sub	sp, #48	; 0x30
    c268:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    c26a:	d001      	beq.n	c270 <att_read_group_req+0x18>
    c26c:	2c10      	cmp	r4, #16
    c26e:	d16e      	bne.n	c34e <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    c270:	2104      	movs	r1, #4
    c272:	3008      	adds	r0, #8
    c274:	f019 fcfc 	bl	25c70 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c278:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    c27c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c27e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c280:	1d01      	adds	r1, r0, #4
    c282:	4622      	mov	r2, r4
    c284:	4640      	mov	r0, r8
    c286:	f017 fdc6 	bl	23e16 <bt_uuid_create>
    c28a:	2800      	cmp	r0, #0
    c28c:	d061      	beq.n	c352 <att_read_group_req+0xfa>
	if (!start || !end) {
    c28e:	2e00      	cmp	r6, #0
    c290:	d03a      	beq.n	c308 <att_read_group_req+0xb0>
    c292:	2400      	movs	r4, #0
    c294:	2f00      	cmp	r7, #0
    c296:	d036      	beq.n	c306 <att_read_group_req+0xae>
	if (start > end) {
    c298:	42be      	cmp	r6, r7
    c29a:	d835      	bhi.n	c308 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    c29c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c2a0:	a901      	add	r1, sp, #4
    c2a2:	4640      	mov	r0, r8
    c2a4:	f88d 4004 	strb.w	r4, [sp, #4]
    c2a8:	f8ad 3006 	strh.w	r3, [sp, #6]
    c2ac:	f017 fd85 	bl	23dba <bt_uuid_cmp>
    c2b0:	2800      	cmp	r0, #0
    c2b2:	d134      	bne.n	c31e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    c2b4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    c2b6:	2214      	movs	r2, #20
    c2b8:	2100      	movs	r1, #0
    c2ba:	a807      	add	r0, sp, #28
    c2bc:	f017 fc88 	bl	23bd0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    c2c0:	2201      	movs	r2, #1
    c2c2:	2111      	movs	r1, #17
    c2c4:	4620      	mov	r0, r4
    c2c6:	f7ff ff21 	bl	c10c <bt_att_create_pdu>
    c2ca:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    c2cc:	2800      	cmp	r0, #0
    c2ce:	d040      	beq.n	c352 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    c2d0:	2101      	movs	r1, #1
    c2d2:	3008      	adds	r0, #8
	data.uuid = uuid;
    c2d4:	e9cd 5807 	strd	r5, r8, [sp, #28]
    c2d8:	f019 fca3 	bl	25c22 <net_buf_simple_add>
	data.rsp->len = 0U;
    c2dc:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c2e0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c2e2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    c2e4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c2e8:	4a1b      	ldr	r2, [pc, #108]	; (c358 <att_read_group_req+0x100>)
	data.group = NULL;
    c2ea:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c2ee:	4639      	mov	r1, r7
    c2f0:	4630      	mov	r0, r6
    c2f2:	f018 f9f8 	bl	246e6 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    c2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c2f8:	781c      	ldrb	r4, [r3, #0]
    c2fa:	bb1c      	cbnz	r4, c344 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    c2fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    c2fe:	f010 fd8d 	bl	1ce1c <net_buf_unref>
	if (!req) {
    c302:	230a      	movs	r3, #10
    c304:	e018      	b.n	c338 <att_read_group_req+0xe0>
			*err = 0U;
    c306:	463e      	mov	r6, r7
	if (!req) {
    c308:	2301      	movs	r3, #1
    c30a:	4632      	mov	r2, r6
    c30c:	2110      	movs	r1, #16
    c30e:	4628      	mov	r0, r5
    c310:	f018 fbfb 	bl	24b0a <send_err_rsp.part.0>
		return 0;
    c314:	2400      	movs	r4, #0
}
    c316:	4620      	mov	r0, r4
    c318:	b00c      	add	sp, #48	; 0x30
    c31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    c31e:	f642 0301 	movw	r3, #10241	; 0x2801
    c322:	a907      	add	r1, sp, #28
    c324:	4640      	mov	r0, r8
    c326:	f88d 401c 	strb.w	r4, [sp, #28]
    c32a:	f8ad 301e 	strh.w	r3, [sp, #30]
    c32e:	f017 fd44 	bl	23dba <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    c332:	2800      	cmp	r0, #0
    c334:	d0be      	beq.n	c2b4 <att_read_group_req+0x5c>
	if (!req) {
    c336:	2310      	movs	r3, #16
    c338:	4632      	mov	r2, r6
    c33a:	2110      	movs	r1, #16
    c33c:	4628      	mov	r0, r5
    c33e:	f018 fbe4 	bl	24b0a <send_err_rsp.part.0>
		return 0;
    c342:	e7e8      	b.n	c316 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c344:	9909      	ldr	r1, [sp, #36]	; 0x24
    c346:	4628      	mov	r0, r5
    c348:	f7ff fbb4 	bl	bab4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    c34c:	e7e2      	b.n	c314 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    c34e:	2404      	movs	r4, #4
    c350:	e7e1      	b.n	c316 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    c352:	240e      	movs	r4, #14
    c354:	e7df      	b.n	c316 <att_read_group_req+0xbe>
    c356:	bf00      	nop
    c358:	0000bad9 	.word	0x0000bad9

0000c35c <att_read_mult_req>:
{
    c35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    c360:	6886      	ldr	r6, [r0, #8]
{
    c362:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    c364:	2210      	movs	r2, #16
{
    c366:	4604      	mov	r4, r0
    c368:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    c36a:	4668      	mov	r0, sp
    c36c:	2100      	movs	r1, #0
    c36e:	f017 fc2f 	bl	23bd0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    c372:	2200      	movs	r2, #0
    c374:	210f      	movs	r1, #15
    c376:	4630      	mov	r0, r6
    c378:	f7ff fec8 	bl	c10c <bt_att_create_pdu>
    c37c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c37e:	b358      	cbz	r0, c3d8 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c380:	f8df 9058 	ldr.w	r9, [pc, #88]	; c3dc <att_read_mult_req+0x80>
	data.chan = chan;
    c384:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    c386:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c38a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    c38e:	89ab      	ldrh	r3, [r5, #12]
    c390:	2b01      	cmp	r3, #1
    c392:	d804      	bhi.n	c39e <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c394:	9902      	ldr	r1, [sp, #8]
    c396:	4620      	mov	r0, r4
    c398:	f7ff fb8c 	bl	bab4 <bt_att_chan_send_rsp.constprop.0>
    c39c:	e018      	b.n	c3d0 <att_read_mult_req+0x74>
    c39e:	4638      	mov	r0, r7
    c3a0:	f019 fc6e 	bl	25c80 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c3a4:	466b      	mov	r3, sp
    c3a6:	464a      	mov	r2, r9
    c3a8:	4601      	mov	r1, r0
    c3aa:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c3ac:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c3b0:	f018 f999 	bl	246e6 <bt_gatt_foreach_attr>
		if (data.err) {
    c3b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c3b8:	2b00      	cmp	r3, #0
    c3ba:	d0e8      	beq.n	c38e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    c3bc:	9802      	ldr	r0, [sp, #8]
    c3be:	f010 fd2d 	bl	1ce1c <net_buf_unref>
	if (!req) {
    c3c2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c3c6:	4632      	mov	r2, r6
    c3c8:	210e      	movs	r1, #14
    c3ca:	4620      	mov	r0, r4
    c3cc:	f018 fb9d 	bl	24b0a <send_err_rsp.part.0>
	return 0;
    c3d0:	2000      	movs	r0, #0
}
    c3d2:	b005      	add	sp, #20
    c3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    c3d8:	200e      	movs	r0, #14
    c3da:	e7fa      	b.n	c3d2 <att_read_mult_req+0x76>
    c3dc:	000249f5 	.word	0x000249f5

0000c3e0 <att_read_rsp>:
{
    c3e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    c3e4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    c3e8:	4605      	mov	r5, r0
    c3ea:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    c3ec:	4640      	mov	r0, r8
    c3ee:	2101      	movs	r1, #1
{
    c3f0:	4614      	mov	r4, r2
    c3f2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    c3f4:	f018 ffc8 	bl	25388 <bt_gatt_change_aware>
    c3f8:	b388      	cbz	r0, c45e <att_read_rsp+0x7e>
	if (!handle) {
    c3fa:	b396      	cbz	r6, c462 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    c3fc:	2210      	movs	r2, #16
    c3fe:	2100      	movs	r1, #0
    c400:	4668      	mov	r0, sp
    c402:	f017 fbe5 	bl	23bd0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    c406:	2200      	movs	r2, #0
    c408:	4621      	mov	r1, r4
    c40a:	4640      	mov	r0, r8
    c40c:	f7ff fe7e 	bl	c10c <bt_att_create_pdu>
    c410:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c412:	b340      	cbz	r0, c466 <att_read_rsp+0x86>
	data.offset = offset;
    c414:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    c418:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c41c:	2301      	movs	r3, #1
    c41e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c422:	4a12      	ldr	r2, [pc, #72]	; (c46c <att_read_rsp+0x8c>)
	data.chan = chan;
    c424:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c426:	466b      	mov	r3, sp
    c428:	4631      	mov	r1, r6
    c42a:	4630      	mov	r0, r6
    c42c:	f018 f95b 	bl	246e6 <bt_gatt_foreach_attr>
	if (data.err) {
    c430:	f89d 400c 	ldrb.w	r4, [sp, #12]
    c434:	b174      	cbz	r4, c454 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    c436:	9802      	ldr	r0, [sp, #8]
    c438:	f010 fcf0 	bl	1ce1c <net_buf_unref>
	if (!req) {
    c43c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c440:	4632      	mov	r2, r6
    c442:	4639      	mov	r1, r7
    c444:	4628      	mov	r0, r5
    c446:	f018 fb60 	bl	24b0a <send_err_rsp.part.0>
		return 0;
    c44a:	2400      	movs	r4, #0
}
    c44c:	4620      	mov	r0, r4
    c44e:	b004      	add	sp, #16
    c450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c454:	9902      	ldr	r1, [sp, #8]
    c456:	4628      	mov	r0, r5
    c458:	f7ff fb2c 	bl	bab4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    c45c:	e7f6      	b.n	c44c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c45e:	2412      	movs	r4, #18
    c460:	e7f4      	b.n	c44c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    c462:	2401      	movs	r4, #1
    c464:	e7f2      	b.n	c44c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    c466:	240e      	movs	r4, #14
    c468:	e7f0      	b.n	c44c <att_read_rsp+0x6c>
    c46a:	bf00      	nop
    c46c:	000249f5 	.word	0x000249f5

0000c470 <att_read_type_req>:
{
    c470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    c474:	898c      	ldrh	r4, [r1, #12]
    c476:	3c04      	subs	r4, #4
    c478:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    c47a:	2c02      	cmp	r4, #2
{
    c47c:	4605      	mov	r5, r0
    c47e:	b08c      	sub	sp, #48	; 0x30
    c480:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    c482:	d001      	beq.n	c488 <att_read_type_req+0x18>
    c484:	2c10      	cmp	r4, #16
    c486:	d14f      	bne.n	c528 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    c488:	2104      	movs	r1, #4
    c48a:	3008      	adds	r0, #8
    c48c:	f019 fbf0 	bl	25c70 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c490:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    c494:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c496:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c498:	1d01      	adds	r1, r0, #4
    c49a:	4622      	mov	r2, r4
    c49c:	4640      	mov	r0, r8
    c49e:	f017 fcba 	bl	23e16 <bt_uuid_create>
    c4a2:	b188      	cbz	r0, c4c8 <att_read_type_req+0x58>
	if (!start || !end) {
    c4a4:	b19e      	cbz	r6, c4ce <att_read_type_req+0x5e>
    c4a6:	b18f      	cbz	r7, c4cc <att_read_type_req+0x5c>
	if (start > end) {
    c4a8:	42b7      	cmp	r7, r6
    c4aa:	d310      	bcc.n	c4ce <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    c4ac:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    c4ae:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    c4b0:	2100      	movs	r1, #0
    c4b2:	eb0d 0002 	add.w	r0, sp, r2
    c4b6:	f017 fb8b 	bl	23bd0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    c4ba:	2201      	movs	r2, #1
    c4bc:	2109      	movs	r1, #9
    c4be:	4620      	mov	r0, r4
    c4c0:	f7ff fe24 	bl	c10c <bt_att_create_pdu>
    c4c4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    c4c6:	b968      	cbnz	r0, c4e4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    c4c8:	240e      	movs	r4, #14
    c4ca:	e007      	b.n	c4dc <att_read_type_req+0x6c>
			*err = 0U;
    c4cc:	463e      	mov	r6, r7
	if (!req) {
    c4ce:	2301      	movs	r3, #1
    c4d0:	4632      	mov	r2, r6
    c4d2:	2108      	movs	r1, #8
    c4d4:	4628      	mov	r0, r5
    c4d6:	f018 fb18 	bl	24b0a <send_err_rsp.part.0>
		return 0;
    c4da:	2400      	movs	r4, #0
}
    c4dc:	4620      	mov	r0, r4
    c4de:	b00c      	add	sp, #48	; 0x30
    c4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    c4e4:	2101      	movs	r1, #1
    c4e6:	3008      	adds	r0, #8
	data.uuid = uuid;
    c4e8:	e9cd 5806 	strd	r5, r8, [sp, #24]
    c4ec:	f019 fb99 	bl	25c22 <net_buf_simple_add>
	data.rsp->len = 0U;
    c4f0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c4f4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c4f6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c4f8:	4a0c      	ldr	r2, [pc, #48]	; (c52c <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    c4fa:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c4fe:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c500:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c504:	4630      	mov	r0, r6
    c506:	ab06      	add	r3, sp, #24
    c508:	f018 f8ed 	bl	246e6 <bt_gatt_foreach_attr>
	if (data.err) {
    c50c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    c510:	b12c      	cbz	r4, c51e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    c512:	9808      	ldr	r0, [sp, #32]
    c514:	f010 fc82 	bl	1ce1c <net_buf_unref>
	if (!req) {
    c518:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    c51c:	e7d8      	b.n	c4d0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c51e:	9908      	ldr	r1, [sp, #32]
    c520:	4628      	mov	r0, r5
    c522:	f7ff fac7 	bl	bab4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    c526:	e7d9      	b.n	c4dc <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    c528:	2404      	movs	r4, #4
    c52a:	e7d7      	b.n	c4dc <att_read_type_req+0x6c>
    c52c:	0000bb85 	.word	0x0000bb85

0000c530 <att_find_type_req>:
{
    c530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c534:	4688      	mov	r8, r1
    c536:	b086      	sub	sp, #24
    c538:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    c53a:	2106      	movs	r1, #6
    c53c:	f108 0008 	add.w	r0, r8, #8
    c540:	f019 fb96 	bl	25c70 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    c544:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    c546:	b317      	cbz	r7, c58e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    c548:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    c54c:	f1b9 0f00 	cmp.w	r9, #0
    c550:	d01c      	beq.n	c58c <att_find_type_req+0x5c>
	if (start > end) {
    c552:	454f      	cmp	r7, r9
    c554:	d81b      	bhi.n	c58e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    c556:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    c558:	f8ad 3002 	strh.w	r3, [sp, #2]
    c55c:	2400      	movs	r4, #0
    c55e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c562:	a901      	add	r1, sp, #4
    c564:	4668      	mov	r0, sp
	value = buf->data;
    c566:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    c56a:	f88d 4000 	strb.w	r4, [sp]
    c56e:	f88d 4004 	strb.w	r4, [sp, #4]
    c572:	f8ad 3006 	strh.w	r3, [sp, #6]
    c576:	f017 fc20 	bl	23dba <bt_uuid_cmp>
    c57a:	4606      	mov	r6, r0
    c57c:	b190      	cbz	r0, c5a4 <att_find_type_req+0x74>
	if (!req) {
    c57e:	230a      	movs	r3, #10
    c580:	463a      	mov	r2, r7
    c582:	2106      	movs	r1, #6
    c584:	4628      	mov	r0, r5
    c586:	f018 fac0 	bl	24b0a <send_err_rsp.part.0>
		return 0;
    c58a:	e007      	b.n	c59c <att_find_type_req+0x6c>
			*err = 0U;
    c58c:	464f      	mov	r7, r9
	if (!req) {
    c58e:	2301      	movs	r3, #1
    c590:	463a      	mov	r2, r7
    c592:	2106      	movs	r1, #6
    c594:	4628      	mov	r0, r5
    c596:	f018 fab8 	bl	24b0a <send_err_rsp.part.0>
		return 0;
    c59a:	2400      	movs	r4, #0
}
    c59c:	4620      	mov	r0, r4
    c59e:	b006      	add	sp, #24
    c5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    c5a4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    c5a8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    c5ac:	4601      	mov	r1, r0
    c5ae:	2214      	movs	r2, #20
    c5b0:	a801      	add	r0, sp, #4
    c5b2:	f017 fb0d 	bl	23bd0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    c5b6:	4632      	mov	r2, r6
    c5b8:	2107      	movs	r1, #7
    c5ba:	4640      	mov	r0, r8
    c5bc:	f7ff fda6 	bl	c10c <bt_att_create_pdu>
    c5c0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c5c2:	b1d8      	cbz	r0, c5fc <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c5c4:	230a      	movs	r3, #10
    c5c6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c5ca:	4a0d      	ldr	r2, [pc, #52]	; (c600 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    c5cc:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c5d0:	ab01      	add	r3, sp, #4
    c5d2:	4649      	mov	r1, r9
    c5d4:	4638      	mov	r0, r7
	data.value = value;
    c5d6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    c5da:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c5dc:	f018 f883 	bl	246e6 <bt_gatt_foreach_attr>
	if (data.err) {
    c5e0:	f89d 4015 	ldrb.w	r4, [sp, #21]
    c5e4:	b12c      	cbz	r4, c5f2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    c5e6:	9802      	ldr	r0, [sp, #8]
    c5e8:	f010 fc18 	bl	1ce1c <net_buf_unref>
	if (!req) {
    c5ec:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c5f0:	e7ce      	b.n	c590 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c5f2:	9902      	ldr	r1, [sp, #8]
    c5f4:	4628      	mov	r0, r5
    c5f6:	f7ff fa5d 	bl	bab4 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    c5fa:	e7cf      	b.n	c59c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    c5fc:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    c5fe:	e7cd      	b.n	c59c <att_find_type_req+0x6c>
    c600:	0000b859 	.word	0x0000b859

0000c604 <att_find_info_req>:
{
    c604:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    c606:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    c608:	881e      	ldrh	r6, [r3, #0]
{
    c60a:	b085      	sub	sp, #20
    c60c:	4605      	mov	r5, r0
	if (!start || !end) {
    c60e:	b19e      	cbz	r6, c638 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    c610:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    c612:	b184      	cbz	r4, c636 <att_find_info_req+0x32>
	if (start > end) {
    c614:	42b4      	cmp	r4, r6
    c616:	d30f      	bcc.n	c638 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    c618:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    c61a:	2210      	movs	r2, #16
    c61c:	2100      	movs	r1, #0
    c61e:	4668      	mov	r0, sp
    c620:	f017 fad6 	bl	23bd0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    c624:	2200      	movs	r2, #0
    c626:	2105      	movs	r1, #5
    c628:	4638      	mov	r0, r7
    c62a:	f7ff fd6f 	bl	c10c <bt_att_create_pdu>
    c62e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    c630:	b958      	cbnz	r0, c64a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    c632:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    c634:	e007      	b.n	c646 <att_find_info_req+0x42>
			*err = 0U;
    c636:	4626      	mov	r6, r4
	if (!req) {
    c638:	2301      	movs	r3, #1
    c63a:	4632      	mov	r2, r6
    c63c:	2104      	movs	r1, #4
    c63e:	4628      	mov	r0, r5
    c640:	f018 fa63 	bl	24b0a <send_err_rsp.part.0>
	return 0;
    c644:	2000      	movs	r0, #0
}
    c646:	b005      	add	sp, #20
    c648:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    c64a:	4621      	mov	r1, r4
    c64c:	4a08      	ldr	r2, [pc, #32]	; (c670 <att_find_info_req+0x6c>)
	data.chan = chan;
    c64e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    c650:	466b      	mov	r3, sp
    c652:	4630      	mov	r0, r6
    c654:	f018 f847 	bl	246e6 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    c658:	9c02      	ldr	r4, [sp, #8]
    c65a:	b924      	cbnz	r4, c666 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    c65c:	9801      	ldr	r0, [sp, #4]
    c65e:	f010 fbdd 	bl	1ce1c <net_buf_unref>
	if (!req) {
    c662:	230a      	movs	r3, #10
    c664:	e7e9      	b.n	c63a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c666:	9901      	ldr	r1, [sp, #4]
    c668:	4628      	mov	r0, r5
    c66a:	f7ff fa23 	bl	bab4 <bt_att_chan_send_rsp.constprop.0>
    c66e:	e7e9      	b.n	c644 <att_find_info_req+0x40>
    c670:	000246fd 	.word	0x000246fd

0000c674 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    c674:	b513      	push	{r0, r1, r4, lr}
    c676:	4602      	mov	r2, r0
    c678:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c67a:	4808      	ldr	r0, [pc, #32]	; (c69c <bt_att_req_alloc+0x28>)
    c67c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    c67e:	2400      	movs	r4, #0
    c680:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c682:	f012 fdd9 	bl	1f238 <k_mem_slab_alloc>
    c686:	4601      	mov	r1, r0
    c688:	b930      	cbnz	r0, c698 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    c68a:	9801      	ldr	r0, [sp, #4]
    c68c:	221c      	movs	r2, #28
    c68e:	f017 fa9f 	bl	23bd0 <memset>

	return req;
    c692:	9801      	ldr	r0, [sp, #4]
}
    c694:	b002      	add	sp, #8
    c696:	bd10      	pop	{r4, pc}
		return NULL;
    c698:	4620      	mov	r0, r4
    c69a:	e7fb      	b.n	c694 <bt_att_req_alloc+0x20>
    c69c:	20009f44 	.word	0x20009f44

0000c6a0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    c6a0:	b507      	push	{r0, r1, r2, lr}
    c6a2:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    c6a4:	6880      	ldr	r0, [r0, #8]
    c6a6:	b120      	cbz	r0, c6b2 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    c6a8:	f010 fbb8 	bl	1ce1c <net_buf_unref>
		req->buf = NULL;
    c6ac:	9b01      	ldr	r3, [sp, #4]
    c6ae:	2200      	movs	r2, #0
    c6b0:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    c6b2:	4803      	ldr	r0, [pc, #12]	; (c6c0 <bt_att_req_free+0x20>)
    c6b4:	a901      	add	r1, sp, #4
    c6b6:	f012 fdef 	bl	1f298 <k_mem_slab_free>
}
    c6ba:	b003      	add	sp, #12
    c6bc:	f85d fb04 	ldr.w	pc, [sp], #4
    c6c0:	20009f44 	.word	0x20009f44

0000c6c4 <att_handle_rsp>:
{
    c6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6c8:	4605      	mov	r5, r0
    c6ca:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    c6cc:	30e0      	adds	r0, #224	; 0xe0
{
    c6ce:	4689      	mov	r9, r1
    c6d0:	4692      	mov	sl, r2
    c6d2:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    c6d4:	f01a f900 	bl	268d8 <k_delayed_work_cancel>
	if (!chan->req) {
    c6d8:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    c6dc:	bb5c      	cbnz	r4, c736 <att_handle_rsp+0x72>
    c6de:	4b2e      	ldr	r3, [pc, #184]	; (c798 <att_handle_rsp+0xd4>)
    c6e0:	492e      	ldr	r1, [pc, #184]	; (c79c <att_handle_rsp+0xd8>)
		BT_WARN("No pending ATT request");
    c6e2:	482f      	ldr	r0, [pc, #188]	; (c7a0 <att_handle_rsp+0xdc>)
    c6e4:	1ac9      	subs	r1, r1, r3
    c6e6:	08c9      	lsrs	r1, r1, #3
    c6e8:	0189      	lsls	r1, r1, #6
    c6ea:	f041 0102 	orr.w	r1, r1, #2
    c6ee:	f015 fa38 	bl	21b62 <log_0>
	bt_att_func_t func = NULL;
    c6f2:	4627      	mov	r7, r4
	att_process(chan->att);
    c6f4:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    c6f8:	f10b 0004 	add.w	r0, fp, #4
    c6fc:	f017 ff9e 	bl	2463c <sys_slist_get>
	if (!node) {
    c700:	4606      	mov	r6, r0
    c702:	b380      	cbz	r0, c766 <att_handle_rsp+0xa2>
	return list->head;
    c704:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c708:	b152      	cbz	r2, c720 <att_handle_rsp+0x5c>
    c70a:	f5b2 708a 	subs.w	r0, r2, #276	; 0x114
    c70e:	d007      	beq.n	c720 <att_handle_rsp+0x5c>
	return node->next;
    c710:	6814      	ldr	r4, [r2, #0]
    c712:	b10c      	cbz	r4, c718 <att_handle_rsp+0x54>
    c714:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
		if (!chan->req) {
    c718:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    c71c:	b1f2      	cbz	r2, c75c <att_handle_rsp+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c71e:	bb7c      	cbnz	r4, c780 <att_handle_rsp+0xbc>
	parent->next = child;
    c720:	f8db 2004 	ldr.w	r2, [fp, #4]
    c724:	6032      	str	r2, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    c726:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    c72a:	f8cb 6004 	str.w	r6, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    c72e:	b9d2      	cbnz	r2, c766 <att_handle_rsp+0xa2>
	list->tail = node;
    c730:	f8cb 6008 	str.w	r6, [fp, #8]
}
    c734:	e017      	b.n	c766 <att_handle_rsp+0xa2>
	if (chan->req == &cancel) {
    c736:	4b1b      	ldr	r3, [pc, #108]	; (c7a4 <att_handle_rsp+0xe0>)
    c738:	429c      	cmp	r4, r3
    c73a:	f04f 0600 	mov.w	r6, #0
    c73e:	d103      	bne.n	c748 <att_handle_rsp+0x84>
		chan->req = NULL;
    c740:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
	bt_att_func_t func = NULL;
    c744:	4637      	mov	r7, r6
		goto process;
    c746:	e7d5      	b.n	c6f4 <att_handle_rsp+0x30>
	func = chan->req->func;
    c748:	6867      	ldr	r7, [r4, #4]
	params = chan->req->user_data;
    c74a:	69a3      	ldr	r3, [r4, #24]
	chan->req->func = NULL;
    c74c:	6066      	str	r6, [r4, #4]
	bt_att_req_free(chan->req);
    c74e:	4620      	mov	r0, r4
	params = chan->req->user_data;
    c750:	9303      	str	r3, [sp, #12]
	bt_att_req_free(chan->req);
    c752:	f7ff ffa5 	bl	c6a0 <bt_att_req_free>
	chan->req = NULL;
    c756:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    c75a:	e7cb      	b.n	c6f4 <att_handle_rsp+0x30>
	return chan_req_send(chan, req);
    c75c:	4631      	mov	r1, r6
    c75e:	f018 f857 	bl	24810 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    c762:	2800      	cmp	r0, #0
    c764:	dbdb      	blt.n	c71e <att_handle_rsp+0x5a>
	if (func) {
    c766:	b13f      	cbz	r7, c778 <att_handle_rsp+0xb4>
		func(chan->att->conn, err, pdu, len, params);
    c768:	9b03      	ldr	r3, [sp, #12]
    c76a:	6828      	ldr	r0, [r5, #0]
    c76c:	9300      	str	r3, [sp, #0]
    c76e:	6800      	ldr	r0, [r0, #0]
    c770:	4653      	mov	r3, sl
    c772:	464a      	mov	r2, r9
    c774:	4641      	mov	r1, r8
    c776:	47b8      	blx	r7
}
    c778:	2000      	movs	r0, #0
    c77a:	b005      	add	sp, #20
    c77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    c780:	f514 728a 	adds.w	r2, r4, #276	; 0x114
    c784:	d004      	beq.n	c790 <att_handle_rsp+0xcc>
	return node->next;
    c786:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c78a:	b10a      	cbz	r2, c790 <att_handle_rsp+0xcc>
    c78c:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
	bt_att_func_t func = NULL;
    c790:	4620      	mov	r0, r4
    c792:	4614      	mov	r4, r2
    c794:	e7c0      	b.n	c718 <att_handle_rsp+0x54>
    c796:	bf00      	nop
    c798:	00026fc8 	.word	0x00026fc8
    c79c:	00026fc8 	.word	0x00026fc8
    c7a0:	0002c4bf 	.word	0x0002c4bf
    c7a4:	2000d720 	.word	0x2000d720

0000c7a8 <bt_att_disconnected>:
{
    c7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    c7aa:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    c7ae:	b085      	sub	sp, #20
    c7b0:	4604      	mov	r4, r0
	if (!att_chan->att) {
    c7b2:	2d00      	cmp	r5, #0
    c7b4:	d056      	beq.n	c864 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    c7b6:	f500 7186 	add.w	r1, r0, #268	; 0x10c
    c7ba:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    c7be:	f018 f85a 	bl	24876 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    c7c2:	f1a4 0608 	sub.w	r6, r4, #8
    c7c6:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    c7ca:	2200      	movs	r2, #0
    c7cc:	2300      	movs	r3, #0
    c7ce:	4638      	mov	r0, r7
    c7d0:	f019 f9d6 	bl	25b80 <net_buf_get>
    c7d4:	4602      	mov	r2, r0
    c7d6:	bb50      	cbnz	r0, c82e <bt_att_disconnected+0x86>
	if (chan->req) {
    c7d8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    c7dc:	b123      	cbz	r3, c7e8 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    c7de:	4601      	mov	r1, r0
    c7e0:	230e      	movs	r3, #14
    c7e2:	4630      	mov	r0, r6
    c7e4:	f7ff ff6e 	bl	c6c4 <att_handle_rsp>
	chan->att = NULL;
    c7e8:	2300      	movs	r3, #0
    c7ea:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    c7ee:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    c7f0:	2b00      	cmp	r3, #0
    c7f2:	d137      	bne.n	c864 <bt_att_disconnected+0xbc>
	att_reset(att);
    c7f4:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    c7f6:	9803      	ldr	r0, [sp, #12]
    c7f8:	2200      	movs	r2, #0
    c7fa:	2300      	movs	r3, #0
    c7fc:	3024      	adds	r0, #36	; 0x24
    c7fe:	f019 f9bf 	bl	25b80 <net_buf_get>
    c802:	b9b8      	cbnz	r0, c834 <bt_att_disconnected+0x8c>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    c804:	9803      	ldr	r0, [sp, #12]
    c806:	2200      	movs	r2, #0
    c808:	2300      	movs	r3, #0
    c80a:	300c      	adds	r0, #12
    c80c:	f019 f9b8 	bl	25b80 <net_buf_get>
    c810:	b998      	cbnz	r0, c83a <bt_att_disconnected+0x92>
	att->conn = NULL;
    c812:	9a03      	ldr	r2, [sp, #12]
	return list->head;
    c814:	6855      	ldr	r5, [r2, #4]
    c816:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c818:	b995      	cbnz	r5, c840 <bt_att_disconnected+0x98>
	k_mem_slab_free(&att_slab, (void **)&att);
    c81a:	4813      	ldr	r0, [pc, #76]	; (c868 <bt_att_disconnected+0xc0>)
    c81c:	a903      	add	r1, sp, #12
    c81e:	f012 fd3b 	bl	1f298 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    c822:	6820      	ldr	r0, [r4, #0]
}
    c824:	b005      	add	sp, #20
    c826:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    c82a:	f001 ba4f 	b.w	dccc <bt_gatt_disconnected>
		net_buf_unref(buf);
    c82e:	f010 faf5 	bl	1ce1c <net_buf_unref>
    c832:	e7ca      	b.n	c7ca <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    c834:	f010 faf2 	bl	1ce1c <net_buf_unref>
    c838:	e7dd      	b.n	c7f6 <bt_att_disconnected+0x4e>
		net_buf_unref(buf);
    c83a:	f010 faef 	bl	1ce1c <net_buf_unref>
    c83e:	e7e1      	b.n	c804 <bt_att_disconnected+0x5c>
	return node->next;
    c840:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    c842:	686f      	ldr	r7, [r5, #4]
    c844:	b137      	cbz	r7, c854 <bt_att_disconnected+0xac>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    c846:	69ab      	ldr	r3, [r5, #24]
    c848:	9300      	str	r3, [sp, #0]
    c84a:	2300      	movs	r3, #0
    c84c:	461a      	mov	r2, r3
    c84e:	210e      	movs	r1, #14
    c850:	4618      	mov	r0, r3
    c852:	47b8      	blx	r7
		bt_att_req_free(req);
    c854:	4628      	mov	r0, r5
    c856:	f7ff ff23 	bl	c6a0 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    c85a:	2e00      	cmp	r6, #0
    c85c:	d0dd      	beq.n	c81a <bt_att_disconnected+0x72>
    c85e:	4635      	mov	r5, r6
    c860:	6836      	ldr	r6, [r6, #0]
    c862:	e7ee      	b.n	c842 <bt_att_disconnected+0x9a>
}
    c864:	b005      	add	sp, #20
    c866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c868:	20009f0c 	.word	0x20009f0c

0000c86c <att_timeout>:
    c86c:	4b08      	ldr	r3, [pc, #32]	; (c890 <att_timeout+0x24>)
    c86e:	4909      	ldr	r1, [pc, #36]	; (c894 <att_timeout+0x28>)
{
    c870:	b510      	push	{r4, lr}
    c872:	1ac9      	subs	r1, r1, r3
    c874:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    c876:	0189      	lsls	r1, r1, #6
{
    c878:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    c87a:	f041 0101 	orr.w	r1, r1, #1
    c87e:	4806      	ldr	r0, [pc, #24]	; (c898 <att_timeout+0x2c>)
    c880:	f015 f96f 	bl	21b62 <log_0>
	bt_att_disconnected(&chan->chan.chan);
    c884:	f1a4 00d8 	sub.w	r0, r4, #216	; 0xd8
}
    c888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    c88c:	f7ff bf8c 	b.w	c7a8 <bt_att_disconnected>
    c890:	00026fc8 	.word	0x00026fc8
    c894:	00026fc8 	.word	0x00026fc8
    c898:	0002c4d6 	.word	0x0002c4d6

0000c89c <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    c89c:	490a      	ldr	r1, [pc, #40]	; (c8c8 <db_hash_store+0x2c>)
    c89e:	480b      	ldr	r0, [pc, #44]	; (c8cc <db_hash_store+0x30>)
{
    c8a0:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    c8a2:	2210      	movs	r2, #16
    c8a4:	f7f9 fb9a 	bl	5fdc <settings_save_one>
	if (err) {
    c8a8:	4601      	mov	r1, r0
    c8aa:	b158      	cbz	r0, c8c4 <db_hash_store+0x28>
    c8ac:	4b08      	ldr	r3, [pc, #32]	; (c8d0 <db_hash_store+0x34>)
    c8ae:	4a09      	ldr	r2, [pc, #36]	; (c8d4 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    c8b0:	4809      	ldr	r0, [pc, #36]	; (c8d8 <db_hash_store+0x3c>)
    c8b2:	1ad2      	subs	r2, r2, r3
    c8b4:	08d2      	lsrs	r2, r2, #3
    c8b6:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
    c8b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    c8bc:	f042 0201 	orr.w	r2, r2, #1
    c8c0:	f015 b95c 	b.w	21b7c <log_1>
}
    c8c4:	bd08      	pop	{r3, pc}
    c8c6:	bf00      	nop
    c8c8:	2000f291 	.word	0x2000f291
    c8cc:	0002c4e9 	.word	0x0002c4e9
    c8d0:	00026fc8 	.word	0x00026fc8
    c8d4:	00027078 	.word	0x00027078
    c8d8:	0002c4f1 	.word	0x0002c4f1

0000c8dc <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    c8dc:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    c8de:	490b      	ldr	r1, [pc, #44]	; (c90c <db_hash_set+0x30>)
{
    c8e0:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    c8e2:	4618      	mov	r0, r3
    c8e4:	2210      	movs	r2, #16
    c8e6:	47a0      	blx	r4
	if (len < 0) {
    c8e8:	1e04      	subs	r4, r0, #0
    c8ea:	da0c      	bge.n	c906 <db_hash_set+0x2a>
    c8ec:	4a08      	ldr	r2, [pc, #32]	; (c910 <db_hash_set+0x34>)
    c8ee:	4b09      	ldr	r3, [pc, #36]	; (c914 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
    c8f0:	4809      	ldr	r0, [pc, #36]	; (c918 <db_hash_set+0x3c>)
    c8f2:	1ad2      	subs	r2, r2, r3
    c8f4:	08d2      	lsrs	r2, r2, #3
    c8f6:	0192      	lsls	r2, r2, #6
    c8f8:	f042 0201 	orr.w	r2, r2, #1
    c8fc:	4621      	mov	r1, r4
    c8fe:	f015 f93d 	bl	21b7c <log_1>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    c902:	4620      	mov	r0, r4
    c904:	bd10      	pop	{r4, pc}
	return 0;
    c906:	2400      	movs	r4, #0
    c908:	e7fb      	b.n	c902 <db_hash_set+0x26>
    c90a:	bf00      	nop
    c90c:	2000f2a1 	.word	0x2000f2a1
    c910:	00027078 	.word	0x00027078
    c914:	00026fc8 	.word	0x00026fc8
    c918:	0002c517 	.word	0x0002c517

0000c91c <find_cf_cfg>:
{
    c91c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c91e:	4d0f      	ldr	r5, [pc, #60]	; (c95c <find_cf_cfg+0x40>)
    c920:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    c922:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    c924:	462e      	mov	r6, r5
		if (!conn) {
    c926:	1c68      	adds	r0, r5, #1
    c928:	b964      	cbnz	r4, c944 <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
    c92a:	2207      	movs	r2, #7
    c92c:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c92e:	9400      	str	r4, [sp, #0]
    c930:	f8cd 4003 	str.w	r4, [sp, #3]
    c934:	f017 f910 	bl	23b58 <memcmp>
    c938:	b958      	cbnz	r0, c952 <find_cf_cfg+0x36>
}
    c93a:	4630      	mov	r0, r6
    c93c:	b003      	add	sp, #12
    c93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c940:	2701      	movs	r7, #1
    c942:	e7ef      	b.n	c924 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c944:	4602      	mov	r2, r0
    c946:	7829      	ldrb	r1, [r5, #0]
    c948:	4620      	mov	r0, r4
    c94a:	f017 fd13 	bl	24374 <bt_conn_is_peer_addr_le>
    c94e:	2800      	cmp	r0, #0
    c950:	d1f3      	bne.n	c93a <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    c952:	3510      	adds	r5, #16
    c954:	2f00      	cmp	r7, #0
    c956:	d0f3      	beq.n	c940 <find_cf_cfg+0x24>
	return NULL;
    c958:	2600      	movs	r6, #0
    c95a:	e7ee      	b.n	c93a <find_cf_cfg+0x1e>
    c95c:	2000d73c 	.word	0x2000d73c

0000c960 <cf_write>:
{
    c960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c964:	461f      	mov	r7, r3
    c966:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	if (offset > sizeof(cfg->data)) {
    c96a:	2b01      	cmp	r3, #1
{
    c96c:	4680      	mov	r8, r0
    c96e:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    c970:	d84b      	bhi.n	ca0a <cf_write+0xaa>
	if (offset + len > sizeof(cfg->data)) {
    c972:	443b      	add	r3, r7
    c974:	2b01      	cmp	r3, #1
    c976:	463d      	mov	r5, r7
    c978:	dc4a      	bgt.n	ca10 <cf_write+0xb0>
	cfg = find_cf_cfg(conn);
    c97a:	f7ff ffcf 	bl	c91c <find_cf_cfg>
	if (!cfg) {
    c97e:	4604      	mov	r4, r0
    c980:	b918      	cbnz	r0, c98a <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
    c982:	f7ff ffcb 	bl	c91c <find_cf_cfg>
	if (!cfg) {
    c986:	4604      	mov	r4, r0
    c988:	b1d8      	cbz	r0, c9c2 <cf_write+0x62>
    c98a:	4632      	mov	r2, r6
    c98c:	f104 0008 	add.w	r0, r4, #8
    c990:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    c994:	4596      	cmp	lr, r2
    c996:	d123      	bne.n	c9e0 <cf_write+0x80>
	for (i = 0U; i < len && i < last_byte; i++) {
    c998:	b12f      	cbz	r7, c9a6 <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    c99a:	7833      	ldrb	r3, [r6, #0]
    c99c:	7a22      	ldrb	r2, [r4, #8]
    c99e:	f003 0307 	and.w	r3, r3, #7
    c9a2:	4313      	orrs	r3, r2
    c9a4:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c9a6:	f108 0188 	add.w	r1, r8, #136	; 0x88
    c9aa:	1c60      	adds	r0, r4, #1
    c9ac:	f018 fa65 	bl	24e7a <bt_addr_le_copy>
	cfg->id = conn->id;
    c9b0:	4620      	mov	r0, r4
    c9b2:	f898 3008 	ldrb.w	r3, [r8, #8]
    c9b6:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c9ba:	2101      	movs	r1, #1
    c9bc:	f018 fae4 	bl	24f88 <atomic_or>
}
    c9c0:	e00b      	b.n	c9da <cf_write+0x7a>
    c9c2:	4b16      	ldr	r3, [pc, #88]	; (ca1c <cf_write+0xbc>)
    c9c4:	4916      	ldr	r1, [pc, #88]	; (ca20 <cf_write+0xc0>)
		BT_WARN("No space to store Client Supported Features");
    c9c6:	4817      	ldr	r0, [pc, #92]	; (ca24 <cf_write+0xc4>)
    c9c8:	1ac9      	subs	r1, r1, r3
    c9ca:	08c9      	lsrs	r1, r1, #3
    c9cc:	0189      	lsls	r1, r1, #6
    c9ce:	f041 0102 	orr.w	r1, r1, #2
    c9d2:	f015 f8c6 	bl	21b62 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    c9d6:	f06f 0510 	mvn.w	r5, #16
}
    c9da:	4628      	mov	r0, r5
    c9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    c9e0:	f812 1b01 	ldrb.w	r1, [r2], #1
    c9e4:	f810 cb01 	ldrb.w	ip, [r0], #1
    c9e8:	2300      	movs	r3, #0
    c9ea:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
    c9ee:	fa21 f903 	lsr.w	r9, r1, r3
    c9f2:	f019 0f01 	tst.w	r9, #1
    c9f6:	d004      	beq.n	ca02 <cf_write+0xa2>
    c9f8:	fa2c f903 	lsr.w	r9, ip, r3
    c9fc:	f019 0f01 	tst.w	r9, #1
    ca00:	d109      	bne.n	ca16 <cf_write+0xb6>
		for (bit = 0U; bit <= last_bit; bit++) {
    ca02:	3301      	adds	r3, #1
    ca04:	2b03      	cmp	r3, #3
    ca06:	d1f2      	bne.n	c9ee <cf_write+0x8e>
    ca08:	e7c4      	b.n	c994 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ca0a:	f06f 0506 	mvn.w	r5, #6
    ca0e:	e7e4      	b.n	c9da <cf_write+0x7a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    ca10:	f06f 050c 	mvn.w	r5, #12
    ca14:	e7e1      	b.n	c9da <cf_write+0x7a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    ca16:	f06f 0512 	mvn.w	r5, #18
    ca1a:	e7de      	b.n	c9da <cf_write+0x7a>
    ca1c:	00026fc8 	.word	0x00026fc8
    ca20:	00027078 	.word	0x00027078
    ca24:	0002c538 	.word	0x0002c538

0000ca28 <sc_store>:
{
    ca28:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    ca2a:	4605      	mov	r5, r0
{
    ca2c:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    ca2e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    ca32:	4604      	mov	r4, r0
	if (cfg->id) {
    ca34:	b1fa      	cbz	r2, ca76 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    ca36:	ae02      	add	r6, sp, #8
    ca38:	2104      	movs	r1, #4
    ca3a:	4630      	mov	r0, r6
    ca3c:	f014 fb77 	bl	2112e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    ca40:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    ca42:	4a0e      	ldr	r2, [pc, #56]	; (ca7c <sc_store+0x54>)
    ca44:	462b      	mov	r3, r5
    ca46:	2124      	movs	r1, #36	; 0x24
    ca48:	a803      	add	r0, sp, #12
    ca4a:	f7fb fa05 	bl	7e58 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    ca4e:	f104 0108 	add.w	r1, r4, #8
    ca52:	2204      	movs	r2, #4
    ca54:	a803      	add	r0, sp, #12
    ca56:	f7f9 fac1 	bl	5fdc <settings_save_one>
	if (err) {
    ca5a:	4601      	mov	r1, r0
    ca5c:	b148      	cbz	r0, ca72 <sc_store+0x4a>
    ca5e:	4a08      	ldr	r2, [pc, #32]	; (ca80 <sc_store+0x58>)
    ca60:	4b08      	ldr	r3, [pc, #32]	; (ca84 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    ca62:	4809      	ldr	r0, [pc, #36]	; (ca88 <sc_store+0x60>)
    ca64:	1ad2      	subs	r2, r2, r3
    ca66:	08d2      	lsrs	r2, r2, #3
    ca68:	0192      	lsls	r2, r2, #6
    ca6a:	f042 0201 	orr.w	r2, r2, #1
    ca6e:	f015 f885 	bl	21b7c <log_1>
}
    ca72:	b00c      	add	sp, #48	; 0x30
    ca74:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    ca76:	9200      	str	r2, [sp, #0]
    ca78:	e7e3      	b.n	ca42 <sc_store+0x1a>
    ca7a:	bf00      	nop
    ca7c:	0002c762 	.word	0x0002c762
    ca80:	00027078 	.word	0x00027078
    ca84:	00026fc8 	.word	0x00026fc8
    ca88:	0002c564 	.word	0x0002c564

0000ca8c <gatt_indicate>:
{
    ca8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca90:	4680      	mov	r8, r0
    ca92:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    ca94:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    ca98:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    ca9a:	8a96      	ldrh	r6, [r2, #20]
{
    ca9c:	4615      	mov	r5, r2
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    ca9e:	f7ff fde9 	bl	c674 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    caa2:	3602      	adds	r6, #2
	if (!req) {
    caa4:	4604      	mov	r4, r0
    caa6:	b920      	cbnz	r0, cab2 <gatt_indicate+0x26>
		return -ENOMEM;
    caa8:	f06f 050b 	mvn.w	r5, #11
}
    caac:	4628      	mov	r0, r5
    caae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->encode = encode;
    cab2:	2300      	movs	r3, #0
    cab4:	60c3      	str	r3, [r0, #12]
	req->att_op = op;
    cab6:	211d      	movs	r1, #29
	req->func = func;
    cab8:	4b1b      	ldr	r3, [pc, #108]	; (cb28 <gatt_indicate+0x9c>)
	req->len = len;
    caba:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    cabc:	7441      	strb	r1, [r0, #17]
	req->func = func;
    cabe:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    cac0:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    cac2:	4632      	mov	r2, r6
    cac4:	4640      	mov	r0, r8
    cac6:	f7ff fb21 	bl	c10c <bt_att_create_pdu>
	if (!buf) {
    caca:	4606      	mov	r6, r0
    cacc:	b968      	cbnz	r0, caea <gatt_indicate+0x5e>
    cace:	4b17      	ldr	r3, [pc, #92]	; (cb2c <gatt_indicate+0xa0>)
    cad0:	4917      	ldr	r1, [pc, #92]	; (cb30 <gatt_indicate+0xa4>)
		BT_WARN("No buffer available to send indication");
    cad2:	4818      	ldr	r0, [pc, #96]	; (cb34 <gatt_indicate+0xa8>)
    cad4:	1ac9      	subs	r1, r1, r3
    cad6:	08c9      	lsrs	r1, r1, #3
    cad8:	0189      	lsls	r1, r1, #6
    cada:	f041 0102 	orr.w	r1, r1, #2
    cade:	f015 f840 	bl	21b62 <log_0>
		bt_att_req_free(req);
    cae2:	4620      	mov	r0, r4
    cae4:	f7ff fddc 	bl	c6a0 <bt_att_req_free>
    cae8:	e7de      	b.n	caa8 <gatt_indicate+0x1c>
	return net_buf_simple_add(&buf->b, len);
    caea:	f100 0a08 	add.w	sl, r0, #8
    caee:	2102      	movs	r1, #2
    caf0:	4650      	mov	r0, sl
    caf2:	f019 f896 	bl	25c22 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    caf6:	4607      	mov	r7, r0
    caf8:	8aa9      	ldrh	r1, [r5, #20]
    cafa:	f827 9b02 	strh.w	r9, [r7], #2
    cafe:	4650      	mov	r0, sl
    cb00:	f019 f88f 	bl	25c22 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    cb04:	8aaa      	ldrh	r2, [r5, #20]
    cb06:	6929      	ldr	r1, [r5, #16]
    cb08:	4638      	mov	r0, r7
    cb0a:	f017 f836 	bl	23b7a <memcpy>
	req->buf = buf;
    cb0e:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    cb10:	4621      	mov	r1, r4
    cb12:	4640      	mov	r0, r8
    cb14:	f018 f95c 	bl	24dd0 <bt_att_req_send>
	if (err) {
    cb18:	4605      	mov	r5, r0
    cb1a:	2800      	cmp	r0, #0
    cb1c:	d0c6      	beq.n	caac <gatt_indicate+0x20>
		bt_att_req_free(req);
    cb1e:	4620      	mov	r0, r4
    cb20:	f7ff fdbe 	bl	c6a0 <bt_att_req_free>
    cb24:	e7c2      	b.n	caac <gatt_indicate+0x20>
    cb26:	bf00      	nop
    cb28:	00024e49 	.word	0x00024e49
    cb2c:	00026fc8 	.word	0x00026fc8
    cb30:	00027078 	.word	0x00027078
    cb34:	0002c580 	.word	0x0002c580

0000cb38 <gatt_notify>:
{
    cb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb3c:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    cb3e:	8992      	ldrh	r2, [r2, #12]
{
    cb40:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    cb42:	3202      	adds	r2, #2
    cb44:	211b      	movs	r1, #27
{
    cb46:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    cb48:	f7ff fae0 	bl	c10c <bt_att_create_pdu>
	if (!buf) {
    cb4c:	4605      	mov	r5, r0
    cb4e:	b1c8      	cbz	r0, cb84 <gatt_notify+0x4c>
    cb50:	f100 0908 	add.w	r9, r0, #8
    cb54:	2102      	movs	r1, #2
    cb56:	4648      	mov	r0, r9
    cb58:	f019 f863 	bl	25c22 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    cb5c:	4606      	mov	r6, r0
    cb5e:	89a1      	ldrh	r1, [r4, #12]
    cb60:	f826 8b02 	strh.w	r8, [r6], #2
    cb64:	4648      	mov	r0, r9
    cb66:	f019 f85c 	bl	25c22 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    cb6a:	89a2      	ldrh	r2, [r4, #12]
    cb6c:	68a1      	ldr	r1, [r4, #8]
    cb6e:	4630      	mov	r0, r6
    cb70:	f017 f803 	bl	23b7a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    cb74:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    cb78:	4629      	mov	r1, r5
    cb7a:	4638      	mov	r0, r7
}
    cb7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    cb80:	f018 b8dc 	b.w	24d3c <bt_att_send>
    cb84:	4b06      	ldr	r3, [pc, #24]	; (cba0 <gatt_notify+0x68>)
    cb86:	4907      	ldr	r1, [pc, #28]	; (cba4 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    cb88:	4807      	ldr	r0, [pc, #28]	; (cba8 <gatt_notify+0x70>)
    cb8a:	1ac9      	subs	r1, r1, r3
    cb8c:	08c9      	lsrs	r1, r1, #3
    cb8e:	0189      	lsls	r1, r1, #6
    cb90:	f041 0102 	orr.w	r1, r1, #2
    cb94:	f014 ffe5 	bl	21b62 <log_0>
}
    cb98:	f06f 000b 	mvn.w	r0, #11
    cb9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cba0:	00026fc8 	.word	0x00026fc8
    cba4:	00027078 	.word	0x00027078
    cba8:	0002c5a7 	.word	0x0002c5a7

0000cbac <find_cf_cfg_by_addr>:
{
    cbac:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
    cbae:	4c0e      	ldr	r4, [pc, #56]	; (cbe8 <find_cf_cfg_by_addr+0x3c>)
    cbb0:	7823      	ldrb	r3, [r4, #0]
    cbb2:	4283      	cmp	r3, r0
{
    cbb4:	4606      	mov	r6, r0
    cbb6:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
    cbb8:	d00a      	beq.n	cbd0 <find_cf_cfg_by_addr+0x24>
    cbba:	7c23      	ldrb	r3, [r4, #16]
    cbbc:	42b3      	cmp	r3, r6
    cbbe:	d111      	bne.n	cbe4 <find_cf_cfg_by_addr+0x38>
    cbc0:	490a      	ldr	r1, [pc, #40]	; (cbec <find_cf_cfg_by_addr+0x40>)
    cbc2:	2207      	movs	r2, #7
    cbc4:	4628      	mov	r0, r5
    cbc6:	f016 ffc7 	bl	23b58 <memcmp>
    cbca:	b958      	cbnz	r0, cbe4 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    cbcc:	2001      	movs	r0, #1
    cbce:	e006      	b.n	cbde <find_cf_cfg_by_addr+0x32>
    cbd0:	2207      	movs	r2, #7
    cbd2:	1c61      	adds	r1, r4, #1
    cbd4:	4628      	mov	r0, r5
    cbd6:	f016 ffbf 	bl	23b58 <memcmp>
			if (id == cf_cfg[i].id &&
    cbda:	2800      	cmp	r0, #0
    cbdc:	d1ed      	bne.n	cbba <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
    cbde:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    cbe2:	e000      	b.n	cbe6 <find_cf_cfg_by_addr+0x3a>
	return NULL;
    cbe4:	2000      	movs	r0, #0
}
    cbe6:	bd70      	pop	{r4, r5, r6, pc}
    cbe8:	2000d73c 	.word	0x2000d73c
    cbec:	2000d74d 	.word	0x2000d74d

0000cbf0 <cf_set>:
{
    cbf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cbf4:	4689      	mov	r9, r1
    cbf6:	b085      	sub	sp, #20
    cbf8:	4617      	mov	r7, r2
    cbfa:	4698      	mov	r8, r3
	if (!name) {
    cbfc:	4605      	mov	r5, r0
    cbfe:	b978      	cbnz	r0, cc20 <cf_set+0x30>
    cc00:	4934      	ldr	r1, [pc, #208]	; (ccd4 <cf_set+0xe4>)
    cc02:	4b35      	ldr	r3, [pc, #212]	; (ccd8 <cf_set+0xe8>)
		BT_ERR("Insufficient number of arguments");
    cc04:	4835      	ldr	r0, [pc, #212]	; (ccdc <cf_set+0xec>)
    cc06:	1ac9      	subs	r1, r1, r3
    cc08:	08c9      	lsrs	r1, r1, #3
    cc0a:	0189      	lsls	r1, r1, #6
    cc0c:	f041 0101 	orr.w	r1, r1, #1
    cc10:	f014 ffa7 	bl	21b62 <log_0>
		return -EINVAL;
    cc14:	f06f 0415 	mvn.w	r4, #21
}
    cc18:	4620      	mov	r0, r4
    cc1a:	b005      	add	sp, #20
    cc1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    cc20:	a902      	add	r1, sp, #8
    cc22:	f017 f8a6 	bl	23d72 <bt_settings_decode_key>
	if (err) {
    cc26:	4604      	mov	r4, r0
    cc28:	b178      	cbz	r0, cc4a <cf_set+0x5a>
    cc2a:	4a2b      	ldr	r2, [pc, #172]	; (ccd8 <cf_set+0xe8>)
    cc2c:	4c29      	ldr	r4, [pc, #164]	; (ccd4 <cf_set+0xe4>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    cc2e:	4628      	mov	r0, r5
    cc30:	1aa4      	subs	r4, r4, r2
    cc32:	08e4      	lsrs	r4, r4, #3
    cc34:	f7f8 f8ce 	bl	4dd4 <log_strdup>
    cc38:	01a4      	lsls	r4, r4, #6
    cc3a:	f044 0401 	orr.w	r4, r4, #1
    cc3e:	4601      	mov	r1, r0
    cc40:	4622      	mov	r2, r4
    cc42:	4827      	ldr	r0, [pc, #156]	; (cce0 <cf_set+0xf0>)
    cc44:	f014 ff9a 	bl	21b7c <log_1>
    cc48:	e7e4      	b.n	cc14 <cf_set+0x24>
	settings_name_next(name, &next);
    cc4a:	a901      	add	r1, sp, #4
    cc4c:	4628      	mov	r0, r5
    cc4e:	f015 fc3d 	bl	224cc <settings_name_next>
	if (!next) {
    cc52:	9801      	ldr	r0, [sp, #4]
    cc54:	b1d8      	cbz	r0, cc8e <cf_set+0x9e>
		id = strtol(next, NULL, 10);
    cc56:	220a      	movs	r2, #10
    cc58:	4621      	mov	r1, r4
    cc5a:	f016 fec0 	bl	239de <strtol>
    cc5e:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    cc60:	a902      	add	r1, sp, #8
    cc62:	4630      	mov	r0, r6
    cc64:	f7ff ffa2 	bl	cbac <find_cf_cfg_by_addr>
	if (!cfg) {
    cc68:	4605      	mov	r5, r0
    cc6a:	b9b8      	cbnz	r0, cc9c <cf_set+0xac>
		cfg = find_cf_cfg(NULL);
    cc6c:	f7ff fe56 	bl	c91c <find_cf_cfg>
		if (!cfg) {
    cc70:	4605      	mov	r5, r0
    cc72:	b970      	cbnz	r0, cc92 <cf_set+0xa2>
    cc74:	4b18      	ldr	r3, [pc, #96]	; (ccd8 <cf_set+0xe8>)
    cc76:	4917      	ldr	r1, [pc, #92]	; (ccd4 <cf_set+0xe4>)
			BT_ERR("Unable to restore CF: no cfg left");
    cc78:	481a      	ldr	r0, [pc, #104]	; (cce4 <cf_set+0xf4>)
    cc7a:	1ac9      	subs	r1, r1, r3
    cc7c:	08c9      	lsrs	r1, r1, #3
    cc7e:	0189      	lsls	r1, r1, #6
    cc80:	f041 0101 	orr.w	r1, r1, #1
    cc84:	f014 ff6d 	bl	21b62 <log_0>
			return -ENOMEM;
    cc88:	f06f 040b 	mvn.w	r4, #11
    cc8c:	e7c4      	b.n	cc18 <cf_set+0x28>
		id = BT_ID_DEFAULT;
    cc8e:	4626      	mov	r6, r4
    cc90:	e7e6      	b.n	cc60 <cf_set+0x70>
		cfg->id = id;
    cc92:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    cc96:	a902      	add	r1, sp, #8
    cc98:	f018 f8ef 	bl	24e7a <bt_addr_le_copy>
	if (len_rd) {
    cc9c:	f1b9 0f00 	cmp.w	r9, #0
    cca0:	d013      	beq.n	ccca <cf_set+0xda>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    cca2:	f105 0108 	add.w	r1, r5, #8
    cca6:	2201      	movs	r2, #1
    cca8:	4640      	mov	r0, r8
    ccaa:	47b8      	blx	r7
		if (len < 0) {
    ccac:	1e05      	subs	r5, r0, #0
    ccae:	dab3      	bge.n	cc18 <cf_set+0x28>
    ccb0:	4b09      	ldr	r3, [pc, #36]	; (ccd8 <cf_set+0xe8>)
    ccb2:	4a08      	ldr	r2, [pc, #32]	; (ccd4 <cf_set+0xe4>)
			BT_ERR("Failed to decode value (err %zd)", len);
    ccb4:	480c      	ldr	r0, [pc, #48]	; (cce8 <cf_set+0xf8>)
    ccb6:	1ad2      	subs	r2, r2, r3
    ccb8:	08d2      	lsrs	r2, r2, #3
    ccba:	0192      	lsls	r2, r2, #6
    ccbc:	f042 0201 	orr.w	r2, r2, #1
    ccc0:	4629      	mov	r1, r5
    ccc2:	f014 ff5b 	bl	21b7c <log_1>
			return len;
    ccc6:	462c      	mov	r4, r5
    ccc8:	e7a6      	b.n	cc18 <cf_set+0x28>
		clear_cf_cfg(cfg);
    ccca:	4628      	mov	r0, r5
    cccc:	f018 f96b 	bl	24fa6 <clear_cf_cfg>
    ccd0:	e7a2      	b.n	cc18 <cf_set+0x28>
    ccd2:	bf00      	nop
    ccd4:	00027078 	.word	0x00027078
    ccd8:	00026fc8 	.word	0x00026fc8
    ccdc:	0002b3d2 	.word	0x0002b3d2
    cce0:	0002c5d0 	.word	0x0002c5d0
    cce4:	0002c5ec 	.word	0x0002c5ec
    cce8:	0002c517 	.word	0x0002c517

0000ccec <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    ccec:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    ccee:	6881      	ldr	r1, [r0, #8]
{
    ccf0:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    ccf2:	4a07      	ldr	r2, [pc, #28]	; (cd10 <remove_peer_from_attr+0x24>)
    ccf4:	4291      	cmp	r1, r2
    ccf6:	d109      	bne.n	cd0c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    ccf8:	791a      	ldrb	r2, [r3, #4]
    ccfa:	6819      	ldr	r1, [r3, #0]
    ccfc:	68c0      	ldr	r0, [r0, #12]
    ccfe:	f018 fa24 	bl	2514a <ccc_find_cfg>
	if (cfg) {
    cd02:	b118      	cbz	r0, cd0c <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
    cd04:	220a      	movs	r2, #10
    cd06:	2100      	movs	r1, #0
    cd08:	f016 ff62 	bl	23bd0 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    cd0c:	2001      	movs	r0, #1
    cd0e:	bd08      	pop	{r3, pc}
    cd10:	0000cdd9 	.word	0x0000cdd9

0000cd14 <ccc_save>:
{
    cd14:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    cd16:	4b0c      	ldr	r3, [pc, #48]	; (cd48 <ccc_save+0x34>)
{
    cd18:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    cd1a:	6882      	ldr	r2, [r0, #8]
    cd1c:	429a      	cmp	r2, r3
{
    cd1e:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    cd20:	d10f      	bne.n	cd42 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    cd22:	7922      	ldrb	r2, [r4, #4]
    cd24:	6821      	ldr	r1, [r4, #0]
    cd26:	68c0      	ldr	r0, [r0, #12]
    cd28:	f018 fa0f 	bl	2514a <ccc_find_cfg>
	if (!cfg) {
    cd2c:	b148      	cbz	r0, cd42 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    cd2e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    cd32:	8901      	ldrh	r1, [r0, #8]
    cd34:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    cd38:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    cd3a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    cd3c:	8151      	strh	r1, [r2, #10]
	save->count++;
    cd3e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    cd42:	2001      	movs	r0, #1
    cd44:	bd38      	pop	{r3, r4, r5, pc}
    cd46:	bf00      	nop
    cd48:	0000cdd9 	.word	0x0000cdd9

0000cd4c <ccc_load>:
{
    cd4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    cd4e:	4b21      	ldr	r3, [pc, #132]	; (cdd4 <ccc_load+0x88>)
{
    cd50:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    cd52:	6882      	ldr	r2, [r0, #8]
    cd54:	429a      	cmp	r2, r3
    cd56:	d002      	beq.n	cd5e <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    cd58:	2001      	movs	r0, #1
}
    cd5a:	b002      	add	sp, #8
    cd5c:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    cd5e:	68a3      	ldr	r3, [r4, #8]
    cd60:	68c6      	ldr	r6, [r0, #12]
    cd62:	b94b      	cbnz	r3, cd78 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    cd64:	7922      	ldrb	r2, [r4, #4]
    cd66:	6821      	ldr	r1, [r4, #0]
    cd68:	4630      	mov	r0, r6
    cd6a:	f018 f9ee 	bl	2514a <ccc_find_cfg>
	if (!cfg) {
    cd6e:	2800      	cmp	r0, #0
    cd70:	d0f2      	beq.n	cd58 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    cd72:	f018 f885 	bl	24e80 <clear_ccc_cfg>
    cd76:	e7ef      	b.n	cd58 <ccc_load+0xc>
	} else if (!load->count) {
    cd78:	68e0      	ldr	r0, [r4, #12]
    cd7a:	2800      	cmp	r0, #0
    cd7c:	d0ed      	beq.n	cd5a <ccc_load+0xe>
	if (load->entry->handle != handle) {
    cd7e:	881b      	ldrh	r3, [r3, #0]
    cd80:	4299      	cmp	r1, r3
    cd82:	d00a      	beq.n	cd9a <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    cd84:	d9e8      	bls.n	cd58 <ccc_load+0xc>
	load->count--;
    cd86:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    cd88:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    cd8a:	3801      	subs	r0, #1
	load->entry++;
    cd8c:	3304      	adds	r3, #4
	load->count--;
    cd8e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    cd90:	3800      	subs	r0, #0
	load->entry++;
    cd92:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    cd94:	bf18      	it	ne
    cd96:	2001      	movne	r0, #1
    cd98:	e7df      	b.n	cd5a <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    cd9a:	7922      	ldrb	r2, [r4, #4]
    cd9c:	6821      	ldr	r1, [r4, #0]
    cd9e:	4630      	mov	r0, r6
    cda0:	f018 f9d3 	bl	2514a <ccc_find_cfg>
	if (!cfg) {
    cda4:	4605      	mov	r5, r0
    cda6:	b980      	cbnz	r0, cdca <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    cda8:	9000      	str	r0, [sp, #0]
    cdaa:	4602      	mov	r2, r0
    cdac:	f8cd 0003 	str.w	r0, [sp, #3]
    cdb0:	4669      	mov	r1, sp
    cdb2:	4630      	mov	r0, r6
    cdb4:	f018 f9c9 	bl	2514a <ccc_find_cfg>
		if (!cfg) {
    cdb8:	4605      	mov	r5, r0
    cdba:	2800      	cmp	r0, #0
    cdbc:	d0e3      	beq.n	cd86 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    cdbe:	6821      	ldr	r1, [r4, #0]
    cdc0:	3001      	adds	r0, #1
    cdc2:	f018 f85a 	bl	24e7a <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    cdc6:	7923      	ldrb	r3, [r4, #4]
    cdc8:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    cdca:	68a3      	ldr	r3, [r4, #8]
    cdcc:	885b      	ldrh	r3, [r3, #2]
    cdce:	812b      	strh	r3, [r5, #8]
    cdd0:	e7d9      	b.n	cd86 <ccc_load+0x3a>
    cdd2:	bf00      	nop
    cdd4:	0000cdd9 	.word	0x0000cdd9

0000cdd8 <bt_gatt_attr_write_ccc>:
{
    cdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cddc:	461f      	mov	r7, r3
    cdde:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    cde2:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    cde6:	4604      	mov	r4, r0
    cde8:	4688      	mov	r8, r1
	if (offset) {
    cdea:	2b00      	cmp	r3, #0
    cdec:	d147      	bne.n	ce7e <bt_gatt_attr_write_ccc+0xa6>
	if (!len || len > sizeof(uint16_t)) {
    cdee:	1e7b      	subs	r3, r7, #1
    cdf0:	2b01      	cmp	r3, #1
    cdf2:	d847      	bhi.n	ce84 <bt_gatt_attr_write_ccc+0xac>
		value = *(uint8_t *)buf;
    cdf4:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
    cdf6:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
    cdf8:	4649      	mov	r1, r9
    cdfa:	bf14      	ite	ne
    cdfc:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
    cdfe:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
    ce00:	f018 f9b2 	bl	25168 <find_ccc_cfg>
	if (!cfg) {
    ce04:	4605      	mov	r5, r0
    ce06:	b9e0      	cbnz	r0, ce42 <bt_gatt_attr_write_ccc+0x6a>
		if (!value) {
    ce08:	b916      	cbnz	r6, ce10 <bt_gatt_attr_write_ccc+0x38>
			return len;
    ce0a:	4638      	mov	r0, r7
}
    ce0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    ce10:	4649      	mov	r1, r9
    ce12:	f018 f9a9 	bl	25168 <find_ccc_cfg>
		if (!cfg) {
    ce16:	4605      	mov	r5, r0
    ce18:	b960      	cbnz	r0, ce34 <bt_gatt_attr_write_ccc+0x5c>
    ce1a:	4b1c      	ldr	r3, [pc, #112]	; (ce8c <bt_gatt_attr_write_ccc+0xb4>)
    ce1c:	491c      	ldr	r1, [pc, #112]	; (ce90 <bt_gatt_attr_write_ccc+0xb8>)
			BT_WARN("No space to store CCC cfg");
    ce1e:	481d      	ldr	r0, [pc, #116]	; (ce94 <bt_gatt_attr_write_ccc+0xbc>)
    ce20:	1ac9      	subs	r1, r1, r3
    ce22:	08c9      	lsrs	r1, r1, #3
    ce24:	0189      	lsls	r1, r1, #6
    ce26:	f041 0102 	orr.w	r1, r1, #2
    ce2a:	f014 fe9a 	bl	21b62 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    ce2e:	f06f 0010 	mvn.w	r0, #16
    ce32:	e7eb      	b.n	ce0c <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    ce34:	f104 0188 	add.w	r1, r4, #136	; 0x88
    ce38:	3001      	adds	r0, #1
    ce3a:	f018 f81e 	bl	24e7a <bt_addr_le_copy>
		cfg->id = conn->id;
    ce3e:	7a23      	ldrb	r3, [r4, #8]
    ce40:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    ce42:	f8d9 3010 	ldr.w	r3, [r9, #16]
    ce46:	b973      	cbnz	r3, ce66 <bt_gatt_attr_write_ccc+0x8e>
	if (cfg->value != ccc->value) {
    ce48:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    ce4c:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
    ce4e:	42b3      	cmp	r3, r6
    ce50:	d003      	beq.n	ce5a <bt_gatt_attr_write_ccc+0x82>
		gatt_ccc_changed(attr, ccc);
    ce52:	4649      	mov	r1, r9
    ce54:	4640      	mov	r0, r8
    ce56:	f017 ffed 	bl	24e34 <gatt_ccc_changed>
	if (!value) {
    ce5a:	2e00      	cmp	r6, #0
    ce5c:	d1d5      	bne.n	ce0a <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
    ce5e:	4628      	mov	r0, r5
    ce60:	f018 f80e 	bl	24e80 <clear_ccc_cfg>
    ce64:	e7d1      	b.n	ce0a <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    ce66:	4632      	mov	r2, r6
    ce68:	4641      	mov	r1, r8
    ce6a:	4620      	mov	r0, r4
    ce6c:	4798      	blx	r3
		if (write < 0) {
    ce6e:	2800      	cmp	r0, #0
    ce70:	dbcc      	blt.n	ce0c <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
    ce72:	1e44      	subs	r4, r0, #1
    ce74:	2c01      	cmp	r4, #1
    ce76:	d9e7      	bls.n	ce48 <bt_gatt_attr_write_ccc+0x70>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    ce78:	f06f 000d 	mvn.w	r0, #13
    ce7c:	e7c6      	b.n	ce0c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ce7e:	f06f 0006 	mvn.w	r0, #6
    ce82:	e7c3      	b.n	ce0c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    ce84:	f06f 000c 	mvn.w	r0, #12
    ce88:	e7c0      	b.n	ce0c <bt_gatt_attr_write_ccc+0x34>
    ce8a:	bf00      	nop
    ce8c:	00026fc8 	.word	0x00026fc8
    ce90:	00027078 	.word	0x00027078
    ce94:	0002c60e 	.word	0x0002c60e

0000ce98 <find_sc_cfg>:
{
    ce98:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    ce9a:	4c0e      	ldr	r4, [pc, #56]	; (ced4 <find_sc_cfg+0x3c>)
    ce9c:	7823      	ldrb	r3, [r4, #0]
    ce9e:	4283      	cmp	r3, r0
{
    cea0:	4605      	mov	r5, r0
    cea2:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    cea4:	d00a      	beq.n	cebc <find_sc_cfg+0x24>
    cea6:	7b23      	ldrb	r3, [r4, #12]
    cea8:	42ab      	cmp	r3, r5
    ceaa:	d111      	bne.n	ced0 <find_sc_cfg+0x38>
    ceac:	480a      	ldr	r0, [pc, #40]	; (ced8 <find_sc_cfg+0x40>)
    ceae:	2207      	movs	r2, #7
    ceb0:	4631      	mov	r1, r6
    ceb2:	f016 fe51 	bl	23b58 <memcmp>
    ceb6:	b958      	cbnz	r0, ced0 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    ceb8:	2001      	movs	r0, #1
    ceba:	e005      	b.n	cec8 <find_sc_cfg+0x30>
    cebc:	2207      	movs	r2, #7
    cebe:	1c60      	adds	r0, r4, #1
    cec0:	f016 fe4a 	bl	23b58 <memcmp>
		if (id == sc_cfg[i].id &&
    cec4:	2800      	cmp	r0, #0
    cec6:	d1ee      	bne.n	cea6 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    cec8:	230c      	movs	r3, #12
    ceca:	fb03 4000 	mla	r0, r3, r0, r4
    cece:	e000      	b.n	ced2 <find_sc_cfg+0x3a>
	return NULL;
    ced0:	2000      	movs	r0, #0
}
    ced2:	bd70      	pop	{r4, r5, r6, pc}
    ced4:	2000ed00 	.word	0x2000ed00
    ced8:	2000ed0d 	.word	0x2000ed0d

0000cedc <sc_save>:
{
    cedc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cee0:	4680      	mov	r8, r0
    cee2:	460f      	mov	r7, r1
    cee4:	4616      	mov	r6, r2
    cee6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    cee8:	f7ff ffd6 	bl	ce98 <find_sc_cfg>
	if (!cfg) {
    ceec:	4604      	mov	r4, r0
    ceee:	b9c8      	cbnz	r0, cf24 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    cef0:	4669      	mov	r1, sp
    cef2:	9000      	str	r0, [sp, #0]
    cef4:	f8cd 0003 	str.w	r0, [sp, #3]
    cef8:	f7ff ffce 	bl	ce98 <find_sc_cfg>
		if (!cfg) {
    cefc:	4604      	mov	r4, r0
    cefe:	b960      	cbnz	r0, cf1a <sc_save+0x3e>
    cf00:	4916      	ldr	r1, [pc, #88]	; (cf5c <sc_save+0x80>)
    cf02:	4b17      	ldr	r3, [pc, #92]	; (cf60 <sc_save+0x84>)
			BT_ERR("unable to save SC: no cfg left");
    cf04:	4817      	ldr	r0, [pc, #92]	; (cf64 <sc_save+0x88>)
    cf06:	1ac9      	subs	r1, r1, r3
    cf08:	08c9      	lsrs	r1, r1, #3
    cf0a:	0189      	lsls	r1, r1, #6
    cf0c:	f041 0101 	orr.w	r1, r1, #1
    cf10:	f014 fe27 	bl	21b62 <log_0>
}
    cf14:	b002      	add	sp, #8
    cf16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    cf1a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    cf1e:	4639      	mov	r1, r7
    cf20:	f017 ffab 	bl	24e7a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    cf24:	8922      	ldrh	r2, [r4, #8]
    cf26:	8963      	ldrh	r3, [r4, #10]
    cf28:	b97a      	cbnz	r2, cf4a <sc_save+0x6e>
    cf2a:	b983      	cbnz	r3, cf4e <sc_save+0x72>
		cfg->data.start = start;
    cf2c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    cf2e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    cf30:	4621      	mov	r1, r4
    cf32:	f811 0b01 	ldrb.w	r0, [r1], #1
    cf36:	f017 f944 	bl	241c2 <bt_addr_le_is_bonded>
    cf3a:	2800      	cmp	r0, #0
    cf3c:	d0ea      	beq.n	cf14 <sc_save+0x38>
		sc_store(cfg);
    cf3e:	4620      	mov	r0, r4
}
    cf40:	b002      	add	sp, #8
    cf42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
    cf46:	f7ff bd6f 	b.w	ca28 <sc_store>
	if (new_start >= *start && new_end <= *end) {
    cf4a:	4296      	cmp	r6, r2
    cf4c:	d302      	bcc.n	cf54 <sc_save+0x78>
    cf4e:	429d      	cmp	r5, r3
    cf50:	d8ed      	bhi.n	cf2e <sc_save+0x52>
    cf52:	e7df      	b.n	cf14 <sc_save+0x38>
	if (*end < new_end) {
    cf54:	429d      	cmp	r5, r3
		*start = new_start;
    cf56:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    cf58:	d9ea      	bls.n	cf30 <sc_save+0x54>
    cf5a:	e7e8      	b.n	cf2e <sc_save+0x52>
    cf5c:	00027078 	.word	0x00027078
    cf60:	00026fc8 	.word	0x00026fc8
    cf64:	0002c628 	.word	0x0002c628

0000cf68 <notify_cb>:
{
    cf68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    cf6c:	4b33      	ldr	r3, [pc, #204]	; (d03c <notify_cb+0xd4>)
{
    cf6e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    cf70:	6882      	ldr	r2, [r0, #8]
    cf72:	429a      	cmp	r2, r3
{
    cf74:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    cf76:	d113      	bne.n	cfa0 <notify_cb+0x38>
	ccc = attr->user_data;
    cf78:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    cf7a:	4b31      	ldr	r3, [pc, #196]	; (d040 <notify_cb+0xd8>)
    cf7c:	429f      	cmp	r7, r3
    cf7e:	d013      	beq.n	cfa8 <notify_cb+0x40>
		if (cfg->value != data->type) {
    cf80:	893a      	ldrh	r2, [r7, #8]
    cf82:	89a3      	ldrh	r3, [r4, #12]
    cf84:	429a      	cmp	r2, r3
    cf86:	d10b      	bne.n	cfa0 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    cf88:	4639      	mov	r1, r7
    cf8a:	f811 0b01 	ldrb.w	r0, [r1], #1
    cf8e:	f7fe f86d 	bl	b06c <bt_conn_lookup_addr_le>
		if (!conn) {
    cf92:	4605      	mov	r5, r0
    cf94:	b120      	cbz	r0, cfa0 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    cf96:	7b43      	ldrb	r3, [r0, #13]
    cf98:	2b07      	cmp	r3, #7
    cf9a:	d02d      	beq.n	cff8 <notify_cb+0x90>
			bt_conn_unref(conn);
    cf9c:	f017 fa25 	bl	243ea <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    cfa0:	2001      	movs	r0, #1
}
    cfa2:	b003      	add	sp, #12
    cfa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    cfa8:	f04f 0800 	mov.w	r8, #0
    cfac:	4d25      	ldr	r5, [pc, #148]	; (d044 <notify_cb+0xdc>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    cfae:	46c1      	mov	r9, r8
    cfb0:	2207      	movs	r2, #7
    cfb2:	4669      	mov	r1, sp
    cfb4:	4628      	mov	r0, r5
    cfb6:	f8cd 9000 	str.w	r9, [sp]
    cfba:	f8cd 9003 	str.w	r9, [sp, #3]
    cfbe:	f016 fdcb 	bl	23b58 <memcmp>
    cfc2:	b178      	cbz	r0, cfe4 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    cfc4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    cfc8:	2207      	movs	r2, #7
    cfca:	4629      	mov	r1, r5
    cfcc:	f7fe f892 	bl	b0f4 <bt_conn_lookup_state_le>
			if (!conn) {
    cfd0:	b978      	cbnz	r0, cff2 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
    cfd2:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    cfd4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    cfd8:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    cfda:	4629      	mov	r1, r5
    cfdc:	8853      	ldrh	r3, [r2, #2]
    cfde:	8812      	ldrh	r2, [r2, #0]
    cfe0:	f7ff ff7c 	bl	cedc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    cfe4:	350c      	adds	r5, #12
    cfe6:	f1b8 0f00 	cmp.w	r8, #0
    cfea:	d1c9      	bne.n	cf80 <notify_cb+0x18>
    cfec:	f04f 0801 	mov.w	r8, #1
    cff0:	e7de      	b.n	cfb0 <notify_cb+0x48>
			bt_conn_unref(conn);
    cff2:	f017 f9fa 	bl	243ea <bt_conn_unref>
    cff6:	e7f5      	b.n	cfe4 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    cff8:	697b      	ldr	r3, [r7, #20]
    cffa:	b123      	cbz	r3, d006 <notify_cb+0x9e>
    cffc:	4631      	mov	r1, r6
    cffe:	4798      	blx	r3
    d000:	b908      	cbnz	r0, d006 <notify_cb+0x9e>
			bt_conn_unref(conn);
    d002:	4628      	mov	r0, r5
    d004:	e7ca      	b.n	cf9c <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
    d006:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    d008:	88a1      	ldrh	r1, [r4, #4]
    d00a:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    d00c:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    d00e:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    d010:	d110      	bne.n	d034 <notify_cb+0xcc>
			err = gatt_indicate(conn, data->handle,
    d012:	f7ff fd3b 	bl	ca8c <gatt_indicate>
			if (err == 0) {
    d016:	4606      	mov	r6, r0
    d018:	b918      	cbnz	r0, d022 <notify_cb+0xba>
				data->ind_params->_ref++;
    d01a:	6922      	ldr	r2, [r4, #16]
    d01c:	7d93      	ldrb	r3, [r2, #22]
    d01e:	3301      	adds	r3, #1
    d020:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    d022:	4628      	mov	r0, r5
    d024:	f017 f9e1 	bl	243ea <bt_conn_unref>
		if (err < 0) {
    d028:	2e00      	cmp	r6, #0
    d02a:	f04f 0000 	mov.w	r0, #0
    d02e:	dbb8      	blt.n	cfa2 <notify_cb+0x3a>
		data->err = 0;
    d030:	60a0      	str	r0, [r4, #8]
    d032:	e7b5      	b.n	cfa0 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    d034:	f7ff fd80 	bl	cb38 <gatt_notify>
    d038:	4606      	mov	r6, r0
    d03a:	e7f2      	b.n	d022 <notify_cb+0xba>
    d03c:	0000cdd9 	.word	0x0000cdd9
    d040:	20000354 	.word	0x20000354
    d044:	2000ed01 	.word	0x2000ed01

0000d048 <bt_gatt_clear_sc>:
{
    d048:	b570      	push	{r4, r5, r6, lr}
    d04a:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    d04c:	f7ff ff24 	bl	ce98 <find_sc_cfg>
	if (!cfg) {
    d050:	4604      	mov	r4, r0
    d052:	b318      	cbz	r0, d09c <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
    d054:	4605      	mov	r5, r0
    d056:	f815 2b01 	ldrb.w	r2, [r5], #1
    d05a:	b312      	cbz	r2, d0a2 <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    d05c:	ae02      	add	r6, sp, #8
    d05e:	2104      	movs	r1, #4
    d060:	4630      	mov	r0, r6
    d062:	f014 f864 	bl	2112e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    d066:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    d068:	2124      	movs	r1, #36	; 0x24
    d06a:	4a0f      	ldr	r2, [pc, #60]	; (d0a8 <bt_gatt_clear_sc+0x60>)
    d06c:	462b      	mov	r3, r5
    d06e:	a803      	add	r0, sp, #12
    d070:	f7fa fef2 	bl	7e58 <bt_settings_encode_key>
		err = settings_delete(key);
    d074:	a803      	add	r0, sp, #12
    d076:	f015 fa02 	bl	2247e <settings_delete>
		if (err) {
    d07a:	4601      	mov	r1, r0
    d07c:	b148      	cbz	r0, d092 <bt_gatt_clear_sc+0x4a>
    d07e:	4a0b      	ldr	r2, [pc, #44]	; (d0ac <bt_gatt_clear_sc+0x64>)
    d080:	4b0b      	ldr	r3, [pc, #44]	; (d0b0 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
    d082:	480c      	ldr	r0, [pc, #48]	; (d0b4 <bt_gatt_clear_sc+0x6c>)
    d084:	1ad2      	subs	r2, r2, r3
    d086:	08d2      	lsrs	r2, r2, #3
    d088:	0192      	lsls	r2, r2, #6
    d08a:	f042 0201 	orr.w	r2, r2, #1
    d08e:	f014 fd75 	bl	21b7c <log_1>
	memset(cfg, 0, sizeof(*cfg));
    d092:	220c      	movs	r2, #12
    d094:	2100      	movs	r1, #0
    d096:	4620      	mov	r0, r4
    d098:	f016 fd9a 	bl	23bd0 <memset>
}
    d09c:	2000      	movs	r0, #0
    d09e:	b00c      	add	sp, #48	; 0x30
    d0a0:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    d0a2:	9200      	str	r2, [sp, #0]
    d0a4:	e7e0      	b.n	d068 <bt_gatt_clear_sc+0x20>
    d0a6:	bf00      	nop
    d0a8:	0002c762 	.word	0x0002c762
    d0ac:	00027078 	.word	0x00027078
    d0b0:	00026fc8 	.word	0x00026fc8
    d0b4:	0002c647 	.word	0x0002c647

0000d0b8 <sc_clear>:
{
    d0b8:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d0ba:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    d0be:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d0c0:	4631      	mov	r1, r6
    d0c2:	7a00      	ldrb	r0, [r0, #8]
    d0c4:	f017 f87d 	bl	241c2 <bt_addr_le_is_bonded>
    d0c8:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    d0ca:	4631      	mov	r1, r6
    d0cc:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d0ce:	b17d      	cbz	r5, d0f0 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    d0d0:	f7ff ffba 	bl	d048 <bt_gatt_clear_sc>
		if (err) {
    d0d4:	4601      	mov	r1, r0
    d0d6:	b1a0      	cbz	r0, d102 <sc_clear+0x4a>
    d0d8:	4a0a      	ldr	r2, [pc, #40]	; (d104 <sc_clear+0x4c>)
    d0da:	4b0b      	ldr	r3, [pc, #44]	; (d108 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
    d0dc:	480b      	ldr	r0, [pc, #44]	; (d10c <sc_clear+0x54>)
    d0de:	1ad2      	subs	r2, r2, r3
    d0e0:	08d2      	lsrs	r2, r2, #3
    d0e2:	0192      	lsls	r2, r2, #6
}
    d0e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    d0e8:	f042 0201 	orr.w	r2, r2, #1
    d0ec:	f014 bd46 	b.w	21b7c <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    d0f0:	f7ff fed2 	bl	ce98 <find_sc_cfg>
		if (cfg) {
    d0f4:	b128      	cbz	r0, d102 <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
    d0f6:	4629      	mov	r1, r5
    d0f8:	220c      	movs	r2, #12
}
    d0fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    d0fe:	f016 bd67 	b.w	23bd0 <memset>
}
    d102:	bd70      	pop	{r4, r5, r6, pc}
    d104:	00027078 	.word	0x00027078
    d108:	00026fc8 	.word	0x00026fc8
    d10c:	0002c664 	.word	0x0002c664

0000d110 <disconnected_cb>:
{
    d110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d114:	4b1f      	ldr	r3, [pc, #124]	; (d194 <disconnected_cb+0x84>)
{
    d116:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d118:	6882      	ldr	r2, [r0, #8]
    d11a:	429a      	cmp	r2, r3
{
    d11c:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d11e:	d102      	bne.n	d126 <disconnected_cb+0x16>
	ccc = attr->user_data;
    d120:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    d122:	8963      	ldrh	r3, [r4, #10]
    d124:	b9c3      	cbnz	r3, d158 <disconnected_cb+0x48>
}
    d126:	2001      	movs	r0, #1
    d128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d12c:	f105 0888 	add.w	r8, r5, #136	; 0x88
    d130:	7a28      	ldrb	r0, [r5, #8]
    d132:	4641      	mov	r1, r8
    d134:	f017 f845 	bl	241c2 <bt_addr_le_is_bonded>
    d138:	b948      	cbnz	r0, d14e <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    d13a:	4b17      	ldr	r3, [pc, #92]	; (d198 <disconnected_cb+0x88>)
    d13c:	429c      	cmp	r4, r3
    d13e:	d102      	bne.n	d146 <disconnected_cb+0x36>
					sc_clear(conn);
    d140:	4628      	mov	r0, r5
    d142:	f7ff ffb9 	bl	d0b8 <sc_clear>
				clear_ccc_cfg(cfg);
    d146:	4620      	mov	r0, r4
    d148:	f017 fe9a 	bl	24e80 <clear_ccc_cfg>
	if (!value_used) {
    d14c:	e019      	b.n	d182 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d14e:	4641      	mov	r1, r8
    d150:	4638      	mov	r0, r7
    d152:	f017 fe92 	bl	24e7a <bt_addr_le_copy>
	if (!value_used) {
    d156:	e014      	b.n	d182 <disconnected_cb+0x72>
		if (!cfg->value) {
    d158:	8923      	ldrh	r3, [r4, #8]
    d15a:	b193      	cbz	r3, d182 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d15c:	4627      	mov	r7, r4
    d15e:	4628      	mov	r0, r5
    d160:	f817 1b01 	ldrb.w	r1, [r7], #1
    d164:	463a      	mov	r2, r7
    d166:	f017 f905 	bl	24374 <bt_conn_is_peer_addr_le>
    d16a:	2800      	cmp	r0, #0
    d16c:	d1de      	bne.n	d12c <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d16e:	7820      	ldrb	r0, [r4, #0]
    d170:	4639      	mov	r1, r7
    d172:	f7fd ff7b 	bl	b06c <bt_conn_lookup_addr_le>
			if (tmp) {
    d176:	b120      	cbz	r0, d182 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    d178:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    d17a:	f017 f936 	bl	243ea <bt_conn_unref>
	if (!value_used) {
    d17e:	2d07      	cmp	r5, #7
    d180:	d0d1      	beq.n	d126 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    d182:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    d184:	2100      	movs	r1, #0
    d186:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    d188:	2b00      	cmp	r3, #0
    d18a:	d0cc      	beq.n	d126 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    d18c:	4630      	mov	r0, r6
    d18e:	4798      	blx	r3
    d190:	e7c9      	b.n	d126 <disconnected_cb+0x16>
    d192:	bf00      	nop
    d194:	0000cdd9 	.word	0x0000cdd9
    d198:	20000354 	.word	0x20000354

0000d19c <sc_set>:
{
    d19c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d1a0:	460e      	mov	r6, r1
    d1a2:	b087      	sub	sp, #28
    d1a4:	4690      	mov	r8, r2
    d1a6:	4699      	mov	r9, r3
	if (!name) {
    d1a8:	4607      	mov	r7, r0
    d1aa:	b978      	cbnz	r0, d1cc <sc_set+0x30>
    d1ac:	4937      	ldr	r1, [pc, #220]	; (d28c <sc_set+0xf0>)
    d1ae:	4b38      	ldr	r3, [pc, #224]	; (d290 <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
    d1b0:	4838      	ldr	r0, [pc, #224]	; (d294 <sc_set+0xf8>)
    d1b2:	1ac9      	subs	r1, r1, r3
    d1b4:	08c9      	lsrs	r1, r1, #3
    d1b6:	0189      	lsls	r1, r1, #6
    d1b8:	f041 0101 	orr.w	r1, r1, #1
    d1bc:	f014 fcd1 	bl	21b62 <log_0>
		return -EINVAL;
    d1c0:	f06f 0515 	mvn.w	r5, #21
}
    d1c4:	4628      	mov	r0, r5
    d1c6:	b007      	add	sp, #28
    d1c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    d1cc:	a902      	add	r1, sp, #8
    d1ce:	f016 fdd0 	bl	23d72 <bt_settings_decode_key>
	if (err) {
    d1d2:	4605      	mov	r5, r0
    d1d4:	b178      	cbz	r0, d1f6 <sc_set+0x5a>
    d1d6:	4a2e      	ldr	r2, [pc, #184]	; (d290 <sc_set+0xf4>)
    d1d8:	4c2c      	ldr	r4, [pc, #176]	; (d28c <sc_set+0xf0>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    d1da:	4638      	mov	r0, r7
    d1dc:	1aa4      	subs	r4, r4, r2
    d1de:	08e4      	lsrs	r4, r4, #3
    d1e0:	f7f7 fdf8 	bl	4dd4 <log_strdup>
    d1e4:	01a4      	lsls	r4, r4, #6
    d1e6:	f044 0401 	orr.w	r4, r4, #1
    d1ea:	4601      	mov	r1, r0
    d1ec:	4622      	mov	r2, r4
    d1ee:	482a      	ldr	r0, [pc, #168]	; (d298 <sc_set+0xfc>)
    d1f0:	f014 fcc4 	bl	21b7c <log_1>
    d1f4:	e7e4      	b.n	d1c0 <sc_set+0x24>
	settings_name_next(name, &next);
    d1f6:	a901      	add	r1, sp, #4
    d1f8:	4638      	mov	r0, r7
    d1fa:	f015 f967 	bl	224cc <settings_name_next>
	if (!next) {
    d1fe:	9801      	ldr	r0, [sp, #4]
    d200:	b308      	cbz	r0, d246 <sc_set+0xaa>
		id = strtol(next, NULL, 10);
    d202:	220a      	movs	r2, #10
    d204:	4629      	mov	r1, r5
    d206:	f016 fbea 	bl	239de <strtol>
    d20a:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    d20c:	a902      	add	r1, sp, #8
    d20e:	4638      	mov	r0, r7
    d210:	f7ff fe42 	bl	ce98 <find_sc_cfg>
	if (!cfg && len_rd) {
    d214:	4604      	mov	r4, r0
    d216:	bb88      	cbnz	r0, d27c <sc_set+0xe0>
    d218:	2e00      	cmp	r6, #0
    d21a:	d0d3      	beq.n	d1c4 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    d21c:	a904      	add	r1, sp, #16
    d21e:	9004      	str	r0, [sp, #16]
    d220:	f8cd 0013 	str.w	r0, [sp, #19]
    d224:	f7ff fe38 	bl	ce98 <find_sc_cfg>
		if (!cfg) {
    d228:	4604      	mov	r4, r0
    d22a:	b970      	cbnz	r0, d24a <sc_set+0xae>
    d22c:	4b18      	ldr	r3, [pc, #96]	; (d290 <sc_set+0xf4>)
    d22e:	4917      	ldr	r1, [pc, #92]	; (d28c <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
    d230:	481a      	ldr	r0, [pc, #104]	; (d29c <sc_set+0x100>)
    d232:	1ac9      	subs	r1, r1, r3
    d234:	08c9      	lsrs	r1, r1, #3
    d236:	0189      	lsls	r1, r1, #6
    d238:	f041 0101 	orr.w	r1, r1, #1
    d23c:	f014 fc91 	bl	21b62 <log_0>
			return -ENOMEM;
    d240:	f06f 050b 	mvn.w	r5, #11
    d244:	e7be      	b.n	d1c4 <sc_set+0x28>
		id = BT_ID_DEFAULT;
    d246:	462f      	mov	r7, r5
    d248:	e7e0      	b.n	d20c <sc_set+0x70>
		cfg->id = id;
    d24a:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    d24e:	a902      	add	r1, sp, #8
    d250:	f017 fe13 	bl	24e7a <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    d254:	f104 0108 	add.w	r1, r4, #8
    d258:	2204      	movs	r2, #4
    d25a:	4648      	mov	r0, r9
    d25c:	47c0      	blx	r8
		if (len < 0) {
    d25e:	1e04      	subs	r4, r0, #0
    d260:	dab0      	bge.n	d1c4 <sc_set+0x28>
    d262:	4b0b      	ldr	r3, [pc, #44]	; (d290 <sc_set+0xf4>)
    d264:	4a09      	ldr	r2, [pc, #36]	; (d28c <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %zd)", len);
    d266:	480e      	ldr	r0, [pc, #56]	; (d2a0 <sc_set+0x104>)
    d268:	1ad2      	subs	r2, r2, r3
    d26a:	08d2      	lsrs	r2, r2, #3
    d26c:	0192      	lsls	r2, r2, #6
    d26e:	f042 0201 	orr.w	r2, r2, #1
    d272:	4621      	mov	r1, r4
    d274:	f014 fc82 	bl	21b7c <log_1>
			return len;
    d278:	4625      	mov	r5, r4
    d27a:	e7a3      	b.n	d1c4 <sc_set+0x28>
	if (len_rd) {
    d27c:	2e00      	cmp	r6, #0
    d27e:	d1e9      	bne.n	d254 <sc_set+0xb8>
		memset(cfg, 0, sizeof(*cfg));
    d280:	220c      	movs	r2, #12
    d282:	4631      	mov	r1, r6
    d284:	f016 fca4 	bl	23bd0 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    d288:	e79c      	b.n	d1c4 <sc_set+0x28>
    d28a:	bf00      	nop
    d28c:	00027078 	.word	0x00027078
    d290:	00026fc8 	.word	0x00026fc8
    d294:	0002b3d2 	.word	0x0002b3d2
    d298:	0002c5d0 	.word	0x0002c5d0
    d29c:	0002c67a 	.word	0x0002c67a
    d2a0:	0002c517 	.word	0x0002c517

0000d2a4 <sc_commit>:
{
    d2a4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d2a6:	4c0c      	ldr	r4, [pc, #48]	; (d2d8 <sc_commit+0x34>)
    d2a8:	f06f 0102 	mvn.w	r1, #2
    d2ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
    d2b0:	f017 fe96 	bl	24fe0 <atomic_and.isra.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d2b4:	f3bf 8f5b 	dmb	ish
    d2b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d2ba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    d2be:	07db      	lsls	r3, r3, #31
    d2c0:	d507      	bpl.n	d2d2 <sc_commit+0x2e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d2c2:	4806      	ldr	r0, [pc, #24]	; (d2dc <sc_commit+0x38>)
    d2c4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d2c8:	2300      	movs	r3, #0
    d2ca:	f104 0120 	add.w	r1, r4, #32
    d2ce:	f012 fddb 	bl	1fe88 <k_delayed_work_submit_to_queue>
}
    d2d2:	2000      	movs	r0, #0
    d2d4:	bd10      	pop	{r4, pc}
    d2d6:	bf00      	nop
    d2d8:	2000a7d8 	.word	0x2000a7d8
    d2dc:	2000ac68 	.word	0x2000ac68

0000d2e0 <sc_indicate_rsp>:
{
    d2e0:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d2e2:	4d12      	ldr	r5, [pc, #72]	; (d32c <sc_indicate_rsp+0x4c>)
    d2e4:	4604      	mov	r4, r0
    d2e6:	f06f 0102 	mvn.w	r1, #2
    d2ea:	f105 0050 	add.w	r0, r5, #80	; 0x50
    d2ee:	f017 fe77 	bl	24fe0 <atomic_and.isra.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d2f2:	f3bf 8f5b 	dmb	ish
    d2f6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    d2f8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    d2fc:	07da      	lsls	r2, r3, #31
    d2fe:	d506      	bpl.n	d30e <sc_indicate_rsp+0x2e>
    d300:	480b      	ldr	r0, [pc, #44]	; (d330 <sc_indicate_rsp+0x50>)
    d302:	2200      	movs	r2, #0
    d304:	2300      	movs	r3, #0
    d306:	f105 0120 	add.w	r1, r5, #32
    d30a:	f012 fdbd 	bl	1fe88 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    d30e:	4620      	mov	r0, r4
    d310:	f7ff fb04 	bl	c91c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    d314:	b140      	cbz	r0, d328 <sc_indicate_rsp+0x48>
    d316:	7a03      	ldrb	r3, [r0, #8]
    d318:	07db      	lsls	r3, r3, #31
    d31a:	d505      	bpl.n	d328 <sc_indicate_rsp+0x48>
}
    d31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d320:	2101      	movs	r1, #1
    d322:	300c      	adds	r0, #12
    d324:	f017 be30 	b.w	24f88 <atomic_or>
    d328:	bd38      	pop	{r3, r4, r5, pc}
    d32a:	bf00      	nop
    d32c:	2000a7d8 	.word	0x2000a7d8
    d330:	2000ac68 	.word	0x2000ac68

0000d334 <bt_gatt_init>:
{
    d334:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d336:	4b26      	ldr	r3, [pc, #152]	; (d3d0 <bt_gatt_init+0x9c>)
    d338:	f3bf 8f5b 	dmb	ish
    d33c:	2201      	movs	r2, #1
    d33e:	e853 1f00 	ldrex	r1, [r3]
    d342:	2900      	cmp	r1, #0
    d344:	d103      	bne.n	d34e <bt_gatt_init+0x1a>
    d346:	e843 2000 	strex	r0, r2, [r3]
    d34a:	2800      	cmp	r0, #0
    d34c:	d1f7      	bne.n	d33e <bt_gatt_init+0xa>
    d34e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    d352:	d13b      	bne.n	d3cc <bt_gatt_init+0x98>
    d354:	f3bf 8f5b 	dmb	ish
    d358:	4b1e      	ldr	r3, [pc, #120]	; (d3d4 <bt_gatt_init+0xa0>)
    d35a:	e853 1f00 	ldrex	r1, [r3]
    d35e:	2900      	cmp	r1, #0
    d360:	d103      	bne.n	d36a <bt_gatt_init+0x36>
    d362:	e843 2000 	strex	r0, r2, [r3]
    d366:	2800      	cmp	r0, #0
    d368:	d1f7      	bne.n	d35a <bt_gatt_init+0x26>
    d36a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    d36e:	d108      	bne.n	d382 <bt_gatt_init+0x4e>
    d370:	4919      	ldr	r1, [pc, #100]	; (d3d8 <bt_gatt_init+0xa4>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d372:	4a1a      	ldr	r2, [pc, #104]	; (d3dc <bt_gatt_init+0xa8>)
    d374:	880b      	ldrh	r3, [r1, #0]
    d376:	4c1a      	ldr	r4, [pc, #104]	; (d3e0 <bt_gatt_init+0xac>)
	if (!atomic_cas(&service_init, 0, 1)) {
    d378:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d37a:	42a2      	cmp	r2, r4
    d37c:	d320      	bcc.n	d3c0 <bt_gatt_init+0x8c>
    d37e:	b100      	cbz	r0, d382 <bt_gatt_init+0x4e>
    d380:	800b      	strh	r3, [r1, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d382:	4c18      	ldr	r4, [pc, #96]	; (d3e4 <bt_gatt_init+0xb0>)
    d384:	2230      	movs	r2, #48	; 0x30
    d386:	2100      	movs	r1, #0
    d388:	4620      	mov	r0, r4
    d38a:	f016 fc21 	bl	23bd0 <memset>
    d38e:	4b16      	ldr	r3, [pc, #88]	; (d3e8 <bt_gatt_init+0xb4>)
    d390:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d392:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d394:	4c15      	ldr	r4, [pc, #84]	; (d3ec <bt_gatt_init+0xb8>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d396:	4816      	ldr	r0, [pc, #88]	; (d3f0 <bt_gatt_init+0xbc>)
    d398:	2300      	movs	r3, #0
    d39a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d39e:	f012 fd73 	bl	1fe88 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d3a2:	2100      	movs	r1, #0
    d3a4:	f104 0020 	add.w	r0, r4, #32
    d3a8:	2230      	movs	r2, #48	; 0x30
    d3aa:	f016 fc11 	bl	23bd0 <memset>
    d3ae:	4b11      	ldr	r3, [pc, #68]	; (d3f4 <bt_gatt_init+0xc0>)
    d3b0:	6263      	str	r3, [r4, #36]	; 0x24
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d3b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
    d3b6:	2102      	movs	r1, #2
}
    d3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d3bc:	f017 bde4 	b.w	24f88 <atomic_or>
		last_static_handle += svc->attr_count;
    d3c0:	6850      	ldr	r0, [r2, #4]
    d3c2:	4403      	add	r3, r0
    d3c4:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d3c6:	3208      	adds	r2, #8
    d3c8:	2001      	movs	r0, #1
    d3ca:	e7d6      	b.n	d37a <bt_gatt_init+0x46>
}
    d3cc:	bd10      	pop	{r4, pc}
    d3ce:	bf00      	nop
    d3d0:	2000d75c 	.word	0x2000d75c
    d3d4:	2000d778 	.word	0x2000d778
    d3d8:	2000ecfe 	.word	0x2000ecfe
    d3dc:	00026f30 	.word	0x00026f30
    d3e0:	00026f50 	.word	0x00026f50
    d3e4:	2000a7a8 	.word	0x2000a7a8
    d3e8:	000252f7 	.word	0x000252f7
    d3ec:	2000a7d8 	.word	0x2000a7d8
    d3f0:	2000ac68 	.word	0x2000ac68
    d3f4:	0000d939 	.word	0x0000d939

0000d3f8 <bt_gatt_attr_get_handle>:
{
    d3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    d3fc:	4603      	mov	r3, r0
    d3fe:	b148      	cbz	r0, d414 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    d400:	8a00      	ldrh	r0, [r0, #16]
    d402:	b938      	cbnz	r0, d414 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d404:	4912      	ldr	r1, [pc, #72]	; (d450 <bt_gatt_attr_get_handle+0x58>)
    d406:	f8df e04c 	ldr.w	lr, [pc, #76]	; d454 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    d40a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d40c:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d410:	4571      	cmp	r1, lr
    d412:	d301      	bcc.n	d418 <bt_gatt_attr_get_handle+0x20>
}
    d414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d418:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    d41c:	42bb      	cmp	r3, r7
    d41e:	d304      	bcc.n	d42a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d420:	fb0c 7206 	mla	r2, ip, r6, r7
    d424:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    d426:	4293      	cmp	r3, r2
    d428:	d90e      	bls.n	d448 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    d42a:	19a2      	adds	r2, r4, r6
    d42c:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d42e:	3108      	adds	r1, #8
    d430:	4614      	mov	r4, r2
    d432:	e7ed      	b.n	d410 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    d434:	fb0c 7805 	mla	r8, ip, r5, r7
    d438:	4543      	cmp	r3, r8
    d43a:	d007      	beq.n	d44c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d43c:	3501      	adds	r5, #1
    d43e:	1962      	adds	r2, r4, r5
    d440:	42b5      	cmp	r5, r6
    d442:	b292      	uxth	r2, r2
    d444:	d1f6      	bne.n	d434 <bt_gatt_attr_get_handle+0x3c>
    d446:	e7f2      	b.n	d42e <bt_gatt_attr_get_handle+0x36>
    d448:	2500      	movs	r5, #0
    d44a:	e7f8      	b.n	d43e <bt_gatt_attr_get_handle+0x46>
    d44c:	4610      	mov	r0, r2
    d44e:	e7e1      	b.n	d414 <bt_gatt_attr_get_handle+0x1c>
    d450:	00026f30 	.word	0x00026f30
    d454:	00026f50 	.word	0x00026f50

0000d458 <bt_gatt_foreach_attr_type>:
{
    d458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d45c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    d460:	9100      	str	r1, [sp, #0]
    d462:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    d464:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d468:	2d00      	cmp	r5, #0
    d46a:	bf08      	it	eq
    d46c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    d46e:	4b24      	ldr	r3, [pc, #144]	; (d500 <bt_gatt_foreach_attr_type+0xa8>)
    d470:	881b      	ldrh	r3, [r3, #0]
    d472:	4283      	cmp	r3, r0
{
    d474:	4607      	mov	r7, r0
    d476:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    d478:	d23c      	bcs.n	d4f4 <bt_gatt_foreach_attr_type+0x9c>
}
    d47a:	b003      	add	sp, #12
    d47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    d480:	6873      	ldr	r3, [r6, #4]
    d482:	4423      	add	r3, r4
    d484:	42bb      	cmp	r3, r7
    d486:	d232      	bcs.n	d4ee <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    d488:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d48a:	3608      	adds	r6, #8
    d48c:	4b1d      	ldr	r3, [pc, #116]	; (d504 <bt_gatt_foreach_attr_type+0xac>)
    d48e:	429e      	cmp	r6, r3
    d490:	d3f6      	bcc.n	d480 <bt_gatt_foreach_attr_type+0x28>
    d492:	e7f2      	b.n	d47a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d494:	5889      	ldr	r1, [r1, r2]
    d496:	9301      	str	r3, [sp, #4]
    d498:	4640      	mov	r0, r8
    d49a:	f016 fc8e 	bl	23dba <bt_uuid_cmp>
    d49e:	9b01      	ldr	r3, [sp, #4]
    d4a0:	b190      	cbz	r0, d4c8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    d4a2:	3401      	adds	r4, #1
    d4a4:	f10a 0a01 	add.w	sl, sl, #1
    d4a8:	b2a4      	uxth	r4, r4
    d4aa:	6873      	ldr	r3, [r6, #4]
    d4ac:	4553      	cmp	r3, sl
    d4ae:	d9ec      	bls.n	d48a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    d4b0:	9b00      	ldr	r3, [sp, #0]
    d4b2:	429c      	cmp	r4, r3
    d4b4:	d8e1      	bhi.n	d47a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    d4b6:	42bc      	cmp	r4, r7
    d4b8:	d3f3      	bcc.n	d4a2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d4ba:	6831      	ldr	r1, [r6, #0]
    d4bc:	fb0b f20a 	mul.w	r2, fp, sl
    d4c0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d4c2:	f1b8 0f00 	cmp.w	r8, #0
    d4c6:	d1e5      	bne.n	d494 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    d4c8:	f1b9 0f00 	cmp.w	r9, #0
    d4cc:	d10b      	bne.n	d4e6 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    d4ce:	3d01      	subs	r5, #1
    d4d0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    d4d2:	4618      	mov	r0, r3
    d4d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d4d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d4d8:	4621      	mov	r1, r4
    d4da:	4798      	blx	r3
	if (!*num_matches) {
    d4dc:	2d00      	cmp	r5, #0
    d4de:	d0cc      	beq.n	d47a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d4e0:	2800      	cmp	r0, #0
    d4e2:	d1de      	bne.n	d4a2 <bt_gatt_foreach_attr_type+0x4a>
    d4e4:	e7c9      	b.n	d47a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    d4e6:	68da      	ldr	r2, [r3, #12]
    d4e8:	4591      	cmp	r9, r2
    d4ea:	d1da      	bne.n	d4a2 <bt_gatt_foreach_attr_type+0x4a>
    d4ec:	e7ef      	b.n	d4ce <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    d4ee:	f04f 0a00 	mov.w	sl, #0
    d4f2:	e7da      	b.n	d4aa <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d4f4:	4e04      	ldr	r6, [pc, #16]	; (d508 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    d4f6:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d4f8:	f04f 0b14 	mov.w	fp, #20
    d4fc:	e7c6      	b.n	d48c <bt_gatt_foreach_attr_type+0x34>
    d4fe:	bf00      	nop
    d500:	2000ecfe 	.word	0x2000ecfe
    d504:	00026f50 	.word	0x00026f50
    d508:	00026f30 	.word	0x00026f30

0000d50c <db_hash_gen>:
{
    d50c:	b530      	push	{r4, r5, lr}
    d50e:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    d510:	2300      	movs	r3, #0
{
    d512:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    d514:	aa1c      	add	r2, sp, #112	; 0x70
    d516:	4669      	mov	r1, sp
    d518:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    d51a:	e9cd 3300 	strd	r3, r3, [sp]
    d51e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    d522:	f016 f982 	bl	2382a <tc_cmac_setup>
    d526:	b958      	cbnz	r0, d540 <db_hash_gen+0x34>
    d528:	4918      	ldr	r1, [pc, #96]	; (d58c <db_hash_gen+0x80>)
    d52a:	4b19      	ldr	r3, [pc, #100]	; (d590 <db_hash_gen+0x84>)
		BT_ERR("Unable to setup AES CMAC");
    d52c:	4819      	ldr	r0, [pc, #100]	; (d594 <db_hash_gen+0x88>)
    d52e:	1ac9      	subs	r1, r1, r3
    d530:	08c9      	lsrs	r1, r1, #3
    d532:	0189      	lsls	r1, r1, #6
    d534:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    d538:	f014 fb13 	bl	21b62 <log_0>
}
    d53c:	b049      	add	sp, #292	; 0x124
    d53e:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    d540:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d544:	2001      	movs	r0, #1
    d546:	4a14      	ldr	r2, [pc, #80]	; (d598 <db_hash_gen+0x8c>)
    d548:	ab04      	add	r3, sp, #16
    d54a:	f017 fec9 	bl	252e0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    d54e:	4813      	ldr	r0, [pc, #76]	; (d59c <db_hash_gen+0x90>)
    d550:	a904      	add	r1, sp, #16
    d552:	f016 fa00 	bl	23956 <tc_cmac_final>
    d556:	b940      	cbnz	r0, d56a <db_hash_gen+0x5e>
    d558:	490c      	ldr	r1, [pc, #48]	; (d58c <db_hash_gen+0x80>)
    d55a:	4b0d      	ldr	r3, [pc, #52]	; (d590 <db_hash_gen+0x84>)
		BT_ERR("Unable to calculate hash");
    d55c:	4810      	ldr	r0, [pc, #64]	; (d5a0 <db_hash_gen+0x94>)
    d55e:	1ac9      	subs	r1, r1, r3
    d560:	08c9      	lsrs	r1, r1, #3
    d562:	0189      	lsls	r1, r1, #6
    d564:	f041 0101 	orr.w	r1, r1, #1
    d568:	e7e6      	b.n	d538 <db_hash_gen+0x2c>
    d56a:	4b0c      	ldr	r3, [pc, #48]	; (d59c <db_hash_gen+0x90>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    d56c:	2208      	movs	r2, #8
    d56e:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    d572:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    d574:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    d578:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    d57c:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    d57e:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    d580:	d1f7      	bne.n	d572 <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    d582:	2c00      	cmp	r4, #0
    d584:	d0da      	beq.n	d53c <db_hash_gen+0x30>
		db_hash_store();
    d586:	f7ff f989 	bl	c89c <db_hash_store>
    d58a:	e7d7      	b.n	d53c <db_hash_gen+0x30>
    d58c:	00027078 	.word	0x00027078
    d590:	00026fc8 	.word	0x00026fc8
    d594:	0002c69c 	.word	0x0002c69c
    d598:	00024edd 	.word	0x00024edd
    d59c:	2000f291 	.word	0x2000f291
    d5a0:	0002c6b5 	.word	0x0002c6b5

0000d5a4 <db_hash_commit>:
{
    d5a4:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    d5a6:	4820      	ldr	r0, [pc, #128]	; (d628 <db_hash_commit+0x84>)
    d5a8:	f019 f996 	bl	268d8 <k_delayed_work_cancel>
	if (!err) {
    d5ac:	b908      	cbnz	r0, d5b2 <db_hash_commit+0xe>
		db_hash_gen(false);
    d5ae:	f7ff ffad 	bl	d50c <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    d5b2:	491e      	ldr	r1, [pc, #120]	; (d62c <db_hash_commit+0x88>)
    d5b4:	481e      	ldr	r0, [pc, #120]	; (d630 <db_hash_commit+0x8c>)
    d5b6:	2210      	movs	r2, #16
    d5b8:	f016 face 	bl	23b58 <memcmp>
    d5bc:	b948      	cbnz	r0, d5d2 <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    d5be:	481d      	ldr	r0, [pc, #116]	; (d634 <db_hash_commit+0x90>)
    d5c0:	f019 f98a 	bl	268d8 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d5c4:	481c      	ldr	r0, [pc, #112]	; (d638 <db_hash_commit+0x94>)
    d5c6:	f06f 0101 	mvn.w	r1, #1
    d5ca:	f017 fd09 	bl	24fe0 <atomic_and.isra.0>
}
    d5ce:	2000      	movs	r0, #0
    d5d0:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    d5d2:	4c1a      	ldr	r4, [pc, #104]	; (d63c <db_hash_commit+0x98>)
    d5d4:	2101      	movs	r1, #1
    d5d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
    d5da:	f017 fcd5 	bl	24f88 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    d5de:	07c2      	lsls	r2, r0, #31
    d5e0:	d412      	bmi.n	d608 <db_hash_commit+0x64>
		gatt_sc.start = start;
    d5e2:	4b17      	ldr	r3, [pc, #92]	; (d640 <db_hash_commit+0x9c>)
    d5e4:	61a3      	str	r3, [r4, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d5e6:	f3bf 8f5b 	dmb	ish
    d5ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d5ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    d5f0:	079b      	lsls	r3, r3, #30
    d5f2:	d406      	bmi.n	d602 <db_hash_commit+0x5e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d5f4:	490f      	ldr	r1, [pc, #60]	; (d634 <db_hash_commit+0x90>)
    d5f6:	4813      	ldr	r0, [pc, #76]	; (d644 <db_hash_commit+0xa0>)
    d5f8:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d5fc:	2300      	movs	r3, #0
    d5fe:	f012 fc43 	bl	1fe88 <k_delayed_work_submit_to_queue>
	db_hash_store();
    d602:	f7ff f94b 	bl	c89c <db_hash_store>
	return 0;
    d606:	e7e2      	b.n	d5ce <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    d608:	8b23      	ldrh	r3, [r4, #24]
    d60a:	8b62      	ldrh	r2, [r4, #26]
    d60c:	2b01      	cmp	r3, #1
    d60e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d612:	d805      	bhi.n	d620 <db_hash_commit+0x7c>
    d614:	429a      	cmp	r2, r3
    d616:	d0f4      	beq.n	d602 <db_hash_commit+0x5e>
		*end = new_end;
    d618:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d61c:	8363      	strh	r3, [r4, #26]
    d61e:	e7e2      	b.n	d5e6 <db_hash_commit+0x42>
	if (*end < new_end) {
    d620:	429a      	cmp	r2, r3
		*start = new_start;
    d622:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
    d624:	d0df      	beq.n	d5e6 <db_hash_commit+0x42>
    d626:	e7f7      	b.n	d618 <db_hash_commit+0x74>
    d628:	2000a7a8 	.word	0x2000a7a8
    d62c:	2000f291 	.word	0x2000f291
    d630:	2000f2a1 	.word	0x2000f2a1
    d634:	2000a7f8 	.word	0x2000a7f8
    d638:	2000a828 	.word	0x2000a828
    d63c:	2000a7d8 	.word	0x2000a7d8
    d640:	ffff0001 	.word	0xffff0001
    d644:	2000ac68 	.word	0x2000ac68

0000d648 <ccc_set_direct>:
{
    d648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d64c:	b0b9      	sub	sp, #228	; 0xe4
    d64e:	4688      	mov	r8, r1
    d650:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    d652:	4939      	ldr	r1, [pc, #228]	; (d738 <ccc_set_direct+0xf0>)
    d654:	9840      	ldr	r0, [sp, #256]	; 0x100
    d656:	466a      	mov	r2, sp
{
    d658:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    d65a:	f014 ff14 	bl	22486 <settings_name_steq>
    d65e:	b978      	cbnz	r0, d680 <ccc_set_direct+0x38>
    d660:	4b36      	ldr	r3, [pc, #216]	; (d73c <ccc_set_direct+0xf4>)
    d662:	4937      	ldr	r1, [pc, #220]	; (d740 <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
    d664:	4837      	ldr	r0, [pc, #220]	; (d744 <ccc_set_direct+0xfc>)
    d666:	1ac9      	subs	r1, r1, r3
    d668:	08c9      	lsrs	r1, r1, #3
    d66a:	0189      	lsls	r1, r1, #6
    d66c:	f041 0101 	orr.w	r1, r1, #1
    d670:	f014 fa77 	bl	21b62 <log_0>
			return -EINVAL;
    d674:	f06f 0515 	mvn.w	r5, #21
}
    d678:	4628      	mov	r0, r5
    d67a:	b039      	add	sp, #228	; 0xe4
    d67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    d680:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    d682:	a901      	add	r1, sp, #4
    d684:	4630      	mov	r0, r6
    d686:	f014 ff21 	bl	224cc <settings_name_next>
		if (!name) {
    d68a:	b96e      	cbnz	r6, d6a8 <ccc_set_direct+0x60>
    d68c:	492c      	ldr	r1, [pc, #176]	; (d740 <ccc_set_direct+0xf8>)
    d68e:	4b2b      	ldr	r3, [pc, #172]	; (d73c <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
    d690:	482d      	ldr	r0, [pc, #180]	; (d748 <ccc_set_direct+0x100>)
    d692:	1ac9      	subs	r1, r1, r3
    d694:	08c9      	lsrs	r1, r1, #3
    d696:	0189      	lsls	r1, r1, #6
    d698:	f041 0101 	orr.w	r1, r1, #1
    d69c:	f014 fa61 	bl	21b62 <log_0>
			return -EINVAL;
    d6a0:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    d6a4:	4625      	mov	r5, r4
    d6a6:	e7e7      	b.n	d678 <ccc_set_direct+0x30>
		} else if (!next) {
    d6a8:	9801      	ldr	r0, [sp, #4]
    d6aa:	b9c8      	cbnz	r0, d6e0 <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
    d6ac:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    d6b0:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    d6b4:	4649      	mov	r1, r9
    d6b6:	4630      	mov	r0, r6
    d6b8:	f016 fb5b 	bl	23d72 <bt_settings_decode_key>
		if (err) {
    d6bc:	4605      	mov	r5, r0
    d6be:	b1a0      	cbz	r0, d6ea <ccc_set_direct+0xa2>
    d6c0:	4a1e      	ldr	r2, [pc, #120]	; (d73c <ccc_set_direct+0xf4>)
    d6c2:	4c1f      	ldr	r4, [pc, #124]	; (d740 <ccc_set_direct+0xf8>)
			BT_ERR("Unable to decode address %s", log_strdup(name));
    d6c4:	4630      	mov	r0, r6
    d6c6:	1aa4      	subs	r4, r4, r2
    d6c8:	08e4      	lsrs	r4, r4, #3
    d6ca:	f7f7 fb83 	bl	4dd4 <log_strdup>
    d6ce:	01a4      	lsls	r4, r4, #6
    d6d0:	f044 0401 	orr.w	r4, r4, #1
    d6d4:	4601      	mov	r1, r0
    d6d6:	4622      	mov	r2, r4
    d6d8:	481c      	ldr	r0, [pc, #112]	; (d74c <ccc_set_direct+0x104>)
    d6da:	f014 fa4f 	bl	21b7c <log_1>
    d6de:	e7df      	b.n	d6a0 <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
    d6e0:	220a      	movs	r2, #10
    d6e2:	2100      	movs	r1, #0
    d6e4:	f016 f97b 	bl	239de <strtol>
    d6e8:	e7e0      	b.n	d6ac <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
    d6ea:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    d6ee:	f1b8 0f00 	cmp.w	r8, #0
    d6f2:	d01d      	beq.n	d730 <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    d6f4:	ae08      	add	r6, sp, #32
    d6f6:	22c0      	movs	r2, #192	; 0xc0
    d6f8:	4631      	mov	r1, r6
    d6fa:	4638      	mov	r0, r7
    d6fc:	47a0      	blx	r4
			if (len < 0) {
    d6fe:	1e04      	subs	r4, r0, #0
    d700:	da0b      	bge.n	d71a <ccc_set_direct+0xd2>
    d702:	4b0e      	ldr	r3, [pc, #56]	; (d73c <ccc_set_direct+0xf4>)
    d704:	4a0e      	ldr	r2, [pc, #56]	; (d740 <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
    d706:	4812      	ldr	r0, [pc, #72]	; (d750 <ccc_set_direct+0x108>)
    d708:	1ad2      	subs	r2, r2, r3
    d70a:	08d2      	lsrs	r2, r2, #3
    d70c:	0192      	lsls	r2, r2, #6
    d70e:	f042 0201 	orr.w	r2, r2, #1
    d712:	4621      	mov	r1, r4
    d714:	f014 fa32 	bl	21b7c <log_1>
				return len;
    d718:	e7c4      	b.n	d6a4 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    d71a:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    d71c:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    d71e:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    d720:	4a0c      	ldr	r2, [pc, #48]	; (d754 <ccc_set_direct+0x10c>)
    d722:	ab04      	add	r3, sp, #16
    d724:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d728:	2001      	movs	r0, #1
    d72a:	f017 fdd9 	bl	252e0 <bt_gatt_foreach_attr>
	return 0;
    d72e:	e7a3      	b.n	d678 <ccc_set_direct+0x30>
			load.count = 0;
    d730:	e9cd 0006 	strd	r0, r0, [sp, #24]
    d734:	e7f4      	b.n	d720 <ccc_set_direct+0xd8>
    d736:	bf00      	nop
    d738:	0002c6ce 	.word	0x0002c6ce
    d73c:	00026fc8 	.word	0x00026fc8
    d740:	00027078 	.word	0x00027078
    d744:	0002c6d5 	.word	0x0002c6d5
    d748:	0002b3d2 	.word	0x0002b3d2
    d74c:	0002c5d0 	.word	0x0002c5d0
    d750:	0002c517 	.word	0x0002c517
    d754:	0000cd4d 	.word	0x0000cd4d

0000d758 <bt_gatt_notify_cb>:
{
    d758:	b530      	push	{r4, r5, lr}
    d75a:	4b37      	ldr	r3, [pc, #220]	; (d838 <bt_gatt_notify_cb+0xe0>)
    d75c:	f3bf 8f5b 	dmb	ish
    d760:	681b      	ldr	r3, [r3, #0]
    d762:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d766:	079a      	lsls	r2, r3, #30
{
    d768:	b08b      	sub	sp, #44	; 0x2c
    d76a:	4604      	mov	r4, r0
    d76c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d76e:	d55d      	bpl.n	d82c <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    d770:	6848      	ldr	r0, [r1, #4]
    d772:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    d774:	b114      	cbz	r4, d77c <bt_gatt_notify_cb+0x24>
    d776:	7b63      	ldrb	r3, [r4, #13]
    d778:	2b07      	cmp	r3, #7
    d77a:	d15a      	bne.n	d832 <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    d77c:	f7ff fe3c 	bl	d3f8 <bt_gatt_attr_get_handle>
    d780:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    d784:	b918      	cbnz	r0, d78e <bt_gatt_notify_cb+0x36>
		return -ENOENT;
    d786:	f06f 0001 	mvn.w	r0, #1
}
    d78a:	b00b      	add	sp, #44	; 0x2c
    d78c:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    d78e:	682a      	ldr	r2, [r5, #0]
    d790:	b9aa      	cbnz	r2, d7be <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    d792:	9b05      	ldr	r3, [sp, #20]
    d794:	6818      	ldr	r0, [r3, #0]
    d796:	2300      	movs	r3, #0
    d798:	f88d 3010 	strb.w	r3, [sp, #16]
    d79c:	a904      	add	r1, sp, #16
    d79e:	f642 0303 	movw	r3, #10243	; 0x2803
    d7a2:	f8ad 3012 	strh.w	r3, [sp, #18]
    d7a6:	f016 fb08 	bl	23dba <bt_uuid_cmp>
    d7aa:	b1c0      	cbz	r0, d7de <bt_gatt_notify_cb+0x86>
		return gatt_notify(conn, data.handle, params);
    d7ac:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    d7b0:	b314      	cbz	r4, d7f8 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    d7b2:	4601      	mov	r1, r0
    d7b4:	462a      	mov	r2, r5
    d7b6:	4620      	mov	r0, r4
    d7b8:	f7ff f9be 	bl	cb38 <gatt_notify>
    d7bc:	e7e5      	b.n	d78a <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d7be:	a905      	add	r1, sp, #20
    d7c0:	9102      	str	r1, [sp, #8]
    d7c2:	491e      	ldr	r1, [pc, #120]	; (d83c <bt_gatt_notify_cb+0xe4>)
    d7c4:	9101      	str	r1, [sp, #4]
    d7c6:	2101      	movs	r1, #1
	found->attr = NULL;
    d7c8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d7ca:	9100      	str	r1, [sp, #0]
    d7cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    d7d0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d7d2:	f7ff fe41 	bl	d458 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    d7d6:	9b05      	ldr	r3, [sp, #20]
    d7d8:	2b00      	cmp	r3, #0
    d7da:	d1da      	bne.n	d792 <bt_gatt_notify_cb+0x3a>
    d7dc:	e7d3      	b.n	d786 <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    d7de:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    d7e0:	68c3      	ldr	r3, [r0, #12]
    d7e2:	799b      	ldrb	r3, [r3, #6]
    d7e4:	06db      	lsls	r3, r3, #27
    d7e6:	d402      	bmi.n	d7ee <bt_gatt_notify_cb+0x96>
			return -EINVAL;
    d7e8:	f06f 0015 	mvn.w	r0, #21
    d7ec:	e7cd      	b.n	d78a <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    d7ee:	f017 fd29 	bl	25244 <bt_gatt_attr_value_handle>
    d7f2:	f8ad 0018 	strh.w	r0, [sp, #24]
    d7f6:	e7d9      	b.n	d7ac <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d7f8:	f642 1202 	movw	r2, #10498	; 0x2902
    d7fc:	f8ad 2012 	strh.w	r2, [sp, #18]
    d800:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    d802:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d806:	9202      	str	r2, [sp, #8]
    d808:	4a0d      	ldr	r2, [pc, #52]	; (d840 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    d80a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    d80c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d80e:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    d812:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d816:	aa04      	add	r2, sp, #16
    d818:	4623      	mov	r3, r4
    d81a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    d81e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d820:	f88d 4010 	strb.w	r4, [sp, #16]
    d824:	f7ff fe18 	bl	d458 <bt_gatt_foreach_attr_type>
	return data.err;
    d828:	9807      	ldr	r0, [sp, #28]
    d82a:	e7ae      	b.n	d78a <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
    d82c:	f06f 000a 	mvn.w	r0, #10
    d830:	e7ab      	b.n	d78a <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
    d832:	f06f 0038 	mvn.w	r0, #56	; 0x38
    d836:	e7a8      	b.n	d78a <bt_gatt_notify_cb+0x32>
    d838:	20000094 	.word	0x20000094
    d83c:	00024e6f 	.word	0x00024e6f
    d840:	0000cf69 	.word	0x0000cf69

0000d844 <bt_gatt_indicate>:
{
    d844:	b530      	push	{r4, r5, lr}
    d846:	4b39      	ldr	r3, [pc, #228]	; (d92c <bt_gatt_indicate+0xe8>)
    d848:	f3bf 8f5b 	dmb	ish
    d84c:	681b      	ldr	r3, [r3, #0]
    d84e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d852:	079a      	lsls	r2, r3, #30
{
    d854:	b08b      	sub	sp, #44	; 0x2c
    d856:	4604      	mov	r4, r0
    d858:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    d85a:	d561      	bpl.n	d920 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    d85c:	6848      	ldr	r0, [r1, #4]
    d85e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    d860:	b114      	cbz	r4, d868 <bt_gatt_indicate+0x24>
    d862:	7b63      	ldrb	r3, [r4, #13]
    d864:	2b07      	cmp	r3, #7
    d866:	d15e      	bne.n	d926 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    d868:	f7ff fdc6 	bl	d3f8 <bt_gatt_attr_get_handle>
    d86c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    d870:	b918      	cbnz	r0, d87a <bt_gatt_indicate+0x36>
		return -ENOENT;
    d872:	f06f 0001 	mvn.w	r0, #1
}
    d876:	b00b      	add	sp, #44	; 0x2c
    d878:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    d87a:	682a      	ldr	r2, [r5, #0]
    d87c:	b9ba      	cbnz	r2, d8ae <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    d87e:	9b05      	ldr	r3, [sp, #20]
    d880:	6818      	ldr	r0, [r3, #0]
    d882:	2300      	movs	r3, #0
    d884:	f88d 3010 	strb.w	r3, [sp, #16]
    d888:	a904      	add	r1, sp, #16
    d88a:	f642 0303 	movw	r3, #10243	; 0x2803
    d88e:	f8ad 3012 	strh.w	r3, [sp, #18]
    d892:	f016 fa92 	bl	23dba <bt_uuid_cmp>
    d896:	b1d0      	cbz	r0, d8ce <bt_gatt_indicate+0x8a>
		return gatt_indicate(conn, data.handle, params);
    d898:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    d89c:	b324      	cbz	r4, d8e8 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    d89e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    d8a0:	4601      	mov	r1, r0
		params->_ref = 1;
    d8a2:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    d8a4:	462a      	mov	r2, r5
    d8a6:	4620      	mov	r0, r4
    d8a8:	f7ff f8f0 	bl	ca8c <gatt_indicate>
    d8ac:	e7e3      	b.n	d876 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d8ae:	a905      	add	r1, sp, #20
    d8b0:	9102      	str	r1, [sp, #8]
    d8b2:	491f      	ldr	r1, [pc, #124]	; (d930 <bt_gatt_indicate+0xec>)
    d8b4:	9101      	str	r1, [sp, #4]
    d8b6:	2101      	movs	r1, #1
	found->attr = NULL;
    d8b8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d8ba:	9100      	str	r1, [sp, #0]
    d8bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    d8c0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    d8c2:	f7ff fdc9 	bl	d458 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    d8c6:	9b05      	ldr	r3, [sp, #20]
    d8c8:	2b00      	cmp	r3, #0
    d8ca:	d1d8      	bne.n	d87e <bt_gatt_indicate+0x3a>
    d8cc:	e7d1      	b.n	d872 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    d8ce:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    d8d0:	68c3      	ldr	r3, [r0, #12]
    d8d2:	799b      	ldrb	r3, [r3, #6]
    d8d4:	069b      	lsls	r3, r3, #26
    d8d6:	d402      	bmi.n	d8de <bt_gatt_indicate+0x9a>
			return -EINVAL;
    d8d8:	f06f 0015 	mvn.w	r0, #21
    d8dc:	e7cb      	b.n	d876 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    d8de:	f017 fcb1 	bl	25244 <bt_gatt_attr_value_handle>
    d8e2:	f8ad 0018 	strh.w	r0, [sp, #24]
    d8e6:	e7d7      	b.n	d898 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    d8e8:	f06f 0338 	mvn.w	r3, #56	; 0x38
    d8ec:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    d8ee:	2302      	movs	r3, #2
    d8f0:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d8f4:	f642 1302 	movw	r3, #10498	; 0x2902
    d8f8:	f8ad 3012 	strh.w	r3, [sp, #18]
    d8fc:	ab05      	add	r3, sp, #20
    d8fe:	9302      	str	r3, [sp, #8]
    d900:	4b0c      	ldr	r3, [pc, #48]	; (d934 <bt_gatt_indicate+0xf0>)
    d902:	9301      	str	r3, [sp, #4]
    d904:	2301      	movs	r3, #1
    d906:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    d908:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d90a:	4623      	mov	r3, r4
    d90c:	aa04      	add	r2, sp, #16
    d90e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    d912:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    d914:	f88d 4010 	strb.w	r4, [sp, #16]
    d918:	f7ff fd9e 	bl	d458 <bt_gatt_foreach_attr_type>
	return data.err;
    d91c:	9807      	ldr	r0, [sp, #28]
    d91e:	e7aa      	b.n	d876 <bt_gatt_indicate+0x32>
		return -EAGAIN;
    d920:	f06f 000a 	mvn.w	r0, #10
    d924:	e7a7      	b.n	d876 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    d926:	f06f 0038 	mvn.w	r0, #56	; 0x38
    d92a:	e7a4      	b.n	d876 <bt_gatt_indicate+0x32>
    d92c:	20000094 	.word	0x20000094
    d930:	00024e6f 	.word	0x00024e6f
    d934:	0000cf69 	.word	0x0000cf69

0000d938 <sc_process>:
{
    d938:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    d93a:	f830 3c08 	ldrh.w	r3, [r0, #-8]
    d93e:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    d942:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    d946:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    d948:	f830 3c06 	ldrh.w	r3, [r0, #-6]
    d94c:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    d950:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d954:	f06f 0101 	mvn.w	r1, #1
    d958:	4628      	mov	r0, r5
    d95a:	f017 fb41 	bl	24fe0 <atomic_and.isra.0>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    d95e:	4b0d      	ldr	r3, [pc, #52]	; (d994 <sc_process+0x5c>)
    d960:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    d964:	4b0c      	ldr	r3, [pc, #48]	; (d998 <sc_process+0x60>)
    d966:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    d96a:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    d96c:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    d96e:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    d972:	2304      	movs	r3, #4
	sc->start = 0U;
    d974:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    d978:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    d97c:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    d980:	4631      	mov	r1, r6
    d982:	f7ff ff5f 	bl	d844 <bt_gatt_indicate>
    d986:	b918      	cbnz	r0, d990 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d988:	2102      	movs	r1, #2
    d98a:	4628      	mov	r0, r5
    d98c:	f017 fafc 	bl	24f88 <atomic_or>
}
    d990:	b002      	add	sp, #8
    d992:	bd70      	pop	{r4, r5, r6, pc}
    d994:	000278d8 	.word	0x000278d8
    d998:	0000d2e1 	.word	0x0000d2e1

0000d99c <update_ccc>:
{
    d99c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d9a0:	4b3e      	ldr	r3, [pc, #248]	; (da9c <update_ccc+0x100>)
	struct bt_conn *conn = data->conn;
    d9a2:	6815      	ldr	r5, [r2, #0]
{
    d9a4:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d9a6:	6882      	ldr	r2, [r0, #8]
    d9a8:	429a      	cmp	r2, r3
{
    d9aa:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d9ac:	d11c      	bne.n	d9e8 <update_ccc+0x4c>
	ccc = attr->user_data;
    d9ae:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
    d9b0:	893b      	ldrh	r3, [r7, #8]
    d9b2:	b1cb      	cbz	r3, d9e8 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d9b4:	463a      	mov	r2, r7
    d9b6:	4628      	mov	r0, r5
    d9b8:	f812 1b01 	ldrb.w	r1, [r2], #1
    d9bc:	f016 fcda 	bl	24374 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    d9c0:	b190      	cbz	r0, d9e8 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    d9c2:	222a      	movs	r2, #42	; 0x2a
    d9c4:	4621      	mov	r1, r4
    d9c6:	4628      	mov	r0, r5
    d9c8:	f017 fcb3 	bl	25332 <bt_gatt_check_perm>
		if (err) {
    d9cc:	b308      	cbz	r0, da12 <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    d9ce:	2803      	cmp	r0, #3
    d9d0:	d10e      	bne.n	d9f0 <update_ccc+0x54>
    d9d2:	4a33      	ldr	r2, [pc, #204]	; (daa0 <update_ccc+0x104>)
    d9d4:	4b33      	ldr	r3, [pc, #204]	; (daa4 <update_ccc+0x108>)
				BT_WARN("CCC %p not writable", attr);
    d9d6:	4834      	ldr	r0, [pc, #208]	; (daa8 <update_ccc+0x10c>)
    d9d8:	1ad2      	subs	r2, r2, r3
    d9da:	08d2      	lsrs	r2, r2, #3
    d9dc:	0192      	lsls	r2, r2, #6
    d9de:	f042 0202 	orr.w	r2, r2, #2
    d9e2:	4621      	mov	r1, r4
    d9e4:	f014 f8ca 	bl	21b7c <log_1>
}
    d9e8:	2001      	movs	r0, #1
    d9ea:	b002      	add	sp, #8
    d9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
    d9f0:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    d9f2:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    d9f4:	bf14      	ite	ne
    d9f6:	f04f 0802 	movne.w	r8, #2
    d9fa:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
    d9fe:	f016 fcae 	bl	2435e <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    da02:	4580      	cmp	r8, r0
    da04:	d905      	bls.n	da12 <update_ccc+0x76>
				if (data->sec < sec) {
    da06:	7933      	ldrb	r3, [r6, #4]
    da08:	4543      	cmp	r3, r8
    da0a:	d2ed      	bcs.n	d9e8 <update_ccc+0x4c>
					data->sec = sec;
    da0c:	f886 8004 	strb.w	r8, [r6, #4]
    da10:	e7ea      	b.n	d9e8 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
    da12:	4639      	mov	r1, r7
    da14:	4620      	mov	r0, r4
    da16:	f017 fa0d 	bl	24e34 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    da1a:	4b24      	ldr	r3, [pc, #144]	; (daac <update_ccc+0x110>)
    da1c:	429f      	cmp	r7, r3
    da1e:	d1e3      	bne.n	d9e8 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    da20:	7a28      	ldrb	r0, [r5, #8]
    da22:	f105 0188 	add.w	r1, r5, #136	; 0x88
    da26:	f7ff fa37 	bl	ce98 <find_sc_cfg>
	if (!cfg) {
    da2a:	4604      	mov	r4, r0
    da2c:	2800      	cmp	r0, #0
    da2e:	d0db      	beq.n	d9e8 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
    da30:	8902      	ldrh	r2, [r0, #8]
    da32:	8943      	ldrh	r3, [r0, #10]
    da34:	ea52 0103 	orrs.w	r1, r2, r3
    da38:	d0d6      	beq.n	d9e8 <update_ccc+0x4c>
	index = bt_conn_index(conn);
    da3a:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    da3c:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    da40:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    da44:	f7fd fcda 	bl	b3fc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    da48:	4919      	ldr	r1, [pc, #100]	; (dab0 <update_ccc+0x114>)
    da4a:	4a1a      	ldr	r2, [pc, #104]	; (dab4 <update_ccc+0x118>)
    da4c:	2318      	movs	r3, #24
    da4e:	fb03 1300 	mla	r3, r3, r0, r1
    da52:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    da54:	4a18      	ldr	r2, [pc, #96]	; (dab8 <update_ccc+0x11c>)
    da56:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    da58:	aa01      	add	r2, sp, #4
    da5a:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    da5c:	2204      	movs	r2, #4
    da5e:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    da60:	b203      	sxth	r3, r0
    da62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    da66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    da6a:	4628      	mov	r0, r5
    da6c:	f7ff feea 	bl	d844 <bt_gatt_indicate>
    da70:	b148      	cbz	r0, da86 <update_ccc+0xea>
    da72:	490b      	ldr	r1, [pc, #44]	; (daa0 <update_ccc+0x104>)
    da74:	4b0b      	ldr	r3, [pc, #44]	; (daa4 <update_ccc+0x108>)
		BT_ERR("SC restore indication failed");
    da76:	4811      	ldr	r0, [pc, #68]	; (dabc <update_ccc+0x120>)
    da78:	1ac9      	subs	r1, r1, r3
    da7a:	08c9      	lsrs	r1, r1, #3
    da7c:	0189      	lsls	r1, r1, #6
    da7e:	f041 0101 	orr.w	r1, r1, #1
    da82:	f014 f86e 	bl	21b62 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    da86:	2204      	movs	r2, #4
    da88:	2100      	movs	r1, #0
    da8a:	f104 0008 	add.w	r0, r4, #8
    da8e:	f016 f89f 	bl	23bd0 <memset>
		sc_store(cfg);
    da92:	4620      	mov	r0, r4
    da94:	f7fe ffc8 	bl	ca28 <sc_store>
    da98:	e7a6      	b.n	d9e8 <update_ccc+0x4c>
    da9a:	bf00      	nop
    da9c:	0000cdd9 	.word	0x0000cdd9
    daa0:	00027078 	.word	0x00027078
    daa4:	00026fc8 	.word	0x00026fc8
    daa8:	0002c6e1 	.word	0x0002c6e1
    daac:	20000354 	.word	0x20000354
    dab0:	2000d760 	.word	0x2000d760
    dab4:	000278d8 	.word	0x000278d8
    dab8:	000251fb 	.word	0x000251fb
    dabc:	0002c6f5 	.word	0x0002c6f5

0000dac0 <bt_gatt_connected>:
{
    dac0:	b570      	push	{r4, r5, r6, lr}
    dac2:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    dac4:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    dac8:	4604      	mov	r4, r0
	data.conn = conn;
    daca:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    dacc:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    dace:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    dad0:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    dad4:	4629      	mov	r1, r5
    dad6:	f016 fb74 	bl	241c2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    dada:	b190      	cbz	r0, db02 <bt_gatt_connected+0x42>
		if (conn->id) {
    dadc:	7a22      	ldrb	r2, [r4, #8]
    dade:	b31a      	cbz	r2, db28 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    dae0:	ae02      	add	r6, sp, #8
    dae2:	2104      	movs	r1, #4
    dae4:	4630      	mov	r0, r6
    dae6:	f013 fb22 	bl	2112e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    daea:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    daec:	4a0f      	ldr	r2, [pc, #60]	; (db2c <bt_gatt_connected+0x6c>)
    daee:	2124      	movs	r1, #36	; 0x24
    daf0:	a805      	add	r0, sp, #20
    daf2:	462b      	mov	r3, r5
    daf4:	f7fa f9b0 	bl	7e58 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    daf8:	aa05      	add	r2, sp, #20
    dafa:	490d      	ldr	r1, [pc, #52]	; (db30 <bt_gatt_connected+0x70>)
    dafc:	4610      	mov	r0, r2
    dafe:	f7f8 facd 	bl	609c <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    db02:	f64f 71ff 	movw	r1, #65535	; 0xffff
    db06:	4a0b      	ldr	r2, [pc, #44]	; (db34 <bt_gatt_connected+0x74>)
    db08:	ab03      	add	r3, sp, #12
    db0a:	2001      	movs	r0, #1
    db0c:	f017 fbe8 	bl	252e0 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    db10:	4620      	mov	r0, r4
    db12:	f016 fc24 	bl	2435e <bt_conn_get_security>
    db16:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    db1a:	4288      	cmp	r0, r1
    db1c:	d202      	bcs.n	db24 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    db1e:	4620      	mov	r0, r4
    db20:	f016 fbed 	bl	242fe <bt_conn_set_security>
}
    db24:	b00e      	add	sp, #56	; 0x38
    db26:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    db28:	9200      	str	r2, [sp, #0]
    db2a:	e7df      	b.n	daec <bt_gatt_connected+0x2c>
    db2c:	0002c6d1 	.word	0x0002c6d1
    db30:	0000d649 	.word	0x0000d649
    db34:	0000d99d 	.word	0x0000d99d

0000db38 <bt_gatt_encrypt_change>:
{
    db38:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    db3a:	4a06      	ldr	r2, [pc, #24]	; (db54 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    db3c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    db3e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    db40:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    db42:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    db46:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    db4a:	f017 fbc9 	bl	252e0 <bt_gatt_foreach_attr>
}
    db4e:	b003      	add	sp, #12
    db50:	f85d fb04 	ldr.w	pc, [sp], #4
    db54:	0000d99d 	.word	0x0000d99d

0000db58 <db_hash_read>:
{
    db58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db5a:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    db5c:	4810      	ldr	r0, [pc, #64]	; (dba0 <db_hash_read+0x48>)
{
    db5e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    db62:	4615      	mov	r5, r2
    db64:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    db66:	f018 feb7 	bl	268d8 <k_delayed_work_cancel>
	if (!err) {
    db6a:	b910      	cbnz	r0, db72 <db_hash_read+0x1a>
		db_hash_gen(true);
    db6c:	2001      	movs	r0, #1
    db6e:	f7ff fccd 	bl	d50c <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    db72:	2101      	movs	r1, #1
    db74:	4620      	mov	r0, r4
    db76:	f017 fc07 	bl	25388 <bt_gatt_change_aware>
	if (offset > value_len) {
    db7a:	2e10      	cmp	r6, #16
    db7c:	d80c      	bhi.n	db98 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    db7e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    db82:	4908      	ldr	r1, [pc, #32]	; (dba4 <db_hash_read+0x4c>)
	len = MIN(buf_len, value_len - offset);
    db84:	42bc      	cmp	r4, r7
    db86:	bfa8      	it	ge
    db88:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    db8a:	4622      	mov	r2, r4
    db8c:	4431      	add	r1, r6
    db8e:	4628      	mov	r0, r5
    db90:	f015 fff3 	bl	23b7a <memcpy>
}
    db94:	4620      	mov	r0, r4
    db96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    db98:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    db9c:	e7fa      	b.n	db94 <db_hash_read+0x3c>
    db9e:	bf00      	nop
    dba0:	2000a7a8 	.word	0x2000a7a8
    dba4:	2000f291 	.word	0x2000f291

0000dba8 <bt_gatt_store_ccc>:
{
    dba8:	b570      	push	{r4, r5, r6, lr}
    dbaa:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    dbac:	2300      	movs	r3, #0
{
    dbae:	4604      	mov	r4, r0
    dbb0:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    dbb2:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    dbb4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    dbb8:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    dbba:	4a18      	ldr	r2, [pc, #96]	; (dc1c <bt_gatt_store_ccc+0x74>)
    dbbc:	ab0d      	add	r3, sp, #52	; 0x34
    dbbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dbc2:	2001      	movs	r0, #1
    dbc4:	f017 fb8c 	bl	252e0 <bt_gatt_foreach_attr>
	if (id) {
    dbc8:	b31c      	cbz	r4, dc12 <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    dbca:	ae03      	add	r6, sp, #12
    dbcc:	4622      	mov	r2, r4
    dbce:	2104      	movs	r1, #4
    dbd0:	4630      	mov	r0, r6
    dbd2:	f013 faac 	bl	2112e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    dbd6:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    dbd8:	4a11      	ldr	r2, [pc, #68]	; (dc20 <bt_gatt_store_ccc+0x78>)
    dbda:	462b      	mov	r3, r5
    dbdc:	2124      	movs	r1, #36	; 0x24
    dbde:	a804      	add	r0, sp, #16
    dbe0:	f7fa f93a 	bl	7e58 <bt_settings_encode_key>
	if (save.count) {
    dbe4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    dbe6:	b1b2      	cbz	r2, dc16 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    dbe8:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    dbea:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    dbec:	a804      	add	r0, sp, #16
    dbee:	f7f8 f9f5 	bl	5fdc <settings_save_one>
	if (err) {
    dbf2:	4604      	mov	r4, r0
    dbf4:	b150      	cbz	r0, dc0c <bt_gatt_store_ccc+0x64>
    dbf6:	4a0b      	ldr	r2, [pc, #44]	; (dc24 <bt_gatt_store_ccc+0x7c>)
    dbf8:	4b0b      	ldr	r3, [pc, #44]	; (dc28 <bt_gatt_store_ccc+0x80>)
    dbfa:	1ad2      	subs	r2, r2, r3
    dbfc:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    dbfe:	0192      	lsls	r2, r2, #6
    dc00:	4601      	mov	r1, r0
    dc02:	f042 0201 	orr.w	r2, r2, #1
    dc06:	4809      	ldr	r0, [pc, #36]	; (dc2c <bt_gatt_store_ccc+0x84>)
    dc08:	f013 ffb8 	bl	21b7c <log_1>
}
    dc0c:	4620      	mov	r0, r4
    dc0e:	b040      	add	sp, #256	; 0x100
    dc10:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    dc12:	9400      	str	r4, [sp, #0]
    dc14:	e7e0      	b.n	dbd8 <bt_gatt_store_ccc+0x30>
		str = NULL;
    dc16:	4611      	mov	r1, r2
    dc18:	e7e8      	b.n	dbec <bt_gatt_store_ccc+0x44>
    dc1a:	bf00      	nop
    dc1c:	0000cd15 	.word	0x0000cd15
    dc20:	0002c6d1 	.word	0x0002c6d1
    dc24:	00027078 	.word	0x00027078
    dc28:	00026fc8 	.word	0x00026fc8
    dc2c:	0002c712 	.word	0x0002c712

0000dc30 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
    dc30:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc32:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    dc34:	ae03      	add	r6, sp, #12
{
    dc36:	4604      	mov	r4, r0
    dc38:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
    dc3a:	9103      	str	r1, [sp, #12]
    dc3c:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    dc40:	4a1f      	ldr	r2, [pc, #124]	; (dcc0 <bt_gatt_clear+0x90>)
    dc42:	4633      	mov	r3, r6
    dc44:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dc48:	2001      	movs	r0, #1
    dc4a:	f017 fb49 	bl	252e0 <bt_gatt_foreach_attr>
		if (id) {
    dc4e:	b394      	cbz	r4, dcb6 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
    dc50:	af02      	add	r7, sp, #8
    dc52:	4622      	mov	r2, r4
    dc54:	2104      	movs	r1, #4
    dc56:	4638      	mov	r0, r7
    dc58:	f013 fa69 	bl	2112e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    dc5c:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    dc5e:	4a19      	ldr	r2, [pc, #100]	; (dcc4 <bt_gatt_clear+0x94>)
    dc60:	462b      	mov	r3, r5
    dc62:	2124      	movs	r1, #36	; 0x24
    dc64:	a805      	add	r0, sp, #20
    dc66:	f7fa f8f7 	bl	7e58 <bt_settings_encode_key>
		return settings_delete(key);
    dc6a:	a805      	add	r0, sp, #20
    dc6c:	f014 fc07 	bl	2247e <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
    dc70:	2800      	cmp	r0, #0
    dc72:	db1e      	blt.n	dcb2 <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
    dc74:	4629      	mov	r1, r5
    dc76:	4620      	mov	r0, r4
    dc78:	f7ff f9e6 	bl	d048 <bt_gatt_clear_sc>
		if (err < 0) {
    dc7c:	2800      	cmp	r0, #0
    dc7e:	db18      	blt.n	dcb2 <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
    dc80:	4629      	mov	r1, r5
    dc82:	4620      	mov	r0, r4
    dc84:	f7fe ff92 	bl	cbac <find_cf_cfg_by_addr>
	if (cfg) {
    dc88:	b108      	cbz	r0, dc8e <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
    dc8a:	f017 f98c 	bl	24fa6 <clear_cf_cfg>
		if (id) {
    dc8e:	b1a4      	cbz	r4, dcba <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
    dc90:	4622      	mov	r2, r4
    dc92:	2104      	movs	r1, #4
    dc94:	4630      	mov	r0, r6
    dc96:	f013 fa4a 	bl	2112e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    dc9a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
    dc9c:	4a0a      	ldr	r2, [pc, #40]	; (dcc8 <bt_gatt_clear+0x98>)
    dc9e:	462b      	mov	r3, r5
    dca0:	2124      	movs	r1, #36	; 0x24
    dca2:	a805      	add	r0, sp, #20
    dca4:	f7fa f8d8 	bl	7e58 <bt_settings_encode_key>
		return settings_delete(key);
    dca8:	a805      	add	r0, sp, #20
    dcaa:	f014 fbe8 	bl	2247e <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
    dcae:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
    dcb2:	b00f      	add	sp, #60	; 0x3c
    dcb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    dcb6:	9400      	str	r4, [sp, #0]
    dcb8:	e7d1      	b.n	dc5e <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
    dcba:	9400      	str	r4, [sp, #0]
    dcbc:	e7ee      	b.n	dc9c <bt_gatt_clear+0x6c>
    dcbe:	bf00      	nop
    dcc0:	0000cced 	.word	0x0000cced
    dcc4:	0002c6d1 	.word	0x0002c6d1
    dcc8:	0002c75c 	.word	0x0002c75c

0000dccc <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
    dccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcce:	4604      	mov	r4, r0
    dcd0:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    dcd2:	4603      	mov	r3, r0
    dcd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dcd8:	2001      	movs	r0, #1
    dcda:	4a3a      	ldr	r2, [pc, #232]	; (ddc4 <bt_gatt_disconnected+0xf8>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    dcdc:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    dce0:	f017 fafe 	bl	252e0 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    dce4:	7a20      	ldrb	r0, [r4, #8]
    dce6:	4629      	mov	r1, r5
    dce8:	f016 fa6b 	bl	241c2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    dcec:	2800      	cmp	r0, #0
    dcee:	d035      	beq.n	dd5c <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    dcf0:	4629      	mov	r1, r5
    dcf2:	7a20      	ldrb	r0, [r4, #8]
    dcf4:	f7ff ff58 	bl	dba8 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    dcf8:	4620      	mov	r0, r4
    dcfa:	f7fe fe0f 	bl	c91c <find_cf_cfg>
	if (!cfg) {
    dcfe:	4606      	mov	r6, r0
    dd00:	2800      	cmp	r0, #0
    dd02:	d04b      	beq.n	dd9c <bt_gatt_disconnected+0xd0>
		if (conn->id) {
    dd04:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    dd06:	3608      	adds	r6, #8
		if (conn->id) {
    dd08:	2a00      	cmp	r2, #0
    dd0a:	d049      	beq.n	dda0 <bt_gatt_disconnected+0xd4>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    dd0c:	af02      	add	r7, sp, #8
    dd0e:	2104      	movs	r1, #4
    dd10:	4638      	mov	r0, r7
    dd12:	f013 fa0c 	bl	2112e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    dd16:	9700      	str	r7, [sp, #0]
    dd18:	462b      	mov	r3, r5
    dd1a:	4a2b      	ldr	r2, [pc, #172]	; (ddc8 <bt_gatt_disconnected+0xfc>)
    dd1c:	2124      	movs	r1, #36	; 0x24
    dd1e:	a803      	add	r0, sp, #12
    dd20:	f7fa f89a 	bl	7e58 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    dd24:	7a23      	ldrb	r3, [r4, #8]
    dd26:	2701      	movs	r7, #1
    dd28:	b93b      	cbnz	r3, dd3a <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    dd2a:	2300      	movs	r3, #0
    dd2c:	9300      	str	r3, [sp, #0]
    dd2e:	4a26      	ldr	r2, [pc, #152]	; (ddc8 <bt_gatt_disconnected+0xfc>)
    dd30:	462b      	mov	r3, r5
    dd32:	2124      	movs	r1, #36	; 0x24
    dd34:	a803      	add	r0, sp, #12
    dd36:	f7fa f88f 	bl	7e58 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    dd3a:	4631      	mov	r1, r6
    dd3c:	463a      	mov	r2, r7
    dd3e:	a803      	add	r0, sp, #12
    dd40:	f7f8 f94c 	bl	5fdc <settings_save_one>
	if (err) {
    dd44:	4601      	mov	r1, r0
    dd46:	b148      	cbz	r0, dd5c <bt_gatt_disconnected+0x90>
    dd48:	4a20      	ldr	r2, [pc, #128]	; (ddcc <bt_gatt_disconnected+0x100>)
    dd4a:	4b21      	ldr	r3, [pc, #132]	; (ddd0 <bt_gatt_disconnected+0x104>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    dd4c:	4821      	ldr	r0, [pc, #132]	; (ddd4 <bt_gatt_disconnected+0x108>)
    dd4e:	1ad2      	subs	r2, r2, r3
    dd50:	08d2      	lsrs	r2, r2, #3
    dd52:	0192      	lsls	r2, r2, #6
    dd54:	f042 0201 	orr.w	r2, r2, #1
    dd58:	f013 ff10 	bl	21b7c <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    dd5c:	7a20      	ldrb	r0, [r4, #8]
    dd5e:	4629      	mov	r1, r5
    dd60:	f016 fa2f 	bl	241c2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    dd64:	b150      	cbz	r0, dd7c <bt_gatt_disconnected+0xb0>
		struct addr_with_id addr_with_id = {
    dd66:	7a23      	ldrb	r3, [r4, #8]
    dd68:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    dd6c:	4a1a      	ldr	r2, [pc, #104]	; (ddd8 <bt_gatt_disconnected+0x10c>)
		struct addr_with_id addr_with_id = {
    dd6e:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    dd70:	ab03      	add	r3, sp, #12
    dd72:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd76:	2001      	movs	r0, #1
    dd78:	f017 fab2 	bl	252e0 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    dd7c:	4620      	mov	r0, r4
    dd7e:	f7fe fdcd 	bl	c91c <find_cf_cfg>
	if (!cfg) {
    dd82:	4606      	mov	r6, r0
    dd84:	b1d8      	cbz	r0, ddbe <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    dd86:	7a20      	ldrb	r0, [r4, #8]
    dd88:	4629      	mov	r1, r5
    dd8a:	f016 fa1a 	bl	241c2 <bt_addr_le_is_bonded>
    dd8e:	b948      	cbnz	r0, dda4 <bt_gatt_disconnected+0xd8>
		clear_cf_cfg(cfg);
    dd90:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    dd92:	b00d      	add	sp, #52	; 0x34
    dd94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
    dd98:	f017 b905 	b.w	24fa6 <clear_cf_cfg>
		len = 0;
    dd9c:	4607      	mov	r7, r0
    dd9e:	e7c4      	b.n	dd2a <bt_gatt_disconnected+0x5e>
    dda0:	2701      	movs	r7, #1
    dda2:	e7c2      	b.n	dd2a <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    dda4:	4629      	mov	r1, r5
    dda6:	1c70      	adds	r0, r6, #1
    dda8:	f017 f867 	bl	24e7a <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ddac:	f06f 0102 	mvn.w	r1, #2
    ddb0:	f106 000c 	add.w	r0, r6, #12
}
    ddb4:	b00d      	add	sp, #52	; 0x34
    ddb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ddba:	f017 b911 	b.w	24fe0 <atomic_and.isra.0>
    ddbe:	b00d      	add	sp, #52	; 0x34
    ddc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ddc2:	bf00      	nop
    ddc4:	0000d111 	.word	0x0000d111
    ddc8:	0002c75c 	.word	0x0002c75c
    ddcc:	00027078 	.word	0x00027078
    ddd0:	00026fc8 	.word	0x00026fc8
    ddd4:	0002c730 	.word	0x0002c730
    ddd8:	0000cced 	.word	0x0000cced

0000dddc <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    dddc:	4b10      	ldr	r3, [pc, #64]	; (de20 <get_io_capa+0x44>)
    ddde:	681b      	ldr	r3, [r3, #0]
    dde0:	b1bb      	cbz	r3, de12 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    dde2:	681a      	ldr	r2, [r3, #0]
    dde4:	b142      	cbz	r2, ddf8 <get_io_capa+0x1c>
    dde6:	6859      	ldr	r1, [r3, #4]
    dde8:	b131      	cbz	r1, ddf8 <get_io_capa+0x1c>
    ddea:	6899      	ldr	r1, [r3, #8]
    ddec:	b911      	cbnz	r1, ddf4 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    ddee:	490d      	ldr	r1, [pc, #52]	; (de24 <get_io_capa+0x48>)
    ddf0:	7809      	ldrb	r1, [r1, #0]
    ddf2:	b939      	cbnz	r1, de04 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    ddf4:	2004      	movs	r0, #4
    ddf6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    ddf8:	490a      	ldr	r1, [pc, #40]	; (de24 <get_io_capa+0x48>)
    ddfa:	7809      	ldrb	r1, [r1, #0]
    ddfc:	b111      	cbz	r1, de04 <get_io_capa+0x28>
    ddfe:	b10a      	cbz	r2, de04 <get_io_capa+0x28>
    de00:	6899      	ldr	r1, [r3, #8]
    de02:	b941      	cbnz	r1, de16 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    de04:	685b      	ldr	r3, [r3, #4]
    de06:	b943      	cbnz	r3, de1a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    de08:	2a00      	cmp	r2, #0
    de0a:	bf0c      	ite	eq
    de0c:	2003      	moveq	r0, #3
    de0e:	2000      	movne	r0, #0
    de10:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    de12:	2003      	movs	r0, #3
    de14:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    de16:	2001      	movs	r0, #1
    de18:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    de1a:	2002      	movs	r0, #2
	}
}
    de1c:	4770      	bx	lr
    de1e:	bf00      	nop
    de20:	2000d6e8 	.word	0x2000d6e8
    de24:	2000f2b2 	.word	0x2000f2b2

0000de28 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
    de28:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    de2a:	1d14      	adds	r4, r2, #4
{
    de2c:	b08b      	sub	sp, #44	; 0x2c
    de2e:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    de30:	588b      	ldr	r3, [r1, r2]
    de32:	9301      	str	r3, [sp, #4]
{
    de34:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    de36:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
    de38:	4628      	mov	r0, r5
    de3a:	4621      	mov	r1, r4
    de3c:	f017 fad8 	bl	253f0 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    de40:	4631      	mov	r1, r6
    de42:	2210      	movs	r2, #16
    de44:	a802      	add	r0, sp, #8
    de46:	f017 fac9 	bl	253dc <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    de4a:	ab06      	add	r3, sp, #24
    de4c:	4622      	mov	r2, r4
    de4e:	4629      	mov	r1, r5
    de50:	a802      	add	r0, sp, #8
    de52:	f017 fadc 	bl	2540e <bt_smp_aes_cmac>
	if (err) {
    de56:	4606      	mov	r6, r0
    de58:	b160      	cbz	r0, de74 <smp_sign_buf+0x4c>
    de5a:	4910      	ldr	r1, [pc, #64]	; (de9c <smp_sign_buf+0x74>)
    de5c:	4b10      	ldr	r3, [pc, #64]	; (dea0 <smp_sign_buf+0x78>)
		BT_ERR("Data signing failed");
    de5e:	4811      	ldr	r0, [pc, #68]	; (dea4 <smp_sign_buf+0x7c>)
    de60:	1ac9      	subs	r1, r1, r3
    de62:	08c9      	lsrs	r1, r1, #3
    de64:	0189      	lsls	r1, r1, #6
    de66:	f041 0101 	orr.w	r1, r1, #1
    de6a:	f013 fe7a 	bl	21b62 <log_0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    de6e:	4630      	mov	r0, r6
    de70:	b00b      	add	sp, #44	; 0x2c
    de72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    de74:	a806      	add	r0, sp, #24
    de76:	2110      	movs	r1, #16
    de78:	f017 faba 	bl	253f0 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    de7c:	2204      	movs	r2, #4
    de7e:	eb0d 0102 	add.w	r1, sp, r2
    de82:	a807      	add	r0, sp, #28
    de84:	f015 fe79 	bl	23b7a <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    de88:	4621      	mov	r1, r4
    de8a:	4628      	mov	r0, r5
    de8c:	f017 fab0 	bl	253f0 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    de90:	220c      	movs	r2, #12
    de92:	a907      	add	r1, sp, #28
    de94:	4638      	mov	r0, r7
    de96:	f015 fe70 	bl	23b7a <memcpy>
	return 0;
    de9a:	e7e8      	b.n	de6e <smp_sign_buf+0x46>
    de9c:	000270b0 	.word	0x000270b0
    dea0:	00026fc8 	.word	0x00026fc8
    dea4:	0002c76d 	.word	0x0002c76d

0000dea8 <smp_chan_get>:
{
    dea8:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    deaa:	2106      	movs	r1, #6
    deac:	f016 fbb5 	bl	2461a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    deb0:	4604      	mov	r4, r0
    deb2:	b948      	cbnz	r0, dec8 <smp_chan_get+0x20>
    deb4:	4905      	ldr	r1, [pc, #20]	; (decc <smp_chan_get+0x24>)
    deb6:	4b06      	ldr	r3, [pc, #24]	; (ded0 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    deb8:	4806      	ldr	r0, [pc, #24]	; (ded4 <smp_chan_get+0x2c>)
    deba:	1ac9      	subs	r1, r1, r3
    debc:	08c9      	lsrs	r1, r1, #3
    debe:	0189      	lsls	r1, r1, #6
    dec0:	f041 0101 	orr.w	r1, r1, #1
    dec4:	f013 fe4d 	bl	21b62 <log_0>
}
    dec8:	4620      	mov	r0, r4
    deca:	bd10      	pop	{r4, pc}
    decc:	000270b0 	.word	0x000270b0
    ded0:	00026fc8 	.word	0x00026fc8
    ded4:	0002c781 	.word	0x0002c781

0000ded8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    ded8:	4a0b      	ldr	r2, [pc, #44]	; (df08 <bt_smp_accept+0x30>)
{
    deda:	b508      	push	{r3, lr}
    dedc:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    dede:	6810      	ldr	r0, [r2, #0]
    dee0:	b918      	cbnz	r0, deea <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    dee2:	4b0a      	ldr	r3, [pc, #40]	; (df0c <bt_smp_accept+0x34>)
    dee4:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    dee6:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    dee8:	bd08      	pop	{r3, pc}
    deea:	4909      	ldr	r1, [pc, #36]	; (df10 <bt_smp_accept+0x38>)
    deec:	4a09      	ldr	r2, [pc, #36]	; (df14 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    deee:	480a      	ldr	r0, [pc, #40]	; (df18 <bt_smp_accept+0x40>)
    def0:	1a52      	subs	r2, r2, r1
    def2:	08d2      	lsrs	r2, r2, #3
    def4:	0192      	lsls	r2, r2, #6
    def6:	f042 0201 	orr.w	r2, r2, #1
    defa:	4619      	mov	r1, r3
    defc:	f013 fe3e 	bl	21b7c <log_1>
	return -ENOMEM;
    df00:	f06f 000b 	mvn.w	r0, #11
    df04:	e7f0      	b.n	dee8 <bt_smp_accept+0x10>
    df06:	bf00      	nop
    df08:	2000a830 	.word	0x2000a830
    df0c:	00027a54 	.word	0x00027a54
    df10:	00026fc8 	.word	0x00026fc8
    df14:	000270b0 	.word	0x000270b0
    df18:	0002c79c 	.word	0x0002c79c

0000df1c <get_auth.constprop.0>:
	if (sc_supported) {
    df1c:	4b0c      	ldr	r3, [pc, #48]	; (df50 <get_auth.constprop.0+0x34>)
    df1e:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    df20:	b510      	push	{r4, lr}
	if (sc_supported) {
    df22:	b17b      	cbz	r3, df44 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    df24:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    df28:	f7ff ff58 	bl	dddc <get_io_capa>
	if (bondable) {
    df2c:	4b09      	ldr	r3, [pc, #36]	; (df54 <get_auth.constprop.0+0x38>)
    df2e:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    df30:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    df32:	bf0c      	ite	eq
    df34:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    df38:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    df3c:	b12b      	cbz	r3, df4a <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    df3e:	f044 0001 	orr.w	r0, r4, #1
}
    df42:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    df44:	f000 0407 	and.w	r4, r0, #7
    df48:	e7ee      	b.n	df28 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    df4a:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    df4e:	e7f8      	b.n	df42 <get_auth.constprop.0+0x26>
    df50:	2000f2b2 	.word	0x2000f2b2
    df54:	20009d44 	.word	0x20009d44

0000df58 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    df58:	b513      	push	{r0, r1, r4, lr}
    df5a:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    df5c:	2200      	movs	r2, #0
    df5e:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    df60:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    df62:	460a      	mov	r2, r1
    df64:	6800      	ldr	r0, [r0, #0]
    df66:	2106      	movs	r1, #6
    df68:	f016 fb2e 	bl	245c8 <bt_l2cap_send_cb>
    df6c:	4805      	ldr	r0, [pc, #20]	; (df84 <smp_send.constprop.0+0x2c>)
    df6e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    df72:	2300      	movs	r3, #0
    df74:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    df78:	b002      	add	sp, #8
    df7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df7e:	f011 bf83 	b.w	1fe88 <k_delayed_work_submit_to_queue>
    df82:	bf00      	nop
    df84:	2000ac68 	.word	0x2000ac68

0000df88 <smp_init>:
{
    df88:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    df8a:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
    df8e:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    df90:	22f0      	movs	r2, #240	; 0xf0
    df92:	2100      	movs	r1, #0
    df94:	4628      	mov	r0, r5
    df96:	f015 fe1b 	bl	23bd0 <memset>
	if (bt_rand(smp->prnd, 16)) {
    df9a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    df9e:	2110      	movs	r1, #16
    dfa0:	f004 fe70 	bl	12c84 <bt_rand>
    dfa4:	4604      	mov	r4, r0
    dfa6:	b948      	cbnz	r0, dfbc <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    dfa8:	2105      	movs	r1, #5
    dfaa:	4628      	mov	r0, r5
    dfac:	f017 facd 	bl	2554a <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    dfb0:	f7fc fc50 	bl	a854 <bt_pub_key_get>
    dfb4:	4b02      	ldr	r3, [pc, #8]	; (dfc0 <smp_init+0x38>)
    dfb6:	6018      	str	r0, [r3, #0]
}
    dfb8:	4620      	mov	r0, r4
    dfba:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    dfbc:	2408      	movs	r4, #8
    dfbe:	e7fb      	b.n	dfb8 <smp_init+0x30>
    dfc0:	2000d77c 	.word	0x2000d77c

0000dfc4 <smp_dhkey_generate>:
{
    dfc4:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    dfc6:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
    dfca:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    dfcc:	2108      	movs	r1, #8
    dfce:	4628      	mov	r0, r5
    dfd0:	f017 fabb 	bl	2554a <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    dfd4:	490a      	ldr	r1, [pc, #40]	; (e000 <smp_dhkey_generate+0x3c>)
    dfd6:	f204 100f 	addw	r0, r4, #271	; 0x10f
    dfda:	f7fc fc49 	bl	a870 <bt_dh_key_gen>
	if (err) {
    dfde:	b170      	cbz	r0, dffe <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    dfe0:	2108      	movs	r1, #8
    dfe2:	4628      	mov	r0, r5
    dfe4:	f017 faa2 	bl	2552c <atomic_clear_bit>
    dfe8:	4b06      	ldr	r3, [pc, #24]	; (e004 <smp_dhkey_generate+0x40>)
    dfea:	4907      	ldr	r1, [pc, #28]	; (e008 <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
    dfec:	4807      	ldr	r0, [pc, #28]	; (e00c <smp_dhkey_generate+0x48>)
    dfee:	1ac9      	subs	r1, r1, r3
    dff0:	08c9      	lsrs	r1, r1, #3
    dff2:	0189      	lsls	r1, r1, #6
    dff4:	f041 0101 	orr.w	r1, r1, #1
    dff8:	f013 fdb3 	bl	21b62 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    dffc:	2008      	movs	r0, #8
}
    dffe:	bd38      	pop	{r3, r4, r5, pc}
    e000:	00025a23 	.word	0x00025a23
    e004:	00026fc8 	.word	0x00026fc8
    e008:	000270b0 	.word	0x000270b0
    e00c:	0002c7c1 	.word	0x0002c7c1

0000e010 <smp_find>:
{
    e010:	4601      	mov	r1, r0
    e012:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    e014:	4803      	ldr	r0, [pc, #12]	; (e024 <smp_find+0x14>)
    e016:	f017 faaf 	bl	25578 <atomic_test_bit>
	return NULL;
    e01a:	2800      	cmp	r0, #0
}
    e01c:	4802      	ldr	r0, [pc, #8]	; (e028 <smp_find+0x18>)
    e01e:	bf08      	it	eq
    e020:	2000      	moveq	r0, #0
    e022:	bd08      	pop	{r3, pc}
    e024:	2000a8ec 	.word	0x2000a8ec
    e028:	2000a830 	.word	0x2000a830

0000e02c <smp_ident_info>:
{
    e02c:	b570      	push	{r4, r5, r6, lr}
    e02e:	460b      	mov	r3, r1
    e030:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e032:	210d      	movs	r1, #13
    e034:	30bc      	adds	r0, #188	; 0xbc
    e036:	f017 fa9f 	bl	25578 <atomic_test_bit>
    e03a:	b308      	cbz	r0, e080 <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    e03c:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e03e:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e040:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e044:	7a19      	ldrb	r1, [r3, #8]
    e046:	462a      	mov	r2, r5
    e048:	2002      	movs	r0, #2
    e04a:	f017 fd7f 	bl	25b4c <bt_keys_get_type>
		if (!keys) {
    e04e:	b990      	cbnz	r0, e076 <smp_ident_info+0x4a>
    e050:	4a0f      	ldr	r2, [pc, #60]	; (e090 <smp_ident_info+0x64>)
    e052:	4c10      	ldr	r4, [pc, #64]	; (e094 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e054:	4628      	mov	r0, r5
    e056:	1aa4      	subs	r4, r4, r2
    e058:	f7f9 fc50 	bl	78fc <bt_addr_le_str_real>
    e05c:	f7f6 feba 	bl	4dd4 <log_strdup>
    e060:	08e4      	lsrs	r4, r4, #3
    e062:	01a4      	lsls	r4, r4, #6
    e064:	f044 0401 	orr.w	r4, r4, #1
    e068:	4601      	mov	r1, r0
    e06a:	4622      	mov	r2, r4
    e06c:	480a      	ldr	r0, [pc, #40]	; (e098 <smp_ident_info+0x6c>)
    e06e:	f013 fd85 	bl	21b7c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e072:	2008      	movs	r0, #8
}
    e074:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    e076:	2210      	movs	r2, #16
    e078:	4631      	mov	r1, r6
    e07a:	302a      	adds	r0, #42	; 0x2a
    e07c:	f015 fd7d 	bl	23b7a <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    e080:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e084:	2109      	movs	r1, #9
    e086:	f017 fa60 	bl	2554a <atomic_set_bit>
	return 0;
    e08a:	2000      	movs	r0, #0
    e08c:	e7f2      	b.n	e074 <smp_ident_info+0x48>
    e08e:	bf00      	nop
    e090:	00026fc8 	.word	0x00026fc8
    e094:	000270b0 	.word	0x000270b0
    e098:	0002c7da 	.word	0x0002c7da

0000e09c <smp_encrypt_info>:
{
    e09c:	b570      	push	{r4, r5, r6, lr}
    e09e:	460b      	mov	r3, r1
    e0a0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e0a2:	210d      	movs	r1, #13
    e0a4:	30bc      	adds	r0, #188	; 0xbc
    e0a6:	f017 fa67 	bl	25578 <atomic_test_bit>
    e0aa:	b308      	cbz	r0, e0f0 <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    e0ac:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e0ae:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e0b0:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e0b4:	7a19      	ldrb	r1, [r3, #8]
    e0b6:	462a      	mov	r2, r5
    e0b8:	2004      	movs	r0, #4
    e0ba:	f017 fd47 	bl	25b4c <bt_keys_get_type>
		if (!keys) {
    e0be:	b990      	cbnz	r0, e0e6 <smp_encrypt_info+0x4a>
    e0c0:	4a0f      	ldr	r2, [pc, #60]	; (e100 <smp_encrypt_info+0x64>)
    e0c2:	4c10      	ldr	r4, [pc, #64]	; (e104 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e0c4:	4628      	mov	r0, r5
    e0c6:	1aa4      	subs	r4, r4, r2
    e0c8:	f7f9 fc18 	bl	78fc <bt_addr_le_str_real>
    e0cc:	f7f6 fe82 	bl	4dd4 <log_strdup>
    e0d0:	08e4      	lsrs	r4, r4, #3
    e0d2:	01a4      	lsls	r4, r4, #6
    e0d4:	f044 0401 	orr.w	r4, r4, #1
    e0d8:	4601      	mov	r1, r0
    e0da:	4622      	mov	r2, r4
    e0dc:	480a      	ldr	r0, [pc, #40]	; (e108 <smp_encrypt_info+0x6c>)
    e0de:	f013 fd4d 	bl	21b7c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e0e2:	2008      	movs	r0, #8
}
    e0e4:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    e0e6:	2210      	movs	r2, #16
    e0e8:	4631      	mov	r1, r6
    e0ea:	301a      	adds	r0, #26
    e0ec:	f015 fd45 	bl	23b7a <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    e0f0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e0f4:	2107      	movs	r1, #7
    e0f6:	f017 fa28 	bl	2554a <atomic_set_bit>
	return 0;
    e0fa:	2000      	movs	r0, #0
    e0fc:	e7f2      	b.n	e0e4 <smp_encrypt_info+0x48>
    e0fe:	bf00      	nop
    e100:	00026fc8 	.word	0x00026fc8
    e104:	000270b0 	.word	0x000270b0
    e108:	0002c7da 	.word	0x0002c7da

0000e10c <smp_pairing_req>:
{
    e10c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    e110:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e112:	78fb      	ldrb	r3, [r7, #3]
    e114:	3b07      	subs	r3, #7
    e116:	2b09      	cmp	r3, #9
{
    e118:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e11a:	d904      	bls.n	e126 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    e11c:	2706      	movs	r7, #6
}
    e11e:	4638      	mov	r0, r7
    e120:	b002      	add	sp, #8
    e122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    e126:	6806      	ldr	r6, [r0, #0]
	if (!conn->le.keys) {
    e128:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    e12c:	b163      	cbz	r3, e148 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    e12e:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    e132:	210f      	movs	r1, #15
    e134:	4628      	mov	r0, r5
    e136:	f017 fa1f 	bl	25578 <atomic_test_bit>
    e13a:	b980      	cbnz	r0, e15e <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    e13c:	4620      	mov	r0, r4
    e13e:	f7ff ff23 	bl	df88 <smp_init>
		if (ret) {
    e142:	b160      	cbz	r0, e15e <smp_pairing_req+0x52>
			return ret;
    e144:	b2c7      	uxtb	r7, r0
    e146:	e7ea      	b.n	e11e <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e148:	7a30      	ldrb	r0, [r6, #8]
    e14a:	f106 0188 	add.w	r1, r6, #136	; 0x88
    e14e:	f001 fc69 	bl	fa24 <bt_keys_get_addr>
    e152:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
    e156:	2800      	cmp	r0, #0
    e158:	d1e9      	bne.n	e12e <smp_pairing_req+0x22>
	switch (conn->required_sec_level) {
    e15a:	2708      	movs	r7, #8
    e15c:	e7df      	b.n	e11e <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e15e:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    e160:	2206      	movs	r2, #6
    e162:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e164:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
    e168:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    e16c:	f015 fd05 	bl	23b7a <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    e170:	2302      	movs	r3, #2
    e172:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
    e176:	78b8      	ldrb	r0, [r7, #2]
    e178:	f7ff fed0 	bl	df1c <get_auth.constprop.0>
    e17c:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
    e180:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    e182:	f7ff fe2b 	bl	dddc <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e186:	4b9e      	ldr	r3, [pc, #632]	; (e400 <smp_pairing_req+0x2f4>)
	rsp->io_capability = get_io_capa();
    e188:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e18c:	781b      	ldrb	r3, [r3, #0]
    e18e:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    e192:	2310      	movs	r3, #16
    e194:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    e198:	793b      	ldrb	r3, [r7, #4]
    e19a:	f003 0307 	and.w	r3, r3, #7
    e19e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    e1a2:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    e1a4:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    e1a8:	f003 0307 	and.w	r3, r3, #7
    e1ac:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    e1b0:	d012      	beq.n	e1d8 <smp_pairing_req+0xcc>
    e1b2:	78bb      	ldrb	r3, [r7, #2]
    e1b4:	0719      	lsls	r1, r3, #28
    e1b6:	d50f      	bpl.n	e1d8 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    e1b8:	2105      	movs	r1, #5
    e1ba:	4628      	mov	r0, r5
    e1bc:	f017 f9c5 	bl	2554a <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    e1c0:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    e1c4:	f003 0306 	and.w	r3, r3, #6
    e1c8:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
    e1cc:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    e1d0:	f003 0306 	and.w	r3, r3, #6
    e1d4:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    e1d8:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    e1dc:	069a      	lsls	r2, r3, #26
    e1de:	d506      	bpl.n	e1ee <smp_pairing_req+0xe2>
    e1e0:	78bb      	ldrb	r3, [r7, #2]
    e1e2:	069b      	lsls	r3, r3, #26
    e1e4:	d503      	bpl.n	e1ee <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    e1e6:	2114      	movs	r1, #20
    e1e8:	4628      	mov	r0, r5
    e1ea:	f017 f9ae 	bl	2554a <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    e1ee:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    e1f2:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
    e1f6:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    e1fa:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    e1fe:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    e202:	07d8      	lsls	r0, r3, #31
    e204:	d506      	bpl.n	e214 <smp_pairing_req+0x108>
    e206:	78bb      	ldrb	r3, [r7, #2]
    e208:	07d9      	lsls	r1, r3, #31
    e20a:	d503      	bpl.n	e214 <smp_pairing_req+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    e20c:	210d      	movs	r1, #13
    e20e:	4628      	mov	r0, r5
    e210:	f017 f99b 	bl	2554a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    e214:	2103      	movs	r1, #3
    e216:	4628      	mov	r0, r5
    e218:	f017 f997 	bl	2554a <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e21c:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    e21e:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e220:	f017 f9aa 	bl	25578 <atomic_test_bit>
    e224:	f8d4 8000 	ldr.w	r8, [r4]
    e228:	2800      	cmp	r0, #0
    e22a:	d15a      	bne.n	e2e2 <smp_pairing_req+0x1d6>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    e22c:	2f04      	cmp	r7, #4
    e22e:	d879      	bhi.n	e324 <smp_pairing_req+0x218>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    e230:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    e234:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    e238:	4013      	ands	r3, r2
    e23a:	07da      	lsls	r2, r3, #31
    e23c:	d470      	bmi.n	e320 <smp_pairing_req+0x214>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    e23e:	f894 10c4 	ldrb.w	r1, [r4, #196]	; 0xc4
    e242:	f894 00cb 	ldrb.w	r0, [r4, #203]	; 0xcb
    e246:	4301      	orrs	r1, r0
    e248:	f011 0104 	ands.w	r1, r1, #4
    e24c:	d00e      	beq.n	e26c <smp_pairing_req+0x160>
	method = gen_method_legacy[remote_io][get_io_capa()];
    e24e:	f7ff fdc5 	bl	dddc <get_io_capa>
    e252:	4b6c      	ldr	r3, [pc, #432]	; (e404 <smp_pairing_req+0x2f8>)
    e254:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    e258:	441f      	add	r7, r3
    e25a:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
    e25c:	2904      	cmp	r1, #4
    e25e:	d105      	bne.n	e26c <smp_pairing_req+0x160>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    e260:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    e264:	2b00      	cmp	r3, #0
    e266:	bf0c      	ite	eq
    e268:	2102      	moveq	r1, #2
    e26a:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
    e26c:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
    e270:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    e274:	b93b      	cbnz	r3, e286 <smp_pairing_req+0x17a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e276:	f898 0008 	ldrb.w	r0, [r8, #8]
    e27a:	f108 0188 	add.w	r1, r8, #136	; 0x88
    e27e:	f001 fbd1 	bl	fa24 <bt_keys_get_addr>
    e282:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    e286:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    e28a:	2a00      	cmp	r2, #0
    e28c:	d163      	bne.n	e356 <smp_pairing_req+0x24a>
	switch (conn->required_sec_level) {
    e28e:	6823      	ldr	r3, [r4, #0]
    e290:	7a9b      	ldrb	r3, [r3, #10]
    e292:	2b03      	cmp	r3, #3
    e294:	d05a      	beq.n	e34c <smp_pairing_req+0x240>
    e296:	d847      	bhi.n	e328 <smp_pairing_req+0x21c>
    e298:	3b01      	subs	r3, #1
    e29a:	2b01      	cmp	r3, #1
    e29c:	f63f af5d 	bhi.w	e15a <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e2a0:	2105      	movs	r1, #5
    e2a2:	4628      	mov	r0, r5
    e2a4:	f017 f968 	bl	25578 <atomic_test_bit>
    e2a8:	2800      	cmp	r0, #0
    e2aa:	f040 8104 	bne.w	e4b6 <smp_pairing_req+0x3aa>
	struct bt_conn *conn = smp->chan.chan.conn;
    e2ae:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    e2b0:	f106 0188 	add.w	r1, r6, #136	; 0x88
    e2b4:	7a30      	ldrb	r0, [r6, #8]
    e2b6:	f001 fc79 	bl	fbac <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    e2ba:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    e2be:	2800      	cmp	r0, #0
    e2c0:	d067      	beq.n	e392 <smp_pairing_req+0x286>
    e2c2:	7b43      	ldrb	r3, [r0, #13]
    e2c4:	07db      	lsls	r3, r3, #31
    e2c6:	d564      	bpl.n	e392 <smp_pairing_req+0x286>
    e2c8:	2900      	cmp	r1, #0
    e2ca:	d162      	bne.n	e392 <smp_pairing_req+0x286>
    e2cc:	4b4e      	ldr	r3, [pc, #312]	; (e408 <smp_pairing_req+0x2fc>)
    e2ce:	494f      	ldr	r1, [pc, #316]	; (e40c <smp_pairing_req+0x300>)
		BT_ERR("JustWorks failed, authenticated keys present");
    e2d0:	484f      	ldr	r0, [pc, #316]	; (e410 <smp_pairing_req+0x304>)
    e2d2:	1ac9      	subs	r1, r1, r3
    e2d4:	08c9      	lsrs	r1, r1, #3
    e2d6:	0189      	lsls	r1, r1, #6
    e2d8:	f041 0101 	orr.w	r1, r1, #1
    e2dc:	f013 fc41 	bl	21b62 <log_0>
	if (ret) {
    e2e0:	e73b      	b.n	e15a <smp_pairing_req+0x4e>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    e2e2:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    e2e6:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
    e2ea:	ea00 0302 	and.w	r3, r0, r2
    e2ee:	071b      	lsls	r3, r3, #28
    e2f0:	d507      	bpl.n	e302 <smp_pairing_req+0x1f6>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    e2f2:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    e2f6:	f894 c0ca 	ldrb.w	ip, [r4, #202]	; 0xca
    e2fa:	ea43 030c 	orr.w	r3, r3, ip
    e2fe:	07db      	lsls	r3, r3, #31
    e300:	d4b4      	bmi.n	e26c <smp_pairing_req+0x160>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    e302:	2f04      	cmp	r7, #4
    e304:	d80e      	bhi.n	e324 <smp_pairing_req+0x218>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    e306:	ea40 0102 	orr.w	r1, r0, r2
    e30a:	f011 0104 	ands.w	r1, r1, #4
    e30e:	d0ad      	beq.n	e26c <smp_pairing_req+0x160>
	return gen_method_sc[remote_io][get_io_capa()];
    e310:	f7ff fd64 	bl	dddc <get_io_capa>
    e314:	4b3f      	ldr	r3, [pc, #252]	; (e414 <smp_pairing_req+0x308>)
    e316:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    e31a:	441f      	add	r7, r3
    e31c:	5c39      	ldrb	r1, [r7, r0]
    e31e:	e7a5      	b.n	e26c <smp_pairing_req+0x160>
		return LEGACY_OOB;
    e320:	2106      	movs	r1, #6
    e322:	e7a3      	b.n	e26c <smp_pairing_req+0x160>
		return JUST_WORKS;
    e324:	2100      	movs	r1, #0
    e326:	e7a1      	b.n	e26c <smp_pairing_req+0x160>
	switch (conn->required_sec_level) {
    e328:	2b04      	cmp	r3, #4
    e32a:	f47f af16 	bne.w	e15a <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
    e32e:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    e332:	f894 20c5 	ldrb.w	r2, [r4, #197]	; 0xc5
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
    e336:	4293      	cmp	r3, r2
    e338:	bf28      	it	cs
    e33a:	4613      	movcs	r3, r2
    e33c:	2b10      	cmp	r3, #16
    e33e:	f47f aeed 	bne.w	e11c <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e342:	2105      	movs	r1, #5
    e344:	4628      	mov	r0, r5
    e346:	f017 f917 	bl	25578 <atomic_test_bit>
    e34a:	b190      	cbz	r0, e372 <smp_pairing_req+0x266>
		if (smp->method == JUST_WORKS) {
    e34c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e350:	2b00      	cmp	r3, #0
    e352:	d1a5      	bne.n	e2a0 <smp_pairing_req+0x194>
    e354:	e00d      	b.n	e372 <smp_pairing_req+0x266>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    e356:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    e358:	f011 0f24 	tst.w	r1, #36	; 0x24
    e35c:	d097      	beq.n	e28e <smp_pairing_req+0x182>
	return MIN(req->max_key_size, rsp->max_key_size);
    e35e:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    e362:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    e366:	7b12      	ldrb	r2, [r2, #12]
    e368:	4283      	cmp	r3, r0
    e36a:	bf28      	it	cs
    e36c:	4603      	movcs	r3, r0
    e36e:	429a      	cmp	r2, r3
    e370:	d901      	bls.n	e376 <smp_pairing_req+0x26a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    e372:	2703      	movs	r7, #3
    e374:	e6d3      	b.n	e11e <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    e376:	068a      	lsls	r2, r1, #26
    e378:	d404      	bmi.n	e384 <smp_pairing_req+0x278>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    e37a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e37e:	2b00      	cmp	r3, #0
    e380:	d185      	bne.n	e28e <smp_pairing_req+0x182>
    e382:	e7f6      	b.n	e372 <smp_pairing_req+0x266>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e384:	2105      	movs	r1, #5
    e386:	4628      	mov	r0, r5
    e388:	f017 f8f6 	bl	25578 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    e38c:	2800      	cmp	r0, #0
    e38e:	d1f4      	bne.n	e37a <smp_pairing_req+0x26e>
    e390:	e7ef      	b.n	e372 <smp_pairing_req+0x266>
	switch (smp->method) {
    e392:	2906      	cmp	r1, #6
    e394:	d877      	bhi.n	e486 <smp_pairing_req+0x37a>
    e396:	e8df f001 	tbb	[pc, r1]
    e39a:	6c1b      	.short	0x6c1b
    e39c:	76767641 	.word	0x76767641
    e3a0:	04          	.byte	0x04
    e3a1:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    e3a2:	4e1d      	ldr	r6, [pc, #116]	; (e418 <smp_pairing_req+0x30c>)
    e3a4:	6833      	ldr	r3, [r6, #0]
    e3a6:	2b00      	cmp	r3, #0
    e3a8:	d078      	beq.n	e49c <smp_pairing_req+0x390>
    e3aa:	68db      	ldr	r3, [r3, #12]
    e3ac:	2b00      	cmp	r3, #0
    e3ae:	d075      	beq.n	e49c <smp_pairing_req+0x390>
			struct bt_conn_oob_info info = {
    e3b0:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e3b2:	210a      	movs	r1, #10
    e3b4:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
    e3b6:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e3ba:	f017 f8c6 	bl	2554a <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    e3be:	6833      	ldr	r3, [r6, #0]
    e3c0:	6820      	ldr	r0, [r4, #0]
    e3c2:	68db      	ldr	r3, [r3, #12]
    e3c4:	a901      	add	r1, sp, #4
    e3c6:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e3c8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e3cc:	2b00      	cmp	r3, #0
    e3ce:	d167      	bne.n	e4a0 <smp_pairing_req+0x394>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e3d0:	210f      	movs	r1, #15
    e3d2:	4628      	mov	r0, r5
    e3d4:	f017 f8d0 	bl	25578 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e3d8:	4607      	mov	r7, r0
    e3da:	2800      	cmp	r0, #0
    e3dc:	d160      	bne.n	e4a0 <smp_pairing_req+0x394>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e3de:	4e0e      	ldr	r6, [pc, #56]	; (e418 <smp_pairing_req+0x30c>)
    e3e0:	6833      	ldr	r3, [r6, #0]
    e3e2:	2b00      	cmp	r3, #0
    e3e4:	d05c      	beq.n	e4a0 <smp_pairing_req+0x394>
	    bt_auth && bt_auth->pairing_confirm) {
    e3e6:	695b      	ldr	r3, [r3, #20]
    e3e8:	2b00      	cmp	r3, #0
    e3ea:	d059      	beq.n	e4a0 <smp_pairing_req+0x394>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e3ec:	4628      	mov	r0, r5
    e3ee:	210a      	movs	r1, #10
    e3f0:	f017 f8ab 	bl	2554a <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    e3f4:	6833      	ldr	r3, [r6, #0]
    e3f6:	6820      	ldr	r0, [r4, #0]
    e3f8:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    e3fa:	4798      	blx	r3
		return 0;
    e3fc:	e68f      	b.n	e11e <smp_pairing_req+0x12>
    e3fe:	bf00      	nop
    e400:	2000f2b1 	.word	0x2000f2b1
    e404:	0002cb95 	.word	0x0002cb95
    e408:	00026fc8 	.word	0x00026fc8
    e40c:	000270b0 	.word	0x000270b0
    e410:	0002c7f4 	.word	0x0002c7f4
    e414:	0002cbae 	.word	0x0002cbae
    e418:	2000d6e8 	.word	0x2000d6e8
			if (bt_rand(&passkey, sizeof(passkey))) {
    e41c:	2104      	movs	r1, #4
    e41e:	eb0d 0001 	add.w	r0, sp, r1
    e422:	f004 fc2f 	bl	12c84 <bt_rand>
    e426:	2800      	cmp	r0, #0
    e428:	f47f ae97 	bne.w	e15a <smp_pairing_req+0x4e>
			passkey %= 1000000;
    e42c:	9b01      	ldr	r3, [sp, #4]
    e42e:	4a2f      	ldr	r2, [pc, #188]	; (e4ec <smp_pairing_req+0x3e0>)
		if (bt_auth && bt_auth->passkey_display) {
    e430:	4f2f      	ldr	r7, [pc, #188]	; (e4f0 <smp_pairing_req+0x3e4>)
			passkey %= 1000000;
    e432:	fbb3 f1f2 	udiv	r1, r3, r2
    e436:	fb02 3311 	mls	r3, r2, r1, r3
    e43a:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    e43c:	683b      	ldr	r3, [r7, #0]
    e43e:	b153      	cbz	r3, e456 <smp_pairing_req+0x34a>
    e440:	681b      	ldr	r3, [r3, #0]
    e442:	b143      	cbz	r3, e456 <smp_pairing_req+0x34a>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    e444:	210b      	movs	r1, #11
    e446:	4628      	mov	r0, r5
    e448:	f017 f87f 	bl	2554a <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    e44c:	683b      	ldr	r3, [r7, #0]
    e44e:	9901      	ldr	r1, [sp, #4]
    e450:	681b      	ldr	r3, [r3, #0]
    e452:	4630      	mov	r0, r6
    e454:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    e456:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    e458:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	dst[1] = val >> 8;
    e45c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    e460:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e462:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
    e466:	0a1b      	lsrs	r3, r3, #8
    e468:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    e46c:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
	if (ret) {
    e470:	e7aa      	b.n	e3c8 <smp_pairing_req+0x2bc>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e472:	4628      	mov	r0, r5
    e474:	210a      	movs	r1, #10
    e476:	f017 f868 	bl	2554a <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    e47a:	4b1d      	ldr	r3, [pc, #116]	; (e4f0 <smp_pairing_req+0x3e4>)
    e47c:	681b      	ldr	r3, [r3, #0]
    e47e:	4630      	mov	r0, r6
    e480:	685b      	ldr	r3, [r3, #4]
    e482:	4798      	blx	r3
	if (ret) {
    e484:	e7a0      	b.n	e3c8 <smp_pairing_req+0x2bc>
    e486:	4b1b      	ldr	r3, [pc, #108]	; (e4f4 <smp_pairing_req+0x3e8>)
    e488:	4a1b      	ldr	r2, [pc, #108]	; (e4f8 <smp_pairing_req+0x3ec>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e48a:	481c      	ldr	r0, [pc, #112]	; (e4fc <smp_pairing_req+0x3f0>)
    e48c:	1ad2      	subs	r2, r2, r3
    e48e:	08d2      	lsrs	r2, r2, #3
    e490:	0192      	lsls	r2, r2, #6
    e492:	f042 0201 	orr.w	r2, r2, #1
    e496:	f013 fb71 	bl	21b7c <log_1>
	if (ret) {
    e49a:	e65e      	b.n	e15a <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    e49c:	2702      	movs	r7, #2
    e49e:	e63e      	b.n	e11e <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    e4a0:	2103      	movs	r1, #3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    e4a2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e4a6:	f017 f850 	bl	2554a <atomic_set_bit>
	return send_pairing_rsp(smp);
    e4aa:	4620      	mov	r0, r4
}
    e4ac:	b002      	add	sp, #8
    e4ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    e4b2:	f017 b88a 	b.w	255ca <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e4b6:	f894 70c0 	ldrb.w	r7, [r4, #192]	; 0xc0
    e4ba:	b9a7      	cbnz	r7, e4e6 <smp_pairing_req+0x3da>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e4bc:	210f      	movs	r1, #15
    e4be:	4628      	mov	r0, r5
    e4c0:	f017 f85a 	bl	25578 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    e4c4:	b978      	cbnz	r0, e4e6 <smp_pairing_req+0x3da>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    e4c6:	f8df 8028 	ldr.w	r8, [pc, #40]	; e4f0 <smp_pairing_req+0x3e4>
    e4ca:	f8d8 3000 	ldr.w	r3, [r8]
    e4ce:	b153      	cbz	r3, e4e6 <smp_pairing_req+0x3da>
	    bt_auth && bt_auth->pairing_confirm) {
    e4d0:	695b      	ldr	r3, [r3, #20]
    e4d2:	b143      	cbz	r3, e4e6 <smp_pairing_req+0x3da>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e4d4:	4628      	mov	r0, r5
    e4d6:	210a      	movs	r1, #10
    e4d8:	f017 f837 	bl	2554a <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    e4dc:	f8d8 3000 	ldr.w	r3, [r8]
    e4e0:	4630      	mov	r0, r6
    e4e2:	695b      	ldr	r3, [r3, #20]
    e4e4:	e789      	b.n	e3fa <smp_pairing_req+0x2ee>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    e4e6:	210c      	movs	r1, #12
    e4e8:	e7db      	b.n	e4a2 <smp_pairing_req+0x396>
    e4ea:	bf00      	nop
    e4ec:	000f4240 	.word	0x000f4240
    e4f0:	2000d6e8 	.word	0x2000d6e8
    e4f4:	00026fc8 	.word	0x00026fc8
    e4f8:	000270b0 	.word	0x000270b0
    e4fc:	0002c821 	.word	0x0002c821

0000e500 <compute_and_check_and_send_slave_dhcheck>:
{
    e500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    e504:	2210      	movs	r2, #16
{
    e506:	b0a3      	sub	sp, #140	; 0x8c
    e508:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    e50a:	2100      	movs	r1, #0
    e50c:	eb0d 0002 	add.w	r0, sp, r2
    e510:	f015 fb5e 	bl	23bd0 <memset>
	switch (smp->method) {
    e514:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    e518:	2905      	cmp	r1, #5
    e51a:	f200 809a 	bhi.w	e652 <compute_and_check_and_send_slave_dhcheck+0x152>
    e51e:	e8df f001 	tbb	[pc, r1]
    e522:	0309      	.short	0x0309
    e524:	8f980903 	.word	0x8f980903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    e528:	2204      	movs	r2, #4
    e52a:	f504 71c8 	add.w	r1, r4, #400	; 0x190
    e52e:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    e530:	f015 fb23 	bl	23b7a <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    e534:	4b79      	ldr	r3, [pc, #484]	; (e71c <compute_and_check_and_send_slave_dhcheck+0x21c>)
		   &smp->chan.chan.conn->le.init_addr,
    e536:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    e53a:	aa14      	add	r2, sp, #80	; 0x50
    e53c:	f103 0630 	add.w	r6, r3, #48	; 0x30
    e540:	6818      	ldr	r0, [r3, #0]
    e542:	6859      	ldr	r1, [r3, #4]
    e544:	4615      	mov	r5, r2
    e546:	c503      	stmia	r5!, {r0, r1}
    e548:	3308      	adds	r3, #8
    e54a:	42b3      	cmp	r3, r6
    e54c:	462a      	mov	r2, r5
    e54e:	d1f7      	bne.n	e540 <compute_and_check_and_send_slave_dhcheck+0x40>
    e550:	6818      	ldr	r0, [r3, #0]
    e552:	791b      	ldrb	r3, [r3, #4]
    e554:	6028      	str	r0, [r5, #0]
    e556:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    e558:	ad0c      	add	r5, sp, #48	; 0x30
    e55a:	2220      	movs	r2, #32
    e55c:	f204 114f 	addw	r1, r4, #335	; 0x14f
    e560:	4628      	mov	r0, r5
    e562:	f016 ff3b 	bl	253dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    e566:	486e      	ldr	r0, [pc, #440]	; (e720 <compute_and_check_and_send_slave_dhcheck+0x220>)
    e568:	ab08      	add	r3, sp, #32
    e56a:	2220      	movs	r2, #32
    e56c:	4629      	mov	r1, r5
    e56e:	f016 ff4e 	bl	2540e <bt_smp_aes_cmac>
	if (err) {
    e572:	2800      	cmp	r0, #0
    e574:	f040 80c9 	bne.w	e70a <compute_and_check_and_send_slave_dhcheck+0x20a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    e578:	f104 07ef 	add.w	r7, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
    e57c:	2210      	movs	r2, #16
    e57e:	4639      	mov	r1, r7
    e580:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    e584:	f104 08df 	add.w	r8, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
    e588:	f016 ff28 	bl	253dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    e58c:	2210      	movs	r2, #16
    e58e:	4641      	mov	r1, r8
    e590:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    e594:	f016 ff22 	bl	253dc <sys_memcpy_swap>
	m[37] = a1->type;
    e598:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
    e59c:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    e5a0:	2206      	movs	r2, #6
    e5a2:	f109 0190 	add.w	r1, r9, #144	; 0x90
    e5a6:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    e5aa:	f016 ff17 	bl	253dc <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    e5ae:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
    e5b2:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
    e5b6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    e5ba:	2206      	movs	r2, #6
    e5bc:	f109 0197 	add.w	r1, r9, #151	; 0x97
    e5c0:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    e5c4:	f016 ff0a 	bl	253dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    e5c8:	4633      	mov	r3, r6
    e5ca:	2235      	movs	r2, #53	; 0x35
    e5cc:	a914      	add	r1, sp, #80	; 0x50
    e5ce:	a808      	add	r0, sp, #32
    e5d0:	f016 ff1d 	bl	2540e <bt_smp_aes_cmac>
	if (err) {
    e5d4:	2800      	cmp	r0, #0
    e5d6:	f040 8098 	bne.w	e70a <compute_and_check_and_send_slave_dhcheck+0x20a>
	sys_mem_swap(mackey, 16);
    e5da:	2110      	movs	r1, #16
    e5dc:	4630      	mov	r0, r6
    e5de:	f016 ff07 	bl	253f0 <sys_mem_swap>
		   smp->tk)) {
    e5e2:	f104 09ff 	add.w	r9, r4, #255	; 0xff
	m[0] = 0x01;
    e5e6:	2301      	movs	r3, #1
    e5e8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    e5ec:	2235      	movs	r2, #53	; 0x35
    e5ee:	464b      	mov	r3, r9
    e5f0:	a914      	add	r1, sp, #80	; 0x50
    e5f2:	a808      	add	r0, sp, #32
    e5f4:	f016 ff0b 	bl	2540e <bt_smp_aes_cmac>
	if (err) {
    e5f8:	2800      	cmp	r0, #0
    e5fa:	f040 8086 	bne.w	e70a <compute_and_check_and_send_slave_dhcheck+0x20a>
	sys_mem_swap(ltk, 16);
    e5fe:	2110      	movs	r1, #16
    e600:	4648      	mov	r0, r9
    e602:	f016 fef5 	bl	253f0 <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
    e606:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    e608:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
    e60a:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    e60e:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    e610:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    e614:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    e616:	e9cd 2300 	strd	r2, r3, [sp]
    e61a:	9102      	str	r1, [sp, #8]
    e61c:	ab04      	add	r3, sp, #16
    e61e:	463a      	mov	r2, r7
    e620:	4641      	mov	r1, r8
    e622:	4630      	mov	r0, r6
    e624:	f016 ff35 	bl	25492 <smp_f6>
    e628:	b1f8      	cbz	r0, e66a <compute_and_check_and_send_slave_dhcheck+0x16a>
    e62a:	493e      	ldr	r1, [pc, #248]	; (e724 <compute_and_check_and_send_slave_dhcheck+0x224>)
    e62c:	4b3e      	ldr	r3, [pc, #248]	; (e728 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate local DHKey check failed");
    e62e:	483f      	ldr	r0, [pc, #252]	; (e72c <compute_and_check_and_send_slave_dhcheck+0x22c>)
    e630:	1ac9      	subs	r1, r1, r3
    e632:	08c9      	lsrs	r1, r1, #3
    e634:	0189      	lsls	r1, r1, #6
    e636:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
    e63a:	f013 fa92 	bl	21b62 <log_0>
    e63e:	e012      	b.n	e666 <compute_and_check_and_send_slave_dhcheck+0x166>
		if (smp->oobd_remote) {
    e640:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    e644:	2900      	cmp	r1, #0
    e646:	f43f af75 	beq.w	e534 <compute_and_check_and_send_slave_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    e64a:	2210      	movs	r2, #16
    e64c:	eb0d 0002 	add.w	r0, sp, r2
    e650:	e76e      	b.n	e530 <compute_and_check_and_send_slave_dhcheck+0x30>
    e652:	4a34      	ldr	r2, [pc, #208]	; (e724 <compute_and_check_and_send_slave_dhcheck+0x224>)
    e654:	4b34      	ldr	r3, [pc, #208]	; (e728 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e656:	4836      	ldr	r0, [pc, #216]	; (e730 <compute_and_check_and_send_slave_dhcheck+0x230>)
    e658:	1ad2      	subs	r2, r2, r3
    e65a:	08d2      	lsrs	r2, r2, #3
    e65c:	0192      	lsls	r2, r2, #6
    e65e:	f042 0201 	orr.w	r2, r2, #1
    e662:	f013 fa8b 	bl	21b7c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    e666:	2008      	movs	r0, #8
    e668:	e04a      	b.n	e700 <compute_and_check_and_send_slave_dhcheck+0x200>
	if (smp->method == LE_SC_OOB) {
    e66a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e66e:	2b05      	cmp	r3, #5
    e670:	d107      	bne.n	e682 <compute_and_check_and_send_slave_dhcheck+0x182>
		if (smp->oobd_local) {
    e672:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
    e676:	2210      	movs	r2, #16
    e678:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    e67c:	b1d9      	cbz	r1, e6b6 <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    e67e:	f015 fa7c 	bl	23b7a <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    e682:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    e684:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    e686:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    e68a:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    e68c:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    e690:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    e692:	e9cd 2300 	strd	r2, r3, [sp]
    e696:	9102      	str	r1, [sp, #8]
    e698:	ab04      	add	r3, sp, #16
    e69a:	4642      	mov	r2, r8
    e69c:	4639      	mov	r1, r7
    e69e:	f016 fef8 	bl	25492 <smp_f6>
    e6a2:	b158      	cbz	r0, e6bc <compute_and_check_and_send_slave_dhcheck+0x1bc>
    e6a4:	491f      	ldr	r1, [pc, #124]	; (e724 <compute_and_check_and_send_slave_dhcheck+0x224>)
    e6a6:	4b20      	ldr	r3, [pc, #128]	; (e728 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate remote DHKey check failed");
    e6a8:	4822      	ldr	r0, [pc, #136]	; (e734 <compute_and_check_and_send_slave_dhcheck+0x234>)
    e6aa:	1ac9      	subs	r1, r1, r3
    e6ac:	08c9      	lsrs	r1, r1, #3
    e6ae:	0189      	lsls	r1, r1, #6
    e6b0:	f041 0101 	orr.w	r1, r1, #1
    e6b4:	e7c1      	b.n	e63a <compute_and_check_and_send_slave_dhcheck+0x13a>
			memset(r, 0, sizeof(r));
    e6b6:	f015 fa8b 	bl	23bd0 <memset>
    e6ba:	e7e2      	b.n	e682 <compute_and_check_and_send_slave_dhcheck+0x182>
	if (memcmp(smp->e, re, 16)) {
    e6bc:	4629      	mov	r1, r5
    e6be:	2210      	movs	r2, #16
    e6c0:	f204 106f 	addw	r0, r4, #367	; 0x16f
    e6c4:	f015 fa48 	bl	23b58 <memcmp>
    e6c8:	4605      	mov	r5, r0
    e6ca:	b9e0      	cbnz	r0, e706 <compute_and_check_and_send_slave_dhcheck+0x206>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    e6cc:	210d      	movs	r1, #13
    e6ce:	4620      	mov	r0, r4
    e6d0:	f016 ff5b 	bl	2558a <smp_create_pdu.constprop.0>
	if (!buf) {
    e6d4:	4606      	mov	r6, r0
    e6d6:	2800      	cmp	r0, #0
    e6d8:	d0c5      	beq.n	e666 <compute_and_check_and_send_slave_dhcheck+0x166>
    e6da:	2110      	movs	r1, #16
    e6dc:	3008      	adds	r0, #8
    e6de:	f017 faa0 	bl	25c22 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    e6e2:	2210      	movs	r2, #16
    e6e4:	a914      	add	r1, sp, #80	; 0x50
    e6e6:	f015 fa48 	bl	23b7a <memcpy>
	smp_send(smp, buf, NULL, NULL);
    e6ea:	462a      	mov	r2, r5
    e6ec:	4631      	mov	r1, r6
    e6ee:	4620      	mov	r0, r4
    e6f0:	f7ff fc32 	bl	df58 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    e6f4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e6f8:	2101      	movs	r1, #1
    e6fa:	f016 ff26 	bl	2554a <atomic_set_bit>
	return 0;
    e6fe:	4628      	mov	r0, r5
}
    e700:	b023      	add	sp, #140	; 0x8c
    e702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    e706:	200b      	movs	r0, #11
    e708:	e7fa      	b.n	e700 <compute_and_check_and_send_slave_dhcheck+0x200>
    e70a:	4906      	ldr	r1, [pc, #24]	; (e724 <compute_and_check_and_send_slave_dhcheck+0x224>)
    e70c:	4b06      	ldr	r3, [pc, #24]	; (e728 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate LTK failed");
    e70e:	480a      	ldr	r0, [pc, #40]	; (e738 <compute_and_check_and_send_slave_dhcheck+0x238>)
    e710:	1ac9      	subs	r1, r1, r3
    e712:	08c9      	lsrs	r1, r1, #3
    e714:	0189      	lsls	r1, r1, #6
    e716:	f041 0101 	orr.w	r1, r1, #1
    e71a:	e78e      	b.n	e63a <compute_and_check_and_send_slave_dhcheck+0x13a>
    e71c:	00027204 	.word	0x00027204
    e720:	0002cbc7 	.word	0x0002cbc7
    e724:	000270b0 	.word	0x000270b0
    e728:	00026fc8 	.word	0x00026fc8
    e72c:	0002c83d 	.word	0x0002c83d
    e730:	0002c821 	.word	0x0002c821
    e734:	0002c860 	.word	0x0002c860
    e738:	0002c884 	.word	0x0002c884

0000e73c <smp_send_pairing_confirm>:
{
    e73c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    e73e:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
    e742:	2c02      	cmp	r4, #2
{
    e744:	4606      	mov	r6, r0
	switch (smp->method) {
    e746:	d823      	bhi.n	e790 <smp_send_pairing_confirm+0x54>
    e748:	b144      	cbz	r4, e75c <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    e74a:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    e74e:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    e752:	40dc      	lsrs	r4, r3
    e754:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    e758:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    e75c:	2103      	movs	r1, #3
    e75e:	4630      	mov	r0, r6
    e760:	f016 ff13 	bl	2558a <smp_create_pdu.constprop.0>
	if (!buf) {
    e764:	4605      	mov	r5, r0
    e766:	b300      	cbz	r0, e7aa <smp_send_pairing_confirm+0x6e>
    e768:	2110      	movs	r1, #16
    e76a:	3008      	adds	r0, #8
    e76c:	f017 fa59 	bl	25c22 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    e770:	9000      	str	r0, [sp, #0]
    e772:	4816      	ldr	r0, [pc, #88]	; (e7cc <smp_send_pairing_confirm+0x90>)
    e774:	4623      	mov	r3, r4
    e776:	6800      	ldr	r0, [r0, #0]
    e778:	f106 02df 	add.w	r2, r6, #223	; 0xdf
    e77c:	f206 110f 	addw	r1, r6, #271	; 0x10f
    e780:	f016 fe61 	bl	25446 <smp_f4>
    e784:	4604      	mov	r4, r0
    e786:	b1a0      	cbz	r0, e7b2 <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
    e788:	4628      	mov	r0, r5
    e78a:	f00e fb47 	bl	1ce1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    e78e:	e00c      	b.n	e7aa <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
    e790:	2c03      	cmp	r4, #3
    e792:	d00c      	beq.n	e7ae <smp_send_pairing_confirm+0x72>
    e794:	4a0e      	ldr	r2, [pc, #56]	; (e7d0 <smp_send_pairing_confirm+0x94>)
    e796:	4b0f      	ldr	r3, [pc, #60]	; (e7d4 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e798:	480f      	ldr	r0, [pc, #60]	; (e7d8 <smp_send_pairing_confirm+0x9c>)
    e79a:	1ad2      	subs	r2, r2, r3
    e79c:	08d2      	lsrs	r2, r2, #3
    e79e:	0192      	lsls	r2, r2, #6
    e7a0:	f042 0201 	orr.w	r2, r2, #1
    e7a4:	4621      	mov	r1, r4
    e7a6:	f013 f9e9 	bl	21b7c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    e7aa:	2008      	movs	r0, #8
    e7ac:	e00c      	b.n	e7c8 <smp_send_pairing_confirm+0x8c>
	switch (smp->method) {
    e7ae:	2400      	movs	r4, #0
    e7b0:	e7d4      	b.n	e75c <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
    e7b2:	4602      	mov	r2, r0
    e7b4:	4629      	mov	r1, r5
    e7b6:	4630      	mov	r0, r6
    e7b8:	f7ff fbce 	bl	df58 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    e7bc:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
    e7c0:	4621      	mov	r1, r4
    e7c2:	f016 feb3 	bl	2552c <atomic_clear_bit>
	return 0;
    e7c6:	4620      	mov	r0, r4
}
    e7c8:	b002      	add	sp, #8
    e7ca:	bd70      	pop	{r4, r5, r6, pc}
    e7cc:	2000d77c 	.word	0x2000d77c
    e7d0:	000270b0 	.word	0x000270b0
    e7d4:	00026fc8 	.word	0x00026fc8
    e7d8:	0002c821 	.word	0x0002c821

0000e7dc <smp_public_key_slave>:
{
    e7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    e7e0:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
{
    e7e4:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    e7e6:	210e      	movs	r1, #14
    e7e8:	4630      	mov	r0, r6
    e7ea:	f016 fec5 	bl	25578 <atomic_test_bit>
    e7ee:	b998      	cbnz	r0, e818 <smp_public_key_slave+0x3c>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
    e7f0:	4b4c      	ldr	r3, [pc, #304]	; (e924 <smp_public_key_slave+0x148>)
    e7f2:	2240      	movs	r2, #64	; 0x40
    e7f4:	6819      	ldr	r1, [r3, #0]
    e7f6:	f204 100f 	addw	r0, r4, #271	; 0x10f
    e7fa:	f015 f9ad 	bl	23b58 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    e7fe:	b958      	cbnz	r0, e818 <smp_public_key_slave+0x3c>
    e800:	4949      	ldr	r1, [pc, #292]	; (e928 <smp_public_key_slave+0x14c>)
    e802:	4b4a      	ldr	r3, [pc, #296]	; (e92c <smp_public_key_slave+0x150>)
		BT_WARN("Remote is using identical public key");
    e804:	484a      	ldr	r0, [pc, #296]	; (e930 <smp_public_key_slave+0x154>)
    e806:	1ac9      	subs	r1, r1, r3
    e808:	08c9      	lsrs	r1, r1, #3
    e80a:	0189      	lsls	r1, r1, #6
    e80c:	f041 0102 	orr.w	r1, r1, #2
    e810:	f013 f9a7 	bl	21b62 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    e814:	2008      	movs	r0, #8
    e816:	e031      	b.n	e87c <smp_public_key_slave+0xa0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    e818:	210c      	movs	r1, #12
    e81a:	4620      	mov	r0, r4
    e81c:	f016 feb5 	bl	2558a <smp_create_pdu.constprop.0>
	if (!req_buf) {
    e820:	4605      	mov	r5, r0
    e822:	2800      	cmp	r0, #0
    e824:	d0f6      	beq.n	e814 <smp_public_key_slave+0x38>
    e826:	2140      	movs	r1, #64	; 0x40
    e828:	3008      	adds	r0, #8
    e82a:	f017 f9fa 	bl	25c22 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    e82e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; e924 <smp_public_key_slave+0x148>
    e832:	2220      	movs	r2, #32
    e834:	f8d8 1000 	ldr.w	r1, [r8]
    e838:	4607      	mov	r7, r0
    e83a:	f015 f99e 	bl	23b7a <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    e83e:	f8d8 1000 	ldr.w	r1, [r8]
    e842:	2220      	movs	r2, #32
    e844:	4411      	add	r1, r2
    e846:	18b8      	adds	r0, r7, r2
    e848:	f015 f997 	bl	23b7a <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    e84c:	4629      	mov	r1, r5
    e84e:	2200      	movs	r2, #0
    e850:	4620      	mov	r0, r4
    e852:	f7ff fb81 	bl	df58 <smp_send.constprop.0>
	switch (smp->method) {
    e856:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    e85a:	2905      	cmp	r1, #5
    e85c:	d854      	bhi.n	e908 <smp_public_key_slave+0x12c>
    e85e:	e8df f001 	tbb	[pc, r1]
    e862:	3603      	.short	0x3603
    e864:	5153030f 	.word	0x5153030f
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    e868:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e86c:	2104      	movs	r1, #4
    e86e:	f016 fe6c 	bl	2554a <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    e872:	4620      	mov	r0, r4
    e874:	f7ff ff62 	bl	e73c <smp_send_pairing_confirm>
		if (err) {
    e878:	2800      	cmp	r0, #0
    e87a:	d036      	beq.n	e8ea <smp_public_key_slave+0x10e>
}
    e87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    e880:	2104      	movs	r1, #4
    e882:	f504 70c8 	add.w	r0, r4, #400	; 0x190
    e886:	f004 f9fd 	bl	12c84 <bt_rand>
    e88a:	2800      	cmp	r0, #0
    e88c:	d1c2      	bne.n	e814 <smp_public_key_slave+0x38>
		smp->passkey %= 1000000;
    e88e:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    e892:	4a28      	ldr	r2, [pc, #160]	; (e934 <smp_public_key_slave+0x158>)
	if (bt_auth && bt_auth->passkey_display) {
    e894:	4d28      	ldr	r5, [pc, #160]	; (e938 <smp_public_key_slave+0x15c>)
		smp->passkey %= 1000000;
    e896:	fbb3 f1f2 	udiv	r1, r3, r2
    e89a:	fb02 3311 	mls	r3, r2, r1, r3
    e89e:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    e8a2:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    e8a4:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    e8a8:	b15b      	cbz	r3, e8c2 <smp_public_key_slave+0xe6>
    e8aa:	681b      	ldr	r3, [r3, #0]
    e8ac:	b14b      	cbz	r3, e8c2 <smp_public_key_slave+0xe6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    e8ae:	210b      	movs	r1, #11
    e8b0:	4630      	mov	r0, r6
    e8b2:	f016 fe4a 	bl	2554a <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    e8b6:	682b      	ldr	r3, [r5, #0]
    e8b8:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    e8bc:	681b      	ldr	r3, [r3, #0]
    e8be:	6820      	ldr	r0, [r4, #0]
    e8c0:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    e8c2:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    e8c4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e8c8:	f016 fe3f 	bl	2554a <atomic_set_bit>
		break;
    e8cc:	e00d      	b.n	e8ea <smp_public_key_slave+0x10e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    e8ce:	2103      	movs	r1, #3
    e8d0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e8d4:	f016 fe39 	bl	2554a <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e8d8:	4630      	mov	r0, r6
    e8da:	210a      	movs	r1, #10
    e8dc:	f016 fe35 	bl	2554a <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    e8e0:	4b15      	ldr	r3, [pc, #84]	; (e938 <smp_public_key_slave+0x15c>)
    e8e2:	6820      	ldr	r0, [r4, #0]
    e8e4:	681b      	ldr	r3, [r3, #0]
    e8e6:	685b      	ldr	r3, [r3, #4]
    e8e8:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    e8ea:	4630      	mov	r0, r6
    e8ec:	2107      	movs	r1, #7
    e8ee:	f016 fe2c 	bl	2554a <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    e8f2:	2008      	movs	r0, #8
    e8f4:	f7ff fb8c 	bl	e010 <smp_find>
    e8f8:	b988      	cbnz	r0, e91e <smp_public_key_slave+0x142>
		return smp_dhkey_generate(smp);
    e8fa:	4620      	mov	r0, r4
}
    e8fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
    e900:	f7ff bb60 	b.w	dfc4 <smp_dhkey_generate>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    e904:	2104      	movs	r1, #4
    e906:	e7dd      	b.n	e8c4 <smp_public_key_slave+0xe8>
    e908:	4b08      	ldr	r3, [pc, #32]	; (e92c <smp_public_key_slave+0x150>)
    e90a:	4a07      	ldr	r2, [pc, #28]	; (e928 <smp_public_key_slave+0x14c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e90c:	480b      	ldr	r0, [pc, #44]	; (e93c <smp_public_key_slave+0x160>)
    e90e:	1ad2      	subs	r2, r2, r3
    e910:	08d2      	lsrs	r2, r2, #3
    e912:	0192      	lsls	r2, r2, #6
    e914:	f042 0201 	orr.w	r2, r2, #1
    e918:	f013 f930 	bl	21b7c <log_1>
    e91c:	e77a      	b.n	e814 <smp_public_key_slave+0x38>
	return 0;
    e91e:	2000      	movs	r0, #0
    e920:	e7ac      	b.n	e87c <smp_public_key_slave+0xa0>
    e922:	bf00      	nop
    e924:	2000d77c 	.word	0x2000d77c
    e928:	000270b0 	.word	0x000270b0
    e92c:	00026fc8 	.word	0x00026fc8
    e930:	0002c899 	.word	0x0002c899
    e934:	000f4240 	.word	0x000f4240
    e938:	2000d6e8 	.word	0x2000d6e8
    e93c:	0002c821 	.word	0x0002c821

0000e940 <smp_public_key>:
{
    e940:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    e942:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    e944:	f200 150f 	addw	r5, r0, #271	; 0x10f
{
    e948:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    e94a:	2220      	movs	r2, #32
    e94c:	4631      	mov	r1, r6
    e94e:	4628      	mov	r0, r5
    e950:	f015 f913 	bl	23b7a <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    e954:	2220      	movs	r2, #32
    e956:	18b1      	adds	r1, r6, r2
    e958:	f204 102f 	addw	r0, r4, #303	; 0x12f
    e95c:	f015 f90d 	bl	23b7a <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    e960:	491e      	ldr	r1, [pc, #120]	; (e9dc <smp_public_key+0x9c>)
    e962:	2240      	movs	r2, #64	; 0x40
    e964:	4628      	mov	r0, r5
    e966:	f015 f8f7 	bl	23b58 <memcmp>
    e96a:	b148      	cbz	r0, e980 <smp_public_key+0x40>
	if (!sc_public_key) {
    e96c:	4b1c      	ldr	r3, [pc, #112]	; (e9e0 <smp_public_key+0xa0>)
    e96e:	681d      	ldr	r5, [r3, #0]
    e970:	bb75      	cbnz	r5, e9d0 <smp_public_key+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    e972:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e976:	2106      	movs	r1, #6
    e978:	f016 fde7 	bl	2554a <atomic_set_bit>
		return 0;
    e97c:	4628      	mov	r0, r5
    e97e:	e026      	b.n	e9ce <smp_public_key+0x8e>
    e980:	4b18      	ldr	r3, [pc, #96]	; (e9e4 <smp_public_key+0xa4>)
    e982:	4919      	ldr	r1, [pc, #100]	; (e9e8 <smp_public_key+0xa8>)
		BT_INFO("Remote is using Debug Public key");
    e984:	4819      	ldr	r0, [pc, #100]	; (e9ec <smp_public_key+0xac>)
    e986:	1ac9      	subs	r1, r1, r3
    e988:	08c9      	lsrs	r1, r1, #3
    e98a:	0189      	lsls	r1, r1, #6
    e98c:	f041 0103 	orr.w	r1, r1, #3
    e990:	f013 f8e7 	bl	21b62 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    e994:	210e      	movs	r1, #14
    e996:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e99a:	f016 fdd6 	bl	2554a <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    e99e:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    e9a0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e9a4:	b933      	cbnz	r3, e9b4 <smp_public_key+0x74>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e9a6:	7a28      	ldrb	r0, [r5, #8]
    e9a8:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e9ac:	f001 f83a 	bl	fa24 <bt_keys_get_addr>
    e9b0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    e9b4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e9b8:	2b00      	cmp	r3, #0
    e9ba:	d0d7      	beq.n	e96c <smp_public_key+0x2c>
    e9bc:	89da      	ldrh	r2, [r3, #14]
    e9be:	f002 0224 	and.w	r2, r2, #36	; 0x24
    e9c2:	2a00      	cmp	r2, #0
    e9c4:	d0d2      	beq.n	e96c <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    e9c6:	7b5b      	ldrb	r3, [r3, #13]
    e9c8:	079b      	lsls	r3, r3, #30
    e9ca:	d4cf      	bmi.n	e96c <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    e9cc:	2003      	movs	r0, #3
}
    e9ce:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
    e9d0:	4620      	mov	r0, r4
}
    e9d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
    e9d6:	f7ff bf01 	b.w	e7dc <smp_public_key_slave>
    e9da:	bf00      	nop
    e9dc:	0002cbd7 	.word	0x0002cbd7
    e9e0:	2000d77c 	.word	0x2000d77c
    e9e4:	00026fc8 	.word	0x00026fc8
    e9e8:	000270b0 	.word	0x000270b0
    e9ec:	0002c8be 	.word	0x0002c8be

0000e9f0 <bt_smp_connected>:
{
    e9f0:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    e9f2:	2230      	movs	r2, #48	; 0x30
    e9f4:	4604      	mov	r4, r0
    e9f6:	2100      	movs	r1, #0
    e9f8:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    e9fc:	f015 f8e8 	bl	23bd0 <memset>
    ea00:	4b03      	ldr	r3, [pc, #12]	; (ea10 <bt_smp_connected+0x20>)
    ea02:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
	smp_reset(smp);
    ea06:	4620      	mov	r0, r4
}
    ea08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    ea0c:	f016 be50 	b.w	256b0 <smp_reset>
    ea10:	0000f89d 	.word	0x0000f89d

0000ea14 <smp_pairing_confirm>:
{
    ea14:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    ea16:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    ea18:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
    ea1c:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    ea1e:	210b      	movs	r1, #11
    ea20:	4628      	mov	r0, r5
    ea22:	f016 fd83 	bl	2552c <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    ea26:	4631      	mov	r1, r6
    ea28:	2210      	movs	r2, #16
    ea2a:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    ea2e:	f015 f8a4 	bl	23b7a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ea32:	2105      	movs	r1, #5
    ea34:	4628      	mov	r0, r5
    ea36:	f016 fd9f 	bl	25578 <atomic_test_bit>
    ea3a:	b920      	cbnz	r0, ea46 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
    ea3c:	4620      	mov	r0, r4
}
    ea3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    ea42:	f016 beb5 	b.w	257b0 <legacy_pairing_confirm>
	switch (smp->method) {
    ea46:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    ea4a:	2901      	cmp	r1, #1
    ea4c:	d00b      	beq.n	ea66 <smp_pairing_confirm+0x52>
    ea4e:	2902      	cmp	r1, #2
    ea50:	d115      	bne.n	ea7e <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ea52:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ea56:	2104      	movs	r1, #4
    ea58:	f016 fd77 	bl	2554a <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    ea5c:	4620      	mov	r0, r4
}
    ea5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    ea62:	f7ff be6b 	b.w	e73c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    ea66:	210a      	movs	r1, #10
    ea68:	4628      	mov	r0, r5
    ea6a:	f016 fd85 	bl	25578 <atomic_test_bit>
    ea6e:	2800      	cmp	r0, #0
    ea70:	d0ef      	beq.n	ea52 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    ea72:	4628      	mov	r0, r5
    ea74:	2100      	movs	r1, #0
    ea76:	f016 fd68 	bl	2554a <atomic_set_bit>
			return 0;
    ea7a:	2000      	movs	r0, #0
}
    ea7c:	bd70      	pop	{r4, r5, r6, pc}
    ea7e:	4b06      	ldr	r3, [pc, #24]	; (ea98 <smp_pairing_confirm+0x84>)
    ea80:	4a06      	ldr	r2, [pc, #24]	; (ea9c <smp_pairing_confirm+0x88>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ea82:	4807      	ldr	r0, [pc, #28]	; (eaa0 <smp_pairing_confirm+0x8c>)
    ea84:	1ad2      	subs	r2, r2, r3
    ea86:	08d2      	lsrs	r2, r2, #3
    ea88:	0192      	lsls	r2, r2, #6
    ea8a:	f042 0201 	orr.w	r2, r2, #1
    ea8e:	f013 f875 	bl	21b7c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    ea92:	2008      	movs	r0, #8
    ea94:	e7f2      	b.n	ea7c <smp_pairing_confirm+0x68>
    ea96:	bf00      	nop
    ea98:	00026fc8 	.word	0x00026fc8
    ea9c:	000270b0 	.word	0x000270b0
    eaa0:	0002c821 	.word	0x0002c821

0000eaa4 <smp_pairing_random>:
{
    eaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eaa8:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    eaaa:	f100 07ef 	add.w	r7, r0, #239	; 0xef
    eaae:	6889      	ldr	r1, [r1, #8]
{
    eab0:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    eab2:	2210      	movs	r2, #16
    eab4:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eab6:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    eaba:	f015 f85e 	bl	23b7a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eabe:	2105      	movs	r1, #5
    eac0:	4630      	mov	r0, r6
    eac2:	f016 fd59 	bl	25578 <atomic_test_bit>
    eac6:	2800      	cmp	r0, #0
    eac8:	d146      	bne.n	eb58 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
    eaca:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    eacc:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    eace:	f858 3bff 	ldr.w	r3, [r8], #255
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    ead2:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    ead4:	f103 0296 	add.w	r2, r3, #150	; 0x96
    ead8:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    eada:	9201      	str	r2, [sp, #4]
    eadc:	9300      	str	r3, [sp, #0]
    eade:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
    eae2:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    eae6:	4639      	mov	r1, r7
    eae8:	4640      	mov	r0, r8
    eaea:	f016 fe06 	bl	256fa <smp_c1>
	if (err) {
    eaee:	bb18      	cbnz	r0, eb38 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    eaf0:	2210      	movs	r2, #16
    eaf2:	4629      	mov	r1, r5
    eaf4:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    eaf8:	f015 f82e 	bl	23b58 <memcmp>
    eafc:	2800      	cmp	r0, #0
    eafe:	f040 8096 	bne.w	ec2e <smp_pairing_random+0x18a>
	memcpy(out, r2, 8);
    eb02:	2208      	movs	r2, #8
    eb04:	4639      	mov	r1, r7
    eb06:	4628      	mov	r0, r5
    eb08:	f015 f837 	bl	23b7a <memcpy>
	memcpy(out + 8, r1, 8);
    eb0c:	2208      	movs	r2, #8
    eb0e:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    eb12:	a80c      	add	r0, sp, #48	; 0x30
    eb14:	f015 f831 	bl	23b7a <memcpy>
	return bt_encrypt_le(k, out, out);
    eb18:	462a      	mov	r2, r5
    eb1a:	4629      	mov	r1, r5
    eb1c:	4640      	mov	r0, r8
    eb1e:	f004 f8b3 	bl	12c88 <bt_encrypt_le>
		if (err) {
    eb22:	b158      	cbz	r0, eb3c <smp_pairing_random+0x98>
    eb24:	4976      	ldr	r1, [pc, #472]	; (ed00 <smp_pairing_random+0x25c>)
    eb26:	4b77      	ldr	r3, [pc, #476]	; (ed04 <smp_pairing_random+0x260>)
			BT_ERR("Calculate STK failed");
    eb28:	4877      	ldr	r0, [pc, #476]	; (ed08 <smp_pairing_random+0x264>)
    eb2a:	1ac9      	subs	r1, r1, r3
    eb2c:	08c9      	lsrs	r1, r1, #3
    eb2e:	0189      	lsls	r1, r1, #6
    eb30:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
    eb34:	f013 f815 	bl	21b62 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    eb38:	2508      	movs	r5, #8
    eb3a:	e079      	b.n	ec30 <smp_pairing_random+0x18c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    eb3c:	4629      	mov	r1, r5
    eb3e:	2210      	movs	r2, #16
    eb40:	4640      	mov	r0, r8
    eb42:	f015 f81a 	bl	23b7a <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    eb46:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    eb48:	4630      	mov	r0, r6
    eb4a:	f016 fcfe 	bl	2554a <atomic_set_bit>
	return smp_send_pairing_random(smp);
    eb4e:	4620      	mov	r0, r4
    eb50:	f016 fd54 	bl	255fc <smp_send_pairing_random>
    eb54:	4605      	mov	r5, r0
    eb56:	e06b      	b.n	ec30 <smp_pairing_random+0x18c>
	switch (smp->method) {
    eb58:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    eb5c:	2905      	cmp	r1, #5
    eb5e:	f200 80af 	bhi.w	ecc0 <smp_pairing_random+0x21c>
    eb62:	e8df f001 	tbb	[pc, r1]
    eb66:	413a      	.short	0x413a
    eb68:	8ead0341 	.word	0x8ead0341
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    eb6c:	4b67      	ldr	r3, [pc, #412]	; (ed0c <smp_pairing_random+0x268>)
    eb6e:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    eb70:	2220      	movs	r2, #32
    eb72:	f204 110f 	addw	r1, r4, #271	; 0x10f
    eb76:	a80a      	add	r0, sp, #40	; 0x28
    eb78:	f016 fc30 	bl	253dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    eb7c:	2220      	movs	r2, #32
    eb7e:	4629      	mov	r1, r5
    eb80:	a812      	add	r0, sp, #72	; 0x48
    eb82:	f016 fc2b 	bl	253dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    eb86:	2210      	movs	r2, #16
    eb88:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    eb8c:	a81a      	add	r0, sp, #104	; 0x68
    eb8e:	f016 fc25 	bl	253dc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    eb92:	2210      	movs	r2, #16
    eb94:	4639      	mov	r1, r7
    eb96:	a806      	add	r0, sp, #24
    eb98:	f016 fc20 	bl	253dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    eb9c:	ab06      	add	r3, sp, #24
    eb9e:	2250      	movs	r2, #80	; 0x50
    eba0:	a90a      	add	r1, sp, #40	; 0x28
    eba2:	4618      	mov	r0, r3
    eba4:	f016 fc33 	bl	2540e <bt_smp_aes_cmac>
	if (err) {
    eba8:	2800      	cmp	r0, #0
    ebaa:	d1c5      	bne.n	eb38 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
    ebac:	2204      	movs	r2, #4
    ebae:	a909      	add	r1, sp, #36	; 0x24
    ebb0:	a805      	add	r0, sp, #20
    ebb2:	f014 ffe2 	bl	23b7a <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    ebb6:	9b05      	ldr	r3, [sp, #20]
    ebb8:	4a55      	ldr	r2, [pc, #340]	; (ed10 <smp_pairing_random+0x26c>)
    ebba:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ebbc:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    ebbe:	fbb3 f1f2 	udiv	r1, r3, r2
    ebc2:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ebc6:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    ebc8:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ebca:	f016 fcbe 	bl	2554a <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    ebce:	4b51      	ldr	r3, [pc, #324]	; (ed14 <smp_pairing_random+0x270>)
    ebd0:	9905      	ldr	r1, [sp, #20]
    ebd2:	681b      	ldr	r3, [r3, #0]
    ebd4:	6820      	ldr	r0, [r4, #0]
    ebd6:	689b      	ldr	r3, [r3, #8]
    ebd8:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    ebda:	210d      	movs	r1, #13
    ebdc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ebe0:	f016 fcb3 	bl	2554a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    ebe4:	2110      	movs	r1, #16
    ebe6:	e7af      	b.n	eb48 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ebe8:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    ebec:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    ebf0:	4946      	ldr	r1, [pc, #280]	; (ed0c <smp_pairing_random+0x268>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ebf2:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    ebf4:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ebf6:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    ebfa:	9500      	str	r5, [sp, #0]
    ebfc:	6809      	ldr	r1, [r1, #0]
    ebfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ec02:	463a      	mov	r2, r7
    ec04:	f204 100f 	addw	r0, r4, #271	; 0x10f
    ec08:	f016 fc1d 	bl	25446 <smp_f4>
    ec0c:	b140      	cbz	r0, ec20 <smp_pairing_random+0x17c>
    ec0e:	493c      	ldr	r1, [pc, #240]	; (ed00 <smp_pairing_random+0x25c>)
    ec10:	4b3c      	ldr	r3, [pc, #240]	; (ed04 <smp_pairing_random+0x260>)
		BT_ERR("Calculate confirm failed");
    ec12:	4841      	ldr	r0, [pc, #260]	; (ed18 <smp_pairing_random+0x274>)
    ec14:	1ac9      	subs	r1, r1, r3
    ec16:	08c9      	lsrs	r1, r1, #3
    ec18:	0189      	lsls	r1, r1, #6
    ec1a:	f041 0101 	orr.w	r1, r1, #1
    ec1e:	e789      	b.n	eb34 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
    ec20:	2210      	movs	r2, #16
    ec22:	4629      	mov	r1, r5
    ec24:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    ec28:	f014 ff96 	bl	23b58 <memcmp>
    ec2c:	b120      	cbz	r0, ec38 <smp_pairing_random+0x194>
		return BT_SMP_ERR_CONFIRM_FAILED;
    ec2e:	2504      	movs	r5, #4
}
    ec30:	4628      	mov	r0, r5
    ec32:	b01e      	add	sp, #120	; 0x78
    ec34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    ec38:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    ec3c:	2103      	movs	r1, #3
    ec3e:	4638      	mov	r0, r7
    ec40:	f016 fc83 	bl	2554a <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    ec44:	4620      	mov	r0, r4
    ec46:	f016 fcd9 	bl	255fc <smp_send_pairing_random>
		if (err) {
    ec4a:	4605      	mov	r5, r0
    ec4c:	2800      	cmp	r0, #0
    ec4e:	d1ef      	bne.n	ec30 <smp_pairing_random+0x18c>
		smp->passkey_round++;
    ec50:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    ec54:	3301      	adds	r3, #1
    ec56:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    ec58:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    ec5a:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
    ec5e:	d108      	bne.n	ec72 <smp_pairing_random+0x1ce>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    ec60:	4638      	mov	r0, r7
    ec62:	210d      	movs	r1, #13
    ec64:	f016 fc71 	bl	2554a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    ec68:	2110      	movs	r1, #16
    ec6a:	4630      	mov	r0, r6
    ec6c:	f016 fc6d 	bl	2554a <atomic_set_bit>
			return 0;
    ec70:	e7de      	b.n	ec30 <smp_pairing_random+0x18c>
		if (bt_rand(smp->prnd, 16)) {
    ec72:	2110      	movs	r1, #16
    ec74:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    ec78:	f004 f804 	bl	12c84 <bt_rand>
    ec7c:	2800      	cmp	r0, #0
    ec7e:	d0d7      	beq.n	ec30 <smp_pairing_random+0x18c>
    ec80:	e75a      	b.n	eb38 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
    ec82:	2110      	movs	r1, #16
    ec84:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    ec88:	f003 fffc 	bl	12c84 <bt_rand>
    ec8c:	2800      	cmp	r0, #0
    ec8e:	f47f af53 	bne.w	eb38 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
    ec92:	4f20      	ldr	r7, [pc, #128]	; (ed14 <smp_pairing_random+0x270>)
    ec94:	683b      	ldr	r3, [r7, #0]
    ec96:	b1f3      	cbz	r3, ecd6 <smp_pairing_random+0x232>
    ec98:	68db      	ldr	r3, [r3, #12]
    ec9a:	b1e3      	cbz	r3, ecd6 <smp_pairing_random+0x232>
			struct bt_conn_oob_info info = {
    ec9c:	4b1f      	ldr	r3, [pc, #124]	; (ed1c <smp_pairing_random+0x278>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    ec9e:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			struct bt_conn_oob_info info = {
    eca2:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    eca6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    ecaa:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    ecae:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    ecb0:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    ecb4:	d411      	bmi.n	ecda <smp_pairing_random+0x236>
				     BT_CONN_OOB_BOTH_PEERS :
    ecb6:	2b00      	cmp	r3, #0
    ecb8:	bf0c      	ite	eq
    ecba:	2003      	moveq	r0, #3
    ecbc:	2001      	movne	r0, #1
    ecbe:	e00f      	b.n	ece0 <smp_pairing_random+0x23c>
    ecc0:	4b10      	ldr	r3, [pc, #64]	; (ed04 <smp_pairing_random+0x260>)
    ecc2:	4a0f      	ldr	r2, [pc, #60]	; (ed00 <smp_pairing_random+0x25c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ecc4:	4816      	ldr	r0, [pc, #88]	; (ed20 <smp_pairing_random+0x27c>)
    ecc6:	1ad2      	subs	r2, r2, r3
    ecc8:	08d2      	lsrs	r2, r2, #3
    ecca:	0192      	lsls	r2, r2, #6
    eccc:	f042 0201 	orr.w	r2, r2, #1
    ecd0:	f012 ff54 	bl	21b7c <log_1>
    ecd4:	e730      	b.n	eb38 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    ecd6:	2502      	movs	r5, #2
    ecd8:	e7aa      	b.n	ec30 <smp_pairing_random+0x18c>
				     BT_CONN_OOB_BOTH_PEERS :
    ecda:	2b00      	cmp	r3, #0
    ecdc:	bf18      	it	ne
    ecde:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    ece0:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    ece2:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    ece6:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    ecea:	4630      	mov	r0, r6
    ecec:	210c      	movs	r1, #12
    ecee:	f016 fc2c 	bl	2554a <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    ecf2:	683b      	ldr	r3, [r7, #0]
    ecf4:	6820      	ldr	r0, [r4, #0]
    ecf6:	68db      	ldr	r3, [r3, #12]
    ecf8:	a90a      	add	r1, sp, #40	; 0x28
    ecfa:	4798      	blx	r3
			return 0;
    ecfc:	e798      	b.n	ec30 <smp_pairing_random+0x18c>
    ecfe:	bf00      	nop
    ed00:	000270b0 	.word	0x000270b0
    ed04:	00026fc8 	.word	0x00026fc8
    ed08:	0002c8df 	.word	0x0002c8df
    ed0c:	2000d77c 	.word	0x2000d77c
    ed10:	000f4240 	.word	0x000f4240
    ed14:	2000d6e8 	.word	0x2000d6e8
    ed18:	0002c8f4 	.word	0x0002c8f4
    ed1c:	00027204 	.word	0x00027204
    ed20:	0002c821 	.word	0x0002c821

0000ed24 <bt_smp_sign_verify>:
{
    ed24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return buf->data + buf->len;
    ed26:	898b      	ldrh	r3, [r1, #12]
    ed28:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    ed2a:	6889      	ldr	r1, [r1, #8]
{
    ed2c:	4606      	mov	r6, r0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    ed2e:	3b0c      	subs	r3, #12
    ed30:	4419      	add	r1, r3
    ed32:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    ed34:	f106 0588 	add.w	r5, r6, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    ed38:	a801      	add	r0, sp, #4
    ed3a:	f014 ff1e 	bl	23b7a <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    ed3e:	7a31      	ldrb	r1, [r6, #8]
    ed40:	462a      	mov	r2, r5
    ed42:	2010      	movs	r0, #16
    ed44:	f000 fee4 	bl	fb10 <bt_keys_find>
	if (!keys) {
    ed48:	4606      	mov	r6, r0
    ed4a:	b9a0      	cbnz	r0, ed76 <bt_smp_sign_verify+0x52>
    ed4c:	4a2e      	ldr	r2, [pc, #184]	; (ee08 <bt_smp_sign_verify+0xe4>)
    ed4e:	4c2f      	ldr	r4, [pc, #188]	; (ee0c <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to find Remote CSRK for %s",
    ed50:	4628      	mov	r0, r5
    ed52:	1aa4      	subs	r4, r4, r2
    ed54:	f7f8 fdd2 	bl	78fc <bt_addr_le_str_real>
    ed58:	f7f6 f83c 	bl	4dd4 <log_strdup>
    ed5c:	08e4      	lsrs	r4, r4, #3
    ed5e:	01a4      	lsls	r4, r4, #6
    ed60:	f044 0401 	orr.w	r4, r4, #1
    ed64:	4601      	mov	r1, r0
    ed66:	4622      	mov	r2, r4
    ed68:	4829      	ldr	r0, [pc, #164]	; (ee10 <bt_smp_sign_verify+0xec>)
    ed6a:	f012 ff07 	bl	21b7c <log_1>
		return -ENOENT;
    ed6e:	f06f 0001 	mvn.w	r0, #1
}
    ed72:	b004      	add	sp, #16
    ed74:	bd70      	pop	{r4, r5, r6, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    ed76:	6e43      	ldr	r3, [r0, #100]	; 0x64
    ed78:	9300      	str	r3, [sp, #0]
    ed7a:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    ed7c:	68a0      	ldr	r0, [r4, #8]
    ed7e:	3b0c      	subs	r3, #12
    ed80:	2204      	movs	r2, #4
    ed82:	4669      	mov	r1, sp
    ed84:	4418      	add	r0, r3
    ed86:	f014 fef8 	bl	23b7a <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    ed8a:	89a2      	ldrh	r2, [r4, #12]
    ed8c:	68a1      	ldr	r1, [r4, #8]
    ed8e:	3a0c      	subs	r2, #12
    ed90:	b292      	uxth	r2, r2
    ed92:	f106 0054 	add.w	r0, r6, #84	; 0x54
    ed96:	f7ff f847 	bl	de28 <smp_sign_buf>
	if (err) {
    ed9a:	b198      	cbz	r0, edc4 <bt_smp_sign_verify+0xa0>
    ed9c:	4a1a      	ldr	r2, [pc, #104]	; (ee08 <bt_smp_sign_verify+0xe4>)
    ed9e:	4c1b      	ldr	r4, [pc, #108]	; (ee0c <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to create signature for %s",
    eda0:	4628      	mov	r0, r5
    eda2:	1aa4      	subs	r4, r4, r2
    eda4:	f7f8 fdaa 	bl	78fc <bt_addr_le_str_real>
    eda8:	f7f6 f814 	bl	4dd4 <log_strdup>
    edac:	08e4      	lsrs	r4, r4, #3
    edae:	01a4      	lsls	r4, r4, #6
    edb0:	f044 0401 	orr.w	r4, r4, #1
    edb4:	4601      	mov	r1, r0
    edb6:	4622      	mov	r2, r4
    edb8:	4816      	ldr	r0, [pc, #88]	; (ee14 <bt_smp_sign_verify+0xf0>)
    edba:	f012 fedf 	bl	21b7c <log_1>
		return -EIO;
    edbe:	f06f 0004 	mvn.w	r0, #4
    edc2:	e7d6      	b.n	ed72 <bt_smp_sign_verify+0x4e>
    edc4:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    edc6:	68a1      	ldr	r1, [r4, #8]
    edc8:	3b0c      	subs	r3, #12
    edca:	220c      	movs	r2, #12
    edcc:	4419      	add	r1, r3
    edce:	a801      	add	r0, sp, #4
    edd0:	f014 fec2 	bl	23b58 <memcmp>
    edd4:	b198      	cbz	r0, edfe <bt_smp_sign_verify+0xda>
    edd6:	4a0c      	ldr	r2, [pc, #48]	; (ee08 <bt_smp_sign_verify+0xe4>)
    edd8:	4c0c      	ldr	r4, [pc, #48]	; (ee0c <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to verify signature for %s",
    edda:	4628      	mov	r0, r5
    eddc:	1aa4      	subs	r4, r4, r2
    edde:	f7f8 fd8d 	bl	78fc <bt_addr_le_str_real>
    ede2:	f7f5 fff7 	bl	4dd4 <log_strdup>
    ede6:	08e4      	lsrs	r4, r4, #3
    ede8:	01a4      	lsls	r4, r4, #6
    edea:	f044 0401 	orr.w	r4, r4, #1
    edee:	4601      	mov	r1, r0
    edf0:	4622      	mov	r2, r4
    edf2:	4809      	ldr	r0, [pc, #36]	; (ee18 <bt_smp_sign_verify+0xf4>)
    edf4:	f012 fec2 	bl	21b7c <log_1>
		return -EBADMSG;
    edf8:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    edfc:	e7b9      	b.n	ed72 <bt_smp_sign_verify+0x4e>
	keys->remote_csrk.cnt++;
    edfe:	6e73      	ldr	r3, [r6, #100]	; 0x64
    ee00:	3301      	adds	r3, #1
    ee02:	6673      	str	r3, [r6, #100]	; 0x64
	return 0;
    ee04:	e7b5      	b.n	ed72 <bt_smp_sign_verify+0x4e>
    ee06:	bf00      	nop
    ee08:	00026fc8 	.word	0x00026fc8
    ee0c:	000270b0 	.word	0x000270b0
    ee10:	0002c90d 	.word	0x0002c90d
    ee14:	0002c92f 	.word	0x0002c92f
    ee18:	0002c951 	.word	0x0002c951

0000ee1c <bt_smp_sign>:
{
    ee1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    ee1e:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    ee22:	460e      	mov	r6, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    ee24:	462a      	mov	r2, r5
    ee26:	7a01      	ldrb	r1, [r0, #8]
    ee28:	2008      	movs	r0, #8
    ee2a:	f000 fe71 	bl	fb10 <bt_keys_find>
	if (!keys) {
    ee2e:	4604      	mov	r4, r0
    ee30:	b9a0      	cbnz	r0, ee5c <bt_smp_sign+0x40>
    ee32:	4a23      	ldr	r2, [pc, #140]	; (eec0 <bt_smp_sign+0xa4>)
    ee34:	4c23      	ldr	r4, [pc, #140]	; (eec4 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to find local CSRK for %s",
    ee36:	4628      	mov	r0, r5
    ee38:	1aa4      	subs	r4, r4, r2
    ee3a:	f7f8 fd5f 	bl	78fc <bt_addr_le_str_real>
    ee3e:	f7f5 ffc9 	bl	4dd4 <log_strdup>
    ee42:	08e4      	lsrs	r4, r4, #3
    ee44:	01a4      	lsls	r4, r4, #6
    ee46:	f044 0401 	orr.w	r4, r4, #1
    ee4a:	4601      	mov	r1, r0
    ee4c:	4622      	mov	r2, r4
    ee4e:	481e      	ldr	r0, [pc, #120]	; (eec8 <bt_smp_sign+0xac>)
    ee50:	f012 fe94 	bl	21b7c <log_1>
		return -ENOENT;
    ee54:	f06f 0001 	mvn.w	r0, #1
}
    ee58:	b002      	add	sp, #8
    ee5a:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_add(&buf->b, len);
    ee5c:	210c      	movs	r1, #12
    ee5e:	f106 0008 	add.w	r0, r6, #8
    ee62:	f016 fede 	bl	25c22 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    ee66:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ee68:	9301      	str	r3, [sp, #4]
	return buf->data + buf->len;
    ee6a:	89b3      	ldrh	r3, [r6, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    ee6c:	68b0      	ldr	r0, [r6, #8]
    ee6e:	2204      	movs	r2, #4
    ee70:	3b0c      	subs	r3, #12
    ee72:	eb0d 0102 	add.w	r1, sp, r2
    ee76:	4418      	add	r0, r3
    ee78:	f014 fe7f 	bl	23b7a <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    ee7c:	89b2      	ldrh	r2, [r6, #12]
    ee7e:	68b1      	ldr	r1, [r6, #8]
    ee80:	3a0c      	subs	r2, #12
    ee82:	b292      	uxth	r2, r2
    ee84:	f104 0040 	add.w	r0, r4, #64	; 0x40
    ee88:	f7fe ffce 	bl	de28 <smp_sign_buf>
	if (err) {
    ee8c:	b198      	cbz	r0, eeb6 <bt_smp_sign+0x9a>
    ee8e:	4a0c      	ldr	r2, [pc, #48]	; (eec0 <bt_smp_sign+0xa4>)
    ee90:	4c0c      	ldr	r4, [pc, #48]	; (eec4 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to create signature for %s",
    ee92:	4628      	mov	r0, r5
    ee94:	1aa4      	subs	r4, r4, r2
    ee96:	f7f8 fd31 	bl	78fc <bt_addr_le_str_real>
    ee9a:	f7f5 ff9b 	bl	4dd4 <log_strdup>
    ee9e:	08e4      	lsrs	r4, r4, #3
    eea0:	01a4      	lsls	r4, r4, #6
    eea2:	f044 0401 	orr.w	r4, r4, #1
    eea6:	4601      	mov	r1, r0
    eea8:	4622      	mov	r2, r4
    eeaa:	4808      	ldr	r0, [pc, #32]	; (eecc <bt_smp_sign+0xb0>)
    eeac:	f012 fe66 	bl	21b7c <log_1>
		return -EIO;
    eeb0:	f06f 0004 	mvn.w	r0, #4
    eeb4:	e7d0      	b.n	ee58 <bt_smp_sign+0x3c>
	keys->local_csrk.cnt++;
    eeb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
    eeb8:	3301      	adds	r3, #1
    eeba:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
    eebc:	e7cc      	b.n	ee58 <bt_smp_sign+0x3c>
    eebe:	bf00      	nop
    eec0:	00026fc8 	.word	0x00026fc8
    eec4:	000270b0 	.word	0x000270b0
    eec8:	0002c973 	.word	0x0002c973
    eecc:	0002c92f 	.word	0x0002c92f

0000eed0 <bt_smp_start_security>:
{
    eed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    eed4:	78c4      	ldrb	r4, [r0, #3]
    eed6:	2c01      	cmp	r4, #1
{
    eed8:	4605      	mov	r5, r0
	switch (conn->role) {
    eeda:	d005      	beq.n	eee8 <bt_smp_start_security+0x18>
		return -EINVAL;
    eedc:	f06f 0415 	mvn.w	r4, #21
}
    eee0:	4620      	mov	r0, r4
    eee2:	b003      	add	sp, #12
    eee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    eee8:	f7fe ffde 	bl	dea8 <smp_chan_get>
	if (!smp) {
    eeec:	4606      	mov	r6, r0
    eeee:	2800      	cmp	r0, #0
    eef0:	f000 80a0 	beq.w	f034 <bt_smp_start_security+0x164>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    eef4:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    eef8:	2104      	movs	r1, #4
    eefa:	4638      	mov	r0, r7
    eefc:	f016 fb3c 	bl	25578 <atomic_test_bit>
    ef00:	2800      	cmp	r0, #0
    ef02:	f040 809a 	bne.w	f03a <bt_smp_start_security+0x16a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ef06:	2103      	movs	r1, #3
    ef08:	4638      	mov	r0, r7
    ef0a:	f016 fb35 	bl	25578 <atomic_test_bit>
    ef0e:	b110      	cbz	r0, ef16 <bt_smp_start_security+0x46>
		return -EBUSY;
    ef10:	f06f 040f 	mvn.w	r4, #15
    ef14:	e7e4      	b.n	eee0 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    ef16:	4621      	mov	r1, r4
    ef18:	4638      	mov	r0, r7
    ef1a:	f016 fb2d 	bl	25578 <atomic_test_bit>
    ef1e:	2800      	cmp	r0, #0
    ef20:	d1f6      	bne.n	ef10 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    ef22:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    ef24:	2b03      	cmp	r3, #3
    ef26:	d03d      	beq.n	efa4 <bt_smp_start_security+0xd4>
    ef28:	d82c      	bhi.n	ef84 <bt_smp_start_security+0xb4>
    ef2a:	3b01      	subs	r3, #1
    ef2c:	2b01      	cmp	r3, #1
    ef2e:	d946      	bls.n	efbe <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    ef30:	210b      	movs	r1, #11
    ef32:	1d28      	adds	r0, r5, #4
    ef34:	f016 fb20 	bl	25578 <atomic_test_bit>
    ef38:	2800      	cmp	r0, #0
    ef3a:	d1cf      	bne.n	eedc <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    ef3c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    ef40:	b983      	cbnz	r3, ef64 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    ef42:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    ef46:	7a29      	ldrb	r1, [r5, #8]
    ef48:	4622      	mov	r2, r4
    ef4a:	2020      	movs	r0, #32
    ef4c:	f000 fde0 	bl	fb10 <bt_keys_find>
    ef50:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    ef54:	b930      	cbnz	r0, ef64 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    ef56:	7a29      	ldrb	r1, [r5, #8]
    ef58:	4622      	mov	r2, r4
    ef5a:	2004      	movs	r0, #4
    ef5c:	f000 fdd8 	bl	fb10 <bt_keys_find>
    ef60:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    ef64:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    ef68:	2b00      	cmp	r3, #0
    ef6a:	d0b7      	beq.n	eedc <bt_smp_start_security+0xc>
    ef6c:	89da      	ldrh	r2, [r3, #14]
    ef6e:	f002 0224 	and.w	r2, r2, #36	; 0x24
    ef72:	2a00      	cmp	r2, #0
    ef74:	d0b2      	beq.n	eedc <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    ef76:	7aaa      	ldrb	r2, [r5, #10]
    ef78:	2a02      	cmp	r2, #2
    ef7a:	d920      	bls.n	efbe <bt_smp_start_security+0xee>
    ef7c:	7b5b      	ldrb	r3, [r3, #13]
    ef7e:	07db      	lsls	r3, r3, #31
    ef80:	d5ac      	bpl.n	eedc <bt_smp_start_security+0xc>
    ef82:	e01c      	b.n	efbe <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
    ef84:	2b04      	cmp	r3, #4
    ef86:	d1d3      	bne.n	ef30 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ef88:	f7fe ff28 	bl	dddc <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    ef8c:	2803      	cmp	r0, #3
    ef8e:	d104      	bne.n	ef9a <bt_smp_start_security+0xca>
    ef90:	4b2b      	ldr	r3, [pc, #172]	; (f040 <bt_smp_start_security+0x170>)
    ef92:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ef94:	b1f3      	cbz	r3, efd4 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    ef96:	68dc      	ldr	r4, [r3, #12]
    ef98:	b10c      	cbz	r4, ef9e <bt_smp_start_security+0xce>
    ef9a:	4b2a      	ldr	r3, [pc, #168]	; (f044 <bt_smp_start_security+0x174>)
    ef9c:	781c      	ldrb	r4, [r3, #0]
    ef9e:	f004 0401 	and.w	r4, r4, #1
    efa2:	e00a      	b.n	efba <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    efa4:	f7fe ff1a 	bl	dddc <get_io_capa>
    efa8:	2803      	cmp	r0, #3
    efaa:	d106      	bne.n	efba <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    efac:	4b24      	ldr	r3, [pc, #144]	; (f040 <bt_smp_start_security+0x170>)
    efae:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    efb0:	b11c      	cbz	r4, efba <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    efb2:	68e4      	ldr	r4, [r4, #12]
    efb4:	3c00      	subs	r4, #0
    efb6:	bf18      	it	ne
    efb8:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    efba:	2c00      	cmp	r4, #0
    efbc:	d0b8      	beq.n	ef30 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    efbe:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    efc2:	b14b      	cbz	r3, efd8 <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
    efc4:	4630      	mov	r0, r6
    efc6:	f7fe ffdf 	bl	df88 <smp_init>
    efca:	4604      	mov	r4, r0
    efcc:	b180      	cbz	r0, eff0 <bt_smp_start_security+0x120>
		return -ENOBUFS;
    efce:	f06f 0436 	mvn.w	r4, #54	; 0x36
    efd2:	e785      	b.n	eee0 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    efd4:	2400      	movs	r4, #0
    efd6:	e7e2      	b.n	ef9e <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    efd8:	7a28      	ldrb	r0, [r5, #8]
    efda:	f105 0188 	add.w	r1, r5, #136	; 0x88
    efde:	f000 fd21 	bl	fa24 <bt_keys_get_addr>
    efe2:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    efe6:	2800      	cmp	r0, #0
    efe8:	d1ec      	bne.n	efc4 <bt_smp_start_security+0xf4>
			return -ENOMEM;
    efea:	f06f 040b 	mvn.w	r4, #11
    efee:	e777      	b.n	eee0 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    eff0:	210b      	movs	r1, #11
    eff2:	4630      	mov	r0, r6
    eff4:	f016 fac9 	bl	2558a <smp_create_pdu.constprop.0>
	if (!req_buf) {
    eff8:	4680      	mov	r8, r0
    effa:	2800      	cmp	r0, #0
    effc:	d0e7      	beq.n	efce <bt_smp_start_security+0xfe>
	return net_buf_simple_add(&buf->b, len);
    effe:	2101      	movs	r1, #1
    f000:	3008      	adds	r0, #8
    f002:	f016 fe0e 	bl	25c22 <net_buf_simple_add>
    f006:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    f008:	2009      	movs	r0, #9
    f00a:	f7fe ff87 	bl	df1c <get_auth.constprop.0>
    f00e:	4623      	mov	r3, r4
    f010:	f889 0000 	strb.w	r0, [r9]
    f014:	4642      	mov	r2, r8
    f016:	9400      	str	r4, [sp, #0]
    f018:	2106      	movs	r1, #6
    f01a:	4628      	mov	r0, r5
    f01c:	f015 fad4 	bl	245c8 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    f020:	4638      	mov	r0, r7
    f022:	210f      	movs	r1, #15
    f024:	f016 fa91 	bl	2554a <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    f028:	2101      	movs	r1, #1
    f02a:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    f02e:	f016 fa8c 	bl	2554a <atomic_set_bit>
	return 0;
    f032:	e755      	b.n	eee0 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    f034:	f06f 0438 	mvn.w	r4, #56	; 0x38
    f038:	e752      	b.n	eee0 <bt_smp_start_security+0x10>
		return -EIO;
    f03a:	f06f 0404 	mvn.w	r4, #4
    f03e:	e74f      	b.n	eee0 <bt_smp_start_security+0x10>
    f040:	2000d6e8 	.word	0x2000d6e8
    f044:	2000f2b2 	.word	0x2000f2b2

0000f048 <smp_pairing_complete>:
{
    f048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    f04c:	4606      	mov	r6, r0
    f04e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; f0f8 <smp_pairing_complete+0xb0>
    f052:	f856 4bbc 	ldr.w	r4, [r6], #188
{
    f056:	4607      	mov	r7, r0
	if (!status) {
    f058:	b9e9      	cbnz	r1, f096 <smp_pairing_complete+0x4e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    f05a:	210d      	movs	r1, #13
    f05c:	4630      	mov	r0, r6
    f05e:	f016 fa8b 	bl	25578 <atomic_test_bit>
		if (bond_flag) {
    f062:	4605      	mov	r5, r0
    f064:	b118      	cbz	r0, f06e <smp_pairing_complete+0x26>
			bt_keys_store(conn->le.keys);
    f066:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f06a:	f000 fe95 	bl	fd98 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    f06e:	f8d8 3000 	ldr.w	r3, [r8]
    f072:	b123      	cbz	r3, f07e <smp_pairing_complete+0x36>
    f074:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
    f076:	b113      	cbz	r3, f07e <smp_pairing_complete+0x36>
			bt_auth->pairing_failed(conn, security_err);
    f078:	4629      	mov	r1, r5
    f07a:	4620      	mov	r0, r4
    f07c:	4798      	blx	r3
	smp_reset(smp);
    f07e:	4638      	mov	r0, r7
    f080:	f016 fb16 	bl	256b0 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
    f084:	7a62      	ldrb	r2, [r4, #9]
    f086:	7aa3      	ldrb	r3, [r4, #10]
    f088:	429a      	cmp	r2, r3
    f08a:	d033      	beq.n	f0f4 <smp_pairing_complete+0xac>
		bt_smp_start_security(conn);
    f08c:	4620      	mov	r0, r4
}
    f08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
    f092:	f7ff bf1d 	b.w	eed0 <bt_smp_start_security>
	switch (smp_err) {
    f096:	3901      	subs	r1, #1
    f098:	b2c9      	uxtb	r1, r1
    f09a:	290d      	cmp	r1, #13
    f09c:	bf9c      	itt	ls
    f09e:	4b17      	ldrls	r3, [pc, #92]	; (f0fc <smp_pairing_complete+0xb4>)
    f0a0:	5c5d      	ldrbls	r5, [r3, r1]
		if (conn->le.keys &&
    f0a2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
    f0a6:	bf88      	it	hi
    f0a8:	2508      	movhi	r5, #8
		if (conn->le.keys &&
    f0aa:	b143      	cbz	r3, f0be <smp_pairing_complete+0x76>
    f0ac:	7b1b      	ldrb	r3, [r3, #12]
    f0ae:	b9d3      	cbnz	r3, f0e6 <smp_pairing_complete+0x9e>
			bt_keys_clear(conn->le.keys);
    f0b0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f0b4:	f000 fd8a 	bl	fbcc <bt_keys_clear>
			conn->le.keys = NULL;
    f0b8:	2300      	movs	r3, #0
    f0ba:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f0be:	2102      	movs	r1, #2
    f0c0:	4630      	mov	r0, r6
    f0c2:	f016 fa59 	bl	25578 <atomic_test_bit>
    f0c6:	b940      	cbnz	r0, f0da <smp_pairing_complete+0x92>
	switch (err) {
    f0c8:	2d08      	cmp	r5, #8
    f0ca:	bf16      	itet	ne
    f0cc:	4b0c      	ldrne	r3, [pc, #48]	; (f100 <smp_pairing_complete+0xb8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f0ce:	211f      	moveq	r1, #31
    f0d0:	5d59      	ldrbne	r1, [r3, r5]
			bt_conn_security_changed(conn,
    f0d2:	462a      	mov	r2, r5
    f0d4:	4620      	mov	r0, r4
    f0d6:	f7fb fd31 	bl	ab3c <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    f0da:	f8d8 3000 	ldr.w	r3, [r8]
    f0de:	2b00      	cmp	r3, #0
    f0e0:	d0cd      	beq.n	f07e <smp_pairing_complete+0x36>
    f0e2:	69db      	ldr	r3, [r3, #28]
    f0e4:	e7c7      	b.n	f076 <smp_pairing_complete+0x2e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    f0e6:	2102      	movs	r1, #2
    f0e8:	4630      	mov	r0, r6
    f0ea:	f016 fa45 	bl	25578 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
    f0ee:	2800      	cmp	r0, #0
    f0f0:	d1de      	bne.n	f0b0 <smp_pairing_complete+0x68>
    f0f2:	e7e4      	b.n	f0be <smp_pairing_complete+0x76>
}
    f0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f0f8:	2000d6e8 	.word	0x2000d6e8
    f0fc:	0002cb77 	.word	0x0002cb77
    f100:	0002cb8d 	.word	0x0002cb8d

0000f104 <bt_smp_recv>:
{
    f104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    f106:	898b      	ldrh	r3, [r1, #12]
{
    f108:	4604      	mov	r4, r0
    f10a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    f10c:	b95b      	cbnz	r3, f126 <bt_smp_recv+0x22>
    f10e:	493a      	ldr	r1, [pc, #232]	; (f1f8 <bt_smp_recv+0xf4>)
    f110:	4b3a      	ldr	r3, [pc, #232]	; (f1fc <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
    f112:	483b      	ldr	r0, [pc, #236]	; (f200 <bt_smp_recv+0xfc>)
    f114:	1ac9      	subs	r1, r1, r3
    f116:	08c9      	lsrs	r1, r1, #3
    f118:	0189      	lsls	r1, r1, #6
    f11a:	f041 0101 	orr.w	r1, r1, #1
    f11e:	f012 fd20 	bl	21b62 <log_0>
}
    f122:	2000      	movs	r0, #0
    f124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    f126:	2101      	movs	r1, #1
    f128:	f105 0008 	add.w	r0, r5, #8
    f12c:	f016 fda0 	bl	25c70 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f130:	2104      	movs	r1, #4
    f132:	4606      	mov	r6, r0
    f134:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f138:	f016 fa1e 	bl	25578 <atomic_test_bit>
    f13c:	7831      	ldrb	r1, [r6, #0]
    f13e:	b150      	cbz	r0, f156 <bt_smp_recv+0x52>
    f140:	4a2d      	ldr	r2, [pc, #180]	; (f1f8 <bt_smp_recv+0xf4>)
    f142:	4b2e      	ldr	r3, [pc, #184]	; (f1fc <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    f144:	482f      	ldr	r0, [pc, #188]	; (f204 <bt_smp_recv+0x100>)
    f146:	1ad2      	subs	r2, r2, r3
    f148:	08d2      	lsrs	r2, r2, #3
    f14a:	0192      	lsls	r2, r2, #6
    f14c:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    f150:	f012 fd14 	bl	21b7c <log_1>
		return 0;
    f154:	e7e5      	b.n	f122 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    f156:	290e      	cmp	r1, #14
    f158:	d908      	bls.n	f16c <bt_smp_recv+0x68>
    f15a:	4a27      	ldr	r2, [pc, #156]	; (f1f8 <bt_smp_recv+0xf4>)
    f15c:	4b27      	ldr	r3, [pc, #156]	; (f1fc <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    f15e:	482a      	ldr	r0, [pc, #168]	; (f208 <bt_smp_recv+0x104>)
    f160:	1ad2      	subs	r2, r2, r3
    f162:	08d2      	lsrs	r2, r2, #3
    f164:	0192      	lsls	r2, r2, #6
    f166:	f042 0202 	orr.w	r2, r2, #2
    f16a:	e7f1      	b.n	f150 <bt_smp_recv+0x4c>
	if (!handlers[hdr->code].func) {
    f16c:	4f27      	ldr	r7, [pc, #156]	; (f20c <bt_smp_recv+0x108>)
    f16e:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    f172:	b973      	cbnz	r3, f192 <bt_smp_recv+0x8e>
    f174:	4b21      	ldr	r3, [pc, #132]	; (f1fc <bt_smp_recv+0xf8>)
    f176:	4a20      	ldr	r2, [pc, #128]	; (f1f8 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    f178:	4825      	ldr	r0, [pc, #148]	; (f210 <bt_smp_recv+0x10c>)
    f17a:	1ad2      	subs	r2, r2, r3
    f17c:	08d2      	lsrs	r2, r2, #3
    f17e:	0192      	lsls	r2, r2, #6
    f180:	f042 0202 	orr.w	r2, r2, #2
    f184:	f012 fcfa 	bl	21b7c <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    f188:	2107      	movs	r1, #7
		smp_error(smp, err);
    f18a:	4620      	mov	r0, r4
    f18c:	f016 fc15 	bl	259ba <smp_error>
    f190:	e7c7      	b.n	f122 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    f192:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f196:	f016 fa73 	bl	25680 <atomic_test_and_clear_bit>
    f19a:	7831      	ldrb	r1, [r6, #0]
    f19c:	b970      	cbnz	r0, f1bc <bt_smp_recv+0xb8>
    f19e:	4b17      	ldr	r3, [pc, #92]	; (f1fc <bt_smp_recv+0xf8>)
    f1a0:	4a15      	ldr	r2, [pc, #84]	; (f1f8 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    f1a2:	481c      	ldr	r0, [pc, #112]	; (f214 <bt_smp_recv+0x110>)
    f1a4:	1ad2      	subs	r2, r2, r3
    f1a6:	08d2      	lsrs	r2, r2, #3
    f1a8:	0192      	lsls	r2, r2, #6
    f1aa:	f042 0202 	orr.w	r2, r2, #2
    f1ae:	f012 fce5 	bl	21b7c <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    f1b2:	7833      	ldrb	r3, [r6, #0]
    f1b4:	2b05      	cmp	r3, #5
    f1b6:	d0b4      	beq.n	f122 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f1b8:	2108      	movs	r1, #8
    f1ba:	e7e6      	b.n	f18a <bt_smp_recv+0x86>
	if (buf->len != handlers[hdr->code].expect_len) {
    f1bc:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    f1c0:	89a8      	ldrh	r0, [r5, #12]
    f1c2:	791b      	ldrb	r3, [r3, #4]
    f1c4:	4283      	cmp	r3, r0
    f1c6:	d00d      	beq.n	f1e4 <bt_smp_recv+0xe0>
    f1c8:	4a0c      	ldr	r2, [pc, #48]	; (f1fc <bt_smp_recv+0xf8>)
    f1ca:	4b0b      	ldr	r3, [pc, #44]	; (f1f8 <bt_smp_recv+0xf4>)
    f1cc:	1a9b      	subs	r3, r3, r2
    f1ce:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    f1d0:	019b      	lsls	r3, r3, #6
    f1d2:	460a      	mov	r2, r1
    f1d4:	f043 0301 	orr.w	r3, r3, #1
    f1d8:	4601      	mov	r1, r0
    f1da:	480f      	ldr	r0, [pc, #60]	; (f218 <bt_smp_recv+0x114>)
    f1dc:	f012 fce2 	bl	21ba4 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    f1e0:	210a      	movs	r1, #10
    f1e2:	e7d2      	b.n	f18a <bt_smp_recv+0x86>
	err = handlers[hdr->code].func(smp, buf);
    f1e4:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    f1e8:	4620      	mov	r0, r4
    f1ea:	4629      	mov	r1, r5
    f1ec:	4798      	blx	r3
	if (err) {
    f1ee:	4601      	mov	r1, r0
    f1f0:	2800      	cmp	r0, #0
    f1f2:	d096      	beq.n	f122 <bt_smp_recv+0x1e>
    f1f4:	e7c9      	b.n	f18a <bt_smp_recv+0x86>
    f1f6:	bf00      	nop
    f1f8:	000270b0 	.word	0x000270b0
    f1fc:	00026fc8 	.word	0x00026fc8
    f200:	0002c994 	.word	0x0002c994
    f204:	0002c9af 	.word	0x0002c9af
    f208:	0002c9e0 	.word	0x0002c9e0
    f20c:	000279dc 	.word	0x000279dc
    f210:	0002ca02 	.word	0x0002ca02
    f214:	0002ca1c 	.word	0x0002ca1c
    f218:	0002c456 	.word	0x0002c456

0000f21c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    f21c:	4b13      	ldr	r3, [pc, #76]	; (f26c <bt_smp_pkey_ready+0x50>)
{
    f21e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    f220:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    f222:	b958      	cbnz	r0, f23c <bt_smp_pkey_ready+0x20>
    f224:	4912      	ldr	r1, [pc, #72]	; (f270 <bt_smp_pkey_ready+0x54>)
    f226:	4b13      	ldr	r3, [pc, #76]	; (f274 <bt_smp_pkey_ready+0x58>)
		BT_WARN("Public key not available");
    f228:	4813      	ldr	r0, [pc, #76]	; (f278 <bt_smp_pkey_ready+0x5c>)
    f22a:	1ac9      	subs	r1, r1, r3
    f22c:	08c9      	lsrs	r1, r1, #3
    f22e:	0189      	lsls	r1, r1, #6
}
    f230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    f234:	f041 0102 	orr.w	r1, r1, #2
    f238:	f012 bc93 	b.w	21b62 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f23c:	4c0f      	ldr	r4, [pc, #60]	; (f27c <bt_smp_pkey_ready+0x60>)
	z_impl_k_sem_give(sem);
    f23e:	4810      	ldr	r0, [pc, #64]	; (f280 <bt_smp_pkey_ready+0x64>)
    f240:	f010 fcc8 	bl	1fbd4 <z_impl_k_sem_give>
    f244:	f3bf 8f5b 	dmb	ish
    f248:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    f24c:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    f250:	065b      	lsls	r3, r3, #25
    f252:	d509      	bpl.n	f268 <bt_smp_pkey_ready+0x4c>
		err = smp_public_key_slave(smp);
    f254:	4620      	mov	r0, r4
    f256:	f7ff fac1 	bl	e7dc <smp_public_key_slave>
		if (err) {
    f25a:	4601      	mov	r1, r0
    f25c:	b120      	cbz	r0, f268 <bt_smp_pkey_ready+0x4c>
			smp_error(smp, err);
    f25e:	4620      	mov	r0, r4
}
    f260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    f264:	f016 bba9 	b.w	259ba <smp_error>
}
    f268:	bd10      	pop	{r4, pc}
    f26a:	bf00      	nop
    f26c:	2000d77c 	.word	0x2000d77c
    f270:	000270b0 	.word	0x000270b0
    f274:	00026fc8 	.word	0x00026fc8
    f278:	0002ca37 	.word	0x0002ca37
    f27c:	2000a830 	.word	0x2000a830
    f280:	20009fb8 	.word	0x20009fb8

0000f284 <smp_signing_info>:
{
    f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f286:	4605      	mov	r5, r0
    f288:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    f28a:	f850 4bbc 	ldr.w	r4, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f28e:	210d      	movs	r1, #13
    f290:	f016 f972 	bl	25578 <atomic_test_bit>
    f294:	b300      	cbz	r0, f2d8 <smp_signing_info+0x54>
					&conn->le.dst);
    f296:	f104 0688 	add.w	r6, r4, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    f29a:	7a21      	ldrb	r1, [r4, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
    f29c:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    f29e:	4632      	mov	r2, r6
    f2a0:	2010      	movs	r0, #16
    f2a2:	f016 fc53 	bl	25b4c <bt_keys_get_type>
		if (!keys) {
    f2a6:	b990      	cbnz	r0, f2ce <smp_signing_info+0x4a>
    f2a8:	4a13      	ldr	r2, [pc, #76]	; (f2f8 <smp_signing_info+0x74>)
    f2aa:	4c14      	ldr	r4, [pc, #80]	; (f2fc <smp_signing_info+0x78>)
			BT_ERR("Unable to get keys for %s",
    f2ac:	4630      	mov	r0, r6
    f2ae:	1aa4      	subs	r4, r4, r2
    f2b0:	f7f8 fb24 	bl	78fc <bt_addr_le_str_real>
    f2b4:	f7f5 fd8e 	bl	4dd4 <log_strdup>
    f2b8:	08e4      	lsrs	r4, r4, #3
    f2ba:	01a4      	lsls	r4, r4, #6
    f2bc:	f044 0401 	orr.w	r4, r4, #1
    f2c0:	4601      	mov	r1, r0
    f2c2:	4622      	mov	r2, r4
    f2c4:	480e      	ldr	r0, [pc, #56]	; (f300 <smp_signing_info+0x7c>)
    f2c6:	f012 fc59 	bl	21b7c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    f2ca:	2008      	movs	r0, #8
}
    f2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
    f2ce:	2210      	movs	r2, #16
    f2d0:	4639      	mov	r1, r7
    f2d2:	3054      	adds	r0, #84	; 0x54
    f2d4:	f014 fc51 	bl	23b7a <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    f2d8:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    f2dc:	f023 0304 	bic.w	r3, r3, #4
    f2e0:	f885 31a1 	strb.w	r3, [r5, #417]	; 0x1a1
	if (!smp->local_dist && !smp->remote_dist) {
    f2e4:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
    f2e8:	b91c      	cbnz	r4, f2f2 <smp_signing_info+0x6e>
		smp_pairing_complete(smp, 0);
    f2ea:	4621      	mov	r1, r4
    f2ec:	4628      	mov	r0, r5
    f2ee:	f7ff feab 	bl	f048 <smp_pairing_complete>
	return 0;
    f2f2:	2000      	movs	r0, #0
    f2f4:	e7ea      	b.n	f2cc <smp_signing_info+0x48>
    f2f6:	bf00      	nop
    f2f8:	00026fc8 	.word	0x00026fc8
    f2fc:	000270b0 	.word	0x000270b0
    f300:	0002c7da 	.word	0x0002c7da

0000f304 <smp_ident_addr_info>:
{
    f304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    f308:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    f30a:	6805      	ldr	r5, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    f30c:	7833      	ldrb	r3, [r6, #0]
{
    f30e:	4604      	mov	r4, r0
    f310:	b31b      	cbz	r3, f35a <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    f312:	79b3      	ldrb	r3, [r6, #6]
    f314:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f318:	2bc0      	cmp	r3, #192	; 0xc0
    f31a:	d01e      	beq.n	f35a <smp_ident_addr_info+0x56>
    f31c:	4b43      	ldr	r3, [pc, #268]	; (f42c <smp_ident_addr_info+0x128>)
    f31e:	4c44      	ldr	r4, [pc, #272]	; (f430 <smp_ident_addr_info+0x12c>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    f320:	4630      	mov	r0, r6
    f322:	1ae4      	subs	r4, r4, r3
    f324:	f7f8 faea 	bl	78fc <bt_addr_le_str_real>
    f328:	f7f5 fd54 	bl	4dd4 <log_strdup>
    f32c:	08e4      	lsrs	r4, r4, #3
    f32e:	01a4      	lsls	r4, r4, #6
    f330:	f044 0401 	orr.w	r4, r4, #1
    f334:	4601      	mov	r1, r0
    f336:	4622      	mov	r2, r4
    f338:	483e      	ldr	r0, [pc, #248]	; (f434 <smp_ident_addr_info+0x130>)
    f33a:	f012 fc1f 	bl	21b7c <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    f33e:	f105 0088 	add.w	r0, r5, #136	; 0x88
    f342:	f7f8 fadb 	bl	78fc <bt_addr_le_str_real>
    f346:	f7f5 fd45 	bl	4dd4 <log_strdup>
    f34a:	4622      	mov	r2, r4
    f34c:	4601      	mov	r1, r0
    f34e:	483a      	ldr	r0, [pc, #232]	; (f438 <smp_ident_addr_info+0x134>)
    f350:	f012 fc14 	bl	21b7c <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    f354:	200a      	movs	r0, #10
}
    f356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f35a:	210d      	movs	r1, #13
    f35c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f360:	f016 f90a 	bl	25578 <atomic_test_bit>
    f364:	2800      	cmp	r0, #0
    f366:	d048      	beq.n	f3fa <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    f368:	f105 0788 	add.w	r7, r5, #136	; 0x88
    f36c:	7a29      	ldrb	r1, [r5, #8]
    f36e:	463a      	mov	r2, r7
    f370:	2002      	movs	r0, #2
    f372:	f016 fbeb 	bl	25b4c <bt_keys_get_type>
		if (!keys) {
    f376:	4680      	mov	r8, r0
    f378:	b990      	cbnz	r0, f3a0 <smp_ident_addr_info+0x9c>
    f37a:	4a2c      	ldr	r2, [pc, #176]	; (f42c <smp_ident_addr_info+0x128>)
    f37c:	4c2c      	ldr	r4, [pc, #176]	; (f430 <smp_ident_addr_info+0x12c>)
			BT_ERR("Unable to get keys for %s",
    f37e:	4638      	mov	r0, r7
    f380:	1aa4      	subs	r4, r4, r2
    f382:	f7f8 fabb 	bl	78fc <bt_addr_le_str_real>
    f386:	f7f5 fd25 	bl	4dd4 <log_strdup>
    f38a:	08e4      	lsrs	r4, r4, #3
    f38c:	01a4      	lsls	r4, r4, #6
    f38e:	f044 0401 	orr.w	r4, r4, #1
    f392:	4601      	mov	r1, r0
    f394:	4622      	mov	r2, r4
    f396:	4829      	ldr	r0, [pc, #164]	; (f43c <smp_ident_addr_info+0x138>)
    f398:	f012 fbf0 	bl	21b7c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    f39c:	2008      	movs	r0, #8
    f39e:	e7da      	b.n	f356 <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    f3a0:	78eb      	ldrb	r3, [r5, #3]
    f3a2:	2b00      	cmp	r3, #0
    f3a4:	d13f      	bne.n	f426 <smp_ident_addr_info+0x122>
			dst = &conn->le.resp_addr;
    f3a6:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    f3aa:	780b      	ldrb	r3, [r1, #0]
    f3ac:	2b01      	cmp	r3, #1
    f3ae:	d121      	bne.n	f3f4 <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    f3b0:	798b      	ldrb	r3, [r1, #6]
    f3b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f3b6:	2b40      	cmp	r3, #64	; 0x40
    f3b8:	d11c      	bne.n	f3f4 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    f3ba:	2206      	movs	r2, #6
    f3bc:	3101      	adds	r1, #1
    f3be:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    f3c2:	f014 fbda 	bl	23b7a <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    f3c6:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
    f3ca:	b19b      	cbz	r3, f3f4 <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    f3cc:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    f3d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f3d4:	2bc0      	cmp	r3, #192	; 0xc0
    f3d6:	d00d      	beq.n	f3f4 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    f3d8:	2207      	movs	r2, #7
    f3da:	4631      	mov	r1, r6
    f3dc:	f108 0001 	add.w	r0, r8, #1
    f3e0:	f014 fbcb 	bl	23b7a <memcpy>
    f3e4:	2207      	movs	r2, #7
    f3e6:	4631      	mov	r1, r6
    f3e8:	4638      	mov	r0, r7
    f3ea:	f014 fbc6 	bl	23b7a <memcpy>
				bt_conn_identity_resolved(conn);
    f3ee:	4628      	mov	r0, r5
    f3f0:	f7fb fb8a 	bl	ab08 <bt_conn_identity_resolved>
		bt_id_add(keys);
    f3f4:	4640      	mov	r0, r8
    f3f6:	f7fa f9bb 	bl	9770 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    f3fa:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    f3fe:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f402:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    f404:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f408:	d504      	bpl.n	f414 <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f40a:	210a      	movs	r1, #10
    f40c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f410:	f016 f89b 	bl	2554a <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    f414:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    f418:	b91d      	cbnz	r5, f422 <smp_ident_addr_info+0x11e>
		smp_pairing_complete(smp, 0);
    f41a:	4629      	mov	r1, r5
    f41c:	4620      	mov	r0, r4
    f41e:	f7ff fe13 	bl	f048 <smp_pairing_complete>
	return 0;
    f422:	2000      	movs	r0, #0
    f424:	e797      	b.n	f356 <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    f426:	f105 018f 	add.w	r1, r5, #143	; 0x8f
    f42a:	e7be      	b.n	f3aa <smp_ident_addr_info+0xa6>
    f42c:	00026fc8 	.word	0x00026fc8
    f430:	000270b0 	.word	0x000270b0
    f434:	0002ca50 	.word	0x0002ca50
    f438:	0002c927 	.word	0x0002c927
    f43c:	0002c7da 	.word	0x0002c7da

0000f440 <smp_master_ident>:
{
    f440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f442:	4604      	mov	r4, r0
    f444:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    f446:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f44a:	210d      	movs	r1, #13
    f44c:	f016 f894 	bl	25578 <atomic_test_bit>
    f450:	b368      	cbz	r0, f4ae <smp_master_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    f452:	f105 0788 	add.w	r7, r5, #136	; 0x88
    f456:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    f458:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    f45a:	463a      	mov	r2, r7
    f45c:	2004      	movs	r0, #4
    f45e:	f016 fb75 	bl	25b4c <bt_keys_get_type>
		if (!keys) {
    f462:	4605      	mov	r5, r0
    f464:	b990      	cbnz	r0, f48c <smp_master_ident+0x4c>
    f466:	4a1d      	ldr	r2, [pc, #116]	; (f4dc <smp_master_ident+0x9c>)
    f468:	4c1d      	ldr	r4, [pc, #116]	; (f4e0 <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
    f46a:	4638      	mov	r0, r7
    f46c:	1aa4      	subs	r4, r4, r2
    f46e:	f7f8 fa45 	bl	78fc <bt_addr_le_str_real>
    f472:	f7f5 fcaf 	bl	4dd4 <log_strdup>
    f476:	08e4      	lsrs	r4, r4, #3
    f478:	01a4      	lsls	r4, r4, #6
    f47a:	f044 0401 	orr.w	r4, r4, #1
    f47e:	4601      	mov	r1, r0
    f480:	4622      	mov	r2, r4
    f482:	4818      	ldr	r0, [pc, #96]	; (f4e4 <smp_master_ident+0xa4>)
    f484:	f012 fb7a 	bl	21b7c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    f488:	2008      	movs	r0, #8
}
    f48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    f48c:	2202      	movs	r2, #2
    f48e:	4631      	mov	r1, r6
    f490:	3018      	adds	r0, #24
    f492:	f014 fb72 	bl	23b7a <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    f496:	2208      	movs	r2, #8
    f498:	1cb1      	adds	r1, r6, #2
    f49a:	f105 0010 	add.w	r0, r5, #16
    f49e:	f014 fb6c 	bl	23b7a <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    f4a2:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    f4a6:	f023 0301 	bic.w	r3, r3, #1
    f4aa:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    f4ae:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    f4b2:	079a      	lsls	r2, r3, #30
    f4b4:	d50d      	bpl.n	f4d2 <smp_master_ident+0x92>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    f4b6:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f4b8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f4bc:	f016 f845 	bl	2554a <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    f4c0:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    f4c4:	b91d      	cbnz	r5, f4ce <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
    f4c6:	4629      	mov	r1, r5
    f4c8:	4620      	mov	r0, r4
    f4ca:	f7ff fdbd 	bl	f048 <smp_pairing_complete>
	return 0;
    f4ce:	2000      	movs	r0, #0
    f4d0:	e7db      	b.n	f48a <smp_master_ident+0x4a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f4d2:	075b      	lsls	r3, r3, #29
    f4d4:	d5f4      	bpl.n	f4c0 <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f4d6:	210a      	movs	r1, #10
    f4d8:	e7ee      	b.n	f4b8 <smp_master_ident+0x78>
    f4da:	bf00      	nop
    f4dc:	00026fc8 	.word	0x00026fc8
    f4e0:	000270b0 	.word	0x000270b0
    f4e4:	0002c7da 	.word	0x0002c7da

0000f4e8 <smp_pairing_failed>:
{
    f4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f4ea:	4a15      	ldr	r2, [pc, #84]	; (f540 <smp_pairing_failed+0x58>)
    f4ec:	4b15      	ldr	r3, [pc, #84]	; (f544 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    f4ee:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    f4f0:	4605      	mov	r5, r0
    f4f2:	1ad2      	subs	r2, r2, r3
    f4f4:	08d2      	lsrs	r2, r2, #3
    f4f6:	f855 7bbc 	ldr.w	r7, [r5], #188
	BT_ERR("reason 0x%x", req->reason);
    f4fa:	7831      	ldrb	r1, [r6, #0]
    f4fc:	0192      	lsls	r2, r2, #6
{
    f4fe:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    f500:	f042 0201 	orr.w	r2, r2, #1
    f504:	4810      	ldr	r0, [pc, #64]	; (f548 <smp_pairing_failed+0x60>)
    f506:	f012 fb39 	bl	21b7c <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    f50a:	210a      	movs	r1, #10
    f50c:	4628      	mov	r0, r5
    f50e:	f016 f8b7 	bl	25680 <atomic_test_and_clear_bit>
    f512:	b140      	cbz	r0, f526 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    f514:	4b0d      	ldr	r3, [pc, #52]	; (f54c <smp_pairing_failed+0x64>)
    f516:	681b      	ldr	r3, [r3, #0]
    f518:	b963      	cbnz	r3, f534 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    f51a:	4620      	mov	r0, r4
    f51c:	7831      	ldrb	r1, [r6, #0]
    f51e:	f7ff fd93 	bl	f048 <smp_pairing_complete>
}
    f522:	2000      	movs	r0, #0
    f524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    f526:	210b      	movs	r1, #11
    f528:	4628      	mov	r0, r5
    f52a:	f016 f8a9 	bl	25680 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    f52e:	2800      	cmp	r0, #0
    f530:	d1f0      	bne.n	f514 <smp_pairing_failed+0x2c>
    f532:	e7f2      	b.n	f51a <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    f534:	691b      	ldr	r3, [r3, #16]
    f536:	2b00      	cmp	r3, #0
    f538:	d0ef      	beq.n	f51a <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    f53a:	4638      	mov	r0, r7
    f53c:	4798      	blx	r3
    f53e:	e7ec      	b.n	f51a <smp_pairing_failed+0x32>
    f540:	000270b0 	.word	0x000270b0
    f544:	00026fc8 	.word	0x00026fc8
    f548:	0002ca64 	.word	0x0002ca64
    f54c:	2000d6e8 	.word	0x2000d6e8

0000f550 <bt_smp_encrypt_change>:
{
    f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
    f554:	4605      	mov	r5, r0
{
    f556:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = chan->conn;
    f558:	f855 7bbc 	ldr.w	r7, [r5], #188
{
    f55c:	4604      	mov	r4, r0
    f55e:	460e      	mov	r6, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    f560:	4628      	mov	r0, r5
    f562:	2101      	movs	r1, #1
    f564:	f016 f88c 	bl	25680 <atomic_test_and_clear_bit>
    f568:	2800      	cmp	r0, #0
    f56a:	f000 8178 	beq.w	f85e <bt_smp_encrypt_change+0x30e>
	if (hci_status) {
    f56e:	b1de      	cbz	r6, f5a8 <bt_smp_encrypt_change+0x58>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f570:	2103      	movs	r1, #3
    f572:	4628      	mov	r0, r5
    f574:	f016 f800 	bl	25578 <atomic_test_bit>
    f578:	2800      	cmp	r0, #0
    f57a:	f000 8170 	beq.w	f85e <bt_smp_encrypt_change+0x30e>
			uint8_t smp_err = smp_err_get(
    f57e:	4630      	mov	r0, r6
    f580:	f7fa f848 	bl	9614 <bt_security_err_get>
	switch (auth_err) {
    f584:	3801      	subs	r0, #1
    f586:	b2c0      	uxtb	r0, r0
    f588:	2807      	cmp	r0, #7
    f58a:	bf9a      	itte	ls
    f58c:	4bb5      	ldrls	r3, [pc, #724]	; (f864 <bt_smp_encrypt_change+0x314>)
    f58e:	5c1e      	ldrbls	r6, [r3, r0]
			uint8_t smp_err = smp_err_get(
    f590:	2600      	movhi	r6, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    f592:	2102      	movs	r1, #2
    f594:	4628      	mov	r0, r5
    f596:	f015 ffd8 	bl	2554a <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
    f59a:	4631      	mov	r1, r6
		smp_pairing_complete(smp, 0);
    f59c:	4620      	mov	r0, r4
}
    f59e:	b009      	add	sp, #36	; 0x24
    f5a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		smp_pairing_complete(smp, 0);
    f5a4:	f7ff bd50 	b.w	f048 <smp_pairing_complete>
	if (!conn->encrypt) {
    f5a8:	7afb      	ldrb	r3, [r7, #11]
    f5aa:	2b00      	cmp	r3, #0
    f5ac:	f000 8157 	beq.w	f85e <bt_smp_encrypt_change+0x30e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f5b0:	2103      	movs	r1, #3
    f5b2:	4628      	mov	r0, r5
    f5b4:	f015 ffe0 	bl	25578 <atomic_test_bit>
    f5b8:	b928      	cbnz	r0, f5c6 <bt_smp_encrypt_change+0x76>
		smp_reset(smp);
    f5ba:	4620      	mov	r0, r4
}
    f5bc:	b009      	add	sp, #36	; 0x24
    f5be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		smp_reset(smp);
    f5c2:	f016 b875 	b.w	256b0 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f5c6:	2105      	movs	r1, #5
    f5c8:	4628      	mov	r0, r5
    f5ca:	f015 ffd5 	bl	25578 <atomic_test_bit>
    f5ce:	b198      	cbz	r0, f5f8 <bt_smp_encrypt_change+0xa8>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    f5d0:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    f5d4:	071a      	lsls	r2, r3, #28
    f5d6:	d507      	bpl.n	f5e8 <bt_smp_encrypt_change+0x98>
    f5d8:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    f5dc:	071b      	lsls	r3, r3, #28
    f5de:	d503      	bpl.n	f5e8 <bt_smp_encrypt_change+0x98>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    f5e0:	2111      	movs	r1, #17
    f5e2:	4628      	mov	r0, r5
    f5e4:	f015 ffb1 	bl	2554a <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    f5e8:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
    f5ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    f5f0:	f023 0308 	bic.w	r3, r3, #8
    f5f4:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    f5f8:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    f5fc:	07df      	lsls	r7, r3, #31
    f5fe:	d521      	bpl.n	f644 <bt_smp_encrypt_change+0xf4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    f600:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f602:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f606:	f015 ffa0 	bl	2554a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    f60a:	2102      	movs	r1, #2
    f60c:	4628      	mov	r0, r5
    f60e:	f015 ff9c 	bl	2554a <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    f612:	6826      	ldr	r6, [r4, #0]
	struct bt_keys *keys = conn->le.keys;
    f614:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
	if (!keys) {
    f618:	b9e7      	cbnz	r7, f654 <bt_smp_encrypt_change+0x104>
    f61a:	4a93      	ldr	r2, [pc, #588]	; (f868 <bt_smp_encrypt_change+0x318>)
    f61c:	4c93      	ldr	r4, [pc, #588]	; (f86c <bt_smp_encrypt_change+0x31c>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    f61e:	f106 0088 	add.w	r0, r6, #136	; 0x88
    f622:	1aa4      	subs	r4, r4, r2
    f624:	f7f8 f96a 	bl	78fc <bt_addr_le_str_real>
    f628:	f7f5 fbd4 	bl	4dd4 <log_strdup>
    f62c:	08e4      	lsrs	r4, r4, #3
    f62e:	01a4      	lsls	r4, r4, #6
    f630:	f044 0401 	orr.w	r4, r4, #1
    f634:	4601      	mov	r1, r0
    f636:	488e      	ldr	r0, [pc, #568]	; (f870 <bt_smp_encrypt_change+0x320>)
    f638:	4622      	mov	r2, r4
}
    f63a:	b009      	add	sp, #36	; 0x24
    f63c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    f640:	f012 ba9c 	b.w	21b7c <log_1>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    f644:	079e      	lsls	r6, r3, #30
    f646:	d501      	bpl.n	f64c <bt_smp_encrypt_change+0xfc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    f648:	2108      	movs	r1, #8
    f64a:	e7da      	b.n	f602 <bt_smp_encrypt_change+0xb2>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    f64c:	0758      	lsls	r0, r3, #29
    f64e:	d5dc      	bpl.n	f60a <bt_smp_encrypt_change+0xba>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    f650:	210a      	movs	r1, #10
    f652:	e7d6      	b.n	f602 <bt_smp_encrypt_change+0xb2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f654:	2105      	movs	r1, #5
    f656:	f015 ff8f 	bl	25578 <atomic_test_bit>
    f65a:	b9b0      	cbnz	r0, f68a <bt_smp_encrypt_change+0x13a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    f65c:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    f660:	07d9      	lsls	r1, r3, #31
    f662:	d512      	bpl.n	f68a <bt_smp_encrypt_change+0x13a>
	struct bt_keys *keys = conn->le.keys;
    f664:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    f666:	211a      	movs	r1, #26
    f668:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    f66a:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    f66e:	f003 fb09 	bl	12c84 <bt_rand>
    f672:	4682      	mov	sl, r0
    f674:	b310      	cbz	r0, f6bc <bt_smp_encrypt_change+0x16c>
    f676:	497d      	ldr	r1, [pc, #500]	; (f86c <bt_smp_encrypt_change+0x31c>)
    f678:	4b7b      	ldr	r3, [pc, #492]	; (f868 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to get random bytes");
    f67a:	487e      	ldr	r0, [pc, #504]	; (f874 <bt_smp_encrypt_change+0x324>)
    f67c:	1ac9      	subs	r1, r1, r3
    f67e:	08c9      	lsrs	r1, r1, #3
    f680:	0189      	lsls	r1, r1, #6
    f682:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
    f686:	f012 fa6c 	bl	21b62 <log_0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
    f68a:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    f68e:	079a      	lsls	r2, r3, #30
    f690:	f140 80ad 	bpl.w	f7ee <bt_smp_encrypt_change+0x29e>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
    f694:	2108      	movs	r1, #8
    f696:	4620      	mov	r0, r4
    f698:	f015 ff77 	bl	2558a <smp_create_pdu.constprop.0>
		if (!buf) {
    f69c:	4680      	mov	r8, r0
    f69e:	2800      	cmp	r0, #0
    f6a0:	d174      	bne.n	f78c <bt_smp_encrypt_change+0x23c>
    f6a2:	4972      	ldr	r1, [pc, #456]	; (f86c <bt_smp_encrypt_change+0x31c>)
    f6a4:	4b70      	ldr	r3, [pc, #448]	; (f868 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to allocate Ident Info buffer");
    f6a6:	4874      	ldr	r0, [pc, #464]	; (f878 <bt_smp_encrypt_change+0x328>)
    f6a8:	1ac9      	subs	r1, r1, r3
    f6aa:	08c9      	lsrs	r1, r1, #3
    f6ac:	0189      	lsls	r1, r1, #6
    f6ae:	f041 0101 	orr.w	r1, r1, #1
}
    f6b2:	b009      	add	sp, #36	; 0x24
    f6b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    f6b8:	f012 ba53 	b.w	21b62 <log_0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    f6bc:	2106      	movs	r1, #6
    f6be:	4620      	mov	r0, r4
    f6c0:	f015 ff63 	bl	2558a <smp_create_pdu.constprop.0>
		if (!buf) {
    f6c4:	4681      	mov	r9, r0
    f6c6:	b940      	cbnz	r0, f6da <bt_smp_encrypt_change+0x18a>
    f6c8:	4968      	ldr	r1, [pc, #416]	; (f86c <bt_smp_encrypt_change+0x31c>)
    f6ca:	4b67      	ldr	r3, [pc, #412]	; (f868 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    f6cc:	486b      	ldr	r0, [pc, #428]	; (f87c <bt_smp_encrypt_change+0x32c>)
    f6ce:	1ac9      	subs	r1, r1, r3
    f6d0:	08c9      	lsrs	r1, r1, #3
    f6d2:	0189      	lsls	r1, r1, #6
    f6d4:	f041 0101 	orr.w	r1, r1, #1
    f6d8:	e7d5      	b.n	f686 <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
    f6da:	2110      	movs	r1, #16
    f6dc:	3008      	adds	r0, #8
    f6de:	f016 faa0 	bl	25c22 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    f6e2:	f898 200c 	ldrb.w	r2, [r8, #12]
    f6e6:	a901      	add	r1, sp, #4
    f6e8:	4683      	mov	fp, r0
    f6ea:	f014 fa46 	bl	23b7a <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    f6ee:	f898 000c 	ldrb.w	r0, [r8, #12]
    f6f2:	280f      	cmp	r0, #15
    f6f4:	d805      	bhi.n	f702 <bt_smp_encrypt_change+0x1b2>
			(void)memset(info->ltk + keys->enc_size, 0,
    f6f6:	f1c0 0210 	rsb	r2, r0, #16
    f6fa:	4651      	mov	r1, sl
    f6fc:	4458      	add	r0, fp
    f6fe:	f014 fa67 	bl	23bd0 <memset>
		smp_send(smp, buf, NULL, NULL);
    f702:	4649      	mov	r1, r9
    f704:	2200      	movs	r2, #0
    f706:	4620      	mov	r0, r4
    f708:	f7fe fc26 	bl	df58 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    f70c:	2107      	movs	r1, #7
    f70e:	4620      	mov	r0, r4
    f710:	f015 ff3b 	bl	2558a <smp_create_pdu.constprop.0>
		if (!buf) {
    f714:	4681      	mov	r9, r0
    f716:	b940      	cbnz	r0, f72a <bt_smp_encrypt_change+0x1da>
    f718:	4954      	ldr	r1, [pc, #336]	; (f86c <bt_smp_encrypt_change+0x31c>)
    f71a:	4b53      	ldr	r3, [pc, #332]	; (f868 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to allocate Master Ident buffer");
    f71c:	4858      	ldr	r0, [pc, #352]	; (f880 <bt_smp_encrypt_change+0x330>)
    f71e:	1ac9      	subs	r1, r1, r3
    f720:	08c9      	lsrs	r1, r1, #3
    f722:	0189      	lsls	r1, r1, #6
    f724:	f041 0101 	orr.w	r1, r1, #1
    f728:	e7ad      	b.n	f686 <bt_smp_encrypt_change+0x136>
    f72a:	210a      	movs	r1, #10
    f72c:	3008      	adds	r0, #8
    f72e:	f016 fa78 	bl	25c22 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    f732:	2208      	movs	r2, #8
    f734:	4682      	mov	sl, r0
    f736:	a905      	add	r1, sp, #20
    f738:	3002      	adds	r0, #2
    f73a:	f014 fa1e 	bl	23b7a <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    f73e:	2202      	movs	r2, #2
    f740:	a907      	add	r1, sp, #28
    f742:	4650      	mov	r0, sl
    f744:	f014 fa19 	bl	23b7a <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    f748:	4649      	mov	r1, r9
    f74a:	4620      	mov	r0, r4
    f74c:	4a4d      	ldr	r2, [pc, #308]	; (f884 <bt_smp_encrypt_change+0x334>)
    f74e:	f7fe fc03 	bl	df58 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f752:	210d      	movs	r1, #13
    f754:	4628      	mov	r0, r5
    f756:	f015 ff0f 	bl	25578 <atomic_test_bit>
    f75a:	2800      	cmp	r0, #0
    f75c:	d095      	beq.n	f68a <bt_smp_encrypt_change+0x13a>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    f75e:	4640      	mov	r0, r8
    f760:	2101      	movs	r1, #1
    f762:	f016 fa03 	bl	25b6c <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    f766:	a901      	add	r1, sp, #4
    f768:	2210      	movs	r2, #16
    f76a:	f108 0072 	add.w	r0, r8, #114	; 0x72
    f76e:	f014 fa04 	bl	23b7a <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    f772:	a905      	add	r1, sp, #20
    f774:	2208      	movs	r2, #8
    f776:	f108 0068 	add.w	r0, r8, #104	; 0x68
    f77a:	f014 f9fe 	bl	23b7a <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    f77e:	2202      	movs	r2, #2
    f780:	a907      	add	r1, sp, #28
    f782:	f108 0070 	add.w	r0, r8, #112	; 0x70
    f786:	f014 f9f8 	bl	23b7a <memcpy>
    f78a:	e77e      	b.n	f68a <bt_smp_encrypt_change+0x13a>
    f78c:	2110      	movs	r1, #16
    f78e:	3008      	adds	r0, #8
    f790:	f016 fa47 	bl	25c22 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
    f794:	7a31      	ldrb	r1, [r6, #8]
    f796:	f8df 90f0 	ldr.w	r9, [pc, #240]	; f888 <bt_smp_encrypt_change+0x338>
    f79a:	3112      	adds	r1, #18
    f79c:	2210      	movs	r2, #16
    f79e:	eb09 1101 	add.w	r1, r9, r1, lsl #4
    f7a2:	f014 f9ea 	bl	23b7a <memcpy>
		smp_send(smp, buf, NULL, NULL);
    f7a6:	4641      	mov	r1, r8
    f7a8:	2200      	movs	r2, #0
    f7aa:	4620      	mov	r0, r4
    f7ac:	f7fe fbd4 	bl	df58 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
    f7b0:	2109      	movs	r1, #9
    f7b2:	4620      	mov	r0, r4
    f7b4:	f015 fee9 	bl	2558a <smp_create_pdu.constprop.0>
		if (!buf) {
    f7b8:	4680      	mov	r8, r0
    f7ba:	b940      	cbnz	r0, f7ce <bt_smp_encrypt_change+0x27e>
    f7bc:	492b      	ldr	r1, [pc, #172]	; (f86c <bt_smp_encrypt_change+0x31c>)
    f7be:	4b2a      	ldr	r3, [pc, #168]	; (f868 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    f7c0:	4832      	ldr	r0, [pc, #200]	; (f88c <bt_smp_encrypt_change+0x33c>)
    f7c2:	1ac9      	subs	r1, r1, r3
    f7c4:	08c9      	lsrs	r1, r1, #3
    f7c6:	0189      	lsls	r1, r1, #6
    f7c8:	f041 0101 	orr.w	r1, r1, #1
    f7cc:	e771      	b.n	f6b2 <bt_smp_encrypt_change+0x162>
    f7ce:	2107      	movs	r1, #7
    f7d0:	3008      	adds	r0, #8
    f7d2:	f016 fa26 	bl	25c22 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
    f7d6:	7a31      	ldrb	r1, [r6, #8]
    f7d8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    f7dc:	2207      	movs	r2, #7
    f7de:	4449      	add	r1, r9
    f7e0:	f014 f9cb 	bl	23b7a <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
    f7e4:	4a2a      	ldr	r2, [pc, #168]	; (f890 <bt_smp_encrypt_change+0x340>)
    f7e6:	4641      	mov	r1, r8
    f7e8:	4620      	mov	r0, r4
    f7ea:	f7fe fbb5 	bl	df58 <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    f7ee:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    f7f2:	075b      	lsls	r3, r3, #29
    f7f4:	d52e      	bpl.n	f854 <bt_smp_encrypt_change+0x304>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
    f7f6:	210a      	movs	r1, #10
    f7f8:	4620      	mov	r0, r4
    f7fa:	f015 fec6 	bl	2558a <smp_create_pdu.constprop.0>
		if (!buf) {
    f7fe:	4606      	mov	r6, r0
    f800:	b940      	cbnz	r0, f814 <bt_smp_encrypt_change+0x2c4>
    f802:	491a      	ldr	r1, [pc, #104]	; (f86c <bt_smp_encrypt_change+0x31c>)
    f804:	4b18      	ldr	r3, [pc, #96]	; (f868 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to allocate Signing Info buffer");
    f806:	4823      	ldr	r0, [pc, #140]	; (f894 <bt_smp_encrypt_change+0x344>)
    f808:	1ac9      	subs	r1, r1, r3
    f80a:	08c9      	lsrs	r1, r1, #3
    f80c:	0189      	lsls	r1, r1, #6
    f80e:	f041 0101 	orr.w	r1, r1, #1
    f812:	e74e      	b.n	f6b2 <bt_smp_encrypt_change+0x162>
    f814:	2110      	movs	r1, #16
    f816:	3008      	adds	r0, #8
    f818:	f016 fa03 	bl	25c22 <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
    f81c:	2110      	movs	r1, #16
    f81e:	4681      	mov	r9, r0
    f820:	f003 fa30 	bl	12c84 <bt_rand>
    f824:	4680      	mov	r8, r0
    f826:	b9d0      	cbnz	r0, f85e <bt_smp_encrypt_change+0x30e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f828:	210d      	movs	r1, #13
    f82a:	4628      	mov	r0, r5
    f82c:	f015 fea4 	bl	25578 <atomic_test_bit>
    f830:	b158      	cbz	r0, f84a <bt_smp_encrypt_change+0x2fa>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    f832:	2108      	movs	r1, #8
    f834:	4638      	mov	r0, r7
    f836:	f016 f999 	bl	25b6c <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    f83a:	2210      	movs	r2, #16
    f83c:	4649      	mov	r1, r9
    f83e:	f107 0040 	add.w	r0, r7, #64	; 0x40
    f842:	f014 f99a 	bl	23b7a <memcpy>
			keys->local_csrk.cnt = 0U;
    f846:	f8c7 8050 	str.w	r8, [r7, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
    f84a:	4a13      	ldr	r2, [pc, #76]	; (f898 <bt_smp_encrypt_change+0x348>)
    f84c:	4631      	mov	r1, r6
    f84e:	4620      	mov	r0, r4
    f850:	f7fe fb82 	bl	df58 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
    f854:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    f858:	2900      	cmp	r1, #0
    f85a:	f43f ae9f 	beq.w	f59c <bt_smp_encrypt_change+0x4c>
}
    f85e:	b009      	add	sp, #36	; 0x24
    f860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f864:	0002cb85 	.word	0x0002cb85
    f868:	00026fc8 	.word	0x00026fc8
    f86c:	000270b0 	.word	0x000270b0
    f870:	0002ca70 	.word	0x0002ca70
    f874:	0002ca85 	.word	0x0002ca85
    f878:	0002caee 	.word	0x0002caee
    f87c:	0002caa0 	.word	0x0002caa0
    f880:	0002cac7 	.word	0x0002cac7
    f884:	00025adf 	.word	0x00025adf
    f888:	20000000 	.word	0x20000000
    f88c:	0002cb13 	.word	0x0002cb13
    f890:	00025ad9 	.word	0x00025ad9
    f894:	0002cb3d 	.word	0x0002cb3d
    f898:	00025ad3 	.word	0x00025ad3

0000f89c <smp_timeout>:
    f89c:	4b0b      	ldr	r3, [pc, #44]	; (f8cc <smp_timeout+0x30>)
    f89e:	490c      	ldr	r1, [pc, #48]	; (f8d0 <smp_timeout+0x34>)
{
    f8a0:	b510      	push	{r4, lr}
    f8a2:	1ac9      	subs	r1, r1, r3
    f8a4:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    f8a6:	0189      	lsls	r1, r1, #6
{
    f8a8:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    f8aa:	f041 0101 	orr.w	r1, r1, #1
    f8ae:	4809      	ldr	r0, [pc, #36]	; (f8d4 <smp_timeout+0x38>)
    f8b0:	f012 f957 	bl	21b62 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    f8b4:	f5a4 70d4 	sub.w	r0, r4, #424	; 0x1a8
    f8b8:	2108      	movs	r1, #8
    f8ba:	f7ff fbc5 	bl	f048 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    f8be:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    f8c2:	2104      	movs	r1, #4
}
    f8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    f8c8:	f015 be3f 	b.w	2554a <atomic_set_bit>
    f8cc:	00026fc8 	.word	0x00026fc8
    f8d0:	000270b0 	.word	0x000270b0
    f8d4:	0002cb64 	.word	0x0002cb64

0000f8d8 <bt_smp_update_keys>:
{
    f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8da:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    f8dc:	f7fe fae4 	bl	dea8 <smp_chan_get>
	if (!smp) {
    f8e0:	4605      	mov	r5, r0
    f8e2:	2800      	cmp	r0, #0
    f8e4:	f000 8081 	beq.w	f9ea <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f8e8:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
    f8ec:	2103      	movs	r1, #3
    f8ee:	4630      	mov	r0, r6
    f8f0:	f015 fe42 	bl	25578 <atomic_test_bit>
    f8f4:	2800      	cmp	r0, #0
    f8f6:	d078      	beq.n	f9ea <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
    f8f8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f8fc:	b108      	cbz	r0, f902 <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
    f8fe:	f000 f965 	bl	fbcc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f902:	f104 0788 	add.w	r7, r4, #136	; 0x88
    f906:	7a20      	ldrb	r0, [r4, #8]
    f908:	4639      	mov	r1, r7
    f90a:	f000 f88b 	bl	fa24 <bt_keys_get_addr>
    f90e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    f912:	b9b0      	cbnz	r0, f942 <bt_smp_update_keys+0x6a>
    f914:	4a35      	ldr	r2, [pc, #212]	; (f9ec <bt_smp_update_keys+0x114>)
    f916:	4c36      	ldr	r4, [pc, #216]	; (f9f0 <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
    f918:	4638      	mov	r0, r7
    f91a:	1aa4      	subs	r4, r4, r2
    f91c:	f7f7 ffee 	bl	78fc <bt_addr_le_str_real>
    f920:	f7f5 fa58 	bl	4dd4 <log_strdup>
    f924:	08e4      	lsrs	r4, r4, #3
    f926:	01a4      	lsls	r4, r4, #6
    f928:	f044 0401 	orr.w	r4, r4, #1
    f92c:	4601      	mov	r1, r0
    f92e:	4622      	mov	r2, r4
    f930:	4830      	ldr	r0, [pc, #192]	; (f9f4 <bt_smp_update_keys+0x11c>)
    f932:	f012 f923 	bl	21b7c <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f936:	4628      	mov	r0, r5
    f938:	2108      	movs	r1, #8
}
    f93a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f93e:	f016 b83c 	b.w	259ba <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    f942:	210e      	movs	r1, #14
    f944:	4630      	mov	r0, r6
    f946:	f015 fe17 	bl	25578 <atomic_test_bit>
    f94a:	b128      	cbz	r0, f958 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    f94c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    f950:	7b53      	ldrb	r3, [r2, #13]
    f952:	f043 0302 	orr.w	r3, r3, #2
    f956:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    f958:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    f95c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
    f960:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    f962:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
    f964:	d838      	bhi.n	f9d8 <bt_smp_update_keys+0x100>
    f966:	b3d2      	cbz	r2, f9de <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    f968:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    f96c:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    f96e:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    f972:	f895 20c5 	ldrb.w	r2, [r5, #197]	; 0xc5
    f976:	4293      	cmp	r3, r2
    f978:	bf28      	it	cs
    f97a:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    f97c:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f97e:	4630      	mov	r0, r6
    f980:	2105      	movs	r1, #5
    f982:	f015 fdf9 	bl	25578 <atomic_test_bit>
    f986:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    f98a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f98c:	b350      	cbz	r0, f9e4 <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
    f98e:	f042 0210 	orr.w	r2, r2, #16
    f992:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f994:	210d      	movs	r1, #13
    f996:	4630      	mov	r0, r6
    f998:	f015 fdee 	bl	25578 <atomic_test_bit>
    f99c:	b328      	cbz	r0, f9ea <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    f99e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f9a2:	2120      	movs	r1, #32
    f9a4:	f016 f8e2 	bl	25b6c <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    f9a8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f9ac:	f105 01ff 	add.w	r1, r5, #255	; 0xff
    f9b0:	2210      	movs	r2, #16
    f9b2:	301a      	adds	r0, #26
    f9b4:	f014 f8e1 	bl	23b7a <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    f9b8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f9bc:	2208      	movs	r2, #8
    f9be:	2100      	movs	r1, #0
    f9c0:	3010      	adds	r0, #16
    f9c2:	f014 f905 	bl	23bd0 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    f9c6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f9ca:	2202      	movs	r2, #2
}
    f9cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    f9d0:	2100      	movs	r1, #0
    f9d2:	3018      	adds	r0, #24
    f9d4:	f014 b8fc 	b.w	23bd0 <memset>
	switch (smp->method) {
    f9d8:	3a05      	subs	r2, #5
    f9da:	2a01      	cmp	r2, #1
    f9dc:	d9c4      	bls.n	f968 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    f9de:	f023 0301 	bic.w	r3, r3, #1
    f9e2:	e7c3      	b.n	f96c <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    f9e4:	f022 0210 	bic.w	r2, r2, #16
    f9e8:	735a      	strb	r2, [r3, #13]
}
    f9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9ec:	00026fc8 	.word	0x00026fc8
    f9f0:	000270b0 	.word	0x000270b0
    f9f4:	0002c7da 	.word	0x0002c7da

0000f9f8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    f9f8:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    f9fa:	4b07      	ldr	r3, [pc, #28]	; (fa18 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    f9fc:	4807      	ldr	r0, [pc, #28]	; (fa1c <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    f9fe:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    fa02:	f003 0306 	and.w	r3, r3, #6
    fa06:	1f9a      	subs	r2, r3, #6
    fa08:	4253      	negs	r3, r2
    fa0a:	4153      	adcs	r3, r2
    fa0c:	4a04      	ldr	r2, [pc, #16]	; (fa20 <bt_smp_init+0x28>)
    fa0e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    fa10:	f7fa fed0 	bl	a7b4 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    fa14:	2000      	movs	r0, #0
    fa16:	bd08      	pop	{r3, pc}
    fa18:	20000000 	.word	0x20000000
    fa1c:	2000036c 	.word	0x2000036c
    fa20:	2000f2b2 	.word	0x2000f2b2

0000fa24 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    fa24:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    fa26:	4c1f      	ldr	r4, [pc, #124]	; (faa4 <bt_keys_get_addr+0x80>)
    fa28:	7823      	ldrb	r3, [r4, #0]
    fa2a:	4283      	cmp	r3, r0
{
    fa2c:	b085      	sub	sp, #20
    fa2e:	4606      	mov	r6, r0
    fa30:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    fa32:	d02b      	beq.n	fa8c <bt_keys_get_addr+0x68>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    fa34:	2500      	movs	r5, #0
	return memcmp(a, b, sizeof(*a));
    fa36:	481c      	ldr	r0, [pc, #112]	; (faa8 <bt_keys_get_addr+0x84>)
    fa38:	9502      	str	r5, [sp, #8]
    fa3a:	2207      	movs	r2, #7
    fa3c:	a902      	add	r1, sp, #8
    fa3e:	f8cd 500b 	str.w	r5, [sp, #11]
    fa42:	f014 f889 	bl	23b58 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    fa46:	b188      	cbz	r0, fa6c <bt_keys_get_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    fa48:	2207      	movs	r2, #7
    fa4a:	4917      	ldr	r1, [pc, #92]	; (faa8 <bt_keys_get_addr+0x84>)
    fa4c:	4668      	mov	r0, sp
    fa4e:	f014 f894 	bl	23b7a <memcpy>
			}
		}

		/* Use a copy as bt_unpair will clear the oldest key. */
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
		bt_unpair(oldest->id, &oldest_addr);
    fa52:	4669      	mov	r1, sp
    fa54:	7820      	ldrb	r0, [r4, #0]
    fa56:	f7f9 fdb7 	bl	95c8 <bt_unpair>
	return memcmp(a, b, sizeof(*a));
    fa5a:	4813      	ldr	r0, [pc, #76]	; (faa8 <bt_keys_get_addr+0x84>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
    fa5c:	9502      	str	r5, [sp, #8]
    fa5e:	2207      	movs	r2, #7
    fa60:	a902      	add	r1, sp, #8
    fa62:	f8cd 500b 	str.w	r5, [sp, #11]
    fa66:	f014 f877 	bl	23b58 <memcmp>
    fa6a:	b9b8      	cbnz	r0, fa9c <bt_keys_get_addr+0x78>
	memcpy(dst, src, sizeof(*dst));
    fa6c:	2207      	movs	r2, #7
    fa6e:	480e      	ldr	r0, [pc, #56]	; (faa8 <bt_keys_get_addr+0x84>)
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
		keys->id = id;
    fa70:	7026      	strb	r6, [r4, #0]
    fa72:	4639      	mov	r1, r7
    fa74:	f014 f881 	bl	23b7a <memcpy>
		bt_addr_le_copy(&keys->addr, addr);
#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
		keys->aging_counter = ++aging_counter_val;
    fa78:	4a0c      	ldr	r2, [pc, #48]	; (faac <bt_keys_get_addr+0x88>)
		last_keys_updated = keys;
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
		BT_DBG("created %p for %s", keys, bt_addr_le_str(addr));
		return keys;
    fa7a:	480a      	ldr	r0, [pc, #40]	; (faa4 <bt_keys_get_addr+0x80>)
		keys->aging_counter = ++aging_counter_val;
    fa7c:	6813      	ldr	r3, [r2, #0]
    fa7e:	3301      	adds	r3, #1
    fa80:	6013      	str	r3, [r2, #0]
    fa82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		last_keys_updated = keys;
    fa86:	4b0a      	ldr	r3, [pc, #40]	; (fab0 <bt_keys_get_addr+0x8c>)
    fa88:	601c      	str	r4, [r3, #0]
		return keys;
    fa8a:	e008      	b.n	fa9e <bt_keys_get_addr+0x7a>
	return memcmp(a, b, sizeof(*a));
    fa8c:	2207      	movs	r2, #7
    fa8e:	1c60      	adds	r0, r4, #1
    fa90:	f014 f862 	bl	23b58 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    fa94:	2800      	cmp	r0, #0
    fa96:	d1cd      	bne.n	fa34 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
    fa98:	4620      	mov	r0, r4
    fa9a:	e000      	b.n	fa9e <bt_keys_get_addr+0x7a>
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    fa9c:	4628      	mov	r0, r5
}
    fa9e:	b005      	add	sp, #20
    faa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    faa2:	bf00      	nop
    faa4:	2000d784 	.word	0x2000d784
    faa8:	2000d785 	.word	0x2000d785
    faac:	2000d780 	.word	0x2000d780
    fab0:	2000d80c 	.word	0x2000d80c

0000fab4 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
    fab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fab6:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
    fab8:	4908      	ldr	r1, [pc, #32]	; (fadc <bt_foreach_bond+0x28>)
    faba:	89cb      	ldrh	r3, [r1, #14]
{
    fabc:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
    fabe:	b153      	cbz	r3, fad6 <bt_foreach_bond+0x22>
    fac0:	780b      	ldrb	r3, [r1, #0]
    fac2:	4283      	cmp	r3, r0
    fac4:	d107      	bne.n	fad6 <bt_foreach_bond+0x22>
	memcpy(dst, src, sizeof(*dst));
    fac6:	3101      	adds	r1, #1
    fac8:	2207      	movs	r2, #7
    faca:	4668      	mov	r0, sp
    facc:	f014 f855 	bl	23b7a <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
    fad0:	4629      	mov	r1, r5
    fad2:	4668      	mov	r0, sp
    fad4:	47a0      	blx	r4
		}
	}
}
    fad6:	b003      	add	sp, #12
    fad8:	bd30      	pop	{r4, r5, pc}
    fada:	bf00      	nop
    fadc:	2000d784 	.word	0x2000d784

0000fae0 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    fae0:	460b      	mov	r3, r1
    fae2:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    fae4:	4a04      	ldr	r2, [pc, #16]	; (faf8 <bt_keys_foreach+0x18>)
{
    fae6:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    fae8:	89d4      	ldrh	r4, [r2, #14]
    faea:	4204      	tst	r4, r0
    faec:	d002      	beq.n	faf4 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    faee:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    faf0:	4610      	mov	r0, r2
    faf2:	4718      	bx	r3
}
    faf4:	bc10      	pop	{r4}
    faf6:	4770      	bx	lr
    faf8:	2000d784 	.word	0x2000d784

0000fafc <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
    fafc:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
    fafe:	4903      	ldr	r1, [pc, #12]	; (fb0c <keys_commit+0x10>)
    fb00:	2200      	movs	r2, #0
    fb02:	2002      	movs	r0, #2
    fb04:	f7ff ffec 	bl	fae0 <bt_keys_foreach>
	}

	return 0;
}
    fb08:	2000      	movs	r0, #0
    fb0a:	bd08      	pop	{r3, pc}
    fb0c:	00025b49 	.word	0x00025b49

0000fb10 <bt_keys_find>:
{
    fb10:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    fb12:	4c09      	ldr	r4, [pc, #36]	; (fb38 <bt_keys_find+0x28>)
{
    fb14:	460b      	mov	r3, r1
    fb16:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    fb18:	89e2      	ldrh	r2, [r4, #14]
    fb1a:	4202      	tst	r2, r0
    fb1c:	d007      	beq.n	fb2e <bt_keys_find+0x1e>
    fb1e:	7822      	ldrb	r2, [r4, #0]
    fb20:	429a      	cmp	r2, r3
    fb22:	d104      	bne.n	fb2e <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    fb24:	2207      	movs	r2, #7
    fb26:	1c60      	adds	r0, r4, #1
    fb28:	f014 f816 	bl	23b58 <memcmp>
    fb2c:	b108      	cbz	r0, fb32 <bt_keys_find+0x22>
	return NULL;
    fb2e:	2000      	movs	r0, #0
}
    fb30:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    fb32:	4620      	mov	r0, r4
    fb34:	e7fc      	b.n	fb30 <bt_keys_find+0x20>
    fb36:	bf00      	nop
    fb38:	2000d784 	.word	0x2000d784

0000fb3c <bt_keys_find_irk>:
{
    fb3c:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    fb3e:	780b      	ldrb	r3, [r1, #0]
    fb40:	2b01      	cmp	r3, #1
    fb42:	4606      	mov	r6, r0
    fb44:	460d      	mov	r5, r1
    fb46:	d001      	beq.n	fb4c <bt_keys_find_irk+0x10>
		return NULL;
    fb48:	2000      	movs	r0, #0
}
    fb4a:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    fb4c:	798b      	ldrb	r3, [r1, #6]
    fb4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fb52:	2b40      	cmp	r3, #64	; 0x40
    fb54:	d1f8      	bne.n	fb48 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    fb56:	4c12      	ldr	r4, [pc, #72]	; (fba0 <bt_keys_find_irk+0x64>)
    fb58:	89e3      	ldrh	r3, [r4, #14]
    fb5a:	079b      	lsls	r3, r3, #30
    fb5c:	d5f4      	bpl.n	fb48 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    fb5e:	7823      	ldrb	r3, [r4, #0]
    fb60:	42b3      	cmp	r3, r6
    fb62:	d10b      	bne.n	fb7c <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
    fb64:	2206      	movs	r2, #6
    fb66:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    fb6a:	1c68      	adds	r0, r5, #1
    fb6c:	f013 fff4 	bl	23b58 <memcmp>
    fb70:	b908      	cbnz	r0, fb76 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
    fb72:	4620      	mov	r0, r4
    fb74:	e7e9      	b.n	fb4a <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    fb76:	89e3      	ldrh	r3, [r4, #14]
    fb78:	079a      	lsls	r2, r3, #30
    fb7a:	d5e5      	bpl.n	fb48 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    fb7c:	7823      	ldrb	r3, [r4, #0]
    fb7e:	42b3      	cmp	r3, r6
    fb80:	d1e2      	bne.n	fb48 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    fb82:	3501      	adds	r5, #1
    fb84:	4807      	ldr	r0, [pc, #28]	; (fba4 <bt_keys_find_irk+0x68>)
    fb86:	4629      	mov	r1, r5
    fb88:	f014 f894 	bl	23cb4 <bt_rpa_irk_matches>
    fb8c:	2800      	cmp	r0, #0
    fb8e:	d0db      	beq.n	fb48 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    fb90:	4805      	ldr	r0, [pc, #20]	; (fba8 <bt_keys_find_irk+0x6c>)
    fb92:	2206      	movs	r2, #6
    fb94:	4629      	mov	r1, r5
    fb96:	f013 fff0 	bl	23b7a <memcpy>
			return &key_pool[i];
    fb9a:	4801      	ldr	r0, [pc, #4]	; (fba0 <bt_keys_find_irk+0x64>)
}
    fb9c:	e7d5      	b.n	fb4a <bt_keys_find_irk+0xe>
    fb9e:	bf00      	nop
    fba0:	2000d784 	.word	0x2000d784
    fba4:	2000d7ae 	.word	0x2000d7ae
    fba8:	2000d7be 	.word	0x2000d7be

0000fbac <bt_keys_find_addr>:
{
    fbac:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
    fbae:	4c06      	ldr	r4, [pc, #24]	; (fbc8 <bt_keys_find_addr+0x1c>)
    fbb0:	7823      	ldrb	r3, [r4, #0]
    fbb2:	4283      	cmp	r3, r0
    fbb4:	d104      	bne.n	fbc0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    fbb6:	2207      	movs	r2, #7
    fbb8:	1c60      	adds	r0, r4, #1
    fbba:	f013 ffcd 	bl	23b58 <memcmp>
    fbbe:	b108      	cbz	r0, fbc4 <bt_keys_find_addr+0x18>
	return NULL;
    fbc0:	2000      	movs	r0, #0
}
    fbc2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    fbc4:	4620      	mov	r0, r4
    fbc6:	e7fc      	b.n	fbc2 <bt_keys_find_addr+0x16>
    fbc8:	2000d784 	.word	0x2000d784

0000fbcc <bt_keys_clear>:
{
    fbcc:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
    fbce:	7a03      	ldrb	r3, [r0, #8]
    fbd0:	075b      	lsls	r3, r3, #29
{
    fbd2:	b08c      	sub	sp, #48	; 0x30
    fbd4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
    fbd6:	d501      	bpl.n	fbdc <bt_keys_clear+0x10>
		bt_id_del(keys);
    fbd8:	f7f9 fe9c 	bl	9914 <bt_id_del>
		if (keys->id) {
    fbdc:	4625      	mov	r5, r4
    fbde:	f815 2b01 	ldrb.w	r2, [r5], #1
    fbe2:	b1b2      	cbz	r2, fc12 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
    fbe4:	ae02      	add	r6, sp, #8
    fbe6:	2104      	movs	r1, #4
    fbe8:	4630      	mov	r0, r6
    fbea:	f011 faa0 	bl	2112e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
    fbee:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
    fbf0:	4a09      	ldr	r2, [pc, #36]	; (fc18 <bt_keys_clear+0x4c>)
    fbf2:	462b      	mov	r3, r5
    fbf4:	2124      	movs	r1, #36	; 0x24
    fbf6:	a803      	add	r0, sp, #12
    fbf8:	f7f8 f92e 	bl	7e58 <bt_settings_encode_key>
		settings_delete(key);
    fbfc:	a803      	add	r0, sp, #12
    fbfe:	f012 fc3e 	bl	2247e <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
    fc02:	2288      	movs	r2, #136	; 0x88
    fc04:	2100      	movs	r1, #0
    fc06:	4620      	mov	r0, r4
}
    fc08:	b00c      	add	sp, #48	; 0x30
    fc0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
    fc0e:	f013 bfdf 	b.w	23bd0 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
    fc12:	9200      	str	r2, [sp, #0]
    fc14:	e7ec      	b.n	fbf0 <bt_keys_clear+0x24>
    fc16:	bf00      	nop
    fc18:	0002ccd8 	.word	0x0002ccd8

0000fc1c <keys_set>:
{
    fc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc1e:	4614      	mov	r4, r2
    fc20:	b0a3      	sub	sp, #140	; 0x8c
	if (!name) {
    fc22:	4606      	mov	r6, r0
    fc24:	b970      	cbnz	r0, fc44 <keys_set+0x28>
    fc26:	4952      	ldr	r1, [pc, #328]	; (fd70 <keys_set+0x154>)
    fc28:	4b52      	ldr	r3, [pc, #328]	; (fd74 <keys_set+0x158>)
		BT_ERR("Insufficient number of arguments");
    fc2a:	4853      	ldr	r0, [pc, #332]	; (fd78 <keys_set+0x15c>)
    fc2c:	1ac9      	subs	r1, r1, r3
    fc2e:	08c9      	lsrs	r1, r1, #3
    fc30:	0189      	lsls	r1, r1, #6
    fc32:	f041 0101 	orr.w	r1, r1, #1
    fc36:	f011 ff94 	bl	21b62 <log_0>
		return -EINVAL;
    fc3a:	f06f 0415 	mvn.w	r4, #21
}
    fc3e:	4620      	mov	r0, r4
    fc40:	b023      	add	sp, #140	; 0x8c
    fc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
    fc44:	227c      	movs	r2, #124	; 0x7c
    fc46:	a903      	add	r1, sp, #12
    fc48:	4618      	mov	r0, r3
    fc4a:	47a0      	blx	r4
	if (len < 0) {
    fc4c:	1e05      	subs	r5, r0, #0
    fc4e:	da0b      	bge.n	fc68 <keys_set+0x4c>
    fc50:	4a47      	ldr	r2, [pc, #284]	; (fd70 <keys_set+0x154>)
    fc52:	4b48      	ldr	r3, [pc, #288]	; (fd74 <keys_set+0x158>)
		BT_ERR("Failed to read value (err %zd)", len);
    fc54:	4849      	ldr	r0, [pc, #292]	; (fd7c <keys_set+0x160>)
    fc56:	1ad2      	subs	r2, r2, r3
    fc58:	08d2      	lsrs	r2, r2, #3
    fc5a:	0192      	lsls	r2, r2, #6
    fc5c:	f042 0201 	orr.w	r2, r2, #1
    fc60:	4629      	mov	r1, r5
    fc62:	f011 ff8b 	bl	21b7c <log_1>
    fc66:	e7e8      	b.n	fc3a <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
    fc68:	a901      	add	r1, sp, #4
    fc6a:	4630      	mov	r0, r6
    fc6c:	f014 f881 	bl	23d72 <bt_settings_decode_key>
	if (err) {
    fc70:	4604      	mov	r4, r0
    fc72:	b148      	cbz	r0, fc88 <keys_set+0x6c>
    fc74:	4a3e      	ldr	r2, [pc, #248]	; (fd70 <keys_set+0x154>)
    fc76:	4b3f      	ldr	r3, [pc, #252]	; (fd74 <keys_set+0x158>)
		BT_ERR("Unable to decode address %s", name);
    fc78:	4841      	ldr	r0, [pc, #260]	; (fd80 <keys_set+0x164>)
    fc7a:	1ad2      	subs	r2, r2, r3
    fc7c:	08d2      	lsrs	r2, r2, #3
    fc7e:	0192      	lsls	r2, r2, #6
    fc80:	f042 0201 	orr.w	r2, r2, #1
    fc84:	4631      	mov	r1, r6
    fc86:	e7ec      	b.n	fc62 <keys_set+0x46>
	settings_name_next(name, &next);
    fc88:	4669      	mov	r1, sp
    fc8a:	4630      	mov	r0, r6
    fc8c:	f012 fc1e 	bl	224cc <settings_name_next>
	if (!next) {
    fc90:	9800      	ldr	r0, [sp, #0]
    fc92:	b188      	cbz	r0, fcb8 <keys_set+0x9c>
		id = strtol(next, NULL, 10);
    fc94:	220a      	movs	r2, #10
    fc96:	4621      	mov	r1, r4
    fc98:	f013 fea1 	bl	239de <strtol>
    fc9c:	b2c0      	uxtb	r0, r0
	if (!len) {
    fc9e:	b9fd      	cbnz	r5, fce0 <keys_set+0xc4>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
    fca0:	4601      	mov	r1, r0
    fca2:	aa01      	add	r2, sp, #4
    fca4:	203f      	movs	r0, #63	; 0x3f
    fca6:	f7ff ff33 	bl	fb10 <bt_keys_find>
		if (keys) {
    fcaa:	b138      	cbz	r0, fcbc <keys_set+0xa0>
			(void)memset(keys, 0, sizeof(*keys));
    fcac:	2288      	movs	r2, #136	; 0x88
    fcae:	4629      	mov	r1, r5
    fcb0:	f013 ff8e 	bl	23bd0 <memset>
		return 0;
    fcb4:	462c      	mov	r4, r5
    fcb6:	e7c2      	b.n	fc3e <keys_set+0x22>
		id = BT_ID_DEFAULT;
    fcb8:	4620      	mov	r0, r4
    fcba:	e7f0      	b.n	fc9e <keys_set+0x82>
    fcbc:	4a2d      	ldr	r2, [pc, #180]	; (fd74 <keys_set+0x158>)
    fcbe:	4c2c      	ldr	r4, [pc, #176]	; (fd70 <keys_set+0x154>)
			BT_WARN("Unable to find deleted keys for %s",
    fcc0:	a801      	add	r0, sp, #4
    fcc2:	1aa4      	subs	r4, r4, r2
    fcc4:	f7f7 fe1a 	bl	78fc <bt_addr_le_str_real>
    fcc8:	f7f5 f884 	bl	4dd4 <log_strdup>
    fccc:	08e4      	lsrs	r4, r4, #3
    fcce:	01a4      	lsls	r4, r4, #6
    fcd0:	f044 0402 	orr.w	r4, r4, #2
    fcd4:	4601      	mov	r1, r0
    fcd6:	4622      	mov	r2, r4
    fcd8:	482a      	ldr	r0, [pc, #168]	; (fd84 <keys_set+0x168>)
    fcda:	f011 ff4f 	bl	21b7c <log_1>
    fcde:	e7e9      	b.n	fcb4 <keys_set+0x98>
	keys = bt_keys_get_addr(id, &addr);
    fce0:	a901      	add	r1, sp, #4
    fce2:	f7ff fe9f 	bl	fa24 <bt_keys_get_addr>
	if (!keys) {
    fce6:	4607      	mov	r7, r0
    fce8:	b998      	cbnz	r0, fd12 <keys_set+0xf6>
    fcea:	4a22      	ldr	r2, [pc, #136]	; (fd74 <keys_set+0x158>)
    fcec:	4c20      	ldr	r4, [pc, #128]	; (fd70 <keys_set+0x154>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
    fcee:	a801      	add	r0, sp, #4
    fcf0:	1aa4      	subs	r4, r4, r2
    fcf2:	f7f7 fe03 	bl	78fc <bt_addr_le_str_real>
    fcf6:	f7f5 f86d 	bl	4dd4 <log_strdup>
    fcfa:	08e4      	lsrs	r4, r4, #3
    fcfc:	01a4      	lsls	r4, r4, #6
    fcfe:	f044 0401 	orr.w	r4, r4, #1
    fd02:	4601      	mov	r1, r0
    fd04:	4622      	mov	r2, r4
    fd06:	4820      	ldr	r0, [pc, #128]	; (fd88 <keys_set+0x16c>)
    fd08:	f011 ff38 	bl	21b7c <log_1>
		return -ENOMEM;
    fd0c:	f06f 040b 	mvn.w	r4, #11
    fd10:	e795      	b.n	fc3e <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
    fd12:	2d7c      	cmp	r5, #124	; 0x7c
    fd14:	d013      	beq.n	fd3e <keys_set+0x122>
    fd16:	4b16      	ldr	r3, [pc, #88]	; (fd70 <keys_set+0x154>)
    fd18:	4a16      	ldr	r2, [pc, #88]	; (fd74 <keys_set+0x158>)
    fd1a:	1a9b      	subs	r3, r3, r2
    fd1c:	08db      	lsrs	r3, r3, #3
			if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
    fd1e:	2d78      	cmp	r5, #120	; 0x78
    fd20:	ea4f 1383 	mov.w	r3, r3, lsl #6
    fd24:	d119      	bne.n	fd5a <keys_set+0x13e>
				BT_WARN("Keys for %s have no aging counter",
    fd26:	a801      	add	r0, sp, #4
    fd28:	f043 0602 	orr.w	r6, r3, #2
    fd2c:	f7f7 fde6 	bl	78fc <bt_addr_le_str_real>
    fd30:	f7f5 f850 	bl	4dd4 <log_strdup>
    fd34:	4632      	mov	r2, r6
    fd36:	4601      	mov	r1, r0
    fd38:	4814      	ldr	r0, [pc, #80]	; (fd8c <keys_set+0x170>)
    fd3a:	f011 ff1f 	bl	21b7c <log_1>
		memcpy(keys->storage_start, val, len);
    fd3e:	462a      	mov	r2, r5
    fd40:	a903      	add	r1, sp, #12
    fd42:	f107 000c 	add.w	r0, r7, #12
    fd46:	f013 ff18 	bl	23b7a <memcpy>
	if (aging_counter_val < keys->aging_counter) {
    fd4a:	4b11      	ldr	r3, [pc, #68]	; (fd90 <keys_set+0x174>)
    fd4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    fd50:	6819      	ldr	r1, [r3, #0]
    fd52:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
    fd54:	bf88      	it	hi
    fd56:	601a      	strhi	r2, [r3, #0]
    fd58:	e771      	b.n	fc3e <keys_set+0x22>
			BT_ERR("Invalid key length %zd != %zu", len,
    fd5a:	480e      	ldr	r0, [pc, #56]	; (fd94 <keys_set+0x178>)
    fd5c:	f043 0301 	orr.w	r3, r3, #1
    fd60:	227c      	movs	r2, #124	; 0x7c
    fd62:	4629      	mov	r1, r5
    fd64:	f011 ff1e 	bl	21ba4 <log_2>
			bt_keys_clear(keys);
    fd68:	4638      	mov	r0, r7
    fd6a:	f7ff ff2f 	bl	fbcc <bt_keys_clear>
			return -EINVAL;
    fd6e:	e764      	b.n	fc3a <keys_set+0x1e>
    fd70:	00027090 	.word	0x00027090
    fd74:	00026fc8 	.word	0x00026fc8
    fd78:	0002b3d2 	.word	0x0002b3d2
    fd7c:	0002cc17 	.word	0x0002cc17
    fd80:	0002c5d0 	.word	0x0002c5d0
    fd84:	0002cc36 	.word	0x0002cc36
    fd88:	0002cc59 	.word	0x0002cc59
    fd8c:	0002cc78 	.word	0x0002cc78
    fd90:	2000d780 	.word	0x2000d780
    fd94:	0002cc9a 	.word	0x0002cc9a

0000fd98 <bt_keys_store>:
{
    fd98:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
    fd9a:	4605      	mov	r5, r0
{
    fd9c:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
    fd9e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    fda2:	4604      	mov	r4, r0
	if (keys->id) {
    fda4:	b30a      	cbz	r2, fdea <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
    fda6:	ae02      	add	r6, sp, #8
    fda8:	2104      	movs	r1, #4
    fdaa:	4630      	mov	r0, r6
    fdac:	f011 f9bf 	bl	2112e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    fdb0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    fdb2:	4a0f      	ldr	r2, [pc, #60]	; (fdf0 <bt_keys_store+0x58>)
    fdb4:	462b      	mov	r3, r5
    fdb6:	2124      	movs	r1, #36	; 0x24
    fdb8:	a803      	add	r0, sp, #12
    fdba:	f7f8 f84d 	bl	7e58 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
    fdbe:	f104 010c 	add.w	r1, r4, #12
    fdc2:	227c      	movs	r2, #124	; 0x7c
    fdc4:	a803      	add	r0, sp, #12
    fdc6:	f7f6 f909 	bl	5fdc <settings_save_one>
	if (err) {
    fdca:	4604      	mov	r4, r0
    fdcc:	b150      	cbz	r0, fde4 <bt_keys_store+0x4c>
    fdce:	4a09      	ldr	r2, [pc, #36]	; (fdf4 <bt_keys_store+0x5c>)
    fdd0:	4b09      	ldr	r3, [pc, #36]	; (fdf8 <bt_keys_store+0x60>)
    fdd2:	1ad2      	subs	r2, r2, r3
    fdd4:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
    fdd6:	0192      	lsls	r2, r2, #6
    fdd8:	4601      	mov	r1, r0
    fdda:	f042 0201 	orr.w	r2, r2, #1
    fdde:	4807      	ldr	r0, [pc, #28]	; (fdfc <bt_keys_store+0x64>)
    fde0:	f011 fecc 	bl	21b7c <log_1>
}
    fde4:	4620      	mov	r0, r4
    fde6:	b00c      	add	sp, #48	; 0x30
    fde8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    fdea:	9200      	str	r2, [sp, #0]
    fdec:	e7e1      	b.n	fdb2 <bt_keys_store+0x1a>
    fdee:	bf00      	nop
    fdf0:	0002ccd8 	.word	0x0002ccd8
    fdf4:	00027090 	.word	0x00027090
    fdf8:	00026fc8 	.word	0x00026fc8
    fdfc:	0002ccb8 	.word	0x0002ccb8

0000fe00 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
    fe00:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
    fe02:	f7ff fed3 	bl	fbac <bt_keys_find_addr>

	if (!keys) {
    fe06:	b150      	cbz	r0, fe1e <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
    fe08:	4a05      	ldr	r2, [pc, #20]	; (fe20 <bt_keys_update_usage+0x20>)
    fe0a:	6813      	ldr	r3, [r2, #0]
    fe0c:	4283      	cmp	r3, r0
    fe0e:	d006      	beq.n	fe1e <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
    fe10:	4904      	ldr	r1, [pc, #16]	; (fe24 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
    fe12:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
    fe14:	680b      	ldr	r3, [r1, #0]
    fe16:	3301      	adds	r3, #1
    fe18:	600b      	str	r3, [r1, #0]
    fe1a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
    fe1e:	bd08      	pop	{r3, pc}
    fe20:	2000d80c 	.word	0x2000d80c
    fe24:	2000d780 	.word	0x2000d780

0000fe28 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    fe28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe2c:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    fe2e:	1dc2      	adds	r2, r0, #7
    fe30:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    fe34:	1e75      	subs	r5, r6, #1
{
    fe36:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    fe38:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    fe3a:	6018      	str	r0, [r3, #0]
{
    fe3c:	b082      	sub	sp, #8
    fe3e:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    fe40:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    fe42:	2100      	movs	r1, #0
    fe44:	2204      	movs	r2, #4
    fe46:	fb07 0005 	mla	r0, r7, r5, r0
    fe4a:	f013 fec1 	bl	23bd0 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    fe4e:	b1bd      	cbz	r5, fe80 <mem_init+0x58>
    fe50:	3e02      	subs	r6, #2
    fe52:	b2b6      	uxth	r6, r6
    fe54:	fb06 7307 	mla	r3, r6, r7, r7
    fe58:	fb06 f807 	mul.w	r8, r6, r7
    fe5c:	441c      	add	r4, r3
    fe5e:	eba8 0803 	sub.w	r8, r8, r3
    fe62:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    fe64:	2204      	movs	r2, #4
    fe66:	eb04 0008 	add.w	r0, r4, r8
    fe6a:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    fe6e:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    fe70:	f013 fe83 	bl	23b7a <memcpy>
	while (mem_count--) {
    fe74:	42b5      	cmp	r5, r6
    fe76:	eba4 0407 	sub.w	r4, r4, r7
    fe7a:	f105 0501 	add.w	r5, r5, #1
    fe7e:	d1f1      	bne.n	fe64 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    fe80:	b002      	add	sp, #8
    fe82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe86:	bf00      	nop

0000fe88 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    fe88:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    fe8a:	6805      	ldr	r5, [r0, #0]
{
    fe8c:	b082      	sub	sp, #8
	if (*mem_head) {
    fe8e:	b195      	cbz	r5, feb6 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    fe90:	1deb      	adds	r3, r5, #7
    fe92:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    fe96:	2204      	movs	r2, #4
    fe98:	4604      	mov	r4, r0
    fe9a:	4629      	mov	r1, r5
    fe9c:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    fea0:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    fea2:	f013 fe6a 	bl	23b7a <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    fea6:	9b01      	ldr	r3, [sp, #4]
    fea8:	b123      	cbz	r3, feb4 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    feaa:	1dda      	adds	r2, r3, #7
    feac:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    feb0:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    feb2:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    feb4:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    feb6:	4628      	mov	r0, r5
    feb8:	b002      	add	sp, #8
    feba:	bd70      	pop	{r4, r5, r6, pc}

0000febc <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    febc:	680b      	ldr	r3, [r1, #0]
{
    febe:	b570      	push	{r4, r5, r6, lr}
    fec0:	460c      	mov	r4, r1
    fec2:	4605      	mov	r5, r0
	if (*mem_head) {
    fec4:	b183      	cbz	r3, fee8 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    fec6:	3307      	adds	r3, #7
    fec8:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    fecc:	881e      	ldrh	r6, [r3, #0]
    fece:	3601      	adds	r6, #1
    fed0:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    fed2:	2204      	movs	r2, #4
    fed4:	4621      	mov	r1, r4
    fed6:	4628      	mov	r0, r5
    fed8:	f013 fe4f 	bl	23b7a <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    fedc:	1deb      	adds	r3, r5, #7
    fede:	f023 0303 	bic.w	r3, r3, #3
    fee2:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    fee4:	6025      	str	r5, [r4, #0]
}
    fee6:	bd70      	pop	{r4, r5, r6, pc}
    fee8:	2601      	movs	r6, #1
    feea:	e7f2      	b.n	fed2 <mem_release+0x16>

0000feec <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    feec:	fb02 0001 	mla	r0, r2, r1, r0
    fef0:	4770      	bx	lr
    fef2:	bf00      	nop

0000fef4 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    fef4:	1a40      	subs	r0, r0, r1
    fef6:	b280      	uxth	r0, r0
}
    fef8:	fbb0 f0f2 	udiv	r0, r0, r2
    fefc:	4770      	bx	lr
    fefe:	bf00      	nop

0000ff00 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    ff00:	1e53      	subs	r3, r2, #1
	src += len;
    ff02:	4411      	add	r1, r2
	while (len--) {
    ff04:	b29b      	uxth	r3, r3
    ff06:	b142      	cbz	r2, ff1a <mem_rcopy+0x1a>
    ff08:	43db      	mvns	r3, r3
    ff0a:	3801      	subs	r0, #1
    ff0c:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    ff0e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    ff12:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    ff16:	4291      	cmp	r1, r2
    ff18:	d1f9      	bne.n	ff0e <mem_rcopy+0xe>
	}
}
    ff1a:	4770      	bx	lr

0000ff1c <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    ff1c:	4401      	add	r1, r0
    ff1e:	e002      	b.n	ff26 <mem_nz+0xa>
		if (*src++) {
    ff20:	f810 3b01 	ldrb.w	r3, [r0], #1
    ff24:	b91b      	cbnz	r3, ff2e <mem_nz+0x12>
	while (len--) {
    ff26:	4288      	cmp	r0, r1
    ff28:	d1fa      	bne.n	ff20 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    ff2a:	2000      	movs	r0, #0
    ff2c:	4770      	bx	lr
			return 1;
    ff2e:	2001      	movs	r0, #1
}
    ff30:	4770      	bx	lr
    ff32:	bf00      	nop

0000ff34 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    ff34:	6010      	str	r0, [r2, #0]
    ff36:	6008      	str	r0, [r1, #0]

	return link;
}
    ff38:	4770      	bx	lr
    ff3a:	bf00      	nop

0000ff3c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    ff3c:	680a      	ldr	r2, [r1, #0]
{
    ff3e:	4603      	mov	r3, r0
	if (*head != *tail) {
    ff40:	6800      	ldr	r0, [r0, #0]
    ff42:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    ff44:	bf05      	ittet	eq
    ff46:	2200      	moveq	r2, #0
    ff48:	600a      	streq	r2, [r1, #0]
		return NULL;
    ff4a:	2000      	movne	r0, #0
	*head = *tail = NULL;
    ff4c:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    ff4e:	4770      	bx	lr

0000ff50 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    ff50:	f8d2 c000 	ldr.w	ip, [r2]
    ff54:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    ff58:	f8d2 c000 	ldr.w	ip, [r2]
    ff5c:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    ff60:	6010      	str	r0, [r2, #0]

	return link;
}
    ff62:	4770      	bx	lr

0000ff64 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    ff64:	4288      	cmp	r0, r1
    ff66:	d003      	beq.n	ff70 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    ff68:	b11a      	cbz	r2, ff72 <memq_peek+0xe>
		*mem = head->mem;
    ff6a:	6843      	ldr	r3, [r0, #4]
    ff6c:	6013      	str	r3, [r2, #0]
    ff6e:	4770      	bx	lr
		return NULL;
    ff70:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    ff72:	4770      	bx	lr

0000ff74 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    ff74:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    ff76:	4283      	cmp	r3, r0
    ff78:	d009      	beq.n	ff8e <memq_dequeue+0x1a>
	if (mem) {
    ff7a:	b12a      	cbz	r2, ff88 <memq_dequeue+0x14>
		*mem = head->mem;
    ff7c:	6858      	ldr	r0, [r3, #4]
    ff7e:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    ff80:	681a      	ldr	r2, [r3, #0]
    ff82:	600a      	str	r2, [r1, #0]

	return old_head;
}
    ff84:	4618      	mov	r0, r3
    ff86:	4770      	bx	lr
	if (old_head == NULL) {
    ff88:	2b00      	cmp	r3, #0
    ff8a:	d1f9      	bne.n	ff80 <memq_dequeue+0xc>
    ff8c:	e7fa      	b.n	ff84 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    ff8e:	2300      	movs	r3, #0
    ff90:	e7f8      	b.n	ff84 <memq_dequeue+0x10>
    ff92:	bf00      	nop

0000ff94 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    ff94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff98:	f8df 8030 	ldr.w	r8, [pc, #48]	; ffcc <mayfly_init+0x38>
    ff9c:	4e0c      	ldr	r6, [pc, #48]	; (ffd0 <mayfly_init+0x3c>)
    ff9e:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    ffa0:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    ffa4:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    ffa6:	1d22      	adds	r2, r4, #4
    ffa8:	4621      	mov	r1, r4
    ffaa:	4628      	mov	r0, r5
		while (caller_id--) {
    ffac:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    ffae:	f7ff ffc1 	bl	ff34 <memq_init>
		while (caller_id--) {
    ffb2:	42b4      	cmp	r4, r6
    ffb4:	f1a5 0508 	sub.w	r5, r5, #8
    ffb8:	d1f5      	bne.n	ffa6 <mayfly_init+0x12>
	while (callee_id--) {
    ffba:	3f04      	subs	r7, #4
    ffbc:	1d3b      	adds	r3, r7, #4
    ffbe:	f1a8 0820 	sub.w	r8, r8, #32
    ffc2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    ffc6:	d1eb      	bne.n	ffa0 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    ffc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ffcc:	2000d888 	.word	0x2000d888
    ffd0:	2000d918 	.word	0x2000d918

0000ffd4 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    ffd4:	b410      	push	{r4}
    ffd6:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    ffd8:	4c15      	ldr	r4, [pc, #84]	; (10030 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x31>)
{
    ffda:	468c      	mov	ip, r1
	if (enable) {
    ffdc:	b192      	cbz	r2, 10004 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5>
		if (mft[callee_id][caller_id].enable_req ==
    ffde:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    ffe2:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
    ffe6:	0100      	lsls	r0, r0, #4
    ffe8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    ffec:	4421      	add	r1, r4
    ffee:	7a48      	ldrb	r0, [r1, #9]
    fff0:	7a0c      	ldrb	r4, [r1, #8]
    fff2:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    fff4:	bf04      	itt	eq
    fff6:	3001      	addeq	r0, #1
    fff8:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    fffa:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    fffc:	4661      	mov	r1, ip
    fffe:	4618      	mov	r0, r3
   10000:	f00c bc36 	b.w	1c870 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   10004:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   10008:	0112      	lsls	r2, r2, #4
   1000a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1000e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10012:	4423      	add	r3, r4
   10014:	7a9c      	ldrb	r4, [r3, #10]
   10016:	7ada      	ldrb	r2, [r3, #11]
   10018:	42a2      	cmp	r2, r4
   1001a:	d001      	beq.n	10020 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x21>
}
   1001c:	bc10      	pop	{r4}
   1001e:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   10020:	3201      	adds	r2, #1
   10022:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   10024:	4b03      	ldr	r3, [pc, #12]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
   10026:	2201      	movs	r2, #1
   10028:	545a      	strb	r2, [r3, r1]
}
   1002a:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   1002c:	f00c bc76 	b.w	1c91c <mayfly_pend>
   10030:	2000d894 	.word	0x2000d894
   10034:	2000d890 	.word	0x2000d890

00010038 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   10038:	b570      	push	{r4, r5, r6, lr}
   1003a:	4606      	mov	r6, r0
   1003c:	461c      	mov	r4, r3
   1003e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   10040:	b322      	cbz	r2, 1008c <mayfly_enqueue+0x54>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   10042:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   10044:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   10046:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   10048:	f012 0203 	ands.w	r2, r2, #3
   1004c:	d005      	beq.n	1005a <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
   1004e:	2a01      	cmp	r2, #1
   10050:	d040      	beq.n	100d4 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
   10052:	3301      	adds	r3, #1
   10054:	b2db      	uxtb	r3, r3
   10056:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   10058:	e00f      	b.n	1007a <mayfly_enqueue+0x42>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   1005a:	3301      	adds	r3, #1
   1005c:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1005e:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   10060:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10062:	2304      	movs	r3, #4
   10064:	fb11 3105 	smlabb	r1, r1, r5, r3
   10068:	4a1b      	ldr	r2, [pc, #108]	; (100d8 <mayfly_enqueue+0xa0>)
   1006a:	6860      	ldr	r0, [r4, #4]
   1006c:	230c      	movs	r3, #12
   1006e:	fb13 1306 	smlabb	r3, r3, r6, r1
   10072:	441a      	add	r2, r3
   10074:	4621      	mov	r1, r4
   10076:	f7ff ff6b 	bl	ff50 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   1007a:	4b18      	ldr	r3, [pc, #96]	; (100dc <mayfly_enqueue+0xa4>)
   1007c:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   1007e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   10080:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   10082:	4629      	mov	r1, r5
   10084:	f00c fc4a 	bl	1c91c <mayfly_pend>

	return 0;
   10088:	2000      	movs	r0, #0
}
   1008a:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1008c:	f00c fc30 	bl	1c8f0 <mayfly_prio_is_equal>
   10090:	2800      	cmp	r0, #0
   10092:	d0d6      	beq.n	10042 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   10094:	4629      	mov	r1, r5
   10096:	4630      	mov	r0, r6
   10098:	f00c fc0a 	bl	1c8b0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1009c:	2800      	cmp	r0, #0
   1009e:	d0d0      	beq.n	10042 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   100a0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   100a4:	0112      	lsls	r2, r2, #4
   100a6:	490c      	ldr	r1, [pc, #48]	; (100d8 <mayfly_enqueue+0xa0>)
   100a8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   100ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   100b0:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   100b2:	7a9a      	ldrb	r2, [r3, #10]
   100b4:	7adb      	ldrb	r3, [r3, #11]
   100b6:	429a      	cmp	r2, r3
   100b8:	d1c3      	bne.n	10042 <mayfly_enqueue+0xa>
	state = (m->_req - ack) & 0x03;
   100ba:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   100bc:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   100be:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   100c0:	0792      	lsls	r2, r2, #30
   100c2:	d002      	beq.n	100ca <mayfly_enqueue+0x92>
		m->_req = ack + 2;
   100c4:	3302      	adds	r3, #2
   100c6:	b2db      	uxtb	r3, r3
   100c8:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   100ca:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   100ce:	4798      	blx	r3
		return 0;
   100d0:	2000      	movs	r0, #0
}
   100d2:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   100d4:	4610      	mov	r0, r2
}
   100d6:	bd70      	pop	{r4, r5, r6, pc}
   100d8:	2000d894 	.word	0x2000d894
   100dc:	2000d890 	.word	0x2000d890

000100e0 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   100e0:	4a4f      	ldr	r2, [pc, #316]	; (10220 <mayfly_run+0x140>)
   100e2:	5c13      	ldrb	r3, [r2, r0]
   100e4:	2b00      	cmp	r3, #0
   100e6:	f000 8099 	beq.w	1021c <mayfly_run+0x13c>
{
   100ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   100ee:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   100f0:	4f4c      	ldr	r7, [pc, #304]	; (10224 <mayfly_run+0x144>)
	mfp[callee_id] = 0U;
   100f2:	5413      	strb	r3, [r2, r0]
{
   100f4:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   100f6:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   100f8:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   100fc:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10100:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   10104:	9303      	str	r3, [sp, #12]
   10106:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1010a:	f10b 0804 	add.w	r8, fp, #4
   1010e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   10112:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   10116:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   10118:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   1011c:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   1011e:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   10120:	f7ff ff20 	bl	ff64 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   10124:	f107 0624 	add.w	r6, r7, #36	; 0x24
   10128:	4683      	mov	fp, r0
   1012a:	b398      	cbz	r0, 10194 <mayfly_run+0xb4>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   1012c:	9c05      	ldr	r4, [sp, #20]
   1012e:	7863      	ldrb	r3, [r4, #1]
   10130:	7825      	ldrb	r5, [r4, #0]
   10132:	1aed      	subs	r5, r5, r3
   10134:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   10138:	2d01      	cmp	r5, #1
   1013a:	d106      	bne.n	1014a <mayfly_run+0x6a>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   1013c:	3b01      	subs	r3, #1
   1013e:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   10140:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   10144:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   10146:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   10148:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   1014a:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   1014c:	1ac3      	subs	r3, r0, r3
   1014e:	f003 0303 	and.w	r3, r3, #3
   10152:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   10154:	f04f 0200 	mov.w	r2, #0
   10158:	4631      	mov	r1, r6
	req = m->_req;
   1015a:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   1015e:	d00f      	beq.n	10180 <mayfly_run+0xa0>
		memq_dequeue(mft[callee_id][caller_id].tail,
   10160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10162:	f7ff ff07 	bl	ff74 <memq_dequeue>
		ack = m->_ack;
   10166:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   1016a:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   1016c:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   10170:	eba3 030c 	sub.w	r3, r3, ip
   10174:	f003 0303 	and.w	r3, r3, #3
   10178:	2b01      	cmp	r3, #1
		m->_ack = req;
   1017a:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   1017e:	d045      	beq.n	1020c <mayfly_run+0x12c>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   10180:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   10184:	aa05      	add	r2, sp, #20
   10186:	f7ff feed 	bl	ff64 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   1018a:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   1018c:	4683      	mov	fp, r0
			if (state == 1U) {
   1018e:	d02b      	beq.n	101e8 <mayfly_run+0x108>
		while (link) {
   10190:	2800      	cmp	r0, #0
   10192:	d1cb      	bne.n	1012c <mayfly_run+0x4c>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   10194:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   10198:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   1019c:	429a      	cmp	r2, r3
   1019e:	d003      	beq.n	101a8 <mayfly_run+0xc8>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   101a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   101a4:	2301      	movs	r3, #1
   101a6:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   101a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   101ac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   101b0:	429a      	cmp	r2, r3
   101b2:	d003      	beq.n	101bc <mayfly_run+0xdc>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   101b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   101b8:	2301      	movs	r3, #1
   101ba:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   101bc:	f109 39ff 	add.w	r9, r9, #4294967295
   101c0:	fa5f f989 	uxtb.w	r9, r9
   101c4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   101c8:	f1a7 070c 	sub.w	r7, r7, #12
   101cc:	d1a3      	bne.n	10116 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   101ce:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   101d2:	b1c3      	cbz	r3, 10206 <mayfly_run+0x126>
   101d4:	9b03      	ldr	r3, [sp, #12]
   101d6:	b9b3      	cbnz	r3, 10206 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
   101d8:	461a      	mov	r2, r3
   101da:	4651      	mov	r1, sl
   101dc:	4650      	mov	r0, sl
	}
}
   101de:	b007      	add	sp, #28
   101e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   101e4:	f00c bb44 	b.w	1c870 <mayfly_enable_cb>
				if (caller_id || link) {
   101e8:	f1b9 0f00 	cmp.w	r9, #0
   101ec:	d101      	bne.n	101f2 <mayfly_run+0x112>
   101ee:	2800      	cmp	r0, #0
   101f0:	d0d0      	beq.n	10194 <mayfly_run+0xb4>
					mfp[callee_id] = 1U;
   101f2:	f8dd a008 	ldr.w	sl, [sp, #8]
   101f6:	4a0a      	ldr	r2, [pc, #40]	; (10220 <mayfly_run+0x140>)
   101f8:	2301      	movs	r3, #1
   101fa:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   101fe:	4651      	mov	r1, sl
   10200:	4650      	mov	r0, sl
   10202:	f00c fb8b 	bl	1c91c <mayfly_pend>
}
   10206:	b007      	add	sp, #28
   10208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1020c:	4642      	mov	r2, r8
   1020e:	4621      	mov	r1, r4
   10210:	4658      	mov	r0, fp
			m->_ack = ack;
   10212:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10216:	f7ff fe9b 	bl	ff50 <memq_enqueue>
   1021a:	e7b1      	b.n	10180 <mayfly_run+0xa0>
   1021c:	4770      	bx	lr
   1021e:	bf00      	nop
   10220:	2000d890 	.word	0x2000d890
   10224:	2000d894 	.word	0x2000d894

00010228 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   10228:	1e4b      	subs	r3, r1, #1
   1022a:	b2db      	uxtb	r3, r3
   1022c:	b189      	cbz	r1, 10252 <util_ones_count_get+0x2a>
   1022e:	1e41      	subs	r1, r0, #1
   10230:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   10234:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   10236:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   1023a:	b13b      	cbz	r3, 1024c <util_ones_count_get+0x24>
			bite &= (bite - 1);
   1023c:	b25b      	sxtb	r3, r3
   1023e:	1e5a      	subs	r2, r3, #1
   10240:	4013      	ands	r3, r2
			one_count++;
   10242:	3001      	adds	r0, #1
		while (bite) {
   10244:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   10248:	b2c0      	uxtb	r0, r0
		while (bite) {
   1024a:	d1f7      	bne.n	1023c <util_ones_count_get+0x14>
	while (octets_len--) {
   1024c:	4561      	cmp	r1, ip
   1024e:	d1f2      	bne.n	10236 <util_ones_count_get+0xe>
   10250:	4770      	bx	lr
	uint8_t one_count = 0U;
   10252:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   10254:	4770      	bx	lr
   10256:	bf00      	nop

00010258 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10258:	eba2 0c01 	sub.w	ip, r2, r1
   1025c:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   10260:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   10262:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   10264:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10266:	d10a      	bne.n	1027e <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10268:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1026c:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   1026e:	42a3      	cmp	r3, r4
   10270:	d914      	bls.n	1029c <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   10272:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   10274:	2100      	movs	r1, #0
}
   10276:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   10278:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1027a:	6141      	str	r1, [r0, #20]
}
   1027c:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1027e:	1a89      	subs	r1, r1, r2
   10280:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   10284:	428b      	cmp	r3, r1
   10286:	d806      	bhi.n	10296 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   10288:	4421      	add	r1, r4
   1028a:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   1028c:	2300      	movs	r3, #0
}
   1028e:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   10290:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10292:	6141      	str	r1, [r0, #20]
}
   10294:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   10296:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   10298:	42a3      	cmp	r3, r4
   1029a:	d8ea      	bhi.n	10272 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   1029c:	1ae1      	subs	r1, r4, r3
   1029e:	e7f5      	b.n	1028c <ticks_to_expire_prep+0x34>

000102a0 <ticker_job_list_insert>:
{
   102a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102a4:	b087      	sub	sp, #28
   102a6:	4603      	mov	r3, r0
	count_user = instance->count_user;
   102a8:	7a42      	ldrb	r2, [r0, #9]
{
   102aa:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   102ac:	6800      	ldr	r0, [r0, #0]
   102ae:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   102b0:	6858      	ldr	r0, [r3, #4]
   102b2:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   102b4:	2a00      	cmp	r2, #0
   102b6:	f000 80f6 	beq.w	104a6 <ticker_job_list_insert+0x206>
   102ba:	1e53      	subs	r3, r2, #1
   102bc:	b2db      	uxtb	r3, r3
   102be:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   102c2:	460f      	mov	r7, r1
   102c4:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   102c6:	9b03      	ldr	r3, [sp, #12]
   102c8:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   102ca:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   102cc:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   102ce:	2fff      	cmp	r7, #255	; 0xff
   102d0:	d05e      	beq.n	10390 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   102d2:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   102d6:	9b02      	ldr	r3, [sp, #8]
   102d8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   102dc:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   102de:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   102e2:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   102e6:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   102e8:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   102ea:	f04f 09ff 	mov.w	r9, #255	; 0xff
   102ee:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   102f2:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   102f6:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   102f8:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   102fc:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   102fe:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10302:	d10f      	bne.n	10324 <ticker_job_list_insert+0x84>
   10304:	e0ca      	b.n	1049c <ticker_job_list_insert+0x1fc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   10306:	1a09      	subs	r1, r1, r0
   10308:	d106      	bne.n	10318 <ticker_job_list_insert+0x78>
   1030a:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   1030e:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   10312:	45e2      	cmp	sl, ip
   10314:	f200 8086 	bhi.w	10424 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   10318:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1031c:	2bff      	cmp	r3, #255	; 0xff
   1031e:	4691      	mov	r9, r2
   10320:	d072      	beq.n	10408 <ticker_job_list_insert+0x168>
   10322:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   10324:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   10328:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   1032c:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   1032e:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10332:	4288      	cmp	r0, r1
   10334:	d9e7      	bls.n	10306 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   10336:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   1033a:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   1033e:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   10342:	d166      	bne.n	10412 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   10344:	9b01      	ldr	r3, [sp, #4]
   10346:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   1034a:	2aff      	cmp	r2, #255	; 0xff
   1034c:	d008      	beq.n	10360 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   1034e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10352:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   10356:	f8de 3008 	ldr.w	r3, [lr, #8]
   1035a:	1a5b      	subs	r3, r3, r1
   1035c:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   10360:	78a3      	ldrb	r3, [r4, #2]
   10362:	3301      	adds	r3, #1
   10364:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   10366:	2d00      	cmp	r5, #0
   10368:	d0b1      	beq.n	102ce <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1036a:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   1036e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10370:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   10372:	2200      	movs	r2, #0
   10374:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10376:	b113      	cbz	r3, 1037e <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10378:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1037a:	4610      	mov	r0, r2
   1037c:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   1037e:	6863      	ldr	r3, [r4, #4]
   10380:	2b00      	cmp	r3, #0
   10382:	d1a4      	bne.n	102ce <ticker_job_list_insert+0x2e>
					ticker->op_context =
   10384:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   10388:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   1038a:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   1038e:	d1a0      	bne.n	102d2 <ticker_job_list_insert+0x32>
   10390:	9b03      	ldr	r3, [sp, #12]
   10392:	7898      	ldrb	r0, [r3, #2]
   10394:	42b0      	cmp	r0, r6
   10396:	d02f      	beq.n	103f8 <ticker_job_list_insert+0x158>
   10398:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   1039c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   103a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
				if (first == user->count_user_op) {
   103a4:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   103a8:	f819 2023 	ldrb.w	r2, [r9, r3, lsl #2]
				first = user_ops_first + 1;
   103ac:	3601      	adds	r6, #1
   103ae:	b2f6      	uxtb	r6, r6
					first = 0U;
   103b0:	42b1      	cmp	r1, r6
   103b2:	bf08      	it	eq
   103b4:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   103b6:	2a04      	cmp	r2, #4
				user_op = &user_ops[user_ops_first];
   103b8:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   103bc:	d11a      	bne.n	103f4 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   103be:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   103c2:	9902      	ldr	r1, [sp, #8]
   103c4:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   103c8:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   103cc:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   103d0:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   103d2:	7862      	ldrb	r2, [r4, #1]
   103d4:	1a52      	subs	r2, r2, r1
   103d6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   103da:	d025      	beq.n	10428 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   103dc:	f04f 0200 	mov.w	r2, #0
   103e0:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
   103e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   103e6:	2001      	movs	r0, #1
	user_op->status = status;
   103e8:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   103ea:	b10b      	cbz	r3, 103f0 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   103ec:	6b29      	ldr	r1, [r5, #48]	; 0x30
   103ee:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   103f0:	f89b 0002 	ldrb.w	r0, [fp, #2]
   103f4:	42b0      	cmp	r0, r6
   103f6:	d1d1      	bne.n	1039c <ticker_job_list_insert+0xfc>
	while (count_user--) {
   103f8:	9a03      	ldr	r2, [sp, #12]
   103fa:	9905      	ldr	r1, [sp, #20]
   103fc:	4291      	cmp	r1, r2
   103fe:	f1a2 0308 	sub.w	r3, r2, #8
   10402:	d050      	beq.n	104a6 <ticker_job_list_insert+0x206>
   10404:	9303      	str	r3, [sp, #12]
   10406:	e75e      	b.n	102c6 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   10408:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   1040c:	f88b 3000 	strb.w	r3, [fp]
   10410:	461a      	mov	r2, r3
		node[previous].next = id;
   10412:	fa0f f989 	sxth.w	r9, r9
   10416:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1041a:	ea4f 1909 	mov.w	r9, r9, lsl #4
   1041e:	f80e 8009 	strb.w	r8, [lr, r9]
   10422:	e792      	b.n	1034a <ticker_job_list_insert+0xaa>
   10424:	4601      	mov	r1, r0
   10426:	e786      	b.n	10336 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10428:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   1042a:	9901      	ldr	r1, [sp, #4]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1042c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   10430:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
   10432:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10434:	d02a      	beq.n	1048c <ticker_job_list_insert+0x1ec>
		ticker->must_expire =
   10436:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1043a:	1a9a      	subs	r2, r3, r2
   1043c:	fab2 f282 	clz	r2, r2
   10440:	0952      	lsrs	r2, r2, #5
   10442:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10446:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10448:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1044a:	68ea      	ldr	r2, [r5, #12]
   1044c:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1044e:	692a      	ldr	r2, [r5, #16]
   10450:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   10452:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   10456:	4293      	cmp	r3, r2
   10458:	bf88      	it	hi
   1045a:	2300      	movhi	r3, #0
   1045c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   1045e:	69ab      	ldr	r3, [r5, #24]
   10460:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   10462:	69eb      	ldr	r3, [r5, #28]
   10464:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   10466:	6a2b      	ldr	r3, [r5, #32]
   10468:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   1046a:	68ab      	ldr	r3, [r5, #8]
   1046c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   1046e:	2300      	movs	r3, #0
   10470:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10472:	686a      	ldr	r2, [r5, #4]
   10474:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   10476:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10478:	f7ff feee 	bl	10258 <ticks_to_expire_prep>
	ticker->force = 1U;
   1047c:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   10480:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   10484:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   10488:	70e3      	strb	r3, [r4, #3]
}
   1048a:	e72d      	b.n	102e8 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   1048c:	4613      	mov	r3, r2
	ticker->ext_data = start->ext_data;
   1048e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10490:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   10492:	68ea      	ldr	r2, [r5, #12]
   10494:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10496:	692a      	ldr	r2, [r5, #16]
   10498:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   1049a:	e7df      	b.n	1045c <ticker_job_list_insert+0x1bc>
	ticker_new->next = current;
   1049c:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   104a0:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   104a4:	e75c      	b.n	10360 <ticker_job_list_insert+0xc0>
}
   104a6:	b007      	add	sp, #28
   104a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000104ac <ticker_worker>:
{
   104ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   104b0:	7f82      	ldrb	r2, [r0, #30]
{
   104b2:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
   104b4:	2301      	movs	r3, #1
	if (instance->job_guard) {
   104b6:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
   104b8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   104ba:	2a00      	cmp	r2, #0
   104bc:	d15b      	bne.n	10576 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   104be:	7f43      	ldrb	r3, [r0, #29]
   104c0:	2bff      	cmp	r3, #255	; 0xff
   104c2:	4681      	mov	r9, r0
   104c4:	d056      	beq.n	10574 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   104c6:	f00b fd1b 	bl	1bf00 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   104ca:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   104ce:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   104d2:	f899 b01d 	ldrb.w	fp, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   104d6:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   104d8:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   104da:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   104de:	f000 8139 	beq.w	10754 <ticker_worker+0x2a8>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   104e2:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   104e6:	42b3      	cmp	r3, r6
   104e8:	bf94      	ite	ls
   104ea:	2300      	movls	r3, #0
   104ec:	2301      	movhi	r3, #1
   104ee:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
   104f0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   104f4:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
   104f8:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   104fc:	d046      	beq.n	1058c <ticker_worker+0xe0>
			must_expire_skip = 1U;
   104fe:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
   10502:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   10506:	eb07 140b 	add.w	r4, r7, fp, lsl #4
   1050a:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   1050e:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10510:	42b3      	cmp	r3, r6
   10512:	d839      	bhi.n	10588 <ticker_worker+0xdc>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10514:	f894 a002 	ldrb.w	sl, [r4, #2]
		ticker_id_head = ticker->next;
   10518:	f817 b00b 	ldrb.w	fp, [r7, fp]
		ticks_elapsed -= ticks_to_expire;
   1051c:	1af6      	subs	r6, r6, r3
		ticks_expired += ticks_to_expire;
   1051e:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10520:	7863      	ldrb	r3, [r4, #1]
   10522:	eba3 030a 	sub.w	r3, r3, sl
   10526:	b2db      	uxtb	r3, r3
   10528:	2b01      	cmp	r3, #1
   1052a:	d12a      	bne.n	10582 <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
   1052c:	69a0      	ldr	r0, [r4, #24]
   1052e:	2800      	cmp	r0, #0
   10530:	d054      	beq.n	105dc <ticker_worker+0x130>
   10532:	9b01      	ldr	r3, [sp, #4]
   10534:	2b00      	cmp	r3, #0
   10536:	d04c      	beq.n	105d2 <ticker_worker+0x126>
		int32_t lazy_current = ticker->lazy_current;
   10538:	8be3      	ldrh	r3, [r4, #30]
   1053a:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
   1053c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (ext_data &&
   1053e:	b13a      	cbz	r2, 10550 <ticker_worker+0xa4>
   10540:	6813      	ldr	r3, [r2, #0]
   10542:	b11b      	cbz	r3, 1054c <ticker_worker+0xa0>
			    ext_data->ticks_slot_window != 0U &&
   10544:	7a13      	ldrb	r3, [r2, #8]
   10546:	2b00      	cmp	r3, #0
   10548:	f000 80ea 	beq.w	10720 <ticker_worker+0x274>
				ext_data->reschedule_state =
   1054c:	2300      	movs	r3, #0
   1054e:	7213      	strb	r3, [r2, #8]
			ticker->lazy_current++;
   10550:	9b03      	ldr	r3, [sp, #12]
			if ((ticker->must_expire == 0U) ||
   10552:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   10556:	3301      	adds	r3, #1
   10558:	b29b      	uxth	r3, r3
   1055a:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   1055c:	b171      	cbz	r1, 1057c <ticker_worker+0xd0>
   1055e:	8ba1      	ldrh	r1, [r4, #28]
   10560:	4299      	cmp	r1, r3
   10562:	d20b      	bcs.n	1057c <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   10564:	2a00      	cmp	r2, #0
   10566:	f000 80f8 	beq.w	1075a <ticker_worker+0x2ae>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   1056a:	7a13      	ldrb	r3, [r2, #8]
   1056c:	2b01      	cmp	r3, #1
   1056e:	d005      	beq.n	1057c <ticker_worker+0xd0>
			must_expire_skip = 1U;
   10570:	2301      	movs	r3, #1
   10572:	e036      	b.n	105e2 <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   10574:	77c2      	strb	r2, [r0, #31]
}
   10576:	b00d      	add	sp, #52	; 0x34
   10578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   1057c:	f10a 33ff 	add.w	r3, sl, #4294967295
   10580:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   10582:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10586:	d1bc      	bne.n	10502 <ticker_worker+0x56>
   10588:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1058c:	f899 300b 	ldrb.w	r3, [r9, #11]
   10590:	f899 200a 	ldrb.w	r2, [r9, #10]
   10594:	429a      	cmp	r2, r3
   10596:	d10a      	bne.n	105ae <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   10598:	3201      	adds	r2, #1
   1059a:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   1059c:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1059e:	bf1c      	itt	ne
   105a0:	4613      	movne	r3, r2
   105a2:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
   105a4:	9a04      	ldr	r2, [sp, #16]
   105a6:	f889 200b 	strb.w	r2, [r9, #11]
   105aa:	bf08      	it	eq
   105ac:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   105ae:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   105b2:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   105b6:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   105ba:	2200      	movs	r2, #0
   105bc:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   105c0:	464b      	mov	r3, r9
   105c2:	2201      	movs	r2, #1
   105c4:	2104      	movs	r1, #4
   105c6:	2003      	movs	r0, #3
   105c8:	46a4      	mov	ip, r4
}
   105ca:	b00d      	add	sp, #52	; 0x34
   105cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   105d0:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   105d2:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   105d6:	9305      	str	r3, [sp, #20]
   105d8:	3380      	adds	r3, #128	; 0x80
   105da:	d136      	bne.n	1064a <ticker_worker+0x19e>
		if (ticker->ext_data) {
   105dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   105de:	b1c2      	cbz	r2, 10612 <ticker_worker+0x166>
   105e0:	2300      	movs	r3, #0
			ticker->ext_data->ticks_drift = 0U;
   105e2:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
   105e4:	7211      	strb	r1, [r2, #8]
		if (ticker->timeout_func) {
   105e6:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
   105e8:	6051      	str	r1, [r2, #4]
		ticker->ack--;
   105ea:	f10a 30ff 	add.w	r0, sl, #4294967295
   105ee:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   105f0:	2d00      	cmp	r5, #0
   105f2:	d0c6      	beq.n	10582 <ticker_worker+0xd6>
					   ticks_expired -
   105f4:	9a02      	ldr	r2, [sp, #8]
   105f6:	6960      	ldr	r0, [r4, #20]
   105f8:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
   105fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   105fc:	eba8 0000 	sub.w	r0, r8, r0
   10600:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
   10602:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   10606:	b19b      	cbz	r3, 10630 <ticker_worker+0x184>
   10608:	6923      	ldr	r3, [r4, #16]
   1060a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1060e:	47a8      	blx	r5
			if (must_expire_skip == 0U) {
   10610:	e7b7      	b.n	10582 <ticker_worker+0xd6>
		if (ticker->timeout_func) {
   10612:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   10614:	f10a 33ff 	add.w	r3, sl, #4294967295
   10618:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   1061a:	2d00      	cmp	r5, #0
   1061c:	d0b1      	beq.n	10582 <ticker_worker+0xd6>
					   ticks_expired -
   1061e:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   10620:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   10622:	eba8 0003 	sub.w	r0, r8, r3
   10626:	9b02      	ldr	r3, [sp, #8]
   10628:	695b      	ldr	r3, [r3, #20]
   1062a:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   1062c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   10630:	6923      	ldr	r3, [r4, #16]
   10632:	8be2      	ldrh	r2, [r4, #30]
   10634:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   10636:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   10638:	2b00      	cmp	r3, #0
   1063a:	9b01      	ldr	r3, [sp, #4]
   1063c:	bf18      	it	ne
   1063e:	2301      	movne	r3, #1
   10640:	9301      	str	r3, [sp, #4]
				ticker->lazy_current = 0U;
   10642:	2300      	movs	r3, #0
   10644:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   10646:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   10648:	e79b      	b.n	10582 <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1064a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   1064e:	d0c5      	beq.n	105dc <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
   10650:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   10652:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   10654:	f8d4 c004 	ldr.w	ip, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   10658:	9203      	str	r2, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
   1065a:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   1065c:	bf28      	it	cs
   1065e:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   10660:	fb02 c10c 	mla	r1, r2, ip, ip
   10664:	9106      	str	r1, [sp, #24]
				(lazy_current - ticker->priority);
   10666:	9905      	ldr	r1, [sp, #20]
		uint32_t acc_ticks_to_expire = 0U;
   10668:	f8cd a020 	str.w	sl, [sp, #32]
   1066c:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
   10670:	1a52      	subs	r2, r2, r1
		uint32_t acc_ticks_to_expire = 0U;
   10672:	46a1      	mov	r9, r4
		uint32_t current_age = ticker->ticks_periodic +
   10674:	465b      	mov	r3, fp
				(lazy_current - ticker->priority);
   10676:	9207      	str	r2, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   10678:	2500      	movs	r5, #0
   1067a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   1067e:	4664      	mov	r4, ip
			struct ticker_node *ticker_next = &nodes[id_head];
   10680:	b21b      	sxth	r3, r3
   10682:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10686:	eb07 1203 	add.w	r2, r7, r3, lsl #4
   1068a:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1068c:	f8d2 8008 	ldr.w	r8, [r2, #8]
   10690:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   10692:	42a8      	cmp	r0, r5
   10694:	d33c      	bcc.n	10710 <ticker_worker+0x264>
			if (ticker_next->ticks_slot == 0U) {
   10696:	6991      	ldr	r1, [r2, #24]
   10698:	2900      	cmp	r1, #0
   1069a:	d036      	beq.n	1070a <ticker_worker+0x25e>
			int32_t lazy_next = ticker_next->lazy_current;
   1069c:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   1069e:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   106a0:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
   106a4:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   106a8:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
   106aa:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
   106ac:	bf28      	it	cs
   106ae:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
   106b2:	f1ba 0f00 	cmp.w	sl, #0
   106b6:	d040      	beq.n	1073a <ticker_worker+0x28e>
   106b8:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
   106bc:	2c00      	cmp	r4, #0
   106be:	d038      	beq.n	10732 <ticker_worker+0x286>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   106c0:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
   106c4:	f8dd a018 	ldr.w	sl, [sp, #24]
   106c8:	45c2      	cmp	sl, r8
   106ca:	bf8c      	ite	hi
   106cc:	f04f 0801 	movhi.w	r8, #1
   106d0:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
   106d4:	bf34      	ite	cc
   106d6:	f04f 0a01 	movcc.w	sl, #1
   106da:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
   106de:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
   106e0:	f892 b003 	ldrb.w	fp, [r2, #3]
   106e4:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
   106e8:	d30f      	bcc.n	1070a <ticker_worker+0x25e>
   106ea:	4593      	cmp	fp, r2
   106ec:	d82a      	bhi.n	10744 <ticker_worker+0x298>
			    (next_force ||
   106ee:	f11e 0f80 	cmn.w	lr, #128	; 0x80
   106f2:	d027      	beq.n	10744 <ticker_worker+0x298>
			     next_is_critical ||
   106f4:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
   106f6:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
   106fa:	4594      	cmp	ip, r2
   106fc:	dd02      	ble.n	10704 <ticker_worker+0x258>
			     (next_has_priority && !current_is_older) ||
   106fe:	f1b8 0f00 	cmp.w	r8, #0
   10702:	d01f      	beq.n	10744 <ticker_worker+0x298>
   10704:	9a05      	ldr	r2, [sp, #20]
   10706:	4572      	cmp	r2, lr
   10708:	d019      	beq.n	1073e <ticker_worker+0x292>
			id_head = ticker_next->next;
   1070a:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
   1070c:	2bff      	cmp	r3, #255	; 0xff
   1070e:	d1b7      	bne.n	10680 <ticker_worker+0x1d4>
   10710:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
   10714:	f8dd a020 	ldr.w	sl, [sp, #32]
   10718:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1071c:	464c      	mov	r4, r9
   1071e:	e75d      	b.n	105dc <ticker_worker+0x130>
			    TICKER_RESCHEDULE_STATE_NONE &&
   10720:	8ba3      	ldrh	r3, [r4, #28]
   10722:	9903      	ldr	r1, [sp, #12]
   10724:	428b      	cmp	r3, r1
   10726:	f63f af11 	bhi.w	1054c <ticker_worker+0xa0>
				ext_data->reschedule_state =
   1072a:	f04f 0301 	mov.w	r3, #1
   1072e:	7213      	strb	r3, [r2, #8]
   10730:	e70e      	b.n	10550 <ticker_worker+0xa4>
				(ticker->ticks_periodic == 0U) ||
   10732:	f04f 0801 	mov.w	r8, #1
					(ticker->ticks_periodic != 0U) &&
   10736:	46a2      	mov	sl, r4
   10738:	e7d1      	b.n	106de <ticker_worker+0x232>
					  0U :
   1073a:	46d0      	mov	r8, sl
   1073c:	e7be      	b.n	106bc <ticker_worker+0x210>
			     (equal_priority && next_is_older))) {
   1073e:	f1ba 0f00 	cmp.w	sl, #0
   10742:	d0e2      	beq.n	1070a <ticker_worker+0x25e>
   10744:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
   10748:	f8dd a020 	ldr.w	sl, [sp, #32]
   1074c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   10750:	464c      	mov	r4, r9
   10752:	e6f3      	b.n	1053c <ticker_worker+0x90>
	uint8_t slot_reserved = 0;
   10754:	9b04      	ldr	r3, [sp, #16]
   10756:	9301      	str	r3, [sp, #4]
   10758:	e6ca      	b.n	104f0 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   1075a:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   1075c:	f10a 33ff 	add.w	r3, sl, #4294967295
   10760:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   10762:	2d00      	cmp	r5, #0
   10764:	f43f af0d 	beq.w	10582 <ticker_worker+0xd6>
					   ticks_expired -
   10768:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   1076a:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   1076c:	eba8 0003 	sub.w	r0, r8, r3
   10770:	9b02      	ldr	r3, [sp, #8]
   10772:	695b      	ldr	r3, [r3, #20]
   10774:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   10776:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1077a:	e745      	b.n	10608 <ticker_worker+0x15c>

0001077c <ticker_job>:
	if (instance->worker_trigger) {
   1077c:	7fc2      	ldrb	r2, [r0, #31]
   1077e:	2a00      	cmp	r2, #0
   10780:	f040 83f3 	bne.w	10f6a <ticker_job+0x7ee>
{
   10784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10788:	4683      	mov	fp, r0
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1078a:	7a83      	ldrb	r3, [r0, #10]
   1078c:	7ac1      	ldrb	r1, [r0, #11]
{
   1078e:	b08f      	sub	sp, #60	; 0x3c
	instance->job_guard = 1U;
   10790:	2001      	movs	r0, #1
   10792:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10796:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   10798:	f8db 0014 	ldr.w	r0, [fp, #20]
   1079c:	900a      	str	r0, [sp, #40]	; 0x28
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1079e:	f000 80a2 	beq.w	108e6 <ticker_job+0x16a>
	uint8_t idx = *ticks_elapsed_index + 1;
   107a2:	3301      	adds	r3, #1
   107a4:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   107a6:	2b02      	cmp	r3, #2
		idx = 0U;
   107a8:	bf08      	it	eq
   107aa:	4613      	moveq	r3, r2
		ticks_elapsed =
   107ac:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   107b0:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   107b4:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   107b8:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   107ba:	930b      	str	r3, [sp, #44]	; 0x2c
		instance->ticks_current += ticks_elapsed;
   107bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		ticks_elapsed =
   107be:	9205      	str	r2, [sp, #20]
		instance->ticks_current += ticks_elapsed;
   107c0:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   107c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   107c6:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   107ca:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   107ce:	f8db 3000 	ldr.w	r3, [fp]
   107d2:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   107d4:	f8db 3004 	ldr.w	r3, [fp, #4]
   107d8:	9307      	str	r3, [sp, #28]
	while (count_user--) {
   107da:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   107dc:	9208      	str	r2, [sp, #32]
	while (count_user--) {
   107de:	b2db      	uxtb	r3, r3
   107e0:	2a00      	cmp	r2, #0
   107e2:	f000 84c0 	beq.w	11166 <ticker_job+0x9ea>
		flag_elapsed = 1U;
   107e6:	2201      	movs	r2, #1
   107e8:	920d      	str	r2, [sp, #52]	; 0x34
   107ea:	9a07      	ldr	r2, [sp, #28]
   107ec:	f8cd b004 	str.w	fp, [sp, #4]
   107f0:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   107f4:	2300      	movs	r3, #0
   107f6:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   107f8:	23ff      	movs	r3, #255	; 0xff
   107fa:	9304      	str	r3, [sp, #16]
   107fc:	46cb      	mov	fp, r9
		user_ops = &user->user_op[0];
   107fe:	f8db 8004 	ldr.w	r8, [fp, #4]
		while (user->middle != user->last) {
   10802:	f89b c003 	ldrb.w	ip, [fp, #3]
   10806:	f89b 9002 	ldrb.w	r9, [fp, #2]
   1080a:	45e1      	cmp	r9, ip
   1080c:	d063      	beq.n	108d6 <ticker_job+0x15a>
			if (middle == user->count_user_op) {
   1080e:	f89b 2000 	ldrb.w	r2, [fp]
			middle = user->middle + 1;
   10812:	f109 0301 	add.w	r3, r9, #1
			user_op = &user_ops[user->middle];
   10816:	fa0f f789 	sxth.w	r7, r9
			middle = user->middle + 1;
   1081a:	b2db      	uxtb	r3, r3
				middle = 0U;
   1081c:	429a      	cmp	r2, r3
   1081e:	bf08      	it	eq
   10820:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   10822:	eb07 0247 	add.w	r2, r7, r7, lsl #1
   10826:	eb07 0782 	add.w	r7, r7, r2, lsl #2
			user->middle = middle;
   1082a:	f88b 3002 	strb.w	r3, [fp, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1082e:	f818 2027 	ldrb.w	r2, [r8, r7, lsl #2]
   10832:	2a04      	cmp	r2, #4
			user_op = &user_ops[user->middle];
   10834:	eb08 0687 	add.w	r6, r8, r7, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10838:	d969      	bls.n	1090e <ticker_job+0x192>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1083a:	2a07      	cmp	r2, #7
   1083c:	d879      	bhi.n	10932 <ticker_job+0x1b6>
			ticker = &node[user_op->id];
   1083e:	7875      	ldrb	r5, [r6, #1]
   10840:	9903      	ldr	r1, [sp, #12]
   10842:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   10846:	eb01 1404 	add.w	r4, r1, r4, lsl #4
   1084a:	b229      	sxth	r1, r5
			state = (ticker->req - ticker->ack) & 0xff;
   1084c:	f894 e002 	ldrb.w	lr, [r4, #2]
			ticker = &node[user_op->id];
   10850:	9102      	str	r1, [sp, #8]
			state = (ticker->req - ticker->ack) & 0xff;
   10852:	7861      	ldrb	r1, [r4, #1]
   10854:	eba1 010e 	sub.w	r1, r1, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   10858:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   1085c:	d069      	beq.n	10932 <ticker_job+0x1b6>
			    (state == 0U) ||
   1085e:	2a05      	cmp	r2, #5
   10860:	d057      	beq.n	10912 <ticker_job+0x196>
			if (state == 1U) {
   10862:	2901      	cmp	r1, #1
   10864:	f040 8170 	bne.w	10b48 <ticker_job+0x3cc>
	previous = instance->ticker_id_head;
   10868:	9901      	ldr	r1, [sp, #4]
   1086a:	7f4b      	ldrb	r3, [r1, #29]
	node = &instance->nodes[0];
   1086c:	f8d1 9000 	ldr.w	r9, [r1]
	while (current != TICKER_NULL) {
   10870:	2bff      	cmp	r3, #255	; 0xff
   10872:	d016      	beq.n	108a2 <ticker_job+0x126>
		ticker_current = &node[current];
   10874:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		if (current == id) {
   10878:	429d      	cmp	r5, r3
		ticker_current = &node[current];
   1087a:	eb09 1101 	add.w	r1, r9, r1, lsl #4
		if (current == id) {
   1087e:	f000 8260 	beq.w	10d42 <ticker_job+0x5c6>
	total = 0U;
   10882:	f04f 0c00 	mov.w	ip, #0
   10886:	e001      	b.n	1088c <ticker_job+0x110>
		if (current == id) {
   10888:	429d      	cmp	r5, r3
   1088a:	d061      	beq.n	10950 <ticker_job+0x1d4>
		total += ticker_current->ticks_to_expire;
   1088c:	4618      	mov	r0, r3
		current = ticker_current->next;
   1088e:	780b      	ldrb	r3, [r1, #0]
		total += ticker_current->ticks_to_expire;
   10890:	f8d1 a008 	ldr.w	sl, [r1, #8]
	while (current != TICKER_NULL) {
   10894:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   10896:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   1089a:	44d4      	add	ip, sl
		ticker_current = &node[current];
   1089c:	eb09 1101 	add.w	r1, r9, r1, lsl #4
	while (current != TICKER_NULL) {
   108a0:	d1f2      	bne.n	10888 <ticker_job+0x10c>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   108a2:	2300      	movs	r3, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   108a4:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   108a6:	60a3      	str	r3, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   108a8:	f000 8135 	beq.w	10b16 <ticker_job+0x39a>
		if (instance->ticker_id_slot_previous == user_op->id) {
   108ac:	9b01      	ldr	r3, [sp, #4]
		ticker->req = ticker->ack;
   108ae:	f884 e001 	strb.w	lr, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   108b2:	7f1b      	ldrb	r3, [r3, #28]
   108b4:	42ab      	cmp	r3, r5
   108b6:	f000 8102 	beq.w	10abe <ticker_job+0x342>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   108ba:	2000      	movs	r0, #0
   108bc:	f808 0027 	strb.w	r0, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   108c0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	user_op->status = status;
   108c2:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   108c4:	b10b      	cbz	r3, 108ca <ticker_job+0x14e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   108c6:	6b31      	ldr	r1, [r6, #48]	; 0x30
   108c8:	4798      	blx	r3
		while (user->middle != user->last) {
   108ca:	f89b c003 	ldrb.w	ip, [fp, #3]
   108ce:	f89b 9002 	ldrb.w	r9, [fp, #2]
   108d2:	45e1      	cmp	r9, ip
   108d4:	d19b      	bne.n	1080e <ticker_job+0x92>
	while (count_user--) {
   108d6:	9a07      	ldr	r2, [sp, #28]
   108d8:	455a      	cmp	r2, fp
   108da:	f1ab 0308 	sub.w	r3, fp, #8
   108de:	f000 8143 	beq.w	10b68 <ticker_job+0x3ec>
   108e2:	469b      	mov	fp, r3
   108e4:	e78b      	b.n	107fe <ticker_job+0x82>
	ticker_id_old_head = instance->ticker_id_head;
   108e6:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   108ea:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   108ee:	930b      	str	r3, [sp, #44]	; 0x2c
	node = &instance->nodes[0];
   108f0:	f8db 3000 	ldr.w	r3, [fp]
   108f4:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   108f6:	f8db 3004 	ldr.w	r3, [fp, #4]
   108fa:	9307      	str	r3, [sp, #28]
	while (count_user--) {
   108fc:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   108fe:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   10900:	b2db      	uxtb	r3, r3
   10902:	2900      	cmp	r1, #0
   10904:	f000 82f5 	beq.w	10ef2 <ticker_job+0x776>
		flag_elapsed = 0U;
   10908:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   1090a:	9205      	str	r2, [sp, #20]
   1090c:	e76d      	b.n	107ea <ticker_job+0x6e>
   1090e:	4699      	mov	r9, r3
   10910:	e77b      	b.n	1080a <ticker_job+0x8e>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   10912:	6870      	ldr	r0, [r6, #4]
   10914:	2800      	cmp	r0, #0
   10916:	d1a4      	bne.n	10862 <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   10918:	68b0      	ldr	r0, [r6, #8]
   1091a:	2800      	cmp	r0, #0
   1091c:	d1a1      	bne.n	10862 <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   1091e:	68f0      	ldr	r0, [r6, #12]
   10920:	2800      	cmp	r0, #0
   10922:	d19e      	bne.n	10862 <ticker_job+0xe6>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   10924:	6930      	ldr	r0, [r6, #16]
   10926:	2800      	cmp	r0, #0
   10928:	d19b      	bne.n	10862 <ticker_job+0xe6>
			     (user_op->params.update.lazy == 0U) &&
   1092a:	6970      	ldr	r0, [r6, #20]
   1092c:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   10930:	d197      	bne.n	10862 <ticker_job+0xe6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10932:	2200      	movs	r2, #0
   10934:	f808 2027 	strb.w	r2, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   10938:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	user_op->status = status;
   1093a:	2001      	movs	r0, #1
   1093c:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   1093e:	2a00      	cmp	r2, #0
   10940:	d0e5      	beq.n	1090e <ticker_job+0x192>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10942:	6b31      	ldr	r1, [r6, #48]	; 0x30
   10944:	4790      	blx	r2
		while (user->middle != user->last) {
   10946:	f89b c003 	ldrb.w	ip, [fp, #3]
   1094a:	f89b 9002 	ldrb.w	r9, [fp, #2]
   1094e:	e75c      	b.n	1080a <ticker_job+0x8e>
	if (previous == current) {
   10950:	4285      	cmp	r5, r0
   10952:	f000 80c9 	beq.w	10ae8 <ticker_job+0x36c>
	node[previous].next = ticker_current->next;
   10956:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1095a:	780b      	ldrb	r3, [r1, #0]
   1095c:	eb09 1000 	add.w	r0, r9, r0, lsl #4
	timeout = ticker_current->ticks_to_expire;
   10960:	f8d1 a008 	ldr.w	sl, [r1, #8]
	node[previous].next = ticker_current->next;
   10964:	7003      	strb	r3, [r0, #0]
	if (ticker_current->next != TICKER_NULL) {
   10966:	780b      	ldrb	r3, [r1, #0]
   10968:	2bff      	cmp	r3, #255	; 0xff
   1096a:	d008      	beq.n	1097e <ticker_job+0x202>
		node[ticker_current->next].ticks_to_expire += timeout;
   1096c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10970:	eb09 1903 	add.w	r9, r9, r3, lsl #4
   10974:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10978:	4453      	add	r3, sl
   1097a:	f8c9 3008 	str.w	r3, [r9, #8]
	return (total + timeout);
   1097e:	eb0a 090c 	add.w	r9, sl, ip
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10982:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10984:	f8c4 9008 	str.w	r9, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10988:	d190      	bne.n	108ac <ticker_job+0x130>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1098a:	9b01      	ldr	r3, [sp, #4]
   1098c:	695d      	ldr	r5, [r3, #20]
   1098e:	9502      	str	r5, [sp, #8]
	ticks_now = cntr_cnt_get();
   10990:	f00b fab6 	bl	1bf00 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10994:	9b05      	ldr	r3, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10996:	1b42      	subs	r2, r0, r5
   10998:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1099c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   1099e:	4591      	cmp	r9, r2
	ticks_now = cntr_cnt_get();
   109a0:	4682      	mov	sl, r0
	if (ticks_to_expire > ticks_elapsed) {
   109a2:	f240 80c4 	bls.w	10b2e <ticker_job+0x3b2>
	ticker->ticks_to_expire_minus +=
   109a6:	6963      	ldr	r3, [r4, #20]
   109a8:	9306      	str	r3, [sp, #24]
		ticks_to_expire -= ticks_elapsed;
   109aa:	eba9 0202 	sub.w	r2, r9, r2
	if ((ticker->ticks_periodic != 0U) &&
   109ae:	6865      	ldr	r5, [r4, #4]
   109b0:	2d00      	cmp	r5, #0
   109b2:	d059      	beq.n	10a68 <ticker_job+0x2ec>
	    (user_op->params.update.lazy != 0U)) {
   109b4:	f8b6 9014 	ldrh.w	r9, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   109b8:	f1b9 0f00 	cmp.w	r9, #0
   109bc:	d054      	beq.n	10a68 <ticker_job+0x2ec>
		user_op->params.update.lazy--;
   109be:	f109 3eff 	add.w	lr, r9, #4294967295
   109c2:	fa1f fe8e 	uxth.w	lr, lr
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   109c6:	4295      	cmp	r5, r2
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   109c8:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
   109ca:	f8a6 e014 	strh.w	lr, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   109ce:	d223      	bcs.n	10a18 <ticker_job+0x29c>
   109d0:	1c69      	adds	r1, r5, #1
   109d2:	f8cd 8020 	str.w	r8, [sp, #32]
   109d6:	960c      	str	r6, [sp, #48]	; 0x30
   109d8:	468c      	mov	ip, r1
   109da:	e018      	b.n	10a0e <ticker_job+0x292>
	if ((ticker->remainder_current >= BIT(31)) ||
   109dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   109de:	f8df 8160 	ldr.w	r8, [pc, #352]	; 10b40 <ticker_job+0x3c4>
   109e2:	4e58      	ldr	r6, [pc, #352]	; (10b44 <ticker_job+0x3c8>)
   109e4:	4488      	add	r8, r1
   109e6:	45b0      	cmp	r8, r6
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   109e8:	bf84      	itt	hi
   109ea:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   109ee:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   109f2:	4660      	mov	r0, ip
	ticker->remainder_current -= ticker->remainder_periodic;
   109f4:	6a26      	ldr	r6, [r4, #32]
   109f6:	bf94      	ite	ls
   109f8:	4628      	movls	r0, r5
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   109fa:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   109fe:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   10a00:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   10a02:	1b89      	subs	r1, r1, r6
			ticker->lazy_current--;
   10a04:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10a06:	4295      	cmp	r5, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   10a08:	6261      	str	r1, [r4, #36]	; 0x24
			ticker->lazy_current--;
   10a0a:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10a0c:	d201      	bcs.n	10a12 <ticker_job+0x296>
   10a0e:	459e      	cmp	lr, r3
   10a10:	d3e4      	bcc.n	109dc <ticker_job+0x260>
   10a12:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10a16:	9e0c      	ldr	r6, [sp, #48]	; 0x30
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10a18:	459e      	cmp	lr, r3
   10a1a:	d923      	bls.n	10a64 <ticker_job+0x2e8>
   10a1c:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   10a1e:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   10a20:	e9d4 c108 	ldrd	ip, r1, [r4, #32]
   10a24:	b29b      	uxth	r3, r3
			ticks_to_expire += ticker->ticks_periodic +
   10a26:	9008      	str	r0, [sp, #32]
   10a28:	940c      	str	r4, [sp, #48]	; 0x30
   10a2a:	e005      	b.n	10a38 <ticker_job+0x2bc>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10a2c:	3301      	adds	r3, #1
   10a2e:	b29b      	uxth	r3, r3
   10a30:	4628      	mov	r0, r5
   10a32:	4599      	cmp	r9, r3
			ticks_to_expire += ticker->ticks_periodic +
   10a34:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10a36:	d011      	beq.n	10a5c <ticker_job+0x2e0>
	if ((ticker->remainder_current < BIT(31)) &&
   10a38:	4841      	ldr	r0, [pc, #260]	; (10b40 <ticker_job+0x3c4>)
   10a3a:	4c42      	ldr	r4, [pc, #264]	; (10b44 <ticker_job+0x3c8>)
	ticker->remainder_current += ticker->remainder_periodic;
   10a3c:	4461      	add	r1, ip
	if ((ticker->remainder_current < BIT(31)) &&
   10a3e:	1808      	adds	r0, r1, r0
   10a40:	42a0      	cmp	r0, r4
   10a42:	d8f3      	bhi.n	10a2c <ticker_job+0x2b0>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10a44:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   10a46:	9808      	ldr	r0, [sp, #32]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10a48:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10a4c:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10a4e:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10a52:	4599      	cmp	r9, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10a54:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   10a58:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10a5a:	d1ed      	bne.n	10a38 <ticker_job+0x2bc>
   10a5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   10a5e:	6261      	str	r1, [r4, #36]	; 0x24
   10a60:	f8a4 e01e 	strh.w	lr, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   10a64:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   10a68:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   10a6a:	68b0      	ldr	r0, [r6, #8]
	ticker->ticks_to_expire = ticks_to_expire +
   10a6c:	440a      	add	r2, r1
   10a6e:	60a2      	str	r2, [r4, #8]
	ticker->ticks_to_expire_minus +=
   10a70:	9a06      	ldr	r2, [sp, #24]
   10a72:	4402      	add	r2, r0
   10a74:	6162      	str	r2, [r4, #20]
	struct ticker_ext *ext_data = ticker->ext_data;
   10a76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   10a78:	b11a      	cbz	r2, 10a82 <ticker_job+0x306>
   10a7a:	6813      	ldr	r3, [r2, #0]
   10a7c:	b10b      	cbz	r3, 10a82 <ticker_job+0x306>
			user_op->params.update.ticks_drift_plus -
   10a7e:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   10a80:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   10a82:	4652      	mov	r2, sl
   10a84:	9902      	ldr	r1, [sp, #8]
   10a86:	4620      	mov	r0, r4
   10a88:	f7ff fbe6 	bl	10258 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10a8c:	68f2      	ldr	r2, [r6, #12]
   10a8e:	69a3      	ldr	r3, [r4, #24]
   10a90:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10a92:	6932      	ldr	r2, [r6, #16]
   10a94:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   10a96:	bf8c      	ite	hi
   10a98:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   10a9a:	2300      	movls	r3, #0
   10a9c:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   10a9e:	7db3      	ldrb	r3, [r6, #22]
   10aa0:	b103      	cbz	r3, 10aa4 <ticker_job+0x328>
		ticker->force = user_op->params.update.force;
   10aa2:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
   10aa4:	7df3      	ldrb	r3, [r6, #23]
   10aa6:	b113      	cbz	r3, 10aae <ticker_job+0x332>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   10aa8:	3b01      	subs	r3, #1
   10aaa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   10aae:	9b04      	ldr	r3, [sp, #16]
   10ab0:	7023      	strb	r3, [r4, #0]
		ticker->req++;
   10ab2:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   10ab4:	7872      	ldrb	r2, [r6, #1]
   10ab6:	9204      	str	r2, [sp, #16]
		ticker->req++;
   10ab8:	3301      	adds	r3, #1
   10aba:	7063      	strb	r3, [r4, #1]
   10abc:	e6fd      	b.n	108ba <ticker_job+0x13e>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10abe:	9901      	ldr	r1, [sp, #4]
   10ac0:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   10ac2:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   10ac4:	770b      	strb	r3, [r1, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   10ac6:	d123      	bne.n	10b10 <ticker_job+0x394>
				ticks_at_stop =
   10ac8:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   10aca:	9b01      	ldr	r3, [sp, #4]
   10acc:	695b      	ldr	r3, [r3, #20]
			if (!((ticks_at_stop - ticks_current) &
   10ace:	1ac2      	subs	r2, r0, r3
   10ad0:	0214      	lsls	r4, r2, #8
   10ad2:	d414      	bmi.n	10afe <ticker_job+0x382>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10ad4:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   10ad8:	9a05      	ldr	r2, [sp, #20]
   10ada:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   10adc:	9901      	ldr	r1, [sp, #4]
   10ade:	698a      	ldr	r2, [r1, #24]
   10ae0:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   10ae2:	bf88      	it	hi
   10ae4:	618b      	strhi	r3, [r1, #24]
   10ae6:	e6e8      	b.n	108ba <ticker_job+0x13e>
	node[previous].next = ticker_current->next;
   10ae8:	9b02      	ldr	r3, [sp, #8]
   10aea:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   10aee:	eb09 1000 	add.w	r0, r9, r0, lsl #4
		instance->ticker_id_head = ticker_current->next;
   10af2:	f8dd a004 	ldr.w	sl, [sp, #4]
   10af6:	780b      	ldrb	r3, [r1, #0]
   10af8:	f88a 301d 	strb.w	r3, [sl, #29]
   10afc:	e730      	b.n	10960 <ticker_job+0x1e4>
				if (ticks_elapsed > ticks_used) {
   10afe:	9a05      	ldr	r2, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10b00:	1a1b      	subs	r3, r3, r0
   10b02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   10b06:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   10b08:	bf34      	ite	cc
   10b0a:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   10b0c:	2300      	movcs	r3, #0
   10b0e:	e7e5      	b.n	10adc <ticker_job+0x360>
				ticks_at_stop = cntr_cnt_get();
   10b10:	f00b f9f6 	bl	1bf00 <cntr_cnt_get>
   10b14:	e7d9      	b.n	10aca <ticker_job+0x34e>
		return 0;
   10b16:	4699      	mov	r9, r3
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10b18:	9b01      	ldr	r3, [sp, #4]
   10b1a:	695d      	ldr	r5, [r3, #20]
   10b1c:	9502      	str	r5, [sp, #8]
	ticks_now = cntr_cnt_get();
   10b1e:	f00b f9ef 	bl	1bf00 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10b22:	9b05      	ldr	r3, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10b24:	1b42      	subs	r2, r0, r5
   10b26:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   10b2a:	4682      	mov	sl, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10b2c:	441a      	add	r2, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   10b2e:	6963      	ldr	r3, [r4, #20]
   10b30:	441a      	add	r2, r3
   10b32:	eba2 0309 	sub.w	r3, r2, r9
   10b36:	9306      	str	r3, [sp, #24]
   10b38:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
   10b3a:	2200      	movs	r2, #0
   10b3c:	e737      	b.n	109ae <ticker_job+0x232>
   10b3e:	bf00      	nop
   10b40:	ff172b5a 	.word	0xff172b5a
   10b44:	7f172b59 	.word	0x7f172b59
				instance->sched_cb(TICKER_CALL_ID_JOB,
   10b48:	9b01      	ldr	r3, [sp, #4]
   10b4a:	2104      	movs	r1, #4
   10b4c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10b4e:	2201      	movs	r2, #1
   10b50:	4608      	mov	r0, r1
   10b52:	47a0      	blx	r4
	while (count_user--) {
   10b54:	9a07      	ldr	r2, [sp, #28]
				user->middle = prev;
   10b56:	f88b 9002 	strb.w	r9, [fp, #2]
				pending = 1U;
   10b5a:	2301      	movs	r3, #1
	while (count_user--) {
   10b5c:	455a      	cmp	r2, fp
				pending = 1U;
   10b5e:	9309      	str	r3, [sp, #36]	; 0x24
	while (count_user--) {
   10b60:	f1ab 0308 	sub.w	r3, fp, #8
   10b64:	f47f aebd 	bne.w	108e2 <ticker_job+0x166>
	if (instance->ticker_id_head != ticker_id_old_head) {
   10b68:	f8dd b004 	ldr.w	fp, [sp, #4]
		flag_compare_update = 1U;
   10b6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (instance->ticker_id_head != ticker_id_old_head) {
   10b6e:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   10b72:	1a9b      	subs	r3, r3, r2
   10b74:	bf18      	it	ne
   10b76:	2301      	movne	r3, #1
   10b78:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   10b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10b7c:	2b00      	cmp	r3, #0
   10b7e:	f000 81bb 	beq.w	10ef8 <ticker_job+0x77c>
	ticks_now = cntr_cnt_get();
   10b82:	f00b f9bd 	bl	1bf00 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	while (instance->ticker_id_head != TICKER_NULL) {
   10b88:	f89b 601d 	ldrb.w	r6, [fp, #29]
	node = &instance->nodes[0];
   10b8c:	f8db 9000 	ldr.w	r9, [fp]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10b90:	1ac3      	subs	r3, r0, r3
   10b92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   10b96:	2eff      	cmp	r6, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10b98:	9303      	str	r3, [sp, #12]
	while (instance->ticker_id_head != TICKER_NULL) {
   10b9a:	d051      	beq.n	10c40 <ticker_job+0x4c4>
	ticks_expired = 0U;
   10b9c:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   10b9e:	f8df 829c 	ldr.w	r8, [pc, #668]	; 10e3c <ticker_job+0x6c0>
   10ba2:	f8df a29c 	ldr.w	sl, [pc, #668]	; 10e40 <ticker_job+0x6c4>
	while (instance->ticker_id_head != TICKER_NULL) {
   10ba6:	9f05      	ldr	r7, [sp, #20]
	ticks_expired = 0U;
   10ba8:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   10baa:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   10bae:	eb09 1403 	add.w	r4, r9, r3, lsl #4
   10bb2:	011b      	lsls	r3, r3, #4
   10bb4:	9301      	str	r3, [sp, #4]
		ticks_to_expire = ticker->ticks_to_expire;
   10bb6:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10bb8:	42bb      	cmp	r3, r7
   10bba:	f200 82a6 	bhi.w	1110a <ticker_job+0x98e>
		ticks_expired += ticks_to_expire;
   10bbe:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   10bc0:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		ticks_expired += ticks_to_expire;
   10bc4:	441a      	add	r2, r3
   10bc6:	9202      	str	r2, [sp, #8]
		ticks_latency -= ticks_to_expire;
   10bc8:	9a03      	ldr	r2, [sp, #12]
   10bca:	1ad2      	subs	r2, r2, r3
   10bcc:	9203      	str	r2, [sp, #12]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   10bce:	f8db 2018 	ldr.w	r2, [fp, #24]
   10bd2:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   10bd4:	eba7 0703 	sub.w	r7, r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   10bd8:	bf25      	ittet	cs
   10bda:	f04f 33ff 	movcs.w	r3, #4294967295
   10bde:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   10be2:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   10be4:	2300      	movcs	r3, #0
   10be6:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   10bea:	78a2      	ldrb	r2, [r4, #2]
   10bec:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   10bee:	69a1      	ldr	r1, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   10bf0:	1a9b      	subs	r3, r3, r2
   10bf2:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   10bf4:	b111      	cbz	r1, 10bfc <ticker_job+0x480>
   10bf6:	2b02      	cmp	r3, #2
   10bf8:	f000 81a4 	beq.w	10f44 <ticker_job+0x7c8>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   10bfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ticker->ticks_to_expire = 0U;
   10bfe:	2100      	movs	r1, #0
   10c00:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
   10c02:	9901      	ldr	r1, [sp, #4]
   10c04:	f819 1001 	ldrb.w	r1, [r9, r1]
   10c08:	f88b 101d 	strb.w	r1, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   10c0c:	6865      	ldr	r5, [r4, #4]
   10c0e:	2d00      	cmp	r5, #0
   10c10:	f040 809b 	bne.w	10d4a <ticker_job+0x5ce>
   10c14:	b118      	cbz	r0, 10c1e <ticker_job+0x4a2>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   10c16:	7a01      	ldrb	r1, [r0, #8]
   10c18:	2901      	cmp	r1, #1
   10c1a:	f000 809d 	beq.w	10d58 <ticker_job+0x5dc>
			if (state && ((state == 1U) || skip_collision) &&
   10c1e:	b153      	cbz	r3, 10c36 <ticker_job+0x4ba>
   10c20:	2b01      	cmp	r3, #1
   10c22:	d002      	beq.n	10c2a <ticker_job+0x4ae>
   10c24:	f1be 0f00 	cmp.w	lr, #0
   10c28:	d005      	beq.n	10c36 <ticker_job+0x4ba>
			    ticker->fp_op_func) {
   10c2a:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   10c2c:	b11b      	cbz	r3, 10c36 <ticker_job+0x4ba>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   10c2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10c30:	2001      	movs	r0, #1
   10c32:	4798      	blx	r3
			ticker->req = ticker->ack;
   10c34:	78a2      	ldrb	r2, [r4, #2]
   10c36:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   10c38:	f89b 601d 	ldrb.w	r6, [fp, #29]
   10c3c:	2eff      	cmp	r6, #255	; 0xff
   10c3e:	d1b4      	bne.n	10baa <ticker_job+0x42e>
			flag_compare_update = 1U;
   10c40:	9b08      	ldr	r3, [sp, #32]
   10c42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ticker_job_list_insert(instance, insert_head);
   10c44:	9904      	ldr	r1, [sp, #16]
			flag_compare_update = 1U;
   10c46:	4296      	cmp	r6, r2
   10c48:	bf18      	it	ne
   10c4a:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   10c4c:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   10c4e:	9308      	str	r3, [sp, #32]
		ticker_job_list_insert(instance, insert_head);
   10c50:	f7ff fb26 	bl	102a0 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   10c54:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   10c58:	f8db 1000 	ldr.w	r1, [fp]
	while (rescheduling) {
   10c5c:	e9cd 3b01 	strd	r3, fp, [sp, #4]
	uint8_t  rescheduled = 0U;
   10c60:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   10c62:	9b01      	ldr	r3, [sp, #4]
   10c64:	2bff      	cmp	r3, #255	; 0xff
   10c66:	d00f      	beq.n	10c88 <ticker_job+0x50c>
   10c68:	9f01      	ldr	r7, [sp, #4]
			ticker = &nodes[ticker_id_head];
   10c6a:	b23b      	sxth	r3, r7
   10c6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10c70:	eb01 1603 	add.w	r6, r1, r3, lsl #4
   10c74:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   10c76:	6ab0      	ldr	r0, [r6, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   10c78:	b118      	cbz	r0, 10c82 <ticker_job+0x506>
   10c7a:	7a04      	ldrb	r4, [r0, #8]
   10c7c:	2c01      	cmp	r4, #1
   10c7e:	f000 8083 	beq.w	10d88 <ticker_job+0x60c>
			ticker_id_head = ticker->next;
   10c82:	5ccf      	ldrb	r7, [r1, r3]
		while (ticker_id_head != TICKER_NULL) {
   10c84:	2fff      	cmp	r7, #255	; 0xff
   10c86:	d1f0      	bne.n	10c6a <ticker_job+0x4ee>
	return rescheduled;
   10c88:	f8dd b008 	ldr.w	fp, [sp, #8]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   10c8c:	2a00      	cmp	r2, #0
   10c8e:	f000 813a 	beq.w	10f06 <ticker_job+0x78a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   10c92:	9b01      	ldr	r3, [sp, #4]
   10c94:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10c96:	428b      	cmp	r3, r1
   10c98:	f000 819b 	beq.w	10fd2 <ticker_job+0x856>
	if (!pending) {
   10c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c9e:	2b00      	cmp	r3, #0
   10ca0:	f000 81a2 	beq.w	10fe8 <ticker_job+0x86c>
	if (instance->ticker_id_head == TICKER_NULL) {
   10ca4:	f89b 201d 	ldrb.w	r2, [fp, #29]
   10ca8:	9201      	str	r2, [sp, #4]
	instance->job_guard = 0U;
   10caa:	2300      	movs	r3, #0
   10cac:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
   10cb0:	9b01      	ldr	r3, [sp, #4]
   10cb2:	2bff      	cmp	r3, #255	; 0xff
   10cb4:	f000 824b 	beq.w	1114e <ticker_job+0x9d2>
	if (ticker_id_old_head == TICKER_NULL) {
   10cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10cba:	2bff      	cmp	r3, #255	; 0xff
   10cbc:	f000 8258 	beq.w	11170 <ticker_job+0x9f4>
	ticker = &instance->nodes[instance->ticker_id_head];
   10cc0:	9a01      	ldr	r2, [sp, #4]
	ticks_to_expire = ticker->ticks_to_expire;
   10cc2:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   10cc6:	f8df 917c 	ldr.w	r9, [pc, #380]	; 10e44 <ticker_job+0x6c8>
   10cca:	f8df 817c 	ldr.w	r8, [pc, #380]	; 10e48 <ticker_job+0x6cc>
   10cce:	4f5f      	ldr	r7, [pc, #380]	; (10e4c <ticker_job+0x6d0>)
	ticker = &instance->nodes[instance->ticker_id_head];
   10cd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   10cd4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   10cd8:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   10cda:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   10cdc:	f00b f910 	bl	1bf00 <cntr_cnt_get>
		cc = instance->ticks_current;
   10ce0:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10ce4:	1b03      	subs	r3, r0, r4
   10ce6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   10cea:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   10cec:	42b3      	cmp	r3, r6
   10cee:	bf2c      	ite	cs
   10cf0:	18e4      	addcs	r4, r4, r3
   10cf2:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   10cf4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   10cf8:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   10cfc:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   10cfe:	4620      	mov	r0, r4
   10d00:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   10d02:	f00b f8fd 	bl	1bf00 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10d06:	eba0 030a 	sub.w	r3, r0, sl
   10d0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10d0e:	eba4 020a 	sub.w	r2, r4, sl
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   10d12:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10d14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   10d18:	4293      	cmp	r3, r2
		i--;
   10d1a:	f105 35ff 	add.w	r5, r5, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
   10d1e:	f240 8102 	bls.w	10f26 <ticker_job+0x7aa>
		LL_ASSERT(i);
   10d22:	2d00      	cmp	r5, #0
   10d24:	d1da      	bne.n	10cdc <ticker_job+0x560>
   10d26:	f640 03ba 	movw	r3, #2234	; 0x8ba
   10d2a:	464a      	mov	r2, r9
   10d2c:	4641      	mov	r1, r8
   10d2e:	4638      	mov	r0, r7
   10d30:	f010 fab0 	bl	21294 <printk>
   10d34:	4040      	eors	r0, r0
   10d36:	f380 8811 	msr	BASEPRI, r0
   10d3a:	f04f 0003 	mov.w	r0, #3
   10d3e:	df02      	svc	2
   10d40:	e7cc      	b.n	10cdc <ticker_job+0x560>
		if (current == id) {
   10d42:	4608      	mov	r0, r1
	total = 0U;
   10d44:	f04f 0c00 	mov.w	ip, #0
   10d48:	e6d3      	b.n	10af2 <ticker_job+0x376>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   10d4a:	2800      	cmp	r0, #0
   10d4c:	f000 80a6 	beq.w	10e9c <ticker_job+0x720>
   10d50:	7a03      	ldrb	r3, [r0, #8]
   10d52:	2b01      	cmp	r3, #1
   10d54:	f040 80a2 	bne.w	10e9c <ticker_job+0x720>
				ticker->req = ticker->ack;
   10d58:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   10d5a:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   10d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d5e:	9a02      	ldr	r2, [sp, #8]
   10d60:	f8db 1014 	ldr.w	r1, [fp, #20]
   10d64:	189a      	adds	r2, r3, r2
   10d66:	4620      	mov	r0, r4
   10d68:	f7ff fa76 	bl	10258 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   10d6c:	9a01      	ldr	r2, [sp, #4]
   10d6e:	9b04      	ldr	r3, [sp, #16]
   10d70:	f809 3002 	strb.w	r3, [r9, r2]
			ticker->req++;
   10d74:	7863      	ldrb	r3, [r4, #1]
   10d76:	9604      	str	r6, [sp, #16]
   10d78:	3301      	adds	r3, #1
   10d7a:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   10d7c:	f89b 601d 	ldrb.w	r6, [fp, #29]
   10d80:	2eff      	cmp	r6, #255	; 0xff
   10d82:	f47f af12 	bne.w	10baa <ticker_job+0x42e>
   10d86:	e75b      	b.n	10c40 <ticker_job+0x4c4>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   10d88:	9b02      	ldr	r3, [sp, #8]
   10d8a:	7f1b      	ldrb	r3, [r3, #28]
   10d8c:	2bff      	cmp	r3, #255	; 0xff
   10d8e:	4686      	mov	lr, r0
   10d90:	d044      	beq.n	10e1c <ticker_job+0x6a0>
			instance->ticks_slot_previous > ticks_elapsed) {
   10d92:	9b02      	ldr	r3, [sp, #8]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   10d94:	9a05      	ldr	r2, [sp, #20]
			instance->ticks_slot_previous > ticks_elapsed) {
   10d96:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   10d98:	4293      	cmp	r3, r2
   10d9a:	d93f      	bls.n	10e1c <ticker_job+0x6a0>
			window_start_ticks = instance->ticks_slot_previous -
   10d9c:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   10da0:	e9de 2300 	ldrd	r2, r3, [lr]
   10da4:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   10da6:	f896 b000 	ldrb.w	fp, [r6]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   10daa:	d23f      	bcs.n	10e2c <ticker_job+0x6b0>
		while (ticker_id_iter != TICKER_NULL &&
   10dac:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   10db0:	eba2 0903 	sub.w	r9, r2, r3
		while (ticker_id_iter != TICKER_NULL &&
   10db4:	d03a      	beq.n	10e2c <ticker_job+0x6b0>
		       ticks_start_offset + ticker->ticks_slot <=
   10db6:	f8d6 8018 	ldr.w	r8, [r6, #24]
		while (ticker_id_iter != TICKER_NULL &&
   10dba:	45c1      	cmp	r9, r8
   10dbc:	f04f 0300 	mov.w	r3, #0
   10dc0:	d337      	bcc.n	10e32 <ticker_job+0x6b6>
   10dc2:	46c2      	mov	sl, r8
   10dc4:	465a      	mov	r2, fp
   10dc6:	461d      	mov	r5, r3
   10dc8:	e01b      	b.n	10e02 <ticker_job+0x686>
			if (node->ticks_to_expire >
   10dca:	68a0      	ldr	r0, [r4, #8]
					MIN(ticks_slot_window,
   10dcc:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
   10dce:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
   10dd0:	442b      	add	r3, r5
			if (node->ticks_to_expire >
   10dd2:	d909      	bls.n	10de8 <ticker_job+0x66c>
				window_end_ticks =
   10dd4:	454b      	cmp	r3, r9
   10dd6:	bf28      	it	cs
   10dd8:	464b      	movcs	r3, r9
			if (window_end_ticks > ticks_start_offset +
   10dda:	459a      	cmp	sl, r3
   10ddc:	d204      	bcs.n	10de8 <ticker_job+0x66c>
			if (ticks_to_expire != 0U &&
   10dde:	ebb3 0308 	subs.w	r3, r3, r8
   10de2:	d001      	beq.n	10de8 <ticker_job+0x66c>
   10de4:	459c      	cmp	ip, r3
   10de6:	d924      	bls.n	10e32 <ticker_job+0x6b6>
			window_start_ticks  = node->ticks_to_expire +
   10de8:	69a3      	ldr	r3, [r4, #24]
			ticker_id_iter = node->next;
   10dea:	5c8a      	ldrb	r2, [r1, r2]
			window_start_ticks  = node->ticks_to_expire +
   10dec:	eb00 0c03 	add.w	ip, r0, r3
			ticks_start_offset += node->ticks_to_expire;
   10df0:	4405      	add	r5, r0
			ticks_to_expire     = ticks_slot_window -
   10df2:	eba9 0308 	sub.w	r3, r9, r8
		while (ticker_id_iter != TICKER_NULL &&
   10df6:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   10df8:	eb05 0a08 	add.w	sl, r5, r8
		while (ticker_id_iter != TICKER_NULL &&
   10dfc:	d019      	beq.n	10e32 <ticker_job+0x6b6>
   10dfe:	45d1      	cmp	r9, sl
   10e00:	d317      	bcc.n	10e32 <ticker_job+0x6b6>
			node = &nodes[ticker_id_iter];
   10e02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10e06:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   10e0a:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   10e0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   10e0e:	2800      	cmp	r0, #0
   10e10:	d0db      	beq.n	10dca <ticker_job+0x64e>
   10e12:	7a00      	ldrb	r0, [r0, #8]
   10e14:	2801      	cmp	r0, #1
   10e16:	d1d8      	bne.n	10dca <ticker_job+0x64e>
				ticker_id_iter = node->next;
   10e18:	5c8a      	ldrb	r2, [r1, r2]
				continue;
   10e1a:	e7ec      	b.n	10df6 <ticker_job+0x67a>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   10e1c:	e9de 2300 	ldrd	r2, r3, [lr]
   10e20:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   10e22:	f896 b000 	ldrb.w	fp, [r6]
		window_start_ticks = 0U;
   10e26:	f04f 0c00 	mov.w	ip, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   10e2a:	d3bf      	bcc.n	10dac <ticker_job+0x630>
		ticker->ticks_to_expire = ticks_to_expire;
   10e2c:	2300      	movs	r3, #0
   10e2e:	60b3      	str	r3, [r6, #8]
		while (ticker_id_iter != TICKER_NULL) {
   10e30:	e02b      	b.n	10e8a <ticker_job+0x70e>
		ticker->ticks_to_expire = ticks_to_expire;
   10e32:	60b3      	str	r3, [r6, #8]
   10e34:	465d      	mov	r5, fp
   10e36:	f04f 08ff 	mov.w	r8, #255	; 0xff
   10e3a:	e00a      	b.n	10e52 <ticker_job+0x6d6>
   10e3c:	ff172b5a 	.word	0xff172b5a
   10e40:	7f172b59 	.word	0x7f172b59
   10e44:	00027a74 	.word	0x00027a74
   10e48:	00027b78 	.word	0x00027b78
   10e4c:	00027ab4 	.word	0x00027ab4
   10e50:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
   10e52:	b228      	sxth	r0, r5
   10e54:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   10e58:	eb01 1c02 	add.w	ip, r1, r2, lsl #4
   10e5c:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   10e5e:	f8dc 4008 	ldr.w	r4, [ip, #8]
   10e62:	429c      	cmp	r4, r3
   10e64:	f080 80ab 	bcs.w	10fbe <ticker_job+0x842>
				ticker->ticks_to_expire -=
   10e68:	1b1b      	subs	r3, r3, r4
   10e6a:	60b3      	str	r3, [r6, #8]
			ticker_id_iter = node->next;
   10e6c:	5c8a      	ldrb	r2, [r1, r2]
		while (ticker_id_iter != TICKER_NULL) {
   10e6e:	2aff      	cmp	r2, #255	; 0xff
   10e70:	46a8      	mov	r8, r5
   10e72:	d1ed      	bne.n	10e50 <ticker_job+0x6d4>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   10e74:	9a02      	ldr	r2, [sp, #8]
			nodes[ticker_id_prev].next = ticker_id_head;
   10e76:	f8cd b004 	str.w	fp, [sp, #4]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   10e7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   10e7e:	0103      	lsls	r3, r0, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   10e80:	f882 b01d 	strb.w	fp, [r2, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   10e84:	5cca      	ldrb	r2, [r1, r3]
   10e86:	7032      	strb	r2, [r6, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   10e88:	54cf      	strb	r7, [r1, r3]
		ticker->lazy_current--;
   10e8a:	8bf3      	ldrh	r3, [r6, #30]
   10e8c:	3b01      	subs	r3, #1
   10e8e:	83f3      	strh	r3, [r6, #30]
		ext_data->reschedule_state =
   10e90:	f04f 0302 	mov.w	r3, #2
   10e94:	f88e 3008 	strb.w	r3, [lr, #8]
		rescheduled  = 1U;
   10e98:	2201      	movs	r2, #1
   10e9a:	e6e2      	b.n	10c62 <ticker_job+0x4e6>
				if (!ticker->lazy_current) {
   10e9c:	f1be 0f00 	cmp.w	lr, #0
   10ea0:	d15f      	bne.n	10f62 <ticker_job+0x7e6>
					lazy_periodic = ticker->lazy_periodic;
   10ea2:	8ba3      	ldrh	r3, [r4, #28]
   10ea4:	9307      	str	r3, [sp, #28]
   10ea6:	461a      	mov	r2, r3
				while (count--) {
   10ea8:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   10eaa:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   10eae:	2100      	movs	r1, #0
   10eb0:	9006      	str	r0, [sp, #24]
   10eb2:	e004      	b.n	10ebe <ticker_job+0x742>
   10eb4:	4628      	mov	r0, r5
				while (count--) {
   10eb6:	3a01      	subs	r2, #1
					ticks_to_expire +=
   10eb8:	4401      	add	r1, r0
				while (count--) {
   10eba:	1c50      	adds	r0, r2, #1
   10ebc:	d00f      	beq.n	10ede <ticker_job+0x762>
	ticker->remainder_current += ticker->remainder_periodic;
   10ebe:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   10ec0:	eb03 0008 	add.w	r0, r3, r8
   10ec4:	4550      	cmp	r0, sl
   10ec6:	d8f5      	bhi.n	10eb4 <ticker_job+0x738>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10ec8:	9806      	ldr	r0, [sp, #24]
   10eca:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   10ece:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10ed0:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   10ed4:	4401      	add	r1, r0
				while (count--) {
   10ed6:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10ed8:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   10edc:	d1ef      	bne.n	10ebe <ticker_job+0x742>
				if (!ticker->must_expire) {
   10ede:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   10ee2:	6263      	str	r3, [r4, #36]	; 0x24
   10ee4:	2a00      	cmp	r2, #0
   10ee6:	d041      	beq.n	10f6c <ticker_job+0x7f0>
				ticker->lazy_current += (lazy_periodic + lazy);
   10ee8:	9b07      	ldr	r3, [sp, #28]
				ticker->ticks_to_expire = ticks_to_expire;
   10eea:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   10eec:	4473      	add	r3, lr
   10eee:	83e3      	strh	r3, [r4, #30]
   10ef0:	e734      	b.n	10d5c <ticker_job+0x5e0>
	insert_head = TICKER_NULL;
   10ef2:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
   10ef4:	9109      	str	r1, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   10ef6:	9304      	str	r3, [sp, #16]
		ticker_job_list_insert(instance, insert_head);
   10ef8:	9904      	ldr	r1, [sp, #16]
   10efa:	4658      	mov	r0, fp
   10efc:	f7ff f9d0 	bl	102a0 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   10f00:	f89b 301d 	ldrb.w	r3, [fp, #29]
   10f04:	9301      	str	r3, [sp, #4]
   10f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10f08:	9a01      	ldr	r2, [sp, #4]
   10f0a:	4293      	cmp	r3, r2
   10f0c:	f47f aec6 	bne.w	10c9c <ticker_job+0x520>
	if (!pending) {
   10f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f12:	2b00      	cmp	r3, #0
   10f14:	f000 80fc 	beq.w	11110 <ticker_job+0x994>
	instance->job_guard = 0U;
   10f18:	2300      	movs	r3, #0
   10f1a:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   10f1e:	9b08      	ldr	r3, [sp, #32]
   10f20:	2b00      	cmp	r3, #0
   10f22:	f040 8133 	bne.w	1118c <ticker_job+0xa10>
	if (instance->worker_trigger) {
   10f26:	f89b 301f 	ldrb.w	r3, [fp, #31]
   10f2a:	2b00      	cmp	r3, #0
   10f2c:	d059      	beq.n	10fe2 <ticker_job+0x866>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   10f2e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   10f32:	465b      	mov	r3, fp
   10f34:	2201      	movs	r2, #1
   10f36:	2103      	movs	r1, #3
   10f38:	2004      	movs	r0, #4
   10f3a:	46a4      	mov	ip, r4
}
   10f3c:	b00f      	add	sp, #60	; 0x3c
   10f3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   10f42:	4760      	bx	ip
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   10f44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   10f46:	f1be 0f00 	cmp.w	lr, #0
   10f4a:	f47f ae58 	bne.w	10bfe <ticker_job+0x482>
   10f4e:	b118      	cbz	r0, 10f58 <ticker_job+0x7dc>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   10f50:	7a05      	ldrb	r5, [r0, #8]
   10f52:	2d01      	cmp	r5, #1
   10f54:	f000 80e6 	beq.w	11124 <ticker_job+0x9a8>
			instance->ticks_slot_previous = ticker->ticks_slot;
   10f58:	f8cb 1018 	str.w	r1, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   10f5c:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   10f60:	e64d      	b.n	10bfe <ticker_job+0x482>
					ticker->req = ticker->ack;
   10f62:	7062      	strb	r2, [r4, #1]
   10f64:	2200      	movs	r2, #0
					lazy_periodic = 0U;
   10f66:	9207      	str	r2, [sp, #28]
   10f68:	e79e      	b.n	10ea8 <ticker_job+0x72c>
   10f6a:	4770      	bx	lr
					while (ticks_to_expire <
   10f6c:	9803      	ldr	r0, [sp, #12]
   10f6e:	4288      	cmp	r0, r1
   10f70:	d9ba      	bls.n	10ee8 <ticker_job+0x76c>
   10f72:	1c68      	adds	r0, r5, #1
   10f74:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   10f78:	9006      	str	r0, [sp, #24]
   10f7a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   10f7e:	e005      	b.n	10f8c <ticker_job+0x810>
   10f80:	4628      	mov	r0, r5
						ticks_to_expire +=
   10f82:	4401      	add	r1, r0
						lazy++;
   10f84:	3201      	adds	r2, #1
					while (ticks_to_expire <
   10f86:	4589      	cmp	r9, r1
						lazy++;
   10f88:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   10f8a:	d910      	bls.n	10fae <ticker_job+0x832>
	ticker->remainder_current += ticker->remainder_periodic;
   10f8c:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   10f8e:	eb03 0008 	add.w	r0, r3, r8
   10f92:	4550      	cmp	r0, sl
   10f94:	d8f4      	bhi.n	10f80 <ticker_job+0x804>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10f96:	9806      	ldr	r0, [sp, #24]
   10f98:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   10f9c:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10f9e:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   10fa2:	3201      	adds	r2, #1
					while (ticks_to_expire <
   10fa4:	4589      	cmp	r9, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10fa6:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   10faa:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   10fac:	d8ee      	bhi.n	10f8c <ticker_job+0x810>
				ticker->lazy_current += (lazy_periodic + lazy);
   10fae:	9807      	ldr	r0, [sp, #28]
   10fb0:	6263      	str	r3, [r4, #36]	; 0x24
   10fb2:	4410      	add	r0, r2
   10fb4:	b283      	uxth	r3, r0
   10fb6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   10fba:	9307      	str	r3, [sp, #28]
   10fbc:	e794      	b.n	10ee8 <ticker_job+0x76c>
				node->ticks_to_expire -=
   10fbe:	1ae3      	subs	r3, r4, r3
		if (ticker_id_prev != TICKER_NULL) {
   10fc0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
				node->ticks_to_expire -=
   10fc4:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   10fc8:	f43f af5f 	beq.w	10e8a <ticker_job+0x70e>
   10fcc:	fa0f f088 	sxth.w	r0, r8
   10fd0:	e750      	b.n	10e74 <ticker_job+0x6f8>
	if (!pending) {
   10fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10fd4:	2b00      	cmp	r3, #0
   10fd6:	f000 80b1 	beq.w	1113c <ticker_job+0x9c0>
	instance->job_guard = 0U;
   10fda:	2300      	movs	r3, #0
   10fdc:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   10fe0:	e666      	b.n	10cb0 <ticker_job+0x534>
}
   10fe2:	b00f      	add	sp, #60	; 0x3c
   10fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	count_user = instance->count_user;
   10fe8:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   10fec:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   10ff0:	1e5c      	subs	r4, r3, #1
   10ff2:	b2e4      	uxtb	r4, r4
   10ff4:	2b00      	cmp	r3, #0
   10ff6:	f43f ae55 	beq.w	10ca4 <ticker_job+0x528>
		flag_compare_update = 1U;
   10ffa:	2301      	movs	r3, #1
   10ffc:	9308      	str	r3, [sp, #32]
   10ffe:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   11002:	2500      	movs	r5, #0
			uop->status = TICKER_STATUS_FAILURE;
   11004:	f04f 0a01 	mov.w	sl, #1
   11008:	9601      	str	r6, [sp, #4]
		while (user->first != user->last) {
   1100a:	7863      	ldrb	r3, [r4, #1]
   1100c:	78e2      	ldrb	r2, [r4, #3]
		user_op = &user->user_op[0];
   1100e:	6867      	ldr	r7, [r4, #4]
		while (user->first != user->last) {
   11010:	429a      	cmp	r2, r3
   11012:	d10c      	bne.n	1102e <ticker_job+0x8b2>
   11014:	e068      	b.n	110e8 <ticker_job+0x96c>
	switch (uop->op) {
   11016:	2b01      	cmp	r3, #1
   11018:	d05e      	beq.n	110d8 <ticker_job+0x95c>
			first = user->first + 1;
   1101a:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   1101c:	7821      	ldrb	r1, [r4, #0]
			first = user->first + 1;
   1101e:	3301      	adds	r3, #1
   11020:	b2db      	uxtb	r3, r3
				first = 0U;
   11022:	4299      	cmp	r1, r3
   11024:	bf08      	it	eq
   11026:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   11028:	429a      	cmp	r2, r3
			user->first = first;
   1102a:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   1102c:	d05c      	beq.n	110e8 <ticker_job+0x96c>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   1102e:	b21b      	sxth	r3, r3
   11030:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   11034:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   11038:	eb07 0c83 	add.w	ip, r7, r3, lsl #2
	switch (uop->op) {
   1103c:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   11040:	2b02      	cmp	r3, #2
   11042:	d01d      	beq.n	11080 <ticker_job+0x904>
   11044:	2b03      	cmp	r3, #3
   11046:	d1e6      	bne.n	11016 <ticker_job+0x89a>
		if (uop->id < instance->count_node) {
   11048:	f89c 3001 	ldrb.w	r3, [ip, #1]
   1104c:	f89b 2008 	ldrb.w	r2, [fp, #8]
   11050:	429a      	cmp	r2, r3
   11052:	d946      	bls.n	110e2 <ticker_job+0x966>
			node[uop->id].priority =
   11054:	f8db 2000 	ldr.w	r2, [fp]
   11058:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1105c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   11060:	f89c 2004 	ldrb.w	r2, [ip, #4]
   11064:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   11068:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   1106c:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
	if (fp_op_func) {
   11070:	b123      	cbz	r3, 1107c <ticker_job+0x900>
		fp_op_func(uop->status, uop->op_context);
   11072:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
   11076:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
   1107a:	4798      	blx	r3
   1107c:	78e2      	ldrb	r2, [r4, #3]
   1107e:	e7cc      	b.n	1101a <ticker_job+0x89e>
		ticker_by_next_slot_get(instance,
   11080:	e9dc e101 	ldrd	lr, r1, [ip, #4]
	_ticker_id_head = *ticker_id_head;
   11084:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
   11088:	f8dc 800c 	ldr.w	r8, [ip, #12]
	node = instance->nodes;
   1108c:	f8db 0000 	ldr.w	r0, [fp]
	    (*ticks_current != instance->ticks_current)) {
   11090:	f8db 6014 	ldr.w	r6, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   11094:	2aff      	cmp	r2, #255	; 0xff
   11096:	d002      	beq.n	1109e <ticker_job+0x922>
   11098:	680b      	ldr	r3, [r1, #0]
   1109a:	42b3      	cmp	r3, r6
   1109c:	d02e      	beq.n	110fc <ticker_job+0x980>
		_ticker_id_head = instance->ticker_id_head;
   1109e:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   110a2:	600e      	str	r6, [r1, #0]
		_ticks_to_expire = 0U;
   110a4:	2600      	movs	r6, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   110a6:	2aff      	cmp	r2, #255	; 0xff
   110a8:	bf18      	it	ne
   110aa:	46a1      	movne	r9, r4
   110ac:	d105      	bne.n	110ba <ticker_job+0x93e>
   110ae:	e00f      	b.n	110d0 <ticker_job+0x954>
		_ticker_id_head = ticker->next;
   110b0:	5cc2      	ldrb	r2, [r0, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   110b2:	6889      	ldr	r1, [r1, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   110b4:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
   110b6:	440e      	add	r6, r1
	while ((_ticker_id_head != TICKER_NULL) &&
   110b8:	d01e      	beq.n	110f8 <ticker_job+0x97c>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   110ba:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   110be:	eb00 1103 	add.w	r1, r0, r3, lsl #4
   110c2:	011b      	lsls	r3, r3, #4
	while ((_ticker_id_head != TICKER_NULL) &&
   110c4:	698c      	ldr	r4, [r1, #24]
   110c6:	2c00      	cmp	r4, #0
   110c8:	d0f2      	beq.n	110b0 <ticker_job+0x934>
		_ticks_to_expire += ticker->ticks_to_expire;
   110ca:	688b      	ldr	r3, [r1, #8]
   110cc:	464c      	mov	r4, r9
   110ce:	441e      	add	r6, r3
	*ticker_id_head = _ticker_id_head;
   110d0:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
   110d4:	f8c8 6000 	str.w	r6, [r8]
		fp_op_func = uop->fp_op_func;
   110d8:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   110dc:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		break;
   110e0:	e7c6      	b.n	11070 <ticker_job+0x8f4>
			uop->status = TICKER_STATUS_FAILURE;
   110e2:	f8cc a028 	str.w	sl, [ip, #40]	; 0x28
   110e6:	e7c1      	b.n	1106c <ticker_job+0x8f0>
	while (count_user--) {
   110e8:	9a01      	ldr	r2, [sp, #4]
   110ea:	42a2      	cmp	r2, r4
   110ec:	f1a4 0308 	sub.w	r3, r4, #8
   110f0:	f43f af12 	beq.w	10f18 <ticker_job+0x79c>
   110f4:	461c      	mov	r4, r3
   110f6:	e788      	b.n	1100a <ticker_job+0x88e>
   110f8:	464c      	mov	r4, r9
   110fa:	e7e9      	b.n	110d0 <ticker_job+0x954>
		ticker = &node[_ticker_id_head];
   110fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11100:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   11102:	f8d8 6000 	ldr.w	r6, [r8]
		_ticker_id_head = ticker->next;
   11106:	5cc2      	ldrb	r2, [r0, r3]
   11108:	e7cd      	b.n	110a6 <ticker_job+0x92a>
			ticker->ticks_to_expire -= ticks_elapsed;
   1110a:	1bdb      	subs	r3, r3, r7
   1110c:	60a3      	str	r3, [r4, #8]
			break;
   1110e:	e597      	b.n	10c40 <ticker_job+0x4c4>
	count_user = instance->count_user;
   11110:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   11114:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11118:	1e5c      	subs	r4, r3, #1
   1111a:	b2e4      	uxtb	r4, r4
   1111c:	2b00      	cmp	r3, #0
   1111e:	f47f af6e 	bne.w	10ffe <ticker_job+0x882>
   11122:	e6f9      	b.n	10f18 <ticker_job+0x79c>
		instance->ticker_id_head = ticker->next;
   11124:	9901      	ldr	r1, [sp, #4]
		ticker->ticks_to_expire = 0U;
   11126:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1112a:	f819 1001 	ldrb.w	r1, [r9, r1]
   1112e:	f88b 101d 	strb.w	r1, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   11132:	6861      	ldr	r1, [r4, #4]
   11134:	2900      	cmp	r1, #0
   11136:	f43f ad6e 	beq.w	10c16 <ticker_job+0x49a>
   1113a:	e60d      	b.n	10d58 <ticker_job+0x5dc>
	count_user = instance->count_user;
   1113c:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   11140:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11144:	1e5c      	subs	r4, r3, #1
   11146:	b2e4      	uxtb	r4, r4
   11148:	b323      	cbz	r3, 11194 <ticker_job+0xa18>
			flag_compare_update = 1U;
   1114a:	9208      	str	r2, [sp, #32]
   1114c:	e757      	b.n	10ffe <ticker_job+0x882>
		if (cntr_stop() == 0) {
   1114e:	f00a feb1 	bl	1beb4 <cntr_stop>
   11152:	2800      	cmp	r0, #0
   11154:	f47f aee7 	bne.w	10f26 <ticker_job+0x7aa>
			instance->ticks_slot_previous = 0U;
   11158:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   1115c:	f00a fed0 	bl	1bf00 <cntr_cnt_get>
   11160:	f8cb 0014 	str.w	r0, [fp, #20]
   11164:	e6df      	b.n	10f26 <ticker_job+0x7aa>
	pending = 0U;
   11166:	9b08      	ldr	r3, [sp, #32]
   11168:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   1116a:	23ff      	movs	r3, #255	; 0xff
   1116c:	9304      	str	r3, [sp, #16]
   1116e:	e508      	b.n	10b82 <ticker_job+0x406>
		ticks_current = cntr_cnt_get();
   11170:	f00a fec6 	bl	1bf00 <cntr_cnt_get>
   11174:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   11176:	f00a fe8d 	bl	1be94 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   1117a:	f89b 301d 	ldrb.w	r3, [fp, #29]
   1117e:	9301      	str	r3, [sp, #4]
		if (cntr_start() == 0) {
   11180:	2800      	cmp	r0, #0
   11182:	f47f ad9d 	bne.w	10cc0 <ticker_job+0x544>
			instance->ticks_current = ticks_current;
   11186:	f8cb 4014 	str.w	r4, [fp, #20]
   1118a:	e599      	b.n	10cc0 <ticker_job+0x544>
	if (instance->ticker_id_head == TICKER_NULL) {
   1118c:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11190:	9301      	str	r3, [sp, #4]
   11192:	e58d      	b.n	10cb0 <ticker_job+0x534>
	instance->job_guard = 0U;
   11194:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11196:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   1119a:	e589      	b.n	10cb0 <ticker_job+0x534>

0001119c <ticker_init>:
{
   1119c:	b4f0      	push	{r4, r5, r6, r7}
   1119e:	9d04      	ldr	r5, [sp, #16]
   111a0:	f89d 7014 	ldrb.w	r7, [sp, #20]
   111a4:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   111a6:	2800      	cmp	r0, #0
   111a8:	d137      	bne.n	1121a <ticker_init+0x7e>
	instance->count_node = count_node;
   111aa:	4e1d      	ldr	r6, [pc, #116]	; (11220 <ticker_init+0x84>)
	while (count_node--) {
   111ac:	f101 3cff 	add.w	ip, r1, #4294967295
	instance->count_node = count_node;
   111b0:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   111b2:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   111b4:	fa5f fc8c 	uxtb.w	ip, ip
   111b8:	b149      	cbz	r1, 111ce <ticker_init+0x32>
   111ba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   111be:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   111c2:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   111c4:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   111c8:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   111cc:	d1f9      	bne.n	111c2 <ticker_init+0x26>
	while (count_user--) {
   111ce:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   111d0:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   111d2:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   111d4:	b2d2      	uxtb	r2, r2
   111d6:	b183      	cbz	r3, 111fa <ticker_init+0x5e>
   111d8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   111dc:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   111de:	4610      	mov	r0, r2
   111e0:	f812 3908 	ldrb.w	r3, [r2], #-8
   111e4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   111e8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   111ec:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   111ee:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   111f2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   111f6:	b2df      	uxtb	r7, r3
	while (count_user--) {
   111f8:	d1f0      	bne.n	111dc <ticker_init+0x40>
	if (count_op) {
   111fa:	b977      	cbnz	r7, 1121a <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   111fc:	9a07      	ldr	r2, [sp, #28]
   111fe:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   11200:	9a08      	ldr	r2, [sp, #32]
   11202:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   11204:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   11208:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1120a:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   1120c:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   1120e:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   11212:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   11214:	8177      	strh	r7, [r6, #10]
}
   11216:	bcf0      	pop	{r4, r5, r6, r7}
   11218:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   1121a:	2001      	movs	r0, #1
}
   1121c:	bcf0      	pop	{r4, r5, r6, r7}
   1121e:	4770      	bx	lr
   11220:	2000d954 	.word	0x2000d954

00011224 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   11224:	4b04      	ldr	r3, [pc, #16]	; (11238 <ticker_is_initialized+0x14>)
   11226:	222c      	movs	r2, #44	; 0x2c
   11228:	fb02 3300 	mla	r3, r2, r0, r3
   1122c:	7a18      	ldrb	r0, [r3, #8]
}
   1122e:	3800      	subs	r0, #0
   11230:	bf18      	it	ne
   11232:	2001      	movne	r0, #1
   11234:	4770      	bx	lr
   11236:	bf00      	nop
   11238:	2000d954 	.word	0x2000d954

0001123c <ticker_trigger>:
	if (instance->sched_cb) {
   1123c:	4b0a      	ldr	r3, [pc, #40]	; (11268 <ticker_trigger+0x2c>)
   1123e:	222c      	movs	r2, #44	; 0x2c
   11240:	fb02 3200 	mla	r2, r2, r0, r3
{
   11244:	b410      	push	{r4}
	if (instance->sched_cb) {
   11246:	6a54      	ldr	r4, [r2, #36]	; 0x24
   11248:	b15c      	cbz	r4, 11262 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   1124a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1124e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   11252:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   11256:	46a4      	mov	ip, r4
   11258:	2201      	movs	r2, #1
}
   1125a:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1125c:	2103      	movs	r1, #3
   1125e:	2002      	movs	r0, #2
   11260:	4760      	bx	ip
}
   11262:	bc10      	pop	{r4}
   11264:	4770      	bx	lr
   11266:	bf00      	nop
   11268:	2000d954 	.word	0x2000d954

0001126c <ticker_start_ext>:
{
   1126c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11270:	4e28      	ldr	r6, [pc, #160]	; (11314 <ticker_start_ext+0xa8>)
{
   11272:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   11276:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   11278:	252c      	movs	r5, #44	; 0x2c
   1127a:	fb05 6504 	mla	r5, r5, r4, r6
{
   1127e:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   11280:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   11284:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   11288:	6869      	ldr	r1, [r5, #4]
   1128a:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   1128e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   11292:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   11296:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   1129a:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   1129c:	f10e 0c01 	add.w	ip, lr, #1
   112a0:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   112a4:	4564      	cmp	r4, ip
   112a6:	bf98      	it	ls
   112a8:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   112ac:	4561      	cmp	r1, ip
   112ae:	d02e      	beq.n	1130e <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   112b0:	6879      	ldr	r1, [r7, #4]
   112b2:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   112b6:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   112ba:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   112be:	f04f 0904 	mov.w	r9, #4
   112c2:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   112c6:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   112c8:	9b08      	ldr	r3, [sp, #32]
   112ca:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   112cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   112ce:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   112d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   112d2:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   112d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   112d6:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   112d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   112da:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   112dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   112de:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   112e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   112e2:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   112e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   112e6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   112e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   112ea:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   112ec:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   112ee:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   112f0:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   112f2:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   112f6:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   112fa:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   112fe:	4798      	blx	r3
   11300:	4633      	mov	r3, r6
   11302:	4649      	mov	r1, r9
   11304:	2200      	movs	r2, #0
   11306:	47a8      	blx	r5
	return user_op->status;
   11308:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1130a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   1130e:	2001      	movs	r0, #1
}
   11310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11314:	2000d954 	.word	0x2000d954

00011318 <ticker_start>:
{
   11318:	b510      	push	{r4, lr}
   1131a:	b08a      	sub	sp, #40	; 0x28
   1131c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1131e:	9400      	str	r4, [sp, #0]
{
   11320:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11322:	9401      	str	r4, [sp, #4]
{
   11324:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11326:	9402      	str	r4, [sp, #8]
{
   11328:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1132c:	9403      	str	r4, [sp, #12]
{
   1132e:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11330:	9404      	str	r4, [sp, #16]
{
   11332:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11334:	9405      	str	r4, [sp, #20]
{
   11336:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11338:	9406      	str	r4, [sp, #24]
{
   1133a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1133c:	9407      	str	r4, [sp, #28]
{
   1133e:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11340:	9408      	str	r4, [sp, #32]
   11342:	2400      	movs	r4, #0
   11344:	9409      	str	r4, [sp, #36]	; 0x24
   11346:	f7ff ff91 	bl	1126c <ticker_start_ext>
}
   1134a:	b00a      	add	sp, #40	; 0x28
   1134c:	bd10      	pop	{r4, pc}
   1134e:	bf00      	nop

00011350 <ticker_update_ext>:
{
   11350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11354:	4d28      	ldr	r5, [pc, #160]	; (113f8 <ticker_update_ext+0xa8>)
{
   11356:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   1135a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   1135e:	4604      	mov	r4, r0
   11360:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   11362:	212c      	movs	r1, #44	; 0x2c
   11364:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   11368:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1136c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   11370:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   11374:	684c      	ldr	r4, [r1, #4]
   11376:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   1137a:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   1137e:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   11382:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   11384:	f10e 0c01 	add.w	ip, lr, #1
   11388:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   1138c:	45e1      	cmp	r9, ip
   1138e:	bf98      	it	ls
   11390:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11394:	4564      	cmp	r4, ip
{
   11396:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   1139a:	d02a      	beq.n	113f2 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   1139c:	f8d6 a004 	ldr.w	sl, [r6, #4]
   113a0:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   113a4:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   113a8:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   113ac:	f04f 0b05 	mov.w	fp, #5
   113b0:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   113b4:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   113b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   113b8:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   113ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   113bc:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   113be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   113c0:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   113c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   113c4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   113c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   113c8:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   113ca:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   113cc:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   113ce:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   113d0:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   113d2:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   113d6:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   113da:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   113de:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   113e2:	4798      	blx	r3
   113e4:	462b      	mov	r3, r5
   113e6:	2200      	movs	r2, #0
   113e8:	2104      	movs	r1, #4
   113ea:	47b0      	blx	r6
	return user_op->status;
   113ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   113ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   113f2:	2001      	movs	r0, #1
}
   113f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113f8:	2000d954 	.word	0x2000d954

000113fc <ticker_update>:
{
   113fc:	b510      	push	{r4, lr}
   113fe:	b088      	sub	sp, #32
   11400:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11402:	9400      	str	r4, [sp, #0]
{
   11404:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11406:	9401      	str	r4, [sp, #4]
{
   11408:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1140a:	9402      	str	r4, [sp, #8]
{
   1140c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11410:	9403      	str	r4, [sp, #12]
{
   11412:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11416:	9404      	str	r4, [sp, #16]
{
   11418:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1141a:	9405      	str	r4, [sp, #20]
{
   1141c:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1141e:	9406      	str	r4, [sp, #24]
   11420:	2400      	movs	r4, #0
   11422:	9407      	str	r4, [sp, #28]
   11424:	f7ff ff94 	bl	11350 <ticker_update_ext>
}
   11428:	b008      	add	sp, #32
   1142a:	bd10      	pop	{r4, pc}

0001142c <ticker_stop>:
{
   1142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11430:	4c1e      	ldr	r4, [pc, #120]	; (114ac <ticker_stop+0x80>)
{
   11432:	4684      	mov	ip, r0
   11434:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   11436:	212c      	movs	r1, #44	; 0x2c
   11438:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   1143c:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   11440:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   11444:	684d      	ldr	r5, [r1, #4]
   11446:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   1144a:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   1144e:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   11452:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   11454:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   11458:	f10e 0c01 	add.w	ip, lr, #1
   1145c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11460:	4567      	cmp	r7, ip
   11462:	bf98      	it	ls
   11464:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11468:	4565      	cmp	r5, ip
   1146a:	d01c      	beq.n	114a6 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   1146c:	6877      	ldr	r7, [r6, #4]
   1146e:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   11472:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   11476:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   1147a:	f04f 0806 	mov.w	r8, #6
   1147e:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   11482:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   11484:	9b06      	ldr	r3, [sp, #24]
   11486:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11488:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   1148a:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1148c:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   1148e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11492:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   11496:	4798      	blx	r3
   11498:	4623      	mov	r3, r4
   1149a:	2200      	movs	r2, #0
   1149c:	2104      	movs	r1, #4
   1149e:	47b0      	blx	r6
	return user_op->status;
   114a0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   114a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   114a6:	2001      	movs	r0, #1
}
   114a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   114ac:	2000d954 	.word	0x2000d954

000114b0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   114b0:	f00a bd26 	b.w	1bf00 <cntr_cnt_get>

000114b4 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   114b4:	1a40      	subs	r0, r0, r1
}
   114b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   114ba:	4770      	bx	lr

000114bc <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   114bc:	2801      	cmp	r0, #1
{
   114be:	b508      	push	{r3, lr}
   114c0:	4603      	mov	r3, r0
	if (addr_type > 1) {
   114c2:	d811      	bhi.n	114e8 <ll_addr_get+0x2c>
		return NULL;
	}

	if (addr_type) {
   114c4:	4608      	mov	r0, r1
   114c6:	b943      	cbnz	r3, 114da <ll_addr_get+0x1e>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   114c8:	b129      	cbz	r1, 114d6 <ll_addr_get+0x1a>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   114ca:	4909      	ldr	r1, [pc, #36]	; (114f0 <ll_addr_get+0x34>)
   114cc:	2206      	movs	r2, #6
   114ce:	f012 fb54 	bl	23b7a <memcpy>
	}

	return pub_addr;
   114d2:	4807      	ldr	r0, [pc, #28]	; (114f0 <ll_addr_get+0x34>)
}
   114d4:	bd08      	pop	{r3, pc}
	return pub_addr;
   114d6:	4806      	ldr	r0, [pc, #24]	; (114f0 <ll_addr_get+0x34>)
}
   114d8:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   114da:	b139      	cbz	r1, 114ec <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   114dc:	4905      	ldr	r1, [pc, #20]	; (114f4 <ll_addr_get+0x38>)
   114de:	2206      	movs	r2, #6
   114e0:	f012 fb4b 	bl	23b7a <memcpy>
		return rnd_addr;
   114e4:	4803      	ldr	r0, [pc, #12]	; (114f4 <ll_addr_get+0x38>)
}
   114e6:	bd08      	pop	{r3, pc}
		return NULL;
   114e8:	2000      	movs	r0, #0
}
   114ea:	bd08      	pop	{r3, pc}
		return rnd_addr;
   114ec:	4801      	ldr	r0, [pc, #4]	; (114f4 <ll_addr_get+0x38>)
}
   114ee:	bd08      	pop	{r3, pc}
   114f0:	2000d980 	.word	0x2000d980
   114f4:	2000d988 	.word	0x2000d988

000114f8 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   114f8:	b570      	push	{r4, r5, r6, lr}
   114fa:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   114fc:	2000      	movs	r0, #0
{
   114fe:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
   11500:	f003 f8fc 	bl	146fc <ull_adv_is_enabled>
   11504:	b978      	cbnz	r0, 11526 <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   11506:	b13c      	cbz	r4, 11518 <ll_addr_set+0x20>
   11508:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1150a:	2206      	movs	r2, #6
   1150c:	4631      	mov	r1, r6
   1150e:	4807      	ldr	r0, [pc, #28]	; (1152c <ll_addr_set+0x34>)
   11510:	f012 fb33 	bl	23b7a <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   11514:	4628      	mov	r0, r5
}
   11516:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   11518:	2206      	movs	r2, #6
   1151a:	4631      	mov	r1, r6
   1151c:	4804      	ldr	r0, [pc, #16]	; (11530 <ll_addr_set+0x38>)
   1151e:	f012 fb2c 	bl	23b7a <memcpy>
	return 0;
   11522:	4620      	mov	r0, r4
}
   11524:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   11526:	200c      	movs	r0, #12
}
   11528:	bd70      	pop	{r4, r5, r6, pc}
   1152a:	bf00      	nop
   1152c:	2000d988 	.word	0x2000d988
   11530:	2000d980 	.word	0x2000d980

00011534 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   11534:	2802      	cmp	r0, #2
   11536:	d001      	beq.n	1153c <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   11538:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   1153a:	4770      	bx	lr
{
   1153c:	b538      	push	{r3, r4, r5, lr}
   1153e:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   11540:	4608      	mov	r0, r1
   11542:	461d      	mov	r5, r3
   11544:	f003 fea2 	bl	1528c <ll_connected_get>
			if (!conn) {
   11548:	b110      	cbz	r0, 11550 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   1154a:	2000      	movs	r0, #0
   1154c:	7028      	strb	r0, [r5, #0]
}
   1154e:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11550:	4620      	mov	r0, r4
}
   11552:	bd38      	pop	{r3, r4, r5, pc}

00011554 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   11554:	2300      	movs	r3, #0
   11556:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   11558:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   1155a:	4770      	bx	lr

0001155c <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   1155c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   1155e:	4802      	ldr	r0, [pc, #8]	; (11568 <hci_driver_init+0xc>)
   11560:	f7f8 fb88 	bl	9c74 <bt_hci_driver_register>

	return 0;
}
   11564:	2000      	movs	r0, #0
   11566:	bd08      	pop	{r3, pc}
   11568:	00027ba4 	.word	0x00027ba4

0001156c <hci_driver_send>:
{
   1156c:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   1156e:	8983      	ldrh	r3, [r0, #12]
{
   11570:	b083      	sub	sp, #12
	if (!buf->len) {
   11572:	2b00      	cmp	r3, #0
   11574:	d03a      	beq.n	115ec <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11576:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   11578:	4604      	mov	r4, r0
   1157a:	b31b      	cbz	r3, 115c4 <hci_driver_send+0x58>
   1157c:	2b02      	cmp	r3, #2
   1157e:	d00f      	beq.n	115a0 <hci_driver_send+0x34>
   11580:	4921      	ldr	r1, [pc, #132]	; (11608 <hci_driver_send+0x9c>)
   11582:	4a22      	ldr	r2, [pc, #136]	; (1160c <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   11584:	4822      	ldr	r0, [pc, #136]	; (11610 <hci_driver_send+0xa4>)
   11586:	1a52      	subs	r2, r2, r1
   11588:	08d2      	lsrs	r2, r2, #3
   1158a:	0192      	lsls	r2, r2, #6
   1158c:	f042 0201 	orr.w	r2, r2, #1
   11590:	4619      	mov	r1, r3
   11592:	f010 faf3 	bl	21b7c <log_1>
		return -EINVAL;
   11596:	f06f 0515 	mvn.w	r5, #21
}
   1159a:	4628      	mov	r0, r5
   1159c:	b003      	add	sp, #12
   1159e:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   115a0:	a901      	add	r1, sp, #4
   115a2:	f000 ff3f 	bl	12424 <hci_acl_handle>
	if (evt) {
   115a6:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   115a8:	4605      	mov	r5, r0
	if (evt) {
   115aa:	b113      	cbz	r3, 115b2 <hci_driver_send+0x46>
		bt_recv_prio(evt);
   115ac:	4618      	mov	r0, r3
   115ae:	f7f8 fb43 	bl	9c38 <bt_recv_prio>
	if (!err) {
   115b2:	2d00      	cmp	r5, #0
   115b4:	d1f1      	bne.n	1159a <hci_driver_send+0x2e>
		net_buf_unref(buf);
   115b6:	4620      	mov	r0, r4
   115b8:	f00b fc30 	bl	1ce1c <net_buf_unref>
   115bc:	2500      	movs	r5, #0
}
   115be:	4628      	mov	r0, r5
   115c0:	b003      	add	sp, #12
   115c2:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   115c4:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   115c6:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   115c8:	f000 fa54 	bl	11a74 <hci_cmd_handle>
	if (evt) {
   115cc:	2800      	cmp	r0, #0
   115ce:	d0f2      	beq.n	115b6 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   115d0:	f7f8 fb32 	bl	9c38 <bt_recv_prio>
		if (node_rx) {
   115d4:	9d01      	ldr	r5, [sp, #4]
   115d6:	2d00      	cmp	r5, #0
   115d8:	d0ed      	beq.n	115b6 <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   115da:	4628      	mov	r0, r5
   115dc:	f001 fb1c 	bl	12c18 <hci_get_class>
   115e0:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   115e2:	9901      	ldr	r1, [sp, #4]
   115e4:	480b      	ldr	r0, [pc, #44]	; (11614 <hci_driver_send+0xa8>)
   115e6:	f014 ffb7 	bl	26558 <k_queue_append>
	if (!err) {
   115ea:	e7e4      	b.n	115b6 <hci_driver_send+0x4a>
   115ec:	4b06      	ldr	r3, [pc, #24]	; (11608 <hci_driver_send+0x9c>)
   115ee:	4907      	ldr	r1, [pc, #28]	; (1160c <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   115f0:	4809      	ldr	r0, [pc, #36]	; (11618 <hci_driver_send+0xac>)
   115f2:	1ac9      	subs	r1, r1, r3
   115f4:	08c9      	lsrs	r1, r1, #3
   115f6:	0189      	lsls	r1, r1, #6
   115f8:	f041 0101 	orr.w	r1, r1, #1
   115fc:	f010 fab1 	bl	21b62 <log_0>
		return -EINVAL;
   11600:	f06f 0515 	mvn.w	r5, #21
   11604:	e7c9      	b.n	1159a <hci_driver_send+0x2e>
   11606:	bf00      	nop
   11608:	00026fc8 	.word	0x00026fc8
   1160c:	00027010 	.word	0x00027010
   11610:	00027af8 	.word	0x00027af8
   11614:	2000a000 	.word	0x2000a000
   11618:	00027ae4 	.word	0x00027ae4

0001161c <recv_thread>:
{
   1161c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   1161e:	4d37      	ldr	r5, [pc, #220]	; (116fc <recv_thread+0xe0>)
		LL_ASSERT(0);
   11620:	4f37      	ldr	r7, [pc, #220]	; (11700 <recv_thread+0xe4>)
   11622:	4e38      	ldr	r6, [pc, #224]	; (11704 <recv_thread+0xe8>)
{
   11624:	b083      	sub	sp, #12
   11626:	e015      	b.n	11654 <recv_thread+0x38>
	switch (class) {
   11628:	2b00      	cmp	r3, #0
   1162a:	d13c      	bne.n	116a6 <recv_thread+0x8a>
		LL_ASSERT(0);
   1162c:	4836      	ldr	r0, [pc, #216]	; (11708 <recv_thread+0xec>)
   1162e:	23cf      	movs	r3, #207	; 0xcf
   11630:	463a      	mov	r2, r7
   11632:	4631      	mov	r1, r6
   11634:	f00f fe2e 	bl	21294 <printk>
   11638:	4040      	eors	r0, r0
   1163a:	f380 8811 	msr	BASEPRI, r0
   1163e:	f04f 0003 	mov.w	r0, #3
   11642:	df02      	svc	2
	node_rx->hdr.next = NULL;
   11644:	9b01      	ldr	r3, [sp, #4]
   11646:	2200      	movs	r2, #0
   11648:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1164a:	a801      	add	r0, sp, #4
   1164c:	f002 f94c 	bl	138e8 <ll_rx_mem_release>
	z_impl_k_yield();
   11650:	f00e fa18 	bl	1fa84 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   11654:	f04f 32ff 	mov.w	r2, #4294967295
   11658:	f04f 33ff 	mov.w	r3, #4294967295
   1165c:	4628      	mov	r0, r5
   1165e:	f00d fefd 	bl	1f45c <z_impl_k_queue_get>
		if (node_rx && !buf) {
   11662:	2800      	cmp	r0, #0
   11664:	d0f4      	beq.n	11650 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   11666:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   11668:	9001      	str	r0, [sp, #4]
	switch (class) {
   1166a:	2b04      	cmp	r3, #4
   1166c:	d9dc      	bls.n	11628 <recv_thread+0xc>
   1166e:	2b05      	cmp	r3, #5
   11670:	d1dc      	bne.n	1162c <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   11672:	f04f 32ff 	mov.w	r2, #4294967295
   11676:	f04f 33ff 	mov.w	r3, #4294967295
   1167a:	2003      	movs	r0, #3
   1167c:	f7f6 fcca 	bl	8014 <bt_buf_get_rx>
   11680:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   11682:	4621      	mov	r1, r4
   11684:	9801      	ldr	r0, [sp, #4]
   11686:	f000 ff8b 	bl	125a0 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   1168a:	9b01      	ldr	r3, [sp, #4]
   1168c:	2200      	movs	r2, #0
   1168e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11690:	a801      	add	r0, sp, #4
   11692:	f002 f929 	bl	138e8 <ll_rx_mem_release>
		if (buf) {
   11696:	2c00      	cmp	r4, #0
   11698:	d0da      	beq.n	11650 <recv_thread+0x34>
			if (buf->len) {
   1169a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   1169c:	4620      	mov	r0, r4
			if (buf->len) {
   1169e:	b1db      	cbz	r3, 116d8 <recv_thread+0xbc>
				bt_recv(buf);
   116a0:	f7f8 fa26 	bl	9af0 <bt_recv>
   116a4:	e7d4      	b.n	11650 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   116a6:	2b02      	cmp	r3, #2
   116a8:	d019      	beq.n	116de <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   116aa:	f04f 32ff 	mov.w	r2, #4294967295
   116ae:	f04f 33ff 	mov.w	r3, #4294967295
   116b2:	2001      	movs	r0, #1
   116b4:	f7f6 fcae 	bl	8014 <bt_buf_get_rx>
   116b8:	4604      	mov	r4, r0
		if (buf) {
   116ba:	b1cc      	cbz	r4, 116f0 <recv_thread+0xd4>
			hci_evt_encode(node_rx, buf);
   116bc:	9801      	ldr	r0, [sp, #4]
   116be:	4621      	mov	r1, r4
   116c0:	f000 ffa8 	bl	12614 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   116c4:	9b01      	ldr	r3, [sp, #4]
   116c6:	2200      	movs	r2, #0
   116c8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   116ca:	a801      	add	r0, sp, #4
   116cc:	f002 f90c 	bl	138e8 <ll_rx_mem_release>
			if (buf->len) {
   116d0:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   116d2:	4620      	mov	r0, r4
			if (buf->len) {
   116d4:	2b00      	cmp	r3, #0
   116d6:	d1e3      	bne.n	116a0 <recv_thread+0x84>
				net_buf_unref(buf);
   116d8:	f00b fba0 	bl	1ce1c <net_buf_unref>
   116dc:	e7b8      	b.n	11650 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   116de:	2200      	movs	r2, #0
   116e0:	2300      	movs	r3, #0
   116e2:	2101      	movs	r1, #1
   116e4:	2000      	movs	r0, #0
   116e6:	f7f6 fccb 	bl	8080 <bt_buf_get_evt>
   116ea:	4604      	mov	r4, r0
		if (buf) {
   116ec:	2c00      	cmp	r4, #0
   116ee:	d1e5      	bne.n	116bc <recv_thread+0xa0>
	node_rx->hdr.next = NULL;
   116f0:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   116f2:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   116f4:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   116f6:	f002 f8f7 	bl	138e8 <ll_rx_mem_release>
		if (buf) {
   116fa:	e7a9      	b.n	11650 <recv_thread+0x34>
   116fc:	2000a000 	.word	0x2000a000
   11700:	00027b0c 	.word	0x00027b0c
   11704:	00027b4c 	.word	0x00027b4c
   11708:	00027ab4 	.word	0x00027ab4

0001170c <prio_recv_thread>:
{
   1170c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   11710:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 117c4 <prio_recv_thread+0xb8>
				k_fifo_put(&recv_fifo, node_rx);
   11714:	4f2c      	ldr	r7, [pc, #176]	; (117c8 <prio_recv_thread+0xbc>)
{
   11716:	b082      	sub	sp, #8
   11718:	e00c      	b.n	11734 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   1171a:	f7f6 fcb1 	bl	8080 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1171e:	4622      	mov	r2, r4
   11720:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11724:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11726:	f001 fa5f 	bl	12be8 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   1172a:	4620      	mov	r0, r4
   1172c:	f7f8 fa84 	bl	9c38 <bt_recv_prio>
	z_impl_k_yield();
   11730:	f00e f9a8 	bl	1fa84 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11734:	f10d 0102 	add.w	r1, sp, #2
   11738:	a801      	add	r0, sp, #4
   1173a:	f001 ff21 	bl	13580 <ll_rx_get>
   1173e:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11740:	f04f 32ff 	mov.w	r2, #4294967295
   11744:	f04f 33ff 	mov.w	r3, #4294967295
   11748:	2100      	movs	r1, #0
   1174a:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1174c:	2c00      	cmp	r4, #0
   1174e:	d1e4      	bne.n	1171a <prio_recv_thread+0xe>
		if (node_rx) {
   11750:	9b01      	ldr	r3, [sp, #4]
   11752:	b193      	cbz	r3, 1177a <prio_recv_thread+0x6e>
			ll_rx_dequeue();
   11754:	f001 fffa 	bl	1374c <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11758:	9e01      	ldr	r6, [sp, #4]
   1175a:	4630      	mov	r0, r6
   1175c:	f001 fa5c 	bl	12c18 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   11760:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11762:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   11764:	796b      	ldrb	r3, [r5, #5]
   11766:	2b03      	cmp	r3, #3
   11768:	d102      	bne.n	11770 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   1176a:	792b      	ldrb	r3, [r5, #4]
   1176c:	2b14      	cmp	r3, #20
   1176e:	d00c      	beq.n	1178a <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
   11770:	4629      	mov	r1, r5
   11772:	4638      	mov	r0, r7
   11774:	f014 fef0 	bl	26558 <k_queue_append>
			continue;
   11778:	e7dc      	b.n	11734 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
   1177a:	f04f 32ff 	mov.w	r2, #4294967295
   1177e:	f04f 33ff 	mov.w	r3, #4294967295
   11782:	4640      	mov	r0, r8
   11784:	f00e fa4c 	bl	1fc20 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11788:	e7d4      	b.n	11734 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1178a:	f04f 33ff 	mov.w	r3, #4294967295
   1178e:	4621      	mov	r1, r4
   11790:	f04f 32ff 	mov.w	r2, #4294967295
   11794:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   11796:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   11798:	f7f6 fc72 	bl	8080 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   1179c:	4631      	mov	r1, r6
   1179e:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   117a0:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   117a2:	f105 001c 	add.w	r0, r5, #28
   117a6:	f000 fed3 	bl	12550 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   117aa:	4630      	mov	r0, r6
   117ac:	f000 fef0 	bl	12590 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   117b0:	4620      	mov	r0, r4
			if (buf) {
   117b2:	b124      	cbz	r4, 117be <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
   117b4:	f7f8 fa40 	bl	9c38 <bt_recv_prio>
					net_buf_unref(buf);
   117b8:	4620      	mov	r0, r4
   117ba:	f00b fb2f 	bl	1ce1c <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   117be:	9d01      	ldr	r5, [sp, #4]
   117c0:	e7d6      	b.n	11770 <prio_recv_thread+0x64>
   117c2:	bf00      	nop
   117c4:	20009fd0 	.word	0x20009fd0
   117c8:	2000a000 	.word	0x2000a000

000117cc <hci_driver_open>:
{
   117cc:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   117ce:	4821      	ldr	r0, [pc, #132]	; (11854 <hci_driver_open+0x88>)
{
   117d0:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   117d2:	f001 fdd1 	bl	13378 <ll_init>
	if (err) {
   117d6:	4604      	mov	r4, r0
   117d8:	bb70      	cbnz	r0, 11838 <hci_driver_open+0x6c>
	hci_init(NULL);
   117da:	f001 fa33 	bl	12c44 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   117de:	2600      	movs	r6, #0
   117e0:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   117e2:	f06f 0209 	mvn.w	r2, #9
   117e6:	e9cd 2403 	strd	r2, r4, [sp, #12]
   117ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
   117ee:	e9cd 4401 	strd	r4, r4, [sp, #4]
   117f2:	4b19      	ldr	r3, [pc, #100]	; (11858 <hci_driver_open+0x8c>)
   117f4:	4919      	ldr	r1, [pc, #100]	; (1185c <hci_driver_open+0x90>)
   117f6:	9400      	str	r4, [sp, #0]
   117f8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   117fc:	4818      	ldr	r0, [pc, #96]	; (11860 <hci_driver_open+0x94>)
   117fe:	f00e fa81 	bl	1fd04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   11802:	4918      	ldr	r1, [pc, #96]	; (11864 <hci_driver_open+0x98>)
   11804:	4816      	ldr	r0, [pc, #88]	; (11860 <hci_driver_open+0x94>)
   11806:	f014 ffff 	bl	26808 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1180a:	f06f 0207 	mvn.w	r2, #7
   1180e:	e9cd 2403 	strd	r2, r4, [sp, #12]
   11812:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11816:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1181a:	4b13      	ldr	r3, [pc, #76]	; (11868 <hci_driver_open+0x9c>)
   1181c:	4913      	ldr	r1, [pc, #76]	; (1186c <hci_driver_open+0xa0>)
   1181e:	9400      	str	r4, [sp, #0]
   11820:	f640 0298 	movw	r2, #2200	; 0x898
   11824:	4812      	ldr	r0, [pc, #72]	; (11870 <hci_driver_open+0xa4>)
   11826:	f00e fa6d 	bl	1fd04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1182a:	4912      	ldr	r1, [pc, #72]	; (11874 <hci_driver_open+0xa8>)
   1182c:	4810      	ldr	r0, [pc, #64]	; (11870 <hci_driver_open+0xa4>)
   1182e:	f014 ffeb 	bl	26808 <z_impl_k_thread_name_set>
}
   11832:	4620      	mov	r0, r4
   11834:	b008      	add	sp, #32
   11836:	bdd0      	pop	{r4, r6, r7, pc}
   11838:	4b0f      	ldr	r3, [pc, #60]	; (11878 <hci_driver_open+0xac>)
   1183a:	4a10      	ldr	r2, [pc, #64]	; (1187c <hci_driver_open+0xb0>)
		BT_ERR("LL initialization failed: %d", err);
   1183c:	4810      	ldr	r0, [pc, #64]	; (11880 <hci_driver_open+0xb4>)
   1183e:	1ad2      	subs	r2, r2, r3
   11840:	08d2      	lsrs	r2, r2, #3
   11842:	0192      	lsls	r2, r2, #6
   11844:	f042 0201 	orr.w	r2, r2, #1
   11848:	4621      	mov	r1, r4
   1184a:	f010 f997 	bl	21b7c <log_1>
}
   1184e:	4620      	mov	r0, r4
   11850:	b008      	add	sp, #32
   11852:	bdd0      	pop	{r4, r6, r7, pc}
   11854:	20009fd0 	.word	0x20009fd0
   11858:	0001170d 	.word	0x0001170d
   1185c:	20010880 	.word	0x20010880
   11860:	2000aa08 	.word	0x2000aa08
   11864:	00027b70 	.word	0x00027b70
   11868:	0001161d 	.word	0x0001161d
   1186c:	20010a60 	.word	0x20010a60
   11870:	2000aa90 	.word	0x2000aa90
   11874:	00027b7c 	.word	0x00027b7c
   11878:	00026fc8 	.word	0x00026fc8
   1187c:	00027010 	.word	0x00027010
   11880:	00027b50 	.word	0x00027b50

00011884 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   11884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11886:	4c19      	ldr	r4, [pc, #100]	; (118ec <le_remote_feat_complete+0x68>)
   11888:	6864      	ldr	r4, [r4, #4]
   1188a:	00a4      	lsls	r4, r4, #2
   1188c:	d504      	bpl.n	11898 <le_remote_feat_complete+0x14>
   1188e:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   11890:	4a17      	ldr	r2, [pc, #92]	; (118f0 <le_remote_feat_complete+0x6c>)
   11892:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11894:	0712      	lsls	r2, r2, #28
   11896:	d400      	bmi.n	1189a <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   11898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1189a:	f103 0408 	add.w	r4, r3, #8
   1189e:	4607      	mov	r7, r0
   118a0:	460e      	mov	r6, r1
   118a2:	4620      	mov	r0, r4
   118a4:	2102      	movs	r1, #2
   118a6:	f014 f9bc 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   118aa:	233e      	movs	r3, #62	; 0x3e
   118ac:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   118ae:	230c      	movs	r3, #12
   118b0:	7043      	strb	r3, [r0, #1]
   118b2:	2101      	movs	r1, #1
   118b4:	4620      	mov	r0, r4
   118b6:	f014 f9b4 	bl	25c22 <net_buf_simple_add>
   118ba:	4603      	mov	r3, r0
	me->subevent = subevt;
   118bc:	2204      	movs	r2, #4
   118be:	701a      	strb	r2, [r3, #0]
   118c0:	4620      	mov	r0, r4
   118c2:	210b      	movs	r1, #11
   118c4:	f014 f9ad 	bl	25c22 <net_buf_simple_add>
		memcpy(&sep->features[0],
   118c8:	2208      	movs	r2, #8
	sep->status = status;
   118ca:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   118cc:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   118d0:	b92f      	cbnz	r7, 118de <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   118d2:	1d31      	adds	r1, r6, #4
   118d4:	3003      	adds	r0, #3
}
   118d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   118da:	f012 b94e 	b.w	23b7a <memcpy>
}
   118de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   118e2:	2100      	movs	r1, #0
   118e4:	3003      	adds	r0, #3
   118e6:	f012 b973 	b.w	23bd0 <memset>
   118ea:	bf00      	nop
   118ec:	200001a8 	.word	0x200001a8
   118f0:	200001b0 	.word	0x200001b0

000118f4 <hci_vendor_cmd_handle_common>:
{
   118f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   118f6:	3801      	subs	r0, #1
   118f8:	b087      	sub	sp, #28
   118fa:	4615      	mov	r5, r2
   118fc:	2809      	cmp	r0, #9
   118fe:	d806      	bhi.n	1190e <hci_vendor_cmd_handle_common+0x1a>
   11900:	e8df f000 	tbb	[pc, r0]
   11904:	05432609 	.word	0x05432609
   11908:	6b055705 	.word	0x6b055705
   1190c:	9f8a      	.short	0x9f8a
	return 0;
   1190e:	f06f 0015 	mvn.w	r0, #21
}
   11912:	b007      	add	sp, #28
   11914:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11916:	4b55      	ldr	r3, [pc, #340]	; (11a6c <hci_vendor_cmd_handle_common+0x178>)
   11918:	210d      	movs	r1, #13
   1191a:	8818      	ldrh	r0, [r3, #0]
   1191c:	f012 fc70 	bl	24200 <bt_hci_cmd_complete_create>
   11920:	210d      	movs	r1, #13
   11922:	6028      	str	r0, [r5, #0]
   11924:	3008      	adds	r0, #8
   11926:	f014 f97c 	bl	25c22 <net_buf_simple_add>
   1192a:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1192c:	2202      	movs	r2, #2
	rp->status = 0x00;
   1192e:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   11930:	2105      	movs	r1, #5
	rp->status = 0x00;
   11932:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11934:	705a      	strb	r2, [r3, #1]
   11936:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   11938:	70da      	strb	r2, [r3, #3]
   1193a:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   1193c:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1193e:	719a      	strb	r2, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   11940:	71d9      	strb	r1, [r3, #7]
   11942:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   11944:	7258      	strb	r0, [r3, #9]
   11946:	7298      	strb	r0, [r3, #10]
   11948:	72d8      	strb	r0, [r3, #11]
   1194a:	7318      	strb	r0, [r3, #12]
}
   1194c:	b007      	add	sp, #28
   1194e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11950:	4b46      	ldr	r3, [pc, #280]	; (11a6c <hci_vendor_cmd_handle_common+0x178>)
   11952:	2141      	movs	r1, #65	; 0x41
   11954:	8818      	ldrh	r0, [r3, #0]
   11956:	f012 fc53 	bl	24200 <bt_hci_cmd_complete_create>
   1195a:	2141      	movs	r1, #65	; 0x41
   1195c:	6028      	str	r0, [r5, #0]
   1195e:	3008      	adds	r0, #8
   11960:	f014 f95f 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   11964:	2400      	movs	r4, #0
   11966:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   11968:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1196a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1196e:	4621      	mov	r1, r4
   11970:	f012 f92e 	bl	23bd0 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   11974:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11976:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   11978:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   1197c:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   11980:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   11982:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11984:	70ab      	strb	r3, [r5, #2]
}
   11986:	b007      	add	sp, #28
   11988:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1198a:	4b38      	ldr	r3, [pc, #224]	; (11a6c <hci_vendor_cmd_handle_common+0x178>)
   1198c:	2109      	movs	r1, #9
   1198e:	8818      	ldrh	r0, [r3, #0]
   11990:	f012 fc36 	bl	24200 <bt_hci_cmd_complete_create>
   11994:	2109      	movs	r1, #9
   11996:	6028      	str	r0, [r5, #0]
   11998:	3008      	adds	r0, #8
   1199a:	f014 f942 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   1199e:	2400      	movs	r4, #0
   119a0:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   119a4:	2208      	movs	r2, #8
   119a6:	4621      	mov	r1, r4
   119a8:	f012 f912 	bl	23bd0 <memset>
	return 0;
   119ac:	4620      	mov	r0, r4
}
   119ae:	b007      	add	sp, #28
   119b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   119b2:	6889      	ldr	r1, [r1, #8]
   119b4:	2000      	movs	r0, #0
   119b6:	f7ff fd9f 	bl	114f8 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   119ba:	4b2c      	ldr	r3, [pc, #176]	; (11a6c <hci_vendor_cmd_handle_common+0x178>)
   119bc:	2101      	movs	r1, #1
   119be:	8818      	ldrh	r0, [r3, #0]
   119c0:	f012 fc1e 	bl	24200 <bt_hci_cmd_complete_create>
   119c4:	2101      	movs	r1, #1
   119c6:	4604      	mov	r4, r0
   119c8:	3008      	adds	r0, #8
   119ca:	f014 f92a 	bl	25c22 <net_buf_simple_add>
   119ce:	4603      	mov	r3, r0
	ccst->status = status;
   119d0:	2000      	movs	r0, #0
   119d2:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   119d4:	602c      	str	r4, [r5, #0]
}
   119d6:	b007      	add	sp, #28
   119d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   119da:	4e25      	ldr	r6, [pc, #148]	; (11a70 <hci_vendor_cmd_handle_common+0x17c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   119dc:	4f23      	ldr	r7, [pc, #140]	; (11a6c <hci_vendor_cmd_handle_common+0x178>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   119de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   119e0:	46ec      	mov	ip, sp
   119e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   119e6:	e896 0003 	ldmia.w	r6, {r0, r1}
   119ea:	f84c 0b04 	str.w	r0, [ip], #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   119ee:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   119f0:	f88c 1000 	strb.w	r1, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   119f4:	2116      	movs	r1, #22
   119f6:	f012 fc03 	bl	24200 <bt_hci_cmd_complete_create>
   119fa:	2116      	movs	r1, #22
   119fc:	6028      	str	r0, [r5, #0]
   119fe:	3008      	adds	r0, #8
   11a00:	f014 f90f 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   11a04:	2400      	movs	r4, #0
   11a06:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   11a0a:	2215      	movs	r2, #21
   11a0c:	4669      	mov	r1, sp
   11a0e:	f012 f8b4 	bl	23b7a <memcpy>
	return 0;
   11a12:	4620      	mov	r0, r4
}
   11a14:	b007      	add	sp, #28
   11a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11a18:	4b14      	ldr	r3, [pc, #80]	; (11a6c <hci_vendor_cmd_handle_common+0x178>)
   11a1a:	2118      	movs	r1, #24
   11a1c:	8818      	ldrh	r0, [r3, #0]
   11a1e:	f012 fbef 	bl	24200 <bt_hci_cmd_complete_create>
   11a22:	2118      	movs	r1, #24
   11a24:	6028      	str	r0, [r5, #0]
   11a26:	3008      	adds	r0, #8
   11a28:	f014 f8fb 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   11a2c:	2400      	movs	r4, #0
   11a2e:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   11a30:	2101      	movs	r1, #1
	rp->status = 0x00;
   11a32:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   11a36:	f00b f877 	bl	1cb28 <hci_vendor_read_static_addr>
   11a3a:	7068      	strb	r0, [r5, #1]
	return 0;
   11a3c:	4620      	mov	r0, r4
}
   11a3e:	b007      	add	sp, #28
   11a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11a42:	4b0a      	ldr	r3, [pc, #40]	; (11a6c <hci_vendor_cmd_handle_common+0x178>)
   11a44:	2121      	movs	r1, #33	; 0x21
   11a46:	8818      	ldrh	r0, [r3, #0]
   11a48:	f012 fbda 	bl	24200 <bt_hci_cmd_complete_create>
   11a4c:	2121      	movs	r1, #33	; 0x21
   11a4e:	6028      	str	r0, [r5, #0]
   11a50:	3008      	adds	r0, #8
   11a52:	f014 f8e6 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   11a56:	4601      	mov	r1, r0
   11a58:	2400      	movs	r4, #0
   11a5a:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   11a5e:	3001      	adds	r0, #1
   11a60:	f00b f8d6 	bl	1cc10 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   11a64:	4620      	mov	r0, r4
}
   11a66:	b007      	add	sp, #28
   11a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a6a:	bf00      	nop
   11a6c:	2000ed18 	.word	0x2000ed18
   11a70:	00027bb8 	.word	0x00027bb8

00011a74 <hci_cmd_handle>:
{
   11a74:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   11a76:	8983      	ldrh	r3, [r0, #12]
{
   11a78:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   11a7a:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
   11a7c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   11a7e:	9407      	str	r4, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   11a80:	f240 811c 	bls.w	11cbc <hci_cmd_handle+0x248>
	return net_buf_simple_pull_mem(&buf->b, len);
   11a84:	4605      	mov	r5, r0
   11a86:	2103      	movs	r1, #3
   11a88:	3008      	adds	r0, #8
   11a8a:	f014 f8f1 	bl	25c70 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   11a8e:	89aa      	ldrh	r2, [r5, #12]
   11a90:	7883      	ldrb	r3, [r0, #2]
   11a92:	429a      	cmp	r2, r3
   11a94:	f0c0 8150 	bcc.w	11d38 <hci_cmd_handle+0x2c4>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   11a98:	8802      	ldrh	r2, [r0, #0]
   11a9a:	4ebc      	ldr	r6, [pc, #752]	; (11d8c <hci_cmd_handle+0x318>)
	switch (BT_OGF(_opcode)) {
   11a9c:	f3c2 2385 	ubfx	r3, r2, #10, #6
   11aa0:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   11aa2:	8032      	strh	r2, [r6, #0]
   11aa4:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   11aa6:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   11aaa:	d809      	bhi.n	11ac0 <hci_cmd_handle+0x4c>
   11aac:	b1a3      	cbz	r3, 11ad8 <hci_cmd_handle+0x64>
   11aae:	3b01      	subs	r3, #1
   11ab0:	2b07      	cmp	r3, #7
   11ab2:	d811      	bhi.n	11ad8 <hci_cmd_handle+0x64>
   11ab4:	e8df f003 	tbb	[pc, r3]
   11ab8:	e9c81017 	.word	0xe9c81017
   11abc:	26101010 	.word	0x26101010
   11ac0:	2b3f      	cmp	r3, #63	; 0x3f
   11ac2:	d109      	bne.n	11ad8 <hci_cmd_handle+0x64>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   11ac4:	4629      	mov	r1, r5
   11ac6:	aa07      	add	r2, sp, #28
   11ac8:	4620      	mov	r0, r4
   11aca:	f7ff ff13 	bl	118f4 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   11ace:	3016      	adds	r0, #22
	return evt;
   11ad0:	bf18      	it	ne
   11ad2:	9d07      	ldrne	r5, [sp, #28]
	if (err == -EINVAL) {
   11ad4:	d104      	bne.n	11ae0 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   11ad6:	8830      	ldrh	r0, [r6, #0]
   11ad8:	2101      	movs	r1, #1
   11ada:	f012 fba3 	bl	24224 <bt_hci_cmd_status_create>
   11ade:	4605      	mov	r5, r0
}
   11ae0:	4628      	mov	r0, r5
   11ae2:	b00d      	add	sp, #52	; 0x34
   11ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   11ae6:	2c06      	cmp	r4, #6
   11ae8:	f000 8437 	beq.w	1235a <hci_cmd_handle+0x8e6>
   11aec:	2c1d      	cmp	r4, #29
   11aee:	d1f3      	bne.n	11ad8 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   11af0:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
   11af2:	8818      	ldrh	r0, [r3, #0]
   11af4:	f003 fd50 	bl	15598 <ll_version_ind_send>
   11af8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11afa:	8830      	ldrh	r0, [r6, #0]
   11afc:	f012 fb92 	bl	24224 <bt_hci_cmd_status_create>
   11b00:	4605      	mov	r5, r0
}
   11b02:	e7ed      	b.n	11ae0 <hci_cmd_handle+0x6c>
	switch (ocf) {
   11b04:	1e62      	subs	r2, r4, #1
   11b06:	2a4d      	cmp	r2, #77	; 0x4d
   11b08:	d8e6      	bhi.n	11ad8 <hci_cmd_handle+0x64>
   11b0a:	a301      	add	r3, pc, #4	; (adr r3, 11b10 <hci_cmd_handle+0x9c>)
   11b0c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   11b10:	00012093 	.word	0x00012093
   11b14:	000120f5 	.word	0x000120f5
   11b18:	000120c5 	.word	0x000120c5
   11b1c:	00011ad9 	.word	0x00011ad9
   11b20:	000120bb 	.word	0x000120bb
   11b24:	0001209f 	.word	0x0001209f
   11b28:	00012173 	.word	0x00012173
   11b2c:	00012167 	.word	0x00012167
   11b30:	0001215b 	.word	0x0001215b
   11b34:	00012151 	.word	0x00012151
   11b38:	00011ad9 	.word	0x00011ad9
   11b3c:	00011ad9 	.word	0x00011ad9
   11b40:	00011ad9 	.word	0x00011ad9
   11b44:	00011ad9 	.word	0x00011ad9
   11b48:	0001212f 	.word	0x0001212f
   11b4c:	00012129 	.word	0x00012129
   11b50:	00012121 	.word	0x00012121
   11b54:	00012119 	.word	0x00012119
   11b58:	00012333 	.word	0x00012333
   11b5c:	00011ad9 	.word	0x00011ad9
   11b60:	00012307 	.word	0x00012307
   11b64:	000122f1 	.word	0x000122f1
   11b68:	000122bb 	.word	0x000122bb
   11b6c:	00012299 	.word	0x00012299
   11b70:	00011ad9 	.word	0x00011ad9
   11b74:	0001228f 	.word	0x0001228f
   11b78:	0001227f 	.word	0x0001227f
   11b7c:	00012249 	.word	0x00012249
   11b80:	00011ad9 	.word	0x00011ad9
   11b84:	00011ad9 	.word	0x00011ad9
   11b88:	00011ad9 	.word	0x00011ad9
   11b8c:	00012233 	.word	0x00012233
   11b90:	000121fd 	.word	0x000121fd
   11b94:	000121ed 	.word	0x000121ed
   11b98:	000121b7 	.word	0x000121b7
   11b9c:	000121ab 	.word	0x000121ab
   11ba0:	00011ad9 	.word	0x00011ad9
   11ba4:	00011ad9 	.word	0x00011ad9
   11ba8:	0001219d 	.word	0x0001219d
   11bac:	00012195 	.word	0x00012195
   11bb0:	0001218f 	.word	0x0001218f
   11bb4:	00012017 	.word	0x00012017
   11bb8:	00011fe9 	.word	0x00011fe9
   11bbc:	00011fbb 	.word	0x00011fbb
   11bc0:	00011fb1 	.word	0x00011fb1
   11bc4:	00012085 	.word	0x00012085
   11bc8:	00012039 	.word	0x00012039
   11bcc:	00011f57 	.word	0x00011f57
   11bd0:	00011f39 	.word	0x00011f39
   11bd4:	00011edd 	.word	0x00011edd
   11bd8:	00011ad9 	.word	0x00011ad9
   11bdc:	00011ad9 	.word	0x00011ad9
   11be0:	00011ad9 	.word	0x00011ad9
   11be4:	00011ad9 	.word	0x00011ad9
   11be8:	00011ad9 	.word	0x00011ad9
   11bec:	00011ad9 	.word	0x00011ad9
   11bf0:	00011ad9 	.word	0x00011ad9
   11bf4:	00011ad9 	.word	0x00011ad9
   11bf8:	00011ad9 	.word	0x00011ad9
   11bfc:	00011ad9 	.word	0x00011ad9
   11c00:	00011ad9 	.word	0x00011ad9
   11c04:	00011ad9 	.word	0x00011ad9
   11c08:	00011ad9 	.word	0x00011ad9
   11c0c:	00011ad9 	.word	0x00011ad9
   11c10:	00011ad9 	.word	0x00011ad9
   11c14:	00011ad9 	.word	0x00011ad9
   11c18:	00011ad9 	.word	0x00011ad9
   11c1c:	00011ad9 	.word	0x00011ad9
   11c20:	00011ad9 	.word	0x00011ad9
   11c24:	00011ad9 	.word	0x00011ad9
   11c28:	00011ad9 	.word	0x00011ad9
   11c2c:	00011ad9 	.word	0x00011ad9
   11c30:	00011ad9 	.word	0x00011ad9
   11c34:	00011ad9 	.word	0x00011ad9
   11c38:	00011eb9 	.word	0x00011eb9
   11c3c:	00011ad9 	.word	0x00011ad9
   11c40:	00011ad9 	.word	0x00011ad9
   11c44:	00011e97 	.word	0x00011e97
	switch (ocf) {
   11c48:	2c63      	cmp	r4, #99	; 0x63
   11c4a:	f000 8392 	beq.w	12372 <hci_cmd_handle+0x8fe>
   11c4e:	d857      	bhi.n	11d00 <hci_cmd_handle+0x28c>
   11c50:	2c03      	cmp	r4, #3
   11c52:	f000 8395 	beq.w	12380 <hci_cmd_handle+0x90c>
   11c56:	2c2d      	cmp	r4, #45	; 0x2d
   11c58:	d13e      	bne.n	11cd8 <hci_cmd_handle+0x264>
		read_tx_power_level(cmd, evt);
   11c5a:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11c5c:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   11c5e:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   11c60:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11c62:	f012 facd 	bl	24200 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   11c66:	2104      	movs	r1, #4
   11c68:	9007      	str	r0, [sp, #28]
   11c6a:	3008      	adds	r0, #8
   11c6c:	f013 ffd9 	bl	25c22 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   11c70:	b2b5      	uxth	r5, r6
   11c72:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   11c74:	1cc3      	adds	r3, r0, #3
   11c76:	4629      	mov	r1, r5
   11c78:	463a      	mov	r2, r7
   11c7a:	2002      	movs	r0, #2
   11c7c:	f7ff fc5a 	bl	11534 <ll_tx_pwr_lvl_get>
	rp->status = status;
   11c80:	7020      	strb	r0, [r4, #0]
	return evt;
   11c82:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   11c84:	f8a4 6001 	strh.w	r6, [r4, #1]
}
   11c88:	e72a      	b.n	11ae0 <hci_cmd_handle+0x6c>
	switch (ocf) {
   11c8a:	1e62      	subs	r2, r4, #1
   11c8c:	2a08      	cmp	r2, #8
   11c8e:	f63f af23 	bhi.w	11ad8 <hci_cmd_handle+0x64>
   11c92:	a301      	add	r3, pc, #4	; (adr r3, 11c98 <hci_cmd_handle+0x224>)
   11c94:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   11c98:	00011e61 	.word	0x00011e61
   11c9c:	00011da5 	.word	0x00011da5
   11ca0:	00011d63 	.word	0x00011d63
   11ca4:	00011ad9 	.word	0x00011ad9
   11ca8:	00011ad9 	.word	0x00011ad9
   11cac:	00011ad9 	.word	0x00011ad9
   11cb0:	00011ad9 	.word	0x00011ad9
   11cb4:	00011ad9 	.word	0x00011ad9
   11cb8:	00011d41 	.word	0x00011d41
   11cbc:	4934      	ldr	r1, [pc, #208]	; (11d90 <hci_cmd_handle+0x31c>)
   11cbe:	4b35      	ldr	r3, [pc, #212]	; (11d94 <hci_cmd_handle+0x320>)
		BT_ERR("No HCI Command header");
   11cc0:	4835      	ldr	r0, [pc, #212]	; (11d98 <hci_cmd_handle+0x324>)
   11cc2:	1ac9      	subs	r1, r1, r3
   11cc4:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   11cc6:	0189      	lsls	r1, r1, #6
   11cc8:	f041 0101 	orr.w	r1, r1, #1
   11ccc:	f00f ff49 	bl	21b62 <log_0>
		return NULL;
   11cd0:	4625      	mov	r5, r4
}
   11cd2:	4628      	mov	r0, r5
   11cd4:	b00d      	add	sp, #52	; 0x34
   11cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   11cd8:	2c01      	cmp	r4, #1
   11cda:	f47f aefd 	bne.w	11ad8 <hci_cmd_handle+0x64>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11cde:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
   11ce0:	4b2e      	ldr	r3, [pc, #184]	; (11d9c <hci_cmd_handle+0x328>)
   11ce2:	6811      	ldr	r1, [r2, #0]
   11ce4:	6852      	ldr	r2, [r2, #4]
   11ce6:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11ce8:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   11cea:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11cec:	f012 fa88 	bl	24200 <bt_hci_cmd_complete_create>
   11cf0:	2101      	movs	r1, #1
   11cf2:	4605      	mov	r5, r0
   11cf4:	3008      	adds	r0, #8
   11cf6:	f013 ff94 	bl	25c22 <net_buf_simple_add>
	ccst->status = status;
   11cfa:	2300      	movs	r3, #0
   11cfc:	7003      	strb	r3, [r0, #0]
}
   11cfe:	e6ef      	b.n	11ae0 <hci_cmd_handle+0x6c>
	switch (ocf) {
   11d00:	2c7b      	cmp	r4, #123	; 0x7b
   11d02:	f000 835f 	beq.w	123c4 <hci_cmd_handle+0x950>
   11d06:	2c7c      	cmp	r4, #124	; 0x7c
   11d08:	f47f aee6 	bne.w	11ad8 <hci_cmd_handle+0x64>
		write_auth_payload_timeout(cmd, evt);
   11d0c:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   11d0e:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   11d10:	8859      	ldrh	r1, [r3, #2]
   11d12:	b2b8      	uxth	r0, r7
   11d14:	f003 fd7a 	bl	1580c <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   11d18:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11d1a:	2103      	movs	r1, #3
   11d1c:	8830      	ldrh	r0, [r6, #0]
   11d1e:	f012 fa6f 	bl	24200 <bt_hci_cmd_complete_create>
   11d22:	2103      	movs	r1, #3
   11d24:	4603      	mov	r3, r0
   11d26:	3008      	adds	r0, #8
   11d28:	9307      	str	r3, [sp, #28]
   11d2a:	f013 ff7a 	bl	25c22 <net_buf_simple_add>
	rp->status = status;
   11d2e:	7004      	strb	r4, [r0, #0]
	return evt;
   11d30:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   11d32:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
   11d36:	e6d3      	b.n	11ae0 <hci_cmd_handle+0x6c>
   11d38:	4915      	ldr	r1, [pc, #84]	; (11d90 <hci_cmd_handle+0x31c>)
   11d3a:	4b16      	ldr	r3, [pc, #88]	; (11d94 <hci_cmd_handle+0x320>)
		BT_ERR("Invalid HCI CMD packet length");
   11d3c:	4818      	ldr	r0, [pc, #96]	; (11da0 <hci_cmd_handle+0x32c>)
   11d3e:	e7c0      	b.n	11cc2 <hci_cmd_handle+0x24e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11d40:	2107      	movs	r1, #7
   11d42:	f012 fa5d 	bl	24200 <bt_hci_cmd_complete_create>
   11d46:	2107      	movs	r1, #7
   11d48:	4603      	mov	r3, r0
   11d4a:	3008      	adds	r0, #8
   11d4c:	9307      	str	r3, [sp, #28]
   11d4e:	f013 ff68 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   11d52:	4601      	mov	r1, r0
   11d54:	2000      	movs	r0, #0
   11d56:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   11d5a:	f7ff fbaf 	bl	114bc <ll_addr_get>
	return evt;
   11d5e:	9d07      	ldr	r5, [sp, #28]
   11d60:	e6be      	b.n	11ae0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11d62:	2109      	movs	r1, #9
   11d64:	f012 fa4c 	bl	24200 <bt_hci_cmd_complete_create>
   11d68:	2109      	movs	r1, #9
   11d6a:	4603      	mov	r3, r0
   11d6c:	3008      	adds	r0, #8
   11d6e:	9307      	str	r3, [sp, #28]
   11d70:	f013 ff57 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   11d74:	2100      	movs	r1, #0
   11d76:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   11d78:	2208      	movs	r2, #8
	rp->status = 0x00;
   11d7a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   11d7e:	f011 ff27 	bl	23bd0 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   11d82:	2360      	movs	r3, #96	; 0x60
	return evt;
   11d84:	9d07      	ldr	r5, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
   11d86:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   11d88:	e6aa      	b.n	11ae0 <hci_cmd_handle+0x6c>
   11d8a:	bf00      	nop
   11d8c:	2000ed18 	.word	0x2000ed18
   11d90:	00027008 	.word	0x00027008
   11d94:	00026fc8 	.word	0x00026fc8
   11d98:	00027bd0 	.word	0x00027bd0
   11d9c:	200001a8 	.word	0x200001a8
   11da0:	00027be8 	.word	0x00027be8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11da4:	2141      	movs	r1, #65	; 0x41
   11da6:	f012 fa2b 	bl	24200 <bt_hci_cmd_complete_create>
   11daa:	2141      	movs	r1, #65	; 0x41
   11dac:	4603      	mov	r3, r0
   11dae:	3008      	adds	r0, #8
   11db0:	9307      	str	r3, [sp, #28]
   11db2:	f013 ff36 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   11db6:	2100      	movs	r1, #0
   11db8:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   11dba:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   11dbc:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   11dc0:	f011 ff06 	bl	23bd0 <memset>
	rp->commands[15] |= BIT(1);
   11dc4:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
   11dc6:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   11dc8:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   11dca:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
   11dcc:	f043 0302 	orr.w	r3, r3, #2
   11dd0:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   11dd2:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
   11dd4:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   11dd8:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   11ddc:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   11de0:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   11de2:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
   11de4:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
   11de6:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   11de8:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
   11dea:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   11dee:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
   11df2:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
   11df6:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
   11dfa:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
   11dfe:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   11e00:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
   11e02:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
   11e04:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
   11e06:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
   11e08:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   11e0c:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   11e0e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   11e12:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   11e16:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
   11e1a:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   11e1e:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
   11e22:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
   11e24:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
   11e26:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   11e2a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   11e2e:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   11e30:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   11e34:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   11e38:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   11e3c:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   11e40:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
   11e44:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   11e48:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   11e4c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   11e50:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   11e54:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   11e58:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
   11e5c:	9d07      	ldr	r5, [sp, #28]
   11e5e:	e63f      	b.n	11ae0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11e60:	2109      	movs	r1, #9
   11e62:	f012 f9cd 	bl	24200 <bt_hci_cmd_complete_create>
   11e66:	2109      	movs	r1, #9
   11e68:	4603      	mov	r3, r0
   11e6a:	3008      	adds	r0, #8
   11e6c:	9307      	str	r3, [sp, #28]
   11e6e:	f013 fed8 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   11e72:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   11e74:	210b      	movs	r1, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   11e76:	f04f 32ff 	mov.w	r2, #4294967295
	rp->status = 0x00;
   11e7a:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   11e7c:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   11e7e:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   11e82:	7083      	strb	r3, [r0, #2]
   11e84:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   11e86:	2305      	movs	r3, #5
	return evt;
   11e88:	9d07      	ldr	r5, [sp, #28]
	rp->lmp_version = LL_VERSION_NUMBER;
   11e8a:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   11e8c:	7144      	strb	r4, [r0, #5]
   11e8e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   11e90:	71c2      	strb	r2, [r0, #7]
   11e92:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   11e94:	e624      	b.n	11ae0 <hci_cmd_handle+0x6c>
		le_set_privacy_mode(cmd, evt);
   11e96:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   11e98:	79c1      	ldrb	r1, [r0, #7]
   11e9a:	f007 fcff 	bl	1989c <ll_priv_mode_set>
   11e9e:	4603      	mov	r3, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11ea0:	2101      	movs	r1, #1
   11ea2:	8830      	ldrh	r0, [r6, #0]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   11ea4:	461e      	mov	r6, r3
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11ea6:	f012 f9ab 	bl	24200 <bt_hci_cmd_complete_create>
   11eaa:	2101      	movs	r1, #1
   11eac:	4605      	mov	r5, r0
   11eae:	3008      	adds	r0, #8
   11eb0:	f013 feb7 	bl	25c22 <net_buf_simple_add>
	ccst->status = status;
   11eb4:	7006      	strb	r6, [r0, #0]
	if (err == -EINVAL) {
   11eb6:	e613      	b.n	11ae0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11eb8:	2103      	movs	r1, #3
   11eba:	f012 f9a1 	bl	24200 <bt_hci_cmd_complete_create>
   11ebe:	2103      	movs	r1, #3
   11ec0:	4603      	mov	r3, r0
   11ec2:	3008      	adds	r0, #8
   11ec4:	9307      	str	r3, [sp, #28]
   11ec6:	f013 feac 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   11eca:	4601      	mov	r1, r0
   11ecc:	2300      	movs	r3, #0
   11ece:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   11ed2:	3001      	adds	r0, #1
   11ed4:	f7ff fb3e 	bl	11554 <ll_tx_pwr_get>
	return evt;
   11ed8:	9d07      	ldr	r5, [sp, #28]
   11eda:	e601      	b.n	11ae0 <hci_cmd_handle+0x6c>
		le_set_phy(cmd, evt);
   11edc:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11ede:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
   11ee0:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   11ee2:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   11ee4:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11ee8:	07df      	lsls	r7, r3, #31
		cmd->tx_phys |= mask_phys;
   11eea:	bf44      	itt	mi
   11eec:	f041 0103 	orrmi.w	r1, r1, #3
   11ef0:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   11ef2:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
   11ef6:	7913      	ldrb	r3, [r2, #4]
   11ef8:	bf1c      	itt	ne
   11efa:	f043 0303 	orrne.w	r3, r3, #3
   11efe:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   11f00:	ea43 0201 	orr.w	r2, r3, r1
   11f04:	f012 0ffc 	tst.w	r2, #252	; 0xfc
   11f08:	f040 827d 	bne.w	12406 <hci_cmd_handle+0x992>
	if (!(cmd->tx_phys & 0x07) ||
   11f0c:	074f      	lsls	r7, r1, #29
   11f0e:	f000 8274 	beq.w	123fa <hci_cmd_handle+0x986>
   11f12:	075a      	lsls	r2, r3, #29
   11f14:	f000 8271 	beq.w	123fa <hci_cmd_handle+0x986>
	if (phy_opts & 0x03) {
   11f18:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   11f1c:	bf1c      	itt	ne
   11f1e:	f104 34ff 	addne.w	r4, r4, #4294967295
		phy_opts &= 1;
   11f22:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   11f26:	4628      	mov	r0, r5
   11f28:	f003 fbfa 	bl	15720 <ll_phy_req_send>
   11f2c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11f2e:	8830      	ldrh	r0, [r6, #0]
   11f30:	f012 f978 	bl	24224 <bt_hci_cmd_status_create>
   11f34:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   11f36:	e5d3      	b.n	11ae0 <hci_cmd_handle+0x6c>
		le_set_default_phy(cmd, evt);
   11f38:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   11f3a:	781a      	ldrb	r2, [r3, #0]
   11f3c:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   11f3e:	bf4a      	itet	mi
   11f40:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   11f42:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   11f44:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   11f46:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   11f48:	bf4a      	itet	mi
   11f4a:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   11f4c:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   11f4e:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   11f50:	f003 fbdc 	bl	1570c <ll_phy_default_set>
   11f54:	e7a3      	b.n	11e9e <hci_cmd_handle+0x42a>
	handle = sys_le16_to_cpu(cmd->handle);
   11f56:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11f58:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   11f5a:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11f5c:	f012 f950 	bl	24200 <bt_hci_cmd_complete_create>
   11f60:	2105      	movs	r1, #5
   11f62:	4603      	mov	r3, r0
   11f64:	3008      	adds	r0, #8
   11f66:	9307      	str	r3, [sp, #28]
   11f68:	f013 fe5b 	bl	25c22 <net_buf_simple_add>
   11f6c:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   11f6e:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   11f70:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   11f72:	1ce1      	adds	r1, r4, #3
   11f74:	f003 fbac 	bl	156d0 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   11f78:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   11f7a:	7020      	strb	r0, [r4, #0]
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	fa93 f2a3 	rbit	r2, r3
   11f82:	7923      	ldrb	r3, [r4, #4]
   11f84:	fab2 f282 	clz	r2, r2
   11f88:	bf08      	it	eq
   11f8a:	f04f 32ff 	moveq.w	r2, #4294967295
   11f8e:	2b00      	cmp	r3, #0
   11f90:	fa93 f3a3 	rbit	r3, r3
   11f94:	fab3 f383 	clz	r3, r3
   11f98:	f102 0201 	add.w	r2, r2, #1
   11f9c:	bf08      	it	eq
   11f9e:	f04f 33ff 	moveq.w	r3, #4294967295
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   11fa2:	70e2      	strb	r2, [r4, #3]
   11fa4:	3301      	adds	r3, #1
	return evt;
   11fa6:	9d07      	ldr	r5, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   11fa8:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   11faa:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   11fae:	e597      	b.n	11ae0 <hci_cmd_handle+0x6c>
	status = ll_rl_enable(cmd->enable);
   11fb0:	68ab      	ldr	r3, [r5, #8]
   11fb2:	7818      	ldrb	r0, [r3, #0]
   11fb4:	f007 fc52 	bl	1985c <ll_rl_enable>
   11fb8:	e771      	b.n	11e9e <hci_cmd_handle+0x42a>
	memcpy(dst, src, sizeof(*dst));
   11fba:	2207      	movs	r2, #7
   11fbc:	68a9      	ldr	r1, [r5, #8]
   11fbe:	a808      	add	r0, sp, #32
   11fc0:	f011 fddb 	bl	23b7a <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11fc4:	2107      	movs	r1, #7
   11fc6:	8830      	ldrh	r0, [r6, #0]
   11fc8:	f012 f91a 	bl	24200 <bt_hci_cmd_complete_create>
   11fcc:	2107      	movs	r1, #7
   11fce:	4603      	mov	r3, r0
   11fd0:	3008      	adds	r0, #8
   11fd2:	9307      	str	r3, [sp, #28]
   11fd4:	f013 fe25 	bl	25c22 <net_buf_simple_add>
   11fd8:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   11fda:	1c41      	adds	r1, r0, #1
   11fdc:	a808      	add	r0, sp, #32
   11fde:	f007 fc0b 	bl	197f8 <ll_rl_lrpa_get>
   11fe2:	7020      	strb	r0, [r4, #0]
	return evt;
   11fe4:	9d07      	ldr	r5, [sp, #28]
   11fe6:	e57b      	b.n	11ae0 <hci_cmd_handle+0x6c>
   11fe8:	2207      	movs	r2, #7
   11fea:	68a9      	ldr	r1, [r5, #8]
   11fec:	a808      	add	r0, sp, #32
   11fee:	f011 fdc4 	bl	23b7a <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11ff2:	2107      	movs	r1, #7
   11ff4:	8830      	ldrh	r0, [r6, #0]
   11ff6:	f012 f903 	bl	24200 <bt_hci_cmd_complete_create>
   11ffa:	2107      	movs	r1, #7
   11ffc:	4603      	mov	r3, r0
   11ffe:	3008      	adds	r0, #8
   12000:	9307      	str	r3, [sp, #28]
   12002:	f013 fe0e 	bl	25c22 <net_buf_simple_add>
   12006:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   12008:	1c41      	adds	r1, r0, #1
   1200a:	a808      	add	r0, sp, #32
   1200c:	f007 fbba 	bl	19784 <ll_rl_crpa_get>
   12010:	7020      	strb	r0, [r4, #0]
	return evt;
   12012:	9d07      	ldr	r5, [sp, #28]
   12014:	e564      	b.n	11ae0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12016:	2102      	movs	r1, #2
   12018:	f012 f8f2 	bl	24200 <bt_hci_cmd_complete_create>
   1201c:	2102      	movs	r1, #2
   1201e:	4603      	mov	r3, r0
   12020:	3008      	adds	r0, #8
   12022:	9307      	str	r3, [sp, #28]
   12024:	f013 fdfd 	bl	25c22 <net_buf_simple_add>
   12028:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   1202a:	f007 fa73 	bl	19514 <ll_rl_size_get>
	rp->status = 0x00;
   1202e:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   12030:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   12032:	7023      	strb	r3, [r4, #0]
	return evt;
   12034:	9d07      	ldr	r5, [sp, #28]
   12036:	e553      	b.n	11ae0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12038:	2109      	movs	r1, #9
   1203a:	f012 f8e1 	bl	24200 <bt_hci_cmd_complete_create>
   1203e:	2109      	movs	r1, #9
   12040:	4603      	mov	r3, r0
   12042:	3008      	adds	r0, #8
   12044:	9307      	str	r3, [sp, #28]
   12046:	f013 fdec 	bl	25c22 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   1204a:	ab08      	add	r3, sp, #32
   1204c:	4604      	mov	r4, r0
   1204e:	f10d 021a 	add.w	r2, sp, #26
   12052:	a906      	add	r1, sp, #24
   12054:	f10d 0016 	add.w	r0, sp, #22
   12058:	f003 fb2e 	bl	156b8 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1205c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12060:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   12064:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12068:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   1206c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   12070:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   12074:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   12076:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   1207a:	7022      	strb	r2, [r4, #0]
	return evt;
   1207c:	9d07      	ldr	r5, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1207e:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   12082:	e52d      	b.n	11ae0 <hci_cmd_handle+0x6c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   12084:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
   12086:	8818      	ldrh	r0, [r3, #0]
   12088:	f007 fbfe 	bl	19888 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1208c:	8830      	ldrh	r0, [r6, #0]
   1208e:	2101      	movs	r1, #1
   12090:	e62c      	b.n	11cec <hci_cmd_handle+0x278>
   12092:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
   12094:	4bb8      	ldr	r3, [pc, #736]	; (12378 <hci_cmd_handle+0x904>)
   12096:	6811      	ldr	r1, [r2, #0]
   12098:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1209a:	6019      	str	r1, [r3, #0]
   1209c:	e624      	b.n	11ce8 <hci_cmd_handle+0x274>
		le_set_adv_param(cmd, evt);
   1209e:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   120a0:	7ba5      	ldrb	r5, [r4, #14]
   120a2:	79a3      	ldrb	r3, [r4, #6]
   120a4:	7962      	ldrb	r2, [r4, #5]
   120a6:	7921      	ldrb	r1, [r4, #4]
   120a8:	8820      	ldrh	r0, [r4, #0]
   120aa:	9502      	str	r5, [sp, #8]
   120ac:	7b65      	ldrb	r5, [r4, #13]
   120ae:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   120b0:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   120b2:	9400      	str	r4, [sp, #0]
   120b4:	f002 f9e2 	bl	1447c <ll_adv_params_set>
   120b8:	e6f1      	b.n	11e9e <hci_cmd_handle+0x42a>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   120ba:	68a9      	ldr	r1, [r5, #8]
   120bc:	2001      	movs	r0, #1
   120be:	f7ff fa1b 	bl	114f8 <ll_addr_set>
   120c2:	e6ec      	b.n	11e9e <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   120c4:	2109      	movs	r1, #9
   120c6:	f012 f89b 	bl	24200 <bt_hci_cmd_complete_create>
   120ca:	2109      	movs	r1, #9
   120cc:	4603      	mov	r3, r0
   120ce:	3008      	adds	r0, #8
   120d0:	9307      	str	r3, [sp, #28]
   120d2:	f013 fda6 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   120d6:	2100      	movs	r1, #0
   120d8:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   120da:	2208      	movs	r2, #8
	rp->status = 0x00;
   120dc:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   120e0:	f011 fd76 	bl	23bd0 <memset>
	dst[0] = val;
   120e4:	217f      	movs	r1, #127	; 0x7f
	dst[1] = val >> 8;
   120e6:	2241      	movs	r2, #65	; 0x41
	dst[2] = val >> 16;
   120e8:	2301      	movs	r3, #1
	dst[0] = val;
   120ea:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   120ec:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   120ee:	70e3      	strb	r3, [r4, #3]
	return evt;
   120f0:	9d07      	ldr	r5, [sp, #28]
   120f2:	e4f5      	b.n	11ae0 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   120f4:	2104      	movs	r1, #4
   120f6:	f012 f883 	bl	24200 <bt_hci_cmd_complete_create>
   120fa:	2104      	movs	r1, #4
   120fc:	4603      	mov	r3, r0
   120fe:	3008      	adds	r0, #8
   12100:	9307      	str	r3, [sp, #28]
   12102:	f013 fd8e 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   12106:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   12108:	2103      	movs	r1, #3
	rp->status = 0x00;
   1210a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   1210c:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   1210e:	70c1      	strb	r1, [r0, #3]
	return evt;
   12110:	9d07      	ldr	r5, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   12112:	7042      	strb	r2, [r0, #1]
   12114:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   12116:	e4e3      	b.n	11ae0 <hci_cmd_handle+0x6c>
	status = ll_wl_remove(&cmd->addr);
   12118:	68a8      	ldr	r0, [r5, #8]
   1211a:	f007 f969 	bl	193f0 <ll_wl_remove>
   1211e:	e6be      	b.n	11e9e <hci_cmd_handle+0x42a>
	status = ll_wl_add(&cmd->addr);
   12120:	68a8      	ldr	r0, [r5, #8]
   12122:	f007 f8c5 	bl	192b0 <ll_wl_add>
   12126:	e6ba      	b.n	11e9e <hci_cmd_handle+0x42a>
	status = ll_wl_clear();
   12128:	f007 f898 	bl	1925c <ll_wl_clear>
   1212c:	e6b7      	b.n	11e9e <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1212e:	2102      	movs	r1, #2
   12130:	f012 f866 	bl	24200 <bt_hci_cmd_complete_create>
   12134:	2102      	movs	r1, #2
   12136:	4603      	mov	r3, r0
   12138:	3008      	adds	r0, #8
   1213a:	9307      	str	r3, [sp, #28]
   1213c:	f013 fd71 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   12140:	2300      	movs	r3, #0
   12142:	7003      	strb	r3, [r0, #0]
   12144:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   12146:	f007 f887 	bl	19258 <ll_wl_size_get>
   1214a:	7060      	strb	r0, [r4, #1]
	return evt;
   1214c:	9d07      	ldr	r5, [sp, #28]
   1214e:	e4c7      	b.n	11ae0 <hci_cmd_handle+0x6c>
	status = ll_adv_enable(cmd->enable);
   12150:	68ab      	ldr	r3, [r5, #8]
   12152:	7818      	ldrb	r0, [r3, #0]
   12154:	f7ef fbb8 	bl	18c8 <ll_adv_enable>
   12158:	e6a1      	b.n	11e9e <hci_cmd_handle+0x42a>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   1215a:	68a9      	ldr	r1, [r5, #8]
   1215c:	f811 0b01 	ldrb.w	r0, [r1], #1
   12160:	f002 fb14 	bl	1478c <ll_adv_scan_rsp_set>
   12164:	e69b      	b.n	11e9e <hci_cmd_handle+0x42a>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   12166:	68a9      	ldr	r1, [r5, #8]
   12168:	f811 0b01 	ldrb.w	r0, [r1], #1
   1216c:	f002 fa28 	bl	145c0 <ll_adv_data_set>
   12170:	e695      	b.n	11e9e <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12172:	2102      	movs	r1, #2
   12174:	f012 f844 	bl	24200 <bt_hci_cmd_complete_create>
   12178:	2102      	movs	r1, #2
   1217a:	4603      	mov	r3, r0
   1217c:	3008      	adds	r0, #8
   1217e:	9307      	str	r3, [sp, #28]
   12180:	f013 fd4f 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   12184:	2300      	movs	r3, #0
   12186:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   12188:	7043      	strb	r3, [r0, #1]
	return evt;
   1218a:	9d07      	ldr	r5, [sp, #28]
   1218c:	e4a8      	b.n	11ae0 <hci_cmd_handle+0x6c>
	status = ll_rl_clear();
   1218e:	f007 f9c3 	bl	19518 <ll_rl_clear>
   12192:	e684      	b.n	11e9e <hci_cmd_handle+0x42a>
	status = ll_rl_remove(&cmd->peer_id_addr);
   12194:	68a8      	ldr	r0, [r5, #8]
   12196:	f007 f9fd 	bl	19594 <ll_rl_remove>
   1219a:	e680      	b.n	11e9e <hci_cmd_handle+0x42a>
		le_add_dev_to_rl(cmd, evt);
   1219c:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1219e:	f100 0217 	add.w	r2, r0, #23
   121a2:	1dc1      	adds	r1, r0, #7
   121a4:	f007 fd8e 	bl	19cc4 <ll_rl_add>
   121a8:	e679      	b.n	11e9e <hci_cmd_handle+0x42a>
		le_write_default_data_len(cmd, evt);
   121aa:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   121ac:	8859      	ldrh	r1, [r3, #2]
   121ae:	8818      	ldrh	r0, [r3, #0]
   121b0:	f003 fa78 	bl	156a4 <ll_length_default_set>
   121b4:	e673      	b.n	11e9e <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   121b6:	2105      	movs	r1, #5
   121b8:	f012 f822 	bl	24200 <bt_hci_cmd_complete_create>
   121bc:	2105      	movs	r1, #5
   121be:	4603      	mov	r3, r0
   121c0:	3008      	adds	r0, #8
   121c2:	9307      	str	r3, [sp, #28]
   121c4:	f013 fd2d 	bl	25c22 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   121c8:	a908      	add	r1, sp, #32
   121ca:	4604      	mov	r4, r0
   121cc:	f10d 001a 	add.w	r0, sp, #26
   121d0:	f003 fa5c 	bl	1568c <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   121d4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   121d8:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   121dc:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   121de:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   121e2:	7022      	strb	r2, [r4, #0]
	return evt;
   121e4:	9d07      	ldr	r5, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   121e6:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   121ea:	e479      	b.n	11ae0 <hci_cmd_handle+0x6c>
		le_set_data_len(cmd, evt);
   121ec:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   121ee:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   121f0:	889a      	ldrh	r2, [r3, #4]
   121f2:	8859      	ldrh	r1, [r3, #2]
   121f4:	b2b8      	uxth	r0, r7
   121f6:	f003 f9f5 	bl	155e4 <ll_length_req_send>
   121fa:	e58d      	b.n	11d18 <hci_cmd_handle+0x2a4>
		le_conn_param_req_neg_reply(cmd, evt);
   121fc:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   121fe:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   12200:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   12202:	7892      	ldrb	r2, [r2, #2]
   12204:	9300      	str	r3, [sp, #0]
   12206:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1220a:	2102      	movs	r1, #2
   1220c:	b2a0      	uxth	r0, r4
   1220e:	f003 f8a7 	bl	15360 <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12212:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   12214:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12216:	8830      	ldrh	r0, [r6, #0]
   12218:	f011 fff2 	bl	24200 <bt_hci_cmd_complete_create>
   1221c:	2103      	movs	r1, #3
   1221e:	4603      	mov	r3, r0
   12220:	3008      	adds	r0, #8
   12222:	9307      	str	r3, [sp, #28]
   12224:	f013 fcfd 	bl	25c22 <net_buf_simple_add>
	rp->status = status;
   12228:	7005      	strb	r5, [r0, #0]
	return evt;
   1222a:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   1222c:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   12230:	e456      	b.n	11ae0 <hci_cmd_handle+0x6c>
		le_conn_param_req_reply(cmd, evt);
   12232:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12234:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12236:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12238:	8853      	ldrh	r3, [r2, #2]
   1223a:	9102      	str	r1, [sp, #8]
   1223c:	88d1      	ldrh	r1, [r2, #6]
   1223e:	9101      	str	r1, [sp, #4]
   12240:	8891      	ldrh	r1, [r2, #4]
   12242:	9100      	str	r1, [sp, #0]
   12244:	2200      	movs	r2, #0
   12246:	e7e0      	b.n	1220a <hci_cmd_handle+0x796>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12248:	2109      	movs	r1, #9
   1224a:	f011 ffd9 	bl	24200 <bt_hci_cmd_complete_create>
   1224e:	2109      	movs	r1, #9
   12250:	4603      	mov	r3, r0
   12252:	3008      	adds	r0, #8
   12254:	9307      	str	r3, [sp, #28]
   12256:	f013 fce4 	bl	25c22 <net_buf_simple_add>
	dst[0] = val;
   1225a:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   1225c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1225e:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   12260:	2230      	movs	r2, #48	; 0x30
   12262:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   12264:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   12266:	70c2      	strb	r2, [r0, #3]
   12268:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1226a:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   1226c:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   1226e:	2201      	movs	r2, #1
	return evt;
   12270:	9d07      	ldr	r5, [sp, #28]
   12272:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   12274:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   12276:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   12278:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   1227a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   1227c:	e430      	b.n	11ae0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   1227e:	68ab      	ldr	r3, [r5, #8]
   12280:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   12282:	2200      	movs	r2, #0
   12284:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12286:	b2b8      	uxth	r0, r7
   12288:	f006 fe72 	bl	18f70 <ll_start_enc_req_send>
   1228c:	e544      	b.n	11d18 <hci_cmd_handle+0x2a4>
	handle = sys_le16_to_cpu(cmd->handle);
   1228e:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12290:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   12292:	f832 7b02 	ldrh.w	r7, [r2], #2
   12296:	e7f6      	b.n	12286 <hci_cmd_handle+0x812>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12298:	2109      	movs	r1, #9
   1229a:	f011 ffb1 	bl	24200 <bt_hci_cmd_complete_create>
   1229e:	2109      	movs	r1, #9
   122a0:	4603      	mov	r3, r0
   122a2:	3008      	adds	r0, #8
   122a4:	9307      	str	r3, [sp, #28]
   122a6:	f013 fcbc 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   122aa:	2300      	movs	r3, #0
   122ac:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   122b0:	2108      	movs	r1, #8
   122b2:	f008 f95b 	bl	1a56c <lll_csrand_get>
	return evt;
   122b6:	9d07      	ldr	r5, [sp, #28]
   122b8:	e412      	b.n	11ae0 <hci_cmd_handle+0x6c>
		le_encrypt(cmd, evt);
   122ba:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   122bc:	aa08      	add	r2, sp, #32
   122be:	2300      	movs	r3, #0
   122c0:	f100 0110 	add.w	r1, r0, #16
   122c4:	f009 fe52 	bl	1bf6c <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   122c8:	2111      	movs	r1, #17
   122ca:	8830      	ldrh	r0, [r6, #0]
   122cc:	f011 ff98 	bl	24200 <bt_hci_cmd_complete_create>
   122d0:	2111      	movs	r1, #17
   122d2:	4603      	mov	r3, r0
   122d4:	3008      	adds	r0, #8
   122d6:	9307      	str	r3, [sp, #28]
   122d8:	f013 fca3 	bl	25c22 <net_buf_simple_add>
	rp->status = 0x00;
   122dc:	2300      	movs	r3, #0
   122de:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   122e2:	2210      	movs	r2, #16
   122e4:	a908      	add	r1, sp, #32
   122e6:	f011 fc48 	bl	23b7a <memcpy>
	return evt;
   122ea:	9d07      	ldr	r5, [sp, #28]
   122ec:	f7ff bbf8 	b.w	11ae0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   122f0:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
   122f2:	8818      	ldrh	r0, [r3, #0]
   122f4:	f003 f92a 	bl	1554c <ll_feature_req_send>
   122f8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   122fa:	8830      	ldrh	r0, [r6, #0]
   122fc:	f011 ff92 	bl	24224 <bt_hci_cmd_status_create>
   12300:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12302:	f7ff bbed 	b.w	11ae0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12306:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12308:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   1230a:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1230c:	f011 ff78 	bl	24200 <bt_hci_cmd_complete_create>
   12310:	2108      	movs	r1, #8
   12312:	4603      	mov	r3, r0
   12314:	4408      	add	r0, r1
   12316:	9307      	str	r3, [sp, #28]
   12318:	f013 fc83 	bl	25c22 <net_buf_simple_add>
   1231c:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   1231e:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   12320:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   12322:	f003 f8b1 	bl	15488 <ll_chm_get>
	rp->status = status;
   12326:	7020      	strb	r0, [r4, #0]
	return evt;
   12328:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
   1232a:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   1232e:	f7ff bbd7 	b.w	11ae0 <hci_cmd_handle+0x6c>
		le_conn_update(cmd, evt);
   12332:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   12334:	890a      	ldrh	r2, [r1, #8]
   12336:	884b      	ldrh	r3, [r1, #2]
   12338:	8808      	ldrh	r0, [r1, #0]
   1233a:	9202      	str	r2, [sp, #8]
   1233c:	88ca      	ldrh	r2, [r1, #6]
   1233e:	9201      	str	r2, [sp, #4]
   12340:	8889      	ldrh	r1, [r1, #4]
   12342:	9100      	str	r1, [sp, #0]
   12344:	2200      	movs	r2, #0
   12346:	4611      	mov	r1, r2
   12348:	f003 f80a 	bl	15360 <ll_conn_update>
   1234c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1234e:	8830      	ldrh	r0, [r6, #0]
   12350:	f011 ff68 	bl	24224 <bt_hci_cmd_status_create>
   12354:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12356:	f7ff bbc3 	b.w	11ae0 <hci_cmd_handle+0x6c>
		disconnect(cmd, evt);
   1235a:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1235c:	7899      	ldrb	r1, [r3, #2]
   1235e:	8818      	ldrh	r0, [r3, #0]
   12360:	f003 f8b2 	bl	154c8 <ll_terminate_ind_send>
   12364:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12366:	8830      	ldrh	r0, [r6, #0]
   12368:	f011 ff5c 	bl	24224 <bt_hci_cmd_status_create>
   1236c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1236e:	f7ff bbb7 	b.w	11ae0 <hci_cmd_handle+0x6c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12372:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   12374:	4b01      	ldr	r3, [pc, #4]	; (1237c <hci_cmd_handle+0x908>)
   12376:	e68e      	b.n	12096 <hci_cmd_handle+0x622>
   12378:	200001b0 	.word	0x200001b0
   1237c:	2000ab18 	.word	0x2000ab18
	event_mask = DEFAULT_EVENT_MASK;
   12380:	4b24      	ldr	r3, [pc, #144]	; (12414 <hci_cmd_handle+0x9a0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12382:	4a25      	ldr	r2, [pc, #148]	; (12418 <hci_cmd_handle+0x9a4>)
	event_mask = DEFAULT_EVENT_MASK;
   12384:	f04f 30ff 	mov.w	r0, #4294967295
   12388:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1238c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12390:	4b22      	ldr	r3, [pc, #136]	; (1241c <hci_cmd_handle+0x9a8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12392:	2000      	movs	r0, #0
   12394:	2100      	movs	r1, #0
   12396:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1239a:	201f      	movs	r0, #31
   1239c:	2100      	movs	r1, #0
   1239e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   123a2:	f001 f857 	bl	13454 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   123a6:	2101      	movs	r1, #1
   123a8:	8830      	ldrh	r0, [r6, #0]
   123aa:	f011 ff29 	bl	24200 <bt_hci_cmd_complete_create>
   123ae:	2101      	movs	r1, #1
   123b0:	4605      	mov	r5, r0
   123b2:	3008      	adds	r0, #8
   123b4:	f013 fc35 	bl	25c22 <net_buf_simple_add>
	conn_count = 0U;
   123b8:	4a19      	ldr	r2, [pc, #100]	; (12420 <hci_cmd_handle+0x9ac>)
	ccst->status = status;
   123ba:	2300      	movs	r3, #0
   123bc:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   123be:	6013      	str	r3, [r2, #0]
}
   123c0:	f7ff bb8e 	b.w	11ae0 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   123c4:	68ab      	ldr	r3, [r5, #8]
   123c6:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   123c8:	a908      	add	r1, sp, #32
   123ca:	b2a8      	uxth	r0, r5
   123cc:	f003 f9fa 	bl	157c4 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   123d0:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   123d2:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   123d4:	8830      	ldrh	r0, [r6, #0]
   123d6:	f011 ff13 	bl	24200 <bt_hci_cmd_complete_create>
   123da:	2105      	movs	r1, #5
   123dc:	4603      	mov	r3, r0
   123de:	3008      	adds	r0, #8
   123e0:	9307      	str	r3, [sp, #28]
   123e2:	f013 fc1e 	bl	25c22 <net_buf_simple_add>
	rp->status = status;
   123e6:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   123e8:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   123ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
   123f0:	9d07      	ldr	r5, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   123f2:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   123f6:	f7ff bb73 	b.w	11ae0 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   123fa:	2112      	movs	r1, #18
   123fc:	f011 ff12 	bl	24224 <bt_hci_cmd_status_create>
   12400:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12402:	f7ff bb6d 	b.w	11ae0 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   12406:	2111      	movs	r1, #17
   12408:	f011 ff0c 	bl	24224 <bt_hci_cmd_status_create>
   1240c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1240e:	f7ff bb67 	b.w	11ae0 <hci_cmd_handle+0x6c>
   12412:	bf00      	nop
   12414:	200001a8 	.word	0x200001a8
   12418:	2000ab18 	.word	0x2000ab18
   1241c:	200001b0 	.word	0x200001b0
   12420:	2000d990 	.word	0x2000d990

00012424 <hci_acl_handle>:
{
   12424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   12428:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   1242a:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   1242c:	2b03      	cmp	r3, #3
	*evt = NULL;
   1242e:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   12430:	d944      	bls.n	124bc <hci_acl_handle+0x98>
	return net_buf_simple_pull_mem(&buf->b, len);
   12432:	4605      	mov	r5, r0
   12434:	460f      	mov	r7, r1
   12436:	3008      	adds	r0, #8
   12438:	2104      	movs	r1, #4
   1243a:	f013 fc19 	bl	25c70 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   1243e:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   12440:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   12444:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   12448:	4543      	cmp	r3, r8
   1244a:	d344      	bcc.n	124d6 <hci_acl_handle+0xb2>
	node_tx = ll_tx_mem_acquire();
   1244c:	f002 ff30 	bl	152b0 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   12450:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   12454:	4604      	mov	r4, r0
   12456:	2800      	cmp	r0, #0
   12458:	d041      	beq.n	124de <hci_acl_handle+0xba>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   1245a:	08b3      	lsrs	r3, r6, #2
   1245c:	d102      	bne.n	12464 <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
   1245e:	b33e      	cbz	r6, 124b0 <hci_acl_handle+0x8c>
   12460:	2e01      	cmp	r6, #1
   12462:	d003      	beq.n	1246c <hci_acl_handle+0x48>
		return -EINVAL;
   12464:	f06f 0015 	mvn.w	r0, #21
}
   12468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1246c:	7903      	ldrb	r3, [r0, #4]
   1246e:	f366 0301 	bfi	r3, r6, #0, #2
   12472:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   12474:	f884 8005 	strb.w	r8, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   12478:	68a9      	ldr	r1, [r5, #8]
   1247a:	4642      	mov	r2, r8
   1247c:	1de0      	adds	r0, r4, #7
   1247e:	f011 fb7c 	bl	23b7a <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   12482:	4621      	mov	r1, r4
   12484:	f3c9 000b 	ubfx	r0, r9, #0, #12
   12488:	f002 ff1e 	bl	152c8 <ll_tx_mem_enqueue>
   1248c:	2800      	cmp	r0, #0
   1248e:	d0eb      	beq.n	12468 <hci_acl_handle+0x44>
   12490:	4b28      	ldr	r3, [pc, #160]	; (12534 <hci_acl_handle+0x110>)
   12492:	4929      	ldr	r1, [pc, #164]	; (12538 <hci_acl_handle+0x114>)
		BT_ERR("Invalid Tx Enqueue");
   12494:	4829      	ldr	r0, [pc, #164]	; (1253c <hci_acl_handle+0x118>)
   12496:	1ac9      	subs	r1, r1, r3
   12498:	08c9      	lsrs	r1, r1, #3
   1249a:	0189      	lsls	r1, r1, #6
   1249c:	f041 0101 	orr.w	r1, r1, #1
   124a0:	f00f fb5f 	bl	21b62 <log_0>
		ll_tx_mem_release(node_tx);
   124a4:	4620      	mov	r0, r4
   124a6:	f002 ff09 	bl	152bc <ll_tx_mem_release>
		return -EINVAL;
   124aa:	f06f 0015 	mvn.w	r0, #21
   124ae:	e7db      	b.n	12468 <hci_acl_handle+0x44>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   124b0:	7903      	ldrb	r3, [r0, #4]
   124b2:	2202      	movs	r2, #2
   124b4:	f362 0301 	bfi	r3, r2, #0, #2
   124b8:	7103      	strb	r3, [r0, #4]
		break;
   124ba:	e7db      	b.n	12474 <hci_acl_handle+0x50>
   124bc:	491e      	ldr	r1, [pc, #120]	; (12538 <hci_acl_handle+0x114>)
   124be:	4b1d      	ldr	r3, [pc, #116]	; (12534 <hci_acl_handle+0x110>)
		BT_ERR("No HCI ACL header");
   124c0:	481f      	ldr	r0, [pc, #124]	; (12540 <hci_acl_handle+0x11c>)
   124c2:	1ac9      	subs	r1, r1, r3
   124c4:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   124c6:	0189      	lsls	r1, r1, #6
   124c8:	f041 0101 	orr.w	r1, r1, #1
   124cc:	f00f fb49 	bl	21b62 <log_0>
		return -EINVAL;
   124d0:	f06f 0015 	mvn.w	r0, #21
   124d4:	e7c8      	b.n	12468 <hci_acl_handle+0x44>
   124d6:	4918      	ldr	r1, [pc, #96]	; (12538 <hci_acl_handle+0x114>)
   124d8:	4b16      	ldr	r3, [pc, #88]	; (12534 <hci_acl_handle+0x110>)
		BT_ERR("Invalid HCI ACL packet length");
   124da:	481a      	ldr	r0, [pc, #104]	; (12544 <hci_acl_handle+0x120>)
   124dc:	e7f1      	b.n	124c2 <hci_acl_handle+0x9e>
   124de:	4b15      	ldr	r3, [pc, #84]	; (12534 <hci_acl_handle+0x110>)
   124e0:	4915      	ldr	r1, [pc, #84]	; (12538 <hci_acl_handle+0x114>)
		BT_ERR("Tx Buffer Overflow");
   124e2:	4819      	ldr	r0, [pc, #100]	; (12548 <hci_acl_handle+0x124>)
   124e4:	1ac9      	subs	r1, r1, r3
   124e6:	08c9      	lsrs	r1, r1, #3
   124e8:	0189      	lsls	r1, r1, #6
   124ea:	f041 0101 	orr.w	r1, r1, #1
   124ee:	f00f fb38 	bl	21b62 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   124f2:	4b16      	ldr	r3, [pc, #88]	; (1254c <hci_acl_handle+0x128>)
   124f4:	681b      	ldr	r3, [r3, #0]
   124f6:	019b      	lsls	r3, r3, #6
   124f8:	d402      	bmi.n	12500 <hci_acl_handle+0xdc>
		return -ENOBUFS;
   124fa:	f06f 0036 	mvn.w	r0, #54	; 0x36
   124fe:	e7b3      	b.n	12468 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   12500:	f04f 33ff 	mov.w	r3, #4294967295
   12504:	f04f 32ff 	mov.w	r2, #4294967295
   12508:	2001      	movs	r0, #1
   1250a:	f7f5 fd83 	bl	8014 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1250e:	2102      	movs	r1, #2
   12510:	6038      	str	r0, [r7, #0]
   12512:	3008      	adds	r0, #8
   12514:	f013 fb85 	bl	25c22 <net_buf_simple_add>
	hdr->len = len;
   12518:	2401      	movs	r4, #1
	hdr->evt = evt;
   1251a:	221a      	movs	r2, #26
   1251c:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1251e:	7044      	strb	r4, [r0, #1]
   12520:	6838      	ldr	r0, [r7, #0]
   12522:	4621      	mov	r1, r4
   12524:	3008      	adds	r0, #8
   12526:	f013 fb7c 	bl	25c22 <net_buf_simple_add>
   1252a:	4603      	mov	r3, r0
		return -ENOBUFS;
   1252c:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   12530:	701c      	strb	r4, [r3, #0]
   12532:	e799      	b.n	12468 <hci_acl_handle+0x44>
   12534:	00026fc8 	.word	0x00026fc8
   12538:	00027008 	.word	0x00027008
   1253c:	00027c50 	.word	0x00027c50
   12540:	00027c08 	.word	0x00027c08
   12544:	00027c1c 	.word	0x00027c1c
   12548:	00027c3c 	.word	0x00027c3c
   1254c:	200001a8 	.word	0x200001a8

00012550 <hci_disconn_complete_encode>:
{
   12550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   12552:	4b0e      	ldr	r3, [pc, #56]	; (1258c <hci_disconn_complete_encode+0x3c>)
   12554:	681b      	ldr	r3, [r3, #0]
   12556:	06db      	lsls	r3, r3, #27
   12558:	d400      	bmi.n	1255c <hci_disconn_complete_encode+0xc>
}
   1255a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1255c:	f102 0408 	add.w	r4, r2, #8
   12560:	4605      	mov	r5, r0
   12562:	460e      	mov	r6, r1
   12564:	4620      	mov	r0, r4
   12566:	2102      	movs	r1, #2
   12568:	f013 fb5b 	bl	25c22 <net_buf_simple_add>
   1256c:	4603      	mov	r3, r0
	hdr->len = len;
   1256e:	2104      	movs	r1, #4
	hdr->evt = evt;
   12570:	2205      	movs	r2, #5
	hdr->len = len;
   12572:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   12574:	701a      	strb	r2, [r3, #0]
   12576:	4620      	mov	r0, r4
   12578:	f013 fb53 	bl	25c22 <net_buf_simple_add>
   1257c:	2700      	movs	r7, #0
	ep->status = 0x00;
   1257e:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12580:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   12584:	782b      	ldrb	r3, [r5, #0]
   12586:	70c3      	strb	r3, [r0, #3]
}
   12588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1258a:	bf00      	nop
   1258c:	200001a8 	.word	0x200001a8

00012590 <hci_disconn_complete_process>:
	conn_count--;
   12590:	4a02      	ldr	r2, [pc, #8]	; (1259c <hci_disconn_complete_process+0xc>)
   12592:	6813      	ldr	r3, [r2, #0]
   12594:	3b01      	subs	r3, #1
   12596:	6013      	str	r3, [r2, #0]
}
   12598:	4770      	bx	lr
   1259a:	bf00      	nop
   1259c:	2000d990 	.word	0x2000d990

000125a0 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   125a0:	7f03      	ldrb	r3, [r0, #28]
   125a2:	f003 0303 	and.w	r3, r3, #3
   125a6:	3b01      	subs	r3, #1
   125a8:	2b01      	cmp	r3, #1
{
   125aa:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   125ac:	d90d      	bls.n	125ca <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   125ae:	4a16      	ldr	r2, [pc, #88]	; (12608 <hci_acl_encode+0x68>)
   125b0:	4916      	ldr	r1, [pc, #88]	; (1260c <hci_acl_encode+0x6c>)
   125b2:	4817      	ldr	r0, [pc, #92]	; (12610 <hci_acl_encode+0x70>)
   125b4:	f241 737a 	movw	r3, #6010	; 0x177a
   125b8:	f00e fe6c 	bl	21294 <printk>
   125bc:	4040      	eors	r0, r0
   125be:	f380 8811 	msr	BASEPRI, r0
   125c2:	f04f 0003 	mov.w	r0, #3
   125c6:	df02      	svc	2
		break;
	}
}
   125c8:	bd70      	pop	{r4, r5, r6, pc}
   125ca:	4604      	mov	r4, r0
   125cc:	f101 0508 	add.w	r5, r1, #8
   125d0:	4628      	mov	r0, r5
   125d2:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   125d4:	88e6      	ldrh	r6, [r4, #6]
   125d6:	f013 fb24 	bl	25c22 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   125da:	7f23      	ldrb	r3, [r4, #28]
   125dc:	f003 0303 	and.w	r3, r3, #3
   125e0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   125e2:	bf0c      	ite	eq
   125e4:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   125e8:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   125ec:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   125ee:	7f61      	ldrb	r1, [r4, #29]
   125f0:	8041      	strh	r1, [r0, #2]
   125f2:	4628      	mov	r0, r5
   125f4:	f013 fb15 	bl	25c22 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   125f8:	7f62      	ldrb	r2, [r4, #29]
   125fa:	f104 011f 	add.w	r1, r4, #31
}
   125fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   12602:	f011 baba 	b.w	23b7a <memcpy>
   12606:	bf00      	nop
   12608:	00027c64 	.word	0x00027c64
   1260c:	00027b4c 	.word	0x00027b4c
   12610:	00027ab4 	.word	0x00027ab4

00012614 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   12614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12618:	f890 c004 	ldrb.w	ip, [r0, #4]
   1261c:	f1bc 0f03 	cmp.w	ip, #3
{
   12620:	4604      	mov	r4, r0
   12622:	b088      	sub	sp, #32
   12624:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   12626:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1262a:	d00f      	beq.n	1264c <hci_evt_encode+0x38>
		encode_control(node_rx, pdu_data, buf);
   1262c:	f1ac 0c13 	sub.w	ip, ip, #19
   12630:	88e6      	ldrh	r6, [r4, #6]
	switch (node_rx->hdr.type) {
   12632:	f1bc 0f06 	cmp.w	ip, #6
   12636:	f200 82be 	bhi.w	12bb6 <hci_evt_encode+0x5a2>
   1263a:	e8df f01c 	tbh	[pc, ip, lsl #1]
   1263e:	0022      	.short	0x0022
   12640:	0083007c 	.word	0x0083007c
   12644:	00c200ac 	.word	0x00c200ac
   12648:	00f300d4 	.word	0x00f300d4
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
   1264c:	7fe3      	ldrb	r3, [r4, #31]
   1264e:	88e6      	ldrh	r6, [r4, #6]
	switch (pdu_data->llctrl.opcode) {
   12650:	3b03      	subs	r3, #3
   12652:	2b12      	cmp	r3, #18
   12654:	f200 8116 	bhi.w	12884 <hci_evt_encode+0x270>
   12658:	e8df f013 	tbh	[pc, r3, lsl #1]
   1265c:	011401e8 	.word	0x011401e8
   12660:	02170114 	.word	0x02170114
   12664:	01140177 	.word	0x01140177
   12668:	01140189 	.word	0x01140189
   1266c:	01140114 	.word	0x01140114
   12670:	011401a8 	.word	0x011401a8
   12674:	011401c3 	.word	0x011401c3
   12678:	01140114 	.word	0x01140114
   1267c:	01220114 	.word	0x01220114
   12680:	0122      	.short	0x0122
	uint8_t status = cc->status;
   12682:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   12684:	2f00      	cmp	r7, #0
   12686:	f000 8219 	beq.w	12abc <hci_evt_encode+0x4a8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1268a:	4bbd      	ldr	r3, [pc, #756]	; (12980 <hci_evt_encode+0x36c>)
   1268c:	685b      	ldr	r3, [r3, #4]
   1268e:	009a      	lsls	r2, r3, #2
   12690:	d54e      	bpl.n	12730 <hci_evt_encode+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12692:	4bbc      	ldr	r3, [pc, #752]	; (12984 <hci_evt_encode+0x370>)
   12694:	681b      	ldr	r3, [r3, #0]
   12696:	f240 2201 	movw	r2, #513	; 0x201
   1269a:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   1269c:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   126a0:	d046      	beq.n	12730 <hci_evt_encode+0x11c>
	if (!status) {
   126a2:	2f00      	cmp	r7, #0
   126a4:	f040 821d 	bne.w	12ae2 <hci_evt_encode+0x4ce>
		conn_count++;
   126a8:	4ab7      	ldr	r2, [pc, #732]	; (12988 <hci_evt_encode+0x374>)
   126aa:	6813      	ldr	r3, [r2, #0]
   126ac:	3301      	adds	r3, #1
   126ae:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   126b0:	f1b8 0f00 	cmp.w	r8, #0
   126b4:	f000 8232 	beq.w	12b1c <hci_evt_encode+0x508>
   126b8:	3508      	adds	r5, #8
   126ba:	2102      	movs	r1, #2
   126bc:	4628      	mov	r0, r5
   126be:	f013 fab0 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   126c2:	233e      	movs	r3, #62	; 0x3e
   126c4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   126c6:	231f      	movs	r3, #31
   126c8:	7043      	strb	r3, [r0, #1]
   126ca:	2101      	movs	r1, #1
   126cc:	4628      	mov	r0, r5
   126ce:	f013 faa8 	bl	25c22 <net_buf_simple_add>
   126d2:	4603      	mov	r3, r0
	me->subevent = subevt;
   126d4:	220a      	movs	r2, #10
   126d6:	701a      	strb	r2, [r3, #0]
   126d8:	4628      	mov	r0, r5
   126da:	211e      	movs	r1, #30
   126dc:	f013 faa1 	bl	25c22 <net_buf_simple_add>
		leecc->status = 0x00;
   126e0:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   126e2:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   126e6:	7f63      	ldrb	r3, [r4, #29]
   126e8:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   126ea:	7fa3      	ldrb	r3, [r4, #30]
   126ec:	7103      	strb	r3, [r0, #4]
   126ee:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   126f0:	2206      	movs	r2, #6
   126f2:	f104 011f 	add.w	r1, r4, #31
   126f6:	3005      	adds	r0, #5
   126f8:	f011 fa3f 	bl	23b7a <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   126fc:	2206      	movs	r2, #6
   126fe:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   12702:	f105 000b 	add.w	r0, r5, #11
   12706:	f011 fa38 	bl	23b7a <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   1270a:	2206      	movs	r2, #6
   1270c:	f104 0125 	add.w	r1, r4, #37	; 0x25
   12710:	f105 0011 	add.w	r0, r5, #17
   12714:	f011 fa31 	bl	23b7a <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12718:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   1271a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   1271c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1271e:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   12722:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12726:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   1272a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1272e:	776b      	strb	r3, [r5, #29]
	}
}
   12730:	b008      	add	sp, #32
   12732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   12736:	460a      	mov	r2, r1
   12738:	4631      	mov	r1, r6
}
   1273a:	b008      	add	sp, #32
   1273c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   12740:	f7ff bf06 	b.w	12550 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12744:	4b8e      	ldr	r3, [pc, #568]	; (12980 <hci_evt_encode+0x36c>)
   12746:	685b      	ldr	r3, [r3, #4]
   12748:	009b      	lsls	r3, r3, #2
   1274a:	d5f1      	bpl.n	12730 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1274c:	4b8d      	ldr	r3, [pc, #564]	; (12984 <hci_evt_encode+0x370>)
   1274e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12750:	075f      	lsls	r7, r3, #29
   12752:	d5ed      	bpl.n	12730 <hci_evt_encode+0x11c>
   12754:	3508      	adds	r5, #8
   12756:	2102      	movs	r1, #2
   12758:	4628      	mov	r0, r5
   1275a:	f013 fa62 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   1275e:	233e      	movs	r3, #62	; 0x3e
   12760:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12762:	230a      	movs	r3, #10
   12764:	7043      	strb	r3, [r0, #1]
   12766:	2101      	movs	r1, #1
   12768:	4628      	mov	r0, r5
   1276a:	f013 fa5a 	bl	25c22 <net_buf_simple_add>
	me->subevent = subevt;
   1276e:	2303      	movs	r3, #3
   12770:	7003      	strb	r3, [r0, #0]
   12772:	2109      	movs	r1, #9
   12774:	4628      	mov	r0, r5
   12776:	f013 fa54 	bl	25c22 <net_buf_simple_add>
	sep->status = cu->status;
   1277a:	7f23      	ldrb	r3, [r4, #28]
   1277c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1277e:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12780:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12782:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12784:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   12788:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1278c:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12790:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12794:	e7cc      	b.n	12730 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   12796:	4b7a      	ldr	r3, [pc, #488]	; (12980 <hci_evt_encode+0x36c>)
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	0418      	lsls	r0, r3, #16
   1279c:	f04f 0400 	mov.w	r4, #0
   127a0:	d5c6      	bpl.n	12730 <hci_evt_encode+0x11c>
   127a2:	3508      	adds	r5, #8
   127a4:	2102      	movs	r1, #2
   127a6:	4628      	mov	r0, r5
   127a8:	f013 fa3b 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   127ac:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   127ae:	2103      	movs	r1, #3
	hdr->evt = evt;
   127b0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   127b2:	7041      	strb	r1, [r0, #1]
   127b4:	4628      	mov	r0, r5
   127b6:	f013 fa34 	bl	25c22 <net_buf_simple_add>
	ep->status = 0x00;
   127ba:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   127bc:	f8a0 6001 	strh.w	r6, [r0, #1]
   127c0:	e7b6      	b.n	12730 <hci_evt_encode+0x11c>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   127c2:	4b72      	ldr	r3, [pc, #456]	; (1298c <hci_evt_encode+0x378>)
   127c4:	681b      	ldr	r3, [r3, #0]
   127c6:	0219      	lsls	r1, r3, #8
   127c8:	d5b2      	bpl.n	12730 <hci_evt_encode+0x11c>
   127ca:	3508      	adds	r5, #8
   127cc:	2102      	movs	r1, #2
   127ce:	4628      	mov	r0, r5
   127d0:	f013 fa27 	bl	25c22 <net_buf_simple_add>
	hdr->len = len;
   127d4:	2102      	movs	r1, #2
	hdr->evt = evt;
   127d6:	2357      	movs	r3, #87	; 0x57
   127d8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   127da:	7041      	strb	r1, [r0, #1]
   127dc:	4628      	mov	r0, r5
   127de:	f013 fa20 	bl	25c22 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   127e2:	8006      	strh	r6, [r0, #0]
   127e4:	e7a4      	b.n	12730 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   127e6:	4b66      	ldr	r3, [pc, #408]	; (12980 <hci_evt_encode+0x36c>)
   127e8:	685b      	ldr	r3, [r3, #4]
   127ea:	009a      	lsls	r2, r3, #2
   127ec:	d5a0      	bpl.n	12730 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   127ee:	4b65      	ldr	r3, [pc, #404]	; (12984 <hci_evt_encode+0x370>)
   127f0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   127f2:	031b      	lsls	r3, r3, #12
   127f4:	d59c      	bpl.n	12730 <hci_evt_encode+0x11c>
   127f6:	3508      	adds	r5, #8
   127f8:	2102      	movs	r1, #2
   127fa:	4628      	mov	r0, r5
   127fc:	f013 fa11 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   12800:	233e      	movs	r3, #62	; 0x3e
   12802:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12804:	2304      	movs	r3, #4
   12806:	7043      	strb	r3, [r0, #1]
   12808:	2101      	movs	r1, #1
   1280a:	4628      	mov	r0, r5
   1280c:	f013 fa09 	bl	25c22 <net_buf_simple_add>
	me->subevent = subevt;
   12810:	2314      	movs	r3, #20
   12812:	7003      	strb	r3, [r0, #0]
   12814:	2103      	movs	r1, #3
   12816:	4628      	mov	r0, r5
   12818:	f013 fa03 	bl	25c22 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   1281c:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   1281e:	7f23      	ldrb	r3, [r4, #28]
   12820:	7083      	strb	r3, [r0, #2]
   12822:	e785      	b.n	12730 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12824:	4b56      	ldr	r3, [pc, #344]	; (12980 <hci_evt_encode+0x36c>)
   12826:	685b      	ldr	r3, [r3, #4]
   12828:	009f      	lsls	r7, r3, #2
   1282a:	d503      	bpl.n	12834 <hci_evt_encode+0x220>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   1282c:	4b55      	ldr	r3, [pc, #340]	; (12984 <hci_evt_encode+0x370>)
   1282e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12830:	0518      	lsls	r0, r3, #20
   12832:	d45c      	bmi.n	128ee <hci_evt_encode+0x2da>
   12834:	7f62      	ldrb	r2, [r4, #29]
   12836:	7fa0      	ldrb	r0, [r4, #30]
   12838:	4955      	ldr	r1, [pc, #340]	; (12990 <hci_evt_encode+0x37c>)
   1283a:	4b56      	ldr	r3, [pc, #344]	; (12994 <hci_evt_encode+0x380>)
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   1283c:	7f24      	ldrb	r4, [r4, #28]
   1283e:	2a00      	cmp	r2, #0
   12840:	fa92 f2a2 	rbit	r2, r2
   12844:	fab2 f282 	clz	r2, r2
   12848:	eba3 0301 	sub.w	r3, r3, r1
   1284c:	bf08      	it	eq
   1284e:	f04f 32ff 	moveq.w	r2, #4294967295
   12852:	2800      	cmp	r0, #0
   12854:	fa90 f0a0 	rbit	r0, r0
   12858:	fab0 f080 	clz	r0, r0
   1285c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   12860:	bf08      	it	eq
   12862:	f04f 30ff 	moveq.w	r0, #4294967295
   12866:	1c51      	adds	r1, r2, #1
   12868:	3001      	adds	r0, #1
   1286a:	019b      	lsls	r3, r3, #6
   1286c:	9007      	str	r0, [sp, #28]
   1286e:	9106      	str	r1, [sp, #24]
   12870:	4849      	ldr	r0, [pc, #292]	; (12998 <hci_evt_encode+0x384>)
   12872:	f043 0302 	orr.w	r3, r3, #2
   12876:	2204      	movs	r2, #4
   12878:	a904      	add	r1, sp, #16
   1287a:	e9cd 6404 	strd	r6, r4, [sp, #16]
   1287e:	f00f f9c6 	bl	21c0e <log_n>
		return;
   12882:	e755      	b.n	12730 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   12884:	4a45      	ldr	r2, [pc, #276]	; (1299c <hci_evt_encode+0x388>)
   12886:	4946      	ldr	r1, [pc, #280]	; (129a0 <hci_evt_encode+0x38c>)
   12888:	4846      	ldr	r0, [pc, #280]	; (129a4 <hci_evt_encode+0x390>)
   1288a:	f241 734e 	movw	r3, #5966	; 0x174e
   1288e:	f00e fd01 	bl	21294 <printk>
   12892:	4040      	eors	r0, r0
   12894:	f380 8811 	msr	BASEPRI, r0
   12898:	f04f 0003 	mov.w	r0, #3
   1289c:	df02      	svc	2
}
   1289e:	e747      	b.n	12730 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   128a0:	4b37      	ldr	r3, [pc, #220]	; (12980 <hci_evt_encode+0x36c>)
   128a2:	685b      	ldr	r3, [r3, #4]
   128a4:	009a      	lsls	r2, r3, #2
   128a6:	f57f af43 	bpl.w	12730 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   128aa:	4b36      	ldr	r3, [pc, #216]	; (12984 <hci_evt_encode+0x370>)
   128ac:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   128ae:	065b      	lsls	r3, r3, #25
   128b0:	f57f af3e 	bpl.w	12730 <hci_evt_encode+0x11c>
   128b4:	3508      	adds	r5, #8
   128b6:	2102      	movs	r1, #2
   128b8:	4628      	mov	r0, r5
   128ba:	f013 f9b2 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   128be:	233e      	movs	r3, #62	; 0x3e
   128c0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   128c2:	230b      	movs	r3, #11
   128c4:	7043      	strb	r3, [r0, #1]
   128c6:	2101      	movs	r1, #1
   128c8:	4628      	mov	r0, r5
   128ca:	f013 f9aa 	bl	25c22 <net_buf_simple_add>
	me->subevent = subevt;
   128ce:	2307      	movs	r3, #7
   128d0:	7003      	strb	r3, [r0, #0]
   128d2:	210a      	movs	r1, #10
   128d4:	4628      	mov	r0, r5
   128d6:	f013 f9a4 	bl	25c22 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   128da:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   128dc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   128de:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   128e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   128e2:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   128e4:	8c23      	ldrh	r3, [r4, #32]
   128e6:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   128e8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   128ea:	8103      	strh	r3, [r0, #8]
   128ec:	e720      	b.n	12730 <hci_evt_encode+0x11c>
   128ee:	3508      	adds	r5, #8
   128f0:	2102      	movs	r1, #2
   128f2:	4628      	mov	r0, r5
   128f4:	f013 f995 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   128f8:	233e      	movs	r3, #62	; 0x3e
   128fa:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   128fc:	2306      	movs	r3, #6
   128fe:	7043      	strb	r3, [r0, #1]
   12900:	2101      	movs	r1, #1
   12902:	4628      	mov	r0, r5
   12904:	f013 f98d 	bl	25c22 <net_buf_simple_add>
	me->subevent = subevt;
   12908:	230c      	movs	r3, #12
   1290a:	7003      	strb	r3, [r0, #0]
   1290c:	2105      	movs	r1, #5
   1290e:	4628      	mov	r0, r5
   12910:	f013 f987 	bl	25c22 <net_buf_simple_add>
	sep->status = pu->status;
   12914:	7f23      	ldrb	r3, [r4, #28]
   12916:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   12918:	f8a0 6001 	strh.w	r6, [r0, #1]
   1291c:	7f62      	ldrb	r2, [r4, #29]
   1291e:	2a00      	cmp	r2, #0
   12920:	fa92 f3a2 	rbit	r3, r2
   12924:	fab3 f383 	clz	r3, r3
   12928:	bf08      	it	eq
   1292a:	f04f 33ff 	moveq.w	r3, #4294967295
   1292e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   12930:	70c3      	strb	r3, [r0, #3]
   12932:	7fa2      	ldrb	r2, [r4, #30]
   12934:	fa92 f3a2 	rbit	r3, r2
   12938:	2a00      	cmp	r2, #0
   1293a:	fab3 f383 	clz	r3, r3
   1293e:	bf08      	it	eq
   12940:	f04f 33ff 	moveq.w	r3, #4294967295
   12944:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   12946:	7103      	strb	r3, [r0, #4]
   12948:	e6f2      	b.n	12730 <hci_evt_encode+0x11c>
		le_unknown_rsp(pdu_data, handle, buf);
   1294a:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1294e:	290e      	cmp	r1, #14
   12950:	f000 8115 	beq.w	12b7e <hci_evt_encode+0x56a>
   12954:	4b0e      	ldr	r3, [pc, #56]	; (12990 <hci_evt_encode+0x37c>)
   12956:	4a0f      	ldr	r2, [pc, #60]	; (12994 <hci_evt_encode+0x380>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   12958:	4813      	ldr	r0, [pc, #76]	; (129a8 <hci_evt_encode+0x394>)
   1295a:	1ad2      	subs	r2, r2, r3
   1295c:	08d2      	lsrs	r2, r2, #3
   1295e:	0192      	lsls	r2, r2, #6
   12960:	f042 0202 	orr.w	r2, r2, #2
}
   12964:	b008      	add	sp, #32
   12966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1296a:	f00f b907 	b.w	21b7c <log_1>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1296e:	460b      	mov	r3, r1
   12970:	4632      	mov	r2, r6
   12972:	4601      	mov	r1, r0
   12974:	2000      	movs	r0, #0
}
   12976:	b008      	add	sp, #32
   12978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1297c:	f7fe bf82 	b.w	11884 <le_remote_feat_complete>
   12980:	200001a8 	.word	0x200001a8
   12984:	200001b0 	.word	0x200001b0
   12988:	2000d990 	.word	0x2000d990
   1298c:	2000ab18 	.word	0x2000ab18
   12990:	00026fc8 	.word	0x00026fc8
   12994:	00027008 	.word	0x00027008
   12998:	00027ca0 	.word	0x00027ca0
   1299c:	00027c64 	.word	0x00027c64
   129a0:	00027b4c 	.word	0x00027b4c
   129a4:	00027ab4 	.word	0x00027ab4
   129a8:	00027ccc 	.word	0x00027ccc
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   129ac:	4b89      	ldr	r3, [pc, #548]	; (12bd4 <hci_evt_encode+0x5c0>)
   129ae:	681b      	ldr	r3, [r3, #0]
   129b0:	061f      	lsls	r7, r3, #24
   129b2:	f57f aebd 	bpl.w	12730 <hci_evt_encode+0x11c>
   129b6:	3508      	adds	r5, #8
   129b8:	2102      	movs	r1, #2
   129ba:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   129bc:	f894 4020 	ldrb.w	r4, [r4, #32]
   129c0:	f013 f92f 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   129c4:	2308      	movs	r3, #8
	hdr->len = len;
   129c6:	2104      	movs	r1, #4
	hdr->evt = evt;
   129c8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   129ca:	7041      	strb	r1, [r0, #1]
   129cc:	4628      	mov	r0, r5
   129ce:	f013 f928 	bl	25c22 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   129d2:	fab4 f384 	clz	r3, r4
   129d6:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   129d8:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   129da:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   129de:	70c3      	strb	r3, [r0, #3]
   129e0:	e6a6      	b.n	12730 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   129e2:	4b7c      	ldr	r3, [pc, #496]	; (12bd4 <hci_evt_encode+0x5c0>)
   129e4:	685b      	ldr	r3, [r3, #4]
   129e6:	0098      	lsls	r0, r3, #2
   129e8:	d571      	bpl.n	12ace <hci_evt_encode+0x4ba>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   129ea:	4b7b      	ldr	r3, [pc, #492]	; (12bd8 <hci_evt_encode+0x5c4>)
   129ec:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   129ee:	0699      	lsls	r1, r3, #26
   129f0:	d56d      	bpl.n	12ace <hci_evt_encode+0x4ba>
   129f2:	3508      	adds	r5, #8
   129f4:	2102      	movs	r1, #2
   129f6:	4628      	mov	r0, r5
   129f8:	f013 f913 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   129fc:	233e      	movs	r3, #62	; 0x3e
   129fe:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12a00:	230b      	movs	r3, #11
   12a02:	7043      	strb	r3, [r0, #1]
   12a04:	2101      	movs	r1, #1
   12a06:	4628      	mov	r0, r5
   12a08:	f013 f90b 	bl	25c22 <net_buf_simple_add>
	me->subevent = subevt;
   12a0c:	2306      	movs	r3, #6
   12a0e:	7003      	strb	r3, [r0, #0]
   12a10:	210a      	movs	r1, #10
   12a12:	4628      	mov	r0, r5
   12a14:	f013 f905 	bl	25c22 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   12a18:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   12a1a:	8c23      	ldrh	r3, [r4, #32]
   12a1c:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   12a1e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12a20:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   12a22:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   12a24:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   12a26:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   12a28:	8103      	strh	r3, [r0, #8]
   12a2a:	e681      	b.n	12730 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12a2c:	4b69      	ldr	r3, [pc, #420]	; (12bd4 <hci_evt_encode+0x5c0>)
   12a2e:	685b      	ldr	r3, [r3, #4]
   12a30:	0099      	lsls	r1, r3, #2
   12a32:	f57f ae7d 	bpl.w	12730 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   12a36:	4b68      	ldr	r3, [pc, #416]	; (12bd8 <hci_evt_encode+0x5c4>)
   12a38:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12a3a:	06da      	lsls	r2, r3, #27
   12a3c:	f57f ae78 	bpl.w	12730 <hci_evt_encode+0x11c>
   12a40:	3508      	adds	r5, #8
   12a42:	2102      	movs	r1, #2
   12a44:	4628      	mov	r0, r5
   12a46:	f013 f8ec 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   12a4a:	233e      	movs	r3, #62	; 0x3e
   12a4c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12a4e:	230d      	movs	r3, #13
   12a50:	7043      	strb	r3, [r0, #1]
   12a52:	2101      	movs	r1, #1
   12a54:	4628      	mov	r0, r5
   12a56:	f013 f8e4 	bl	25c22 <net_buf_simple_add>
	me->subevent = subevt;
   12a5a:	2305      	movs	r3, #5
   12a5c:	7003      	strb	r3, [r0, #0]
   12a5e:	210c      	movs	r1, #12
   12a60:	4628      	mov	r0, r5
   12a62:	f013 f8de 	bl	25c22 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12a66:	f104 0120 	add.w	r1, r4, #32
   12a6a:	4605      	mov	r5, r0
   12a6c:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   12a6e:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   12a72:	f011 f882 	bl	23b7a <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   12a76:	2202      	movs	r2, #2
   12a78:	f104 0128 	add.w	r1, r4, #40	; 0x28
   12a7c:	f105 000a 	add.w	r0, r5, #10
}
   12a80:	b008      	add	sp, #32
   12a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   12a86:	f011 b878 	b.w	23b7a <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   12a8a:	4b52      	ldr	r3, [pc, #328]	; (12bd4 <hci_evt_encode+0x5c0>)
   12a8c:	681b      	ldr	r3, [r3, #0]
   12a8e:	061b      	lsls	r3, r3, #24
   12a90:	f04f 0400 	mov.w	r4, #0
   12a94:	f57f ae4c 	bpl.w	12730 <hci_evt_encode+0x11c>
   12a98:	3508      	adds	r5, #8
   12a9a:	2102      	movs	r1, #2
   12a9c:	4628      	mov	r0, r5
   12a9e:	f013 f8c0 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   12aa2:	2308      	movs	r3, #8
	hdr->len = len;
   12aa4:	2104      	movs	r1, #4
	hdr->evt = evt;
   12aa6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12aa8:	7041      	strb	r1, [r0, #1]
   12aaa:	4628      	mov	r0, r5
   12aac:	f013 f8b9 	bl	25c22 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   12ab0:	2301      	movs	r3, #1
	ep->status = err;
   12ab2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12ab4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   12ab8:	70c3      	strb	r3, [r0, #3]
   12aba:	e639      	b.n	12730 <hci_evt_encode+0x11c>
		ll_rl_crpa_set(cc->peer_addr_type,
   12abc:	7fa0      	ldrb	r0, [r4, #30]
   12abe:	f104 0325 	add.w	r3, r4, #37	; 0x25
   12ac2:	22ff      	movs	r2, #255	; 0xff
   12ac4:	f104 011f 	add.w	r1, r4, #31
   12ac8:	f006 fe16 	bl	196f8 <ll_rl_crpa_set>
   12acc:	e5dd      	b.n	1268a <hci_evt_encode+0x76>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   12ace:	2300      	movs	r3, #0
   12ad0:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12ad4:	9300      	str	r3, [sp, #0]
   12ad6:	221a      	movs	r2, #26
   12ad8:	2102      	movs	r1, #2
   12ada:	4630      	mov	r0, r6
   12adc:	f002 fc40 	bl	15360 <ll_conn_update>
		return;
   12ae0:	e626      	b.n	12730 <hci_evt_encode+0x11c>
   12ae2:	3508      	adds	r5, #8
   12ae4:	2102      	movs	r1, #2
   12ae6:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   12ae8:	f1b8 0f00 	cmp.w	r8, #0
   12aec:	d14c      	bne.n	12b88 <hci_evt_encode+0x574>
   12aee:	f013 f898 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   12af2:	233e      	movs	r3, #62	; 0x3e
   12af4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12af6:	2313      	movs	r3, #19
   12af8:	7043      	strb	r3, [r0, #1]
   12afa:	2101      	movs	r1, #1
   12afc:	4628      	mov	r0, r5
   12afe:	f013 f890 	bl	25c22 <net_buf_simple_add>
	me->subevent = subevt;
   12b02:	2301      	movs	r3, #1
   12b04:	7003      	strb	r3, [r0, #0]
   12b06:	2112      	movs	r1, #18
   12b08:	4628      	mov	r0, r5
   12b0a:	f013 f88a 	bl	25c22 <net_buf_simple_add>
   12b0e:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   12b10:	2212      	movs	r2, #18
   12b12:	4641      	mov	r1, r8
   12b14:	f011 f85c 	bl	23bd0 <memset>
		lecc->status = status;
   12b18:	7027      	strb	r7, [r4, #0]
		return;
   12b1a:	e609      	b.n	12730 <hci_evt_encode+0x11c>
   12b1c:	3508      	adds	r5, #8
   12b1e:	2102      	movs	r1, #2
   12b20:	4628      	mov	r0, r5
   12b22:	f013 f87e 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   12b26:	233e      	movs	r3, #62	; 0x3e
   12b28:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12b2a:	2313      	movs	r3, #19
   12b2c:	7043      	strb	r3, [r0, #1]
   12b2e:	2101      	movs	r1, #1
   12b30:	4628      	mov	r0, r5
   12b32:	f013 f876 	bl	25c22 <net_buf_simple_add>
   12b36:	4603      	mov	r3, r0
	me->subevent = subevt;
   12b38:	2201      	movs	r2, #1
   12b3a:	701a      	strb	r2, [r3, #0]
   12b3c:	4628      	mov	r0, r5
   12b3e:	2112      	movs	r1, #18
   12b40:	f013 f86f 	bl	25c22 <net_buf_simple_add>
	lecc->status = 0x00;
   12b44:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   12b46:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   12b4a:	7f63      	ldrb	r3, [r4, #29]
   12b4c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   12b4e:	7fa3      	ldrb	r3, [r4, #30]
   12b50:	f003 0301 	and.w	r3, r3, #1
   12b54:	4605      	mov	r5, r0
   12b56:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   12b58:	2206      	movs	r2, #6
   12b5a:	f104 011f 	add.w	r1, r4, #31
   12b5e:	3005      	adds	r0, #5
   12b60:	f011 f80b 	bl	23b7a <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12b64:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   12b66:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   12b68:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   12b6a:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   12b6e:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12b72:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   12b76:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12b7a:	746b      	strb	r3, [r5, #17]
   12b7c:	e5d8      	b.n	12730 <hci_evt_encode+0x11c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   12b7e:	462b      	mov	r3, r5
   12b80:	4632      	mov	r2, r6
   12b82:	2100      	movs	r1, #0
   12b84:	201a      	movs	r0, #26
   12b86:	e6f6      	b.n	12976 <hci_evt_encode+0x362>
   12b88:	f013 f84b 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   12b8c:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   12b8e:	231f      	movs	r3, #31
	hdr->evt = evt;
   12b90:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   12b92:	7043      	strb	r3, [r0, #1]
   12b94:	2101      	movs	r1, #1
   12b96:	4628      	mov	r0, r5
   12b98:	f013 f843 	bl	25c22 <net_buf_simple_add>
	me->subevent = subevt;
   12b9c:	230a      	movs	r3, #10
   12b9e:	7003      	strb	r3, [r0, #0]
   12ba0:	211e      	movs	r1, #30
   12ba2:	4628      	mov	r0, r5
   12ba4:	f013 f83d 	bl	25c22 <net_buf_simple_add>
   12ba8:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   12baa:	221e      	movs	r2, #30
   12bac:	2100      	movs	r1, #0
   12bae:	f011 f80f 	bl	23bd0 <memset>
			leecc->status = status;
   12bb2:	7027      	strb	r7, [r4, #0]
			return;
   12bb4:	e5bc      	b.n	12730 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   12bb6:	4a09      	ldr	r2, [pc, #36]	; (12bdc <hci_evt_encode+0x5c8>)
   12bb8:	4909      	ldr	r1, [pc, #36]	; (12be0 <hci_evt_encode+0x5cc>)
   12bba:	480a      	ldr	r0, [pc, #40]	; (12be4 <hci_evt_encode+0x5d0>)
   12bbc:	f241 6385 	movw	r3, #5765	; 0x1685
   12bc0:	f00e fb68 	bl	21294 <printk>
   12bc4:	4040      	eors	r0, r0
   12bc6:	f380 8811 	msr	BASEPRI, r0
   12bca:	f04f 0003 	mov.w	r0, #3
   12bce:	df02      	svc	2
		return;
   12bd0:	e5ae      	b.n	12730 <hci_evt_encode+0x11c>
   12bd2:	bf00      	nop
   12bd4:	200001a8 	.word	0x200001a8
   12bd8:	200001b0 	.word	0x200001b0
   12bdc:	00027c64 	.word	0x00027c64
   12be0:	00027b4c 	.word	0x00027b4c
   12be4:	00027ab4 	.word	0x00027ab4

00012be8 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   12be8:	b570      	push	{r4, r5, r6, lr}
   12bea:	f100 0408 	add.w	r4, r0, #8
   12bee:	460e      	mov	r6, r1
   12bf0:	4620      	mov	r0, r4
   12bf2:	2102      	movs	r1, #2
   12bf4:	4615      	mov	r5, r2
   12bf6:	f013 f814 	bl	25c22 <net_buf_simple_add>
	hdr->evt = evt;
   12bfa:	2313      	movs	r3, #19
	hdr->len = len;
   12bfc:	2105      	movs	r1, #5
	hdr->evt = evt;
   12bfe:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12c00:	7041      	strb	r1, [r0, #1]
   12c02:	4620      	mov	r0, r4
   12c04:	f013 f80d 	bl	25c22 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   12c08:	2301      	movs	r3, #1
   12c0a:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   12c0c:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   12c10:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   12c14:	bd70      	pop	{r4, r5, r6, pc}
   12c16:	bf00      	nop

00012c18 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12c18:	7903      	ldrb	r3, [r0, #4]
   12c1a:	2b03      	cmp	r3, #3
   12c1c:	d009      	beq.n	12c32 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   12c1e:	2b13      	cmp	r3, #19
   12c20:	d005      	beq.n	12c2e <hci_get_class+0x16>
   12c22:	3b14      	subs	r3, #20
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   12c24:	2b05      	cmp	r3, #5
   12c26:	bf94      	ite	ls
   12c28:	2003      	movls	r0, #3
   12c2a:	2000      	movhi	r0, #0
   12c2c:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   12c2e:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   12c30:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   12c32:	7f03      	ldrb	r3, [r0, #28]
   12c34:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   12c38:	2b03      	cmp	r3, #3
   12c3a:	bf0c      	ite	eq
   12c3c:	2004      	moveq	r0, #4
   12c3e:	2005      	movne	r0, #5
   12c40:	4770      	bx	lr
   12c42:	bf00      	nop

00012c44 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   12c44:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   12c46:	4b0b      	ldr	r3, [pc, #44]	; (12c74 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12c48:	490b      	ldr	r1, [pc, #44]	; (12c78 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12c4a:	4a0c      	ldr	r2, [pc, #48]	; (12c7c <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
   12c4c:	f04f 34ff 	mov.w	r4, #4294967295
   12c50:	f641 75ff 	movw	r5, #8191	; 0x1fff
   12c54:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12c58:	2400      	movs	r4, #0
   12c5a:	2500      	movs	r5, #0
   12c5c:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   12c60:	4b07      	ldr	r3, [pc, #28]	; (12c80 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12c62:	201f      	movs	r0, #31
   12c64:	2100      	movs	r1, #0
   12c66:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   12c6a:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   12c6c:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   12c6e:	601a      	str	r2, [r3, #0]
}
   12c70:	4770      	bx	lr
   12c72:	bf00      	nop
   12c74:	200001a8 	.word	0x200001a8
   12c78:	2000ab18 	.word	0x2000ab18
   12c7c:	200001b0 	.word	0x200001b0
   12c80:	2000d990 	.word	0x2000d990

00012c84 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   12c84:	f007 bc72 	b.w	1a56c <lll_csrand_get>

00012c88 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   12c88:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   12c8a:	2300      	movs	r3, #0
   12c8c:	f009 f96e 	bl	1bf6c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   12c90:	2000      	movs	r0, #0
   12c92:	bd08      	pop	{r3, pc}

00012c94 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   12c94:	b510      	push	{r4, lr}
   12c96:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   12c98:	f007 fc9e 	bl	1a5d8 <lll_reset>
	LL_ASSERT(!err);
   12c9c:	b950      	cbnz	r0, 12cb4 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   12c9e:	f007 ffc9 	bl	1ac34 <lll_adv_reset>
	LL_ASSERT(!err);
   12ca2:	b9c0      	cbnz	r0, 12cd6 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   12ca4:	f008 fc5c 	bl	1b560 <lll_conn_reset>
	LL_ASSERT(!err);
   12ca8:	bb30      	cbnz	r0, 12cf8 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   12caa:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   12cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12cb0:	f00c bf90 	b.w	1fbd4 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   12cb4:	4a19      	ldr	r2, [pc, #100]	; (12d1c <perform_lll_reset+0x88>)
   12cb6:	491a      	ldr	r1, [pc, #104]	; (12d20 <perform_lll_reset+0x8c>)
   12cb8:	481a      	ldr	r0, [pc, #104]	; (12d24 <perform_lll_reset+0x90>)
   12cba:	f240 637c 	movw	r3, #1660	; 0x67c
   12cbe:	f00e fae9 	bl	21294 <printk>
   12cc2:	4040      	eors	r0, r0
   12cc4:	f380 8811 	msr	BASEPRI, r0
   12cc8:	f04f 0003 	mov.w	r0, #3
   12ccc:	df02      	svc	2
	err = lll_adv_reset();
   12cce:	f007 ffb1 	bl	1ac34 <lll_adv_reset>
	LL_ASSERT(!err);
   12cd2:	2800      	cmp	r0, #0
   12cd4:	d0e6      	beq.n	12ca4 <perform_lll_reset+0x10>
   12cd6:	4a11      	ldr	r2, [pc, #68]	; (12d1c <perform_lll_reset+0x88>)
   12cd8:	4911      	ldr	r1, [pc, #68]	; (12d20 <perform_lll_reset+0x8c>)
   12cda:	4812      	ldr	r0, [pc, #72]	; (12d24 <perform_lll_reset+0x90>)
   12cdc:	f240 6381 	movw	r3, #1665	; 0x681
   12ce0:	f00e fad8 	bl	21294 <printk>
   12ce4:	4040      	eors	r0, r0
   12ce6:	f380 8811 	msr	BASEPRI, r0
   12cea:	f04f 0003 	mov.w	r0, #3
   12cee:	df02      	svc	2
	err = lll_conn_reset();
   12cf0:	f008 fc36 	bl	1b560 <lll_conn_reset>
	LL_ASSERT(!err);
   12cf4:	2800      	cmp	r0, #0
   12cf6:	d0d8      	beq.n	12caa <perform_lll_reset+0x16>
   12cf8:	4a08      	ldr	r2, [pc, #32]	; (12d1c <perform_lll_reset+0x88>)
   12cfa:	4909      	ldr	r1, [pc, #36]	; (12d20 <perform_lll_reset+0x8c>)
   12cfc:	4809      	ldr	r0, [pc, #36]	; (12d24 <perform_lll_reset+0x90>)
   12cfe:	f240 638d 	movw	r3, #1677	; 0x68d
   12d02:	f00e fac7 	bl	21294 <printk>
   12d06:	4040      	eors	r0, r0
   12d08:	f380 8811 	msr	BASEPRI, r0
   12d0c:	f04f 0003 	mov.w	r0, #3
   12d10:	df02      	svc	2
   12d12:	4620      	mov	r0, r4
}
   12d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12d18:	f00c bf5c 	b.w	1fbd4 <z_impl_k_sem_give>
   12d1c:	00027cf8 	.word	0x00027cf8
   12d20:	00027d34 	.word	0x00027d34
   12d24:	00027ab4 	.word	0x00027ab4

00012d28 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   12d28:	6008      	str	r0, [r1, #0]
   12d2a:	4801      	ldr	r0, [pc, #4]	; (12d30 <ull_ticker_status_give+0x8>)
   12d2c:	f00c bf52 	b.w	1fbd4 <z_impl_k_sem_give>
   12d30:	2000dd80 	.word	0x2000dd80

00012d34 <disabled_cb>:
   12d34:	f00c bf4e 	b.w	1fbd4 <z_impl_k_sem_give>

00012d38 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   12d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   12d3c:	4e2f      	ldr	r6, [pc, #188]	; (12dfc <tx_cmplt_get+0xc4>)
{
   12d3e:	460c      	mov	r4, r1
   12d40:	4691      	mov	r9, r2
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   12d42:	7823      	ldrb	r3, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   12d44:	7872      	ldrb	r2, [r6, #1]
   12d46:	7831      	ldrb	r1, [r6, #0]
   12d48:	429a      	cmp	r2, r3
   12d4a:	bf9c      	itt	ls
   12d4c:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   12d4e:	7023      	strbls	r3, [r4, #0]
	}

	if (*idx == last) {
   12d50:	4599      	cmp	r9, r3
{
   12d52:	4682      	mov	sl, r0
   12d54:	d049      	beq.n	12dea <tx_cmplt_get+0xb2>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   12d56:	fb13 f101 	smulbb	r1, r3, r1
   12d5a:	4d29      	ldr	r5, [pc, #164]	; (12e00 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   12d5c:	3301      	adds	r3, #1
   12d5e:	b2db      	uxtb	r3, r3
		i = 0U;
   12d60:	429a      	cmp	r2, r3
   12d62:	bf08      	it	eq
   12d64:	2300      	moveq	r3, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   12d66:	186a      	adds	r2, r5, r1

	*idx = i;
   12d68:	7023      	strb	r3, [r4, #0]
   12d6a:	d03e      	beq.n	12dea <tx_cmplt_get+0xb2>
		return 0;
	}

	*handle = tx->handle;
   12d6c:	5a6b      	ldrh	r3, [r5, r1]
   12d6e:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   12d70:	2700      	movs	r7, #0
   12d72:	f04f 0802 	mov.w	r8, #2
   12d76:	f04f 0b01 	mov.w	fp, #1
   12d7a:	e022      	b.n	12dc2 <tx_cmplt_get+0x8a>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
   12d7c:	3701      	adds	r7, #1
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
   12d7e:	f030 0303 	bics.w	r3, r0, #3
   12d82:	f8c2 b004 	str.w	fp, [r2, #4]
			cmplt++;
   12d86:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   12d88:	d129      	bne.n	12dde <tx_cmplt_get+0xa6>
	if (*idx >= count) {
   12d8a:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   12d8c:	7872      	ldrb	r2, [r6, #1]
   12d8e:	7831      	ldrb	r1, [r6, #0]
   12d90:	429a      	cmp	r2, r3
   12d92:	bf9c      	itt	ls
   12d94:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   12d96:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   12d98:	454b      	cmp	r3, r9
   12d9a:	d027      	beq.n	12dec <tx_cmplt_get+0xb4>
	i = *idx + 1;
   12d9c:	f103 0c01 	add.w	ip, r3, #1
   12da0:	fa5f fc8c 	uxtb.w	ip, ip
	p = (void *)(fifo + (*idx) * size);
   12da4:	fb13 f301 	smulbb	r3, r3, r1
		i = 0U;
   12da8:	4562      	cmp	r2, ip
   12daa:	bf08      	it	eq
   12dac:	f04f 0c00 	moveq.w	ip, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   12db0:	18ea      	adds	r2, r5, r3
	*idx = i;
   12db2:	f884 c000 	strb.w	ip, [r4]
   12db6:	d019      	beq.n	12dec <tx_cmplt_get+0xb4>
   12db8:	5ae9      	ldrh	r1, [r5, r3]
   12dba:	f8ba 3000 	ldrh.w	r3, [sl]
   12dbe:	4299      	cmp	r1, r3
   12dc0:	d114      	bne.n	12dec <tx_cmplt_get+0xb4>
		node_tx = tx->node;
   12dc2:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   12dc4:	2801      	cmp	r0, #1
   12dc6:	d9d9      	bls.n	12d7c <tx_cmplt_get+0x44>
   12dc8:	f030 0303 	bics.w	r3, r0, #3
   12dcc:	d00a      	beq.n	12de4 <tx_cmplt_get+0xac>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   12dce:	7903      	ldrb	r3, [r0, #4]
   12dd0:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   12dd4:	3b01      	subs	r3, #1
   12dd6:	2b01      	cmp	r3, #1
   12dd8:	d90b      	bls.n	12df2 <tx_cmplt_get+0xba>
   12dda:	f8c2 8004 	str.w	r8, [r2, #4]
			ll_tx_mem_release(node_tx);
   12dde:	f002 fa6d 	bl	152bc <ll_tx_mem_release>
   12de2:	e7d2      	b.n	12d8a <tx_cmplt_get+0x52>
   12de4:	f8c2 8004 	str.w	r8, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   12de8:	e7cf      	b.n	12d8a <tx_cmplt_get+0x52>
		return 0;
   12dea:	2700      	movs	r7, #0

	return cmplt;
}
   12dec:	4638      	mov	r0, r7
   12dee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   12df2:	3701      	adds	r7, #1
   12df4:	f8c2 b004 	str.w	fp, [r2, #4]
   12df8:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   12dfa:	e7f0      	b.n	12dde <tx_cmplt_get+0xa6>
   12dfc:	200004d8 	.word	0x200004d8
   12e00:	200004dc 	.word	0x200004dc

00012e04 <rx_alloc>:
{
   12e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   12e08:	4e37      	ldr	r6, [pc, #220]	; (12ee8 <rx_alloc+0xe4>)
   12e0a:	7833      	ldrb	r3, [r6, #0]
   12e0c:	4298      	cmp	r0, r3
   12e0e:	bf28      	it	cs
   12e10:	4618      	movcs	r0, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12e12:	b380      	cbz	r0, 12e76 <rx_alloc+0x72>
   12e14:	4d35      	ldr	r5, [pc, #212]	; (12eec <rx_alloc+0xe8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   12e16:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 12ef0 <rx_alloc+0xec>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12e1a:	78ec      	ldrb	r4, [r5, #3]
   12e1c:	f100 39ff 	add.w	r9, r0, #4294967295
   12e20:	fa5f f989 	uxtb.w	r9, r9
		link = mem_acquire(&mem_link_rx.free);
   12e24:	1d37      	adds	r7, r6, #4
	if (last == count) {
   12e26:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12e28:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   12e2a:	3401      	adds	r4, #1
   12e2c:	b2e4      	uxtb	r4, r4
		last = 0U;
   12e2e:	42a2      	cmp	r2, r4
   12e30:	bf08      	it	eq
   12e32:	2400      	moveq	r4, #0
	if (last == first) {
   12e34:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   12e36:	4638      	mov	r0, r7
   12e38:	d04b      	beq.n	12ed2 <rx_alloc+0xce>
   12e3a:	f7fd f825 	bl	fe88 <mem_acquire>
   12e3e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12e40:	4640      	mov	r0, r8
		if (!link) {
   12e42:	f1ba 0f00 	cmp.w	sl, #0
   12e46:	d042      	beq.n	12ece <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   12e48:	f7fd f81e 	bl	fe88 <mem_acquire>
		if (!rx) {
   12e4c:	2800      	cmp	r0, #0
   12e4e:	d045      	beq.n	12edc <rx_alloc+0xd8>
		rx->link = link;
   12e50:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12e54:	78ea      	ldrb	r2, [r5, #3]
   12e56:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12e58:	fb02 5303 	mla	r3, r2, r3, r5
   12e5c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   12e5e:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   12e60:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12e62:	f109 39ff 	add.w	r9, r9, #4294967295
	mem_link_rx.quota_pdu += delta;
   12e66:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12e68:	fa5f f989 	uxtb.w	r9, r9
	mem_link_rx.quota_pdu += delta;
   12e6c:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12e6e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   12e72:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12e74:	d1d7      	bne.n	12e26 <rx_alloc+0x22>
	while (mem_link_rx.quota_pdu &&
   12e76:	b353      	cbz	r3, 12ece <rx_alloc+0xca>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   12e78:	4d1e      	ldr	r5, [pc, #120]	; (12ef4 <rx_alloc+0xf0>)
		link = mem_acquire(&mem_link_rx.free);
   12e7a:	4f1f      	ldr	r7, [pc, #124]	; (12ef8 <rx_alloc+0xf4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   12e7c:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   12e7e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 12ef0 <rx_alloc+0xec>
		link->mem = NULL;
   12e82:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   12e86:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   12e88:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   12e8a:	3401      	adds	r4, #1
   12e8c:	b2e4      	uxtb	r4, r4
		last = 0U;
   12e8e:	42a2      	cmp	r2, r4
   12e90:	bf08      	it	eq
   12e92:	2400      	moveq	r4, #0
	if (last == first) {
   12e94:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12e96:	4638      	mov	r0, r7
   12e98:	d019      	beq.n	12ece <rx_alloc+0xca>
   12e9a:	f7fc fff5 	bl	fe88 <mem_acquire>
   12e9e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12ea0:	4640      	mov	r0, r8
		if (!link) {
   12ea2:	f1ba 0f00 	cmp.w	sl, #0
   12ea6:	d012      	beq.n	12ece <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   12ea8:	f7fc ffee 	bl	fe88 <mem_acquire>
		if (!rx) {
   12eac:	b1b0      	cbz	r0, 12edc <rx_alloc+0xd8>
		link->mem = NULL;
   12eae:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   12eb2:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12eb6:	78ea      	ldrb	r2, [r5, #3]
   12eb8:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12eba:	fb02 5303 	mla	r3, r2, r3, r5
   12ebe:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   12ec0:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   12ec2:	70ec      	strb	r4, [r5, #3]
   12ec4:	3b01      	subs	r3, #1
   12ec6:	b2db      	uxtb	r3, r3
   12ec8:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   12eca:	2b00      	cmp	r3, #0
   12ecc:	d1db      	bne.n	12e86 <rx_alloc+0x82>
}
   12ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!max) {
   12ed2:	f1b9 0f00 	cmp.w	r9, #0
   12ed6:	d0fa      	beq.n	12ece <rx_alloc+0xca>
	while (mem_link_rx.quota_pdu &&
   12ed8:	7833      	ldrb	r3, [r6, #0]
   12eda:	e7cc      	b.n	12e76 <rx_alloc+0x72>
			mem_release(link, &mem_link_rx.free);
   12edc:	4650      	mov	r0, sl
   12ede:	4906      	ldr	r1, [pc, #24]	; (12ef8 <rx_alloc+0xf4>)
}
   12ee0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   12ee4:	f7fc bfea 	b.w	febc <mem_release>
   12ee8:	2000da80 	.word	0x2000da80
   12eec:	2000039c 	.word	0x2000039c
   12ef0:	2000dae0 	.word	0x2000dae0
   12ef4:	20000388 	.word	0x20000388
   12ef8:	2000da84 	.word	0x2000da84

00012efc <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12efc:	4b3a      	ldr	r3, [pc, #232]	; (12fe8 <init_reset+0xec>)
{
   12efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12f02:	1d18      	adds	r0, r3, #4
   12f04:	2203      	movs	r2, #3
   12f06:	2134      	movs	r1, #52	; 0x34
   12f08:	f7fc ff8e 	bl	fe28 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   12f0c:	4b37      	ldr	r3, [pc, #220]	; (12fec <init_reset+0xf0>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12f0e:	4d38      	ldr	r5, [pc, #224]	; (12ff0 <init_reset+0xf4>)
		link = mem_acquire(&mem_link_done.free);
   12f10:	4f36      	ldr	r7, [pc, #216]	; (12fec <init_reset+0xf0>)
		rx = mem_acquire(&mem_done.free);
   12f12:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 12fe8 <init_reset+0xec>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   12f16:	2203      	movs	r2, #3
   12f18:	2108      	movs	r1, #8
   12f1a:	1d18      	adds	r0, r3, #4
   12f1c:	f7fc ff84 	bl	fe28 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12f20:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   12f22:	786a      	ldrb	r2, [r5, #1]
   12f24:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   12f26:	3401      	adds	r4, #1
   12f28:	b2e4      	uxtb	r4, r4
		last = 0U;
   12f2a:	42a2      	cmp	r2, r4
   12f2c:	bf08      	it	eq
   12f2e:	2400      	moveq	r4, #0
	if (last == first) {
   12f30:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   12f32:	4638      	mov	r0, r7
   12f34:	d013      	beq.n	12f5e <init_reset+0x62>
   12f36:	f7fc ffa7 	bl	fe88 <mem_acquire>
   12f3a:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   12f3c:	4640      	mov	r0, r8
		if (!link) {
   12f3e:	b176      	cbz	r6, 12f5e <init_reset+0x62>
		rx = mem_acquire(&mem_done.free);
   12f40:	f7fc ffa2 	bl	fe88 <mem_acquire>
		if (!rx) {
   12f44:	b138      	cbz	r0, 12f56 <init_reset+0x5a>
		rx->link = link;
   12f46:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12f48:	78ea      	ldrb	r2, [r5, #3]
   12f4a:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12f4c:	fb02 5303 	mla	r3, r2, r3, r5
   12f50:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   12f52:	70ec      	strb	r4, [r5, #3]
}
   12f54:	e7e5      	b.n	12f22 <init_reset+0x26>
			mem_release(link, &mem_link_done.free);
   12f56:	4925      	ldr	r1, [pc, #148]	; (12fec <init_reset+0xf0>)
   12f58:	4630      	mov	r0, r6
   12f5a:	f7fc ffaf 	bl	febc <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   12f5e:	4b25      	ldr	r3, [pc, #148]	; (12ff4 <init_reset+0xf8>)
   12f60:	2209      	movs	r2, #9
   12f62:	1d18      	adds	r0, r3, #4
   12f64:	2148      	movs	r1, #72	; 0x48
   12f66:	f7fc ff5f 	bl	fe28 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   12f6a:	4b23      	ldr	r3, [pc, #140]	; (12ff8 <init_reset+0xfc>)
   12f6c:	220b      	movs	r2, #11
   12f6e:	1d18      	adds	r0, r3, #4
   12f70:	2108      	movs	r1, #8
   12f72:	f7fc ff59 	bl	fe28 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   12f76:	4820      	ldr	r0, [pc, #128]	; (12ff8 <init_reset+0xfc>)
   12f78:	f7fc ff86 	bl	fe88 <mem_acquire>
	LL_ASSERT(link);
   12f7c:	4604      	mov	r4, r0
   12f7e:	b1b8      	cbz	r0, 12fb0 <init_reset+0xb4>
	MEMQ_INIT(ull_rx, link);
   12f80:	4a1e      	ldr	r2, [pc, #120]	; (12ffc <init_reset+0x100>)
   12f82:	4620      	mov	r0, r4
   12f84:	1f11      	subs	r1, r2, #4
   12f86:	f7fc ffd5 	bl	ff34 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   12f8a:	481b      	ldr	r0, [pc, #108]	; (12ff8 <init_reset+0xfc>)
   12f8c:	f7fc ff7c 	bl	fe88 <mem_acquire>
	LL_ASSERT(link);
   12f90:	4604      	mov	r4, r0
   12f92:	b1d8      	cbz	r0, 12fcc <init_reset+0xd0>
	MEMQ_INIT(ll_rx, link);
   12f94:	4a1a      	ldr	r2, [pc, #104]	; (13000 <init_reset+0x104>)
   12f96:	4620      	mov	r0, r4
   12f98:	1f11      	subs	r1, r2, #4
   12f9a:	f7fc ffcb 	bl	ff34 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   12f9e:	4b19      	ldr	r3, [pc, #100]	; (13004 <init_reset+0x108>)
   12fa0:	2207      	movs	r2, #7
	rx_alloc(UINT8_MAX);
   12fa2:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   12fa4:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   12fa6:	f7ff ff2d 	bl	12e04 <rx_alloc>
}
   12faa:	2000      	movs	r0, #0
   12fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(link);
   12fb0:	4a15      	ldr	r2, [pc, #84]	; (13008 <init_reset+0x10c>)
   12fb2:	4916      	ldr	r1, [pc, #88]	; (1300c <init_reset+0x110>)
   12fb4:	4816      	ldr	r0, [pc, #88]	; (13010 <init_reset+0x114>)
   12fb6:	f240 6363 	movw	r3, #1635	; 0x663
   12fba:	f00e f96b 	bl	21294 <printk>
   12fbe:	4040      	eors	r0, r0
   12fc0:	f380 8811 	msr	BASEPRI, r0
   12fc4:	f04f 0003 	mov.w	r0, #3
   12fc8:	df02      	svc	2
   12fca:	e7d9      	b.n	12f80 <init_reset+0x84>
	LL_ASSERT(link);
   12fcc:	4a0e      	ldr	r2, [pc, #56]	; (13008 <init_reset+0x10c>)
   12fce:	490f      	ldr	r1, [pc, #60]	; (1300c <init_reset+0x110>)
   12fd0:	480f      	ldr	r0, [pc, #60]	; (13010 <init_reset+0x114>)
   12fd2:	f240 636a 	movw	r3, #1642	; 0x66a
   12fd6:	f00e f95d 	bl	21294 <printk>
   12fda:	4040      	eors	r0, r0
   12fdc:	f380 8811 	msr	BASEPRI, r0
   12fe0:	f04f 0003 	mov.w	r0, #3
   12fe4:	df02      	svc	2
   12fe6:	e7d5      	b.n	12f94 <init_reset+0x98>
   12fe8:	2000d9c4 	.word	0x2000d9c4
   12fec:	2000da64 	.word	0x2000da64
   12ff0:	20000374 	.word	0x20000374
   12ff4:	2000dae0 	.word	0x2000dae0
   12ff8:	2000da84 	.word	0x2000da84
   12ffc:	2000dd78 	.word	0x2000dd78
   13000:	2000dd70 	.word	0x2000dd70
   13004:	2000da80 	.word	0x2000da80
   13008:	00027cf8 	.word	0x00027cf8
   1300c:	00027fc0 	.word	0x00027fc0
   13010:	00027ab4 	.word	0x00027ab4

00013014 <rx_demux>:
{
   13014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13018:	4c9e      	ldr	r4, [pc, #632]	; (13294 <rx_demux+0x280>)
	k_sem_give(sem_recv);
   1301a:	4e9f      	ldr	r6, [pc, #636]	; (13298 <rx_demux+0x284>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   1301c:	f8df b27c 	ldr.w	fp, [pc, #636]	; 1329c <rx_demux+0x288>
{
   13020:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   13022:	e9d4 0100 	ldrd	r0, r1, [r4]
   13026:	aa03      	add	r2, sp, #12
   13028:	f7fc ff9c 	bl	ff64 <memq_peek>
		if (link) {
   1302c:	4607      	mov	r7, r0
   1302e:	2800      	cmp	r0, #0
   13030:	d036      	beq.n	130a0 <rx_demux+0x8c>
			LL_ASSERT(rx);
   13032:	9b03      	ldr	r3, [sp, #12]
   13034:	2b00      	cmp	r3, #0
   13036:	f000 811e 	beq.w	13276 <rx_demux+0x262>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1303a:	7818      	ldrb	r0, [r3, #0]
   1303c:	aa04      	add	r2, sp, #16
   1303e:	a902      	add	r1, sp, #8
   13040:	f005 fd34 	bl	18aac <ull_conn_ack_by_last_peek>
			if (link_tx) {
   13044:	4605      	mov	r5, r0
   13046:	2800      	cmp	r0, #0
   13048:	d057      	beq.n	130fa <rx_demux+0xe6>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1304a:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   1304e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   13052:	f891 9000 	ldrb.w	r9, [r1]
   13056:	f8ad 200a 	strh.w	r2, [sp, #10]
   1305a:	f10d 0814 	add.w	r8, sp, #20
   1305e:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   13060:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   13064:	f005 fd3e 	bl	18ae4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   13068:	4629      	mov	r1, r5
   1306a:	9a05      	ldr	r2, [sp, #20]
   1306c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13070:	f005 fd82 	bl	18b78 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   13074:	4628      	mov	r0, r5
   13076:	f005 fcf1 	bl	18a5c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1307a:	4642      	mov	r2, r8
   1307c:	4639      	mov	r1, r7
   1307e:	4648      	mov	r0, r9
   13080:	f005 fd14 	bl	18aac <ull_conn_ack_by_last_peek>
	} while (link);
   13084:	4605      	mov	r5, r0
   13086:	2800      	cmp	r0, #0
   13088:	d1ec      	bne.n	13064 <rx_demux+0x50>
	k_sem_give(sem_recv);
   1308a:	6830      	ldr	r0, [r6, #0]
   1308c:	f00c fda2 	bl	1fbd4 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   13090:	e9d4 0100 	ldrd	r0, r1, [r4]
   13094:	aa03      	add	r2, sp, #12
   13096:	f7fc ff65 	bl	ff64 <memq_peek>
		if (link) {
   1309a:	4607      	mov	r7, r0
   1309c:	2800      	cmp	r0, #0
   1309e:	d1c8      	bne.n	13032 <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   130a0:	aa04      	add	r2, sp, #16
   130a2:	a902      	add	r1, sp, #8
   130a4:	f10d 0007 	add.w	r0, sp, #7
   130a8:	f005 fce4 	bl	18a74 <ull_conn_ack_peek>
			if (link) {
   130ac:	4605      	mov	r5, r0
   130ae:	2800      	cmp	r0, #0
   130b0:	f000 80de 	beq.w	13270 <rx_demux+0x25c>
				rx_demux_conn_tx_ack(ack_last, handle,
   130b4:	9b04      	ldr	r3, [sp, #16]
   130b6:	9305      	str	r3, [sp, #20]
   130b8:	f89d 9007 	ldrb.w	r9, [sp, #7]
   130bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   130c0:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   130c4:	f10d 0814 	add.w	r8, sp, #20
   130c8:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   130cc:	f005 fd0a 	bl	18ae4 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   130d0:	4629      	mov	r1, r5
   130d2:	9a05      	ldr	r2, [sp, #20]
   130d4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   130d8:	f005 fd4e 	bl	18b78 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   130dc:	4628      	mov	r0, r5
   130de:	f005 fcbd 	bl	18a5c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   130e2:	4642      	mov	r2, r8
   130e4:	4639      	mov	r1, r7
   130e6:	4648      	mov	r0, r9
   130e8:	f005 fce0 	bl	18aac <ull_conn_ack_by_last_peek>
	} while (link);
   130ec:	4605      	mov	r5, r0
   130ee:	2800      	cmp	r0, #0
   130f0:	d1ec      	bne.n	130cc <rx_demux+0xb8>
	k_sem_give(sem_recv);
   130f2:	6830      	ldr	r0, [r6, #0]
   130f4:	f00c fd6e 	bl	1fbd4 <z_impl_k_sem_give>
			if (nack) {
   130f8:	e7ca      	b.n	13090 <rx_demux+0x7c>
				nack = rx_demux_rx(link, rx);
   130fa:	9b03      	ldr	r3, [sp, #12]
   130fc:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   130fe:	791b      	ldrb	r3, [r3, #4]
   13100:	3b01      	subs	r3, #1
   13102:	2b13      	cmp	r3, #19
   13104:	d80b      	bhi.n	1311e <rx_demux+0x10a>
   13106:	e8df f003 	tbb	[pc, r3]
   1310a:	2918      	.short	0x2918
   1310c:	0a0a0aad 	.word	0x0a0a0aad
   13110:	0a0a0a0a 	.word	0x0a0a0a0a
   13114:	0a0a0a0a 	.word	0x0a0a0a0a
   13118:	0a0a0a0a 	.word	0x0a0a0a0a
   1311c:	18a3      	.short	0x18a3
		LL_ASSERT(0);
   1311e:	4a60      	ldr	r2, [pc, #384]	; (132a0 <rx_demux+0x28c>)
   13120:	4960      	ldr	r1, [pc, #384]	; (132a4 <rx_demux+0x290>)
   13122:	4861      	ldr	r0, [pc, #388]	; (132a8 <rx_demux+0x294>)
   13124:	f640 0334 	movw	r3, #2100	; 0x834
   13128:	f00e f8b4 	bl	21294 <printk>
   1312c:	4040      	eors	r0, r0
   1312e:	f380 8811 	msr	BASEPRI, r0
   13132:	f04f 0003 	mov.w	r0, #3
   13136:	df02      	svc	2
			if (nack) {
   13138:	e773      	b.n	13022 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1313a:	4956      	ldr	r1, [pc, #344]	; (13294 <rx_demux+0x280>)
   1313c:	6860      	ldr	r0, [r4, #4]
   1313e:	2200      	movs	r2, #0
   13140:	f7fc ff18 	bl	ff74 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13144:	4b59      	ldr	r3, [pc, #356]	; (132ac <rx_demux+0x298>)
		ll_rx_put(link, rx);
   13146:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13148:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1314a:	4638      	mov	r0, r7
   1314c:	4a58      	ldr	r2, [pc, #352]	; (132b0 <rx_demux+0x29c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1314e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13150:	f7fc fefe 	bl	ff50 <memq_enqueue>
	k_sem_give(sem_recv);
   13154:	6830      	ldr	r0, [r6, #0]
   13156:	f00c fd3d 	bl	1fbd4 <z_impl_k_sem_give>
			if (nack) {
   1315a:	e799      	b.n	13090 <rx_demux+0x7c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1315c:	494d      	ldr	r1, [pc, #308]	; (13294 <rx_demux+0x280>)
   1315e:	6860      	ldr	r0, [r4, #4]
   13160:	2200      	movs	r2, #0
   13162:	f7fc ff07 	bl	ff74 <memq_dequeue>
		rx_demux_event_done(link, rx);
   13166:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   13168:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   1316c:	f8d5 901c 	ldr.w	r9, [r5, #28]
	switch (done->extra.type) {
   13170:	b17b      	cbz	r3, 13192 <rx_demux+0x17e>
   13172:	2b01      	cmp	r3, #1
   13174:	f000 80c2 	beq.w	132fc <rx_demux+0x2e8>
		LL_ASSERT(0);
   13178:	4a49      	ldr	r2, [pc, #292]	; (132a0 <rx_demux+0x28c>)
   1317a:	494a      	ldr	r1, [pc, #296]	; (132a4 <rx_demux+0x290>)
   1317c:	484a      	ldr	r0, [pc, #296]	; (132a8 <rx_demux+0x294>)
   1317e:	f640 0374 	movw	r3, #2164	; 0x874
   13182:	f00e f887 	bl	21294 <printk>
   13186:	4040      	eors	r0, r0
   13188:	f380 8811 	msr	BASEPRI, r0
   1318c:	f04f 0003 	mov.w	r0, #3
   13190:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   13192:	4a48      	ldr	r2, [pc, #288]	; (132b4 <rx_demux+0x2a0>)
	done->extra.type = 0U;
   13194:	2300      	movs	r3, #0
   13196:	f885 3020 	strb.w	r3, [r5, #32]
	last = last + 1;
   1319a:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   1319c:	7851      	ldrb	r1, [r2, #1]
	last = last + 1;
   1319e:	3301      	adds	r3, #1
   131a0:	b2db      	uxtb	r3, r3
		last = 0U;
   131a2:	4299      	cmp	r1, r3
   131a4:	bf08      	it	eq
   131a6:	2300      	moveq	r3, #0
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   131a8:	7891      	ldrb	r1, [r2, #2]
	if (last == first) {
   131aa:	4299      	cmp	r1, r3
   131ac:	f000 80b7 	beq.w	1331e <rx_demux+0x30a>
	done->hdr.link = link;
   131b0:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   131b2:	78d0      	ldrb	r0, [r2, #3]
   131b4:	7811      	ldrb	r1, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   131b6:	fb00 2101 	mla	r1, r0, r1, r2
   131ba:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   131bc:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   131be:	4d3e      	ldr	r5, [pc, #248]	; (132b8 <rx_demux+0x2a4>)
   131c0:	78aa      	ldrb	r2, [r5, #2]
	if (first == last) {
   131c2:	78e9      	ldrb	r1, [r5, #3]
   131c4:	782b      	ldrb	r3, [r5, #0]
   131c6:	4291      	cmp	r1, r2
   131c8:	d025      	beq.n	13216 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   131ca:	f105 0a04 	add.w	sl, r5, #4
   131ce:	fb02 a303 	mla	r3, r2, r3, sl
	while (next) {
   131d2:	b303      	cbz	r3, 13216 <rx_demux+0x202>
		uint8_t is_aborted = next->is_aborted;
   131d4:	f893 2020 	ldrb.w	r2, [r3, #32]
		if (!is_aborted) {
   131d8:	0791      	lsls	r1, r2, #30
		uint8_t is_aborted = next->is_aborted;
   131da:	f3c2 0740 	ubfx	r7, r2, #1, #1
		uint8_t is_resume = next->is_resume;
   131de:	f002 0801 	and.w	r8, r2, #1
		if (!is_aborted) {
   131e2:	d56d      	bpl.n	132c0 <rx_demux+0x2ac>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   131e4:	78e9      	ldrb	r1, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   131e6:	78ab      	ldrb	r3, [r5, #2]
   131e8:	782a      	ldrb	r2, [r5, #0]
   131ea:	7868      	ldrb	r0, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   131ec:	4299      	cmp	r1, r3
   131ee:	d012      	beq.n	13216 <rx_demux+0x202>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   131f0:	3301      	adds	r3, #1
   131f2:	b2db      	uxtb	r3, r3
	if (_first == count) {
   131f4:	4298      	cmp	r0, r3
   131f6:	d07b      	beq.n	132f0 <rx_demux+0x2dc>
	if (first == last) {
   131f8:	4299      	cmp	r1, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   131fa:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   131fc:	d00b      	beq.n	13216 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   131fe:	fb03 a302 	mla	r3, r3, r2, sl

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   13202:	b143      	cbz	r3, 13216 <rx_demux+0x202>
   13204:	2f00      	cmp	r7, #0
   13206:	d1e5      	bne.n	131d4 <rx_demux+0x1c0>
   13208:	f1b8 0f00 	cmp.w	r8, #0
   1320c:	d003      	beq.n	13216 <rx_demux+0x202>
   1320e:	f893 2020 	ldrb.w	r2, [r3, #32]
   13212:	07d2      	lsls	r2, r2, #31
   13214:	d5de      	bpl.n	131d4 <rx_demux+0x1c0>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   13216:	f1b9 0f00 	cmp.w	r9, #0
   1321a:	f43f af02 	beq.w	13022 <rx_demux+0xe>
	return hdr->ref;
   1321e:	f899 3000 	ldrb.w	r3, [r9]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   13222:	2b00      	cmp	r3, #0
   13224:	f000 8089 	beq.w	1333a <rx_demux+0x326>
	return hdr->ref--;
   13228:	f899 3000 	ldrb.w	r3, [r9]
   1322c:	3b01      	subs	r3, #1
   1322e:	b2db      	uxtb	r3, r3
   13230:	f889 3000 	strb.w	r3, [r9]
	return hdr->ref;
   13234:	f899 3000 	ldrb.w	r3, [r9]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   13238:	2b00      	cmp	r3, #0
   1323a:	f47f aef2 	bne.w	13022 <rx_demux+0xe>
   1323e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   13242:	2b00      	cmp	r3, #0
   13244:	f43f aeed 	beq.w	13022 <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   13248:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1324c:	4798      	blx	r3
			if (nack) {
   1324e:	e6e8      	b.n	13022 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13250:	4910      	ldr	r1, [pc, #64]	; (13294 <rx_demux+0x280>)
   13252:	6860      	ldr	r0, [r4, #4]
   13254:	2200      	movs	r2, #0
   13256:	f7fc fe8d 	bl	ff74 <memq_dequeue>
		ull_conn_setup(link, rx);
   1325a:	9905      	ldr	r1, [sp, #20]
   1325c:	4638      	mov	r0, r7
   1325e:	f002 fb4b 	bl	158f8 <ull_conn_setup>
			if (nack) {
   13262:	e6de      	b.n	13022 <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   13264:	a905      	add	r1, sp, #20
   13266:	4638      	mov	r0, r7
   13268:	f002 fb66 	bl	15938 <ull_conn_rx>
		if (nack) {
   1326c:	2800      	cmp	r0, #0
   1326e:	d049      	beq.n	13304 <rx_demux+0x2f0>
}
   13270:	b007      	add	sp, #28
   13272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   13276:	4a0a      	ldr	r2, [pc, #40]	; (132a0 <rx_demux+0x28c>)
   13278:	4910      	ldr	r1, [pc, #64]	; (132bc <rx_demux+0x2a8>)
   1327a:	480b      	ldr	r0, [pc, #44]	; (132a8 <rx_demux+0x294>)
   1327c:	f240 7333 	movw	r3, #1843	; 0x733
   13280:	f00e f808 	bl	21294 <printk>
   13284:	4040      	eors	r0, r0
   13286:	f380 8811 	msr	BASEPRI, r0
   1328a:	f04f 0003 	mov.w	r0, #3
   1328e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   13290:	9b03      	ldr	r3, [sp, #12]
   13292:	e6d2      	b.n	1303a <rx_demux+0x26>
   13294:	2000dd74 	.word	0x2000dd74
   13298:	2000dd7c 	.word	0x2000dd7c
   1329c:	200004fc 	.word	0x200004fc
   132a0:	00027cf8 	.word	0x00027cf8
   132a4:	00027b4c 	.word	0x00027b4c
   132a8:	00027ab4 	.word	0x00027ab4
   132ac:	200004d8 	.word	0x200004d8
   132b0:	2000dd70 	.word	0x2000dd70
   132b4:	20000374 	.word	0x20000374
   132b8:	200003b4 	.word	0x200003b4
   132bc:	00027d3c 	.word	0x00027d3c
			mfy.param = next;
   132c0:	f8cb 3008 	str.w	r3, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   132c4:	463a      	mov	r2, r7
   132c6:	465b      	mov	r3, fp
   132c8:	4639      	mov	r1, r7
   132ca:	2001      	movs	r0, #1
   132cc:	f7fc feb4 	bl	10038 <mayfly_enqueue>
			LL_ASSERT(!ret);
   132d0:	2800      	cmp	r0, #0
   132d2:	d087      	beq.n	131e4 <rx_demux+0x1d0>
   132d4:	4820      	ldr	r0, [pc, #128]	; (13358 <rx_demux+0x344>)
   132d6:	4a21      	ldr	r2, [pc, #132]	; (1335c <rx_demux+0x348>)
   132d8:	4921      	ldr	r1, [pc, #132]	; (13360 <rx_demux+0x34c>)
   132da:	f640 038c 	movw	r3, #2188	; 0x88c
   132de:	f00d ffd9 	bl	21294 <printk>
   132e2:	4040      	eors	r0, r0
   132e4:	f380 8811 	msr	BASEPRI, r0
   132e8:	f04f 0003 	mov.w	r0, #3
   132ec:	df02      	svc	2
   132ee:	e779      	b.n	131e4 <rx_demux+0x1d0>
	*first = _first; /* Write back read-index */
   132f0:	2300      	movs	r3, #0
   132f2:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   132f4:	2900      	cmp	r1, #0
   132f6:	d08e      	beq.n	13216 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   132f8:	4b1a      	ldr	r3, [pc, #104]	; (13364 <rx_demux+0x350>)
   132fa:	e783      	b.n	13204 <rx_demux+0x1f0>
		ull_conn_done(done);
   132fc:	4628      	mov	r0, r5
   132fe:	f005 f947 	bl	18590 <ull_conn_done>
		break;
   13302:	e746      	b.n	13192 <rx_demux+0x17e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13304:	4918      	ldr	r1, [pc, #96]	; (13368 <rx_demux+0x354>)
   13306:	4602      	mov	r2, r0
   13308:	6860      	ldr	r0, [r4, #4]
   1330a:	f7fc fe33 	bl	ff74 <memq_dequeue>
		if (rx) {
   1330e:	9905      	ldr	r1, [sp, #20]
   13310:	2900      	cmp	r1, #0
   13312:	f43f ae86 	beq.w	13022 <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13316:	4b15      	ldr	r3, [pc, #84]	; (1336c <rx_demux+0x358>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13318:	4638      	mov	r0, r7
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1331a:	78db      	ldrb	r3, [r3, #3]
   1331c:	e716      	b.n	1314c <rx_demux+0x138>
	LL_ASSERT(release == done);
   1331e:	4a0f      	ldr	r2, [pc, #60]	; (1335c <rx_demux+0x348>)
   13320:	4913      	ldr	r1, [pc, #76]	; (13370 <rx_demux+0x35c>)
   13322:	480d      	ldr	r0, [pc, #52]	; (13358 <rx_demux+0x344>)
   13324:	f640 037b 	movw	r3, #2171	; 0x87b
   13328:	f00d ffb4 	bl	21294 <printk>
   1332c:	4040      	eors	r0, r0
   1332e:	f380 8811 	msr	BASEPRI, r0
   13332:	f04f 0003 	mov.w	r0, #3
   13336:	df02      	svc	2
   13338:	e741      	b.n	131be <rx_demux+0x1aa>
	LL_ASSERT(ull_ref_get(ull_hdr));
   1333a:	4a08      	ldr	r2, [pc, #32]	; (1335c <rx_demux+0x348>)
   1333c:	490d      	ldr	r1, [pc, #52]	; (13374 <rx_demux+0x360>)
   1333e:	4806      	ldr	r0, [pc, #24]	; (13358 <rx_demux+0x344>)
   13340:	f640 039e 	movw	r3, #2206	; 0x89e
   13344:	f00d ffa6 	bl	21294 <printk>
   13348:	4040      	eors	r0, r0
   1334a:	f380 8811 	msr	BASEPRI, r0
   1334e:	f04f 0003 	mov.w	r0, #3
   13352:	df02      	svc	2
   13354:	e768      	b.n	13228 <rx_demux+0x214>
   13356:	bf00      	nop
   13358:	00027ab4 	.word	0x00027ab4
   1335c:	00027cf8 	.word	0x00027cf8
   13360:	00027d50 	.word	0x00027d50
   13364:	200003b8 	.word	0x200003b8
   13368:	2000dd74 	.word	0x2000dd74
   1336c:	200004d8 	.word	0x200004d8
   13370:	00027d40 	.word	0x00027d40
   13374:	00027d58 	.word	0x00027d58

00013378 <ll_init>:
{
   13378:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   1337a:	4b2b      	ldr	r3, [pc, #172]	; (13428 <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1337c:	4d2b      	ldr	r5, [pc, #172]	; (1342c <ll_init+0xb4>)
	sem_recv = sem_rx;
   1337e:	6018      	str	r0, [r3, #0]
{
   13380:	b087      	sub	sp, #28
	cntr_init();
   13382:	f008 fd79 	bl	1be78 <cntr_init>
	mayfly_init();
   13386:	f7fc fe05 	bl	ff94 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1338a:	4a29      	ldr	r2, [pc, #164]	; (13430 <ll_init+0xb8>)
   1338c:	4c29      	ldr	r4, [pc, #164]	; (13434 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1338e:	492a      	ldr	r1, [pc, #168]	; (13438 <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13390:	e9cd 2504 	strd	r2, r5, [sp, #16]
   13394:	4a29      	ldr	r2, [pc, #164]	; (1343c <ll_init+0xc4>)
   13396:	e9cd 2402 	strd	r2, r4, [sp, #8]
   1339a:	240c      	movs	r4, #12
   1339c:	e9cd 1400 	strd	r1, r4, [sp]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   133a0:	2003      	movs	r0, #3
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   133a2:	2304      	movs	r3, #4
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   133a4:	2402      	movs	r4, #2
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   133a6:	7008      	strb	r0, [r1, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   133a8:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   133aa:	720b      	strb	r3, [r1, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   133ac:	740c      	strb	r4, [r1, #16]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   133ae:	4a24      	ldr	r2, [pc, #144]	; (13440 <ll_init+0xc8>)
   133b0:	2106      	movs	r1, #6
   133b2:	2000      	movs	r0, #0
   133b4:	f7fd fef2 	bl	1119c <ticker_init>
	LL_ASSERT(!err);
   133b8:	bb40      	cbnz	r0, 1340c <ll_init+0x94>
	return z_impl_k_sem_init(sem, initial_count, limit);
   133ba:	2201      	movs	r2, #1
   133bc:	2100      	movs	r1, #0
   133be:	4821      	ldr	r0, [pc, #132]	; (13444 <ll_init+0xcc>)
   133c0:	f013 fa08 	bl	267d4 <z_impl_k_sem_init>
	err = lll_init();
   133c4:	f007 f89e 	bl	1a504 <lll_init>
	if (err) {
   133c8:	4604      	mov	r4, r0
   133ca:	b110      	cbz	r0, 133d2 <ll_init+0x5a>
}
   133cc:	4620      	mov	r0, r4
   133ce:	b007      	add	sp, #28
   133d0:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   133d2:	f7ff fd93 	bl	12efc <init_reset>
	if (err) {
   133d6:	4604      	mov	r4, r0
   133d8:	2800      	cmp	r0, #0
   133da:	d1f7      	bne.n	133cc <ll_init+0x54>
	err = lll_adv_init();
   133dc:	f007 fc12 	bl	1ac04 <lll_adv_init>
	if (err) {
   133e0:	4604      	mov	r4, r0
   133e2:	2800      	cmp	r0, #0
   133e4:	d1f2      	bne.n	133cc <ll_init+0x54>
	err = ull_adv_init();
   133e6:	f001 f931 	bl	1464c <ull_adv_init>
	if (err) {
   133ea:	4604      	mov	r4, r0
   133ec:	2800      	cmp	r0, #0
   133ee:	d1ed      	bne.n	133cc <ll_init+0x54>
	err = lll_conn_init();
   133f0:	f008 f8aa 	bl	1b548 <lll_conn_init>
	if (err) {
   133f4:	4604      	mov	r4, r0
   133f6:	2800      	cmp	r0, #0
   133f8:	d1e8      	bne.n	133cc <ll_init+0x54>
	err = ull_conn_init();
   133fa:	f002 fa29 	bl	15850 <ull_conn_init>
	if (err) {
   133fe:	4604      	mov	r4, r0
   13400:	2800      	cmp	r0, #0
   13402:	d1e3      	bne.n	133cc <ll_init+0x54>
		ull_filter_reset(true);
   13404:	2001      	movs	r0, #1
   13406:	f006 fd37 	bl	19e78 <ull_filter_reset>
	return  0;
   1340a:	e7df      	b.n	133cc <ll_init+0x54>
	LL_ASSERT(!err);
   1340c:	4a0e      	ldr	r2, [pc, #56]	; (13448 <ll_init+0xd0>)
   1340e:	490f      	ldr	r1, [pc, #60]	; (1344c <ll_init+0xd4>)
   13410:	480f      	ldr	r0, [pc, #60]	; (13450 <ll_init+0xd8>)
   13412:	f44f 73b8 	mov.w	r3, #368	; 0x170
   13416:	f00d ff3d 	bl	21294 <printk>
   1341a:	4040      	eors	r0, r0
   1341c:	f380 8811 	msr	BASEPRI, r0
   13420:	f04f 0003 	mov.w	r0, #3
   13424:	df02      	svc	2
   13426:	e7c8      	b.n	133ba <ll_init+0x42>
   13428:	2000dd7c 	.word	0x2000dd7c
   1342c:	0001cb21 	.word	0x0001cb21
   13430:	0001c9d1 	.word	0x0001c9d1
   13434:	0001c96d 	.word	0x0001c96d
   13438:	2000e128 	.word	0x2000e128
   1343c:	2000deb8 	.word	0x2000deb8
   13440:	2000dd98 	.word	0x2000dd98
   13444:	2000dd80 	.word	0x2000dd80
   13448:	00027cf8 	.word	0x00027cf8
   1344c:	00027d34 	.word	0x00027d34
   13450:	00027ab4 	.word	0x00027ab4

00013454 <ll_reset>:
{
   13454:	b510      	push	{r4, lr}
   13456:	b086      	sub	sp, #24
	err = ull_adv_reset();
   13458:	f001 f906 	bl	14668 <ull_adv_reset>
	LL_ASSERT(!err);
   1345c:	2800      	cmp	r0, #0
   1345e:	d130      	bne.n	134c2 <ll_reset+0x6e>
	err = ull_conn_reset();
   13460:	f002 f9f8 	bl	15854 <ull_conn_reset>
	LL_ASSERT(!err);
   13464:	2800      	cmp	r0, #0
   13466:	d13d      	bne.n	134e4 <ll_reset+0x90>
	MFIFO_INIT(tx_ack);
   13468:	4b3b      	ldr	r3, [pc, #236]	; (13558 <ll_reset+0x104>)
   1346a:	2400      	movs	r4, #0
		ull_filter_reset(false);
   1346c:	4620      	mov	r0, r4
	MFIFO_INIT(tx_ack);
   1346e:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   13470:	f006 fd02 	bl	19e78 <ull_filter_reset>
	MFIFO_INIT(prep);
   13474:	4839      	ldr	r0, [pc, #228]	; (1355c <ll_reset+0x108>)
	MFIFO_INIT(done);
   13476:	493a      	ldr	r1, [pc, #232]	; (13560 <ll_reset+0x10c>)
	MFIFO_INIT(pdu_rx_free);
   13478:	4a3a      	ldr	r2, [pc, #232]	; (13564 <ll_reset+0x110>)
	MFIFO_INIT(ll_pdu_rx_free);
   1347a:	4b3b      	ldr	r3, [pc, #236]	; (13568 <ll_reset+0x114>)
	MFIFO_INIT(prep);
   1347c:	8044      	strh	r4, [r0, #2]
	MFIFO_INIT(done);
   1347e:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   13480:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   13482:	805c      	strh	r4, [r3, #2]
   13484:	2201      	movs	r2, #1
   13486:	4621      	mov	r1, r4
   13488:	4668      	mov	r0, sp
   1348a:	f013 f9a3 	bl	267d4 <z_impl_k_sem_init>
		mfy.param = &sem;
   1348e:	4b37      	ldr	r3, [pc, #220]	; (1356c <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13490:	4622      	mov	r2, r4
   13492:	4621      	mov	r1, r4
   13494:	2003      	movs	r0, #3
		mfy.param = &sem;
   13496:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1349a:	f7fc fdcd 	bl	10038 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1349e:	2800      	cmp	r0, #0
   134a0:	d14b      	bne.n	1353a <ll_reset+0xe6>
	return z_impl_k_sem_take(sem, timeout);
   134a2:	f04f 32ff 	mov.w	r2, #4294967295
   134a6:	f04f 33ff 	mov.w	r3, #4294967295
   134aa:	4668      	mov	r0, sp
   134ac:	f00c fbb8 	bl	1fc20 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   134b0:	f001 f8e6 	bl	14680 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   134b4:	2800      	cmp	r0, #0
   134b6:	d132      	bne.n	1351e <ll_reset+0xca>
	err = init_reset();
   134b8:	f7ff fd20 	bl	12efc <init_reset>
	LL_ASSERT(!err);
   134bc:	bb00      	cbnz	r0, 13500 <ll_reset+0xac>
}
   134be:	b006      	add	sp, #24
   134c0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   134c2:	4a2b      	ldr	r2, [pc, #172]	; (13570 <ll_reset+0x11c>)
   134c4:	492b      	ldr	r1, [pc, #172]	; (13574 <ll_reset+0x120>)
   134c6:	482c      	ldr	r0, [pc, #176]	; (13578 <ll_reset+0x124>)
   134c8:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   134cc:	f00d fee2 	bl	21294 <printk>
   134d0:	4040      	eors	r0, r0
   134d2:	f380 8811 	msr	BASEPRI, r0
   134d6:	f04f 0003 	mov.w	r0, #3
   134da:	df02      	svc	2
	err = ull_conn_reset();
   134dc:	f002 f9ba 	bl	15854 <ull_conn_reset>
	LL_ASSERT(!err);
   134e0:	2800      	cmp	r0, #0
   134e2:	d0c1      	beq.n	13468 <ll_reset+0x14>
   134e4:	4a22      	ldr	r2, [pc, #136]	; (13570 <ll_reset+0x11c>)
   134e6:	4923      	ldr	r1, [pc, #140]	; (13574 <ll_reset+0x120>)
   134e8:	4823      	ldr	r0, [pc, #140]	; (13578 <ll_reset+0x124>)
   134ea:	f44f 730f 	mov.w	r3, #572	; 0x23c
   134ee:	f00d fed1 	bl	21294 <printk>
   134f2:	4040      	eors	r0, r0
   134f4:	f380 8811 	msr	BASEPRI, r0
   134f8:	f04f 0003 	mov.w	r0, #3
   134fc:	df02      	svc	2
   134fe:	e7b3      	b.n	13468 <ll_reset+0x14>
	LL_ASSERT(!err);
   13500:	4a1b      	ldr	r2, [pc, #108]	; (13570 <ll_reset+0x11c>)
   13502:	491c      	ldr	r1, [pc, #112]	; (13574 <ll_reset+0x120>)
   13504:	481c      	ldr	r0, [pc, #112]	; (13578 <ll_reset+0x124>)
   13506:	f44f 7320 	mov.w	r3, #640	; 0x280
   1350a:	f00d fec3 	bl	21294 <printk>
   1350e:	4040      	eors	r0, r0
   13510:	f380 8811 	msr	BASEPRI, r0
   13514:	f04f 0003 	mov.w	r0, #3
   13518:	df02      	svc	2
}
   1351a:	b006      	add	sp, #24
   1351c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   1351e:	4a14      	ldr	r2, [pc, #80]	; (13570 <ll_reset+0x11c>)
   13520:	4914      	ldr	r1, [pc, #80]	; (13574 <ll_reset+0x120>)
   13522:	4815      	ldr	r0, [pc, #84]	; (13578 <ll_reset+0x124>)
   13524:	f240 237b 	movw	r3, #635	; 0x27b
   13528:	f00d feb4 	bl	21294 <printk>
   1352c:	4040      	eors	r0, r0
   1352e:	f380 8811 	msr	BASEPRI, r0
   13532:	f04f 0003 	mov.w	r0, #3
   13536:	df02      	svc	2
   13538:	e7be      	b.n	134b8 <ll_reset+0x64>
		LL_ASSERT(!retval);
   1353a:	4a0d      	ldr	r2, [pc, #52]	; (13570 <ll_reset+0x11c>)
   1353c:	490f      	ldr	r1, [pc, #60]	; (1357c <ll_reset+0x128>)
   1353e:	480e      	ldr	r0, [pc, #56]	; (13578 <ll_reset+0x124>)
   13540:	f240 236e 	movw	r3, #622	; 0x26e
   13544:	f00d fea6 	bl	21294 <printk>
   13548:	4040      	eors	r0, r0
   1354a:	f380 8811 	msr	BASEPRI, r0
   1354e:	f04f 0003 	mov.w	r0, #3
   13552:	df02      	svc	2
   13554:	e7a5      	b.n	134a2 <ll_reset+0x4e>
   13556:	bf00      	nop
   13558:	200004d8 	.word	0x200004d8
   1355c:	200003b4 	.word	0x200003b4
   13560:	20000374 	.word	0x20000374
   13564:	2000039c 	.word	0x2000039c
   13568:	20000388 	.word	0x20000388
   1356c:	2000053c 	.word	0x2000053c
   13570:	00027cf8 	.word	0x00027cf8
   13574:	00027d34 	.word	0x00027d34
   13578:	00027ab4 	.word	0x00027ab4
   1357c:	00027d70 	.word	0x00027d70

00013580 <ll_rx_get>:
{
   13580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13584:	b085      	sub	sp, #20
   13586:	e9cd 0100 	strd	r0, r1, [sp]
   1358a:	4c65      	ldr	r4, [pc, #404]	; (13720 <ll_rx_get+0x1a0>)
				mem_release(link, &mem_link_rx.free);
   1358c:	4d65      	ldr	r5, [pc, #404]	; (13724 <ll_rx_get+0x1a4>)
   1358e:	4e66      	ldr	r6, [pc, #408]	; (13728 <ll_rx_get+0x1a8>)
	*node_rx = NULL;
   13590:	9a00      	ldr	r2, [sp, #0]
   13592:	2300      	movs	r3, #0
   13594:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   13596:	e9d6 0100 	ldrd	r0, r1, [r6]
   1359a:	aa03      	add	r2, sp, #12
   1359c:	f7fc fce2 	bl	ff64 <memq_peek>
	if (link) {
   135a0:	4680      	mov	r8, r0
   135a2:	2800      	cmp	r0, #0
   135a4:	f000 80a8 	beq.w	136f8 <ll_rx_get+0x178>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   135a8:	9b03      	ldr	r3, [sp, #12]
   135aa:	4960      	ldr	r1, [pc, #384]	; (1372c <ll_rx_get+0x1ac>)
   135ac:	781a      	ldrb	r2, [r3, #0]
   135ae:	9801      	ldr	r0, [sp, #4]
   135b0:	f7ff fbc2 	bl	12d38 <tx_cmplt_get>
		if (!cmplt) {
   135b4:	2800      	cmp	r0, #0
   135b6:	f040 80a4 	bne.w	13702 <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
   135ba:	78a3      	ldrb	r3, [r4, #2]
   135bc:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   135c0:	78e2      	ldrb	r2, [r4, #3]
   135c2:	4607      	mov	r7, r0
   135c4:	f10d 0109 	add.w	r1, sp, #9
   135c8:	f10d 000a 	add.w	r0, sp, #10
   135cc:	f7ff fbb4 	bl	12d38 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   135d0:	ea47 0200 	orr.w	r2, r7, r0
   135d4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   135d8:	d1f2      	bne.n	135c0 <ll_rx_get+0x40>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   135da:	9b03      	ldr	r3, [sp, #12]
   135dc:	7919      	ldrb	r1, [r3, #4]
   135de:	2901      	cmp	r1, #1
   135e0:	f040 8097 	bne.w	13712 <ll_rx_get+0x192>
				(void)memq_dequeue(memq_ll_rx.tail,
   135e4:	4950      	ldr	r1, [pc, #320]	; (13728 <ll_rx_get+0x1a8>)
   135e6:	6870      	ldr	r0, [r6, #4]
   135e8:	f7fc fcc4 	bl	ff74 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   135ec:	4950      	ldr	r1, [pc, #320]	; (13730 <ll_rx_get+0x1b0>)
   135ee:	4640      	mov	r0, r8
   135f0:	f7fc fc64 	bl	febc <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   135f4:	782b      	ldrb	r3, [r5, #0]
   135f6:	2b06      	cmp	r3, #6
   135f8:	d86f      	bhi.n	136da <ll_rx_get+0x15a>
	mem_link_rx.quota_pdu += delta;
   135fa:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   135fc:	494d      	ldr	r1, [pc, #308]	; (13734 <ll_rx_get+0x1b4>)
   135fe:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   13600:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   13602:	f7fc fc5b 	bl	febc <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13606:	782b      	ldrb	r3, [r5, #0]
   13608:	2b00      	cmp	r3, #0
   1360a:	d0c1      	beq.n	13590 <ll_rx_get+0x10>
   1360c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 13738 <ll_rx_get+0x1b8>
	last = last + 1;
   13610:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   13614:	f898 2001 	ldrb.w	r2, [r8, #1]
   13618:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   1361c:	3701      	adds	r7, #1
   1361e:	b2ff      	uxtb	r7, r7
		last = 0U;
   13620:	42ba      	cmp	r2, r7
   13622:	bf08      	it	eq
   13624:	2700      	moveq	r7, #0
	if (last == first) {
   13626:	429f      	cmp	r7, r3
   13628:	d0b2      	beq.n	13590 <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
   1362a:	4841      	ldr	r0, [pc, #260]	; (13730 <ll_rx_get+0x1b0>)
   1362c:	f7fc fc2c 	bl	fe88 <mem_acquire>
		if (!link) {
   13630:	4682      	mov	sl, r0
   13632:	2800      	cmp	r0, #0
   13634:	d0ac      	beq.n	13590 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   13636:	483f      	ldr	r0, [pc, #252]	; (13734 <ll_rx_get+0x1b4>)
   13638:	f7fc fc26 	bl	fe88 <mem_acquire>
		if (!rx) {
   1363c:	2800      	cmp	r0, #0
   1363e:	d063      	beq.n	13708 <ll_rx_get+0x188>
		rx->link = link;
   13640:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13644:	f898 2003 	ldrb.w	r2, [r8, #3]
   13648:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1364c:	fb02 8303 	mla	r3, r2, r3, r8
   13650:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   13652:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13654:	f888 7003 	strb.w	r7, [r8, #3]
   13658:	3b01      	subs	r3, #1
   1365a:	b2db      	uxtb	r3, r3
   1365c:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   1365e:	2b00      	cmp	r3, #0
   13660:	d096      	beq.n	13590 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13662:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 1373c <ll_rx_get+0x1bc>
		link = mem_acquire(&mem_link_rx.free);
   13666:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 13730 <ll_rx_get+0x1b0>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1366a:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1366e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 13734 <ll_rx_get+0x1b4>
   13672:	e014      	b.n	1369e <ll_rx_get+0x11e>
		link->mem = NULL;
   13674:	2300      	movs	r3, #0
   13676:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
   1367a:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1367e:	f89a 2003 	ldrb.w	r2, [sl, #3]
   13682:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13686:	fb02 a303 	mla	r3, r2, r3, sl
   1368a:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1368c:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   1368e:	f88a 7003 	strb.w	r7, [sl, #3]
   13692:	3b01      	subs	r3, #1
   13694:	b2db      	uxtb	r3, r3
   13696:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   13698:	2b00      	cmp	r3, #0
   1369a:	f43f af79 	beq.w	13590 <ll_rx_get+0x10>
	if (last == count) {
   1369e:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   136a2:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
   136a6:	3701      	adds	r7, #1
   136a8:	b2ff      	uxtb	r7, r7
		last = 0U;
   136aa:	42ba      	cmp	r2, r7
   136ac:	bf08      	it	eq
   136ae:	2700      	moveq	r7, #0
	if (last == first) {
   136b0:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   136b2:	4640      	mov	r0, r8
   136b4:	f43f af6c 	beq.w	13590 <ll_rx_get+0x10>
   136b8:	f7fc fbe6 	bl	fe88 <mem_acquire>
   136bc:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   136be:	4658      	mov	r0, fp
		if (!link) {
   136c0:	f1b9 0f00 	cmp.w	r9, #0
   136c4:	f43f af64 	beq.w	13590 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   136c8:	f7fc fbde 	bl	fe88 <mem_acquire>
		if (!rx) {
   136cc:	2800      	cmp	r0, #0
   136ce:	d1d1      	bne.n	13674 <ll_rx_get+0xf4>
			mem_release(link, &mem_link_rx.free);
   136d0:	4917      	ldr	r1, [pc, #92]	; (13730 <ll_rx_get+0x1b0>)
   136d2:	4648      	mov	r0, r9
   136d4:	f7fc fbf2 	bl	febc <mem_release>
			return;
   136d8:	e75a      	b.n	13590 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   136da:	4a19      	ldr	r2, [pc, #100]	; (13740 <ll_rx_get+0x1c0>)
   136dc:	4919      	ldr	r1, [pc, #100]	; (13744 <ll_rx_get+0x1c4>)
   136de:	481a      	ldr	r0, [pc, #104]	; (13748 <ll_rx_get+0x1c8>)
   136e0:	f240 43ac 	movw	r3, #1196	; 0x4ac
   136e4:	f00d fdd6 	bl	21294 <printk>
   136e8:	4040      	eors	r0, r0
   136ea:	f380 8811 	msr	BASEPRI, r0
   136ee:	f04f 0003 	mov.w	r0, #3
   136f2:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   136f4:	782b      	ldrb	r3, [r5, #0]
   136f6:	e780      	b.n	135fa <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   136f8:	78e2      	ldrb	r2, [r4, #3]
   136fa:	490c      	ldr	r1, [pc, #48]	; (1372c <ll_rx_get+0x1ac>)
   136fc:	9801      	ldr	r0, [sp, #4]
   136fe:	f7ff fb1b 	bl	12d38 <tx_cmplt_get>
}
   13702:	b005      	add	sp, #20
   13704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   13708:	4909      	ldr	r1, [pc, #36]	; (13730 <ll_rx_get+0x1b0>)
   1370a:	4650      	mov	r0, sl
   1370c:	f7fc fbd6 	bl	febc <mem_release>
			return;
   13710:	e73e      	b.n	13590 <ll_rx_get+0x10>
			*node_rx = rx;
   13712:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13714:	4610      	mov	r0, r2
			*node_rx = rx;
   13716:	600b      	str	r3, [r1, #0]
}
   13718:	b005      	add	sp, #20
   1371a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1371e:	bf00      	nop
   13720:	200004d8 	.word	0x200004d8
   13724:	2000da80 	.word	0x2000da80
   13728:	2000dd6c 	.word	0x2000dd6c
   1372c:	200004da 	.word	0x200004da
   13730:	2000da84 	.word	0x2000da84
   13734:	2000dae0 	.word	0x2000dae0
   13738:	2000039c 	.word	0x2000039c
   1373c:	20000388 	.word	0x20000388
   13740:	00027cf8 	.word	0x00027cf8
   13744:	00027d78 	.word	0x00027d78
   13748:	00027ab4 	.word	0x00027ab4

0001374c <ll_rx_dequeue>:
{
   1374c:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1374e:	495c      	ldr	r1, [pc, #368]	; (138c0 <ll_rx_dequeue+0x174>)
{
   13750:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   13752:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13754:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   13756:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13758:	aa01      	add	r2, sp, #4
   1375a:	f7fc fc0b 	bl	ff74 <memq_dequeue>
	LL_ASSERT(link);
   1375e:	4604      	mov	r4, r0
   13760:	2800      	cmp	r0, #0
   13762:	d061      	beq.n	13828 <ll_rx_dequeue+0xdc>
	mem_release(link, &mem_link_rx.free);
   13764:	4957      	ldr	r1, [pc, #348]	; (138c4 <ll_rx_dequeue+0x178>)
   13766:	4620      	mov	r0, r4
   13768:	f7fc fba8 	bl	febc <mem_release>
	switch (rx->type) {
   1376c:	9a01      	ldr	r2, [sp, #4]
   1376e:	7913      	ldrb	r3, [r2, #4]
   13770:	2b19      	cmp	r3, #25
   13772:	d80e      	bhi.n	13792 <ll_rx_dequeue+0x46>
   13774:	e8df f003 	tbb	[pc, r3]
   13778:	1c0d0d1c 	.word	0x1c0d0d1c
   1377c:	0d0d0d0d 	.word	0x0d0d0d0d
   13780:	0d0d0d0d 	.word	0x0d0d0d0d
   13784:	0d0d0d0d 	.word	0x0d0d0d0d
   13788:	2d0d0d0d 	.word	0x2d0d0d0d
   1378c:	1c1c1c1c 	.word	0x1c1c1c1c
   13790:	1c1c      	.short	0x1c1c
		LL_ASSERT(0);
   13792:	4a4d      	ldr	r2, [pc, #308]	; (138c8 <ll_rx_dequeue+0x17c>)
   13794:	494d      	ldr	r1, [pc, #308]	; (138cc <ll_rx_dequeue+0x180>)
   13796:	484e      	ldr	r0, [pc, #312]	; (138d0 <ll_rx_dequeue+0x184>)
   13798:	f44f 736f 	mov.w	r3, #956	; 0x3bc
   1379c:	f00d fd7a 	bl	21294 <printk>
   137a0:	4040      	eors	r0, r0
   137a2:	f380 8811 	msr	BASEPRI, r0
   137a6:	f04f 0003 	mov.w	r0, #3
   137aa:	df02      	svc	2
}
   137ac:	b002      	add	sp, #8
   137ae:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   137b0:	2b00      	cmp	r3, #0
   137b2:	d1fb      	bne.n	137ac <ll_rx_dequeue+0x60>
   137b4:	4a44      	ldr	r2, [pc, #272]	; (138c8 <ll_rx_dequeue+0x17c>)
   137b6:	4947      	ldr	r1, [pc, #284]	; (138d4 <ll_rx_dequeue+0x188>)
   137b8:	4845      	ldr	r0, [pc, #276]	; (138d0 <ll_rx_dequeue+0x184>)
   137ba:	f44f 736e 	mov.w	r3, #952	; 0x3b8
   137be:	f00d fd69 	bl	21294 <printk>
   137c2:	4040      	eors	r0, r0
   137c4:	f380 8811 	msr	BASEPRI, r0
   137c8:	f04f 0003 	mov.w	r0, #3
   137cc:	df02      	svc	2
}
   137ce:	b002      	add	sp, #8
   137d0:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   137d2:	7f13      	ldrb	r3, [r2, #28]
   137d4:	2b3c      	cmp	r3, #60	; 0x3c
   137d6:	d035      	beq.n	13844 <ll_rx_dequeue+0xf8>
   137d8:	7f53      	ldrb	r3, [r2, #29]
   137da:	b1bb      	cbz	r3, 1380c <ll_rx_dequeue+0xc0>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   137dc:	6893      	ldr	r3, [r2, #8]
   137de:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   137e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   137e2:	b120      	cbz	r0, 137ee <ll_rx_dequeue+0xa2>
					adv->node_rx_cc_free = NULL;
   137e4:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   137e6:	493c      	ldr	r1, [pc, #240]	; (138d8 <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
   137e8:	64a3      	str	r3, [r4, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
   137ea:	f7fc fb67 	bl	febc <mem_release>
			adv->is_enabled = 0U;
   137ee:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   137f2:	f36f 0300 	bfc	r3, #0, #1
   137f6:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
			      ull_adv_is_enabled(0));
   137fa:	2000      	movs	r0, #0
   137fc:	f000 ff7e 	bl	146fc <ull_adv_is_enabled>
			if (!bm) {
   13800:	2800      	cmp	r0, #0
   13802:	d1d3      	bne.n	137ac <ll_rx_dequeue+0x60>
				ull_filter_adv_scan_state_cb(0);
   13804:	f006 f890 	bl	19928 <ull_filter_adv_scan_state_cb>
}
   13808:	b002      	add	sp, #8
   1380a:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   1380c:	4a2e      	ldr	r2, [pc, #184]	; (138c8 <ll_rx_dequeue+0x17c>)
   1380e:	492f      	ldr	r1, [pc, #188]	; (138cc <ll_rx_dequeue+0x180>)
   13810:	482f      	ldr	r0, [pc, #188]	; (138d0 <ll_rx_dequeue+0x184>)
   13812:	f44f 7359 	mov.w	r3, #868	; 0x364
   13816:	f00d fd3d 	bl	21294 <printk>
   1381a:	4040      	eors	r0, r0
   1381c:	f380 8811 	msr	BASEPRI, r0
   13820:	f04f 0003 	mov.w	r0, #3
   13824:	df02      	svc	2
   13826:	e7e8      	b.n	137fa <ll_rx_dequeue+0xae>
	LL_ASSERT(link);
   13828:	4a27      	ldr	r2, [pc, #156]	; (138c8 <ll_rx_dequeue+0x17c>)
   1382a:	492c      	ldr	r1, [pc, #176]	; (138dc <ll_rx_dequeue+0x190>)
   1382c:	4828      	ldr	r0, [pc, #160]	; (138d0 <ll_rx_dequeue+0x184>)
   1382e:	f240 23d2 	movw	r3, #722	; 0x2d2
   13832:	f00d fd2f 	bl	21294 <printk>
   13836:	4040      	eors	r0, r0
   13838:	f380 8811 	msr	BASEPRI, r0
   1383c:	f04f 0003 	mov.w	r0, #3
   13840:	df02      	svc	2
   13842:	e78f      	b.n	13764 <ll_rx_dequeue+0x18>
			struct lll_adv *lll = ftr->param;
   13844:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
   13846:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   13848:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
   1384a:	b1ed      	cbz	r5, 13888 <ll_rx_dequeue+0x13c>
				LL_ASSERT(!conn_lll->link_tx_free);
   1384c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
   1384e:	2200      	movs	r2, #0
   13850:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   13852:	b163      	cbz	r3, 1386e <ll_rx_dequeue+0x122>
   13854:	4a1c      	ldr	r2, [pc, #112]	; (138c8 <ll_rx_dequeue+0x17c>)
   13856:	4922      	ldr	r1, [pc, #136]	; (138e0 <ll_rx_dequeue+0x194>)
   13858:	481d      	ldr	r0, [pc, #116]	; (138d0 <ll_rx_dequeue+0x184>)
   1385a:	f44f 734f 	mov.w	r3, #828	; 0x33c
   1385e:	f00d fd19 	bl	21294 <printk>
   13862:	4040      	eors	r0, r0
   13864:	f380 8811 	msr	BASEPRI, r0
   13868:	f04f 0003 	mov.w	r0, #3
   1386c:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   1386e:	f105 0150 	add.w	r1, r5, #80	; 0x50
   13872:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   13876:	f7fc fb61 	bl	ff3c <memq_deinit>
				LL_ASSERT(link);
   1387a:	4606      	mov	r6, r0
   1387c:	b190      	cbz	r0, 138a4 <ll_rx_dequeue+0x158>
				ll_conn_release(conn);
   1387e:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   13880:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
   13882:	f001 fced 	bl	15260 <ll_conn_release>
   13886:	e7b2      	b.n	137ee <ll_rx_dequeue+0xa2>
				LL_ASSERT(conn_lll);
   13888:	4a0f      	ldr	r2, [pc, #60]	; (138c8 <ll_rx_dequeue+0x17c>)
   1388a:	4916      	ldr	r1, [pc, #88]	; (138e4 <ll_rx_dequeue+0x198>)
   1388c:	4810      	ldr	r0, [pc, #64]	; (138d0 <ll_rx_dequeue+0x184>)
   1388e:	f240 3339 	movw	r3, #825	; 0x339
   13892:	f00d fcff 	bl	21294 <printk>
   13896:	4040      	eors	r0, r0
   13898:	f380 8811 	msr	BASEPRI, r0
   1389c:	f04f 0003 	mov.w	r0, #3
   138a0:	df02      	svc	2
   138a2:	e7d3      	b.n	1384c <ll_rx_dequeue+0x100>
				LL_ASSERT(link);
   138a4:	4a08      	ldr	r2, [pc, #32]	; (138c8 <ll_rx_dequeue+0x17c>)
   138a6:	490d      	ldr	r1, [pc, #52]	; (138dc <ll_rx_dequeue+0x190>)
   138a8:	4809      	ldr	r0, [pc, #36]	; (138d0 <ll_rx_dequeue+0x184>)
   138aa:	f240 333f 	movw	r3, #831	; 0x33f
   138ae:	f00d fcf1 	bl	21294 <printk>
   138b2:	4040      	eors	r0, r0
   138b4:	f380 8811 	msr	BASEPRI, r0
   138b8:	f04f 0003 	mov.w	r0, #3
   138bc:	df02      	svc	2
   138be:	e7de      	b.n	1387e <ll_rx_dequeue+0x132>
   138c0:	2000dd6c 	.word	0x2000dd6c
   138c4:	2000da84 	.word	0x2000da84
   138c8:	00027cf8 	.word	0x00027cf8
   138cc:	00027b4c 	.word	0x00027b4c
   138d0:	00027ab4 	.word	0x00027ab4
   138d4:	00027dd0 	.word	0x00027dd0
   138d8:	2000dae0 	.word	0x2000dae0
   138dc:	00027fc0 	.word	0x00027fc0
   138e0:	00027db8 	.word	0x00027db8
   138e4:	00027dac 	.word	0x00027dac

000138e8 <ll_rx_mem_release>:
{
   138e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   138ec:	6804      	ldr	r4, [r0, #0]
{
   138ee:	4680      	mov	r8, r0
	while (rx) {
   138f0:	b334      	cbz	r4, 13940 <ll_rx_mem_release+0x58>
			LL_ASSERT(0);
   138f2:	4f54      	ldr	r7, [pc, #336]	; (13a44 <ll_rx_mem_release+0x15c>)
   138f4:	f8df 9150 	ldr.w	r9, [pc, #336]	; 13a48 <ll_rx_mem_release+0x160>
   138f8:	4e54      	ldr	r6, [pc, #336]	; (13a4c <ll_rx_mem_release+0x164>)
		rx = rx->next;
   138fa:	4625      	mov	r5, r4
   138fc:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   138fe:	792b      	ldrb	r3, [r5, #4]
   13900:	2b19      	cmp	r3, #25
   13902:	d80e      	bhi.n	13922 <ll_rx_mem_release+0x3a>
   13904:	e8df f003 	tbb	[pc, r3]
   13908:	360d0d36 	.word	0x360d0d36
   1390c:	0d0d0d0d 	.word	0x0d0d0d0d
   13910:	0d0d0d0d 	.word	0x0d0d0d0d
   13914:	0d0d0d0d 	.word	0x0d0d0d0d
   13918:	240d0d0d 	.word	0x240d0d0d
   1391c:	36363654 	.word	0x36363654
   13920:	3636      	.short	0x3636
			LL_ASSERT(0);
   13922:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
   13926:	463a      	mov	r2, r7
   13928:	4649      	mov	r1, r9
   1392a:	4630      	mov	r0, r6
   1392c:	f00d fcb2 	bl	21294 <printk>
   13930:	4040      	eors	r0, r0
   13932:	f380 8811 	msr	BASEPRI, r0
   13936:	f04f 0003 	mov.w	r0, #3
   1393a:	df02      	svc	2
	while (rx) {
   1393c:	2c00      	cmp	r4, #0
   1393e:	d1dc      	bne.n	138fa <ll_rx_mem_release+0x12>
	*node_rx = rx;
   13940:	2300      	movs	r3, #0
   13942:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   13946:	20ff      	movs	r0, #255	; 0xff
}
   13948:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   1394c:	f7ff ba5a 	b.w	12e04 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   13950:	7f2b      	ldrb	r3, [r5, #28]
   13952:	2b3c      	cmp	r3, #60	; 0x3c
   13954:	d05f      	beq.n	13a16 <ll_rx_mem_release+0x12e>
				LL_ASSERT(!cc->status);
   13956:	b1db      	cbz	r3, 13990 <ll_rx_mem_release+0xa8>
   13958:	493d      	ldr	r1, [pc, #244]	; (13a50 <ll_rx_mem_release+0x168>)
   1395a:	f240 4326 	movw	r3, #1062	; 0x426
   1395e:	463a      	mov	r2, r7
   13960:	4630      	mov	r0, r6
   13962:	f00d fc97 	bl	21294 <printk>
   13966:	4040      	eors	r0, r0
   13968:	f380 8811 	msr	BASEPRI, r0
   1396c:	f04f 0003 	mov.w	r0, #3
   13970:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   13972:	792b      	ldrb	r3, [r5, #4]
   13974:	b963      	cbnz	r3, 13990 <ll_rx_mem_release+0xa8>
   13976:	4937      	ldr	r1, [pc, #220]	; (13a54 <ll_rx_mem_release+0x16c>)
   13978:	f240 436c 	movw	r3, #1132	; 0x46c
   1397c:	463a      	mov	r2, r7
   1397e:	4630      	mov	r0, r6
   13980:	f00d fc88 	bl	21294 <printk>
   13984:	4040      	eors	r0, r0
   13986:	f380 8811 	msr	BASEPRI, r0
   1398a:	f04f 0003 	mov.w	r0, #3
   1398e:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13990:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 13a58 <ll_rx_mem_release+0x170>
   13994:	f89a 3000 	ldrb.w	r3, [sl]
   13998:	2b06      	cmp	r3, #6
   1399a:	d82c      	bhi.n	139f6 <ll_rx_mem_release+0x10e>
	mem_link_rx.quota_pdu += delta;
   1399c:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   1399e:	492f      	ldr	r1, [pc, #188]	; (13a5c <ll_rx_mem_release+0x174>)
	mem_link_rx.quota_pdu += delta;
   139a0:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   139a4:	4628      	mov	r0, r5
   139a6:	f7fc fa89 	bl	febc <mem_release>
	while (rx) {
   139aa:	2c00      	cmp	r4, #0
   139ac:	d1a5      	bne.n	138fa <ll_rx_mem_release+0x12>
   139ae:	e7c7      	b.n	13940 <ll_rx_mem_release+0x58>
			conn = ll_conn_get(rx_free->handle);
   139b0:	88e8      	ldrh	r0, [r5, #6]
   139b2:	f001 fc63 	bl	1527c <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   139b6:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
   139b8:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   139ba:	b163      	cbz	r3, 139d6 <ll_rx_mem_release+0xee>
   139bc:	4928      	ldr	r1, [pc, #160]	; (13a60 <ll_rx_mem_release+0x178>)
   139be:	f240 4393 	movw	r3, #1171	; 0x493
   139c2:	463a      	mov	r2, r7
   139c4:	4630      	mov	r0, r6
   139c6:	f00d fc65 	bl	21294 <printk>
   139ca:	4040      	eors	r0, r0
   139cc:	f380 8811 	msr	BASEPRI, r0
   139d0:	f04f 0003 	mov.w	r0, #3
   139d4:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   139d6:	f105 016c 	add.w	r1, r5, #108	; 0x6c
   139da:	f105 0068 	add.w	r0, r5, #104	; 0x68
   139de:	f7fc faad 	bl	ff3c <memq_deinit>
			LL_ASSERT(link);
   139e2:	4682      	mov	sl, r0
   139e4:	b1f8      	cbz	r0, 13a26 <ll_rx_mem_release+0x13e>
			conn->lll.link_tx_free = link;
   139e6:	f8c5 a078 	str.w	sl, [r5, #120]	; 0x78
			ll_conn_release(conn);
   139ea:	4628      	mov	r0, r5
   139ec:	f001 fc38 	bl	15260 <ll_conn_release>
	while (rx) {
   139f0:	2c00      	cmp	r4, #0
   139f2:	d182      	bne.n	138fa <ll_rx_mem_release+0x12>
   139f4:	e7a4      	b.n	13940 <ll_rx_mem_release+0x58>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   139f6:	491b      	ldr	r1, [pc, #108]	; (13a64 <ll_rx_mem_release+0x17c>)
   139f8:	f240 43ac 	movw	r3, #1196	; 0x4ac
   139fc:	463a      	mov	r2, r7
   139fe:	4630      	mov	r0, r6
   13a00:	f00d fc48 	bl	21294 <printk>
   13a04:	4040      	eors	r0, r0
   13a06:	f380 8811 	msr	BASEPRI, r0
   13a0a:	f04f 0003 	mov.w	r0, #3
   13a0e:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   13a10:	f89a 3000 	ldrb.w	r3, [sl]
   13a14:	e7c2      	b.n	1399c <ll_rx_mem_release+0xb4>
				mem_release(rx_free, &mem_pdu_rx.free);
   13a16:	4911      	ldr	r1, [pc, #68]	; (13a5c <ll_rx_mem_release+0x174>)
   13a18:	4628      	mov	r0, r5
   13a1a:	f7fc fa4f 	bl	febc <mem_release>
	while (rx) {
   13a1e:	2c00      	cmp	r4, #0
   13a20:	f47f af6b 	bne.w	138fa <ll_rx_mem_release+0x12>
   13a24:	e78c      	b.n	13940 <ll_rx_mem_release+0x58>
			LL_ASSERT(link);
   13a26:	4910      	ldr	r1, [pc, #64]	; (13a68 <ll_rx_mem_release+0x180>)
   13a28:	f240 4396 	movw	r3, #1174	; 0x496
   13a2c:	463a      	mov	r2, r7
   13a2e:	4630      	mov	r0, r6
   13a30:	f00d fc30 	bl	21294 <printk>
   13a34:	4040      	eors	r0, r0
   13a36:	f380 8811 	msr	BASEPRI, r0
   13a3a:	f04f 0003 	mov.w	r0, #3
   13a3e:	df02      	svc	2
   13a40:	e7d1      	b.n	139e6 <ll_rx_mem_release+0xfe>
   13a42:	bf00      	nop
   13a44:	00027cf8 	.word	0x00027cf8
   13a48:	00027b4c 	.word	0x00027b4c
   13a4c:	00027ab4 	.word	0x00027ab4
   13a50:	00027df0 	.word	0x00027df0
   13a54:	00027dfc 	.word	0x00027dfc
   13a58:	2000da80 	.word	0x2000da80
   13a5c:	2000dae0 	.word	0x2000dae0
   13a60:	00027e20 	.word	0x00027e20
   13a64:	00027d78 	.word	0x00027d78
   13a68:	00027fc0 	.word	0x00027fc0

00013a6c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   13a6c:	4801      	ldr	r0, [pc, #4]	; (13a74 <ll_rx_link_alloc+0x8>)
   13a6e:	f7fc ba0b 	b.w	fe88 <mem_acquire>
   13a72:	bf00      	nop
   13a74:	2000da84 	.word	0x2000da84

00013a78 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   13a78:	4901      	ldr	r1, [pc, #4]	; (13a80 <ll_rx_link_release+0x8>)
   13a7a:	f7fc ba1f 	b.w	febc <mem_release>
   13a7e:	bf00      	nop
   13a80:	2000da84 	.word	0x2000da84

00013a84 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   13a84:	4801      	ldr	r0, [pc, #4]	; (13a8c <ll_rx_alloc+0x8>)
   13a86:	f7fc b9ff 	b.w	fe88 <mem_acquire>
   13a8a:	bf00      	nop
   13a8c:	2000dae0 	.word	0x2000dae0

00013a90 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   13a90:	4901      	ldr	r1, [pc, #4]	; (13a98 <ll_rx_release+0x8>)
   13a92:	f7fc ba13 	b.w	febc <mem_release>
   13a96:	bf00      	nop
   13a98:	2000dae0 	.word	0x2000dae0

00013a9c <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13a9c:	4b02      	ldr	r3, [pc, #8]	; (13aa8 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13a9e:	4a03      	ldr	r2, [pc, #12]	; (13aac <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13aa0:	78db      	ldrb	r3, [r3, #3]
   13aa2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13aa4:	f7fc ba54 	b.w	ff50 <memq_enqueue>
   13aa8:	200004d8 	.word	0x200004d8
   13aac:	2000dd70 	.word	0x2000dd70

00013ab0 <ll_rx_sched>:
	k_sem_give(sem_recv);
   13ab0:	4b01      	ldr	r3, [pc, #4]	; (13ab8 <ll_rx_sched+0x8>)
   13ab2:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   13ab4:	f00c b88e 	b.w	1fbd4 <z_impl_k_sem_give>
   13ab8:	2000dd7c 	.word	0x2000dd7c

00013abc <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   13abc:	4b0d      	ldr	r3, [pc, #52]	; (13af4 <ll_pdu_rx_alloc_peek+0x38>)
   13abe:	789a      	ldrb	r2, [r3, #2]
   13ac0:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   13ac4:	4562      	cmp	r2, ip
   13ac6:	d809      	bhi.n	13adc <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   13ac8:	ebac 0102 	sub.w	r1, ip, r2
   13acc:	b2c9      	uxtb	r1, r1
   13ace:	4288      	cmp	r0, r1
   13ad0:	d802      	bhi.n	13ad8 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   13ad2:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   13ad4:	7819      	ldrb	r1, [r3, #0]
   13ad6:	d108      	bne.n	13aea <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   13ad8:	2000      	movs	r0, #0
}
   13ada:	4770      	bx	lr
		return count - first + last;
   13adc:	7859      	ldrb	r1, [r3, #1]
   13ade:	1a89      	subs	r1, r1, r2
   13ae0:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   13ae2:	b2c9      	uxtb	r1, r1
   13ae4:	4288      	cmp	r0, r1
   13ae6:	d8f7      	bhi.n	13ad8 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   13ae8:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   13aea:	fb02 3301 	mla	r3, r2, r1, r3
   13aee:	6858      	ldr	r0, [r3, #4]
   13af0:	4770      	bx	lr
   13af2:	bf00      	nop
   13af4:	20000388 	.word	0x20000388

00013af8 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   13af8:	4b09      	ldr	r3, [pc, #36]	; (13b20 <ll_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   13afa:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   13afc:	78da      	ldrb	r2, [r3, #3]
   13afe:	7818      	ldrb	r0, [r3, #0]
   13b00:	f893 c001 	ldrb.w	ip, [r3, #1]
   13b04:	428a      	cmp	r2, r1
   13b06:	d009      	beq.n	13b1c <ll_pdu_rx_alloc+0x24>
	_first += 1U;
   13b08:	1c4a      	adds	r2, r1, #1
   13b0a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   13b0c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   13b10:	4594      	cmp	ip, r2
   13b12:	bf08      	it	eq
   13b14:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   13b16:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   13b18:	709a      	strb	r2, [r3, #2]

	return mem;
   13b1a:	4770      	bx	lr
		return NULL;
   13b1c:	2000      	movs	r0, #0
}
   13b1e:	4770      	bx	lr
   13b20:	20000388 	.word	0x20000388

00013b24 <ll_tx_ack_put>:
{
   13b24:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   13b26:	4a15      	ldr	r2, [pc, #84]	; (13b7c <ll_tx_ack_put+0x58>)
   13b28:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   13b2a:	f892 e001 	ldrb.w	lr, [r2, #1]
   13b2e:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   13b32:	1c63      	adds	r3, r4, #1
   13b34:	b2db      	uxtb	r3, r3
		last = 0U;
   13b36:	459e      	cmp	lr, r3
   13b38:	bf08      	it	eq
   13b3a:	2300      	moveq	r3, #0
	if (last == first) {
   13b3c:	459c      	cmp	ip, r3
   13b3e:	d00c      	beq.n	13b5a <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   13b40:	4696      	mov	lr, r2
   13b42:	f81e cb04 	ldrb.w	ip, [lr], #4
   13b46:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(tx);
   13b4a:	eb1e 040c 	adds.w	r4, lr, ip
   13b4e:	d004      	beq.n	13b5a <ll_tx_ack_put+0x36>
	tx->handle = handle;
   13b50:	f82e 000c 	strh.w	r0, [lr, ip]
	tx->node = node_tx;
   13b54:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   13b56:	70d3      	strb	r3, [r2, #3]
}
   13b58:	bd10      	pop	{r4, pc}
	LL_ASSERT(tx);
   13b5a:	4a09      	ldr	r2, [pc, #36]	; (13b80 <ll_tx_ack_put+0x5c>)
   13b5c:	4909      	ldr	r1, [pc, #36]	; (13b84 <ll_tx_ack_put+0x60>)
   13b5e:	480a      	ldr	r0, [pc, #40]	; (13b88 <ll_tx_ack_put+0x64>)
   13b60:	f240 43f4 	movw	r3, #1268	; 0x4f4
   13b64:	f00d fb96 	bl	21294 <printk>
   13b68:	4040      	eors	r0, r0
   13b6a:	f380 8811 	msr	BASEPRI, r0
   13b6e:	f04f 0003 	mov.w	r0, #3
   13b72:	df02      	svc	2
	tx->handle = handle;
   13b74:	2300      	movs	r3, #0
   13b76:	801b      	strh	r3, [r3, #0]
   13b78:	deff      	udf	#255	; 0xff
   13b7a:	bf00      	nop
   13b7c:	200004d8 	.word	0x200004d8
   13b80:	00027cf8 	.word	0x00027cf8
   13b84:	00027fb4 	.word	0x00027fb4
   13b88:	00027ab4 	.word	0x00027ab4

00013b8c <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   13b8c:	2200      	movs	r2, #0
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   13b8e:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   13b90:	7002      	strb	r2, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   13b92:	700b      	strb	r3, [r1, #0]
}
   13b94:	4770      	bx	lr
   13b96:	bf00      	nop

00013b98 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   13b98:	2200      	movs	r2, #0
{
   13b9a:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   13b9c:	4611      	mov	r1, r2
   13b9e:	4b0a      	ldr	r3, [pc, #40]	; (13bc8 <ll_radio_state_abort+0x30>)
   13ba0:	2001      	movs	r0, #1
   13ba2:	f7fc fa49 	bl	10038 <mayfly_enqueue>
	LL_ASSERT(!ret);
   13ba6:	b900      	cbnz	r0, 13baa <ll_radio_state_abort+0x12>
}
   13ba8:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   13baa:	4a08      	ldr	r2, [pc, #32]	; (13bcc <ll_radio_state_abort+0x34>)
   13bac:	4908      	ldr	r1, [pc, #32]	; (13bd0 <ll_radio_state_abort+0x38>)
   13bae:	4809      	ldr	r0, [pc, #36]	; (13bd4 <ll_radio_state_abort+0x3c>)
   13bb0:	f240 530c 	movw	r3, #1292	; 0x50c
   13bb4:	f00d fb6e 	bl	21294 <printk>
   13bb8:	4040      	eors	r0, r0
   13bba:	f380 8811 	msr	BASEPRI, r0
   13bbe:	f04f 0003 	mov.w	r0, #3
   13bc2:	df02      	svc	2
}
   13bc4:	bd08      	pop	{r3, pc}
   13bc6:	bf00      	nop
   13bc8:	2000052c 	.word	0x2000052c
   13bcc:	00027cf8 	.word	0x00027cf8
   13bd0:	00027d50 	.word	0x00027d50
   13bd4:	00027ab4 	.word	0x00027ab4

00013bd8 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13bd8:	f030 0302 	bics.w	r3, r0, #2
{
   13bdc:	b510      	push	{r4, lr}
   13bde:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13be0:	d002      	beq.n	13be8 <ull_ticker_status_take+0x10>
   13be2:	680b      	ldr	r3, [r1, #0]
   13be4:	2b02      	cmp	r3, #2
   13be6:	d008      	beq.n	13bfa <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   13be8:	f04f 32ff 	mov.w	r2, #4294967295
   13bec:	f04f 33ff 	mov.w	r3, #4294967295
   13bf0:	4809      	ldr	r0, [pc, #36]	; (13c18 <ull_ticker_status_take+0x40>)
   13bf2:	f00c f815 	bl	1fc20 <z_impl_k_sem_take>
	return *ret_cb;
   13bf6:	6820      	ldr	r0, [r4, #0]
}
   13bf8:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13bfa:	4a08      	ldr	r2, [pc, #32]	; (13c1c <ull_ticker_status_take+0x44>)
   13bfc:	4908      	ldr	r1, [pc, #32]	; (13c20 <ull_ticker_status_take+0x48>)
   13bfe:	4809      	ldr	r0, [pc, #36]	; (13c24 <ull_ticker_status_take+0x4c>)
   13c00:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   13c04:	f00d fb46 	bl	21294 <printk>
   13c08:	4040      	eors	r0, r0
   13c0a:	f380 8811 	msr	BASEPRI, r0
   13c0e:	f04f 0003 	mov.w	r0, #3
   13c12:	df02      	svc	2
   13c14:	e7e8      	b.n	13be8 <ull_ticker_status_take+0x10>
   13c16:	bf00      	nop
   13c18:	2000dd80 	.word	0x2000dd80
   13c1c:	00027cf8 	.word	0x00027cf8
   13c20:	00027e38 	.word	0x00027e38
   13c24:	00027ab4 	.word	0x00027ab4

00013c28 <ull_disable_mark>:
	if (!*m) {
   13c28:	4a03      	ldr	r2, [pc, #12]	; (13c38 <ull_disable_mark+0x10>)
{
   13c2a:	4603      	mov	r3, r0
	if (!*m) {
   13c2c:	6810      	ldr	r0, [r2, #0]
   13c2e:	b100      	cbz	r0, 13c32 <ull_disable_mark+0xa>
}
   13c30:	4770      	bx	lr
		*m = param;
   13c32:	6013      	str	r3, [r2, #0]
   13c34:	4618      	mov	r0, r3
}
   13c36:	4770      	bx	lr
   13c38:	2000d9bc 	.word	0x2000d9bc

00013c3c <ull_disable_unmark>:
	if (*m && *m == param) {
   13c3c:	4a04      	ldr	r2, [pc, #16]	; (13c50 <ull_disable_unmark+0x14>)
   13c3e:	6813      	ldr	r3, [r2, #0]
   13c40:	b123      	cbz	r3, 13c4c <ull_disable_unmark+0x10>
   13c42:	4298      	cmp	r0, r3
		*m = NULL;
   13c44:	bf06      	itte	eq
   13c46:	2100      	moveq	r1, #0
   13c48:	6011      	streq	r1, [r2, #0]
	return NULL;
   13c4a:	2300      	movne	r3, #0
}
   13c4c:	4618      	mov	r0, r3
   13c4e:	4770      	bx	lr
   13c50:	2000d9bc 	.word	0x2000d9bc

00013c54 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   13c54:	4b01      	ldr	r3, [pc, #4]	; (13c5c <ull_disable_mark_get+0x8>)
}
   13c56:	6818      	ldr	r0, [r3, #0]
   13c58:	4770      	bx	lr
   13c5a:	bf00      	nop
   13c5c:	2000d9bc 	.word	0x2000d9bc

00013c60 <ull_update_mark>:
	if (!*m) {
   13c60:	4a03      	ldr	r2, [pc, #12]	; (13c70 <ull_update_mark+0x10>)
{
   13c62:	4603      	mov	r3, r0
	if (!*m) {
   13c64:	6810      	ldr	r0, [r2, #0]
   13c66:	b100      	cbz	r0, 13c6a <ull_update_mark+0xa>
}
   13c68:	4770      	bx	lr
		*m = param;
   13c6a:	6013      	str	r3, [r2, #0]
   13c6c:	4618      	mov	r0, r3
}
   13c6e:	4770      	bx	lr
   13c70:	2000d9c0 	.word	0x2000d9c0

00013c74 <ull_update_unmark>:
	if (*m && *m == param) {
   13c74:	4a04      	ldr	r2, [pc, #16]	; (13c88 <ull_update_unmark+0x14>)
   13c76:	6813      	ldr	r3, [r2, #0]
   13c78:	b123      	cbz	r3, 13c84 <ull_update_unmark+0x10>
   13c7a:	4298      	cmp	r0, r3
		*m = NULL;
   13c7c:	bf06      	itte	eq
   13c7e:	2100      	moveq	r1, #0
   13c80:	6011      	streq	r1, [r2, #0]
	return NULL;
   13c82:	2300      	movne	r3, #0
}
   13c84:	4618      	mov	r0, r3
   13c86:	4770      	bx	lr
   13c88:	2000d9c0 	.word	0x2000d9c0

00013c8c <ull_update_mark_get>:
	return mark_get(mark_update);
   13c8c:	4b01      	ldr	r3, [pc, #4]	; (13c94 <ull_update_mark_get+0x8>)
}
   13c8e:	6818      	ldr	r0, [r3, #0]
   13c90:	4770      	bx	lr
   13c92:	bf00      	nop
   13c94:	2000d9c0 	.word	0x2000d9c0

00013c98 <ull_disable>:
{
   13c98:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   13c9a:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   13c9c:	f115 0f10 	cmn.w	r5, #16
{
   13ca0:	b087      	sub	sp, #28
	if (!hdr) {
   13ca2:	d00b      	beq.n	13cbc <ull_disable+0x24>
	compiler_barrier();
   13ca4:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   13ca6:	2201      	movs	r2, #1
   13ca8:	2100      	movs	r1, #0
   13caa:	4668      	mov	r0, sp
   13cac:	f012 fd92 	bl	267d4 <z_impl_k_sem_init>
   13cb0:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   13cb2:	4a13      	ldr	r2, [pc, #76]	; (13d00 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   13cb4:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   13cb8:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   13cba:	b913      	cbnz	r3, 13cc2 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   13cbc:	2000      	movs	r0, #0
}
   13cbe:	b007      	add	sp, #28
   13cc0:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   13cc2:	4b10      	ldr	r3, [pc, #64]	; (13d04 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   13cc4:	2200      	movs	r2, #0
   13cc6:	4611      	mov	r1, r2
   13cc8:	2003      	movs	r0, #3
	mfy.param = lll;
   13cca:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   13ccc:	f7fc f9b4 	bl	10038 <mayfly_enqueue>
	LL_ASSERT(!ret);
   13cd0:	b940      	cbnz	r0, 13ce4 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   13cd2:	f04f 32ff 	mov.w	r2, #4294967295
   13cd6:	f04f 33ff 	mov.w	r3, #4294967295
   13cda:	4668      	mov	r0, sp
   13cdc:	f00b ffa0 	bl	1fc20 <z_impl_k_sem_take>
}
   13ce0:	b007      	add	sp, #28
   13ce2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   13ce4:	4a08      	ldr	r2, [pc, #32]	; (13d08 <ull_disable+0x70>)
   13ce6:	4909      	ldr	r1, [pc, #36]	; (13d0c <ull_disable+0x74>)
   13ce8:	4809      	ldr	r0, [pc, #36]	; (13d10 <ull_disable+0x78>)
   13cea:	f240 539a 	movw	r3, #1434	; 0x59a
   13cee:	f00d fad1 	bl	21294 <printk>
   13cf2:	4040      	eors	r0, r0
   13cf4:	f380 8811 	msr	BASEPRI, r0
   13cf8:	f04f 0003 	mov.w	r0, #3
   13cfc:	df02      	svc	2
   13cfe:	e7e8      	b.n	13cd2 <ull_disable+0x3a>
   13d00:	00012d35 	.word	0x00012d35
   13d04:	2000051c 	.word	0x2000051c
   13d08:	00027cf8 	.word	0x00027cf8
   13d0c:	00027d50 	.word	0x00027d50
   13d10:	00027ab4 	.word	0x00027ab4

00013d14 <ull_ticker_stop_with_mark>:
{
   13d14:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   13d16:	4d1d      	ldr	r5, [pc, #116]	; (13d8c <ull_ticker_stop_with_mark+0x78>)
   13d18:	682b      	ldr	r3, [r5, #0]
{
   13d1a:	b085      	sub	sp, #20
   13d1c:	460c      	mov	r4, r1
   13d1e:	4616      	mov	r6, r2
	if (!*m) {
   13d20:	b323      	cbz	r3, 13d6c <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
   13d22:	4299      	cmp	r1, r3
   13d24:	d112      	bne.n	13d4c <ull_ticker_stop_with_mark+0x38>
	ret_cb = TICKER_STATUS_BUSY;
   13d26:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13d28:	af03      	add	r7, sp, #12
   13d2a:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   13d2c:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   13d2e:	2103      	movs	r1, #3
   13d30:	4b17      	ldr	r3, [pc, #92]	; (13d90 <ull_ticker_stop_with_mark+0x7c>)
   13d32:	9700      	str	r7, [sp, #0]
   13d34:	2000      	movs	r0, #0
   13d36:	f7fd fb79 	bl	1142c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   13d3a:	4639      	mov	r1, r7
   13d3c:	f7ff ff4c 	bl	13bd8 <ull_ticker_status_take>
	if (ret) {
   13d40:	b140      	cbz	r0, 13d54 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
   13d42:	682b      	ldr	r3, [r5, #0]
   13d44:	b10b      	cbz	r3, 13d4a <ull_ticker_stop_with_mark+0x36>
   13d46:	429c      	cmp	r4, r3
   13d48:	d012      	beq.n	13d70 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
   13d4a:	b1cc      	cbz	r4, 13d80 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
   13d4c:	f06f 0021 	mvn.w	r0, #33	; 0x21
}
   13d50:	b005      	add	sp, #20
   13d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   13d54:	4630      	mov	r0, r6
   13d56:	f7ff ff9f 	bl	13c98 <ull_disable>
	if (ret) {
   13d5a:	b9a0      	cbnz	r0, 13d86 <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
   13d5c:	682b      	ldr	r3, [r5, #0]
   13d5e:	b10b      	cbz	r3, 13d64 <ull_ticker_stop_with_mark+0x50>
   13d60:	429c      	cmp	r4, r3
   13d62:	d00b      	beq.n	13d7c <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
   13d64:	2c00      	cmp	r4, #0
   13d66:	d1f1      	bne.n	13d4c <ull_ticker_stop_with_mark+0x38>
}
   13d68:	b005      	add	sp, #20
   13d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   13d6c:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   13d6e:	e7da      	b.n	13d26 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   13d70:	2300      	movs	r3, #0
		return -EALREADY;
   13d72:	f06f 0044 	mvn.w	r0, #68	; 0x44
		*m = NULL;
   13d76:	602b      	str	r3, [r5, #0]
}
   13d78:	b005      	add	sp, #20
   13d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   13d7c:	6028      	str	r0, [r5, #0]
	if (mark != param) {
   13d7e:	e7e7      	b.n	13d50 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
   13d80:	f06f 0044 	mvn.w	r0, #68	; 0x44
   13d84:	e7e4      	b.n	13d50 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
   13d86:	f06f 000f 	mvn.w	r0, #15
   13d8a:	e7e1      	b.n	13d50 <ull_ticker_stop_with_mark+0x3c>
   13d8c:	2000d9bc 	.word	0x2000d9bc
   13d90:	00012d29 	.word	0x00012d29

00013d94 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   13d94:	4b0d      	ldr	r3, [pc, #52]	; (13dcc <ull_pdu_rx_alloc_peek+0x38>)
   13d96:	789a      	ldrb	r2, [r3, #2]
   13d98:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   13d9c:	4562      	cmp	r2, ip
   13d9e:	d809      	bhi.n	13db4 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   13da0:	ebac 0102 	sub.w	r1, ip, r2
   13da4:	b2c9      	uxtb	r1, r1
   13da6:	4288      	cmp	r0, r1
   13da8:	d802      	bhi.n	13db0 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   13daa:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   13dac:	7819      	ldrb	r1, [r3, #0]
   13dae:	d108      	bne.n	13dc2 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   13db0:	2000      	movs	r0, #0
}
   13db2:	4770      	bx	lr
		return count - first + last;
   13db4:	7859      	ldrb	r1, [r3, #1]
   13db6:	1a89      	subs	r1, r1, r2
   13db8:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   13dba:	b2c9      	uxtb	r1, r1
   13dbc:	4288      	cmp	r0, r1
   13dbe:	d8f7      	bhi.n	13db0 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   13dc0:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   13dc2:	fb02 3301 	mla	r3, r2, r1, r3
   13dc6:	6858      	ldr	r0, [r3, #4]
   13dc8:	4770      	bx	lr
   13dca:	bf00      	nop
   13dcc:	2000039c 	.word	0x2000039c

00013dd0 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   13dd0:	4b09      	ldr	r3, [pc, #36]	; (13df8 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   13dd2:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   13dd4:	78da      	ldrb	r2, [r3, #3]
   13dd6:	7818      	ldrb	r0, [r3, #0]
   13dd8:	f893 c001 	ldrb.w	ip, [r3, #1]
   13ddc:	428a      	cmp	r2, r1
   13dde:	d009      	beq.n	13df4 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   13de0:	1c4a      	adds	r2, r1, #1
   13de2:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   13de4:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   13de8:	4594      	cmp	ip, r2
   13dea:	bf08      	it	eq
   13dec:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   13dee:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   13df0:	709a      	strb	r2, [r3, #2]
	return mem;
   13df2:	4770      	bx	lr
		return NULL;
   13df4:	2000      	movs	r0, #0
}
   13df6:	4770      	bx	lr
   13df8:	2000039c 	.word	0x2000039c

00013dfc <ull_rx_put>:
{
   13dfc:	b538      	push	{r3, r4, r5, lr}
   13dfe:	460c      	mov	r4, r1
   13e00:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13e02:	f004 fe31 	bl	18a68 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13e06:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13e08:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13e0a:	4a03      	ldr	r2, [pc, #12]	; (13e18 <ull_rx_put+0x1c>)
   13e0c:	4628      	mov	r0, r5
}
   13e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13e12:	f7fc b89d 	b.w	ff50 <memq_enqueue>
   13e16:	bf00      	nop
   13e18:	2000dd78 	.word	0x2000dd78

00013e1c <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   13e1c:	2201      	movs	r2, #1
   13e1e:	4b02      	ldr	r3, [pc, #8]	; (13e28 <ull_rx_sched+0xc>)
   13e20:	4611      	mov	r1, r2
   13e22:	2000      	movs	r0, #0
   13e24:	f7fc b908 	b.w	10038 <mayfly_enqueue>
   13e28:	2000050c 	.word	0x2000050c

00013e2c <ull_prepare_enqueue>:
{
   13e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   13e30:	4e18      	ldr	r6, [pc, #96]	; (13e94 <ull_prepare_enqueue+0x68>)
{
   13e32:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
   13e36:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   13e38:	78f3      	ldrb	r3, [r6, #3]
{
   13e3a:	4680      	mov	r8, r0
	last = last + 1;
   13e3c:	1c5d      	adds	r5, r3, #1
	if (last == count) {
   13e3e:	7870      	ldrb	r0, [r6, #1]
	last = last + 1;
   13e40:	b2ed      	uxtb	r5, r5
		last = 0U;
   13e42:	42a8      	cmp	r0, r5
   13e44:	bf08      	it	eq
   13e46:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   13e48:	78b0      	ldrb	r0, [r6, #2]
	if (last == first) {
   13e4a:	42a8      	cmp	r0, r5
   13e4c:	d01e      	beq.n	13e8c <ull_prepare_enqueue+0x60>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   13e4e:	4634      	mov	r4, r6
   13e50:	460f      	mov	r7, r1
   13e52:	4611      	mov	r1, r2
   13e54:	f814 2b04 	ldrb.w	r2, [r4], #4
   13e58:	fb02 4403 	mla	r4, r2, r3, r4
	if (!e) {
   13e5c:	b1b4      	cbz	r4, 13e8c <ull_prepare_enqueue+0x60>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   13e5e:	2210      	movs	r2, #16
   13e60:	4620      	mov	r0, r4
   13e62:	f00f fe8a 	bl	23b7a <memcpy>
	e->is_resume = is_resume;
   13e66:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->prio = prio;
   13e6a:	9a08      	ldr	r2, [sp, #32]
	e->abort_cb = abort_cb;
   13e6c:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   13e6e:	f00a 0a01 	and.w	sl, sl, #1
   13e72:	f023 0303 	bic.w	r3, r3, #3
   13e76:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   13e7a:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->prio = prio;
   13e7e:	61e2      	str	r2, [r4, #28]
	e->is_resume = is_resume;
   13e80:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   13e84:	2000      	movs	r0, #0
	*last = idx; /* Commit: Update write index */
   13e86:	70f5      	strb	r5, [r6, #3]
}
   13e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   13e8c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   13e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e94:	200003b4 	.word	0x200003b4

00013e98 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   13e98:	4b05      	ldr	r3, [pc, #20]	; (13eb0 <ull_prepare_dequeue_get+0x18>)
   13e9a:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   13e9c:	78da      	ldrb	r2, [r3, #3]
   13e9e:	7819      	ldrb	r1, [r3, #0]
   13ea0:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   13ea2:	bf1a      	itte	ne
   13ea4:	3304      	addne	r3, #4
   13ea6:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   13eaa:	2000      	moveq	r0, #0
}
   13eac:	4770      	bx	lr
   13eae:	bf00      	nop
   13eb0:	200003b4 	.word	0x200003b4

00013eb4 <ull_prepare_dequeue_iter>:
{
   13eb4:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   13eb6:	4b0d      	ldr	r3, [pc, #52]	; (13eec <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   13eb8:	7802      	ldrb	r2, [r0, #0]
   13eba:	7859      	ldrb	r1, [r3, #1]
   13ebc:	f893 c003 	ldrb.w	ip, [r3, #3]
   13ec0:	f893 e000 	ldrb.w	lr, [r3]
   13ec4:	4291      	cmp	r1, r2
   13ec6:	bf9c      	itt	ls
   13ec8:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   13eca:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   13ecc:	4594      	cmp	ip, r2
   13ece:	d00a      	beq.n	13ee6 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   13ed0:	1c53      	adds	r3, r2, #1
   13ed2:	b2db      	uxtb	r3, r3
		i = 0U;
   13ed4:	4299      	cmp	r1, r3
   13ed6:	bf08      	it	eq
   13ed8:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   13eda:	4905      	ldr	r1, [pc, #20]	; (13ef0 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   13edc:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   13ede:	fb02 100e 	mla	r0, r2, lr, r1
}
   13ee2:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   13ee6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   13ee8:	e7fb      	b.n	13ee2 <ull_prepare_dequeue_iter+0x2e>
   13eea:	bf00      	nop
   13eec:	200003b4 	.word	0x200003b4
   13ef0:	200003b8 	.word	0x200003b8

00013ef4 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   13ef4:	4b06      	ldr	r3, [pc, #24]	; (13f10 <ull_event_done_extra_get+0x1c>)
   13ef6:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   13ef8:	78d9      	ldrb	r1, [r3, #3]
   13efa:	7818      	ldrb	r0, [r3, #0]
   13efc:	4291      	cmp	r1, r2
   13efe:	d005      	beq.n	13f0c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   13f00:	fb02 3300 	mla	r3, r2, r0, r3
   13f04:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   13f06:	b110      	cbz	r0, 13f0e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   13f08:	3020      	adds	r0, #32
   13f0a:	4770      	bx	lr
		return NULL;
   13f0c:	2000      	movs	r0, #0
}
   13f0e:	4770      	bx	lr
   13f10:	20000374 	.word	0x20000374

00013f14 <ull_event_done>:
{
   13f14:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   13f16:	4a14      	ldr	r2, [pc, #80]	; (13f68 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   13f18:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   13f1a:	78d4      	ldrb	r4, [r2, #3]
   13f1c:	7811      	ldrb	r1, [r2, #0]
   13f1e:	7855      	ldrb	r5, [r2, #1]
   13f20:	429c      	cmp	r4, r3
   13f22:	d01f      	beq.n	13f64 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   13f24:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   13f28:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   13f2a:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   13f2c:	b2db      	uxtb	r3, r3
		_first = 0U;
   13f2e:	429d      	cmp	r5, r3
   13f30:	bf08      	it	eq
   13f32:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13f34:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   13f36:	b19c      	cbz	r4, 13f60 <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   13f38:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   13f3a:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   13f3c:	6826      	ldr	r6, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   13f3e:	7123      	strb	r3, [r4, #4]
	evdone->hdr.link = NULL;
   13f40:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   13f42:	61e0      	str	r0, [r4, #28]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13f44:	f004 fd90 	bl	18a68 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13f48:	4a08      	ldr	r2, [pc, #32]	; (13f6c <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   13f4a:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   13f4c:	4621      	mov	r1, r4
   13f4e:	4630      	mov	r0, r6
   13f50:	f7fb fffe 	bl	ff50 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   13f54:	2201      	movs	r2, #1
   13f56:	4b06      	ldr	r3, [pc, #24]	; (13f70 <ull_event_done+0x5c>)
   13f58:	4611      	mov	r1, r2
   13f5a:	4628      	mov	r0, r5
   13f5c:	f7fc f86c 	bl	10038 <mayfly_enqueue>
}
   13f60:	4620      	mov	r0, r4
   13f62:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   13f64:	2400      	movs	r4, #0
   13f66:	e7fb      	b.n	13f60 <ull_event_done+0x4c>
   13f68:	20000374 	.word	0x20000374
   13f6c:	2000dd78 	.word	0x2000dd78
   13f70:	2000050c 	.word	0x2000050c

00013f74 <ticker_stop_cb>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder,
			   uint16_t lazy, void *param)
{
   13f74:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13f76:	491a      	ldr	r1, [pc, #104]	; (13fe0 <ticker_stop_cb+0x6c>)
   13f78:	4a1a      	ldr	r2, [pc, #104]	; (13fe4 <ticker_stop_cb+0x70>)
   13f7a:	1a59      	subs	r1, r3, r1
{
   13f7c:	461c      	mov	r4, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13f7e:	fba2 3101 	umull	r3, r1, r2, r1
	struct ll_adv_set *adv = param;
	uint8_t handle;
	uint32_t ret;

	handle = ull_adv_handle_get(adv);
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   13f82:	f411 5f7f 	tst.w	r1, #16320	; 0x3fc0
{
   13f86:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   13f88:	ea4f 1591 	mov.w	r5, r1, lsr #6
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   13f8c:	d119      	bne.n	13fc2 <ticker_stop_cb+0x4e>

	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
			  TICKER_ID_ADV_BASE + handle,
   13f8e:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   13f90:	4b15      	ldr	r3, [pc, #84]	; (13fe8 <ticker_stop_cb+0x74>)
   13f92:	9400      	str	r4, [sp, #0]
   13f94:	b2d2      	uxtb	r2, r2
   13f96:	2101      	movs	r1, #1
   13f98:	2000      	movs	r0, #0
   13f9a:	f7fd fa47 	bl	1142c <ticker_stop>
			  ticker_op_stop_cb, adv);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   13f9e:	f030 0302 	bics.w	r3, r0, #2
   13fa2:	d00c      	beq.n	13fbe <ticker_stop_cb+0x4a>
   13fa4:	4a11      	ldr	r2, [pc, #68]	; (13fec <ticker_stop_cb+0x78>)
   13fa6:	4912      	ldr	r1, [pc, #72]	; (13ff0 <ticker_stop_cb+0x7c>)
   13fa8:	4812      	ldr	r0, [pc, #72]	; (13ff4 <ticker_stop_cb+0x80>)
   13faa:	f240 63de 	movw	r3, #1758	; 0x6de
   13fae:	f00d f971 	bl	21294 <printk>
   13fb2:	4040      	eors	r0, r0
   13fb4:	f380 8811 	msr	BASEPRI, r0
   13fb8:	f04f 0003 	mov.w	r0, #3
   13fbc:	df02      	svc	2
		  (ret == TICKER_STATUS_BUSY));
}
   13fbe:	b003      	add	sp, #12
   13fc0:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   13fc2:	4a0a      	ldr	r2, [pc, #40]	; (13fec <ticker_stop_cb+0x78>)
   13fc4:	490c      	ldr	r1, [pc, #48]	; (13ff8 <ticker_stop_cb+0x84>)
   13fc6:	480b      	ldr	r0, [pc, #44]	; (13ff4 <ticker_stop_cb+0x80>)
   13fc8:	f240 63d9 	movw	r3, #1753	; 0x6d9
   13fcc:	f00d f962 	bl	21294 <printk>
   13fd0:	4040      	eors	r0, r0
   13fd2:	f380 8811 	msr	BASEPRI, r0
   13fd6:	f04f 0003 	mov.w	r0, #3
   13fda:	df02      	svc	2
   13fdc:	e7d7      	b.n	13f8e <ticker_stop_cb+0x1a>
   13fde:	bf00      	nop
   13fe0:	2000e158 	.word	0x2000e158
   13fe4:	ba2e8ba3 	.word	0xba2e8ba3
   13fe8:	000141bd 	.word	0x000141bd
   13fec:	00027e64 	.word	0x00027e64
   13ff0:	00027eb0 	.word	0x00027eb0
   13ff4:	00027ab4 	.word	0x00027ab4
   13ff8:	00027ea4 	.word	0x00027ea4

00013ffc <disabled_cb>:
		LL_ASSERT(!ret);
	}
}

static void disabled_cb(void *param)
{
   13ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
   13ffe:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
   14000:	6c6f      	ldr	r7, [r5, #68]	; 0x44
{
   14002:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   14004:	b1d7      	cbz	r7, 1403c <disabled_cb+0x40>
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;

	LL_ASSERT(adv->node_rx_cc_free);
   14006:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->link_cc_free = NULL;
   14008:	2300      	movs	r3, #0
   1400a:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   1400c:	b34c      	cbz	r4, 14062 <disabled_cb+0x66>
	rx = adv->node_rx_cc_free;
	adv->node_rx_cc_free = NULL;
   1400e:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14010:	2313      	movs	r3, #19
	adv->node_rx_cc_free = NULL;
   14012:	64a9      	str	r1, [r5, #72]	; 0x48
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14014:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   14016:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1401a:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   1401c:	221e      	movs	r2, #30
   1401e:	f104 001c 	add.w	r0, r4, #28
   14022:	f00f fdd5 	bl	23bd0 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   14026:	233c      	movs	r3, #60	; 0x3c
   14028:	7723      	strb	r3, [r4, #28]

	rx->hdr.rx_ftr.param = param;
   1402a:	60a6      	str	r6, [r4, #8]

		link = rx->hdr.link;
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	ll_rx_put(link, rx);
   1402c:	4621      	mov	r1, r4
   1402e:	4638      	mov	r0, r7
   14030:	f7ff fd34 	bl	13a9c <ll_rx_put>
	ll_rx_sched();
}
   14034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   14038:	f7ff bd3a 	b.w	13ab0 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   1403c:	4a10      	ldr	r2, [pc, #64]	; (14080 <disabled_cb+0x84>)
   1403e:	4911      	ldr	r1, [pc, #68]	; (14084 <disabled_cb+0x88>)
   14040:	4811      	ldr	r0, [pc, #68]	; (14088 <disabled_cb+0x8c>)
   14042:	f240 7315 	movw	r3, #1813	; 0x715
   14046:	f00d f925 	bl	21294 <printk>
   1404a:	4040      	eors	r0, r0
   1404c:	f380 8811 	msr	BASEPRI, r0
   14050:	f04f 0003 	mov.w	r0, #3
   14054:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   14056:	6cac      	ldr	r4, [r5, #72]	; 0x48
	link = adv->link_cc_free;
   14058:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   1405a:	2300      	movs	r3, #0
   1405c:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   1405e:	2c00      	cmp	r4, #0
   14060:	d1d5      	bne.n	1400e <disabled_cb+0x12>
   14062:	4a07      	ldr	r2, [pc, #28]	; (14080 <disabled_cb+0x84>)
   14064:	4909      	ldr	r1, [pc, #36]	; (1408c <disabled_cb+0x90>)
   14066:	4808      	ldr	r0, [pc, #32]	; (14088 <disabled_cb+0x8c>)
   14068:	f240 7319 	movw	r3, #1817	; 0x719
   1406c:	f00d f912 	bl	21294 <printk>
   14070:	4040      	eors	r0, r0
   14072:	f380 8811 	msr	BASEPRI, r0
   14076:	f04f 0003 	mov.w	r0, #3
   1407a:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   1407c:	6cac      	ldr	r4, [r5, #72]	; 0x48
   1407e:	e7c6      	b.n	1400e <disabled_cb+0x12>
   14080:	00027e64 	.word	0x00027e64
   14084:	00027ecc 	.word	0x00027ecc
   14088:	00027ab4 	.word	0x00027ab4
   1408c:	00027ee0 	.word	0x00027ee0

00014090 <ticker_cb>:
{
   14090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14094:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   14096:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1409a:	4295      	cmp	r5, r2
{
   1409c:	b08a      	sub	sp, #40	; 0x28
   1409e:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   140a0:	d017      	beq.n	140d2 <ticker_cb+0x42>
	return ++hdr->ref;
   140a2:	7c1b      	ldrb	r3, [r3, #16]
   140a4:	3301      	adds	r3, #1
   140a6:	b2db      	uxtb	r3, r3
   140a8:	4680      	mov	r8, r0
   140aa:	460f      	mov	r7, r1
   140ac:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
   140ae:	2b00      	cmp	r3, #0
   140b0:	d060      	beq.n	14174 <ticker_cb+0xe4>
		p.ticks_at_expire = ticks_at_expire;
   140b2:	4e37      	ldr	r6, [pc, #220]	; (14190 <ticker_cb+0x100>)
		mfy.param = &p;
   140b4:	4b37      	ldr	r3, [pc, #220]	; (14194 <ticker_cb+0x104>)
		p.ticks_at_expire = ticks_at_expire;
   140b6:	f8c6 8000 	str.w	r8, [r6]
	lll = &adv->lll;
   140ba:	f104 021c 	add.w	r2, r4, #28
		p.param = lll;
   140be:	60f2      	str	r2, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   140c0:	2200      	movs	r2, #0
   140c2:	4611      	mov	r1, r2
   140c4:	2001      	movs	r0, #1
		p.remainder = remainder;
   140c6:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
   140c8:	8135      	strh	r5, [r6, #8]
		mfy.param = &p;
   140ca:	609e      	str	r6, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   140cc:	f7fb ffb4 	bl	10038 <mayfly_enqueue>
		LL_ASSERT(!ret);
   140d0:	b938      	cbnz	r0, 140e2 <ticker_cb+0x52>
	if (!lll->is_hdcd)
   140d2:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   140d6:	f010 0501 	ands.w	r5, r0, #1
   140da:	d014      	beq.n	14106 <ticker_cb+0x76>
}
   140dc:	b00a      	add	sp, #40	; 0x28
   140de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   140e2:	4a2d      	ldr	r2, [pc, #180]	; (14198 <ticker_cb+0x108>)
   140e4:	492d      	ldr	r1, [pc, #180]	; (1419c <ticker_cb+0x10c>)
   140e6:	482e      	ldr	r0, [pc, #184]	; (141a0 <ticker_cb+0x110>)
   140e8:	f240 6395 	movw	r3, #1685	; 0x695
   140ec:	f00d f8d2 	bl	21294 <printk>
   140f0:	4040      	eors	r0, r0
   140f2:	f380 8811 	msr	BASEPRI, r0
   140f6:	f04f 0003 	mov.w	r0, #3
   140fa:	df02      	svc	2
	if (!lll->is_hdcd)
   140fc:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   14100:	f010 0501 	ands.w	r5, r0, #1
   14104:	d1ea      	bne.n	140dc <ticker_cb+0x4c>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   14106:	2104      	movs	r1, #4
   14108:	a809      	add	r0, sp, #36	; 0x24
   1410a:	f006 fa51 	bl	1a5b0 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1410e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14110:	4a24      	ldr	r2, [pc, #144]	; (141a4 <ticker_cb+0x114>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14112:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   14114:	fba2 1203 	umull	r1, r2, r2, r3
   14118:	1a99      	subs	r1, r3, r2
   1411a:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   1411e:	0a12      	lsrs	r2, r2, #8
   14120:	f240 1147 	movw	r1, #327	; 0x147
   14124:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14128:	4a1f      	ldr	r2, [pc, #124]	; (141a8 <ticker_cb+0x118>)
   1412a:	4920      	ldr	r1, [pc, #128]	; (141ac <ticker_cb+0x11c>)
   1412c:	1aa2      	subs	r2, r4, r2
   1412e:	fba1 1202 	umull	r1, r2, r1, r2
   14132:	0992      	lsrs	r2, r2, #6
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14134:	491e      	ldr	r1, [pc, #120]	; (141b0 <ticker_cb+0x120>)
				    (TICKER_ID_ADV_BASE +
   14136:	3202      	adds	r2, #2
		random_delay += 1;
   14138:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1413a:	e9cd 5104 	strd	r5, r1, [sp, #16]
   1413e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   14142:	e9cd 5500 	strd	r5, r5, [sp]
   14146:	b2d2      	uxtb	r2, r2
   14148:	2101      	movs	r1, #1
   1414a:	4628      	mov	r0, r5
		random_delay += 1;
   1414c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1414e:	f7fd f955 	bl	113fc <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14152:	f030 0302 	bics.w	r3, r0, #2
   14156:	d0c1      	beq.n	140dc <ticker_cb+0x4c>
   14158:	4a0f      	ldr	r2, [pc, #60]	; (14198 <ticker_cb+0x108>)
   1415a:	4916      	ldr	r1, [pc, #88]	; (141b4 <ticker_cb+0x124>)
   1415c:	4810      	ldr	r0, [pc, #64]	; (141a0 <ticker_cb+0x110>)
   1415e:	f240 63ab 	movw	r3, #1707	; 0x6ab
   14162:	f00d f897 	bl	21294 <printk>
   14166:	4040      	eors	r0, r0
   14168:	f380 8811 	msr	BASEPRI, r0
   1416c:	f04f 0003 	mov.w	r0, #3
   14170:	df02      	svc	2
}
   14172:	e7b3      	b.n	140dc <ticker_cb+0x4c>
		LL_ASSERT(ref);
   14174:	4a08      	ldr	r2, [pc, #32]	; (14198 <ticker_cb+0x108>)
   14176:	4910      	ldr	r1, [pc, #64]	; (141b8 <ticker_cb+0x128>)
   14178:	4809      	ldr	r0, [pc, #36]	; (141a0 <ticker_cb+0x110>)
   1417a:	f240 6389 	movw	r3, #1673	; 0x689
   1417e:	f00d f889 	bl	21294 <printk>
   14182:	4040      	eors	r0, r0
   14184:	f380 8811 	msr	BASEPRI, r0
   14188:	f04f 0003 	mov.w	r0, #3
   1418c:	df02      	svc	2
   1418e:	e790      	b.n	140b2 <ticker_cb+0x22>
   14190:	2000e1bc 	.word	0x2000e1bc
   14194:	2000054c 	.word	0x2000054c
   14198:	00027e64 	.word	0x00027e64
   1419c:	00027d50 	.word	0x00027d50
   141a0:	00027ab4 	.word	0x00027ab4
   141a4:	90d4f121 	.word	0x90d4f121
   141a8:	2000e158 	.word	0x2000e158
   141ac:	ba2e8ba3 	.word	0xba2e8ba3
   141b0:	00014279 	.word	0x00014279
   141b4:	00027eb0 	.word	0x00027eb0
   141b8:	00027ef8 	.word	0x00027ef8

000141bc <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   141bc:	2800      	cmp	r0, #0
   141be:	d13d      	bne.n	1423c <ticker_op_stop_cb+0x80>
{
   141c0:	b538      	push	{r3, r4, r5, lr}
   141c2:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
   141c4:	4d25      	ldr	r5, [pc, #148]	; (1425c <ticker_op_stop_cb+0xa0>)
	return hdr->ref;
   141c6:	7c09      	ldrb	r1, [r1, #16]
   141c8:	f104 031c 	add.w	r3, r4, #28
   141cc:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
   141ce:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   141d2:	b1e1      	cbz	r1, 1420e <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   141d4:	6962      	ldr	r2, [r4, #20]
   141d6:	b16a      	cbz	r2, 141f4 <ticker_op_stop_cb+0x38>
   141d8:	4a21      	ldr	r2, [pc, #132]	; (14260 <ticker_op_stop_cb+0xa4>)
   141da:	4922      	ldr	r1, [pc, #136]	; (14264 <ticker_op_stop_cb+0xa8>)
   141dc:	4822      	ldr	r0, [pc, #136]	; (14268 <ticker_op_stop_cb+0xac>)
   141de:	f240 63fc 	movw	r3, #1788	; 0x6fc
   141e2:	f00d f857 	bl	21294 <printk>
   141e6:	4040      	eors	r0, r0
   141e8:	f380 8811 	msr	BASEPRI, r0
   141ec:	f04f 0003 	mov.w	r0, #3
   141f0:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   141f2:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   141f4:	491d      	ldr	r1, [pc, #116]	; (1426c <ticker_op_stop_cb+0xb0>)
		mfy.fp = lll_disable;
   141f6:	481e      	ldr	r0, [pc, #120]	; (14270 <ticker_op_stop_cb+0xb4>)
		hdr->disabled_param = mfy.param;
   141f8:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   141fa:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   141fc:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   141fe:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   14200:	4b16      	ldr	r3, [pc, #88]	; (1425c <ticker_op_stop_cb+0xa0>)
   14202:	4611      	mov	r1, r2
   14204:	2002      	movs	r0, #2
   14206:	f7fb ff17 	bl	10038 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1420a:	b9c0      	cbnz	r0, 1423e <ticker_op_stop_cb+0x82>
}
   1420c:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   1420e:	4817      	ldr	r0, [pc, #92]	; (1426c <ticker_op_stop_cb+0xb0>)
   14210:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   14212:	462b      	mov	r3, r5
   14214:	2101      	movs	r1, #1
   14216:	2002      	movs	r0, #2
   14218:	f7fb ff0e 	bl	10038 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1421c:	2800      	cmp	r0, #0
   1421e:	d0f5      	beq.n	1420c <ticker_op_stop_cb+0x50>
   14220:	4a0f      	ldr	r2, [pc, #60]	; (14260 <ticker_op_stop_cb+0xa4>)
   14222:	4914      	ldr	r1, [pc, #80]	; (14274 <ticker_op_stop_cb+0xb8>)
   14224:	4810      	ldr	r0, [pc, #64]	; (14268 <ticker_op_stop_cb+0xac>)
   14226:	f44f 63e1 	mov.w	r3, #1800	; 0x708
   1422a:	f00d f833 	bl	21294 <printk>
   1422e:	4040      	eors	r0, r0
   14230:	f380 8811 	msr	BASEPRI, r0
   14234:	f04f 0003 	mov.w	r0, #3
   14238:	df02      	svc	2
}
   1423a:	bd38      	pop	{r3, r4, r5, pc}
   1423c:	4770      	bx	lr
		LL_ASSERT(!ret);
   1423e:	4a08      	ldr	r2, [pc, #32]	; (14260 <ticker_op_stop_cb+0xa4>)
   14240:	490c      	ldr	r1, [pc, #48]	; (14274 <ticker_op_stop_cb+0xb8>)
   14242:	4809      	ldr	r0, [pc, #36]	; (14268 <ticker_op_stop_cb+0xac>)
   14244:	f240 7303 	movw	r3, #1795	; 0x703
   14248:	f00d f824 	bl	21294 <printk>
   1424c:	4040      	eors	r0, r0
   1424e:	f380 8811 	msr	BASEPRI, r0
   14252:	f04f 0003 	mov.w	r0, #3
   14256:	df02      	svc	2
}
   14258:	bd38      	pop	{r3, r4, r5, pc}
   1425a:	bf00      	nop
   1425c:	2000055c 	.word	0x2000055c
   14260:	00027e64 	.word	0x00027e64
   14264:	00027efc 	.word	0x00027efc
   14268:	00027ab4 	.word	0x00027ab4
   1426c:	00013ffd 	.word	0x00013ffd
   14270:	0001a641 	.word	0x0001a641
   14274:	00027d50 	.word	0x00027d50

00014278 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14278:	b900      	cbnz	r0, 1427c <ticker_op_update_cb+0x4>
   1427a:	4770      	bx	lr
{
   1427c:	b510      	push	{r4, lr}
   1427e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14280:	f7ff fce8 	bl	13c54 <ull_disable_mark_get>
   14284:	4284      	cmp	r4, r0
   14286:	d00c      	beq.n	142a2 <ticker_op_update_cb+0x2a>
   14288:	4a06      	ldr	r2, [pc, #24]	; (142a4 <ticker_op_update_cb+0x2c>)
   1428a:	4907      	ldr	r1, [pc, #28]	; (142a8 <ticker_op_update_cb+0x30>)
   1428c:	4807      	ldr	r0, [pc, #28]	; (142ac <ticker_op_update_cb+0x34>)
   1428e:	f240 63cc 	movw	r3, #1740	; 0x6cc
   14292:	f00c ffff 	bl	21294 <printk>
   14296:	4040      	eors	r0, r0
   14298:	f380 8811 	msr	BASEPRI, r0
   1429c:	f04f 0003 	mov.w	r0, #3
   142a0:	df02      	svc	2
}
   142a2:	bd10      	pop	{r4, pc}
   142a4:	00027e64 	.word	0x00027e64
   142a8:	00027f10 	.word	0x00027f10
   142ac:	00027ab4 	.word	0x00027ab4

000142b0 <conn_release.constprop.0>:

static void conn_release(struct ll_adv_set *adv)
   142b0:	b570      	push	{r4, r5, r6, lr}
{
	struct lll_conn *lll = adv->lll.conn;
   142b2:	4c1b      	ldr	r4, [pc, #108]	; (14320 <conn_release.constprop.0+0x70>)
   142b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   142b6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   142b8:	b163      	cbz	r3, 142d4 <conn_release.constprop.0+0x24>
   142ba:	4a1a      	ldr	r2, [pc, #104]	; (14324 <conn_release.constprop.0+0x74>)
   142bc:	491a      	ldr	r1, [pc, #104]	; (14328 <conn_release.constprop.0+0x78>)
   142be:	481b      	ldr	r0, [pc, #108]	; (1432c <conn_release.constprop.0+0x7c>)
   142c0:	f240 7343 	movw	r3, #1859	; 0x743
   142c4:	f00c ffe6 	bl	21294 <printk>
   142c8:	4040      	eors	r0, r0
   142ca:	f380 8811 	msr	BASEPRI, r0
   142ce:	f04f 0003 	mov.w	r0, #3
   142d2:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   142d4:	f105 0150 	add.w	r1, r5, #80	; 0x50
   142d8:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   142dc:	f7fb fe2e 	bl	ff3c <memq_deinit>
	LL_ASSERT(link);
   142e0:	4606      	mov	r6, r0
   142e2:	b170      	cbz	r0, 14302 <conn_release.constprop.0+0x52>
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   142e4:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   142e6:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
   142e8:	f000 ffba 	bl	15260 <ll_conn_release>
	adv->lll.conn = NULL;
   142ec:	2500      	movs	r5, #0

	ll_rx_release(adv->node_rx_cc_free);
   142ee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
   142f0:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   142f2:	f7ff fbcd 	bl	13a90 <ll_rx_release>
	adv->node_rx_cc_free = NULL;
	ll_rx_link_release(adv->link_cc_free);
   142f6:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->node_rx_cc_free = NULL;
   142f8:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
   142fa:	f7ff fbbd 	bl	13a78 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   142fe:	6465      	str	r5, [r4, #68]	; 0x44
}
   14300:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   14302:	4a08      	ldr	r2, [pc, #32]	; (14324 <conn_release.constprop.0+0x74>)
   14304:	490a      	ldr	r1, [pc, #40]	; (14330 <conn_release.constprop.0+0x80>)
   14306:	4809      	ldr	r0, [pc, #36]	; (1432c <conn_release.constprop.0+0x7c>)
   14308:	f240 7345 	movw	r3, #1861	; 0x745
   1430c:	f00c ffc2 	bl	21294 <printk>
   14310:	4040      	eors	r0, r0
   14312:	f380 8811 	msr	BASEPRI, r0
   14316:	f04f 0003 	mov.w	r0, #3
   1431a:	df02      	svc	2
   1431c:	e7e2      	b.n	142e4 <conn_release.constprop.0+0x34>
   1431e:	bf00      	nop
   14320:	2000e158 	.word	0x2000e158
   14324:	00027e64 	.word	0x00027e64
   14328:	00027f40 	.word	0x00027f40
   1432c:	00027ab4 	.word	0x00027ab4
   14330:	00027fc0 	.word	0x00027fc0

00014334 <disable.part.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static inline uint8_t disable(uint8_t handle)
   14334:	b530      	push	{r4, r5, lr}
			return err;
		}
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT && (CONFIG_BT_CTLR_ADV_AUX_SET > 0) */

	mark = ull_disable_mark(adv);
   14336:	4c4a      	ldr	r4, [pc, #296]	; (14460 <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
   14338:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   1433a:	4620      	mov	r0, r4
   1433c:	f7ff fc74 	bl	13c28 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   14340:	4284      	cmp	r4, r0
   14342:	d00c      	beq.n	1435e <disable.part.0+0x2a>
   14344:	4a47      	ldr	r2, [pc, #284]	; (14464 <disable.part.0+0x130>)
   14346:	4948      	ldr	r1, [pc, #288]	; (14468 <disable.part.0+0x134>)
   14348:	4848      	ldr	r0, [pc, #288]	; (1446c <disable.part.0+0x138>)
   1434a:	f44f 63f3 	mov.w	r3, #1944	; 0x798
   1434e:	f00c ffa1 	bl	21294 <printk>
   14352:	4040      	eors	r0, r0
   14354:	f380 8811 	msr	BASEPRI, r0
   14358:	f04f 0003 	mov.w	r0, #3
   1435c:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.is_hdcd) {
   1435e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   14362:	07db      	lsls	r3, r3, #31
		ret_cb = TICKER_STATUS_BUSY;
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14364:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   14366:	d50d      	bpl.n	14384 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   14368:	2102      	movs	r1, #2
   1436a:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1436c:	4b40      	ldr	r3, [pc, #256]	; (14470 <disable.part.0+0x13c>)
   1436e:	9500      	str	r5, [sp, #0]
   14370:	2103      	movs	r1, #3
   14372:	2201      	movs	r2, #1
   14374:	2000      	movs	r0, #0
   14376:	f7fd f859 	bl	1142c <ticker_stop>
				  TICKER_USER_ID_THREAD, TICKER_ID_ADV_STOP,
				  ull_ticker_status_give, (void *)&ret_cb);
		ret = ull_ticker_status_take(ret, &ret_cb);
   1437a:	4629      	mov	r1, r5
   1437c:	f7ff fc2c 	bl	13bd8 <ull_ticker_status_take>
		if (ret) {
   14380:	2800      	cmp	r0, #0
   14382:	d157      	bne.n	14434 <disable.part.0+0x100>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}
#endif

	ret_cb = TICKER_STATUS_BUSY;
   14384:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14386:	2103      	movs	r1, #3
   14388:	4b39      	ldr	r3, [pc, #228]	; (14470 <disable.part.0+0x13c>)
   1438a:	9500      	str	r5, [sp, #0]
   1438c:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   1438e:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14390:	f7fd f84c 	bl	1142c <ticker_stop>
			  TICKER_ID_ADV_BASE + handle,
			  ull_ticker_status_give, (void *)&ret_cb);
	ret = ull_ticker_status_take(ret, &ret_cb);
   14394:	4629      	mov	r1, r5
   14396:	f7ff fc1f 	bl	13bd8 <ull_ticker_status_take>
	if (ret) {
   1439a:	2800      	cmp	r0, #0
   1439c:	d135      	bne.n	1440a <disable.part.0+0xd6>
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	ret = ull_disable(&adv->lll);
   1439e:	4835      	ldr	r0, [pc, #212]	; (14474 <disable.part.0+0x140>)
   143a0:	f7ff fc7a 	bl	13c98 <ull_disable>
	LL_ASSERT(!ret);
   143a4:	b9f0      	cbnz	r0, 143e4 <disable.part.0+0xb0>

	mark = ull_disable_unmark(adv);
   143a6:	482e      	ldr	r0, [pc, #184]	; (14460 <disable.part.0+0x12c>)
   143a8:	f7ff fc48 	bl	13c3c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   143ac:	4284      	cmp	r4, r0
   143ae:	d00c      	beq.n	143ca <disable.part.0+0x96>
   143b0:	4a2c      	ldr	r2, [pc, #176]	; (14464 <disable.part.0+0x130>)
   143b2:	492d      	ldr	r1, [pc, #180]	; (14468 <disable.part.0+0x134>)
   143b4:	482d      	ldr	r0, [pc, #180]	; (1446c <disable.part.0+0x138>)
   143b6:	f240 73ba 	movw	r3, #1978	; 0x7ba
   143ba:	f00c ff6b 	bl	21294 <printk>
   143be:	4040      	eors	r0, r0
   143c0:	f380 8811 	msr	BASEPRI, r0
   143c4:	f04f 0003 	mov.w	r0, #3
   143c8:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
   143ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   143cc:	b10b      	cbz	r3, 143d2 <disable.part.0+0x9e>
		conn_release(adv);
   143ce:	f7ff ff6f 	bl	142b0 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
   143d2:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
   143d6:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   143d8:	f36f 0300 	bfc	r3, #0, #1
   143dc:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
   143e0:	b005      	add	sp, #20
   143e2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   143e4:	4a1f      	ldr	r2, [pc, #124]	; (14464 <disable.part.0+0x130>)
   143e6:	4924      	ldr	r1, [pc, #144]	; (14478 <disable.part.0+0x144>)
   143e8:	4820      	ldr	r0, [pc, #128]	; (1446c <disable.part.0+0x138>)
   143ea:	f240 73b7 	movw	r3, #1975	; 0x7b7
   143ee:	f00c ff51 	bl	21294 <printk>
   143f2:	4040      	eors	r0, r0
   143f4:	f380 8811 	msr	BASEPRI, r0
   143f8:	f04f 0003 	mov.w	r0, #3
   143fc:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   143fe:	4818      	ldr	r0, [pc, #96]	; (14460 <disable.part.0+0x12c>)
   14400:	f7ff fc1c 	bl	13c3c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   14404:	4284      	cmp	r4, r0
   14406:	d1d3      	bne.n	143b0 <disable.part.0+0x7c>
   14408:	e7df      	b.n	143ca <disable.part.0+0x96>
		mark = ull_disable_unmark(adv);
   1440a:	4815      	ldr	r0, [pc, #84]	; (14460 <disable.part.0+0x12c>)
   1440c:	f7ff fc16 	bl	13c3c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   14410:	4284      	cmp	r4, r0
   14412:	d021      	beq.n	14458 <disable.part.0+0x124>
   14414:	4a13      	ldr	r2, [pc, #76]	; (14464 <disable.part.0+0x130>)
   14416:	4914      	ldr	r1, [pc, #80]	; (14468 <disable.part.0+0x134>)
   14418:	4814      	ldr	r0, [pc, #80]	; (1446c <disable.part.0+0x138>)
   1441a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   1441e:	f00c ff39 	bl	21294 <printk>
   14422:	4040      	eors	r0, r0
   14424:	f380 8811 	msr	BASEPRI, r0
   14428:	f04f 0003 	mov.w	r0, #3
   1442c:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   1442e:	200c      	movs	r0, #12
}
   14430:	b005      	add	sp, #20
   14432:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_unmark(adv);
   14434:	480a      	ldr	r0, [pc, #40]	; (14460 <disable.part.0+0x12c>)
   14436:	f7ff fc01 	bl	13c3c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   1443a:	4284      	cmp	r4, r0
   1443c:	d00c      	beq.n	14458 <disable.part.0+0x124>
   1443e:	4a09      	ldr	r2, [pc, #36]	; (14464 <disable.part.0+0x130>)
   14440:	4909      	ldr	r1, [pc, #36]	; (14468 <disable.part.0+0x134>)
   14442:	480a      	ldr	r0, [pc, #40]	; (1446c <disable.part.0+0x138>)
   14444:	f240 73a3 	movw	r3, #1955	; 0x7a3
   14448:	f00c ff24 	bl	21294 <printk>
   1444c:	4040      	eors	r0, r0
   1444e:	f380 8811 	msr	BASEPRI, r0
   14452:	f04f 0003 	mov.w	r0, #3
   14456:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   14458:	200c      	movs	r0, #12
}
   1445a:	b005      	add	sp, #20
   1445c:	bd30      	pop	{r4, r5, pc}
   1445e:	bf00      	nop
   14460:	2000e158 	.word	0x2000e158
   14464:	00027e64 	.word	0x00027e64
   14468:	00027f54 	.word	0x00027f54
   1446c:	00027ab4 	.word	0x00027ab4
   14470:	00012d29 	.word	0x00012d29
   14474:	2000e174 	.word	0x2000e174
   14478:	00027d50 	.word	0x00027d50

0001447c <ll_adv_params_set>:
{
   1447c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!adv || adv->is_enabled) {
   14480:	4c4d      	ldr	r4, [pc, #308]	; (145b8 <ll_adv_params_set+0x13c>)
{
   14482:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14484:	4b4d      	ldr	r3, [pc, #308]	; (145bc <ll_adv_params_set+0x140>)
	if (!adv || adv->is_enabled) {
   14486:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
{
   1448a:	4680      	mov	r8, r0
   1448c:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1448e:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   14492:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   14494:	f016 0601 	ands.w	r6, r6, #1
{
   14498:	4615      	mov	r5, r2
   1449a:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1449e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   144a2:	9000      	str	r0, [sp, #0]
   144a4:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   144a8:	d170      	bne.n	1458c <ll_adv_params_set+0x110>
	adv->lll.chan_map = chan_map;
   144aa:	f00c 0c07 	and.w	ip, ip, #7
   144ae:	f002 0203 	and.w	r2, r2, #3
   144b2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   144b6:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   144ba:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
		adv->interval = 0;
   144be:	f1be 0f01 	cmp.w	lr, #1
   144c2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   144c6:	bf08      	it	eq
   144c8:	f04f 0800 	moveq.w	r8, #0
   144cc:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
   144d0:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
	adv->lll.chan_map = chan_map;
   144d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	pdu->type = pdu_adv_type[adv_type];
   144d6:	ab02      	add	r3, sp, #8
   144d8:	449e      	add	lr, r3
	adv->lll.chan_map = chan_map;
   144da:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   144de:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   144e2:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   144e6:	ea4c 0c02 	orr.w	ip, ip, r2
	pdu->type = pdu_adv_type[adv_type];
   144ea:	f898 2000 	ldrb.w	r2, [r8]
	adv->lll.chan_map = chan_map;
   144ee:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   144f2:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
   144f6:	f022 021f 	bic.w	r2, r2, #31
   144fa:	f003 030f 	and.w	r3, r3, #15
   144fe:	ea43 0302 	orr.w	r3, r3, r2
	adv->own_addr_type = own_addr_type;
   14502:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14506:	bf0c      	ite	eq
   14508:	2101      	moveq	r1, #1
   1450a:	2100      	movne	r1, #0
	adv->own_addr_type = own_addr_type;
   1450c:	f365 0242 	bfi	r2, r5, #1, #2
   14510:	f361 1345 	bfi	r3, r1, #5, #1
   14514:	f888 3000 	strb.w	r3, [r8]
   14518:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1451c:	b2d3      	uxtb	r3, r2
   1451e:	0752      	lsls	r2, r2, #29
   14520:	d509      	bpl.n	14536 <ll_adv_params_set+0xba>
		adv->id_addr_type = direct_addr_type;
   14522:	f367 03c3 	bfi	r3, r7, #3, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   14526:	9908      	ldr	r1, [sp, #32]
		adv->id_addr_type = direct_addr_type;
   14528:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   1452c:	2206      	movs	r2, #6
   1452e:	f104 004f 	add.w	r0, r4, #79	; 0x4f
   14532:	f00f fb22 	bl	23b7a <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   14536:	f898 3000 	ldrb.w	r3, [r8]
   1453a:	f003 020f 	and.w	r2, r3, #15
   1453e:	2a01      	cmp	r2, #1
   14540:	d029      	beq.n	14596 <ll_adv_params_set+0x11a>
	} else if (pdu->len == 0) {
   14542:	f898 2001 	ldrb.w	r2, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   14546:	f005 0501 	and.w	r5, r5, #1
   1454a:	f365 1386 	bfi	r3, r5, #6, #1
	} else if (pdu->len == 0) {
   1454e:	b1aa      	cbz	r2, 1457c <ll_adv_params_set+0x100>
		pdu->rx_addr = 0;
   14550:	f36f 13c7 	bfc	r3, #7, #1
   14554:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   14558:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   1455c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14560:	01ad      	lsls	r5, r5, #6
   14562:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		if (pdu->len == 0) {
   14564:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14566:	f045 0504 	orr.w	r5, r5, #4
   1456a:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   1456c:	b912      	cbnz	r2, 14574 <ll_adv_params_set+0xf8>
			pdu->len = BDADDR_SIZE;
   1456e:	2106      	movs	r1, #6
   14570:	7059      	strb	r1, [r3, #1]
	return 0;
   14572:	4616      	mov	r6, r2
}
   14574:	4630      	mov	r0, r6
   14576:	b002      	add	sp, #8
   14578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->rx_addr = 0;
   1457c:	f362 13c7 	bfi	r3, r2, #7, #1
   14580:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   14584:	2306      	movs	r3, #6
   14586:	f888 3001 	strb.w	r3, [r8, #1]
   1458a:	e7e5      	b.n	14558 <ll_adv_params_set+0xdc>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1458c:	260c      	movs	r6, #12
}
   1458e:	4630      	mov	r0, r6
   14590:	b002      	add	sp, #8
   14592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   14596:	f005 0501 	and.w	r5, r5, #1
		pdu->rx_addr = direct_addr_type;
   1459a:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   1459c:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
   145a0:	f367 13c7 	bfi	r3, r7, #7, #1
   145a4:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   145a8:	9908      	ldr	r1, [sp, #32]
   145aa:	2206      	movs	r2, #6
   145ac:	f00f fae5 	bl	23b7a <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   145b0:	230c      	movs	r3, #12
   145b2:	f888 3001 	strb.w	r3, [r8, #1]
   145b6:	e7cf      	b.n	14558 <ll_adv_params_set+0xdc>
   145b8:	2000e158 	.word	0x2000e158
   145bc:	000271c8 	.word	0x000271c8

000145c0 <ll_adv_data_set>:
{
   145c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   145c2:	4e21      	ldr	r6, [pc, #132]	; (14648 <ll_adv_data_set+0x88>)
   145c4:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   145c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   145cc:	b083      	sub	sp, #12
   145ce:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   145d0:	782b      	ldrb	r3, [r5, #0]
   145d2:	f003 030f 	and.w	r3, r3, #15
   145d6:	2b01      	cmp	r3, #1
   145d8:	d032      	beq.n	14640 <ll_adv_data_set+0x80>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   145da:	281f      	cmp	r0, #31
   145dc:	4604      	mov	r4, r0
   145de:	d82c      	bhi.n	1463a <ll_adv_data_set+0x7a>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   145e0:	460f      	mov	r7, r1
   145e2:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   145e6:	f10d 0107 	add.w	r1, sp, #7
   145ea:	f006 fb51 	bl	1ac90 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   145ee:	4629      	mov	r1, r5
   145f0:	4605      	mov	r5, r0
   145f2:	f811 2b02 	ldrb.w	r2, [r1], #2
   145f6:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   145fa:	f3c2 0303 	ubfx	r3, r2, #0, #4
   145fe:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   14602:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   14606:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   1460a:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1460e:	4628      	mov	r0, r5
   14610:	4313      	orrs	r3, r2
   14612:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   14616:	2206      	movs	r2, #6
   14618:	f00f faaf 	bl	23b7a <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1461c:	4622      	mov	r2, r4
   1461e:	4639      	mov	r1, r7
   14620:	f105 0008 	add.w	r0, r5, #8
   14624:	f00f faa9 	bl	23b7a <memcpy>
	pdu->last = idx;
   14628:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
   1462c:	3406      	adds	r4, #6
	return 0;
   1462e:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
   14630:	706c      	strb	r4, [r5, #1]
   14632:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
}
   14636:	b003      	add	sp, #12
   14638:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1463a:	2012      	movs	r0, #18
}
   1463c:	b003      	add	sp, #12
   1463e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   14640:	2000      	movs	r0, #0
}
   14642:	b003      	add	sp, #12
   14644:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14646:	bf00      	nop
   14648:	2000e158 	.word	0x2000e158

0001464c <ull_adv_init>:
{
   1464c:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1464e:	4c05      	ldr	r4, [pc, #20]	; (14664 <ull_adv_init+0x18>)
   14650:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14654:	f006 fb06 	bl	1ac64 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   14658:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1465c:	f006 fb02 	bl	1ac64 <lll_adv_data_init>
}
   14660:	2000      	movs	r0, #0
   14662:	bd10      	pop	{r4, pc}
   14664:	2000e158 	.word	0x2000e158

00014668 <ull_adv_reset>:
{
   14668:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   1466a:	4b04      	ldr	r3, [pc, #16]	; (1467c <ull_adv_reset+0x14>)
   1466c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   14670:	07db      	lsls	r3, r3, #31
   14672:	d501      	bpl.n	14678 <ull_adv_reset+0x10>
   14674:	f7ff fe5e 	bl	14334 <disable.part.0>
}
   14678:	2000      	movs	r0, #0
   1467a:	bd08      	pop	{r3, pc}
   1467c:	2000e158 	.word	0x2000e158

00014680 <ull_adv_reset_finalize>:
{
   14680:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   14682:	4c09      	ldr	r4, [pc, #36]	; (146a8 <ull_adv_reset_finalize+0x28>)
   14684:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   14688:	4628      	mov	r0, r5
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   1468a:	3438      	adds	r4, #56	; 0x38
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   1468c:	f006 fafa 	bl	1ac84 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   14690:	4620      	mov	r0, r4
   14692:	f006 faf7 	bl	1ac84 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   14696:	4628      	mov	r0, r5
   14698:	f006 fae4 	bl	1ac64 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1469c:	4620      	mov	r0, r4
   1469e:	f006 fae1 	bl	1ac64 <lll_adv_data_init>
}
   146a2:	2000      	movs	r0, #0
   146a4:	bd38      	pop	{r3, r4, r5, pc}
   146a6:	bf00      	nop
   146a8:	2000e158 	.word	0x2000e158

000146ac <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   146ac:	4a03      	ldr	r2, [pc, #12]	; (146bc <ull_adv_handle_get+0x10>)
   146ae:	4b04      	ldr	r3, [pc, #16]	; (146c0 <ull_adv_handle_get+0x14>)
   146b0:	1a80      	subs	r0, r0, r2
   146b2:	fba3 3000 	umull	r3, r0, r3, r0
}
   146b6:	f3c0 108f 	ubfx	r0, r0, #6, #16
   146ba:	4770      	bx	lr
   146bc:	2000e158 	.word	0x2000e158
   146c0:	ba2e8ba3 	.word	0xba2e8ba3

000146c4 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   146c4:	4a04      	ldr	r2, [pc, #16]	; (146d8 <ull_adv_lll_handle_get+0x14>)
   146c6:	6800      	ldr	r0, [r0, #0]
   146c8:	4b04      	ldr	r3, [pc, #16]	; (146dc <ull_adv_lll_handle_get+0x18>)
   146ca:	1a80      	subs	r0, r0, r2
   146cc:	fba3 3000 	umull	r3, r0, r3, r0
}
   146d0:	f3c0 108f 	ubfx	r0, r0, #6, #16
   146d4:	4770      	bx	lr
   146d6:	bf00      	nop
   146d8:	2000e158 	.word	0x2000e158
   146dc:	ba2e8ba3 	.word	0xba2e8ba3

000146e0 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   146e0:	b938      	cbnz	r0, 146f2 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   146e2:	4805      	ldr	r0, [pc, #20]	; (146f8 <ull_adv_is_enabled_get+0x18>)
   146e4:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
   146e8:	f013 0f01 	tst.w	r3, #1
   146ec:	bf08      	it	eq
   146ee:	2000      	moveq	r0, #0
   146f0:	4770      	bx	lr
		return NULL;
   146f2:	2000      	movs	r0, #0
}
   146f4:	4770      	bx	lr
   146f6:	bf00      	nop
   146f8:	2000e158 	.word	0x2000e158

000146fc <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   146fc:	b928      	cbnz	r0, 1470a <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   146fe:	4b04      	ldr	r3, [pc, #16]	; (14710 <ull_adv_is_enabled+0x14>)
   14700:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   14704:	f000 0001 	and.w	r0, r0, #1
   14708:	4770      	bx	lr
   1470a:	2000      	movs	r0, #0
}
   1470c:	4770      	bx	lr
   1470e:	bf00      	nop
   14710:	2000e158 	.word	0x2000e158

00014714 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   14714:	b950      	cbnz	r0, 1472c <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   14716:	4b06      	ldr	r3, [pc, #24]	; (14730 <ull_adv_filter_pol_get+0x1c>)
   14718:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   1471c:	f010 0001 	ands.w	r0, r0, #1
   14720:	d005      	beq.n	1472e <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   14722:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   14726:	f000 0003 	and.w	r0, r0, #3
   1472a:	4770      	bx	lr
		return 0;
   1472c:	2000      	movs	r0, #0
}
   1472e:	4770      	bx	lr
   14730:	2000e158 	.word	0x2000e158

00014734 <ull_scan_rsp_set>:
{
   14734:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   14736:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   1473a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1473e:	b083      	sub	sp, #12
   14740:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   14742:	460e      	mov	r6, r1
   14744:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   14746:	f10d 0107 	add.w	r1, sp, #7
   1474a:	3038      	adds	r0, #56	; 0x38
   1474c:	4617      	mov	r7, r2
   1474e:	f006 fa9f 	bl	1ac90 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   14752:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   14754:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   14756:	f811 3b02 	ldrb.w	r3, [r1], #2
   1475a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1475e:	019b      	lsls	r3, r3, #6
   14760:	f043 0304 	orr.w	r3, r3, #4
   14764:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   14766:	1db3      	adds	r3, r6, #6
   14768:	7043      	strb	r3, [r0, #1]
   1476a:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1476c:	3002      	adds	r0, #2
   1476e:	f00f fa04 	bl	23b7a <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   14772:	4632      	mov	r2, r6
   14774:	4639      	mov	r1, r7
   14776:	f105 0008 	add.w	r0, r5, #8
   1477a:	f00f f9fe 	bl	23b7a <memcpy>
	pdu->last = idx;
   1477e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14782:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
   14786:	2000      	movs	r0, #0
   14788:	b003      	add	sp, #12
   1478a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001478c <ll_adv_scan_rsp_set>:
{
   1478c:	4603      	mov	r3, r0
   1478e:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   14790:	4801      	ldr	r0, [pc, #4]	; (14798 <ll_adv_scan_rsp_set+0xc>)
   14792:	4619      	mov	r1, r3
   14794:	f7ff bfce 	b.w	14734 <ull_scan_rsp_set>
   14798:	2000e158 	.word	0x2000e158

0001479c <ull_adv_pdu_update_addrs>:
{
   1479c:	b570      	push	{r4, r5, r6, lr}
   1479e:	460c      	mov	r4, r1
   147a0:	4605      	mov	r5, r0
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *tx_addr = ull_filter_adva_get(adv);
   147a2:	f005 fa0b 	bl	19bbc <ull_filter_adva_get>
#else
	const uint8_t *tx_addr = NULL;
#endif
	uint8_t *adv_addr;

	if (tx_addr) {
   147a6:	4601      	mov	r1, r0
   147a8:	b300      	cbz	r0, 147ec <ull_adv_pdu_update_addrs+0x50>
		pdu->tx_addr = 1;
   147aa:	7823      	ldrb	r3, [r4, #0]
   147ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   147b0:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   147b2:	1ca6      	adds	r6, r4, #2
	} else {
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   147b4:	2206      	movs	r2, #6
   147b6:	4630      	mov	r0, r6
   147b8:	f00f f9df 	bl	23b7a <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   147bc:	7823      	ldrb	r3, [r4, #0]
   147be:	f003 030f 	and.w	r3, r3, #15
   147c2:	2b01      	cmp	r3, #1
   147c4:	d001      	beq.n	147ca <ull_adv_pdu_update_addrs+0x2e>
}
   147c6:	4630      	mov	r0, r6
   147c8:	bd70      	pop	{r4, r5, r6, pc}
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *rx_addr = NULL;
	uint8_t *tgt_addr;

	rx_addr = ull_filter_tgta_get(adv);
   147ca:	4628      	mov	r0, r5
   147cc:	f005 fa24 	bl	19c18 <ull_filter_tgta_get>
	if (rx_addr) {
   147d0:	4601      	mov	r1, r0
   147d2:	2800      	cmp	r0, #0
   147d4:	d0f7      	beq.n	147c6 <ull_adv_pdu_update_addrs+0x2a>
		pdu->rx_addr = 1;
   147d6:	7823      	ldrb	r3, [r4, #0]
   147d8:	4620      	mov	r0, r4
   147da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   147de:	f800 3b08 	strb.w	r3, [r0], #8

		/* TargetA always follows AdvA in all PDUs */
		tgt_addr = adv_pdu_adva_get(pdu) + BDADDR_SIZE;
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   147e2:	2206      	movs	r2, #6
   147e4:	f00f f9c9 	bl	23b7a <memcpy>
}
   147e8:	4630      	mov	r0, r6
   147ea:	bd70      	pop	{r4, r5, r6, pc}
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   147ec:	7820      	ldrb	r0, [r4, #0]
   147ee:	f3c0 1080 	ubfx	r0, r0, #6, #1
   147f2:	f7fc fe63 	bl	114bc <ll_addr_get>
   147f6:	4601      	mov	r1, r0
   147f8:	e7db      	b.n	147b2 <ull_adv_pdu_update_addrs+0x16>
   147fa:	bf00      	nop

000147fc <tx_ull_dequeue>:
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   147fc:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
{
   14800:	4603      	mov	r3, r0
   14802:	b410      	push	{r4}
   14804:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14806:	b172      	cbz	r2, 14826 <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   14808:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   1480c:	428a      	cmp	r2, r1
   1480e:	d02b      	beq.n	14868 <tx_ull_dequeue+0x6c>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14810:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   14814:	4291      	cmp	r1, r2
   14816:	d01a      	beq.n	1484e <tx_ull_dequeue+0x52>
		conn->tx_head = conn->tx_head->next;
   14818:	6809      	ldr	r1, [r1, #0]
   1481a:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		tx->next = NULL;
   1481e:	2200      	movs	r2, #0
}
   14820:	bc10      	pop	{r4}
		tx->next = NULL;
   14822:	6002      	str	r2, [r0, #0]
}
   14824:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14826:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   1482a:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
   1482e:	428a      	cmp	r2, r1
   14830:	d025      	beq.n	1487e <tx_ull_dequeue+0x82>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14832:	7911      	ldrb	r1, [r2, #4]
   14834:	f001 0103 	and.w	r1, r1, #3
   14838:	2903      	cmp	r1, #3
   1483a:	d00e      	beq.n	1485a <tx_ull_dequeue+0x5e>
		conn->tx_head = conn->tx_head->next;
   1483c:	6812      	ldr	r2, [r2, #0]
   1483e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
			conn->tx_ctrl = NULL;
   14842:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   14844:	e9c3 2270 	strd	r2, r2, [r3, #448]	; 0x1c0
}
   14848:	bc10      	pop	{r4}
		tx->next = tx;
   1484a:	6000      	str	r0, [r0, #0]
}
   1484c:	4770      	bx	lr
   1484e:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   14850:	6809      	ldr	r1, [r1, #0]
   14852:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
   14856:	4611      	mov	r1, r2
   14858:	e7de      	b.n	14818 <tx_ull_dequeue+0x1c>
		    ((pdu_data_tx->llctrl.opcode !=
   1485a:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1485c:	2903      	cmp	r1, #3
   1485e:	d001      	beq.n	14864 <tx_ull_dequeue+0x68>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14860:	290a      	cmp	r1, #10
   14862:	d1eb      	bne.n	1483c <tx_ull_dequeue+0x40>
   14864:	4611      	mov	r1, r2
   14866:	e7d7      	b.n	14818 <tx_ull_dequeue+0x1c>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14868:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
		conn->tx_head = conn->tx_head->next;
   1486c:	6809      	ldr	r1, [r1, #0]
   1486e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14872:	4294      	cmp	r4, r2
			conn->tx_ctrl = conn->tx_head;
   14874:	bf18      	it	ne
   14876:	f8c3 11c0 	strne.w	r1, [r3, #448]	; 0x1c0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1487a:	d1e5      	bne.n	14848 <tx_ull_dequeue+0x4c>
   1487c:	e7e1      	b.n	14842 <tx_ull_dequeue+0x46>
	if (conn->tx_head == conn->tx_ctrl) {
   1487e:	2a00      	cmp	r2, #0
   14880:	d1e6      	bne.n	14850 <tx_ull_dequeue+0x54>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14882:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
	if (conn->tx_head == conn->tx_ctrl) {
   14886:	4611      	mov	r1, r2
   14888:	e7f0      	b.n	1486c <tx_ull_dequeue+0x70>
   1488a:	bf00      	nop

0001488c <init_reset>:
{
   1488c:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1488e:	4b15      	ldr	r3, [pc, #84]	; (148e4 <init_reset+0x58>)
   14890:	4815      	ldr	r0, [pc, #84]	; (148e8 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14892:	4c16      	ldr	r4, [pc, #88]	; (148ec <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   14894:	2201      	movs	r2, #1
   14896:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1489a:	f7fb fac5 	bl	fe28 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   1489e:	4b14      	ldr	r3, [pc, #80]	; (148f0 <init_reset+0x64>)
   148a0:	2203      	movs	r2, #3
   148a2:	1d18      	adds	r0, r3, #4
   148a4:	2124      	movs	r1, #36	; 0x24
   148a6:	f7fb fabf 	bl	fe28 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   148aa:	4b12      	ldr	r3, [pc, #72]	; (148f4 <init_reset+0x68>)
   148ac:	2204      	movs	r2, #4
   148ae:	1898      	adds	r0, r3, r2
   148b0:	2120      	movs	r1, #32
   148b2:	f7fb fab9 	bl	fe28 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   148b6:	4b10      	ldr	r3, [pc, #64]	; (148f8 <init_reset+0x6c>)
   148b8:	2207      	movs	r2, #7
   148ba:	1d18      	adds	r0, r3, #4
   148bc:	2108      	movs	r1, #8
   148be:	f7fb fab3 	bl	fe28 <mem_init>
	default_phy_tx |= PHY_2M;
   148c2:	490e      	ldr	r1, [pc, #56]	; (148fc <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   148c4:	4a0e      	ldr	r2, [pc, #56]	; (14900 <init_reset+0x74>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   148c6:	480f      	ldr	r0, [pc, #60]	; (14904 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   148c8:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   148ca:	f04f 0c1b 	mov.w	ip, #27
   148ce:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   148d2:	700b      	strb	r3, [r1, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   148d4:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   148d8:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   148da:	f8a0 c000 	strh.w	ip, [r0]
}
   148de:	2000      	movs	r0, #0
   148e0:	bd10      	pop	{r4, pc}
   148e2:	bf00      	nop
   148e4:	2000e1cc 	.word	0x2000e1cc
   148e8:	2000e1d0 	.word	0x2000e1d0
   148ec:	2000ed1a 	.word	0x2000ed1a
   148f0:	2000e3b8 	.word	0x2000e3b8
   148f4:	2000e428 	.word	0x2000e428
   148f8:	2000e4ac 	.word	0x2000e4ac
   148fc:	2000f2b4 	.word	0x2000f2b4
   14900:	2000f2b3 	.word	0x2000f2b3
   14904:	2000ed1c 	.word	0x2000ed1c

00014908 <tx_lll_flush>:
{
   14908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   1490c:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14910:	4934      	ldr	r1, [pc, #208]	; (149e4 <tx_lll_flush+0xdc>)
{
   14912:	b083      	sub	sp, #12
   14914:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   14916:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   1491a:	4640      	mov	r0, r8
   1491c:	f7fb faea 	bl	fef4 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14920:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   14924:	4629      	mov	r1, r5
   14926:	f006 fe1d 	bl	1b564 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1492a:	6d28      	ldr	r0, [r5, #80]	; 0x50
   1492c:	aa01      	add	r2, sp, #4
   1492e:	4631      	mov	r1, r6
   14930:	f7fb fb20 	bl	ff74 <memq_dequeue>
	while (link) {
   14934:	b328      	cbz	r0, 14982 <tx_lll_flush+0x7a>
   14936:	4c2c      	ldr	r4, [pc, #176]	; (149e8 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   14938:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1493c:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   14940:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   14942:	f894 c001 	ldrb.w	ip, [r4, #1]
   14946:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   14948:	1c4b      	adds	r3, r1, #1
   1494a:	b2db      	uxtb	r3, r3
		last = 0U;
   1494c:	459c      	cmp	ip, r3
   1494e:	bf08      	it	eq
   14950:	2300      	moveq	r3, #0
	if (last == first) {
   14952:	429a      	cmp	r2, r3
   14954:	d035      	beq.n	149c2 <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14956:	7822      	ldrb	r2, [r4, #0]
   14958:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   1495c:	eb19 0c02 	adds.w	ip, r9, r2
   14960:	d02f      	beq.n	149c2 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   14962:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   14964:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   14968:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   1496a:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1496e:	6002      	str	r2, [r0, #0]
		tx->next = link;
   14970:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   14972:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   14974:	70e3      	strb	r3, [r4, #3]
   14976:	aa01      	add	r2, sp, #4
   14978:	4631      	mov	r1, r6
   1497a:	f7fb fafb 	bl	ff74 <memq_dequeue>
	while (link) {
   1497e:	2800      	cmp	r0, #0
   14980:	d1de      	bne.n	14940 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   14982:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
	rx = (void *)&conn->llcp_terminate.node_rx;
   14986:	f508 749e 	add.w	r4, r8, #316	; 0x13c
	LL_ASSERT(rx->hdr.link);
   1498a:	b150      	cbz	r0, 149a2 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   1498c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   1498e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   14990:	f8c8 313c 	str.w	r3, [r8, #316]	; 0x13c
	ull_rx_put(link, rx);
   14994:	f7ff fa32 	bl	13dfc <ull_rx_put>
	ull_rx_sched();
   14998:	f7ff fa40 	bl	13e1c <ull_rx_sched>
}
   1499c:	b003      	add	sp, #12
   1499e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   149a2:	4a12      	ldr	r2, [pc, #72]	; (149ec <tx_lll_flush+0xe4>)
   149a4:	4912      	ldr	r1, [pc, #72]	; (149f0 <tx_lll_flush+0xe8>)
   149a6:	4813      	ldr	r0, [pc, #76]	; (149f4 <tx_lll_flush+0xec>)
   149a8:	f240 7394 	movw	r3, #1940	; 0x794
   149ac:	f00c fc72 	bl	21294 <printk>
   149b0:	4040      	eors	r0, r0
   149b2:	f380 8811 	msr	BASEPRI, r0
   149b6:	f04f 0003 	mov.w	r0, #3
   149ba:	df02      	svc	2
	link = rx->hdr.link;
   149bc:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
   149c0:	e7e4      	b.n	1498c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   149c2:	4a0a      	ldr	r2, [pc, #40]	; (149ec <tx_lll_flush+0xe4>)
   149c4:	490c      	ldr	r1, [pc, #48]	; (149f8 <tx_lll_flush+0xf0>)
   149c6:	480b      	ldr	r0, [pc, #44]	; (149f4 <tx_lll_flush+0xec>)
   149c8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
   149cc:	f00c fc62 	bl	21294 <printk>
   149d0:	4040      	eors	r0, r0
   149d2:	f380 8811 	msr	BASEPRI, r0
   149d6:	f04f 0003 	mov.w	r0, #3
   149da:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   149dc:	2300      	movs	r3, #0
   149de:	801b      	strh	r3, [r3, #0]
   149e0:	deff      	udf	#255	; 0xff
   149e2:	bf00      	nop
   149e4:	2000e1d0 	.word	0x2000e1d0
   149e8:	2000056c 	.word	0x2000056c
   149ec:	00027f70 	.word	0x00027f70
   149f0:	00027fb8 	.word	0x00027fb8
   149f4:	00027ab4 	.word	0x00027ab4
   149f8:	00027fb0 	.word	0x00027fb0

000149fc <ticker_op_stop_cb>:
{
   149fc:	b510      	push	{r4, lr}
   149fe:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14a00:	b9b0      	cbnz	r0, 14a30 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   14a02:	4b12      	ldr	r3, [pc, #72]	; (14a4c <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14a04:	2200      	movs	r2, #0
   14a06:	4611      	mov	r1, r2
   14a08:	2002      	movs	r0, #2
	mfy.param = param;
   14a0a:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   14a0c:	f7fb fb14 	bl	10038 <mayfly_enqueue>
	LL_ASSERT(!retval);
   14a10:	b900      	cbnz	r0, 14a14 <ticker_op_stop_cb+0x18>
}
   14a12:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   14a14:	4a0e      	ldr	r2, [pc, #56]	; (14a50 <ticker_op_stop_cb+0x54>)
   14a16:	490f      	ldr	r1, [pc, #60]	; (14a54 <ticker_op_stop_cb+0x58>)
   14a18:	480f      	ldr	r0, [pc, #60]	; (14a58 <ticker_op_stop_cb+0x5c>)
   14a1a:	f44f 63dd 	mov.w	r3, #1768	; 0x6e8
   14a1e:	f00c fc39 	bl	21294 <printk>
   14a22:	4040      	eors	r0, r0
   14a24:	f380 8811 	msr	BASEPRI, r0
   14a28:	f04f 0003 	mov.w	r0, #3
   14a2c:	df02      	svc	2
}
   14a2e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14a30:	4a07      	ldr	r2, [pc, #28]	; (14a50 <ticker_op_stop_cb+0x54>)
   14a32:	490a      	ldr	r1, [pc, #40]	; (14a5c <ticker_op_stop_cb+0x60>)
   14a34:	4808      	ldr	r0, [pc, #32]	; (14a58 <ticker_op_stop_cb+0x5c>)
   14a36:	f240 63e1 	movw	r3, #1761	; 0x6e1
   14a3a:	f00c fc2b 	bl	21294 <printk>
   14a3e:	4040      	eors	r0, r0
   14a40:	f380 8811 	msr	BASEPRI, r0
   14a44:	f04f 0003 	mov.w	r0, #3
   14a48:	df02      	svc	2
   14a4a:	e7da      	b.n	14a02 <ticker_op_stop_cb+0x6>
   14a4c:	200005d4 	.word	0x200005d4
   14a50:	00027f70 	.word	0x00027f70
   14a54:	00027d70 	.word	0x00027d70
   14a58:	00027ab4 	.word	0x00027ab4
   14a5c:	00027fc8 	.word	0x00027fc8

00014a60 <ticker_start_conn_op_cb>:
{
   14a60:	b510      	push	{r4, lr}
   14a62:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14a64:	b990      	cbnz	r0, 14a8c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   14a66:	4620      	mov	r0, r4
   14a68:	f7ff f904 	bl	13c74 <ull_update_unmark>
	LL_ASSERT(p == param);
   14a6c:	4284      	cmp	r4, r0
   14a6e:	d00c      	beq.n	14a8a <ticker_start_conn_op_cb+0x2a>
   14a70:	4a0d      	ldr	r2, [pc, #52]	; (14aa8 <ticker_start_conn_op_cb+0x48>)
   14a72:	490e      	ldr	r1, [pc, #56]	; (14aac <ticker_start_conn_op_cb+0x4c>)
   14a74:	480e      	ldr	r0, [pc, #56]	; (14ab0 <ticker_start_conn_op_cb+0x50>)
   14a76:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
   14a7a:	f00c fc0b 	bl	21294 <printk>
   14a7e:	4040      	eors	r0, r0
   14a80:	f380 8811 	msr	BASEPRI, r0
   14a84:	f04f 0003 	mov.w	r0, #3
   14a88:	df02      	svc	2
}
   14a8a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14a8c:	4a06      	ldr	r2, [pc, #24]	; (14aa8 <ticker_start_conn_op_cb+0x48>)
   14a8e:	4909      	ldr	r1, [pc, #36]	; (14ab4 <ticker_start_conn_op_cb+0x54>)
   14a90:	4807      	ldr	r0, [pc, #28]	; (14ab0 <ticker_start_conn_op_cb+0x50>)
   14a92:	f240 63d5 	movw	r3, #1749	; 0x6d5
   14a96:	f00c fbfd 	bl	21294 <printk>
   14a9a:	4040      	eors	r0, r0
   14a9c:	f380 8811 	msr	BASEPRI, r0
   14aa0:	f04f 0003 	mov.w	r0, #3
   14aa4:	df02      	svc	2
   14aa6:	e7de      	b.n	14a66 <ticker_start_conn_op_cb+0x6>
   14aa8:	00027f70 	.word	0x00027f70
   14aac:	00027fd4 	.word	0x00027fd4
   14ab0:	00027ab4 	.word	0x00027ab4
   14ab4:	00027fc8 	.word	0x00027fc8

00014ab8 <ticker_stop_conn_op_cb>:
{
   14ab8:	b510      	push	{r4, lr}
   14aba:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14abc:	b990      	cbnz	r0, 14ae4 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   14abe:	4620      	mov	r0, r4
   14ac0:	f7ff f8ce 	bl	13c60 <ull_update_mark>
	LL_ASSERT(p == param);
   14ac4:	4284      	cmp	r4, r0
   14ac6:	d00c      	beq.n	14ae2 <ticker_stop_conn_op_cb+0x2a>
   14ac8:	4a0d      	ldr	r2, [pc, #52]	; (14b00 <ticker_stop_conn_op_cb+0x48>)
   14aca:	490e      	ldr	r1, [pc, #56]	; (14b04 <ticker_stop_conn_op_cb+0x4c>)
   14acc:	480e      	ldr	r0, [pc, #56]	; (14b08 <ticker_stop_conn_op_cb+0x50>)
   14ace:	f240 63ce 	movw	r3, #1742	; 0x6ce
   14ad2:	f00c fbdf 	bl	21294 <printk>
   14ad6:	4040      	eors	r0, r0
   14ad8:	f380 8811 	msr	BASEPRI, r0
   14adc:	f04f 0003 	mov.w	r0, #3
   14ae0:	df02      	svc	2
}
   14ae2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14ae4:	4a06      	ldr	r2, [pc, #24]	; (14b00 <ticker_stop_conn_op_cb+0x48>)
   14ae6:	4909      	ldr	r1, [pc, #36]	; (14b0c <ticker_stop_conn_op_cb+0x54>)
   14ae8:	4807      	ldr	r0, [pc, #28]	; (14b08 <ticker_stop_conn_op_cb+0x50>)
   14aea:	f240 63cb 	movw	r3, #1739	; 0x6cb
   14aee:	f00c fbd1 	bl	21294 <printk>
   14af2:	4040      	eors	r0, r0
   14af4:	f380 8811 	msr	BASEPRI, r0
   14af8:	f04f 0003 	mov.w	r0, #3
   14afc:	df02      	svc	2
   14afe:	e7de      	b.n	14abe <ticker_stop_conn_op_cb+0x6>
   14b00:	00027f70 	.word	0x00027f70
   14b04:	00027fd4 	.word	0x00027fd4
   14b08:	00027ab4 	.word	0x00027ab4
   14b0c:	00027fc8 	.word	0x00027fc8

00014b10 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14b10:	b900      	cbnz	r0, 14b14 <ticker_update_conn_op_cb+0x4>
   14b12:	4770      	bx	lr
{
   14b14:	b510      	push	{r4, lr}
   14b16:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14b18:	f7ff f8b8 	bl	13c8c <ull_update_mark_get>
   14b1c:	4284      	cmp	r4, r0
   14b1e:	d010      	beq.n	14b42 <ticker_update_conn_op_cb+0x32>
   14b20:	f7ff f898 	bl	13c54 <ull_disable_mark_get>
   14b24:	4284      	cmp	r4, r0
   14b26:	d00c      	beq.n	14b42 <ticker_update_conn_op_cb+0x32>
   14b28:	4a06      	ldr	r2, [pc, #24]	; (14b44 <ticker_update_conn_op_cb+0x34>)
   14b2a:	4907      	ldr	r1, [pc, #28]	; (14b48 <ticker_update_conn_op_cb+0x38>)
   14b2c:	4807      	ldr	r0, [pc, #28]	; (14b4c <ticker_update_conn_op_cb+0x3c>)
   14b2e:	f240 63c2 	movw	r3, #1730	; 0x6c2
   14b32:	f00c fbaf 	bl	21294 <printk>
   14b36:	4040      	eors	r0, r0
   14b38:	f380 8811 	msr	BASEPRI, r0
   14b3c:	f04f 0003 	mov.w	r0, #3
   14b40:	df02      	svc	2
}
   14b42:	bd10      	pop	{r4, pc}
   14b44:	00027f70 	.word	0x00027f70
   14b48:	00027fe0 	.word	0x00027fe0
   14b4c:	00027ab4 	.word	0x00027ab4

00014b50 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   14b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b52:	4607      	mov	r7, r0
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14b54:	4825      	ldr	r0, [pc, #148]	; (14bec <reject_ext_ind_send+0x9c>)
{
   14b56:	460c      	mov	r4, r1
   14b58:	4616      	mov	r6, r2
   14b5a:	461d      	mov	r5, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14b5c:	f7fb f994 	bl	fe88 <mem_acquire>
	if (!tx) {
   14b60:	2800      	cmp	r0, #0
   14b62:	d040      	beq.n	14be6 <reject_ext_ind_send+0x96>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   14b64:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14b66:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   14b68:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   14b6a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   14b6e:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14b70:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   14b72:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14b74:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   14b78:	7245      	strb	r5, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14b7a:	7102      	strb	r2, [r0, #4]
	if (
   14b7c:	b11b      	cbz	r3, 14b86 <reject_ext_ind_send+0x36>
	    !conn->llcp_enc.pause_tx &&
   14b7e:	f897 215e 	ldrb.w	r2, [r7, #350]	; 0x15e
	    conn->tx_head &&
   14b82:	0791      	lsls	r1, r2, #30
   14b84:	d50f      	bpl.n	14ba6 <reject_ext_ind_send+0x56>
		if (!conn->tx_ctrl) {
   14b86:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
   14b8a:	b332      	cbz	r2, 14bda <reject_ext_ind_send+0x8a>
	tx->next = conn->tx_ctrl_last->next;
   14b8c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
   14b90:	681a      	ldr	r2, [r3, #0]
   14b92:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14b94:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   14b96:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   14b98:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
	if (!tx->next) {
   14b9c:	b1d3      	cbz	r3, 14bd4 <reject_ext_ind_send+0x84>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   14b9e:	2301      	movs	r3, #1
   14ba0:	7123      	strb	r3, [r4, #4]

	return 0;
   14ba2:	2000      	movs	r0, #0
}
   14ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    !conn->llcp_phy.pause_tx &&
   14ba6:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
   14baa:	07d2      	lsls	r2, r2, #31
   14bac:	d4eb      	bmi.n	14b86 <reject_ext_ind_send+0x36>
		if (conn->tx_head == conn->tx_data) {
   14bae:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   14bb2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   14bb4:	bf04      	itt	eq
   14bb6:	681a      	ldreq	r2, [r3, #0]
   14bb8:	f8c7 21c8 	streq.w	r2, [r7, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   14bbc:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
   14bc0:	2a00      	cmp	r2, #0
   14bc2:	d1e3      	bne.n	14b8c <reject_ext_ind_send+0x3c>
			tx->next = conn->tx_head->next;
   14bc4:	681a      	ldr	r2, [r3, #0]
   14bc6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   14bc8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   14bca:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   14bcc:	e9c7 0070 	strd	r0, r0, [r7, #448]	; 0x1c0
	if (!tx->next) {
   14bd0:	2b00      	cmp	r3, #0
   14bd2:	d1e4      	bne.n	14b9e <reject_ext_ind_send+0x4e>
		conn->tx_data_last = tx;
   14bd4:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
   14bd8:	e7e1      	b.n	14b9e <reject_ext_ind_send+0x4e>
			tx->next = conn->tx_head;
   14bda:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   14bdc:	e9c7 006f 	strd	r0, r0, [r7, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   14be0:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
   14be4:	e7da      	b.n	14b9c <reject_ext_ind_send+0x4c>
		return -ENOBUFS;
   14be6:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   14bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14bec:	2000e428 	.word	0x2000e428

00014bf0 <ctrl_tx_sec_enqueue>:
{
   14bf0:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp_enc.pause_tx) {
   14bf2:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   14bf6:	079a      	lsls	r2, r3, #30
{
   14bf8:	4604      	mov	r4, r0
   14bfa:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   14bfc:	d50c      	bpl.n	14c18 <ctrl_tx_sec_enqueue+0x28>
		if (!conn->tx_ctrl) {
   14bfe:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
   14c02:	2b00      	cmp	r3, #0
   14c04:	d04e      	beq.n	14ca4 <ctrl_tx_sec_enqueue+0xb4>
			tx->next = conn->tx_ctrl_last->next;
   14c06:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   14c0a:	681a      	ldr	r2, [r3, #0]
   14c0c:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   14c0e:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   14c10:	682b      	ldr	r3, [r5, #0]
   14c12:	2b00      	cmp	r3, #0
   14c14:	d034      	beq.n	14c80 <ctrl_tx_sec_enqueue+0x90>
}
   14c16:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->tx_head) {
   14c18:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
   14c1c:	b342      	cbz	r2, 14c70 <ctrl_tx_sec_enqueue+0x80>
			if ((conn->llcp_req != conn->llcp_ack) &&
   14c1e:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   14c22:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   14c26:	4299      	cmp	r1, r3
   14c28:	d003      	beq.n	14c32 <ctrl_tx_sec_enqueue+0x42>
   14c2a:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   14c2e:	2b03      	cmp	r3, #3
   14c30:	d040      	beq.n	14cb4 <ctrl_tx_sec_enqueue+0xc4>
	    !conn->llcp_phy.pause_tx &&
   14c32:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   14c36:	f013 0301 	ands.w	r3, r3, #1
   14c3a:	d124      	bne.n	14c86 <ctrl_tx_sec_enqueue+0x96>
		if (conn->tx_head == conn->tx_data) {
   14c3c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   14c40:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   14c42:	bf04      	itt	eq
   14c44:	6811      	ldreq	r1, [r2, #0]
   14c46:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   14c4a:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   14c4e:	2900      	cmp	r1, #0
   14c50:	d053      	beq.n	14cfa <ctrl_tx_sec_enqueue+0x10a>
			LL_ASSERT(!pause);
   14c52:	b1e3      	cbz	r3, 14c8e <ctrl_tx_sec_enqueue+0x9e>
   14c54:	4a32      	ldr	r2, [pc, #200]	; (14d20 <ctrl_tx_sec_enqueue+0x130>)
   14c56:	4933      	ldr	r1, [pc, #204]	; (14d24 <ctrl_tx_sec_enqueue+0x134>)
   14c58:	4833      	ldr	r0, [pc, #204]	; (14d28 <ctrl_tx_sec_enqueue+0x138>)
   14c5a:	f240 73ef 	movw	r3, #2031	; 0x7ef
   14c5e:	f00c fb19 	bl	21294 <printk>
   14c62:	4040      	eors	r0, r0
   14c64:	f380 8811 	msr	BASEPRI, r0
   14c68:	f04f 0003 	mov.w	r0, #3
   14c6c:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   14c6e:	e00e      	b.n	14c8e <ctrl_tx_sec_enqueue+0x9e>
		if (!conn->tx_ctrl) {
   14c70:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
   14c74:	b95b      	cbnz	r3, 14c8e <ctrl_tx_sec_enqueue+0x9e>
			tx->next = conn->tx_head;
   14c76:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
   14c78:	e9c0 116f 	strd	r1, r1, [r0, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   14c7c:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
			conn->tx_data_last = tx;
   14c80:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   14c84:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->tx_ctrl) {
   14c86:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   14c8a:	2b00      	cmp	r3, #0
   14c8c:	d040      	beq.n	14d10 <ctrl_tx_sec_enqueue+0x120>
	tx->next = conn->tx_ctrl_last->next;
   14c8e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   14c92:	681a      	ldr	r2, [r3, #0]
   14c94:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   14c96:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   14c98:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   14c9a:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
		if (!tx->next) {
   14c9e:	2b00      	cmp	r3, #0
   14ca0:	d1b9      	bne.n	14c16 <ctrl_tx_sec_enqueue+0x26>
   14ca2:	e7ed      	b.n	14c80 <ctrl_tx_sec_enqueue+0x90>
			tx->next = conn->tx_head;
   14ca4:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   14ca8:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   14caa:	f8c4 11bc 	str.w	r1, [r4, #444]	; 0x1bc
		if (!tx->next) {
   14cae:	2b00      	cmp	r3, #0
   14cb0:	d1b1      	bne.n	14c16 <ctrl_tx_sec_enqueue+0x26>
   14cb2:	e7e5      	b.n	14c80 <ctrl_tx_sec_enqueue+0x90>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14cb4:	7913      	ldrb	r3, [r2, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   14cb6:	f003 0303 	and.w	r3, r3, #3
   14cba:	2b03      	cmp	r3, #3
   14cbc:	d1b9      	bne.n	14c32 <ctrl_tx_sec_enqueue+0x42>
			    ((pdu_data_tx->llctrl.opcode ==
   14cbe:	79d3      	ldrb	r3, [r2, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14cc0:	2b03      	cmp	r3, #3
   14cc2:	d001      	beq.n	14cc8 <ctrl_tx_sec_enqueue+0xd8>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   14cc4:	2b0a      	cmp	r3, #10
   14cc6:	d1b4      	bne.n	14c32 <ctrl_tx_sec_enqueue+0x42>
	    !conn->llcp_phy.pause_tx &&
   14cc8:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   14ccc:	07db      	lsls	r3, r3, #31
   14cce:	d525      	bpl.n	14d1c <ctrl_tx_sec_enqueue+0x12c>
		if (!conn->tx_ctrl) {
   14cd0:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   14cd4:	b16b      	cbz	r3, 14cf2 <ctrl_tx_sec_enqueue+0x102>
			LL_ASSERT(!pause);
   14cd6:	4a12      	ldr	r2, [pc, #72]	; (14d20 <ctrl_tx_sec_enqueue+0x130>)
   14cd8:	4912      	ldr	r1, [pc, #72]	; (14d24 <ctrl_tx_sec_enqueue+0x134>)
   14cda:	4813      	ldr	r0, [pc, #76]	; (14d28 <ctrl_tx_sec_enqueue+0x138>)
   14cdc:	f640 0301 	movw	r3, #2049	; 0x801
   14ce0:	f00c fad8 	bl	21294 <printk>
   14ce4:	4040      	eors	r0, r0
   14ce6:	f380 8811 	msr	BASEPRI, r0
   14cea:	f04f 0003 	mov.w	r0, #3
   14cee:	df02      	svc	2
   14cf0:	e7cd      	b.n	14c8e <ctrl_tx_sec_enqueue+0x9e>
			tx->next = conn->tx_head;
   14cf2:	602a      	str	r2, [r5, #0]
			conn->tx_head = tx;
   14cf4:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
}
   14cf8:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head->next;
   14cfa:	6811      	ldr	r1, [r2, #0]
   14cfc:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   14cfe:	6015      	str	r5, [r2, #0]
			if (!pause) {
   14d00:	2b00      	cmp	r3, #0
   14d02:	d185      	bne.n	14c10 <ctrl_tx_sec_enqueue+0x20>
	if (!tx->next) {
   14d04:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   14d06:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
		if (!tx->next) {
   14d0a:	2b00      	cmp	r3, #0
   14d0c:	d183      	bne.n	14c16 <ctrl_tx_sec_enqueue+0x26>
   14d0e:	e7b7      	b.n	14c80 <ctrl_tx_sec_enqueue+0x90>
			tx->next = conn->tx_head;
   14d10:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   14d12:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   14d16:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
   14d1a:	bd38      	pop	{r3, r4, r5, pc}
				pause = true;
   14d1c:	2301      	movs	r3, #1
   14d1e:	e78d      	b.n	14c3c <ctrl_tx_sec_enqueue+0x4c>
   14d20:	00027f70 	.word	0x00027f70
   14d24:	00028034 	.word	0x00028034
   14d28:	00027ab4 	.word	0x00027ab4

00014d2c <event_len_prep>:
{
   14d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   14d2e:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
   14d32:	f003 0207 	and.w	r2, r3, #7
{
   14d36:	4604      	mov	r4, r0
   14d38:	2a06      	cmp	r2, #6
   14d3a:	f200 80c6 	bhi.w	14eca <event_len_prep+0x19e>
   14d3e:	e8df f002 	tbb	[pc, r2]
   14d42:	4804      	.short	0x4804
   14d44:	49494848 	.word	0x49494848
   14d48:	48          	.byte	0x48
   14d49:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14d4a:	4867      	ldr	r0, [pc, #412]	; (14ee8 <event_len_prep+0x1bc>)
   14d4c:	f7fb f89c 	bl	fe88 <mem_acquire>
		if (!tx) {
   14d50:	2800      	cmp	r0, #0
   14d52:	d03e      	beq.n	14dd2 <event_len_prep+0xa6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14d54:	f894 11a6 	ldrb.w	r1, [r4, #422]	; 0x1a6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   14d58:	f8b4 21aa 	ldrh.w	r2, [r4, #426]	; 0x1aa
		conn->default_tx_time = conn->llcp_length.tx_time;
   14d5c:	f8b4 51ae 	ldrh.w	r5, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   14d60:	f8a4 20d6 	strh.w	r2, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14d64:	2301      	movs	r3, #1
   14d66:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   14d6a:	f8a4 50d8 	strh.w	r5, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   14d6e:	f884 11a6 	strb.w	r1, [r4, #422]	; 0x1a6
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   14d72:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14d74:	72c3      	strb	r3, [r0, #11]
   14d76:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   14d78:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   14d7a:	2309      	movs	r3, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   14d7c:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   14d7e:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->len =
   14d80:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   14d82:	2214      	movs	r2, #20
	    conn->tx_head &&
   14d84:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   14d88:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14d8a:	221b      	movs	r2, #27
   14d8c:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14d8e:	7902      	ldrb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14d90:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14d92:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   14d96:	7241      	strb	r1, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14d98:	7102      	strb	r2, [r0, #4]
	if (
   14d9a:	b13b      	cbz	r3, 14dac <event_len_prep+0x80>
	    !conn->llcp_enc.pause_tx &&
   14d9c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   14da0:	0791      	lsls	r1, r2, #30
   14da2:	d403      	bmi.n	14dac <event_len_prep+0x80>
	    !conn->llcp_phy.pause_tx &&
   14da4:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   14da8:	07d2      	lsls	r2, r2, #31
   14daa:	d576      	bpl.n	14e9a <event_len_prep+0x16e>
		if (!conn->tx_ctrl) {
   14dac:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   14db0:	2a00      	cmp	r2, #0
   14db2:	f000 8084 	beq.w	14ebe <event_len_prep+0x192>
	tx->next = conn->tx_ctrl_last->next;
   14db6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   14dba:	681a      	ldr	r2, [r3, #0]
   14dbc:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14dbe:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   14dc0:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   14dc2:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   14dc6:	2b00      	cmp	r3, #0
   14dc8:	d056      	beq.n	14e78 <event_len_prep+0x14c>
		conn->procedure_expire = conn->procedure_reload;
   14dca:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   14dce:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
   14dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   14dd4:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   14dd8:	f8b0 c1a8 	ldrh.w	ip, [r0, #424]	; 0x1a8
		lll->max_rx_time = conn->llcp_length.rx_time;
   14ddc:	f8b0 11ac 	ldrh.w	r1, [r0, #428]	; 0x1ac
		tx_octets = conn->llcp_length.tx_octets;
   14de0:	f8b0 71aa 	ldrh.w	r7, [r0, #426]	; 0x1aa
		uint16_t tx_time = conn->llcp_length.tx_time;
   14de4:	f8b0 61ae 	ldrh.w	r6, [r0, #430]	; 0x1ae
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   14de8:	f8a0 c05e 	strh.w	ip, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   14dec:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   14dee:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   14df2:	d024      	beq.n	14e3e <event_len_prep+0x112>
			conn->llcp_length.state =
   14df4:	2206      	movs	r2, #6
   14df6:	f362 0302 	bfi	r3, r2, #0, #3
   14dfa:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
		rx = conn->llcp_rx;
   14dfe:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   14e02:	b335      	cbz	r5, 14e52 <event_len_prep+0x126>
   14e04:	6828      	ldr	r0, [r5, #0]
   14e06:	b320      	cbz	r0, 14e52 <event_len_prep+0x126>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   14e08:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   14e0a:	6842      	ldr	r2, [r0, #4]
   14e0c:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   14e10:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   14e14:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   14e16:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   14e18:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   14e1a:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   14e1c:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14e1e:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14e20:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   14e22:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   14e24:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   14e28:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   14e2a:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   14e2c:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14e2e:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14e30:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   14e32:	f7fe fe33 	bl	13a9c <ll_rx_put>
}
   14e36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   14e3a:	f7fe be39 	b.w	13ab0 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   14e3e:	f8b0 21b0 	ldrh.w	r2, [r0, #432]	; 0x1b0
   14e42:	b9e2      	cbnz	r2, 14e7e <event_len_prep+0x152>
				conn->llcp_length.ack = conn->llcp_length.req;
   14e44:	f890 31a4 	ldrb.w	r3, [r0, #420]	; 0x1a4
				conn->procedure_expire = 0U;
   14e48:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
				conn->llcp_length.ack = conn->llcp_length.req;
   14e4c:	f880 31a5 	strb.w	r3, [r0, #421]	; 0x1a5
				conn->procedure_expire = 0U;
   14e50:	e7d5      	b.n	14dfe <event_len_prep+0xd2>
		LL_ASSERT(rx && rx->hdr.link);
   14e52:	4a26      	ldr	r2, [pc, #152]	; (14eec <event_len_prep+0x1c0>)
   14e54:	4926      	ldr	r1, [pc, #152]	; (14ef0 <event_len_prep+0x1c4>)
   14e56:	4827      	ldr	r0, [pc, #156]	; (14ef4 <event_len_prep+0x1c8>)
   14e58:	f640 53f3 	movw	r3, #3571	; 0xdf3
   14e5c:	f00c fa1a 	bl	21294 <printk>
   14e60:	4040      	eors	r0, r0
   14e62:	f380 8811 	msr	BASEPRI, r0
   14e66:	f04f 0003 	mov.w	r0, #3
   14e6a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   14e6c:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   14e6e:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   14e72:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
   14e76:	e7c7      	b.n	14e08 <event_len_prep+0xdc>
		conn->tx_data_last = tx;
   14e78:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   14e7c:	e7a5      	b.n	14dca <event_len_prep+0x9e>
				conn->llcp_length.tx_octets =
   14e7e:	f8a0 21aa 	strh.w	r2, [r0, #426]	; 0x1aa
				conn->llcp_length.cache.tx_octets = 0;
   14e82:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14e84:	f362 0302 	bfi	r3, r2, #0, #3
   14e88:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
				conn->llcp_length.tx_time =
   14e8c:	f8b0 31b2 	ldrh.w	r3, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   14e90:	f8a0 21b0 	strh.w	r2, [r0, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   14e94:	f8a0 31ae 	strh.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14e98:	e7b1      	b.n	14dfe <event_len_prep+0xd2>
		if (conn->tx_head == conn->tx_data) {
   14e9a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   14e9e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   14ea0:	bf04      	itt	eq
   14ea2:	681a      	ldreq	r2, [r3, #0]
   14ea4:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   14ea8:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   14eac:	2a00      	cmp	r2, #0
   14eae:	d182      	bne.n	14db6 <event_len_prep+0x8a>
			tx->next = conn->tx_head->next;
   14eb0:	681a      	ldr	r2, [r3, #0]
   14eb2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   14eb4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   14eb6:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   14eb8:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   14ebc:	e783      	b.n	14dc6 <event_len_prep+0x9a>
			tx->next = conn->tx_head;
   14ebe:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   14ec0:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   14ec4:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   14ec8:	e77d      	b.n	14dc6 <event_len_prep+0x9a>
		LL_ASSERT(0);
   14eca:	4a08      	ldr	r2, [pc, #32]	; (14eec <event_len_prep+0x1c0>)
   14ecc:	490a      	ldr	r1, [pc, #40]	; (14ef8 <event_len_prep+0x1cc>)
   14ece:	4809      	ldr	r0, [pc, #36]	; (14ef4 <event_len_prep+0x1c8>)
   14ed0:	f640 631b 	movw	r3, #3611	; 0xe1b
   14ed4:	f00c f9de 	bl	21294 <printk>
   14ed8:	4040      	eors	r0, r0
   14eda:	f380 8811 	msr	BASEPRI, r0
   14ede:	f04f 0003 	mov.w	r0, #3
   14ee2:	df02      	svc	2
}
   14ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ee6:	bf00      	nop
   14ee8:	2000e428 	.word	0x2000e428
   14eec:	00027f70 	.word	0x00027f70
   14ef0:	0002803c 	.word	0x0002803c
   14ef4:	00027ab4 	.word	0x00027ab4
   14ef8:	00027b4c 	.word	0x00027b4c

00014efc <event_phy_upd_ind_prep>:
{
   14efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   14f00:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   14f04:	f013 0201 	ands.w	r2, r3, #1
{
   14f08:	4604      	mov	r4, r0
   14f0a:	460e      	mov	r6, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   14f0c:	f040 808d 	bne.w	1502a <event_phy_upd_ind_prep+0x12e>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   14f10:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
   14f14:	1a71      	subs	r1, r6, r1
   14f16:	0409      	lsls	r1, r1, #16
   14f18:	f100 80d2 	bmi.w	150c0 <event_phy_upd_ind_prep+0x1c4>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   14f1c:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
   14f20:	2900      	cmp	r1, #0
   14f22:	469c      	mov	ip, r3
   14f24:	f2c0 80f7 	blt.w	15116 <event_phy_upd_ind_prep+0x21a>
			conn->llcp_ack = conn->llcp_req;
   14f28:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   14f2c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		old_tx = lll->phy_tx;
   14f30:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
   14f34:	f894 8065 	ldrb.w	r8, [r4, #101]	; 0x65
		uint16_t eff_rx_time = lll->max_rx_time;
   14f38:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		if (conn->llcp.phy_upd_ind.tx) {
   14f3c:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   14f40:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   14f44:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   14f48:	f040 80bc 	bne.w	150c4 <event_phy_upd_ind_prep+0x1c8>
		uint16_t eff_tx_time = lll->max_tx_time;
   14f4c:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
		if (conn->llcp.phy_upd_ind.rx) {
   14f50:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   14f54:	d008      	beq.n	14f68 <event_phy_upd_ind_prep+0x6c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   14f56:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
   14f5a:	095b      	lsrs	r3, r3, #5
   14f5c:	f363 0202 	bfi	r2, r3, #0, #3
   14f60:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   14f64:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   14f68:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   14f6c:	2d00      	cmp	r5, #0
   14f6e:	f000 80b2 	beq.w	150d6 <event_phy_upd_ind_prep+0x1da>
   14f72:	6828      	ldr	r0, [r5, #0]
   14f74:	2800      	cmp	r0, #0
   14f76:	f000 80ae 	beq.w	150d6 <event_phy_upd_ind_prep+0x1da>
		conn->llcp_rx = rx->hdr.link->mem;
   14f7a:	6843      	ldr	r3, [r0, #4]
		    (lll->phy_rx == old_rx)) {
   14f7c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
		conn->llcp_rx = rx->hdr.link->mem;
   14f80:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   14f84:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   14f88:	f01c 0f02 	tst.w	ip, #2
   14f8c:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   14f90:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   14f94:	d102      	bne.n	14f9c <event_phy_upd_ind_prep+0xa0>
   14f96:	4599      	cmp	r9, r3
   14f98:	f000 80c5 	beq.w	15126 <event_phy_upd_ind_prep+0x22a>
		rx->hdr.handle = lll->handle;
   14f9c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
		upd->tx = lll->phy_tx;
   14f9e:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14fa0:	2319      	movs	r3, #25
   14fa2:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   14fa4:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
   14fa6:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
   14fa8:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
   14faa:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   14fac:	4629      	mov	r1, r5
   14fae:	f7fe fd75 	bl	13a9c <ll_rx_put>
		rx = conn->llcp_rx;
   14fb2:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   14fb6:	2d00      	cmp	r5, #0
   14fb8:	f000 809e 	beq.w	150f8 <event_phy_upd_ind_prep+0x1fc>
   14fbc:	6828      	ldr	r0, [r5, #0]
   14fbe:	2800      	cmp	r0, #0
   14fc0:	f000 809a 	beq.w	150f8 <event_phy_upd_ind_prep+0x1fc>
		if ((eff_tx_time <= lll->max_tx_time) &&
   14fc4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
   14fc8:	6842      	ldr	r2, [r0, #4]
   14fca:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		if ((eff_tx_time <= lll->max_tx_time) &&
   14fce:	42b3      	cmp	r3, r6
   14fd0:	d30a      	bcc.n	14fe8 <event_phy_upd_ind_prep+0xec>
   14fd2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   14fd6:	d807      	bhi.n	14fe8 <event_phy_upd_ind_prep+0xec>
		    (eff_rx_time <= lll->max_rx_time) &&
   14fd8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
   14fdc:	42bb      	cmp	r3, r7
   14fde:	d303      	bcc.n	14fe8 <event_phy_upd_ind_prep+0xec>
		    (eff_rx_time <= lll->max_rx_time) &&
   14fe0:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   14fe4:	f240 8116 	bls.w	15214 <event_phy_upd_ind_prep+0x318>
		lll->max_tx_time = eff_tx_time;
   14fe8:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
   14fec:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   14ff0:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   14ff2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   14ff4:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   14ff6:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14ffa:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   14ffe:	2109      	movs	r1, #9
   15000:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15002:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   15006:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15008:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   1500c:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   1500e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   15012:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15014:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   15016:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   15018:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   1501a:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1501c:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   1501e:	f7fe fd3d 	bl	13a9c <ll_rx_put>
}
   15022:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   15026:	f7fe bd43 	b.w	13ab0 <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   1502a:	2002      	movs	r0, #2
   1502c:	f7fe fd46 	bl	13abc <ll_pdu_rx_alloc_peek>
		if (!rx) {
   15030:	4680      	mov	r8, r0
   15032:	2800      	cmp	r0, #0
   15034:	d044      	beq.n	150c0 <event_phy_upd_ind_prep+0x1c4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15036:	4883      	ldr	r0, [pc, #524]	; (15244 <event_phy_upd_ind_prep+0x348>)
   15038:	f7fa ff26 	bl	fe88 <mem_acquire>
		if (!tx) {
   1503c:	4605      	mov	r5, r0
   1503e:	2800      	cmp	r0, #0
   15040:	d03e      	beq.n	150c0 <event_phy_upd_ind_prep+0x1c4>
		conn->llcp.phy_upd_ind.initiate = 0U;
   15042:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   15046:	f36f 0300 	bfc	r3, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   1504a:	f3c3 1742 	ubfx	r7, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   1504e:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
   15052:	f017 0707 	ands.w	r7, r7, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   15056:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
   1505a:	b2db      	uxtb	r3, r3
   1505c:	d17e      	bne.n	1515c <event_phy_upd_ind_prep+0x260>
			conn->llcp_ack = conn->llcp_req;
   1505e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
   15062:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
   15066:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   15068:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
   1506c:	f100 80ad 	bmi.w	151ca <event_phy_upd_ind_prep+0x2ce>
   15070:	463b      	mov	r3, r7
   15072:	463a      	mov	r2, r7
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15074:	726b      	strb	r3, [r5, #9]
		pdu_ctrl_tx->len =
   15076:	2305      	movs	r3, #5
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15078:	722f      	strb	r7, [r5, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1507a:	816a      	strh	r2, [r5, #10]
		pdu_ctrl_tx->len =
   1507c:	716b      	strb	r3, [r5, #5]
		pdu_ctrl_tx->llctrl.opcode =
   1507e:	2218      	movs	r2, #24
	    conn->tx_head &&
   15080:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode =
   15084:	71ea      	strb	r2, [r5, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15086:	792a      	ldrb	r2, [r5, #4]
   15088:	f042 0203 	orr.w	r2, r2, #3
   1508c:	712a      	strb	r2, [r5, #4]
	if (
   1508e:	b13b      	cbz	r3, 150a0 <event_phy_upd_ind_prep+0x1a4>
	    !conn->llcp_enc.pause_tx &&
   15090:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   15094:	0796      	lsls	r6, r2, #30
   15096:	d403      	bmi.n	150a0 <event_phy_upd_ind_prep+0x1a4>
	    !conn->llcp_phy.pause_tx &&
   15098:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   1509c:	07d0      	lsls	r0, r2, #31
   1509e:	d57b      	bpl.n	15198 <event_phy_upd_ind_prep+0x29c>
		if (!conn->tx_ctrl) {
   150a0:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   150a4:	2a00      	cmp	r2, #0
   150a6:	f000 808a 	beq.w	151be <event_phy_upd_ind_prep+0x2c2>
	tx->next = conn->tx_ctrl_last->next;
   150aa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   150ae:	681a      	ldr	r2, [r3, #0]
   150b0:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   150b2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   150b4:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   150b6:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
	if (!tx->next) {
   150ba:	b90b      	cbnz	r3, 150c0 <event_phy_upd_ind_prep+0x1c4>
		conn->tx_data_last = tx;
   150bc:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   150c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   150c4:	f3c3 0182 	ubfx	r1, r3, #2, #3
   150c8:	f361 0202 	bfi	r2, r1, #0, #3
   150cc:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   150d0:	f44f 76a4 	mov.w	r6, #328	; 0x148
   150d4:	e73c      	b.n	14f50 <event_phy_upd_ind_prep+0x54>
		LL_ASSERT(rx && rx->hdr.link);
   150d6:	4a5c      	ldr	r2, [pc, #368]	; (15248 <event_phy_upd_ind_prep+0x34c>)
   150d8:	495c      	ldr	r1, [pc, #368]	; (1524c <event_phy_upd_ind_prep+0x350>)
   150da:	485d      	ldr	r0, [pc, #372]	; (15250 <event_phy_upd_ind_prep+0x354>)
   150dc:	f640 732c 	movw	r3, #3884	; 0xf2c
   150e0:	f00c f8d8 	bl	21294 <printk>
   150e4:	4040      	eors	r0, r0
   150e6:	f380 8811 	msr	BASEPRI, r0
   150ea:	f04f 0003 	mov.w	r0, #3
   150ee:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   150f0:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   150f2:	f894 c0ec 	ldrb.w	ip, [r4, #236]	; 0xec
   150f6:	e740      	b.n	14f7a <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   150f8:	4a53      	ldr	r2, [pc, #332]	; (15248 <event_phy_upd_ind_prep+0x34c>)
   150fa:	4954      	ldr	r1, [pc, #336]	; (1524c <event_phy_upd_ind_prep+0x350>)
   150fc:	4854      	ldr	r0, [pc, #336]	; (15250 <event_phy_upd_ind_prep+0x354>)
   150fe:	f640 7358 	movw	r3, #3928	; 0xf58
   15102:	f00c f8c7 	bl	21294 <printk>
   15106:	4040      	eors	r0, r0
   15108:	f380 8811 	msr	BASEPRI, r0
   1510c:	f04f 0003 	mov.w	r0, #3
   15110:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   15112:	6828      	ldr	r0, [r5, #0]
   15114:	e756      	b.n	14fc4 <event_phy_upd_ind_prep+0xc8>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   15116:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
   1511a:	2900      	cmp	r1, #0
   1511c:	f43f af04 	beq.w	14f28 <event_phy_upd_ind_prep+0x2c>
			conn->slave.llcp_type = LLCP_NONE;
   15120:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
   15124:	e704      	b.n	14f30 <event_phy_upd_ind_prep+0x34>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   15126:	4590      	cmp	r8, r2
   15128:	f47f af38 	bne.w	14f9c <event_phy_upd_ind_prep+0xa0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1512c:	2301      	movs	r3, #1
   1512e:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   15130:	4629      	mov	r1, r5
   15132:	f7fe fcb3 	bl	13a9c <ll_rx_put>
				rx = conn->llcp_rx;
   15136:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
				LL_ASSERT(rx && rx->hdr.link);
   1513a:	2d00      	cmp	r5, #0
   1513c:	d073      	beq.n	15226 <event_phy_upd_ind_prep+0x32a>
   1513e:	6828      	ldr	r0, [r5, #0]
   15140:	2800      	cmp	r0, #0
   15142:	d070      	beq.n	15226 <event_phy_upd_ind_prep+0x32a>
				conn->llcp_rx = rx->hdr.link->mem;
   15144:	6842      	ldr	r2, [r0, #4]
   15146:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1514a:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   1514c:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1514e:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   15150:	f7fe fca4 	bl	13a9c <ll_rx_put>
}
   15154:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   15158:	f7fe bcaa 	b.w	13ab0 <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   1515c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1515e:	4431      	add	r1, r6
							 lll->latency +
   15160:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   15162:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
   15166:	f7fe fcc7 	bl	13af8 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   1516a:	f8d8 3000 	ldr.w	r3, [r8]
   1516e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   15172:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   15174:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
			rx = ll_pdu_rx_alloc();
   15178:	f7fe fcbe 	bl	13af8 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   1517c:	6803      	ldr	r3, [r0, #0]
   1517e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   15182:	605a      	str	r2, [r3, #4]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15184:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   15188:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
			conn->llcp_rx = rx;
   1518c:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15190:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15194:	095b      	lsrs	r3, r3, #5
   15196:	e76d      	b.n	15074 <event_phy_upd_ind_prep+0x178>
		if (conn->tx_head == conn->tx_data) {
   15198:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1519c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1519e:	bf04      	itt	eq
   151a0:	681a      	ldreq	r2, [r3, #0]
   151a2:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   151a6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   151aa:	2a00      	cmp	r2, #0
   151ac:	f47f af7d 	bne.w	150aa <event_phy_upd_ind_prep+0x1ae>
			tx->next = conn->tx_head->next;
   151b0:	681a      	ldr	r2, [r3, #0]
   151b2:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   151b4:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   151b6:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   151b8:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
   151bc:	e77d      	b.n	150ba <event_phy_upd_ind_prep+0x1be>
			tx->next = conn->tx_head;
   151be:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   151c0:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   151c4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
   151c8:	e777      	b.n	150ba <event_phy_upd_ind_prep+0x1be>
				(void)ll_pdu_rx_alloc();
   151ca:	f7fe fc95 	bl	13af8 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   151ce:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   151d0:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   151d4:	2319      	movs	r3, #25
				upd->status = 0U;
   151d6:	f888 701c 	strb.w	r7, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   151da:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   151de:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
   151e2:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   151e6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   151ea:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   151ee:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   151f2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   151f6:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   151fa:	4641      	mov	r1, r8
   151fc:	f7fe fc4e 	bl	13a9c <ll_rx_put>
				ll_rx_sched();
   15200:	f7fe fc56 	bl	13ab0 <ll_rx_sched>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15204:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   15208:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1520c:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15210:	095b      	lsrs	r3, r3, #5
   15212:	e72f      	b.n	15074 <event_phy_upd_ind_prep+0x178>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15214:	2301      	movs	r3, #1
   15216:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   15218:	4629      	mov	r1, r5
   1521a:	f7fe fc3f 	bl	13a9c <ll_rx_put>
}
   1521e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   15222:	f7fe bc45 	b.w	13ab0 <ll_rx_sched>
				LL_ASSERT(rx && rx->hdr.link);
   15226:	4a08      	ldr	r2, [pc, #32]	; (15248 <event_phy_upd_ind_prep+0x34c>)
   15228:	4908      	ldr	r1, [pc, #32]	; (1524c <event_phy_upd_ind_prep+0x350>)
   1522a:	4809      	ldr	r0, [pc, #36]	; (15250 <event_phy_upd_ind_prep+0x354>)
   1522c:	f640 733b 	movw	r3, #3899	; 0xf3b
   15230:	f00c f830 	bl	21294 <printk>
   15234:	4040      	eors	r0, r0
   15236:	f380 8811 	msr	BASEPRI, r0
   1523a:	f04f 0003 	mov.w	r0, #3
   1523e:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   15240:	6828      	ldr	r0, [r5, #0]
   15242:	e77f      	b.n	15144 <event_phy_upd_ind_prep+0x248>
   15244:	2000e428 	.word	0x2000e428
   15248:	00027f70 	.word	0x00027f70
   1524c:	0002803c 	.word	0x0002803c
   15250:	00027ab4 	.word	0x00027ab4

00015254 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   15254:	4801      	ldr	r0, [pc, #4]	; (1525c <ll_conn_acquire+0x8>)
   15256:	f7fa be17 	b.w	fe88 <mem_acquire>
   1525a:	bf00      	nop
   1525c:	2000e1cc 	.word	0x2000e1cc

00015260 <ll_conn_release>:
	mem_release(conn, &conn_free);
   15260:	4901      	ldr	r1, [pc, #4]	; (15268 <ll_conn_release+0x8>)
   15262:	f7fa be2b 	b.w	febc <mem_release>
   15266:	bf00      	nop
   15268:	2000e1cc 	.word	0x2000e1cc

0001526c <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1526c:	4902      	ldr	r1, [pc, #8]	; (15278 <ll_conn_handle_get+0xc>)
   1526e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   15272:	f7fa be3f 	b.w	fef4 <mem_index_get>
   15276:	bf00      	nop
   15278:	2000e1d0 	.word	0x2000e1d0

0001527c <ll_conn_get>:
{
   1527c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1527e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15282:	4801      	ldr	r0, [pc, #4]	; (15288 <ll_conn_get+0xc>)
   15284:	f7fa be32 	b.w	feec <mem_get>
   15288:	2000e1d0 	.word	0x2000e1d0

0001528c <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1528c:	b958      	cbnz	r0, 152a6 <ll_connected_get+0x1a>
{
   1528e:	b508      	push	{r3, lr}
   15290:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15292:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15296:	4805      	ldr	r0, [pc, #20]	; (152ac <ll_connected_get+0x20>)
   15298:	f7fa fe28 	bl	feec <mem_get>
	if (conn->lll.handle != handle) {
   1529c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1529e:	b903      	cbnz	r3, 152a2 <ll_connected_get+0x16>
}
   152a0:	bd08      	pop	{r3, pc}
		return NULL;
   152a2:	2000      	movs	r0, #0
}
   152a4:	bd08      	pop	{r3, pc}
		return NULL;
   152a6:	2000      	movs	r0, #0
}
   152a8:	4770      	bx	lr
   152aa:	bf00      	nop
   152ac:	2000e1d0 	.word	0x2000e1d0

000152b0 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   152b0:	4801      	ldr	r0, [pc, #4]	; (152b8 <ll_tx_mem_acquire+0x8>)
   152b2:	f7fa bde9 	b.w	fe88 <mem_acquire>
   152b6:	bf00      	nop
   152b8:	2000e3b8 	.word	0x2000e3b8

000152bc <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   152bc:	4901      	ldr	r1, [pc, #4]	; (152c4 <ll_tx_mem_release+0x8>)
   152be:	f7fa bdfd 	b.w	febc <mem_release>
   152c2:	bf00      	nop
   152c4:	2000e3b8 	.word	0x2000e3b8

000152c8 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   152c8:	2800      	cmp	r0, #0
   152ca:	d140      	bne.n	1534e <ll_tx_mem_enqueue+0x86>
{
   152cc:	b570      	push	{r4, r5, r6, lr}
   152ce:	4602      	mov	r2, r0
   152d0:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   152d2:	4820      	ldr	r0, [pc, #128]	; (15354 <ll_tx_mem_enqueue+0x8c>)
   152d4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   152d8:	f7fa fe08 	bl	feec <mem_get>
	if (conn->lll.handle != handle) {
   152dc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   152de:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   152e0:	bb7a      	cbnz	r2, 15342 <ll_tx_mem_enqueue+0x7a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   152e2:	4c1d      	ldr	r4, [pc, #116]	; (15358 <ll_tx_mem_enqueue+0x90>)
   152e4:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   152e6:	f894 c001 	ldrb.w	ip, [r4, #1]
   152ea:	78a0      	ldrb	r0, [r4, #2]
	last = last + 1;
   152ec:	1c4b      	adds	r3, r1, #1
   152ee:	b2db      	uxtb	r3, r3
		last = 0U;
   152f0:	459c      	cmp	ip, r3
   152f2:	bf08      	it	eq
   152f4:	2300      	moveq	r3, #0
	if (last == first) {
   152f6:	4298      	cmp	r0, r3
   152f8:	d026      	beq.n	15348 <ll_tx_mem_enqueue+0x80>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   152fa:	46a4      	mov	ip, r4
   152fc:	f81c 0b04 	ldrb.w	r0, [ip], #4
   15300:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   15304:	eb1c 0100 	adds.w	r1, ip, r0
   15308:	d01e      	beq.n	15348 <ll_tx_mem_enqueue+0x80>
	lll_tx->handle = handle;
   1530a:	f82c 2000 	strh.w	r2, [ip, r0]
	lll_tx->node = tx;
   1530e:	604e      	str	r6, [r1, #4]
   15310:	7c29      	ldrb	r1, [r5, #16]
	*last = idx; /* Commit: Update write index */
   15312:	70e3      	strb	r3, [r4, #3]
	if (ull_ref_get(&conn->ull)) {
   15314:	b929      	cbnz	r1, 15322 <ll_tx_mem_enqueue+0x5a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15316:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1531a:	2b00      	cmp	r3, #0
   1531c:	db0b      	blt.n	15336 <ll_tx_mem_enqueue+0x6e>
	return 0;
   1531e:	2000      	movs	r0, #0
}
   15320:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   15322:	4b0e      	ldr	r3, [pc, #56]	; (1535c <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   15324:	2101      	movs	r1, #1
   15326:	2003      	movs	r0, #3
		mfy.param = conn;
   15328:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1532a:	f7fa fe85 	bl	10038 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1532e:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15332:	2b00      	cmp	r3, #0
   15334:	daf3      	bge.n	1531e <ll_tx_mem_enqueue+0x56>
		ull_slave_latency_cancel(conn, handle);
   15336:	4628      	mov	r0, r5
   15338:	2100      	movs	r1, #0
   1533a:	f003 fde1 	bl	18f00 <ull_slave_latency_cancel>
	return 0;
   1533e:	2000      	movs	r0, #0
}
   15340:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15342:	f06f 0015 	mvn.w	r0, #21
}
   15346:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   15348:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1534c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1534e:	f06f 0015 	mvn.w	r0, #21
}
   15352:	4770      	bx	lr
   15354:	2000e1d0 	.word	0x2000e1d0
   15358:	200005b0 	.word	0x200005b0
   1535c:	200005e4 	.word	0x200005e4

00015360 <ll_conn_update>:
{
   15360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15364:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   15368:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   1536c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   15370:	2800      	cmp	r0, #0
   15372:	d155      	bne.n	15420 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15374:	460c      	mov	r4, r1
   15376:	4615      	mov	r5, r2
   15378:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1537c:	4602      	mov	r2, r0
   1537e:	4841      	ldr	r0, [pc, #260]	; (15484 <ll_conn_update+0x124>)
   15380:	461e      	mov	r6, r3
   15382:	f7fa fdb3 	bl	feec <mem_get>
   15386:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   15388:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   1538a:	2800      	cmp	r0, #0
   1538c:	d148      	bne.n	15420 <ll_conn_update+0xc0>
	if (!cmd) {
   1538e:	bb3c      	cbnz	r4, 153e0 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   15390:	f89c 317e 	ldrb.w	r3, [ip, #382]	; 0x17e
   15394:	06d9      	lsls	r1, r3, #27
   15396:	d44a      	bmi.n	1542e <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   15398:	f89c 30dc 	ldrb.w	r3, [ip, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   1539c:	07da      	lsls	r2, r3, #31
   1539e:	d442      	bmi.n	15426 <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   153a0:	f89c 217c 	ldrb.w	r2, [ip, #380]	; 0x17c
   153a4:	f89c 317d 	ldrb.w	r3, [ip, #381]	; 0x17d
   153a8:	4293      	cmp	r3, r2
   153aa:	d136      	bne.n	1541a <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   153ac:	f8bc 217e 	ldrh.w	r2, [ip, #382]	; 0x17e
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   153b0:	f99c 103d 	ldrsb.w	r1, [ip, #61]	; 0x3d
			conn->llcp_conn_param.interval_min = interval_min;
   153b4:	f8ac 6180 	strh.w	r6, [ip, #384]	; 0x180
			conn->llcp_conn_param.state = cmd;
   153b8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   153bc:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   153be:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   153c2:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   153c4:	f8ac 9182 	strh.w	r9, [ip, #386]	; 0x182
			conn->llcp_conn_param.latency = latency;
   153c8:	f8ac 8184 	strh.w	r8, [ip, #388]	; 0x184
			conn->llcp_conn_param.timeout = timeout;
   153cc:	f8ac 7186 	strh.w	r7, [ip, #390]	; 0x186
			conn->llcp_conn_param.state = cmd;
   153d0:	f8ac 217e 	strh.w	r2, [ip, #382]	; 0x17e
			conn->llcp_conn_param.req++;
   153d4:	f88c 317c 	strb.w	r3, [ip, #380]	; 0x17c
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   153d8:	db4e      	blt.n	15478 <ll_conn_update+0x118>
	return 0;
   153da:	2000      	movs	r0, #0
}
   153dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   153e0:	3c01      	subs	r4, #1
		if (cmd) {
   153e2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   153e6:	d0db      	beq.n	153a0 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   153e8:	f89c 217c 	ldrb.w	r2, [ip, #380]	; 0x17c
   153ec:	f89c 317d 	ldrb.w	r3, [ip, #381]	; 0x17d
   153f0:	429a      	cmp	r2, r3
   153f2:	d012      	beq.n	1541a <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   153f4:	f89c 317e 	ldrb.w	r3, [ip, #382]	; 0x17e
			     conn->llcp_conn_param.ack) ||
   153f8:	f003 0207 	and.w	r2, r3, #7
   153fc:	2a03      	cmp	r2, #3
   153fe:	d10c      	bne.n	1541a <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   15400:	f004 0407 	and.w	r4, r4, #7
   15404:	f023 030f 	bic.w	r3, r3, #15
   15408:	f044 0408 	orr.w	r4, r4, #8
   1540c:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   1540e:	f88c 517f 	strb.w	r5, [ip, #383]	; 0x17f
			conn->llcp_conn_param.state = cmd;
   15412:	f88c 417e 	strb.w	r4, [ip, #382]	; 0x17e
}
   15416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1541a:	200c      	movs	r0, #12
}
   1541c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15420:	2002      	movs	r0, #2
}
   15422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   15426:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   1542a:	079b      	lsls	r3, r3, #30
   1542c:	d4b8      	bmi.n	153a0 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   1542e:	f99c 303d 	ldrsb.w	r3, [ip, #61]	; 0x3d
   15432:	2b00      	cmp	r3, #0
   15434:	db1e      	blt.n	15474 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   15436:	f89c 2110 	ldrb.w	r2, [ip, #272]	; 0x110
   1543a:	f89c 3111 	ldrb.w	r3, [ip, #273]	; 0x111
   1543e:	4293      	cmp	r3, r2
   15440:	d1eb      	bne.n	1541a <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15442:	f89c 2112 	ldrb.w	r2, [ip, #274]	; 0x112
		conn->llcp_cu.interval = interval_max;
   15446:	f8ac 9114 	strh.w	r9, [ip, #276]	; 0x114
		conn->llcp_cu.req++;
   1544a:	3301      	adds	r3, #1
   1544c:	f88c 3110 	strb.w	r3, [ip, #272]	; 0x110
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15450:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   15454:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15456:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   1545a:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   1545c:	f88c 3120 	strb.w	r3, [ip, #288]	; 0x120
		conn->llcp_cu.latency = latency;
   15460:	f8ac 8116 	strh.w	r8, [ip, #278]	; 0x116
		conn->llcp_cu.timeout = timeout;
   15464:	f8ac 7118 	strh.w	r7, [ip, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15468:	f88c 2112 	strb.w	r2, [ip, #274]	; 0x112
		conn->llcp_cu.win_offset_us = 0U;
   1546c:	f8cc 011c 	str.w	r0, [ip, #284]	; 0x11c
}
   15470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15474:	201a      	movs	r0, #26
   15476:	e7d1      	b.n	1541c <ll_conn_update+0xbc>
				ull_slave_latency_cancel(conn, handle);
   15478:	4660      	mov	r0, ip
   1547a:	2100      	movs	r1, #0
   1547c:	f003 fd40 	bl	18f00 <ull_slave_latency_cancel>
	return 0;
   15480:	2000      	movs	r0, #0
   15482:	e7cb      	b.n	1541c <ll_conn_update+0xbc>
   15484:	2000e1d0 	.word	0x2000e1d0

00015488 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15488:	b9d0      	cbnz	r0, 154c0 <ll_chm_get+0x38>
{
   1548a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1548c:	4602      	mov	r2, r0
   1548e:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15490:	480c      	ldr	r0, [pc, #48]	; (154c4 <ll_chm_get+0x3c>)
   15492:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15496:	f7fa fd29 	bl	feec <mem_get>
	if (conn->lll.handle != handle) {
   1549a:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1549c:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1549e:	b96e      	cbnz	r6, 154bc <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   154a0:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   154a4:	f884 61d0 	strb.w	r6, [r4, #464]	; 0x1d0
		memcpy(chm, conn->lll.data_chan_map,
   154a8:	2205      	movs	r2, #5
   154aa:	4639      	mov	r1, r7
   154ac:	4628      	mov	r0, r5
   154ae:	f00e fb64 	bl	23b7a <memcpy>
	} while (conn->chm_updated);
   154b2:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
   154b6:	2800      	cmp	r0, #0
   154b8:	d1f4      	bne.n	154a4 <ll_chm_get+0x1c>
}
   154ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   154bc:	2002      	movs	r0, #2
}
   154be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   154c0:	2002      	movs	r0, #2
}
   154c2:	4770      	bx	lr
   154c4:	2000e1d0 	.word	0x2000e1d0

000154c8 <ll_terminate_ind_send>:
	switch (reason) {
   154c8:	2929      	cmp	r1, #41	; 0x29
{
   154ca:	b538      	push	{r3, r4, r5, lr}
   154cc:	460d      	mov	r5, r1
   154ce:	4604      	mov	r4, r0
	switch (reason) {
   154d0:	d819      	bhi.n	15506 <ll_terminate_ind_send+0x3e>
   154d2:	2904      	cmp	r1, #4
   154d4:	d919      	bls.n	1550a <ll_terminate_ind_send+0x42>
   154d6:	1f4b      	subs	r3, r1, #5
   154d8:	2b24      	cmp	r3, #36	; 0x24
   154da:	d816      	bhi.n	1550a <ll_terminate_ind_send+0x42>
   154dc:	e8df f003 	tbb	[pc, r3]
   154e0:	15151517 	.word	0x15151517
   154e4:	15151515 	.word	0x15151515
   154e8:	15151515 	.word	0x15151515
   154ec:	17171515 	.word	0x17171515
   154f0:	15151517 	.word	0x15151517
   154f4:	15151715 	.word	0x15151715
   154f8:	15151515 	.word	0x15151515
   154fc:	15151515 	.word	0x15151515
   15500:	15151515 	.word	0x15151515
   15504:	17          	.byte	0x17
   15505:	00          	.byte	0x00
   15506:	293b      	cmp	r1, #59	; 0x3b
   15508:	d001      	beq.n	1550e <ll_terminate_ind_send+0x46>
   1550a:	2012      	movs	r0, #18
}
   1550c:	bd38      	pop	{r3, r4, r5, pc}
	if (handle >= CONFIG_BT_MAX_CONN) {
   1550e:	b9a4      	cbnz	r4, 1553a <ll_terminate_ind_send+0x72>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15510:	4622      	mov	r2, r4
   15512:	480d      	ldr	r0, [pc, #52]	; (15548 <ll_terminate_ind_send+0x80>)
   15514:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15518:	f7fa fce8 	bl	feec <mem_get>
	if (conn->lll.handle != handle) {
   1551c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   1551e:	b962      	cbnz	r2, 1553a <ll_terminate_ind_send+0x72>
	conn->llcp_terminate.req++;
   15520:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15524:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   15528:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
	conn->llcp_terminate.req++;
   1552c:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1552e:	2b00      	cmp	r3, #0
	conn->llcp_terminate.req++;
   15530:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15534:	db03      	blt.n	1553e <ll_terminate_ind_send+0x76>
	return 0;
   15536:	4620      	mov	r0, r4
}
   15538:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1553a:	2002      	movs	r0, #2
}
   1553c:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   1553e:	4621      	mov	r1, r4
   15540:	f003 fcde 	bl	18f00 <ull_slave_latency_cancel>
	return 0;
   15544:	4620      	mov	r0, r4
}
   15546:	bd38      	pop	{r3, r4, r5, pc}
   15548:	2000e1d0 	.word	0x2000e1d0

0001554c <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1554c:	bb00      	cbnz	r0, 15590 <ll_feature_req_send+0x44>
{
   1554e:	b510      	push	{r4, lr}
   15550:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15552:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15556:	480f      	ldr	r0, [pc, #60]	; (15594 <ll_feature_req_send+0x48>)
   15558:	f7fa fcc8 	bl	feec <mem_get>
	if (conn->lll.handle != handle) {
   1555c:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   1555e:	b984      	cbnz	r4, 15582 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   15560:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
   15564:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
   15568:	428a      	cmp	r2, r1
   1556a:	d108      	bne.n	1557e <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1556c:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   15570:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15572:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   15574:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15578:	db05      	blt.n	15586 <ll_feature_req_send+0x3a>
	return 0;
   1557a:	4620      	mov	r0, r4
}
   1557c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1557e:	200c      	movs	r0, #12
}
   15580:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15582:	2002      	movs	r0, #2
}
   15584:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   15586:	4621      	mov	r1, r4
   15588:	f003 fcba 	bl	18f00 <ull_slave_latency_cancel>
	return 0;
   1558c:	4620      	mov	r0, r4
}
   1558e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15590:	2002      	movs	r0, #2
}
   15592:	4770      	bx	lr
   15594:	2000e1d0 	.word	0x2000e1d0

00015598 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15598:	bb00      	cbnz	r0, 155dc <ll_version_ind_send+0x44>
{
   1559a:	b510      	push	{r4, lr}
   1559c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1559e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   155a2:	480f      	ldr	r0, [pc, #60]	; (155e0 <ll_version_ind_send+0x48>)
   155a4:	f7fa fca2 	bl	feec <mem_get>
	if (conn->lll.handle != handle) {
   155a8:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   155aa:	b984      	cbnz	r4, 155ce <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   155ac:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
   155b0:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
   155b4:	428a      	cmp	r2, r1
   155b6:	d108      	bne.n	155ca <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   155b8:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   155bc:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   155be:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   155c0:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   155c4:	db05      	blt.n	155d2 <ll_version_ind_send+0x3a>
	return 0;
   155c6:	4620      	mov	r0, r4
}
   155c8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   155ca:	200c      	movs	r0, #12
}
   155cc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   155ce:	2002      	movs	r0, #2
}
   155d0:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   155d2:	4621      	mov	r1, r4
   155d4:	f003 fc94 	bl	18f00 <ull_slave_latency_cancel>
	return 0;
   155d8:	4620      	mov	r0, r4
}
   155da:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   155dc:	2002      	movs	r0, #2
}
   155de:	4770      	bx	lr
   155e0:	2000e1d0 	.word	0x2000e1d0

000155e4 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   155e4:	2800      	cmp	r0, #0
   155e6:	d14c      	bne.n	15682 <ll_length_req_send+0x9e>
{
   155e8:	b538      	push	{r3, r4, r5, lr}
   155ea:	460d      	mov	r5, r1
   155ec:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   155ee:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   155f2:	4602      	mov	r2, r0
   155f4:	4824      	ldr	r0, [pc, #144]	; (15688 <ll_length_req_send+0xa4>)
   155f6:	f7fa fc79 	bl	feec <mem_get>
	if (conn->lll.handle != handle) {
   155fa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   155fc:	bbc3      	cbnz	r3, 15670 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   155fe:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
   15602:	071a      	lsls	r2, r3, #28
   15604:	d432      	bmi.n	1566c <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   15606:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   1560a:	07d1      	lsls	r1, r2, #31
   1560c:	d503      	bpl.n	15616 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   1560e:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   15612:	0692      	lsls	r2, r2, #26
   15614:	d52a      	bpl.n	1566c <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   15616:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
   1561a:	f890 21a5 	ldrb.w	r2, [r0, #421]	; 0x1a5
   1561e:	428a      	cmp	r2, r1
   15620:	d011      	beq.n	15646 <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   15622:	f003 0307 	and.w	r3, r3, #7
   15626:	2b03      	cmp	r3, #3
   15628:	d004      	beq.n	15634 <ll_length_req_send+0x50>
   1562a:	3303      	adds	r3, #3
   1562c:	f003 0307 	and.w	r3, r3, #7
   15630:	2b01      	cmp	r3, #1
   15632:	d824      	bhi.n	1567e <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   15634:	f8b0 31b0 	ldrh.w	r3, [r0, #432]	; 0x1b0
   15638:	bb0b      	cbnz	r3, 1567e <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   1563a:	f8a0 51b0 	strh.w	r5, [r0, #432]	; 0x1b0
				conn->llcp_length.cache.tx_time = tx_time;
   1563e:	f8a0 41b2 	strh.w	r4, [r0, #434]	; 0x1b2
				return 0;
   15642:	4618      	mov	r0, r3
}
   15644:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15646:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
	conn->llcp_length.tx_octets = tx_octets;
   1564a:	f8a0 51aa 	strh.w	r5, [r0, #426]	; 0x1aa
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1564e:	f36f 0302 	bfc	r3, #0, #3
   15652:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15656:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_length.tx_time = tx_time;
   1565a:	f8a0 41ae 	strh.w	r4, [r0, #430]	; 0x1ae
	conn->llcp_length.req++;
   1565e:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15660:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   15662:	f880 21a4 	strb.w	r2, [r0, #420]	; 0x1a4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15666:	db05      	blt.n	15674 <ll_length_req_send+0x90>
	return 0;
   15668:	2000      	movs	r0, #0
}
   1566a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1566c:	201a      	movs	r0, #26
}
   1566e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15670:	2002      	movs	r0, #2
}
   15672:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   15674:	2100      	movs	r1, #0
   15676:	f003 fc43 	bl	18f00 <ull_slave_latency_cancel>
	return 0;
   1567a:	2000      	movs	r0, #0
}
   1567c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1567e:	200c      	movs	r0, #12
}
   15680:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15682:	2002      	movs	r0, #2
}
   15684:	4770      	bx	lr
   15686:	bf00      	nop
   15688:	2000e1d0 	.word	0x2000e1d0

0001568c <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   1568c:	4a03      	ldr	r2, [pc, #12]	; (1569c <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   1568e:	4b04      	ldr	r3, [pc, #16]	; (156a0 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   15690:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   15692:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   15694:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   15696:	800b      	strh	r3, [r1, #0]
}
   15698:	4770      	bx	lr
   1569a:	bf00      	nop
   1569c:	2000ed1a 	.word	0x2000ed1a
   156a0:	2000ed1c 	.word	0x2000ed1c

000156a4 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   156a4:	4a02      	ldr	r2, [pc, #8]	; (156b0 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   156a6:	4b03      	ldr	r3, [pc, #12]	; (156b4 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   156a8:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   156aa:	8019      	strh	r1, [r3, #0]
}
   156ac:	2000      	movs	r0, #0
   156ae:	4770      	bx	lr
   156b0:	2000ed1a 	.word	0x2000ed1a
   156b4:	2000ed1c 	.word	0x2000ed1c

000156b8 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   156b8:	f04f 0c1b 	mov.w	ip, #27
   156bc:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   156c0:	f44f 70a0 	mov.w	r0, #320	; 0x140
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   156c4:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   156c8:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   156ca:	8018      	strh	r0, [r3, #0]
}
   156cc:	4770      	bx	lr
   156ce:	bf00      	nop

000156d0 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   156d0:	b9c0      	cbnz	r0, 15704 <ll_phy_get+0x34>
{
   156d2:	b538      	push	{r3, r4, r5, lr}
   156d4:	460d      	mov	r5, r1
   156d6:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   156d8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   156dc:	4602      	mov	r2, r0
   156de:	480a      	ldr	r0, [pc, #40]	; (15708 <ll_phy_get+0x38>)
   156e0:	f7fa fc04 	bl	feec <mem_get>
   156e4:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   156e6:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   156e8:	b950      	cbnz	r0, 15700 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   156ea:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   156ee:	f3c2 0202 	ubfx	r2, r2, #0, #3
   156f2:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   156f4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   156f8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   156fc:	7023      	strb	r3, [r4, #0]
}
   156fe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15700:	2002      	movs	r0, #2
}
   15702:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15704:	2002      	movs	r0, #2
}
   15706:	4770      	bx	lr
   15708:	2000e1d0 	.word	0x2000e1d0

0001570c <ll_phy_default_set>:
	default_phy_tx = tx;
   1570c:	4a02      	ldr	r2, [pc, #8]	; (15718 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1570e:	4b03      	ldr	r3, [pc, #12]	; (1571c <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   15710:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   15712:	7019      	strb	r1, [r3, #0]
}
   15714:	2000      	movs	r0, #0
   15716:	4770      	bx	lr
   15718:	2000f2b4 	.word	0x2000f2b4
   1571c:	2000f2b3 	.word	0x2000f2b3

00015720 <ll_phy_req_send>:
{
   15720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   15722:	2800      	cmp	r0, #0
   15724:	d143      	bne.n	157ae <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15726:	460c      	mov	r4, r1
   15728:	4616      	mov	r6, r2
   1572a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1572e:	4602      	mov	r2, r0
   15730:	4823      	ldr	r0, [pc, #140]	; (157c0 <ll_phy_req_send+0xa0>)
   15732:	461f      	mov	r7, r3
   15734:	f7fa fbda 	bl	feec <mem_get>
	if (conn->lll.handle != handle) {
   15738:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1573a:	bbc3      	cbnz	r3, 157ae <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   1573c:	f890 51b7 	ldrb.w	r5, [r0, #439]	; 0x1b7
   15740:	f015 0508 	ands.w	r5, r5, #8
   15744:	d130      	bne.n	157a8 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   15746:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   1574a:	07db      	lsls	r3, r3, #31
   1574c:	d504      	bpl.n	15758 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   1574e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   15752:	f413 6f10 	tst.w	r3, #2304	; 0x900
   15756:	d027      	beq.n	157a8 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   15758:	f890 31b4 	ldrb.w	r3, [r0, #436]	; 0x1b4
   1575c:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
   15760:	4299      	cmp	r1, r3
   15762:	d11e      	bne.n	157a2 <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   15764:	f004 0407 	and.w	r4, r4, #7
   15768:	f8b0 21b6 	ldrh.w	r2, [r0, #438]	; 0x1b6
   1576c:	00a4      	lsls	r4, r4, #2
   1576e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   15772:	f007 0307 	and.w	r3, r7, #7
   15776:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   1577a:	f006 0601 	and.w	r6, r6, #1
   1577e:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   15782:	f022 0207 	bic.w	r2, r2, #7
   15786:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   1578a:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1578c:	f990 203d 	ldrsb.w	r2, [r0, #61]	; 0x3d
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   15790:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
	conn->llcp_phy.req++;
   15794:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15796:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   15798:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1579c:	db0a      	blt.n	157b4 <ll_phy_req_send+0x94>
}
   1579e:	4628      	mov	r0, r5
   157a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   157a2:	250c      	movs	r5, #12
}
   157a4:	4628      	mov	r0, r5
   157a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   157a8:	251a      	movs	r5, #26
}
   157aa:	4628      	mov	r0, r5
   157ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   157ae:	2502      	movs	r5, #2
}
   157b0:	4628      	mov	r0, r5
   157b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   157b4:	2100      	movs	r1, #0
   157b6:	f003 fba3 	bl	18f00 <ull_slave_latency_cancel>
}
   157ba:	4628      	mov	r0, r5
   157bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   157be:	bf00      	nop
   157c0:	2000e1d0 	.word	0x2000e1d0

000157c4 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   157c4:	b9d8      	cbnz	r0, 157fe <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   157c6:	4602      	mov	r2, r0
{
   157c8:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   157ca:	480e      	ldr	r0, [pc, #56]	; (15804 <ll_apto_get+0x40>)
   157cc:	460c      	mov	r4, r1
   157ce:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   157d2:	f7fa fb8b 	bl	feec <mem_get>
   157d6:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   157d8:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   157da:	b970      	cbnz	r0, 157fa <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   157dc:	f8b2 30d2 	ldrh.w	r3, [r2, #210]	; 0xd2
   157e0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
   157e2:	fb02 f303 	mul.w	r3, r2, r3
   157e6:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   157ea:	4a07      	ldr	r2, [pc, #28]	; (15808 <ll_apto_get+0x44>)
   157ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   157f0:	fba2 2303 	umull	r2, r3, r2, r3
   157f4:	099b      	lsrs	r3, r3, #6
   157f6:	8023      	strh	r3, [r4, #0]
}
   157f8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   157fa:	2002      	movs	r0, #2
}
   157fc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   157fe:	2002      	movs	r0, #2
}
   15800:	4770      	bx	lr
   15802:	bf00      	nop
   15804:	2000e1d0 	.word	0x2000e1d0
   15808:	10624dd3 	.word	0x10624dd3

0001580c <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1580c:	b9e0      	cbnz	r0, 15848 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1580e:	4602      	mov	r2, r0
{
   15810:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15812:	480e      	ldr	r0, [pc, #56]	; (1584c <ll_apto_set+0x40>)
   15814:	460c      	mov	r4, r1
   15816:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1581a:	f7fa fb67 	bl	feec <mem_get>
   1581e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   15820:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15822:	b978      	cbnz	r0, 15844 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   15824:	f8b2 c02e 	ldrh.w	ip, [r2, #46]	; 0x2e
   15828:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1582c:	fb03 fc0c 	mul.w	ip, r3, ip
   15830:	f242 7310 	movw	r3, #10000	; 0x2710
   15834:	fb03 c304 	mla	r3, r3, r4, ip
   15838:	3b01      	subs	r3, #1
   1583a:	fbb3 f3fc 	udiv	r3, r3, ip
   1583e:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
   15842:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15844:	2002      	movs	r0, #2
}
   15846:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15848:	2002      	movs	r0, #2
}
   1584a:	4770      	bx	lr
   1584c:	2000e1d0 	.word	0x2000e1d0

00015850 <ull_conn_init>:
	err = init_reset();
   15850:	f7ff b81c 	b.w	1488c <init_reset>

00015854 <ull_conn_reset>:
{
   15854:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15856:	2200      	movs	r2, #0
   15858:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1585c:	4813      	ldr	r0, [pc, #76]	; (158ac <ull_conn_reset+0x58>)
   1585e:	f7fa fb45 	bl	feec <mem_get>
   15862:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   15864:	f100 021c 	add.w	r2, r0, #28
   15868:	4601      	mov	r1, r0
   1586a:	2003      	movs	r0, #3
   1586c:	f7fe fa52 	bl	13d14 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   15870:	b108      	cbz	r0, 15876 <ull_conn_reset+0x22>
   15872:	3045      	adds	r0, #69	; 0x45
   15874:	d10b      	bne.n	1588e <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   15876:	480e      	ldr	r0, [pc, #56]	; (158b0 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   15878:	490e      	ldr	r1, [pc, #56]	; (158b4 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   1587a:	4a0f      	ldr	r2, [pc, #60]	; (158b8 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   1587c:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   1587e:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   15880:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   15882:	67a3      	str	r3, [r4, #120]	; 0x78
}
   15884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   15888:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1588a:	f7fe bfff 	b.w	1488c <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1588e:	4a0b      	ldr	r2, [pc, #44]	; (158bc <ull_conn_reset+0x68>)
   15890:	490b      	ldr	r1, [pc, #44]	; (158c0 <ull_conn_reset+0x6c>)
   15892:	480c      	ldr	r0, [pc, #48]	; (158c4 <ull_conn_reset+0x70>)
   15894:	f240 63f4 	movw	r3, #1780	; 0x6f4
   15898:	f00b fcfc 	bl	21294 <printk>
   1589c:	4040      	eors	r0, r0
   1589e:	f380 8811 	msr	BASEPRI, r0
   158a2:	f04f 0003 	mov.w	r0, #3
   158a6:	df02      	svc	2
   158a8:	e7e5      	b.n	15876 <ull_conn_reset+0x22>
   158aa:	bf00      	nop
   158ac:	2000e1d0 	.word	0x2000e1d0
   158b0:	200005b0 	.word	0x200005b0
   158b4:	2000056c 	.word	0x2000056c
   158b8:	2000e3a4 	.word	0x2000e3a4
   158bc:	00027f70 	.word	0x00027f70
   158c0:	00028080 	.word	0x00028080
   158c4:	00027ab4 	.word	0x00027ab4

000158c8 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   158c8:	4b01      	ldr	r3, [pc, #4]	; (158d0 <ull_conn_default_tx_octets_get+0x8>)
}
   158ca:	8818      	ldrh	r0, [r3, #0]
   158cc:	4770      	bx	lr
   158ce:	bf00      	nop
   158d0:	2000ed1a 	.word	0x2000ed1a

000158d4 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   158d4:	4b01      	ldr	r3, [pc, #4]	; (158dc <ull_conn_default_tx_time_get+0x8>)
}
   158d6:	8818      	ldrh	r0, [r3, #0]
   158d8:	4770      	bx	lr
   158da:	bf00      	nop
   158dc:	2000ed1c 	.word	0x2000ed1c

000158e0 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   158e0:	4b01      	ldr	r3, [pc, #4]	; (158e8 <ull_conn_default_phy_tx_get+0x8>)
}
   158e2:	7818      	ldrb	r0, [r3, #0]
   158e4:	4770      	bx	lr
   158e6:	bf00      	nop
   158e8:	2000f2b4 	.word	0x2000f2b4

000158ec <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   158ec:	4b01      	ldr	r3, [pc, #4]	; (158f4 <ull_conn_default_phy_rx_get+0x8>)
}
   158ee:	7818      	ldrb	r0, [r3, #0]
   158f0:	4770      	bx	lr
   158f2:	bf00      	nop
   158f4:	2000f2b3 	.word	0x2000f2b3

000158f8 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   158f8:	688b      	ldr	r3, [r1, #8]
   158fa:	689b      	ldr	r3, [r3, #8]
	switch (lll->role) {
   158fc:	f893 c021 	ldrb.w	ip, [r3, #33]	; 0x21
   15900:	ea5f 1cdc 	movs.w	ip, ip, lsr #7
   15904:	d10e      	bne.n	15924 <ull_conn_setup+0x2c>
{
   15906:	b510      	push	{r4, lr}
		LL_ASSERT(0);
   15908:	4a08      	ldr	r2, [pc, #32]	; (1592c <ull_conn_setup+0x34>)
   1590a:	4909      	ldr	r1, [pc, #36]	; (15930 <ull_conn_setup+0x38>)
   1590c:	4809      	ldr	r0, [pc, #36]	; (15934 <ull_conn_setup+0x3c>)
   1590e:	f240 331d 	movw	r3, #797	; 0x31d
   15912:	f00b fcbf 	bl	21294 <printk>
   15916:	4040      	eors	r0, r0
   15918:	f380 8811 	msr	BASEPRI, r0
   1591c:	f04f 0003 	mov.w	r0, #3
   15920:	df02      	svc	2
}
   15922:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   15924:	460a      	mov	r2, r1
   15926:	3208      	adds	r2, #8
   15928:	f7ec bcba 	b.w	22a0 <ull_slave_setup>
   1592c:	00027f70 	.word	0x00027f70
   15930:	00027b4c 	.word	0x00027b4c
   15934:	00027ab4 	.word	0x00027ab4

00015938 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   15938:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   1593a:	88da      	ldrh	r2, [r3, #6]
   1593c:	2a00      	cmp	r2, #0
   1593e:	f040 80c1 	bne.w	15ac4 <ull_conn_rx+0x18c>
{
   15942:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15946:	460d      	mov	r5, r1
   15948:	b083      	sub	sp, #12
   1594a:	4606      	mov	r6, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1594c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15950:	48a6      	ldr	r0, [pc, #664]	; (15bec <ull_conn_rx+0x2b4>)
   15952:	f7fa facb 	bl	feec <mem_get>
   15956:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   15958:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   1595a:	2800      	cmp	r0, #0
   1595c:	f040 80ab 	bne.w	15ab6 <ull_conn_rx+0x17e>
	pdu_rx = (void *)(*rx)->pdu;
   15960:	682f      	ldr	r7, [r5, #0]
	switch (pdu_rx->ll_id) {
   15962:	7f3a      	ldrb	r2, [r7, #28]
   15964:	f002 0203 	and.w	r2, r2, #3
   15968:	2a03      	cmp	r2, #3
   1596a:	d127      	bne.n	159bc <ull_conn_rx+0x84>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1596c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	opcode = pdu_rx->llctrl.opcode;
   15970:	f897 801f 	ldrb.w	r8, [r7, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   15974:	07d3      	lsls	r3, r2, #31
   15976:	d53b      	bpl.n	159f0 <ull_conn_rx+0xb8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   15978:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1597c:	2b00      	cmp	r3, #0
   1597e:	f2c0 80a5 	blt.w	15acc <ull_conn_rx+0x194>
	return (!conn->lll.role &&
   15982:	0750      	lsls	r0, r2, #29
   15984:	f100 80d1 	bmi.w	15b2a <ull_conn_rx+0x1f2>
		((!conn->llcp_enc.refresh &&
   15988:	f1b8 0f02 	cmp.w	r8, #2
   1598c:	f000 82f2 	beq.w	15f74 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15990:	f1b8 0f05 	cmp.w	r8, #5
   15994:	d04f      	beq.n	15a36 <ull_conn_rx+0xfe>
   15996:	f1b8 0f06 	cmp.w	r8, #6
   1599a:	f000 852b 	beq.w	163f4 <ull_conn_rx+0xabc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1599e:	f1b8 0f0d 	cmp.w	r8, #13
   159a2:	f000 83ca 	beq.w	1613a <ull_conn_rx+0x802>
   159a6:	f1b8 0f11 	cmp.w	r8, #17
   159aa:	f000 8288 	beq.w	15ebe <ull_conn_rx+0x586>
		conn->llcp_terminate.reason_peer =
   159ae:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   159b0:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_peer =
   159b2:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b

		return 0;
   159b6:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   159b8:	713b      	strb	r3, [r7, #4]
		return 0;
   159ba:	e00a      	b.n	159d2 <ull_conn_rx+0x9a>
	switch (pdu_rx->ll_id) {
   159bc:	b962      	cbnz	r2, 159d8 <ull_conn_rx+0xa0>
		if (conn->llcp_enc.pause_rx) {
   159be:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   159c2:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_peer =
   159c4:	bf44      	itt	mi
   159c6:	233d      	movmi	r3, #61	; 0x3d
   159c8:	f884 313b 	strbmi.w	r3, [r4, #315]	; 0x13b
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   159cc:	2301      	movs	r3, #1
   159ce:	713b      	strb	r3, [r7, #4]
	return 0;
   159d0:	2000      	movs	r0, #0
}
   159d2:	b003      	add	sp, #12
   159d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   159d8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   159dc:	07d2      	lsls	r2, r2, #31
   159de:	d5f7      	bpl.n	159d0 <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_peer =
   159e0:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   159e2:	2201      	movs	r2, #1
			conn->llcp_terminate.reason_peer =
   159e4:	f884 113b 	strb.w	r1, [r4, #315]	; 0x13b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   159e8:	713a      	strb	r2, [r7, #4]
}
   159ea:	b003      	add	sp, #12
   159ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   159f0:	f1b8 0f18 	cmp.w	r8, #24
   159f4:	d81f      	bhi.n	15a36 <ull_conn_rx+0xfe>
   159f6:	e8df f018 	tbh	[pc, r8, lsl #1]
   159fa:	01f5      	.short	0x01f5
   159fc:	02bd01c0 	.word	0x02bd01c0
   15a00:	001e0019 	.word	0x001e0019
   15a04:	0441001e 	.word	0x0441001e
   15a08:	034d0297 	.word	0x034d0297
   15a0c:	02cd0318 	.word	0x02cd0318
   15a10:	03e30422 	.word	0x03e30422
   15a14:	001e03a0 	.word	0x001e03a0
   15a18:	001e0413 	.word	0x001e0413
   15a1c:	016b0262 	.word	0x016b0262
   15a20:	00fd0161 	.word	0x00fd0161
   15a24:	013000fd 	.word	0x013000fd
   15a28:	0183001e 	.word	0x0183001e
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   15a2c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15a30:	2b00      	cmp	r3, #0
   15a32:	f2c0 8092 	blt.w	15b5a <ull_conn_rx+0x222>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15a36:	486e      	ldr	r0, [pc, #440]	; (15bf0 <ull_conn_rx+0x2b8>)
   15a38:	f7fa fa26 	bl	fe88 <mem_acquire>
	if (!tx) {
   15a3c:	2800      	cmp	r0, #0
   15a3e:	f000 85ab 	beq.w	16598 <ull_conn_rx+0xc60>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15a42:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   15a44:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15a48:	f043 0303 	orr.w	r3, r3, #3
   15a4c:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   15a4e:	2302      	movs	r3, #2
   15a50:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   15a52:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   15a56:	2207      	movs	r2, #7
   15a58:	71c2      	strb	r2, [r0, #7]
	if (
   15a5a:	b1e3      	cbz	r3, 15a96 <ull_conn_rx+0x15e>
	    !conn->llcp_enc.pause_tx &&
   15a5c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   15a60:	0795      	lsls	r5, r2, #30
   15a62:	d418      	bmi.n	15a96 <ull_conn_rx+0x15e>
	    !conn->llcp_phy.pause_tx &&
   15a64:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   15a68:	07d1      	lsls	r1, r2, #31
   15a6a:	d414      	bmi.n	15a96 <ull_conn_rx+0x15e>
		if (conn->tx_head == conn->tx_data) {
   15a6c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   15a70:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15a72:	bf04      	itt	eq
   15a74:	681a      	ldreq	r2, [r3, #0]
   15a76:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   15a7a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   15a7e:	b97a      	cbnz	r2, 15aa0 <ull_conn_rx+0x168>
			tx->next = conn->tx_head->next;
   15a80:	681a      	ldr	r2, [r3, #0]
   15a82:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15a84:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15a86:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15a88:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
	if (!tx->next) {
   15a8c:	2b00      	cmp	r3, #0
   15a8e:	d19d      	bne.n	159cc <ull_conn_rx+0x94>
		conn->tx_data_last = tx;
   15a90:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15a94:	e79a      	b.n	159cc <ull_conn_rx+0x94>
		if (!conn->tx_ctrl) {
   15a96:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   15a9a:	2a00      	cmp	r2, #0
   15a9c:	f000 84a0 	beq.w	163e0 <ull_conn_rx+0xaa8>
	tx->next = conn->tx_ctrl_last->next;
   15aa0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   15aa4:	681a      	ldr	r2, [r3, #0]
   15aa6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15aa8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15aaa:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   15aac:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   15ab0:	2b00      	cmp	r3, #0
   15ab2:	d18b      	bne.n	159cc <ull_conn_rx+0x94>
   15ab4:	e7ec      	b.n	15a90 <ull_conn_rx+0x158>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15ab6:	682b      	ldr	r3, [r5, #0]
   15ab8:	2201      	movs	r2, #1
		return 0;
   15aba:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15abc:	711a      	strb	r2, [r3, #4]
}
   15abe:	b003      	add	sp, #12
   15ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15ac4:	2201      	movs	r2, #1
   15ac6:	711a      	strb	r2, [r3, #4]
		return 0;
   15ac8:	2000      	movs	r0, #0
}
   15aca:	4770      	bx	lr
	       (conn->lll.role &&
   15acc:	0751      	lsls	r1, r2, #29
   15ace:	d439      	bmi.n	15b44 <ull_conn_rx+0x20c>
		((!conn->llcp_enc.refresh &&
   15ad0:	f1b8 0f07 	cmp.w	r8, #7
   15ad4:	f000 8228 	beq.w	15f28 <ull_conn_rx+0x5f0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   15ad8:	f1b8 0f02 	cmp.w	r8, #2
   15adc:	f000 824a 	beq.w	15f74 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15ae0:	f1b8 0f06 	cmp.w	r8, #6
   15ae4:	f47f af5b 	bne.w	1599e <ull_conn_rx+0x66>

		break;
#endif /* CONFIG_BT_CENTRAL */

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   15ae8:	7f7b      	ldrb	r3, [r7, #29]
   15aea:	2b01      	cmp	r3, #1
   15aec:	d1a3      	bne.n	15a36 <ull_conn_rx+0xfe>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (conn->lll.role) {
#if !defined(CONFIG_BT_CTLR_FAST_ENC)
			if ((conn->llcp_req != conn->llcp_ack) &&
   15aee:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   15af2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15af6:	428b      	cmp	r3, r1
   15af8:	f001 8061 	beq.w	16bbe <ull_conn_rx+0x1286>
   15afc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15b00:	2b03      	cmp	r3, #3
   15b02:	d198      	bne.n	15a36 <ull_conn_rx+0xfe>
			    (conn->llcp_type != LLCP_ENCRYPTION)) {
				goto ull_conn_rx_unknown_rsp_send;
			}

			/* start enc rsp to be scheduled in slave  prepare */
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15b04:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15b08:	f36f 0301 	bfc	r3, #0, #2
   15b0c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_enc.pause_rx = 0U;
			conn->llcp_enc.pause_tx = 0U;
		}

		/* enqueue the start enc resp (encryption change/refresh) */
		if (conn->llcp_enc.refresh) {
   15b10:	0750      	lsls	r0, r2, #29
   15b12:	d505      	bpl.n	15b20 <ull_conn_rx+0x1e8>
			conn->llcp_enc.refresh = 0U;
   15b14:	f36f 0282 	bfc	r2, #2, #1

			/* key refresh event */
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15b18:	2316      	movs	r3, #22
			conn->llcp_enc.refresh = 0U;
   15b1a:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   15b1e:	713b      	strb	r3, [r7, #4]
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   15b20:	2300      	movs	r3, #0
   15b22:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   15b26:	4618      	mov	r0, r3
		break;
   15b28:	e753      	b.n	159d2 <ull_conn_rx+0x9a>
		 (conn->llcp_enc.refresh &&
   15b2a:	f1b8 0f02 	cmp.w	r8, #2
   15b2e:	f000 8221 	beq.w	15f74 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15b32:	f1b8 0f0b 	cmp.w	r8, #11
   15b36:	f000 8462 	beq.w	163fe <ull_conn_rx+0xac6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15b3a:	f1b8 0f04 	cmp.w	r8, #4
   15b3e:	f47f af27 	bne.w	15990 <ull_conn_rx+0x58>
   15b42:	e778      	b.n	15a36 <ull_conn_rx+0xfe>
		 (conn->llcp_enc.refresh &&
   15b44:	f1b8 0f02 	cmp.w	r8, #2
   15b48:	f000 8214 	beq.w	15f74 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15b4c:	f1b8 0f0b 	cmp.w	r8, #11
   15b50:	f000 845a 	beq.w	16408 <ull_conn_rx+0xad0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   15b54:	f1b8 0f03 	cmp.w	r8, #3
   15b58:	d1c2      	bne.n	15ae0 <ull_conn_rx+0x1a8>
		if (!conn->lll.role ||
   15b5a:	7f7b      	ldrb	r3, [r7, #29]
   15b5c:	2b17      	cmp	r3, #23
   15b5e:	f47f af6a 	bne.w	15a36 <ull_conn_rx+0xfe>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   15b62:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15b66:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15b6a:	1a9b      	subs	r3, r3, r2
   15b6c:	f003 0303 	and.w	r3, r3, #3
   15b70:	2b02      	cmp	r3, #2
   15b72:	f001 8104 	beq.w	16d7e <ull_conn_rx+0x1446>
		memcpy(&conn->llcp_enc.rand[0],
   15b76:	2208      	movs	r2, #8
   15b78:	f107 0120 	add.w	r1, r7, #32
   15b7c:	f204 1061 	addw	r0, r4, #353	; 0x161
   15b80:	f00d fffb 	bl	23b7a <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   15b84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   15b88:	f884 315f 	strb.w	r3, [r4, #351]	; 0x15f
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   15b8c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15b90:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   15b94:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15b98:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   15b9a:	2301      	movs	r3, #1
   15b9c:	f363 0201 	bfi	r2, r3, #0, #2
   15ba0:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15ba4:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   15ba6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   15baa:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   15bac:	3b02      	subs	r3, #2
   15bae:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   15bb2:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   15bb4:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		memcpy(&conn->llcp.encryption.skd[0],
   15bb8:	f104 00fa 	add.w	r0, r4, #250	; 0xfa
   15bbc:	f107 012a 	add.w	r1, r7, #42	; 0x2a
   15bc0:	f00d ffdb 	bl	23b7a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   15bc4:	2204      	movs	r2, #4
   15bc6:	f107 0132 	add.w	r1, r7, #50	; 0x32
   15bca:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15bce:	f00d ffd4 	bl	23b7a <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   15bd2:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->procedure_expire = conn->procedure_reload;
   15bd6:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
   15bda:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
   15bde:	f043 0301 	orr.w	r3, r3, #1
   15be2:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	int nack = 0;
   15be6:	2000      	movs	r0, #0
		break;
   15be8:	e6f3      	b.n	159d2 <ull_conn_rx+0x9a>
   15bea:	bf00      	nop
   15bec:	2000e1d0 	.word	0x2000e1d0
   15bf0:	2000e428 	.word	0x2000e428

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   15bf4:	7f7b      	ldrb	r3, [r7, #29]
   15bf6:	2b09      	cmp	r3, #9
   15bf8:	f47f af1d 	bne.w	15a36 <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   15bfc:	f1b8 0f14 	cmp.w	r8, #20
   15c00:	f000 8442 	beq.w	16488 <ull_conn_rx+0xb50>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   15c04:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
	if (/* Local idle, and Peer request then complete the Peer procedure
   15c08:	f894 31a5 	ldrb.w	r3, [r4, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   15c0c:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   15c10:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   15c14:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   15c18:	f8b4 a060 	ldrh.w	sl, [r4, #96]	; 0x60
	if (/* Local idle, and Peer request then complete the Peer procedure
   15c1c:	4293      	cmp	r3, r2
   15c1e:	f000 87df 	beq.w	16be0 <ull_conn_rx+0x12a8>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   15c22:	f894 11a6 	ldrb.w	r1, [r4, #422]	; 0x1a6
	struct node_tx *tx = NULL;
   15c26:	2300      	movs	r3, #0
	       tx) ||
   15c28:	f001 0107 	and.w	r1, r1, #7
   15c2c:	2902      	cmp	r1, #2
   15c2e:	f000 8441 	beq.w	164b4 <ull_conn_rx+0xb7c>
   15c32:	f897 801f 	ldrb.w	r8, [r7, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   15c36:	f1b8 0f15 	cmp.w	r8, #21
   15c3a:	f43f aec9 	beq.w	159d0 <ull_conn_rx+0x98>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   15c3e:	4618      	mov	r0, r3
   15c40:	49d2      	ldr	r1, [pc, #840]	; (15f8c <ull_conn_rx+0x654>)
   15c42:	f7fa f93b 	bl	febc <mem_release>
			if (conn->llcp_length.state ==
   15c46:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
   15c4a:	f003 0307 	and.w	r3, r3, #7
   15c4e:	2b04      	cmp	r3, #4
   15c50:	f47f aebe 	bne.w	159d0 <ull_conn_rx+0x98>
				return -EBUSY;
   15c54:	f06f 000f 	mvn.w	r0, #15
   15c58:	e6bb      	b.n	159d2 <ull_conn_rx+0x9a>
		break;
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

#if defined(CONFIG_BT_CTLR_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   15c5a:	7f7b      	ldrb	r3, [r7, #29]
   15c5c:	2b03      	cmp	r3, #3
   15c5e:	f47f aeea 	bne.w	15a36 <ull_conn_rx+0xfe>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (!conn->lll.role) {
   15c62:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15c66:	2b00      	cmp	r3, #0
   15c68:	f2c0 84d0 	blt.w	1660c <ull_conn_rx+0xcd4>
			if ((conn->llcp_phy.ack !=
   15c6c:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
			     conn->llcp_phy.req) &&
   15c70:	f894 01b4 	ldrb.w	r0, [r4, #436]	; 0x1b4
			if ((conn->llcp_phy.ack !=
   15c74:	4281      	cmp	r1, r0
   15c76:	d007      	beq.n	15c88 <ull_conn_rx+0x350>
			    ((conn->llcp_phy.state ==
			      LLCP_PHY_STATE_ACK_WAIT) ||
			     (conn->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
   15c78:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
   15c7c:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   15c80:	3a01      	subs	r2, #1
   15c82:	2a02      	cmp	r2, #2
   15c84:	f240 8711 	bls.w	16aaa <ull_conn_rx+0x1172>
				nack = reject_ext_ind_send(conn, *rx,
					PDU_DATA_LLCTRL_TYPE_PHY_REQ,
					BT_HCI_ERR_LL_PROC_COLLISION);
#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
#if defined(CONFIG_BT_CTLR_LE_ENC)
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   15c88:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15c8c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15c90:	1a9b      	subs	r3, r3, r2
   15c92:	f003 0303 	and.w	r3, r3, #3
   15c96:	2b02      	cmp	r3, #2
   15c98:	f000 8640 	beq.w	1691c <ull_conn_rx+0xfe4>
				      0x03) == 0x02) &&
				    (conn->llcp_type !=
				     LLCP_ENCRYPTION)) ||
   15c9c:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
   15ca0:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
   15ca4:	429a      	cmp	r2, r3
   15ca6:	f000 86bd 	beq.w	16a24 <ull_conn_rx+0x10ec>
			} else if (((conn->llcp_req - conn->llcp_ack) &
				    0x03) == 0x02) {
#endif /* !CONFIG_BT_CTLR_LE_ENC */
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */
				/* Different procedure collision */
				nack = reject_ext_ind_send(conn, *rx,
   15caa:	232a      	movs	r3, #42	; 0x2a
   15cac:	2216      	movs	r2, #22
   15cae:	4639      	mov	r1, r7
   15cb0:	4620      	mov	r0, r4
}
   15cb2:	b003      	add	sp, #12
   15cb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   15cb8:	f7fe bf4a 	b.w	14b50 <reject_ext_ind_send>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   15cbc:	7f7a      	ldrb	r2, [r7, #29]
   15cbe:	2a01      	cmp	r2, #1
   15cc0:	f47f aeb9 	bne.w	15a36 <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
   15cc4:	2300      	movs	r3, #0
   15cc6:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   15cca:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15ccc:	713a      	strb	r2, [r7, #4]
		break;
   15cce:	e680      	b.n	159d2 <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   15cd0:	7f7d      	ldrb	r5, [r7, #29]
   15cd2:	2d01      	cmp	r5, #1
   15cd4:	f47f aeaf 	bne.w	15a36 <ull_conn_rx+0xfe>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15cd8:	48ac      	ldr	r0, [pc, #688]	; (15f8c <ull_conn_rx+0x654>)
   15cda:	f7fa f8d5 	bl	fe88 <mem_acquire>
	if (!tx) {
   15cde:	4601      	mov	r1, r0
   15ce0:	2800      	cmp	r0, #0
   15ce2:	f000 8459 	beq.w	16598 <ull_conn_rx+0xc60>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15ce6:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   15ce8:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15cea:	f043 0303 	orr.w	r3, r3, #3
   15cee:	7103      	strb	r3, [r0, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   15cf0:	2313      	movs	r3, #19
   15cf2:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   15cf4:	4620      	mov	r0, r4
   15cf6:	f7fe ff7b 	bl	14bf0 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15cfa:	713d      	strb	r5, [r7, #4]
	return 0;
   15cfc:	2000      	movs	r0, #0
   15cfe:	e668      	b.n	159d2 <ull_conn_rx+0x9a>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   15d00:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15d04:	2b00      	cmp	r3, #0
   15d06:	f6bf ae96 	bge.w	15a36 <ull_conn_rx+0xfe>
   15d0a:	7f7b      	ldrb	r3, [r7, #29]
   15d0c:	2b05      	cmp	r3, #5
   15d0e:	f47f ae92 	bne.w	15a36 <ull_conn_rx+0xfe>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   15d12:	f897 1020 	ldrb.w	r1, [r7, #32]
   15d16:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   15d1a:	ea41 0203 	orr.w	r2, r1, r3
   15d1e:	f012 0007 	ands.w	r0, r2, #7
   15d22:	f040 8602 	bne.w	1692a <ull_conn_rx+0xff2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   15d26:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
   15d2a:	f894 21b5 	ldrb.w	r2, [r4, #437]	; 0x1b5
   15d2e:	429a      	cmp	r2, r3
   15d30:	f43f ae4c 	beq.w	159cc <ull_conn_rx+0x94>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   15d34:	f894 11b6 	ldrb.w	r1, [r4, #438]	; 0x1b6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   15d38:	f001 0103 	and.w	r1, r1, #3
   15d3c:	2902      	cmp	r1, #2
   15d3e:	f47f ae45 	bne.w	159cc <ull_conn_rx+0x94>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15d42:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   15d46:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   15d4a:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15d4e:	460b      	mov	r3, r1
   15d50:	f361 1306 	bfi	r3, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   15d54:	f360 0200 	bfi	r2, r0, #0, #1
   15d58:	f884 21b7 	strb.w	r2, [r4, #439]	; 0x1b7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15d5c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		if (!conn->llcp_phy.cmd) {
   15d60:	f012 0204 	ands.w	r2, r2, #4
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15d64:	682b      	ldr	r3, [r5, #0]
		conn->procedure_expire = 0U;
   15d66:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   15d6a:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   15d6e:	f041 8013 	bne.w	16d98 <ull_conn_rx+0x1460>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15d72:	2101      	movs	r1, #1
   15d74:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   15d76:	4610      	mov	r0, r2
   15d78:	e62b      	b.n	159d2 <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   15d7a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15d7e:	2b00      	cmp	r3, #0
   15d80:	f6bf ae59 	bge.w	15a36 <ull_conn_rx+0xfe>
   15d84:	7f7b      	ldrb	r3, [r7, #29]
   15d86:	2b08      	cmp	r3, #8
   15d88:	f47f ae55 	bne.w	15a36 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   15d8c:	f8b7 5025 	ldrh.w	r5, [r7, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   15d90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   15d92:	1aeb      	subs	r3, r5, r3
   15d94:	041e      	lsls	r6, r3, #16
   15d96:	f100 868b 	bmi.w	16ab0 <ull_conn_rx+0x1178>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   15d9a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15d9e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15da2:	1a9b      	subs	r3, r3, r2
   15da4:	f003 0303 	and.w	r3, r3, #3
   15da8:	2b02      	cmp	r3, #2
   15daa:	f000 86bb 	beq.w	16b24 <ull_conn_rx+0x11ec>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   15dae:	2205      	movs	r2, #5
   15db0:	f107 0120 	add.w	r1, r7, #32
   15db4:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   15db8:	f00d fedf 	bl	23b7a <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   15dbc:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   15dc0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   15dc4:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
	conn->llcp.chan_map.initiate = 0U;
   15dc8:	f36f 0200 	bfc	r2, #0, #1
   15dcc:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	conn->llcp_type = LLCP_CHAN_MAP;
   15dd0:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   15dd2:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15dd4:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   15dd6:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
   15dda:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	int nack = 0;
   15dde:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15de0:	713a      	strb	r2, [r7, #4]
		if (err) {
   15de2:	e5f6      	b.n	159d2 <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   15de4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15de8:	2b00      	cmp	r3, #0
   15dea:	f6bf ae24 	bge.w	15a36 <ull_conn_rx+0xfe>
   15dee:	7f7b      	ldrb	r3, [r7, #29]
   15df0:	2b0c      	cmp	r3, #12
   15df2:	f47f ae20 	bne.w	15a36 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   15df6:	f8b7 2029 	ldrh.w	r2, [r7, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   15dfa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   15dfc:	1ad3      	subs	r3, r2, r3
   15dfe:	041b      	lsls	r3, r3, #16
   15e00:	f100 8656 	bmi.w	16ab0 <ull_conn_rx+0x1178>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   15e04:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15e08:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   15e0c:	1a5b      	subs	r3, r3, r1
   15e0e:	f003 0303 	and.w	r3, r3, #3
   15e12:	2b02      	cmp	r3, #2
   15e14:	f000 8686 	beq.w	16b24 <ull_conn_rx+0x11ec>
	if (!conn_upd_curr) {
   15e18:	4b5d      	ldr	r3, [pc, #372]	; (15f90 <ull_conn_rx+0x658>)
   15e1a:	6819      	ldr	r1, [r3, #0]
   15e1c:	2900      	cmp	r1, #0
   15e1e:	f000 86dc 	beq.w	16bda <ull_conn_rx+0x12a2>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   15e22:	f897 3020 	ldrb.w	r3, [r7, #32]
   15e26:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   15e2a:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
   15e2e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15e32:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   15e36:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   15e3a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
   15e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   15e42:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   15e46:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   15e4a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
   15e4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   15e52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   15e56:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15e5a:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15e5e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
   15e62:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   15e66:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   15e6a:	f023 030f 	bic.w	r3, r3, #15
   15e6e:	f043 0308 	orr.w	r3, r3, #8
   15e72:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.ack--;
   15e76:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   15e7a:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
   15e7e:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
	conn->llcp_cu.ack--;
   15e82:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   15e84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
	conn->llcp_cu.ack--;
   15e88:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	link->mem = conn->llcp_rx;
   15e8c:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   15e8e:	682a      	ldr	r2, [r5, #0]
   15e90:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   15e92:	682a      	ldr	r2, [r5, #0]
   15e94:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
	*rx = NULL;
   15e98:	2300      	movs	r3, #0
   15e9a:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15e9c:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
   15ea0:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
   15ea4:	4293      	cmp	r3, r2
   15ea6:	f43f ae3b 	beq.w	15b20 <ull_conn_rx+0x1e8>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   15eaa:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15eae:	f003 0307 	and.w	r3, r3, #7
   15eb2:	2b04      	cmp	r3, #4
   15eb4:	f47f ae34 	bne.w	15b20 <ull_conn_rx+0x1e8>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15eb8:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
		if (err) {
   15ebc:	e630      	b.n	15b20 <ull_conn_rx+0x1e8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   15ebe:	7f7b      	ldrb	r3, [r7, #29]
   15ec0:	2b03      	cmp	r3, #3
   15ec2:	f47f adb8 	bne.w	15a36 <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
   15ec6:	f897 3020 	ldrb.w	r3, [r7, #32]
   15eca:	3b03      	subs	r3, #3
   15ecc:	2b13      	cmp	r3, #19
   15ece:	f63f ad7d 	bhi.w	159cc <ull_conn_rx+0x94>
   15ed2:	a201      	add	r2, pc, #4	; (adr r2, 15ed8 <ull_conn_rx+0x5a0>)
   15ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15ed8:	000163a1 	.word	0x000163a1
   15edc:	000159cd 	.word	0x000159cd
   15ee0:	000159cd 	.word	0x000159cd
   15ee4:	000159cd 	.word	0x000159cd
   15ee8:	000159cd 	.word	0x000159cd
   15eec:	000159cd 	.word	0x000159cd
   15ef0:	000159cd 	.word	0x000159cd
   15ef4:	000159cd 	.word	0x000159cd
   15ef8:	000159cd 	.word	0x000159cd
   15efc:	000159cd 	.word	0x000159cd
   15f00:	000159cd 	.word	0x000159cd
   15f04:	000159cd 	.word	0x000159cd
   15f08:	0001633b 	.word	0x0001633b
   15f0c:	000159cd 	.word	0x000159cd
   15f10:	000159cd 	.word	0x000159cd
   15f14:	000159cd 	.word	0x000159cd
   15f18:	000159cd 	.word	0x000159cd
   15f1c:	0001629d 	.word	0x0001629d
   15f20:	000159cd 	.word	0x000159cd
   15f24:	000162ed 	.word	0x000162ed
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   15f28:	7f7b      	ldrb	r3, [r7, #29]
   15f2a:	2b02      	cmp	r3, #2
   15f2c:	f47f ad83 	bne.w	15a36 <ull_conn_rx+0xfe>
		} else if ((conn->llcp_conn_param.ack !=
   15f30:	f894 217d 	ldrb.w	r2, [r4, #381]	; 0x17d
   15f34:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   15f38:	429a      	cmp	r2, r3
			   (llctrl->unknown_rsp.type ==
   15f3a:	f897 2020 	ldrb.w	r2, [r7, #32]
		} else if ((conn->llcp_conn_param.ack !=
   15f3e:	d002      	beq.n	15f46 <ull_conn_rx+0x60e>
			    conn->llcp_conn_param.req) &&
   15f40:	2a0f      	cmp	r2, #15
   15f42:	f000 83da 	beq.w	166fa <ull_conn_rx+0xdc2>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   15f46:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   15f4a:	f894 11a5 	ldrb.w	r1, [r4, #421]	; 0x1a5
   15f4e:	4299      	cmp	r1, r3
   15f50:	d002      	beq.n	15f58 <ull_conn_rx+0x620>
   15f52:	2a14      	cmp	r2, #20
   15f54:	f000 855c 	beq.w	16a10 <ull_conn_rx+0x10d8>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   15f58:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   15f5c:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   15f60:	428b      	cmp	r3, r1
   15f62:	d002      	beq.n	15f6a <ull_conn_rx+0x632>
   15f64:	2a16      	cmp	r2, #22
   15f66:	f000 85ab 	beq.w	16ac0 <ull_conn_rx+0x1188>
			switch (llctrl->unknown_rsp.type) {
   15f6a:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   15f6c:	bf04      	itt	eq
   15f6e:	2301      	moveq	r3, #1
   15f70:	713b      	strbeq	r3, [r7, #4]
				break;
   15f72:	e5d5      	b.n	15b20 <ull_conn_rx+0x1e8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   15f74:	7f7b      	ldrb	r3, [r7, #29]
   15f76:	2b02      	cmp	r3, #2
   15f78:	f47f ad5d 	bne.w	15a36 <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   15f7c:	f897 2020 	ldrb.w	r2, [r7, #32]
   15f80:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15f84:	2301      	movs	r3, #1
	int nack = 0;
   15f86:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15f88:	713b      	strb	r3, [r7, #4]
}
   15f8a:	e522      	b.n	159d2 <ull_conn_rx+0x9a>
   15f8c:	2000e428 	.word	0x2000e428
   15f90:	2000e3a4 	.word	0x2000e3a4
		if (!conn->lll.role ||
   15f94:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15f98:	2b00      	cmp	r3, #0
   15f9a:	f6bf ad4c 	bge.w	15a36 <ull_conn_rx+0xfe>
   15f9e:	7f7d      	ldrb	r5, [r7, #29]
   15fa0:	2d01      	cmp	r5, #1
   15fa2:	f47f ad48 	bne.w	15a36 <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15fa6:	48cd      	ldr	r0, [pc, #820]	; (162dc <ull_conn_rx+0x9a4>)
   15fa8:	f7f9 ff6e 	bl	fe88 <mem_acquire>
		if (!tx) {
   15fac:	2800      	cmp	r0, #0
   15fae:	f000 82f3 	beq.w	16598 <ull_conn_rx+0xc60>
	conn->llcp_enc.pause_rx = 1U;
   15fb2:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   15fb6:	f023 0305 	bic.w	r3, r3, #5
   15fba:	f043 0305 	orr.w	r3, r3, #5
   15fbe:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   15fc2:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   15fc6:	f36f 03c3 	bfc	r3, #3, #1
   15fca:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15fce:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   15fd0:	7145      	strb	r5, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15fd2:	f043 0303 	orr.w	r3, r3, #3
   15fd6:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   15fd8:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   15fdc:	220b      	movs	r2, #11
   15fde:	71c2      	strb	r2, [r0, #7]
	if (
   15fe0:	2b00      	cmp	r3, #0
   15fe2:	f000 8246 	beq.w	16472 <ull_conn_rx+0xb3a>
	    !conn->llcp_enc.pause_tx &&
   15fe6:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   15fea:	0791      	lsls	r1, r2, #30
   15fec:	f100 8241 	bmi.w	16472 <ull_conn_rx+0xb3a>
	    !conn->llcp_phy.pause_tx &&
   15ff0:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   15ff4:	07d2      	lsls	r2, r2, #31
   15ff6:	f100 823c 	bmi.w	16472 <ull_conn_rx+0xb3a>
		if (conn->tx_head == conn->tx_data) {
   15ffa:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   15ffe:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   16000:	bf04      	itt	eq
   16002:	681a      	ldreq	r2, [r3, #0]
   16004:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   16008:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1600c:	2a00      	cmp	r2, #0
   1600e:	f000 86de 	beq.w	16dce <ull_conn_rx+0x1496>
	tx->next = conn->tx_ctrl_last->next;
   16012:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   16016:	681a      	ldr	r2, [r3, #0]
   16018:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1601a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1601c:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   16020:	6803      	ldr	r3, [r0, #0]
   16022:	2b00      	cmp	r3, #0
   16024:	f47f acd2 	bne.w	159cc <ull_conn_rx+0x94>
   16028:	e532      	b.n	15a90 <ull_conn_rx+0x158>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   1602a:	7f7b      	ldrb	r3, [r7, #29]
   1602c:	2b09      	cmp	r3, #9
   1602e:	f47f ad02 	bne.w	15a36 <ull_conn_rx+0xfe>
	       (features[1] << 8) | (features[2] << 16);
   16032:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   16036:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1603a:	f897 2020 	ldrb.w	r2, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   1603e:	48a8      	ldr	r0, [pc, #672]	; (162e0 <ull_conn_rx+0x9a8>)
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16040:	4da8      	ldr	r5, [pc, #672]	; (162e4 <ull_conn_rx+0x9ac>)
	       (features[1] << 8) | (features[2] << 16);
   16042:	041b      	lsls	r3, r3, #16
   16044:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   16048:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1604a:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   1604e:	4303      	orrs	r3, r0
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   16050:	4013      	ands	r3, r2
   16052:	f3c3 0310 	ubfx	r3, r3, #0, #17
   16056:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   1605a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
   1605e:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   16062:	f897 3020 	ldrb.w	r3, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   16066:	0412      	lsls	r2, r2, #16
   16068:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1606c:	431a      	orrs	r2, r3
	conn->common.fex_valid = 1U;
   1606e:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   16072:	4302      	orrs	r2, r0
	conn->procedure_expire = 0U;
   16074:	2300      	movs	r3, #0
	conn->llcp_feature.ack = conn->llcp_feature.req;
   16076:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
   1607a:	f884 0125 	strb.w	r0, [r4, #293]	; 0x125
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1607e:	4015      	ands	r5, r2
	conn->common.fex_valid = 1U;
   16080:	f041 0201 	orr.w	r2, r1, #1
	conn->llcp_feature.features_peer =
   16084:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
	conn->common.fex_valid = 1U;
   16088:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
	conn->procedure_expire = 0U;
   1608c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   16090:	4618      	mov	r0, r3
}
   16092:	e49e      	b.n	159d2 <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   16094:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16098:	2b00      	cmp	r3, #0
   1609a:	f6bf accc 	bge.w	15a36 <ull_conn_rx+0xfe>
   1609e:	7f7e      	ldrb	r6, [r7, #29]
   160a0:	2e09      	cmp	r6, #9
   160a2:	f47f acc8 	bne.w	15a36 <ull_conn_rx+0xfe>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   160a6:	488d      	ldr	r0, [pc, #564]	; (162dc <ull_conn_rx+0x9a4>)
   160a8:	f7f9 feee 	bl	fe88 <mem_acquire>
	if (!tx) {
   160ac:	4605      	mov	r5, r0
   160ae:	2800      	cmp	r0, #0
   160b0:	f000 8272 	beq.w	16598 <ull_conn_rx+0xc60>
	       (features[1] << 8) | (features[2] << 16);
   160b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   160b8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   160bc:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   160c0:	041b      	lsls	r3, r3, #16
   160c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   160c6:	f897 2020 	ldrb.w	r2, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   160ca:	4313      	orrs	r3, r2
   160cc:	4a84      	ldr	r2, [pc, #528]	; (162e0 <ull_conn_rx+0x9a8>)
   160ce:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   160d0:	400b      	ands	r3, r1
   160d2:	f3c3 0310 	ubfx	r3, r3, #0, #17
   160d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   160da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   160de:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
   160e2:	041b      	lsls	r3, r3, #16
   160e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   160e8:	f897 1020 	ldrb.w	r1, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   160ec:	430b      	orrs	r3, r1
   160ee:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   160f0:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   160f4:	497b      	ldr	r1, [pc, #492]	; (162e4 <ull_conn_rx+0x9ac>)
	conn->common.fex_valid = 1U;
   160f6:	f042 0201 	orr.w	r2, r2, #1
   160fa:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   160fe:	7902      	ldrb	r2, [r0, #4]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16100:	4019      	ands	r1, r3
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16102:	f042 0203 	orr.w	r2, r2, #3
	conn->llcp_feature.features_peer =
   16106:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1610a:	7102      	strb	r2, [r0, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1610c:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1610e:	7146      	strb	r6, [r0, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   16110:	71c6      	strb	r6, [r0, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   16112:	2100      	movs	r1, #0
   16114:	4410      	add	r0, r2
   16116:	f00d fd5b 	bl	23bd0 <memset>
	feat_result &= 0xFF;
   1611a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[2] = val >> 16;
   1611e:	2601      	movs	r6, #1
   16120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	dst[1] = val >> 8;
   16124:	2241      	movs	r2, #65	; 0x41
	ctrl_tx_sec_enqueue(conn, tx);
   16126:	4620      	mov	r0, r4
   16128:	726a      	strb	r2, [r5, #9]
	dst[0] = val;
   1612a:	722b      	strb	r3, [r5, #8]
	dst[2] = val >> 16;
   1612c:	72ae      	strb	r6, [r5, #10]
   1612e:	4629      	mov	r1, r5
   16130:	f7fe fd5e 	bl	14bf0 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16134:	713e      	strb	r6, [r7, #4]
	return 0;
   16136:	2000      	movs	r0, #0
   16138:	e44b      	b.n	159d2 <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   1613a:	7f7b      	ldrb	r3, [r7, #29]
   1613c:	2b02      	cmp	r3, #2
   1613e:	f47f ac7a 	bne.w	15a36 <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   16142:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   16146:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1614a:	4293      	cmp	r3, r2
   1614c:	d004      	beq.n	16158 <ull_conn_rx+0x820>
   1614e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   16152:	2b03      	cmp	r3, #3
   16154:	f000 84d8 	beq.w	16b08 <ull_conn_rx+0x11d0>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   16158:	f894 21b4 	ldrb.w	r2, [r4, #436]	; 0x1b4
   1615c:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   16160:	4293      	cmp	r3, r2
   16162:	f000 821d 	beq.w	165a0 <ull_conn_rx+0xc68>
		rej_ext_ind->error_code = rej_ind->error_code;
   16166:	f897 1020 	ldrb.w	r1, [r7, #32]
   1616a:	f887 1021 	strb.w	r1, [r7, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1616e:	2923      	cmp	r1, #35	; 0x23
   16170:	d012      	beq.n	16198 <ull_conn_rx+0x860>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16172:	f884 21b5 	strb.w	r2, [r4, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   16176:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1617a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1617e:	f36f 0200 	bfc	r2, #0, #1
   16182:	f884 21b7 	strb.w	r2, [r4, #439]	; 0x1b7
		conn->procedure_expire = 0U;
   16186:	2200      	movs	r2, #0
   16188:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1618c:	f3c3 0202 	ubfx	r2, r3, #0, #3
   16190:	f362 1306 	bfi	r3, r2, #4, #3
   16194:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (!conn->llcp_phy.cmd) {
   16198:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1619c:	0758      	lsls	r0, r3, #29
   1619e:	f57f ac15 	bpl.w	159cc <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   161a2:	2319      	movs	r3, #25
   161a4:	713b      	strb	r3, [r7, #4]
	p->status = rej_ext_ind->error_code;
   161a6:	7739      	strb	r1, [r7, #28]
	p->tx = conn->lll.phy_tx;
   161a8:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   161ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
   161b0:	777b      	strb	r3, [r7, #29]
	p->rx = conn->lll.phy_rx;
   161b2:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   161b6:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   161ba:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   161bc:	77bb      	strb	r3, [r7, #30]
	if (err) {
   161be:	e408      	b.n	159d2 <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   161c0:	7f7d      	ldrb	r5, [r7, #29]
   161c2:	2d06      	cmp	r5, #6
   161c4:	f47f ac37 	bne.w	15a36 <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
   161c8:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   161cc:	07de      	lsls	r6, r3, #31
   161ce:	f140 8375 	bpl.w	168bc <ull_conn_rx+0xf84>
	} else if (!conn->llcp_version.rx) {
   161d2:	f013 0302 	ands.w	r3, r3, #2
   161d6:	f47f abf9 	bne.w	159cc <ull_conn_rx+0x94>
		conn->llcp_version.ack = conn->llcp_version.req;
   161da:	f894 2130 	ldrb.w	r2, [r4, #304]	; 0x130
   161de:	f884 2131 	strb.w	r2, [r4, #305]	; 0x131
		conn->procedure_expire = 0U;
   161e2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	conn->llcp_version.version_number = v->version_number;
   161e6:	f897 3020 	ldrb.w	r3, [r7, #32]
   161ea:	f884 3133 	strb.w	r3, [r4, #307]	; 0x133
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   161ee:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
   161f2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   161f6:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   161fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   161fe:	f8a4 2134 	strh.w	r2, [r4, #308]	; 0x134
		sys_le16_to_cpu(v->sub_version_number);
   16202:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   16206:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1620a:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   1620e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   16212:	f8a4 2136 	strh.w	r2, [r4, #310]	; 0x136
	conn->llcp_version.rx = 1U;
   16216:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	return 0;
   1621a:	2000      	movs	r0, #0
   1621c:	f7ff bbd9 	b.w	159d2 <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   16220:	7f7b      	ldrb	r3, [r7, #29]
   16222:	2b18      	cmp	r3, #24
   16224:	f47f ac07 	bne.w	15a36 <ull_conn_rx+0xfe>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   16228:	4e2f      	ldr	r6, [pc, #188]	; (162e8 <ull_conn_rx+0x9b0>)
   1622a:	6833      	ldr	r3, [r6, #0]
   1622c:	2b00      	cmp	r3, #0
   1622e:	f000 80f7 	beq.w	16420 <ull_conn_rx+0xae8>
   16232:	429c      	cmp	r4, r3
   16234:	f000 80f4 	beq.w	16420 <ull_conn_rx+0xae8>
			nack = reject_ext_ind_send(conn, *rx,
   16238:	2320      	movs	r3, #32
   1623a:	220f      	movs	r2, #15
   1623c:	e537      	b.n	15cae <ull_conn_rx+0x376>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   1623e:	7f7b      	ldrb	r3, [r7, #29]
   16240:	2b01      	cmp	r3, #1
   16242:	f47f abf8 	bne.w	15a36 <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
   16246:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1624a:	2b00      	cmp	r3, #0
   1624c:	f2c0 80e0 	blt.w	16410 <ull_conn_rx+0xad8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16250:	4822      	ldr	r0, [pc, #136]	; (162dc <ull_conn_rx+0x9a4>)
   16252:	f7f9 fe19 	bl	fe88 <mem_acquire>
		if (!tx) {
   16256:	2800      	cmp	r0, #0
   16258:	f000 819e 	beq.w	16598 <ull_conn_rx+0xc60>
	conn->llcp_enc.pause_rx = 1U;
   1625c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   16260:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   16264:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
   16268:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
   1626c:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16270:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
   16272:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16276:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16278:	7142      	strb	r2, [r0, #5]
   1627a:	e6aa      	b.n	15fd2 <ull_conn_rx+0x69a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   1627c:	7f7b      	ldrb	r3, [r7, #29]
   1627e:	2b01      	cmp	r3, #1
   16280:	f47f abd9 	bne.w	15a36 <ull_conn_rx+0xfe>
		if (conn->lll.role) {
   16284:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16288:	2b00      	cmp	r3, #0
   1628a:	f6ff ac30 	blt.w	15aee <ull_conn_rx+0x1b6>
			conn->llcp_enc.pause_rx = 0U;
   1628e:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   16292:	f022 0203 	bic.w	r2, r2, #3
   16296:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
   1629a:	e439      	b.n	15b10 <ull_conn_rx+0x1d8>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   1629c:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   162a0:	f894 31a5 	ldrb.w	r3, [r4, #421]	; 0x1a5
   162a4:	4293      	cmp	r3, r2
   162a6:	f43f ab91 	beq.w	159cc <ull_conn_rx+0x94>
	conn->procedure_expire = 0U;
   162aa:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   162ac:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   162ae:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
	conn->procedure_expire = 0U;
   162b2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   162b6:	7779      	strb	r1, [r7, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   162b8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   162bc:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   162c0:	843a      	strh	r2, [r7, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   162c2:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   162c4:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   162c8:	77f9      	strb	r1, [r7, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   162ca:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
   162ce:	8479      	strh	r1, [r7, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   162d0:	84b8      	strh	r0, [r7, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   162d2:	84fa      	strh	r2, [r7, #38]	; 0x26
	int nack = 0;
   162d4:	4618      	mov	r0, r3
   162d6:	f7ff bb7c 	b.w	159d2 <ull_conn_rx+0x9a>
   162da:	bf00      	nop
   162dc:	2000e428 	.word	0x2000e428
   162e0:	fffe30d0 	.word	0xfffe30d0
   162e4:	0001ff7f 	.word	0x0001ff7f
   162e8:	2000e3a4 	.word	0x2000e3a4
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   162ec:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   162f0:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   162f4:	428b      	cmp	r3, r1
   162f6:	f43f ab69 	beq.w	159cc <ull_conn_rx+0x94>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   162fa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   162fe:	2a23      	cmp	r2, #35	; 0x23
   16300:	d012      	beq.n	16328 <ull_conn_rx+0x9f0>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16302:	f884 11b5 	strb.w	r1, [r4, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   16306:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1630a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1630e:	f36f 0100 	bfc	r1, #0, #1
   16312:	f884 11b7 	strb.w	r1, [r4, #439]	; 0x1b7
		conn->procedure_expire = 0U;
   16316:	2100      	movs	r1, #0
   16318:	f8a4 10cc 	strh.w	r1, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1631c:	f3c3 0102 	ubfx	r1, r3, #0, #3
   16320:	f361 1306 	bfi	r3, r1, #4, #3
   16324:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (!conn->llcp_phy.cmd) {
   16328:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1632c:	075e      	lsls	r6, r3, #29
   1632e:	f57f ab4d 	bpl.w	159cc <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16332:	2319      	movs	r3, #25
   16334:	713b      	strb	r3, [r7, #4]
	p->status = rej_ext_ind->error_code;
   16336:	773a      	strb	r2, [r7, #28]
   16338:	e736      	b.n	161a8 <ull_conn_rx+0x870>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1633a:	f894 217d 	ldrb.w	r2, [r4, #381]	; 0x17d
   1633e:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   16342:	429a      	cmp	r2, r3
   16344:	f43f ab42 	beq.w	159cc <ull_conn_rx+0x94>
	if (!lll->role && (rej_ext_ind->error_code ==
   16348:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   1634c:	2a00      	cmp	r2, #0
   1634e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   16352:	f2c0 8565 	blt.w	16e20 <ull_conn_rx+0x14e8>
   16356:	2a1a      	cmp	r2, #26
   16358:	f000 8588 	beq.w	16e6c <ull_conn_rx+0x1534>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1635c:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16360:	f002 0107 	and.w	r1, r2, #7
   16364:	2904      	cmp	r1, #4
   16366:	f000 8564 	beq.w	16e32 <ull_conn_rx+0x14fa>
	if (!conn->llcp_conn_param.cmd) {
   1636a:	0715      	lsls	r5, r2, #28
   1636c:	f57f ab2e 	bpl.w	159cc <ull_conn_rx+0x94>
	cu->status = rej_ext_ind->error_code;
   16370:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   16374:	773b      	strb	r3, [r7, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16376:	2215      	movs	r2, #21
   16378:	713a      	strb	r2, [r7, #4]
	cu->interval = lll->interval;
   1637a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   1637c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	cu->latency = lll->latency;
   16380:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   16382:	8439      	strh	r1, [r7, #32]
		      lll->interval * 125U / 1000;
   16384:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   16386:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   1638a:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   1638e:	83fa      	strh	r2, [r7, #30]
		      lll->interval * 125U / 1000;
   16390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   16394:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   16398:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   1639a:	847b      	strh	r3, [r7, #34]	; 0x22
	if (err) {
   1639c:	f7ff bb19 	b.w	159d2 <ull_conn_rx+0x9a>
		if ((conn->llcp_ack != conn->llcp_req) &&
   163a0:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   163a4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   163a8:	428b      	cmp	r3, r1
   163aa:	f43f ab0f 	beq.w	159cc <ull_conn_rx+0x94>
   163ae:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   163b2:	2b03      	cmp	r3, #3
   163b4:	f47f ab0a 	bne.w	159cc <ull_conn_rx+0x94>
	conn->llcp_enc.pause_rx = 0U;
   163b8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   163bc:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
	conn->procedure_expire = 0U;
   163c0:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   163c2:	f022 0203 	bic.w	r2, r2, #3
   163c6:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
	conn->procedure_expire = 0U;
   163ca:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   163ce:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   163d2:	f887 2020 	strb.w	r2, [r7, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   163d6:	210d      	movs	r1, #13
   163d8:	77f9      	strb	r1, [r7, #31]
	int nack = 0;
   163da:	4618      	mov	r0, r3
   163dc:	f7ff baf9 	b.w	159d2 <ull_conn_rx+0x9a>
			tx->next = conn->tx_head;
   163e0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   163e2:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   163e6:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   163ea:	2b00      	cmp	r3, #0
   163ec:	f47f aaee 	bne.w	159cc <ull_conn_rx+0x94>
   163f0:	f7ff bb4e 	b.w	15a90 <ull_conn_rx+0x158>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   163f4:	7f7b      	ldrb	r3, [r7, #29]
   163f6:	2b01      	cmp	r3, #1
   163f8:	f47f ab1d 	bne.w	15a36 <ull_conn_rx+0xfe>
   163fc:	e747      	b.n	1628e <ull_conn_rx+0x956>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   163fe:	7f7b      	ldrb	r3, [r7, #29]
   16400:	2b01      	cmp	r3, #1
   16402:	f47f ab18 	bne.w	15a36 <ull_conn_rx+0xfe>
   16406:	e723      	b.n	16250 <ull_conn_rx+0x918>
   16408:	7f7b      	ldrb	r3, [r7, #29]
   1640a:	2b01      	cmp	r3, #1
   1640c:	f47f ab13 	bne.w	15a36 <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
   16410:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   16414:	f36f 1304 	bfc	r3, #4, #1
   16418:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   1641c:	f7ff bad6 	b.w	159cc <ull_conn_rx+0x94>
		if (!conn->lll.role) {
   16420:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
					conn->llcp_conn_param.ack) &&
   16424:	f894 017d 	ldrb.w	r0, [r4, #381]	; 0x17d
		if (!conn->lll.role) {
   16428:	2900      	cmp	r1, #0
   1642a:	f2c0 809b 	blt.w	16564 <ull_conn_rx+0xc2c>
			if ((conn->llcp_conn_param.req !=
   1642e:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   16432:	4281      	cmp	r1, r0
   16434:	d009      	beq.n	1644a <ull_conn_rx+0xb12>
			    ((conn->llcp_conn_param.state ==
   16436:	f894 117e 	ldrb.w	r1, [r4, #382]	; 0x17e
					conn->llcp_conn_param.ack) &&
   1643a:	f011 0107 	ands.w	r1, r1, #7
   1643e:	f000 82e1 	beq.w	16a04 <ull_conn_rx+0x10cc>
			      LLCP_CPR_STATE_REQ) ||
   16442:	3904      	subs	r1, #4
   16444:	2901      	cmp	r1, #1
   16446:	f240 82dd 	bls.w	16a04 <ull_conn_rx+0x10cc>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1644a:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   1644e:	f894 50e9 	ldrb.w	r5, [r4, #233]	; 0xe9
   16452:	1b49      	subs	r1, r1, r5
   16454:	f001 0103 	and.w	r1, r1, #3
   16458:	2902      	cmp	r1, #2
   1645a:	f000 83c4 	beq.w	16be6 <ull_conn_rx+0x12ae>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   1645e:	f894 51b4 	ldrb.w	r5, [r4, #436]	; 0x1b4
   16462:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
   16466:	428d      	cmp	r5, r1
   16468:	f000 83e6 	beq.w	16c38 <ull_conn_rx+0x1300>
				nack = reject_ext_ind_send(conn, *rx,
   1646c:	232a      	movs	r3, #42	; 0x2a
   1646e:	220f      	movs	r2, #15
   16470:	e41d      	b.n	15cae <ull_conn_rx+0x376>
		if (!conn->tx_ctrl) {
   16472:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   16476:	2a00      	cmp	r2, #0
   16478:	f47f adcb 	bne.w	16012 <ull_conn_rx+0x6da>
			tx->next = conn->tx_head;
   1647c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1647e:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   16482:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   16486:	e5cb      	b.n	16020 <ull_conn_rx+0x6e8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16488:	48c1      	ldr	r0, [pc, #772]	; (16790 <ull_conn_rx+0xe58>)
   1648a:	f7f9 fcfd 	bl	fe88 <mem_acquire>
		if (!tx) {
   1648e:	4603      	mov	r3, r0
   16490:	2800      	cmp	r0, #0
   16492:	f000 8081 	beq.w	16598 <ull_conn_rx+0xc60>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16496:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   1649a:	f894 11a5 	ldrb.w	r1, [r4, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   1649e:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   164a2:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   164a6:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   164aa:	f8b4 a060 	ldrh.w	sl, [r4, #96]	; 0x60
	if (/* Local idle, and Peer request then complete the Peer procedure
   164ae:	428a      	cmp	r2, r1
   164b0:	f040 854f 	bne.w	16f52 <ull_conn_rx+0x161a>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   164b4:	8c39      	ldrh	r1, [r7, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   164b6:	291a      	cmp	r1, #26
   164b8:	f240 82a8 	bls.w	16a0c <ull_conn_rx+0x10d4>
			eff_tx_octets = MIN(max_rx_octets,
   164bc:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
   164c0:	4281      	cmp	r1, r0
   164c2:	bf28      	it	cs
   164c4:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   164c6:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   164c8:	f8b7 e026 	ldrh.w	lr, [r7, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   164cc:	281b      	cmp	r0, #27
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   164ce:	8c78      	ldrh	r0, [r7, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   164d0:	bf34      	ite	cc
   164d2:	46e0      	movcc	r8, ip
   164d4:	f04f 081b 	movcs.w	r8, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   164d8:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   164dc:	bf34      	ite	cc
   164de:	4650      	movcc	r0, sl
   164e0:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   164e4:	f5be 7fa4 	cmp.w	lr, #328	; 0x148
   164e8:	bf34      	ite	cc
   164ea:	46ce      	movcc	lr, r9
   164ec:	f44f 7ea4 	movcs.w	lr, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   164f0:	45e0      	cmp	r8, ip
   164f2:	f000 831b 	beq.w	16b2c <ull_conn_rx+0x11f4>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   164f6:	3a01      	subs	r2, #1
   164f8:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
			conn->llcp_length.rx_octets = eff_rx_octets;
   164fc:	f8a4 81a8 	strh.w	r8, [r4, #424]	; 0x1a8
			conn->llcp_length.tx_octets = eff_tx_octets;
   16500:	f8a4 11aa 	strh.w	r1, [r4, #426]	; 0x1aa
			conn->llcp_length.rx_time = eff_rx_time;
   16504:	f8a4 e1ac 	strh.w	lr, [r4, #428]	; 0x1ac
			conn->llcp_length.tx_time = eff_tx_time;
   16508:	f8a4 01ae 	strh.w	r0, [r4, #430]	; 0x1ae
			if (tx) {
   1650c:	2b00      	cmp	r3, #0
   1650e:	f000 8370 	beq.w	16bf2 <ull_conn_rx+0x12ba>
				conn->llcp_length.state =
   16512:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
   16516:	2705      	movs	r7, #5
   16518:	f367 0202 	bfi	r2, r7, #0, #3
   1651c:	f884 21a6 	strb.w	r2, [r4, #422]	; 0x1a6
			link->mem = conn->llcp_rx;
   16520:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16524:	6072      	str	r2, [r6, #4]
			(*rx)->hdr.link = link;
   16526:	682a      	ldr	r2, [r5, #0]
   16528:	6016      	str	r6, [r2, #0]
			conn->llcp_rx = *rx;
   1652a:	682a      	ldr	r2, [r5, #0]
   1652c:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
			*rx = NULL;
   16530:	2200      	movs	r2, #0
   16532:	602a      	str	r2, [r5, #0]
	if (tx) {
   16534:	2b00      	cmp	r3, #0
   16536:	f43f aa4b 	beq.w	159d0 <ull_conn_rx+0x98>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1653a:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1653c:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1653e:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   16542:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16544:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16546:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16548:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   1654a:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   1654c:	f8a3 8008 	strh.w	r8, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16550:	f8a3 e00a 	strh.w	lr, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   16554:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16556:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16558:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1655a:	f7fe fb49 	bl	14bf0 <ctrl_tx_sec_enqueue>
	return 0;
   1655e:	2000      	movs	r0, #0
}
   16560:	f7ff ba37 	b.w	159d2 <ull_conn_rx+0x9a>
		} else if ((conn->llcp_conn_param.req ==
   16564:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
   16568:	4282      	cmp	r2, r0
   1656a:	f000 811f 	beq.w	167ac <ull_conn_rx+0xe74>
			    conn->llcp_conn_param.ack) ||
   1656e:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16572:	0792      	lsls	r2, r2, #30
   16574:	f000 811a 	beq.w	167ac <ull_conn_rx+0xe74>
			LL_ASSERT(0);
   16578:	4a86      	ldr	r2, [pc, #536]	; (16794 <ull_conn_rx+0xe5c>)
   1657a:	4987      	ldr	r1, [pc, #540]	; (16798 <ull_conn_rx+0xe60>)
   1657c:	4887      	ldr	r0, [pc, #540]	; (1679c <ull_conn_rx+0xe64>)
   1657e:	f241 73de 	movw	r3, #6110	; 0x17de
   16582:	f00a fe87 	bl	21294 <printk>
   16586:	4040      	eors	r0, r0
   16588:	f380 8811 	msr	BASEPRI, r0
   1658c:	f04f 0003 	mov.w	r0, #3
   16590:	df02      	svc	2
	int nack = 0;
   16592:	2000      	movs	r0, #0
   16594:	f7ff ba1d 	b.w	159d2 <ull_conn_rx+0x9a>
		return -ENOBUFS;
   16598:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1659c:	f7ff ba19 	b.w	159d2 <ull_conn_rx+0x9a>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   165a0:	f894 217d 	ldrb.w	r2, [r4, #381]	; 0x17d
   165a4:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   165a8:	429a      	cmp	r2, r3
   165aa:	f43f ae77 	beq.w	1629c <ull_conn_rx+0x964>
		rej_ext_ind->error_code = rej_ind->error_code;
   165ae:	f897 3020 	ldrb.w	r3, [r7, #32]
   165b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   165b6:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   165ba:	2a00      	cmp	r2, #0
   165bc:	f2c0 8329 	blt.w	16c12 <ull_conn_rx+0x12da>
   165c0:	2b1a      	cmp	r3, #26
   165c2:	f000 8453 	beq.w	16e6c <ull_conn_rx+0x1534>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   165c6:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   165ca:	f002 0307 	and.w	r3, r2, #7
   165ce:	2b04      	cmp	r3, #4
   165d0:	f47f aecb 	bne.w	1636a <ull_conn_rx+0xa32>
		LL_ASSERT(conn_upd_curr == conn);
   165d4:	4e72      	ldr	r6, [pc, #456]	; (167a0 <ull_conn_rx+0xe68>)
   165d6:	6833      	ldr	r3, [r6, #0]
   165d8:	429c      	cmp	r4, r3
   165da:	d00e      	beq.n	165fa <ull_conn_rx+0xcc2>
   165dc:	4a6d      	ldr	r2, [pc, #436]	; (16794 <ull_conn_rx+0xe5c>)
   165de:	4971      	ldr	r1, [pc, #452]	; (167a4 <ull_conn_rx+0xe6c>)
   165e0:	486e      	ldr	r0, [pc, #440]	; (1679c <ull_conn_rx+0xe64>)
   165e2:	f241 13ba 	movw	r3, #4538	; 0x11ba
   165e6:	f00a fe55 	bl	21294 <printk>
   165ea:	4040      	eors	r0, r0
   165ec:	f380 8811 	msr	BASEPRI, r0
   165f0:	f04f 0003 	mov.w	r0, #3
   165f4:	df02      	svc	2
   165f6:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   165fa:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   165fe:	f884 117d 	strb.w	r1, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   16602:	2300      	movs	r3, #0
   16604:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   16606:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   1660a:	e6ae      	b.n	1636a <ull_conn_rx+0xa32>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1660c:	4860      	ldr	r0, [pc, #384]	; (16790 <ull_conn_rx+0xe58>)
   1660e:	f7f9 fc3b 	bl	fe88 <mem_acquire>
	if (!tx) {
   16612:	4602      	mov	r2, r0
   16614:	2800      	cmp	r0, #0
   16616:	d0bf      	beq.n	16598 <ull_conn_rx+0xc60>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   16618:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   1661c:	2102      	movs	r1, #2
   1661e:	f361 0301 	bfi	r3, r1, #0, #2
   16622:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
	if (conn->llcp_phy.ack ==
   16626:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
   1662a:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
   1662e:	428b      	cmp	r3, r1
   16630:	d115      	bne.n	1665e <ull_conn_rx+0xd26>
		conn->llcp_phy.ack--;
   16632:	3b01      	subs	r3, #1
   16634:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
		conn->llcp_phy.tx =
   16638:	f8b4 31b6 	ldrh.w	r3, [r4, #438]	; 0x1b6
			conn->phy_pref_rx;
   1663c:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
		conn->llcp_phy.tx =
   16640:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   16644:	f240 43fc 	movw	r3, #1276	; 0x4fc
   16648:	f021 0104 	bic.w	r1, r1, #4
   1664c:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   16650:	430b      	orrs	r3, r1
		conn->procedure_expire =
   16652:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
		conn->llcp_phy.tx =
   16656:	f8a4 31b6 	strh.w	r3, [r4, #438]	; 0x1b6
		conn->procedure_expire =
   1665a:	f8a4 10cc 	strh.w	r1, [r4, #204]	; 0xcc
	conn->llcp_phy.rx &= p->tx_phys;
   1665e:	f894 11b6 	ldrb.w	r1, [r4, #438]	; 0x1b6
   16662:	f897 3020 	ldrb.w	r3, [r7, #32]
   16666:	ea03 1051 	and.w	r0, r3, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   1666a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   1666e:	f3c1 0582 	ubfx	r5, r1, #2, #3
   16672:	402b      	ands	r3, r5
   16674:	009b      	lsls	r3, r3, #2
   16676:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   1667a:	f001 0103 	and.w	r1, r1, #3
   1667e:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16680:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   16682:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16686:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   16688:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1668c:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   1668e:	4603      	mov	r3, r0
   16690:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16694:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   16696:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1669a:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1669e:	2517      	movs	r5, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   166a0:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   166a4:	71d5      	strb	r5, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   166a6:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   166a8:	7111      	strb	r1, [r2, #4]
	if (
   166aa:	2b00      	cmp	r3, #0
   166ac:	f000 812b 	beq.w	16906 <ull_conn_rx+0xfce>
	    !conn->llcp_enc.pause_tx &&
   166b0:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   166b4:	0788      	lsls	r0, r1, #30
   166b6:	f100 8126 	bmi.w	16906 <ull_conn_rx+0xfce>
	    !conn->llcp_phy.pause_tx &&
   166ba:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   166be:	07c9      	lsls	r1, r1, #31
   166c0:	f100 8121 	bmi.w	16906 <ull_conn_rx+0xfce>
		if (conn->tx_head == conn->tx_data) {
   166c4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   166c8:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   166ca:	bf04      	itt	eq
   166cc:	6819      	ldreq	r1, [r3, #0]
   166ce:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   166d2:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   166d6:	2900      	cmp	r1, #0
   166d8:	f000 8380 	beq.w	16ddc <ull_conn_rx+0x14a4>
	tx->next = conn->tx_ctrl_last->next;
   166dc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   166e0:	6819      	ldr	r1, [r3, #0]
   166e2:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   166e4:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   166e6:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
	if (!tx->next) {
   166ea:	6813      	ldr	r3, [r2, #0]
   166ec:	2b00      	cmp	r3, #0
   166ee:	f47f a96d 	bne.w	159cc <ull_conn_rx+0x94>
		conn->tx_data_last = tx;
   166f2:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   166f6:	f7ff b969 	b.w	159cc <ull_conn_rx+0x94>
			conn->llcp_conn_param.disabled = 1U;
   166fa:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   166fe:	f042 0210 	orr.w	r2, r2, #16
   16702:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
			if (!conn->lll.role) {
   16706:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   1670a:	2a00      	cmp	r2, #0
   1670c:	f2c0 8234 	blt.w	16b78 <ull_conn_rx+0x1240>
				LL_ASSERT(conn->llcp_cu.req ==
   16710:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   16714:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   16718:	429a      	cmp	r2, r3
   1671a:	d00e      	beq.n	1673a <ull_conn_rx+0xe02>
   1671c:	4a1d      	ldr	r2, [pc, #116]	; (16794 <ull_conn_rx+0xe5c>)
   1671e:	4922      	ldr	r1, [pc, #136]	; (167a8 <ull_conn_rx+0xe70>)
   16720:	481e      	ldr	r0, [pc, #120]	; (1679c <ull_conn_rx+0xe64>)
   16722:	f641 0364 	movw	r3, #6244	; 0x1864
   16726:	f00a fdb5 	bl	21294 <printk>
   1672a:	4040      	eors	r0, r0
   1672c:	f380 8811 	msr	BASEPRI, r0
   16730:	f04f 0003 	mov.w	r0, #3
   16734:	df02      	svc	2
   16736:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
				conn->llcp_conn_param.state =
   1673a:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   1673e:	2105      	movs	r1, #5
   16740:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_cu.ack--;
   16744:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   16746:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   16748:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
				conn->llcp_cu.win_size = 1U;
   1674c:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16750:	682d      	ldr	r5, [r5, #0]
				conn->llcp_conn_param.state =
   16752:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16756:	f002 0308 	and.w	r3, r2, #8
   1675a:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
   1675e:	430b      	orrs	r3, r1
   16760:	f022 020f 	bic.w	r2, r2, #15
   16764:	4313      	orrs	r3, r2
   16766:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.latency =
   1676a:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
				conn->llcp_cu.interval =
   1676e:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
				conn->llcp_cu.latency =
   16772:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
				conn->llcp_cu.win_offset_us = 0U;
   16776:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   16778:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
				conn->llcp_cu.interval =
   1677c:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
				conn->llcp_cu.timeout =
   16780:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
				conn->llcp_cu.win_offset_us = 0U;
   16784:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16788:	7129      	strb	r1, [r5, #4]
				break;
   1678a:	f7ff b922 	b.w	159d2 <ull_conn_rx+0x9a>
   1678e:	bf00      	nop
   16790:	2000e428 	.word	0x2000e428
   16794:	00027f70 	.word	0x00027f70
   16798:	00027b4c 	.word	0x00027b4c
   1679c:	00027ab4 	.word	0x00027ab4
   167a0:	2000e3a4 	.word	0x2000e3a4
   167a4:	000280e4 	.word	0x000280e4
   167a8:	000280bc 	.word	0x000280bc
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   167ac:	f8b7 a020 	ldrh.w	sl, [r7, #32]
   167b0:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   167b4:	2a05      	cmp	r2, #5
   167b6:	d97d      	bls.n	168b4 <ull_conn_rx+0xf7c>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   167b8:	f8b7 9022 	ldrh.w	r9, [r7, #34]	; 0x22
   167bc:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   167c0:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   167c4:	d876      	bhi.n	168b4 <ull_conn_rx+0xf7c>
			    (interval_max > 3200) ||
   167c6:	428a      	cmp	r2, r1
   167c8:	d874      	bhi.n	168b4 <ull_conn_rx+0xf7c>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   167ca:	f8b7 8024 	ldrh.w	r8, [r7, #36]	; 0x24
   167ce:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   167d2:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   167d6:	d26d      	bcs.n	168b4 <ull_conn_rx+0xf7c>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   167d8:	f8b7 e026 	ldrh.w	lr, [r7, #38]	; 0x26
   167dc:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   167e0:	f1a2 050a 	sub.w	r5, r2, #10
   167e4:	f640 4b76 	movw	fp, #3190	; 0xc76
   167e8:	b2ad      	uxth	r5, r5
   167ea:	455d      	cmp	r5, fp
   167ec:	d862      	bhi.n	168b4 <ull_conn_rx+0xf7c>
			     ((latency + 1) * interval_max)) ||
   167ee:	f10c 0501 	add.w	r5, ip, #1
   167f2:	b2ad      	uxth	r5, r5
   167f4:	fb01 f505 	mul.w	r5, r1, r5
			    (timeout < 10) || (timeout > 3200) ||
   167f8:	ebb5 0f82 	cmp.w	r5, r2, lsl #2
   167fc:	d25a      	bcs.n	168b4 <ull_conn_rx+0xf7c>
			     ((latency + 1) * interval_max)) ||
   167fe:	f897 b028 	ldrb.w	fp, [r7, #40]	; 0x28
   16802:	4559      	cmp	r1, fp
   16804:	d356      	bcc.n	168b4 <ull_conn_rx+0xf7c>
			conn->llcp_conn_param.interval_min = interval_min;
   16806:	f8a4 a180 	strh.w	sl, [r4, #384]	; 0x180
			conn->llcp_conn_param.interval_max = interval_max;
   1680a:	f8a4 9182 	strh.w	r9, [r4, #386]	; 0x182
			conn->llcp_conn_param.latency =	latency;
   1680e:	f8a4 8184 	strh.w	r8, [r4, #388]	; 0x184
			conn->llcp_conn_param.timeout =	timeout;
   16812:	f8a4 e186 	strh.w	lr, [r4, #390]	; 0x186
			conn->llcp_conn_param.preferred_periodicity =
   16816:	f884 b188 	strb.w	fp, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1681a:	f897 e02a 	ldrb.w	lr, [r7, #42]	; 0x2a
   1681e:	f897 5029 	ldrb.w	r5, [r7, #41]	; 0x29
   16822:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   16826:	f8a4 518a 	strh.w	r5, [r4, #394]	; 0x18a
				sys_le16_to_cpu(cpr->offset0);
   1682a:	f897 e02c 	ldrb.w	lr, [r7, #44]	; 0x2c
   1682e:	f897 502b 	ldrb.w	r5, [r7, #43]	; 0x2b
   16832:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   16836:	f8a4 518c 	strh.w	r5, [r4, #396]	; 0x18c
				sys_le16_to_cpu(cpr->offset1);
   1683a:	f897 e02e 	ldrb.w	lr, [r7, #46]	; 0x2e
   1683e:	f897 502d 	ldrb.w	r5, [r7, #45]	; 0x2d
   16842:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   16846:	f8a4 518e 	strh.w	r5, [r4, #398]	; 0x18e
				sys_le16_to_cpu(cpr->offset2);
   1684a:	f897 e030 	ldrb.w	lr, [r7, #48]	; 0x30
   1684e:	f897 502f 	ldrb.w	r5, [r7, #47]	; 0x2f
   16852:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   16856:	f8a4 5190 	strh.w	r5, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->offset3);
   1685a:	f897 e032 	ldrb.w	lr, [r7, #50]	; 0x32
   1685e:	f897 5031 	ldrb.w	r5, [r7, #49]	; 0x31
   16862:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   16866:	f8a4 5192 	strh.w	r5, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset4);
   1686a:	f897 e034 	ldrb.w	lr, [r7, #52]	; 0x34
   1686e:	f897 5033 	ldrb.w	r5, [r7, #51]	; 0x33
   16872:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   16876:	f8a4 5194 	strh.w	r5, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset5);
   1687a:	f897 5035 	ldrb.w	r5, [r7, #53]	; 0x35
   1687e:	f897 e036 	ldrb.w	lr, [r7, #54]	; 0x36
   16882:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   16886:	f8a4 5196 	strh.w	r5, [r4, #406]	; 0x196
			     lll->interval) ||
   1688a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   1688c:	42a9      	cmp	r1, r5
   1688e:	f000 834a 	beq.w	16f26 <ull_conn_rx+0x15ee>
				conn->llcp_conn_param.state =
   16892:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16896:	2103      	movs	r1, #3
   16898:	f361 0202 	bfi	r2, r1, #0, #3
   1689c:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
			conn->llcp_conn_param.ack--;
   168a0:	3801      	subs	r0, #1
   168a2:	f884 017d 	strb.w	r0, [r4, #381]	; 0x17d
			if (!conn_upd_curr) {
   168a6:	2b00      	cmp	r3, #0
   168a8:	f47f a892 	bne.w	159d0 <ull_conn_rx+0x98>
				conn_upd_curr = conn;
   168ac:	6034      	str	r4, [r6, #0]
	int nack = 0;
   168ae:	4618      	mov	r0, r3
   168b0:	f7ff b88f 	b.w	159d2 <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   168b4:	231e      	movs	r3, #30
   168b6:	220f      	movs	r2, #15
   168b8:	f7ff b9f9 	b.w	15cae <ull_conn_rx+0x376>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   168bc:	48d9      	ldr	r0, [pc, #868]	; (16c24 <ull_conn_rx+0x12ec>)
   168be:	f7f9 fae3 	bl	fe88 <mem_acquire>
		if (!tx) {
   168c2:	4601      	mov	r1, r0
   168c4:	2800      	cmp	r0, #0
   168c6:	f43f ae67 	beq.w	16598 <ull_conn_rx+0xc60>
		conn->llcp_version.tx = 1U;
   168ca:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   168ce:	f043 0301 	orr.w	r3, r3, #1
   168d2:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   168d6:	220c      	movs	r2, #12
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   168d8:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   168da:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   168dc:	220b      	movs	r2, #11
   168de:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   168e0:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   168e4:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   168e8:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   168ea:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   168ec:	f04f 33ff 	mov.w	r3, #4294967295
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   168f0:	2205      	movs	r2, #5
		v->sub_version_number =
   168f2:	72c3      	strb	r3, [r0, #11]
   168f4:	7303      	strb	r3, [r0, #12]
		pdu_tx->len =
   168f6:	7145      	strb	r5, [r0, #5]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   168f8:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   168fa:	4620      	mov	r0, r4
   168fc:	f7fe f978 	bl	14bf0 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16900:	2301      	movs	r3, #1
   16902:	713b      	strb	r3, [r7, #4]
   16904:	e46f      	b.n	161e6 <ull_conn_rx+0x8ae>
		if (!conn->tx_ctrl) {
   16906:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   1690a:	2900      	cmp	r1, #0
   1690c:	f47f aee6 	bne.w	166dc <ull_conn_rx+0xda4>
			tx->next = conn->tx_head;
   16910:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   16912:	e9c4 226f 	strd	r2, r2, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   16916:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
   1691a:	e6e6      	b.n	166ea <ull_conn_rx+0xdb2>
				      0x03) == 0x02) &&
   1691c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   16920:	2b03      	cmp	r3, #3
   16922:	f47f a9c2 	bne.w	15caa <ull_conn_rx+0x372>
   16926:	f7ff b9b9 	b.w	15c9c <ull_conn_rx+0x364>
	instant = sys_le16_to_cpu(ind->instant);
   1692a:	8c78      	ldrh	r0, [r7, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1692c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   1692e:	1a82      	subs	r2, r0, r2
   16930:	0412      	lsls	r2, r2, #16
   16932:	f100 80bd 	bmi.w	16ab0 <ull_conn_rx+0x1178>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16936:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1693a:	f894 c0e9 	ldrb.w	ip, [r4, #233]	; 0xe9
   1693e:	eba2 020c 	sub.w	r2, r2, ip
   16942:	f002 0203 	and.w	r2, r2, #3
   16946:	2a02      	cmp	r2, #2
   16948:	f000 80ec 	beq.w	16b24 <ull_conn_rx+0x11ec>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1694c:	f894 71b4 	ldrb.w	r7, [r4, #436]	; 0x1b4
   16950:	f894 21b5 	ldrb.w	r2, [r4, #437]	; 0x1b5
   16954:	42ba      	cmp	r2, r7
   16956:	d018      	beq.n	1698a <ull_conn_rx+0x1052>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   16958:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1695c:	f002 0203 	and.w	r2, r2, #3
   16960:	2a02      	cmp	r2, #2
   16962:	d112      	bne.n	1698a <ull_conn_rx+0x1052>
		conn->llcp_phy.pause_tx = 0U;
   16964:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16968:	f884 71b5 	strb.w	r7, [r4, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   1696c:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16970:	f894 70ec 	ldrb.w	r7, [r4, #236]	; 0xec
		conn->llcp_phy.pause_tx = 0U;
   16974:	f884 21b7 	strb.w	r2, [r4, #439]	; 0x1b7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16978:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1697c:	f362 0741 	bfi	r7, r2, #1, #1
		conn->procedure_expire = 0U;
   16980:	2200      	movs	r2, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   16982:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
		conn->procedure_expire = 0U;
   16986:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   1698a:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   1698e:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   16992:	009b      	lsls	r3, r3, #2
   16994:	f003 031c 	and.w	r3, r3, #28
   16998:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1699c:	f002 0202 	and.w	r2, r2, #2
   169a0:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   169a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
	conn->llcp.phy_upd_ind.initiate = 0U;
   169a6:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	link->mem = conn->llcp_rx;
   169aa:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   169ac:	682a      	ldr	r2, [r5, #0]
   169ae:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   169b0:	682a      	ldr	r2, [r5, #0]
   169b2:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
	*rx = NULL;
   169b6:	2300      	movs	r3, #0
   169b8:	602b      	str	r3, [r5, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   169ba:	f7fd f89d 	bl	13af8 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   169be:	4605      	mov	r5, r0
   169c0:	2800      	cmp	r0, #0
   169c2:	f000 8211 	beq.w	16de8 <ull_conn_rx+0x14b0>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   169c6:	682b      	ldr	r3, [r5, #0]
   169c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   169cc:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   169ce:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   169d2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   169d6:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
	conn->llcp_type = LLCP_PHY_UPD;
   169da:	2106      	movs	r1, #6
	conn->llcp_ack -= 2U;
   169dc:	3a02      	subs	r2, #2
	if (conn->llcp.phy_upd_ind.tx) {
   169de:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   169e2:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
   169e6:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   169ea:	f43e aff1 	beq.w	159d0 <ull_conn_rx+0x98>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   169ee:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
   169f2:	f3c3 0382 	ubfx	r3, r3, #2, #3
   169f6:	f363 1206 	bfi	r2, r3, #4, #3
   169fa:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	int nack = 0;
   169fe:	2000      	movs	r0, #0
   16a00:	f7fe bfe7 	b.w	159d2 <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   16a04:	2323      	movs	r3, #35	; 0x23
   16a06:	220f      	movs	r2, #15
   16a08:	f7ff b951 	b.w	15cae <ull_conn_rx+0x376>
   16a0c:	4659      	mov	r1, fp
   16a0e:	e55a      	b.n	164c6 <ull_conn_rx+0xb8e>
			conn->llcp_length.disabled = 1U;
   16a10:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   16a14:	f884 31a5 	strb.w	r3, [r4, #421]	; 0x1a5
			conn->llcp_length.disabled = 1U;
   16a18:	f042 0308 	orr.w	r3, r2, #8
   16a1c:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   16a20:	f7ff b87e 	b.w	15b20 <ull_conn_rx+0x1e8>
				conn->llcp_phy.state =
   16a24:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
				if (conn->llcp_phy.ack ==
   16a28:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   16a2a:	f043 0303 	orr.w	r3, r3, #3
   16a2e:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
				if (conn->llcp_phy.ack ==
   16a32:	d111      	bne.n	16a58 <ull_conn_rx+0x1120>
					conn->llcp_phy.tx =
   16a34:	f8b4 21b6 	ldrh.w	r2, [r4, #438]	; 0x1b6
						conn->phy_pref_rx;
   16a38:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
					conn->llcp_phy.ack--;
   16a3c:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   16a3e:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   16a42:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
					conn->llcp_phy.tx =
   16a46:	f240 43fc 	movw	r3, #1276	; 0x4fc
   16a4a:	f022 0204 	bic.w	r2, r2, #4
   16a4e:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   16a52:	4313      	orrs	r3, r2
   16a54:	f8a4 31b6 	strh.w	r3, [r4, #438]	; 0x1b6
				conn->llcp_phy.rx &= p->tx_phys;
   16a58:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   16a5c:	f897 1020 	ldrb.w	r1, [r7, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   16a60:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   16a64:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   16a68:	f003 0203 	and.w	r2, r3, #3
   16a6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   16a70:	4003      	ands	r3, r0
   16a72:	009b      	lsls	r3, r3, #2
   16a74:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   16a78:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   16a7a:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   16a7e:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   16a82:	d002      	beq.n	16a8a <ull_conn_rx+0x1152>
   16a84:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   16a88:	d105      	bne.n	16a96 <ull_conn_rx+0x115e>
					conn->llcp_phy.tx = 0;
   16a8a:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   16a8e:	f003 0303 	and.w	r3, r3, #3
   16a92:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
				conn->llcp_phy.pause_tx = 1U;
   16a96:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16a9a:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   16a9c:	4313      	orrs	r3, r2
   16a9e:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
	int nack = 0;
   16aa2:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16aa4:	713a      	strb	r2, [r7, #4]
   16aa6:	f7fe bf94 	b.w	159d2 <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   16aaa:	2323      	movs	r3, #35	; 0x23
   16aac:	f7ff b8fe 	b.w	15cac <ull_conn_rx+0x374>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16ab0:	2301      	movs	r3, #1
   16ab2:	713b      	strb	r3, [r7, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   16ab4:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
   16ab6:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	int nack = 0;
   16aba:	2000      	movs	r0, #0
   16abc:	f7fe bf89 	b.w	159d2 <ull_conn_rx+0x9a>
			lll->phy_tx_time = lll->phy_tx;
   16ac0:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			conn->llcp_phy.pause_tx = 0U;
   16ac4:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
			conn->llcp_phy.ack = conn->llcp_phy.req;
   16ac8:	f884 11b5 	strb.w	r1, [r4, #437]	; 0x1b5
			conn->llcp_phy.pause_tx = 0U;
   16acc:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   16ad0:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   16ad2:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   16ad6:	f362 1106 	bfi	r1, r2, #4, #3
   16ada:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
			if (conn->llcp_phy.cmd) {
   16ade:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   16ae2:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
			lll->phy_tx_time = lll->phy_tx;
   16ae6:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16aea:	682b      	ldr	r3, [r5, #0]
			if (conn->llcp_phy.cmd) {
   16aec:	f000 808d 	beq.w	16c0a <ull_conn_rx+0x12d2>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16af0:	2119      	movs	r1, #25
   16af2:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   16af4:	2300      	movs	r3, #0
   16af6:	773b      	strb	r3, [r7, #28]
				p->tx = lll->phy_tx;
   16af8:	777a      	strb	r2, [r7, #29]
				p->rx = lll->phy_rx;
   16afa:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   16afe:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16b02:	77bb      	strb	r3, [r7, #30]
   16b04:	f7ff b80c 	b.w	15b20 <ull_conn_rx+0x1e8>
	conn->llcp_enc.pause_rx = 0U;
   16b08:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   16b0c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->procedure_expire = 0U;
   16b10:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   16b12:	f021 0103 	bic.w	r1, r1, #3
   16b16:	f884 115e 	strb.w	r1, [r4, #350]	; 0x15e
	conn->procedure_expire = 0U;
   16b1a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   16b1e:	4618      	mov	r0, r3
   16b20:	f7fe bf57 	b.w	159d2 <ull_conn_rx+0x9a>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16b24:	2301      	movs	r3, #1
   16b26:	713b      	strb	r3, [r7, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   16b28:	232a      	movs	r3, #42	; 0x2a
   16b2a:	e7c4      	b.n	16ab6 <ull_conn_rx+0x117e>
			conn->procedure_expire = 0U;
   16b2c:	2600      	movs	r6, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16b2e:	4559      	cmp	r1, fp
			conn->llcp_length.ack = conn->llcp_length.req;
   16b30:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
			conn->procedure_expire = 0U;
   16b34:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16b38:	f000 813e 	beq.w	16db8 <ull_conn_rx+0x1480>
			conn->lll.max_rx_time = eff_rx_time;
   16b3c:	f8a4 e062 	strh.w	lr, [r4, #98]	; 0x62
			if (tx) {
   16b40:	2b00      	cmp	r3, #0
   16b42:	f000 8134 	beq.w	16dae <ull_conn_rx+0x1476>
					(conn->llcp_length.req - 1);
   16b46:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   16b48:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
				conn->llcp_length.state =
   16b4c:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.rx_octets = eff_rx_octets;
   16b50:	f8a4 81a8 	strh.w	r8, [r4, #424]	; 0x1a8
				conn->llcp_length.state =
   16b54:	2503      	movs	r5, #3
   16b56:	f365 0202 	bfi	r2, r5, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   16b5a:	f8a4 11aa 	strh.w	r1, [r4, #426]	; 0x1aa
				conn->llcp_length.rx_time = eff_rx_time;
   16b5e:	f8a4 e1ac 	strh.w	lr, [r4, #428]	; 0x1ac
				conn->llcp_length.tx_time = eff_tx_time;
   16b62:	f8a4 01ae 	strh.w	r0, [r4, #430]	; 0x1ae
				conn->llcp_length.state =
   16b66:	f884 21a6 	strb.w	r2, [r4, #422]	; 0x1a6
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   16b6a:	f8a7 8020 	strh.w	r8, [r7, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   16b6e:	84b9      	strh	r1, [r7, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16b70:	f8a7 e022 	strh.w	lr, [r7, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16b74:	84f8      	strh	r0, [r7, #38]	; 0x26
   16b76:	e4dd      	b.n	16534 <ull_conn_rx+0xbfc>
			LL_ASSERT(conn_upd_curr == conn);
   16b78:	4e2b      	ldr	r6, [pc, #172]	; (16c28 <ull_conn_rx+0x12f0>)
   16b7a:	6832      	ldr	r2, [r6, #0]
   16b7c:	4294      	cmp	r4, r2
   16b7e:	d00e      	beq.n	16b9e <ull_conn_rx+0x1266>
   16b80:	4a2a      	ldr	r2, [pc, #168]	; (16c2c <ull_conn_rx+0x12f4>)
   16b82:	492b      	ldr	r1, [pc, #172]	; (16c30 <ull_conn_rx+0x12f8>)
   16b84:	482b      	ldr	r0, [pc, #172]	; (16c34 <ull_conn_rx+0x12fc>)
   16b86:	f641 037c 	movw	r3, #6268	; 0x187c
   16b8a:	f00a fb83 	bl	21294 <printk>
   16b8e:	4040      	eors	r0, r0
   16b90:	f380 8811 	msr	BASEPRI, r0
   16b94:	f04f 0003 	mov.w	r0, #3
   16b98:	df02      	svc	2
   16b9a:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16b9e:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (!conn->llcp_conn_param.cmd) {
   16ba2:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
	conn_upd_curr = NULL;
   16ba6:	2200      	movs	r2, #0
			if (!conn->llcp_conn_param.cmd) {
   16ba8:	f013 0308 	ands.w	r3, r3, #8
	conn_upd_curr = NULL;
   16bac:	6032      	str	r2, [r6, #0]
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16bae:	682a      	ldr	r2, [r5, #0]
			if (!conn->llcp_conn_param.cmd) {
   16bb0:	f040 80cf 	bne.w	16d52 <ull_conn_rx+0x141a>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16bb4:	2101      	movs	r1, #1
   16bb6:	7111      	strb	r1, [r2, #4]
	int nack = 0;
   16bb8:	4618      	mov	r0, r3
				break;
   16bba:	f7fe bf0a 	b.w	159d2 <ull_conn_rx+0x9a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16bbe:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   16bc2:	f36f 0101 	bfc	r1, #0, #2
				conn->llcp_ack -= 2U;
   16bc6:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16bc8:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
				conn->llcp_type = LLCP_ENCRYPTION;
   16bcc:	2103      	movs	r1, #3
   16bce:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   16bd2:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   16bd6:	f7fe bf9b 	b.w	15b10 <ull_conn_rx+0x1d8>
		conn_upd_curr = conn;
   16bda:	601c      	str	r4, [r3, #0]
   16bdc:	f7ff b921 	b.w	15e22 <ull_conn_rx+0x4ea>
	struct node_tx *tx = NULL;
   16be0:	2300      	movs	r3, #0
   16be2:	f7ff b828 	b.w	15c36 <ull_conn_rx+0x2fe>
				      0x03) == 0x02) &&
   16be6:	f894 10ea 	ldrb.w	r1, [r4, #234]	; 0xea
   16bea:	2903      	cmp	r1, #3
   16bec:	f47f ac3e 	bne.w	1646c <ull_conn_rx+0xb34>
   16bf0:	e435      	b.n	1645e <ull_conn_rx+0xb26>
				conn->llcp_length.state =
   16bf2:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
				conn->lll.max_tx_octets = eff_tx_octets;
   16bf6:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   16bfa:	2704      	movs	r7, #4
   16bfc:	f367 0202 	bfi	r2, r7, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   16c00:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
				conn->llcp_length.state =
   16c04:	f884 21a6 	strb.w	r2, [r4, #422]	; 0x1a6
   16c08:	e48a      	b.n	16520 <ull_conn_rx+0xbe8>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16c0a:	2201      	movs	r2, #1
   16c0c:	711a      	strb	r2, [r3, #4]
   16c0e:	f7fe bf87 	b.w	15b20 <ull_conn_rx+0x1e8>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   16c12:	2b23      	cmp	r3, #35	; 0x23
   16c14:	f43f acd7 	beq.w	165c6 <ull_conn_rx+0xc8e>
			conn->slave.ticks_to_offset =
   16c18:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   16c1c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   16c20:	e4d1      	b.n	165c6 <ull_conn_rx+0xc8e>
   16c22:	bf00      	nop
   16c24:	2000e428 	.word	0x2000e428
   16c28:	2000e3a4 	.word	0x2000e3a4
   16c2c:	00027f70 	.word	0x00027f70
   16c30:	000280e4 	.word	0x000280e4
   16c34:	00027ab4 	.word	0x00027ab4
				uint16_t interval_min =
   16c38:	f8b7 9020 	ldrh.w	r9, [r7, #32]
   16c3c:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   16c40:	2905      	cmp	r1, #5
   16c42:	f67f ae37 	bls.w	168b4 <ull_conn_rx+0xf7c>
				uint16_t interval_max =
   16c46:	f8b7 8022 	ldrh.w	r8, [r7, #34]	; 0x22
   16c4a:	fa1f f588 	uxth.w	r5, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   16c4e:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
   16c52:	f63f ae2f 	bhi.w	168b4 <ull_conn_rx+0xf7c>
				    (interval_max > 3200) ||
   16c56:	42a9      	cmp	r1, r5
   16c58:	f63f ae2c 	bhi.w	168b4 <ull_conn_rx+0xf7c>
				uint16_t latency =
   16c5c:	f8b7 e024 	ldrh.w	lr, [r7, #36]	; 0x24
   16c60:	fa1f fc8e 	uxth.w	ip, lr
				    (interval_min > interval_max) ||
   16c64:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   16c68:	f4bf ae24 	bcs.w	168b4 <ull_conn_rx+0xf7c>
				uint16_t timeout =
   16c6c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
   16c6e:	f8ad 1006 	strh.w	r1, [sp, #6]
   16c72:	b289      	uxth	r1, r1
				    (latency > 499) ||
   16c74:	f1a1 0a0a 	sub.w	sl, r1, #10
   16c78:	f640 4b76 	movw	fp, #3190	; 0xc76
   16c7c:	fa1f fa8a 	uxth.w	sl, sl
   16c80:	45da      	cmp	sl, fp
   16c82:	f63f ae17 	bhi.w	168b4 <ull_conn_rx+0xf7c>
				     ((latency + 1) * interval_max)) ||
   16c86:	f10c 0a01 	add.w	sl, ip, #1
   16c8a:	fa1f fa8a 	uxth.w	sl, sl
   16c8e:	fb05 fa0a 	mul.w	sl, r5, sl
				    (timeout > 3200) ||
   16c92:	ebba 0f81 	cmp.w	sl, r1, lsl #2
   16c96:	f4bf ae0d 	bcs.w	168b4 <ull_conn_rx+0xf7c>
				     ((latency + 1) * interval_max)) ||
   16c9a:	f897 b028 	ldrb.w	fp, [r7, #40]	; 0x28
   16c9e:	455d      	cmp	r5, fp
   16ca0:	f4ff ae08 	bcc.w	168b4 <ull_conn_rx+0xf7c>
				conn->llcp_conn_param.latency =	latency;
   16ca4:	f8a4 e184 	strh.w	lr, [r4, #388]	; 0x184
				conn->llcp_conn_param.timeout =	timeout;
   16ca8:	f8bd e006 	ldrh.w	lr, [sp, #6]
				conn->llcp_conn_param.interval_min =
   16cac:	f8a4 9180 	strh.w	r9, [r4, #384]	; 0x180
				conn->llcp_conn_param.interval_max =
   16cb0:	f8a4 8182 	strh.w	r8, [r4, #386]	; 0x182
				conn->llcp_conn_param.timeout =	timeout;
   16cb4:	f8a4 e186 	strh.w	lr, [r4, #390]	; 0x186
				conn->llcp_conn_param.preferred_periodicity =
   16cb8:	f884 b188 	strb.w	fp, [r4, #392]	; 0x188
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   16cbc:	f897 802a 	ldrb.w	r8, [r7, #42]	; 0x2a
   16cc0:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
   16cc4:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   16cc8:	f8a4 e18a 	strh.w	lr, [r4, #394]	; 0x18a
					sys_le16_to_cpu(cpr->offset0);
   16ccc:	f897 802c 	ldrb.w	r8, [r7, #44]	; 0x2c
   16cd0:	f897 e02b 	ldrb.w	lr, [r7, #43]	; 0x2b
   16cd4:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   16cd8:	f8a4 e18c 	strh.w	lr, [r4, #396]	; 0x18c
					sys_le16_to_cpu(cpr->offset1);
   16cdc:	f897 802e 	ldrb.w	r8, [r7, #46]	; 0x2e
   16ce0:	f897 e02d 	ldrb.w	lr, [r7, #45]	; 0x2d
   16ce4:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   16ce8:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
					sys_le16_to_cpu(cpr->offset2);
   16cec:	f897 8030 	ldrb.w	r8, [r7, #48]	; 0x30
   16cf0:	f897 e02f 	ldrb.w	lr, [r7, #47]	; 0x2f
   16cf4:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   16cf8:	f8a4 e190 	strh.w	lr, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->offset3);
   16cfc:	f897 8032 	ldrb.w	r8, [r7, #50]	; 0x32
   16d00:	f897 e031 	ldrb.w	lr, [r7, #49]	; 0x31
   16d04:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   16d08:	f8a4 e192 	strh.w	lr, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset4);
   16d0c:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
   16d10:	f897 e033 	ldrb.w	lr, [r7, #51]	; 0x33
   16d14:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   16d18:	f8a4 e194 	strh.w	lr, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset5);
   16d1c:	f897 e035 	ldrb.w	lr, [r7, #53]	; 0x35
   16d20:	f897 8036 	ldrb.w	r8, [r7, #54]	; 0x36
   16d24:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   16d28:	f8a4 e196 	strh.w	lr, [r4, #406]	; 0x196
				     lll->interval) ||
   16d2c:	f8b4 e02e 	ldrh.w	lr, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   16d30:	4575      	cmp	r5, lr
   16d32:	f000 80d8 	beq.w	16ee6 <ull_conn_rx+0x15ae>
					if (conn->llcp_enc.pause_tx) {
   16d36:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   16d3a:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
					if (conn->llcp_enc.pause_tx) {
   16d3e:	f43f adaa 	beq.w	16896 <ull_conn_rx+0xf5e>
						conn->llcp_conn_param.state =
   16d42:	2102      	movs	r1, #2
   16d44:	f361 0202 	bfi	r2, r1, #0, #3
   16d48:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
						(*rx)->hdr.type =
   16d4c:	2201      	movs	r2, #1
   16d4e:	713a      	strb	r2, [r7, #4]
   16d50:	e5a6      	b.n	168a0 <ull_conn_rx+0xf68>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16d52:	2115      	movs	r1, #21
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16d54:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16d56:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16d58:	773b      	strb	r3, [r7, #28]
			cu->interval = lll->interval;
   16d5a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   16d5c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			cu->latency = lll->latency;
   16d60:	8e21      	ldrh	r1, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   16d62:	83fa      	strh	r2, [r7, #30]
			cu->timeout = conn->supervision_reload *
   16d64:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   16d68:	227d      	movs	r2, #125	; 0x7d
   16d6a:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   16d6e:	8439      	strh	r1, [r7, #32]
				      lll->interval * 125U / 1000;
   16d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16d74:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   16d78:	847b      	strh	r3, [r7, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   16d7a:	f7fe bed1 	b.w	15b20 <ull_conn_rx+0x1e8>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   16d7e:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
			conn->llcp_ack += 2U;
   16d82:	3202      	adds	r2, #2
   16d84:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   16d88:	2b00      	cmp	r3, #0
   16d8a:	d13b      	bne.n	16e04 <ull_conn_rx+0x14cc>
			conn->slave.llcp_type = conn->llcp_type;
   16d8c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   16d90:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
   16d94:	f7fe beef 	b.w	15b76 <ull_conn_rx+0x23e>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16d98:	2219      	movs	r2, #25
   16d9a:	711a      	strb	r2, [r3, #4]
		p->status = 0U;
   16d9c:	7738      	strb	r0, [r7, #28]
		p->tx = conn->lll.phy_tx;
   16d9e:	7779      	strb	r1, [r7, #29]
		p->rx = conn->lll.phy_rx;
   16da0:	f894 1065 	ldrb.w	r1, [r4, #101]	; 0x65
   16da4:	f3c1 0302 	ubfx	r3, r1, #0, #3
   16da8:	77bb      	strb	r3, [r7, #30]
		if (err) {
   16daa:	f7fe be12 	b.w	159d2 <ull_conn_rx+0x9a>
				conn->lll.max_tx_octets = eff_tx_octets;
   16dae:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   16db2:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
   16db6:	e6d8      	b.n	16b6a <ull_conn_rx+0x1232>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   16db8:	4550      	cmp	r0, sl
   16dba:	f47f aebf 	bne.w	16b3c <ull_conn_rx+0x1204>
			    eff_rx_time == conn->lll.max_rx_time &&
   16dbe:	45ce      	cmp	lr, r9
   16dc0:	f47f aebc 	bne.w	16b3c <ull_conn_rx+0x1204>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16dc4:	682a      	ldr	r2, [r5, #0]
   16dc6:	2501      	movs	r5, #1
   16dc8:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   16dca:	f7ff bbb3 	b.w	16534 <ull_conn_rx+0xbfc>
			tx->next = conn->tx_head->next;
   16dce:	681a      	ldr	r2, [r3, #0]
   16dd0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   16dd2:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   16dd4:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   16dd8:	f7ff b922 	b.w	16020 <ull_conn_rx+0x6e8>
			tx->next = conn->tx_head->next;
   16ddc:	6819      	ldr	r1, [r3, #0]
   16dde:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   16de0:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   16de2:	e9c4 2270 	strd	r2, r2, [r4, #448]	; 0x1c0
   16de6:	e480      	b.n	166ea <ull_conn_rx+0xdb2>
	LL_ASSERT(rx_dle);
   16de8:	4a5e      	ldr	r2, [pc, #376]	; (16f64 <ull_conn_rx+0x162c>)
   16dea:	495f      	ldr	r1, [pc, #380]	; (16f68 <ull_conn_rx+0x1630>)
   16dec:	485f      	ldr	r0, [pc, #380]	; (16f6c <ull_conn_rx+0x1634>)
   16dee:	f241 4372 	movw	r3, #5234	; 0x1472
   16df2:	f00a fa4f 	bl	21294 <printk>
   16df6:	4040      	eors	r0, r0
   16df8:	f380 8811 	msr	BASEPRI, r0
   16dfc:	f04f 0003 	mov.w	r0, #3
   16e00:	df02      	svc	2
   16e02:	e5e0      	b.n	169c6 <ull_conn_rx+0x108e>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   16e04:	4a57      	ldr	r2, [pc, #348]	; (16f64 <ull_conn_rx+0x162c>)
   16e06:	495a      	ldr	r1, [pc, #360]	; (16f70 <ull_conn_rx+0x1638>)
   16e08:	4858      	ldr	r0, [pc, #352]	; (16f6c <ull_conn_rx+0x1634>)
   16e0a:	f241 6309 	movw	r3, #5641	; 0x1609
   16e0e:	f00a fa41 	bl	21294 <printk>
   16e12:	4040      	eors	r0, r0
   16e14:	f380 8811 	msr	BASEPRI, r0
   16e18:	f04f 0003 	mov.w	r0, #3
   16e1c:	df02      	svc	2
   16e1e:	e7b5      	b.n	16d8c <ull_conn_rx+0x1454>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   16e20:	2a23      	cmp	r2, #35	; 0x23
   16e22:	f43f aa9b 	beq.w	1635c <ull_conn_rx+0xa24>
			conn->slave.ticks_to_offset =
   16e26:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   16e2a:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
   16e2e:	f7ff ba95 	b.w	1635c <ull_conn_rx+0xa24>
		LL_ASSERT(conn_upd_curr == conn);
   16e32:	4e50      	ldr	r6, [pc, #320]	; (16f74 <ull_conn_rx+0x163c>)
   16e34:	6831      	ldr	r1, [r6, #0]
   16e36:	428c      	cmp	r4, r1
   16e38:	d010      	beq.n	16e5c <ull_conn_rx+0x1524>
   16e3a:	4a4a      	ldr	r2, [pc, #296]	; (16f64 <ull_conn_rx+0x162c>)
   16e3c:	494e      	ldr	r1, [pc, #312]	; (16f78 <ull_conn_rx+0x1640>)
   16e3e:	484b      	ldr	r0, [pc, #300]	; (16f6c <ull_conn_rx+0x1634>)
   16e40:	f241 13ba 	movw	r3, #4538	; 0x11ba
   16e44:	f00a fa26 	bl	21294 <printk>
   16e48:	4040      	eors	r0, r0
   16e4a:	f380 8811 	msr	BASEPRI, r0
   16e4e:	f04f 0003 	mov.w	r0, #3
   16e52:	df02      	svc	2
   16e54:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   16e58:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16e5c:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   16e60:	2300      	movs	r3, #0
   16e62:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   16e64:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   16e68:	f7ff ba7f 	b.w	1636a <ull_conn_rx+0xa32>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   16e6c:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   16e70:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   16e74:	429a      	cmp	r2, r3
   16e76:	d00e      	beq.n	16e96 <ull_conn_rx+0x155e>
   16e78:	4a3a      	ldr	r2, [pc, #232]	; (16f64 <ull_conn_rx+0x162c>)
   16e7a:	4940      	ldr	r1, [pc, #256]	; (16f7c <ull_conn_rx+0x1644>)
   16e7c:	483b      	ldr	r0, [pc, #236]	; (16f6c <ull_conn_rx+0x1634>)
   16e7e:	f241 139f 	movw	r3, #4511	; 0x119f
   16e82:	f00a fa07 	bl	21294 <printk>
   16e86:	4040      	eors	r0, r0
   16e88:	f380 8811 	msr	BASEPRI, r0
   16e8c:	f04f 0003 	mov.w	r0, #3
   16e90:	df02      	svc	2
   16e92:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   16e96:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16e9a:	2105      	movs	r1, #5
   16e9c:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp_cu.ack--;
   16ea0:	3b01      	subs	r3, #1
   16ea2:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   16ea6:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16eaa:	f002 0308 	and.w	r3, r2, #8
   16eae:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.win_size = 1U;
   16eb2:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16eb4:	430b      	orrs	r3, r1
   16eb6:	f022 020f 	bic.w	r2, r2, #15
   16eba:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   16ebc:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   16ec0:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   16ec4:	f8b4 1182 	ldrh.w	r1, [r4, #386]	; 0x182
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16ec8:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		conn->llcp_cu.win_offset_us = 0U;
   16ecc:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   16ece:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   16ed2:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   16ed6:	f8a4 1114 	strh.w	r1, [r4, #276]	; 0x114
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   16eda:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   16ede:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
	if (err) {
   16ee2:	f7fe bd73 	b.w	159cc <ull_conn_rx+0x94>
				     lll->interval) ||
   16ee6:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   16ee8:	4565      	cmp	r5, ip
   16eea:	f47f af24 	bne.w	16d36 <ull_conn_rx+0x13fe>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   16eee:	f240 45e2 	movw	r5, #1250	; 0x4e2
   16ef2:	fb05 f50e 	mul.w	r5, r5, lr
   16ef6:	f242 7c10 	movw	ip, #10000	; 0x2710
   16efa:	fb0c 5101 	mla	r1, ip, r1, r5
   16efe:	3901      	subs	r1, #1
   16f00:	fbb1 f1f5 	udiv	r1, r1, r5
				     lll->latency) ||
   16f04:	f8b4 50c6 	ldrh.w	r5, [r4, #198]	; 0xc6
   16f08:	b289      	uxth	r1, r1
   16f0a:	428d      	cmp	r5, r1
   16f0c:	f47f af13 	bne.w	16d36 <ull_conn_rx+0x13fe>
				conn->llcp_conn_param.state =
   16f10:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
   16f14:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   16f18:	f042 0201 	orr.w	r2, r2, #1
   16f1c:	f8a4 217e 	strh.w	r2, [r4, #382]	; 0x17e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16f20:	2201      	movs	r2, #1
   16f22:	713a      	strb	r2, [r7, #4]
   16f24:	e4bc      	b.n	168a0 <ull_conn_rx+0xf68>
			     lll->interval) ||
   16f26:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   16f28:	4565      	cmp	r5, ip
   16f2a:	f47f acb2 	bne.w	16892 <ull_conn_rx+0xf5a>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   16f2e:	f240 45e2 	movw	r5, #1250	; 0x4e2
   16f32:	fb05 f101 	mul.w	r1, r5, r1
   16f36:	f242 7510 	movw	r5, #10000	; 0x2710
   16f3a:	fb05 1202 	mla	r2, r5, r2, r1
   16f3e:	3a01      	subs	r2, #1
   16f40:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   16f44:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   16f48:	b292      	uxth	r2, r2
   16f4a:	4291      	cmp	r1, r2
   16f4c:	f47f aca1 	bne.w	16892 <ull_conn_rx+0xf5a>
   16f50:	e7de      	b.n	16f10 <ull_conn_rx+0x15d8>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   16f52:	f894 11a6 	ldrb.w	r1, [r4, #422]	; 0x1a6
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   16f56:	f011 0f06 	tst.w	r1, #6
   16f5a:	f43f aaab 	beq.w	164b4 <ull_conn_rx+0xb7c>
   16f5e:	f7fe be63 	b.w	15c28 <ull_conn_rx+0x2f0>
   16f62:	bf00      	nop
   16f64:	00027f70 	.word	0x00027f70
   16f68:	000280fc 	.word	0x000280fc
   16f6c:	00027ab4 	.word	0x00027ab4
   16f70:	00028098 	.word	0x00028098
   16f74:	2000e3a4 	.word	0x2000e3a4
   16f78:	000280e4 	.word	0x000280e4
   16f7c:	000280bc 	.word	0x000280bc

00016f80 <ull_conn_llcp>:
{
   16f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16f84:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   16f86:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   16f8a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16f8e:	4298      	cmp	r0, r3
{
   16f90:	460d      	mov	r5, r1
   16f92:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   16f94:	d076      	beq.n	17084 <ull_conn_llcp+0x104>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16f96:	1a1b      	subs	r3, r3, r0
   16f98:	f003 0303 	and.w	r3, r3, #3
   16f9c:	2b02      	cmp	r3, #2
   16f9e:	d049      	beq.n	17034 <ull_conn_llcp+0xb4>
   16fa0:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   16fa4:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   16fa6:	f1bc 0f00 	cmp.w	ip, #0
   16faa:	f2c0 8094 	blt.w	170d6 <ull_conn_llcp+0x156>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   16fae:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
   16fb2:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   16fb6:	429a      	cmp	r2, r3
   16fb8:	d039      	beq.n	1702e <ull_conn_llcp+0xae>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16fba:	4887      	ldr	r0, [pc, #540]	; (171d8 <ull_conn_llcp+0x258>)
   16fbc:	f7f8 ff64 	bl	fe88 <mem_acquire>
		if (tx) {
   16fc0:	b360      	cbz	r0, 1701c <ull_conn_llcp+0x9c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   16fc2:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   16fc6:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16fca:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   16fcc:	2202      	movs	r2, #2
   16fce:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16fd0:	f043 0303 	orr.w	r3, r3, #3
   16fd4:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   16fd6:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   16fd8:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_tx->llctrl.terminate_ind.error_code =
   16fdc:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
   16fe0:	7202      	strb	r2, [r0, #8]
	if (
   16fe2:	2b00      	cmp	r3, #0
   16fe4:	d041      	beq.n	1706a <ull_conn_llcp+0xea>
	    !conn->llcp_enc.pause_tx &&
   16fe6:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   16fea:	0791      	lsls	r1, r2, #30
   16fec:	d43d      	bmi.n	1706a <ull_conn_llcp+0xea>
	    !conn->llcp_phy.pause_tx &&
   16fee:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   16ff2:	07d2      	lsls	r2, r2, #31
   16ff4:	d439      	bmi.n	1706a <ull_conn_llcp+0xea>
		if (conn->tx_head == conn->tx_data) {
   16ff6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   16ffa:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   16ffc:	bf04      	itt	eq
   16ffe:	681a      	ldreq	r2, [r3, #0]
   17000:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17004:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17008:	bb9a      	cbnz	r2, 17072 <ull_conn_llcp+0xf2>
			tx->next = conn->tx_head->next;
   1700a:	681a      	ldr	r2, [r3, #0]
   1700c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1700e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   17010:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   17012:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
	if (!tx->next) {
   17016:	b90b      	cbnz	r3, 1701c <ull_conn_llcp+0x9c>
		conn->tx_data_last = tx;
   17018:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
		if (!conn->procedure_expire) {
   1701c:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
   17020:	b928      	cbnz	r0, 1702e <ull_conn_llcp+0xae>
			conn->procedure_expire = conn->supervision_reload;
   17022:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
   17026:	2b01      	cmp	r3, #1
   17028:	d96f      	bls.n	1710a <ull_conn_llcp+0x18a>
			conn->procedure_expire = conn->supervision_reload;
   1702a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	return 0;
   1702e:	2000      	movs	r0, #0
}
   17030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   17034:	f894 21a5 	ldrb.w	r2, [r4, #421]	; 0x1a5
   17038:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   1703c:	429a      	cmp	r2, r3
   1703e:	d006      	beq.n	1704e <ull_conn_llcp+0xce>
			     LLCP_LENGTH_STATE_RESIZE) ||
   17040:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
			if ((conn->llcp_length.state ==
   17044:	f003 0306 	and.w	r3, r3, #6
   17048:	2b04      	cmp	r3, #4
   1704a:	f000 81c8 	beq.w	173de <ull_conn_llcp+0x45e>
		switch (conn->llcp_type) {
   1704e:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
   17052:	1e7b      	subs	r3, r7, #1
   17054:	2b05      	cmp	r3, #5
   17056:	f200 81ac 	bhi.w	173b2 <ull_conn_llcp+0x432>
   1705a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1705e:	0031      	.short	0x0031
   17060:	00c50151 	.word	0x00c50151
   17064:	007e01aa 	.word	0x007e01aa
   17068:	0073      	.short	0x0073
		if (!conn->tx_ctrl) {
   1706a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1706e:	2a00      	cmp	r2, #0
   17070:	d062      	beq.n	17138 <ull_conn_llcp+0x1b8>
	tx->next = conn->tx_ctrl_last->next;
   17072:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17076:	681a      	ldr	r2, [r3, #0]
   17078:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1707a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1707c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1707e:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
}
   17082:	e7c8      	b.n	17016 <ull_conn_llcp+0x96>
   17084:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
	if ((conn->llcp_ack == conn->llcp_req) &&
   17088:	2a00      	cmp	r2, #0
   1708a:	4694      	mov	ip, r2
   1708c:	f2c0 81a1 	blt.w	173d2 <ull_conn_llcp+0x452>
	    !conn->llcp_enc.pause_rx) {
   17090:	f894 e15e 	ldrb.w	lr, [r4, #350]	; 0x15e
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   17094:	f01e 0801 	ands.w	r8, lr, #1
   17098:	d185      	bne.n	16fa6 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   1709a:	f894 9111 	ldrb.w	r9, [r4, #273]	; 0x111
   1709e:	f894 7110 	ldrb.w	r7, [r4, #272]	; 0x110
   170a2:	454f      	cmp	r7, r9
   170a4:	f000 82a7 	beq.w	175f6 <ull_conn_llcp+0x676>
			conn->llcp_type = LLCP_CONN_UPD;
   170a8:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   170aa:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   170ac:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   170b0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   170b4:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   170b8:	f894 31a5 	ldrb.w	r3, [r4, #421]	; 0x1a5
   170bc:	429a      	cmp	r2, r3
   170be:	d1bf      	bne.n	17040 <ull_conn_llcp+0xc0>
			if (event_conn_upd_prep(conn, lazy,
   170c0:	462a      	mov	r2, r5
   170c2:	4631      	mov	r1, r6
   170c4:	4620      	mov	r0, r4
   170c6:	f7ea fe4b 	bl	1d60 <event_conn_upd_prep>
   170ca:	2800      	cmp	r0, #0
   170cc:	f040 817e 	bne.w	173cc <ull_conn_llcp+0x44c>
				return -ECANCELED;
   170d0:	f06f 0047 	mvn.w	r0, #71	; 0x47
   170d4:	e7ac      	b.n	17030 <ull_conn_llcp+0xb0>
   170d6:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   170da:	2900      	cmp	r1, #0
   170dc:	f43f af67 	beq.w	16fae <ull_conn_llcp+0x2e>
		switch (conn->slave.llcp_type) {
   170e0:	2902      	cmp	r1, #2
   170e2:	f000 813d 	beq.w	17360 <ull_conn_llcp+0x3e0>
   170e6:	2906      	cmp	r1, #6
   170e8:	d01d      	beq.n	17126 <ull_conn_llcp+0x1a6>
   170ea:	2901      	cmp	r1, #1
   170ec:	d012      	beq.n	17114 <ull_conn_llcp+0x194>
			LL_ASSERT(0);
   170ee:	4a3b      	ldr	r2, [pc, #236]	; (171dc <ull_conn_llcp+0x25c>)
   170f0:	493b      	ldr	r1, [pc, #236]	; (171e0 <ull_conn_llcp+0x260>)
   170f2:	483c      	ldr	r0, [pc, #240]	; (171e4 <ull_conn_llcp+0x264>)
   170f4:	f240 4316 	movw	r3, #1046	; 0x416
   170f8:	f00a f8cc 	bl	21294 <printk>
   170fc:	4040      	eors	r0, r0
   170fe:	f380 8811 	msr	BASEPRI, r0
   17102:	f04f 0003 	mov.w	r0, #3
   17106:	df02      	svc	2
			break;
   17108:	e751      	b.n	16fae <ull_conn_llcp+0x2e>
				conn->procedure_expire++;
   1710a:	3301      	adds	r3, #1
   1710c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
   17110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (event_conn_upd_prep(conn, lazy,
   17114:	462a      	mov	r2, r5
   17116:	4631      	mov	r1, r6
   17118:	4620      	mov	r0, r4
   1711a:	f7ea fe21 	bl	1d60 <event_conn_upd_prep>
   1711e:	2800      	cmp	r0, #0
   17120:	f47f af45 	bne.w	16fae <ull_conn_llcp+0x2e>
   17124:	e7d4      	b.n	170d0 <ull_conn_llcp+0x150>
			event_counter = lll->event_counter +
   17126:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   17128:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   1712a:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   1712c:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1712e:	4620      	mov	r0, r4
   17130:	b291      	uxth	r1, r2
   17132:	f7fd fee3 	bl	14efc <event_phy_upd_ind_prep>
		break;
   17136:	e73a      	b.n	16fae <ull_conn_llcp+0x2e>
			tx->next = conn->tx_head;
   17138:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1713a:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1713e:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   17142:	e768      	b.n	17016 <ull_conn_llcp+0x96>
			event_counter = lll->event_counter +
   17144:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   17146:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   17148:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   1714a:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1714c:	b289      	uxth	r1, r1
   1714e:	4620      	mov	r0, r4
   17150:	f7fd fed4 	bl	14efc <event_phy_upd_ind_prep>
		break;
   17154:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17158:	e725      	b.n	16fa6 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1715a:	481f      	ldr	r0, [pc, #124]	; (171d8 <ull_conn_llcp+0x258>)
   1715c:	f7f8 fe94 	bl	fe88 <mem_acquire>
	if (tx) {
   17160:	2800      	cmp	r0, #0
   17162:	f000 8133 	beq.w	173cc <ull_conn_llcp+0x44c>
		conn->llcp_ack = conn->llcp_req;
   17166:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1716a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1716e:	7903      	ldrb	r3, [r0, #4]
   17170:	f043 0303 	orr.w	r3, r3, #3
   17174:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   17176:	2301      	movs	r3, #1
   17178:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1717a:	2312      	movs	r3, #18
   1717c:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   1717e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17182:	2b00      	cmp	r3, #0
   17184:	f000 8275 	beq.w	17672 <ull_conn_llcp+0x6f2>
	    !conn->llcp_enc.pause_tx &&
   17188:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1718c:	0791      	lsls	r1, r2, #30
   1718e:	f100 8270 	bmi.w	17672 <ull_conn_llcp+0x6f2>
	    !conn->llcp_phy.pause_tx &&
   17192:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17196:	07d2      	lsls	r2, r2, #31
   17198:	f100 826b 	bmi.w	17672 <ull_conn_llcp+0x6f2>
		if (conn->tx_head == conn->tx_data) {
   1719c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   171a0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   171a2:	bf04      	itt	eq
   171a4:	681a      	ldreq	r2, [r3, #0]
   171a6:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   171aa:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   171ae:	2a00      	cmp	r2, #0
   171b0:	f000 8687 	beq.w	17ec2 <ull_conn_llcp+0xf42>
	tx->next = conn->tx_ctrl_last->next;
   171b4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   171b8:	681a      	ldr	r2, [r3, #0]
   171ba:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   171bc:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   171be:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   171c0:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   171c4:	2b00      	cmp	r3, #0
   171c6:	f000 8399 	beq.w	178fc <ull_conn_llcp+0x97c>
		conn->procedure_expire = conn->procedure_reload;
   171ca:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   171ce:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   171d2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   171d6:	e6e6      	b.n	16fa6 <ull_conn_llcp+0x26>
   171d8:	2000e428 	.word	0x2000e428
   171dc:	00027f70 	.word	0x00027f70
   171e0:	00027b4c 	.word	0x00027b4c
   171e4:	00027ab4 	.word	0x00027ab4
	if (conn->llcp.encryption.state) {
   171e8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   171ec:	f013 0803 	ands.w	r8, r3, #3
   171f0:	f000 814a 	beq.w	17488 <ull_conn_llcp+0x508>
		if (lll->role &&
   171f4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   171f8:	2b00      	cmp	r3, #0
   171fa:	f6bf aed8 	bge.w	16fae <ull_conn_llcp+0x2e>
   171fe:	f1b8 0f01 	cmp.w	r8, #1
   17202:	f47f af68 	bne.w	170d6 <ull_conn_llcp+0x156>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17206:	48d1      	ldr	r0, [pc, #836]	; (1754c <ull_conn_llcp+0x5cc>)
   17208:	f7f8 fe3e 	bl	fe88 <mem_acquire>
	if (!tx) {
   1720c:	4680      	mov	r8, r0
   1720e:	2800      	cmp	r0, #0
   17210:	f000 80dc 	beq.w	173cc <ull_conn_llcp+0x44c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17214:	7903      	ldrb	r3, [r0, #4]
   17216:	f043 0303 	orr.w	r3, r3, #3
   1721a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   1721c:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   17220:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   17222:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   17226:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   17228:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   1722c:	210c      	movs	r1, #12
   1722e:	4638      	mov	r0, r7
   17230:	f003 f9aa 	bl	1a588 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   17234:	4639      	mov	r1, r7
   17236:	2208      	movs	r2, #8
   17238:	f504 7081 	add.w	r0, r4, #258	; 0x102
   1723c:	f00c fc9d 	bl	23b7a <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   17240:	464a      	mov	r2, r9
   17242:	f108 0110 	add.w	r1, r8, #16
   17246:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1724a:	f00c fc96 	bl	23b7a <memcpy>
	    conn->tx_head &&
   1724e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17252:	2b00      	cmp	r3, #0
   17254:	f000 8450 	beq.w	17af8 <ull_conn_llcp+0xb78>
	    !conn->llcp_enc.pause_tx &&
   17258:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1725c:	0791      	lsls	r1, r2, #30
   1725e:	f100 844b 	bmi.w	17af8 <ull_conn_llcp+0xb78>
	    !conn->llcp_phy.pause_tx &&
   17262:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17266:	07d2      	lsls	r2, r2, #31
   17268:	f100 8446 	bmi.w	17af8 <ull_conn_llcp+0xb78>
		if (conn->tx_head == conn->tx_data) {
   1726c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17270:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17272:	bf04      	itt	eq
   17274:	681a      	ldreq	r2, [r3, #0]
   17276:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1727a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1727e:	2a00      	cmp	r2, #0
   17280:	f000 8704 	beq.w	1808c <ull_conn_llcp+0x110c>
	tx->next = conn->tx_ctrl_last->next;
   17284:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17288:	681a      	ldr	r2, [r3, #0]
   1728a:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   1728e:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   17292:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   17296:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   1729a:	2b00      	cmp	r3, #0
   1729c:	f000 85f3 	beq.w	17e86 <ull_conn_llcp+0xf06>
			rx = ll_pdu_rx_alloc();
   172a0:	f7fc fc2a 	bl	13af8 <ll_pdu_rx_alloc>
			if (!rx) {
   172a4:	4607      	mov	r7, r0
   172a6:	2800      	cmp	r0, #0
   172a8:	f000 8090 	beq.w	173cc <ull_conn_llcp+0x44c>
			rx->hdr.handle = conn->lll.handle;
   172ac:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   172ae:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   172b0:	2303      	movs	r3, #3
   172b2:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   172b4:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   172b6:	7f3b      	ldrb	r3, [r7, #28]
   172b8:	f043 0303 	orr.w	r3, r3, #3
   172bc:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   172be:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   172c0:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   172c2:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   172c4:	f204 1161 	addw	r1, r4, #353	; 0x161
   172c8:	f107 0020 	add.w	r0, r7, #32
   172cc:	f00c fc55 	bl	23b7a <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   172d0:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
   172d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   172d8:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
   172dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   172e0:	6838      	ldr	r0, [r7, #0]
   172e2:	4639      	mov	r1, r7
   172e4:	f7fc fbda 	bl	13a9c <ll_rx_put>
			ll_rx_sched();
   172e8:	f7fc fbe2 	bl	13ab0 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   172ec:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   172f0:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   172f4:	2202      	movs	r2, #2
   172f6:	f362 0301 	bfi	r3, r2, #0, #2
   172fa:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   172fe:	e652      	b.n	16fa6 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   17300:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   17302:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   17304:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   17306:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
					lll->latency_prepare + lazy;
   1730a:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   1730c:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   17310:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   17312:	d168      	bne.n	173e6 <ull_conn_llcp+0x466>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   17314:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   17318:	1afb      	subs	r3, r7, r3
   1731a:	0418      	lsls	r0, r3, #16
   1731c:	d456      	bmi.n	173cc <ull_conn_llcp+0x44c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1731e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   17322:	2b00      	cmp	r3, #0
   17324:	f2c0 82e2 	blt.w	178ec <ull_conn_llcp+0x96c>
			conn->llcp_ack = conn->llcp_req;
   17328:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1732c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
   17330:	f104 0738 	add.w	r7, r4, #56	; 0x38
   17334:	2205      	movs	r2, #5
   17336:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   1733a:	4638      	mov	r0, r7
   1733c:	f00c fc1d 	bl	23b7a <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   17340:	2105      	movs	r1, #5
   17342:	4638      	mov	r0, r7
   17344:	f7f8 ff70 	bl	10228 <util_ones_count_get>
		lll->data_chan_count =
   17348:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   1734c:	2301      	movs	r3, #1
		lll->data_chan_count =
   1734e:	f360 0c05 	bfi	ip, r0, #0, #6
   17352:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17356:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
   1735a:	fa4f fc8c 	sxtb.w	ip, ip
   1735e:	e622      	b.n	16fa6 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   17360:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   17362:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
   17364:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
   17368:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   1736a:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   1736c:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   17370:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   17372:	f040 80f3 	bne.w	1755c <ull_conn_llcp+0x5dc>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   17376:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   1737a:	1ab6      	subs	r6, r6, r2
   1737c:	0430      	lsls	r0, r6, #16
   1737e:	f53f ae16 	bmi.w	16fae <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
   17382:	f104 0538 	add.w	r5, r4, #56	; 0x38
   17386:	2205      	movs	r2, #5
			conn->slave.llcp_type = LLCP_NONE;
   17388:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		memcpy(&lll->data_chan_map[0],
   1738c:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17390:	4628      	mov	r0, r5
   17392:	f00c fbf2 	bl	23b7a <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   17396:	2105      	movs	r1, #5
   17398:	4628      	mov	r0, r5
   1739a:	f7f8 ff45 	bl	10228 <util_ones_count_get>
		lll->data_chan_count =
   1739e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   173a2:	2201      	movs	r2, #1
		lll->data_chan_count =
   173a4:	f360 0305 	bfi	r3, r0, #0, #6
   173a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   173ac:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
   173b0:	e5fd      	b.n	16fae <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   173b2:	4a67      	ldr	r2, [pc, #412]	; (17550 <ull_conn_llcp+0x5d0>)
   173b4:	4967      	ldr	r1, [pc, #412]	; (17554 <ull_conn_llcp+0x5d4>)
   173b6:	4868      	ldr	r0, [pc, #416]	; (17558 <ull_conn_llcp+0x5d8>)
   173b8:	f240 33e5 	movw	r3, #997	; 0x3e5
   173bc:	f009 ff6a 	bl	21294 <printk>
   173c0:	4040      	eors	r0, r0
   173c2:	f380 8811 	msr	BASEPRI, r0
   173c6:	f04f 0003 	mov.w	r0, #3
   173ca:	df02      	svc	2
			break;
   173cc:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   173d0:	e5e9      	b.n	16fa6 <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   173d2:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
   173d6:	2900      	cmp	r1, #0
   173d8:	f47f ae82 	bne.w	170e0 <ull_conn_llcp+0x160>
   173dc:	e658      	b.n	17090 <ull_conn_llcp+0x110>
				event_len_prep(conn);
   173de:	4620      	mov	r0, r4
   173e0:	f7fd fca4 	bl	14d2c <event_len_prep>
   173e4:	e633      	b.n	1704e <ull_conn_llcp+0xce>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   173e6:	4859      	ldr	r0, [pc, #356]	; (1754c <ull_conn_llcp+0x5cc>)
   173e8:	f7f8 fd4e 	bl	fe88 <mem_acquire>
		if (tx) {
   173ec:	4680      	mov	r8, r0
   173ee:	2800      	cmp	r0, #0
   173f0:	d0ec      	beq.n	173cc <ull_conn_llcp+0x44c>
			conn->llcp.chan_map.instant = event_counter +
   173f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   173f4:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
   173f8:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   173fa:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   173fc:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17400:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   17402:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17406:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   1740a:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1740e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17410:	2308      	movs	r3, #8
   17412:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   17414:	2301      	movs	r3, #1
   17416:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   17418:	2205      	movs	r2, #5
   1741a:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   1741e:	3008      	adds	r0, #8
   17420:	f00c fbab 	bl	23b7a <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   17424:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   17428:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   1742c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17430:	2b00      	cmp	r3, #0
   17432:	f000 8266 	beq.w	17902 <ull_conn_llcp+0x982>
	    !conn->llcp_enc.pause_tx &&
   17436:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1743a:	0792      	lsls	r2, r2, #30
   1743c:	f100 8261 	bmi.w	17902 <ull_conn_llcp+0x982>
	    !conn->llcp_phy.pause_tx &&
   17440:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17444:	07d7      	lsls	r7, r2, #31
   17446:	f100 825c 	bmi.w	17902 <ull_conn_llcp+0x982>
		if (conn->tx_head == conn->tx_data) {
   1744a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1744e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17450:	bf04      	itt	eq
   17452:	681a      	ldreq	r2, [r3, #0]
   17454:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17458:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1745c:	2a00      	cmp	r2, #0
   1745e:	f000 8602 	beq.w	18066 <ull_conn_llcp+0x10e6>
	tx->next = conn->tx_ctrl_last->next;
   17462:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17466:	681a      	ldr	r2, [r3, #0]
   17468:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   1746c:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   17470:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   17474:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17478:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   1747c:	2b00      	cmp	r3, #0
   1747e:	f47f ad92 	bne.w	16fa6 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   17482:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   17486:	e58e      	b.n	16fa6 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17488:	4830      	ldr	r0, [pc, #192]	; (1754c <ull_conn_llcp+0x5cc>)
   1748a:	f7f8 fcfd 	bl	fe88 <mem_acquire>
	if (!tx) {
   1748e:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17492:	4681      	mov	r9, r0
   17494:	2800      	cmp	r0, #0
   17496:	f43f ad86 	beq.w	16fa6 <ull_conn_llcp+0x26>
	if (!lll->role) {
   1749a:	f1bc 0f00 	cmp.w	ip, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   1749e:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   174a2:	f280 82a5 	bge.w	179f0 <ull_conn_llcp+0xa70>
	else if (!lll->enc_rx) {
   174a6:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   174aa:	0719      	lsls	r1, r3, #28
   174ac:	f100 842b 	bmi.w	17d06 <ull_conn_llcp+0xd86>
		if (conn->llcp.encryption.error_code) {
   174b0:	f894 80f9 	ldrb.w	r8, [r4, #249]	; 0xf9
   174b4:	f1b8 0f00 	cmp.w	r8, #0
   174b8:	f000 83b5 	beq.w	17c26 <ull_conn_llcp+0xca6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   174bc:	7903      	ldrb	r3, [r0, #4]
   174be:	f043 0303 	orr.w	r3, r3, #3
   174c2:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   174c4:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   174c8:	07da      	lsls	r2, r3, #31
   174ca:	f140 84d4 	bpl.w	17e76 <ull_conn_llcp+0xef6>
	    (conn->llcp_feature.features_conn &
   174ce:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   174d2:	075b      	lsls	r3, r3, #29
   174d4:	f140 84cf 	bpl.w	17e76 <ull_conn_llcp+0xef6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   174d8:	2311      	movs	r3, #17
   174da:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   174dc:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   174de:	f880 8009 	strb.w	r8, [r0, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   174e2:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   174e4:	f889 7005 	strb.w	r7, [r9, #5]
	    conn->tx_head &&
   174e8:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	conn->llcp.encryption.error_code = 0U;
   174ec:	2200      	movs	r2, #0
   174ee:	f884 20f9 	strb.w	r2, [r4, #249]	; 0xf9
	if (
   174f2:	2b00      	cmp	r3, #0
   174f4:	f000 8454 	beq.w	17da0 <ull_conn_llcp+0xe20>
	    !conn->llcp_enc.pause_tx &&
   174f8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   174fc:	0790      	lsls	r0, r2, #30
   174fe:	f100 844f 	bmi.w	17da0 <ull_conn_llcp+0xe20>
	    !conn->llcp_phy.pause_tx &&
   17502:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17506:	07d1      	lsls	r1, r2, #31
   17508:	f100 844a 	bmi.w	17da0 <ull_conn_llcp+0xe20>
		if (conn->tx_head == conn->tx_data) {
   1750c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17510:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17512:	bf04      	itt	eq
   17514:	681a      	ldreq	r2, [r3, #0]
   17516:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1751a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1751e:	2a00      	cmp	r2, #0
   17520:	f000 85e6 	beq.w	180f0 <ull_conn_llcp+0x1170>
	tx->next = conn->tx_ctrl_last->next;
   17524:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17528:	681a      	ldr	r2, [r3, #0]
   1752a:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1752e:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   17532:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17536:	f8d9 3000 	ldr.w	r3, [r9]
   1753a:	2b00      	cmp	r3, #0
   1753c:	f000 82cf 	beq.w	17ade <ull_conn_llcp+0xb5e>
	conn->llcp_ack = conn->llcp_req;
   17540:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17544:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   17548:	e52d      	b.n	16fa6 <ull_conn_llcp+0x26>
   1754a:	bf00      	nop
   1754c:	2000e428 	.word	0x2000e428
   17550:	00027f70 	.word	0x00027f70
   17554:	00027b4c 	.word	0x00027b4c
   17558:	00027ab4 	.word	0x00027ab4
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1755c:	48ab      	ldr	r0, [pc, #684]	; (1780c <ull_conn_llcp+0x88c>)
   1755e:	f7f8 fc93 	bl	fe88 <mem_acquire>
		if (tx) {
   17562:	4605      	mov	r5, r0
   17564:	2800      	cmp	r0, #0
   17566:	f43f ad22 	beq.w	16fae <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
   1756a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   1756c:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17570:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   17572:	4433      	add	r3, r6
			conn->llcp.chan_map.initiate = 0U;
   17574:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   17578:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   1757a:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
   1757e:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17582:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   17586:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17588:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1758a:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1758c:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1758e:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   17590:	2205      	movs	r2, #5
   17592:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17596:	3008      	adds	r0, #8
   17598:	f00c faef 	bl	23b7a <memcpy>
	    conn->tx_head &&
   1759c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   175a0:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   175a4:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   175a8:	2b00      	cmp	r3, #0
   175aa:	f000 81b6 	beq.w	1791a <ull_conn_llcp+0x99a>
	    !conn->llcp_enc.pause_tx &&
   175ae:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   175b2:	0797      	lsls	r7, r2, #30
   175b4:	f100 81b1 	bmi.w	1791a <ull_conn_llcp+0x99a>
	    !conn->llcp_phy.pause_tx &&
   175b8:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   175bc:	07d6      	lsls	r6, r2, #31
   175be:	f100 81ac 	bmi.w	1791a <ull_conn_llcp+0x99a>
		if (conn->tx_head == conn->tx_data) {
   175c2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   175c6:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   175c8:	bf04      	itt	eq
   175ca:	681a      	ldreq	r2, [r3, #0]
   175cc:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   175d0:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   175d4:	2a00      	cmp	r2, #0
   175d6:	f000 8551 	beq.w	1807c <ull_conn_llcp+0x10fc>
	tx->next = conn->tx_ctrl_last->next;
   175da:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   175de:	681a      	ldr	r2, [r3, #0]
   175e0:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   175e2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   175e4:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   175e6:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
	if (!tx->next) {
   175ea:	2b00      	cmp	r3, #0
   175ec:	f47f acdf 	bne.w	16fae <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   175f0:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   175f4:	e4db      	b.n	16fae <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   175f6:	f894 1125 	ldrb.w	r1, [r4, #293]	; 0x125
   175fa:	f894 7124 	ldrb.w	r7, [r4, #292]	; 0x124
   175fe:	42b9      	cmp	r1, r7
   17600:	d042      	beq.n	17688 <ull_conn_llcp+0x708>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   17602:	1bc9      	subs	r1, r1, r7
   17604:	07c9      	lsls	r1, r1, #31
   17606:	f57f acce 	bpl.w	16fa6 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   1760a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1760e:	f013 0701 	ands.w	r7, r3, #1
   17612:	f000 818d 	beq.w	17930 <ull_conn_llcp+0x9b0>
		rx = ll_pdu_rx_alloc();
   17616:	f7fc fa6f 	bl	13af8 <ll_pdu_rx_alloc>
		if (!rx) {
   1761a:	4607      	mov	r7, r0
   1761c:	b320      	cbz	r0, 17668 <ull_conn_llcp+0x6e8>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   1761e:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   17622:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17626:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   17628:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1762a:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1762c:	f043 0303 	orr.w	r3, r3, #3
   17630:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   17632:	2309      	movs	r3, #9
   17634:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   17636:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17638:	2303      	movs	r3, #3
   1763a:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   1763c:	4641      	mov	r1, r8
   1763e:	2208      	movs	r2, #8
   17640:	3020      	adds	r0, #32
   17642:	f00c fac5 	bl	23bd0 <memset>
		sys_put_le24(conn->llcp_feature.features_peer,
   17646:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	dst[0] = val;
   1764a:	f887 3020 	strb.w	r3, [r7, #32]
	dst[1] = val >> 8;
   1764e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   17652:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   17654:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	dst[2] = val >> 16;
   17658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
   1765c:	4639      	mov	r1, r7
		ll_rx_put(rx->hdr.link, rx);
   1765e:	6808      	ldr	r0, [r1, #0]
   17660:	f7fc fa1c 	bl	13a9c <ll_rx_put>
		ll_rx_sched();
   17664:	f7fc fa24 	bl	13ab0 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   17668:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1766c:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
}
   17670:	e491      	b.n	16f96 <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   17672:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17676:	2a00      	cmp	r2, #0
   17678:	f47f ad9c 	bne.w	171b4 <ull_conn_llcp+0x234>
			tx->next = conn->tx_head;
   1767c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1767e:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17682:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   17686:	e59d      	b.n	171c4 <ull_conn_llcp+0x244>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   17688:	f894 1131 	ldrb.w	r1, [r4, #305]	; 0x131
   1768c:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
   17690:	42b9      	cmp	r1, r7
   17692:	d02d      	beq.n	176f0 <ull_conn_llcp+0x770>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   17694:	1bc9      	subs	r1, r1, r7
   17696:	07c8      	lsls	r0, r1, #31
   17698:	f57f ac85 	bpl.w	16fa6 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   1769c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   176a0:	07d9      	lsls	r1, r3, #31
   176a2:	f140 8398 	bpl.w	17dd6 <ull_conn_llcp+0xe56>
	} else if (conn->llcp_version.rx) {
   176a6:	0799      	lsls	r1, r3, #30
   176a8:	f140 8387 	bpl.w	17dba <ull_conn_llcp+0xe3a>
		rx = ll_pdu_rx_alloc();
   176ac:	f7fc fa24 	bl	13af8 <ll_pdu_rx_alloc>
		if (!rx) {
   176b0:	4601      	mov	r1, r0
   176b2:	2800      	cmp	r0, #0
   176b4:	d0d8      	beq.n	17668 <ull_conn_llcp+0x6e8>
		conn->llcp_version.ack = conn->llcp_version.req;
   176b6:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   176ba:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		rx->hdr.handle = conn->lll.handle;
   176be:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   176c0:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   176c2:	2303      	movs	r3, #3
   176c4:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   176c6:	7f03      	ldrb	r3, [r0, #28]
   176c8:	f043 0303 	orr.w	r3, r3, #3
   176cc:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   176ce:	2306      	movs	r3, #6
   176d0:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   176d2:	230c      	movs	r3, #12
   176d4:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   176d6:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
   176da:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   176de:	f8b4 3134 	ldrh.w	r3, [r4, #308]	; 0x134
   176e2:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   176e6:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   176ea:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
   176ee:	e7b6      	b.n	1765e <ull_conn_llcp+0x6de>
		} else if (conn->llcp_conn_param.ack !=
   176f0:	f894 717d 	ldrb.w	r7, [r4, #381]	; 0x17d
   176f4:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   176f8:	428f      	cmp	r7, r1
   176fa:	f000 81f3 	beq.w	17ae4 <ull_conn_llcp+0xb64>
	conn_upd = conn_upd_curr;
   176fe:	4f44      	ldr	r7, [pc, #272]	; (17810 <ull_conn_llcp+0x890>)
   17700:	6839      	ldr	r1, [r7, #0]
	if (conn_upd && (conn_upd != conn)) {
   17702:	2900      	cmp	r1, #0
   17704:	f000 83c3 	beq.w	17e8e <ull_conn_llcp+0xf0e>
   17708:	428c      	cmp	r4, r1
   1770a:	f47f ac4c 	bne.w	16fa6 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   1770e:	f894 117e 	ldrb.w	r1, [r4, #382]	; 0x17e
   17712:	f001 0107 	and.w	r1, r1, #7
   17716:	2905      	cmp	r1, #5
   17718:	f200 8659 	bhi.w	183ce <ull_conn_llcp+0x144e>
   1771c:	f20f 0804 	addw	r8, pc, #4
   17720:	f858 f021 	ldr.w	pc, [r8, r1, lsl #2]
   17724:	00017815 	.word	0x00017815
   17728:	0001778d 	.word	0x0001778d
   1772c:	0001773d 	.word	0x0001773d
   17730:	00016f97 	.word	0x00016f97
   17734:	00016f97 	.word	0x00016f97
   17738:	00016f97 	.word	0x00016f97
	if (conn->llcp_enc.pause_tx) {
   1773c:	f01e 0f02 	tst.w	lr, #2
   17740:	f47f ac31 	bne.w	16fa6 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   17744:	f7fc f9d8 	bl	13af8 <ll_pdu_rx_alloc>
	if (!rx) {
   17748:	4601      	mov	r1, r0
   1774a:	2800      	cmp	r0, #0
   1774c:	d08c      	beq.n	17668 <ull_conn_llcp+0x6e8>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1774e:	f894 017e 	ldrb.w	r0, [r4, #382]	; 0x17e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17752:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   17754:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17756:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1775a:	f362 0002 	bfi	r0, r2, #0, #3
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1775e:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   17760:	f884 017e 	strb.w	r0, [r4, #382]	; 0x17e
	rx->hdr.handle = conn->lll.handle;
   17764:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17766:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17768:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1776a:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   1776c:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   17770:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   17772:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   17776:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   17778:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
   1777c:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1777e:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
   17782:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17784:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   17786:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17788:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
   1778a:	e768      	b.n	1765e <ull_conn_llcp+0x6de>
	if (conn->llcp_conn_param.status) {
   1778c:	f894 317f 	ldrb.w	r3, [r4, #383]	; 0x17f
   17790:	2b00      	cmp	r3, #0
   17792:	f040 8515 	bne.w	181c0 <ull_conn_llcp+0x1240>
	if (!conn->lll.role) {
   17796:	2a00      	cmp	r2, #0
   17798:	f2c0 8559 	blt.w	1824e <ull_conn_llcp+0x12ce>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1779c:	f894 117e 	ldrb.w	r1, [r4, #382]	; 0x17e
		conn->llcp_cu.win_offset_us = 0U;
   177a0:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   177a4:	2205      	movs	r2, #5
   177a6:	f362 0102 	bfi	r1, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
   177aa:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   177ae:	f884 117e 	strb.w	r1, [r4, #382]	; 0x17e
		conn->llcp_cu.win_size = 1U;
   177b2:	2001      	movs	r0, #1
   177b4:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
		if (conn->llcp_conn_param.preferred_periodicity) {
   177b8:	2a00      	cmp	r2, #0
   177ba:	f000 85c0 	beq.w	1833e <ull_conn_llcp+0x13be>
				((conn->llcp_conn_param.interval_min /
   177be:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   177c2:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
   177c6:	4403      	add	r3, r0
			conn->llcp_cu.interval =
   177c8:	fb13 f302 	smulbb	r3, r3, r2
   177cc:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   177ce:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   177d2:	f894 1112 	ldrb.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   177d6:	f8b4 0184 	ldrh.w	r0, [r4, #388]	; 0x184
   177da:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   177de:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   177e2:	00d2      	lsls	r2, r2, #3
   177e4:	f021 010f 	bic.w	r1, r1, #15
   177e8:	f042 0202 	orr.w	r2, r2, #2
   177ec:	430a      	orrs	r2, r1
		conn->llcp_cu.ack--;
   177ee:	f109 39ff 	add.w	r9, r9, #4294967295
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   177f2:	f8b4 1186 	ldrh.w	r1, [r4, #390]	; 0x186
   177f6:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
   177fa:	f8a4 1118 	strh.w	r1, [r4, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   177fe:	f884 2112 	strb.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.ack--;
   17802:	f884 9111 	strb.w	r9, [r4, #273]	; 0x111
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   17806:	f7ff bbd2 	b.w	16fae <ull_conn_llcp+0x2e>
   1780a:	bf00      	nop
   1780c:	2000e428 	.word	0x2000e428
   17810:	2000e3a4 	.word	0x2000e3a4
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17814:	48cd      	ldr	r0, [pc, #820]	; (17b4c <ull_conn_llcp+0xbcc>)
			event_counter = lll->event_counter +
   17816:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
   1781a:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1781e:	f7f8 fb33 	bl	fe88 <mem_acquire>
	if (!tx) {
   17822:	2800      	cmp	r0, #0
   17824:	f43f af20 	beq.w	17668 <ull_conn_llcp+0x6e8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17828:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   1782a:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1782c:	f043 0303 	orr.w	r3, r3, #3
   17830:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   17832:	2318      	movs	r3, #24
   17834:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   17836:	f8b4 1180 	ldrh.w	r1, [r4, #384]	; 0x180
   1783a:	8101      	strh	r1, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   1783c:	f8b4 1182 	ldrh.w	r1, [r4, #386]	; 0x182
   17840:	8141      	strh	r1, [r0, #10]
	p->preferred_periodicity = 0U;
   17842:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   17844:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
   17848:	8181      	strh	r1, [r0, #12]
			event_counter = lll->event_counter +
   1784a:	44c8      	add	r8, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1784c:	f8b4 1186 	ldrh.w	r1, [r4, #390]	; 0x186
	p->preferred_periodicity = 0U;
   17850:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   17852:	74c3      	strb	r3, [r0, #19]
   17854:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   17856:	f04f 33ff 	mov.w	r3, #4294967295
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1785a:	81c1      	strh	r1, [r0, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   1785c:	7543      	strb	r3, [r0, #21]
   1785e:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   17860:	75c3      	strb	r3, [r0, #23]
   17862:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   17864:	7643      	strb	r3, [r0, #25]
   17866:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   17868:	76c3      	strb	r3, [r0, #27]
   1786a:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   1786c:	7743      	strb	r3, [r0, #29]
   1786e:	7783      	strb	r3, [r0, #30]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17870:	210f      	movs	r1, #15
	conn->procedure_expire = conn->procedure_reload;
   17872:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17876:	71c1      	strb	r1, [r0, #7]
					lll->latency_prepare + lazy;
   17878:	44b0      	add	r8, r6
	conn->procedure_expire = conn->procedure_reload;
   1787a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   1787e:	f8a0 8011 	strh.w	r8, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   17882:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   17886:	2104      	movs	r1, #4
   17888:	f361 0302 	bfi	r3, r1, #0, #3
   1788c:	f884 317e 	strb.w	r3, [r4, #382]	; 0x17e
	    conn->tx_head &&
   17890:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17894:	2b00      	cmp	r3, #0
   17896:	f000 840c 	beq.w	180b2 <ull_conn_llcp+0x1132>
	    !conn->llcp_enc.pause_tx &&
   1789a:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1789e:	078a      	lsls	r2, r1, #30
   178a0:	f100 8407 	bmi.w	180b2 <ull_conn_llcp+0x1132>
	    !conn->llcp_phy.pause_tx &&
   178a4:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   178a8:	07cf      	lsls	r7, r1, #31
   178aa:	f100 8402 	bmi.w	180b2 <ull_conn_llcp+0x1132>
		if (conn->tx_head == conn->tx_data) {
   178ae:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   178b2:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   178b4:	bf04      	itt	eq
   178b6:	6819      	ldreq	r1, [r3, #0]
   178b8:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   178bc:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   178c0:	2900      	cmp	r1, #0
   178c2:	f000 8574 	beq.w	183ae <ull_conn_llcp+0x142e>
	tx->next = conn->tx_ctrl_last->next;
   178c6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   178ca:	6819      	ldr	r1, [r3, #0]
   178cc:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   178ce:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   178d0:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   178d4:	6803      	ldr	r3, [r0, #0]
   178d6:	2b00      	cmp	r3, #0
   178d8:	f47f aec6 	bne.w	17668 <ull_conn_llcp+0x6e8>
		conn->tx_data_last = tx;
   178dc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   178e0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   178e4:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   178e8:	f7ff bb55 	b.w	16f96 <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   178ec:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   178f0:	2b00      	cmp	r3, #0
   178f2:	f43f ad19 	beq.w	17328 <ull_conn_llcp+0x3a8>
			conn->slave.llcp_type = LLCP_NONE;
   178f6:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
   178fa:	e519      	b.n	17330 <ull_conn_llcp+0x3b0>
		conn->tx_data_last = tx;
   178fc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   17900:	e463      	b.n	171ca <ull_conn_llcp+0x24a>
		if (!conn->tx_ctrl) {
   17902:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17906:	2a00      	cmp	r2, #0
   17908:	f47f adab 	bne.w	17462 <ull_conn_llcp+0x4e2>
			tx->next = conn->tx_head;
   1790c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   17910:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17914:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   17918:	e5ae      	b.n	17478 <ull_conn_llcp+0x4f8>
		if (!conn->tx_ctrl) {
   1791a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1791e:	2a00      	cmp	r2, #0
   17920:	f47f ae5b 	bne.w	175da <ull_conn_llcp+0x65a>
			tx->next = conn->tx_head;
   17924:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   17926:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1792a:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
   1792e:	e65c      	b.n	175ea <ull_conn_llcp+0x66a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17930:	4886      	ldr	r0, [pc, #536]	; (17b4c <ull_conn_llcp+0xbcc>)
   17932:	f7f8 faa9 	bl	fe88 <mem_acquire>
	if (tx) {
   17936:	4680      	mov	r8, r0
   17938:	2800      	cmp	r0, #0
   1793a:	f43f ae95 	beq.w	17668 <ull_conn_llcp+0x6e8>
		conn->llcp_feature.ack--;
   1793e:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
   17942:	3b01      	subs	r3, #1
   17944:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		conn->llcp_feature.features_conn = LL_FEAT;
   17948:	4b81      	ldr	r3, [pc, #516]	; (17b50 <ull_conn_llcp+0xbd0>)
   1794a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   1794e:	2309      	movs	r3, #9
   17950:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   17952:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   17956:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17958:	7903      	ldrb	r3, [r0, #4]
   1795a:	f043 0303 	orr.w	r3, r3, #3
   1795e:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   17960:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   17964:	bfac      	ite	ge
   17966:	2308      	movge	r3, #8
   17968:	230e      	movlt	r3, #14
   1796a:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   1796c:	4639      	mov	r1, r7
   1796e:	4410      	add	r0, r2
   17970:	f00c f92e 	bl	23bd0 <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
   17974:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[0] = val;
   17978:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
   1797c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   17980:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   17982:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
   17986:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
   1798a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   1798e:	2b00      	cmp	r3, #0
   17990:	f000 80cf 	beq.w	17b32 <ull_conn_llcp+0xbb2>
	    !conn->llcp_enc.pause_tx &&
   17994:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17998:	0792      	lsls	r2, r2, #30
   1799a:	f100 80ca 	bmi.w	17b32 <ull_conn_llcp+0xbb2>
	    !conn->llcp_phy.pause_tx &&
   1799e:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   179a2:	07d7      	lsls	r7, r2, #31
   179a4:	f100 80c5 	bmi.w	17b32 <ull_conn_llcp+0xbb2>
		if (conn->tx_head == conn->tx_data) {
   179a8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   179ac:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   179ae:	bf04      	itt	eq
   179b0:	681a      	ldreq	r2, [r3, #0]
   179b2:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   179b6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   179ba:	2a00      	cmp	r2, #0
   179bc:	f000 8384 	beq.w	180c8 <ull_conn_llcp+0x1148>
	tx->next = conn->tx_ctrl_last->next;
   179c0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   179c4:	681a      	ldr	r2, [r3, #0]
   179c6:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   179ca:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   179ce:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   179d2:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   179d6:	2b00      	cmp	r3, #0
   179d8:	f000 8270 	beq.w	17ebc <ull_conn_llcp+0xf3c>
		conn->procedure_expire = conn->procedure_reload;
   179dc:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   179e0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   179e4:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
		conn->procedure_expire = conn->procedure_reload;
   179e8:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	break;
   179ec:	f7ff bad3 	b.w	16f96 <ull_conn_llcp+0x16>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   179f0:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   179f4:	463b      	mov	r3, r7
   179f6:	4642      	mov	r2, r8
   179f8:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   179fc:	f204 1069 	addw	r0, r4, #361	; 0x169
   17a00:	f004 fab4 	bl	1bf6c <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   17a04:	4639      	mov	r1, r7
   17a06:	2210      	movs	r2, #16
   17a08:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   17a0c:	f00c f8b5 	bl	23b7a <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   17a10:	2208      	movs	r2, #8
   17a12:	f104 0198 	add.w	r1, r4, #152	; 0x98
   17a16:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   17a1a:	f00c f8ae 	bl	23b7a <memcpy>
		lll->ccm_rx.direction = 0;
   17a1e:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
		lll->ccm_rx.counter = 0;
   17a22:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
		lll->ccm_rx.direction = 0;
   17a26:	f368 0300 	bfi	r3, r8, #0, #1
   17a2a:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
   17a2e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
		lll->ccm_rx.counter = 0;
   17a32:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
		lll->ccm_tx.direction = 1;
   17a36:	f043 0301 	orr.w	r3, r3, #1
   17a3a:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
   17a3e:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
   17a42:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
		lll->enc_rx = 1;
   17a46:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_tx.counter = 0;
   17a4a:	e9c4 882c 	strd	r8, r8, [r4, #176]	; 0xb0
		lll->ccm_rx.counter = 0;
   17a4e:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
   17a52:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   17a56:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   17a5a:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   17a5e:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
		lll->enc_rx = 1;
   17a62:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	if (!pdu_ctrl_tx) {
   17a66:	f1ba 0f00 	cmp.w	sl, #0
   17a6a:	f000 8242 	beq.w	17ef2 <ull_conn_llcp+0xf72>
	conn->lll.enc_tx = 1;
   17a6e:	b2db      	uxtb	r3, r3
   17a70:	f043 0310 	orr.w	r3, r3, #16
   17a74:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17a78:	f899 3004 	ldrb.w	r3, [r9, #4]
   17a7c:	f043 0303 	orr.w	r3, r3, #3
   17a80:	f889 3004 	strb.w	r3, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   17a84:	2301      	movs	r3, #1
   17a86:	f889 3005 	strb.w	r3, [r9, #5]
		if (!conn->tx_ctrl) {
   17a8a:	e9d4 0e6f 	ldrd	r0, lr, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   17a8e:	2306      	movs	r3, #6
   17a90:	f889 3007 	strb.w	r3, [r9, #7]
	if (
   17a94:	2800      	cmp	r0, #0
   17a96:	d03c      	beq.n	17b12 <ull_conn_llcp+0xb92>
	    !conn->llcp_enc.pause_tx &&
   17a98:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17a9c:	079b      	lsls	r3, r3, #30
   17a9e:	d438      	bmi.n	17b12 <ull_conn_llcp+0xb92>
	    !conn->llcp_phy.pause_tx &&
   17aa0:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   17aa4:	07df      	lsls	r7, r3, #31
   17aa6:	d434      	bmi.n	17b12 <ull_conn_llcp+0xb92>
		if (conn->tx_head == conn->tx_data) {
   17aa8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   17aac:	4283      	cmp	r3, r0
			conn->tx_data = conn->tx_data->next;
   17aae:	bf04      	itt	eq
   17ab0:	6803      	ldreq	r3, [r0, #0]
   17ab2:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17ab6:	f1be 0f00 	cmp.w	lr, #0
   17aba:	f000 830f 	beq.w	180dc <ull_conn_llcp+0x115c>
	tx->next = conn->tx_ctrl_last->next;
   17abe:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17ac2:	681a      	ldr	r2, [r3, #0]
   17ac4:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   17ac8:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   17acc:	f8d9 0000 	ldr.w	r0, [r9]
	conn->tx_ctrl_last = tx;
   17ad0:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17ad4:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17ad8:	2800      	cmp	r0, #0
   17ada:	f47f ad31 	bne.w	17540 <ull_conn_llcp+0x5c0>
		conn->tx_data_last = tx;
   17ade:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   17ae2:	e52d      	b.n	17540 <ull_conn_llcp+0x5c0>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   17ae4:	f894 11a5 	ldrb.w	r1, [r4, #421]	; 0x1a5
   17ae8:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   17aec:	4299      	cmp	r1, r3
   17aee:	d031      	beq.n	17b54 <ull_conn_llcp+0xbd4>
			event_len_prep(conn);
   17af0:	4620      	mov	r0, r4
   17af2:	f7fd f91b 	bl	14d2c <event_len_prep>
   17af6:	e5b7      	b.n	17668 <ull_conn_llcp+0x6e8>
		if (!conn->tx_ctrl) {
   17af8:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17afc:	2a00      	cmp	r2, #0
   17afe:	f47f abc1 	bne.w	17284 <ull_conn_llcp+0x304>
			tx->next = conn->tx_head;
   17b02:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   17b06:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17b0a:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   17b0e:	f7ff bbc4 	b.w	1729a <ull_conn_llcp+0x31a>
		if (!conn->tx_ctrl) {
   17b12:	f1be 0f00 	cmp.w	lr, #0
   17b16:	f000 81e5 	beq.w	17ee4 <ull_conn_llcp+0xf64>
   17b1a:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
	tx->next = conn->tx_ctrl_last->next;
   17b1e:	680b      	ldr	r3, [r1, #0]
   17b20:	f8c9 3000 	str.w	r3, [r9]
	conn->tx_ctrl_last->next = tx;
   17b24:	f8c1 9000 	str.w	r9, [r1]
	if (!tx->next) {
   17b28:	f8d9 0000 	ldr.w	r0, [r9]
	conn->tx_ctrl_last = tx;
   17b2c:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
}
   17b30:	e7d0      	b.n	17ad4 <ull_conn_llcp+0xb54>
		if (!conn->tx_ctrl) {
   17b32:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17b36:	2a00      	cmp	r2, #0
   17b38:	f47f af42 	bne.w	179c0 <ull_conn_llcp+0xa40>
			tx->next = conn->tx_head;
   17b3c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   17b40:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17b44:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   17b48:	e745      	b.n	179d6 <ull_conn_llcp+0xa56>
   17b4a:	bf00      	nop
   17b4c:	2000e428 	.word	0x2000e428
   17b50:	0001417f 	.word	0x0001417f
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   17b54:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   17b58:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   17b5c:	428b      	cmp	r3, r1
   17b5e:	f43f aa22 	beq.w	16fa6 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   17b62:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   17b66:	f003 0703 	and.w	r7, r3, #3
   17b6a:	2f03      	cmp	r7, #3
   17b6c:	f000 82d4 	beq.w	18118 <ull_conn_llcp+0x1198>
   17b70:	2f00      	cmp	r7, #0
   17b72:	f47f aa17 	bne.w	16fa4 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17b76:	48d7      	ldr	r0, [pc, #860]	; (17ed4 <ull_conn_llcp+0xf54>)
   17b78:	f7f8 f986 	bl	fe88 <mem_acquire>
		if (!tx) {
   17b7c:	2800      	cmp	r0, #0
   17b7e:	f43f ad73 	beq.w	17668 <ull_conn_llcp+0x6e8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   17b82:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		conn->lll.phy_flags = conn->llcp_phy.flags;
   17b86:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   17b8a:	2201      	movs	r2, #1
   17b8c:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   17b90:	f894 21b8 	ldrb.w	r2, [r4, #440]	; 0x1b8
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   17b94:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   17b98:	f3c3 0782 	ubfx	r7, r3, #2, #3
   17b9c:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   17ba0:	f894 7064 	ldrb.w	r7, [r4, #100]	; 0x64
   17ba4:	f3c1 0140 	ubfx	r1, r1, #1, #1
   17ba8:	f361 07c3 	bfi	r7, r1, #3, #1
		conn->phy_pref_rx = conn->llcp_phy.rx;
   17bac:	f3c3 1142 	ubfx	r1, r3, #5, #3
   17bb0:	f361 02c5 	bfi	r2, r1, #3, #3
   17bb4:	f884 21b8 	strb.w	r2, [r4, #440]	; 0x1b8
		conn->phy_pref_tx = conn->llcp_phy.tx;
   17bb8:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   17bbc:	2303      	movs	r3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   17bbe:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
		pdu_ctrl_tx->len =
   17bc2:	7143      	strb	r3, [r0, #5]
		pr->tx_phys = conn->llcp_phy.tx;
   17bc4:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   17bc6:	2316      	movs	r3, #22
		pr->rx_phys = conn->llcp_phy.rx;
   17bc8:	7241      	strb	r1, [r0, #9]
	    conn->tx_head &&
   17bca:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   17bce:	71c3      	strb	r3, [r0, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17bd0:	7903      	ldrb	r3, [r0, #4]
   17bd2:	f043 0303 	orr.w	r3, r3, #3
   17bd6:	7103      	strb	r3, [r0, #4]
	if (
   17bd8:	2a00      	cmp	r2, #0
   17bda:	f000 8292 	beq.w	18102 <ull_conn_llcp+0x1182>
	    !conn->llcp_enc.pause_tx &&
   17bde:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17be2:	0799      	lsls	r1, r3, #30
   17be4:	f100 828d 	bmi.w	18102 <ull_conn_llcp+0x1182>
	    !conn->llcp_phy.pause_tx &&
   17be8:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   17bec:	07db      	lsls	r3, r3, #31
   17bee:	f100 8288 	bmi.w	18102 <ull_conn_llcp+0x1182>
		if (conn->tx_head == conn->tx_data) {
   17bf2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   17bf6:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   17bf8:	bf04      	itt	eq
   17bfa:	6813      	ldreq	r3, [r2, #0]
   17bfc:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17c00:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   17c04:	2b00      	cmp	r3, #0
   17c06:	f000 83cc 	beq.w	183a2 <ull_conn_llcp+0x1422>
	tx->next = conn->tx_ctrl_last->next;
   17c0a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17c0e:	681a      	ldr	r2, [r3, #0]
   17c10:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   17c12:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   17c14:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17c18:	6803      	ldr	r3, [r0, #0]
   17c1a:	2b00      	cmp	r3, #0
   17c1c:	f47f aede 	bne.w	179dc <ull_conn_llcp+0xa5c>
		conn->tx_data_last = tx;
   17c20:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   17c24:	e6da      	b.n	179dc <ull_conn_llcp+0xa5c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   17c26:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   17c2a:	463b      	mov	r3, r7
   17c2c:	4642      	mov	r2, r8
   17c2e:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   17c32:	f204 1069 	addw	r0, r4, #361	; 0x169
   17c36:	f004 f999 	bl	1bf6c <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   17c3a:	4639      	mov	r1, r7
   17c3c:	2210      	movs	r2, #16
   17c3e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   17c42:	f00b ff9a 	bl	23b7a <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   17c46:	2208      	movs	r2, #8
   17c48:	f104 0198 	add.w	r1, r4, #152	; 0x98
   17c4c:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   17c50:	f00b ff93 	bl	23b7a <memcpy>
			lll->ccm_rx.direction = 1U;
   17c54:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
			lll->ccm_rx.counter = 0U;
   17c58:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
   17c5c:	f043 0301 	orr.w	r3, r3, #1
   17c60:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
   17c64:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
			lll->ccm_rx.counter = 0U;
   17c68:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
			lll->ccm_tx.direction = 0U;
   17c6c:	f368 0300 	bfi	r3, r8, #0, #1
   17c70:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
   17c74:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
   17c78:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
			lll->enc_rx = 1U;
   17c7c:	f043 0308 	orr.w	r3, r3, #8
   17c80:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17c84:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   17c88:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17c8c:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   17c90:	e9c4 882c 	strd	r8, r8, [r4, #176]	; 0xb0
			lll->ccm_rx.counter = 0U;
   17c94:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   17c98:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   17c9c:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   17ca0:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17ca4:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17ca8:	2301      	movs	r3, #1
   17caa:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   17cae:	2305      	movs	r3, #5
   17cb0:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   17cb4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17cb8:	2b00      	cmp	r3, #0
   17cba:	d066      	beq.n	17d8a <ull_conn_llcp+0xe0a>
	    !conn->llcp_enc.pause_tx &&
   17cbc:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17cc0:	0792      	lsls	r2, r2, #30
   17cc2:	d462      	bmi.n	17d8a <ull_conn_llcp+0xe0a>
	    !conn->llcp_phy.pause_tx &&
   17cc4:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17cc8:	07d7      	lsls	r7, r2, #31
   17cca:	d45e      	bmi.n	17d8a <ull_conn_llcp+0xe0a>
		if (conn->tx_head == conn->tx_data) {
   17ccc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17cd0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17cd2:	bf04      	itt	eq
   17cd4:	681a      	ldreq	r2, [r3, #0]
   17cd6:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17cda:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17cde:	2a00      	cmp	r2, #0
   17ce0:	f000 825c 	beq.w	1819c <ull_conn_llcp+0x121c>
	tx->next = conn->tx_ctrl_last->next;
   17ce4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17ce8:	681a      	ldr	r2, [r3, #0]
   17cea:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   17cee:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   17cf2:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17cf6:	f8d9 3000 	ldr.w	r3, [r9]
   17cfa:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17cfe:	2b00      	cmp	r3, #0
   17d00:	f47f ac1e 	bne.w	17540 <ull_conn_llcp+0x5c0>
   17d04:	e6eb      	b.n	17ade <ull_conn_llcp+0xb5e>
	if (!pdu_ctrl_tx) {
   17d06:	f1ba 0f00 	cmp.w	sl, #0
   17d0a:	f000 8160 	beq.w	17fce <ull_conn_llcp+0x104e>
	conn->lll.enc_tx = 1;
   17d0e:	f043 0310 	orr.w	r3, r3, #16
   17d12:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17d16:	7903      	ldrb	r3, [r0, #4]
   17d18:	f043 0303 	orr.w	r3, r3, #3
   17d1c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   17d1e:	2301      	movs	r3, #1
   17d20:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   17d22:	e9d4 2c6f 	ldrd	r2, ip, [r4, #444]	; 0x1bc
   17d26:	2306      	movs	r3, #6
   17d28:	71c3      	strb	r3, [r0, #7]
	if (
   17d2a:	2a00      	cmp	r2, #0
   17d2c:	f000 8098 	beq.w	17e60 <ull_conn_llcp+0xee0>
	    !conn->llcp_enc.pause_tx &&
   17d30:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17d34:	079f      	lsls	r7, r3, #30
   17d36:	f100 8093 	bmi.w	17e60 <ull_conn_llcp+0xee0>
	    !conn->llcp_phy.pause_tx &&
   17d3a:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   17d3e:	07d8      	lsls	r0, r3, #31
   17d40:	f100 808e 	bmi.w	17e60 <ull_conn_llcp+0xee0>
		if (conn->tx_head == conn->tx_data) {
   17d44:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   17d48:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17d4a:	bf04      	itt	eq
   17d4c:	6813      	ldreq	r3, [r2, #0]
   17d4e:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17d52:	f1bc 0f00 	cmp.w	ip, #0
   17d56:	f000 8229 	beq.w	181ac <ull_conn_llcp+0x122c>
	tx->next = conn->tx_ctrl_last->next;
   17d5a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17d5e:	681a      	ldr	r2, [r3, #0]
   17d60:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   17d64:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   17d68:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17d6c:	f8d9 3000 	ldr.w	r3, [r9]
   17d70:	2b00      	cmp	r3, #0
   17d72:	f000 8121 	beq.w	17fb8 <ull_conn_llcp+0x1038>
		conn->llcp_enc.pause_rx = 0U;
   17d76:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   17d7a:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17d7e:	f023 0303 	bic.w	r3, r3, #3
   17d82:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
   17d86:	f7ff bbdb 	b.w	17540 <ull_conn_llcp+0x5c0>
		if (!conn->tx_ctrl) {
   17d8a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17d8e:	2a00      	cmp	r2, #0
   17d90:	d1a8      	bne.n	17ce4 <ull_conn_llcp+0xd64>
			tx->next = conn->tx_head;
   17d92:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   17d96:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17d9a:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   17d9e:	e7aa      	b.n	17cf6 <ull_conn_llcp+0xd76>
		if (!conn->tx_ctrl) {
   17da0:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17da4:	2a00      	cmp	r2, #0
   17da6:	f47f abbd 	bne.w	17524 <ull_conn_llcp+0x5a4>
			tx->next = conn->tx_head;
   17daa:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   17dae:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17db2:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   17db6:	f7ff bbbe 	b.w	17536 <ull_conn_llcp+0x5b6>
		LL_ASSERT(0);
   17dba:	4a47      	ldr	r2, [pc, #284]	; (17ed8 <ull_conn_llcp+0xf58>)
   17dbc:	4947      	ldr	r1, [pc, #284]	; (17edc <ull_conn_llcp+0xf5c>)
   17dbe:	f640 33f4 	movw	r3, #3060	; 0xbf4
		LL_ASSERT(0);
   17dc2:	4847      	ldr	r0, [pc, #284]	; (17ee0 <ull_conn_llcp+0xf60>)
   17dc4:	f009 fa66 	bl	21294 <printk>
   17dc8:	4040      	eors	r0, r0
   17dca:	f380 8811 	msr	BASEPRI, r0
   17dce:	f04f 0003 	mov.w	r0, #3
   17dd2:	df02      	svc	2
		break;
   17dd4:	e448      	b.n	17668 <ull_conn_llcp+0x6e8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17dd6:	483f      	ldr	r0, [pc, #252]	; (17ed4 <ull_conn_llcp+0xf54>)
   17dd8:	f7f8 f856 	bl	fe88 <mem_acquire>
		if (tx) {
   17ddc:	2800      	cmp	r0, #0
   17dde:	f43f ac43 	beq.w	17668 <ull_conn_llcp+0x6e8>
			conn->llcp_version.ack--;
   17de2:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
   17de6:	3b01      	subs	r3, #1
   17de8:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
			conn->llcp_version.tx = 1U;
   17dec:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   17df0:	f043 0301 	orr.w	r3, r3, #1
   17df4:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   17df8:	7903      	ldrb	r3, [r0, #4]
   17dfa:	f043 0303 	orr.w	r3, r3, #3
   17dfe:	7103      	strb	r3, [r0, #4]
			pdu->len =
   17e00:	2306      	movs	r3, #6
   17e02:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   17e04:	230c      	movs	r3, #12
   17e06:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   17e08:	230b      	movs	r3, #11
   17e0a:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   17e0c:	f06f 030e 	mvn.w	r3, #14
   17e10:	7243      	strb	r3, [r0, #9]
   17e12:	2305      	movs	r3, #5
   17e14:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   17e16:	f04f 33ff 	mov.w	r3, #4294967295
   17e1a:	72c3      	strb	r3, [r0, #11]
   17e1c:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   17e1e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17e22:	2b00      	cmp	r3, #0
   17e24:	f000 80b8 	beq.w	17f98 <ull_conn_llcp+0x1018>
	    !conn->llcp_enc.pause_tx &&
   17e28:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17e2c:	0792      	lsls	r2, r2, #30
   17e2e:	f100 80b3 	bmi.w	17f98 <ull_conn_llcp+0x1018>
	    !conn->llcp_phy.pause_tx &&
   17e32:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17e36:	07d7      	lsls	r7, r2, #31
   17e38:	f100 80ae 	bmi.w	17f98 <ull_conn_llcp+0x1018>
		if (conn->tx_head == conn->tx_data) {
   17e3c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17e40:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17e42:	bf04      	itt	eq
   17e44:	681a      	ldreq	r2, [r3, #0]
   17e46:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17e4a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17e4e:	2a00      	cmp	r2, #0
   17e50:	f47f aedb 	bne.w	17c0a <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head->next;
   17e54:	681a      	ldr	r2, [r3, #0]
   17e56:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   17e58:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   17e5a:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   17e5e:	e6db      	b.n	17c18 <ull_conn_llcp+0xc98>
		if (!conn->tx_ctrl) {
   17e60:	f1bc 0f00 	cmp.w	ip, #0
   17e64:	f47f af79 	bne.w	17d5a <ull_conn_llcp+0xdda>
			tx->next = conn->tx_head;
   17e68:	f8c9 2000 	str.w	r2, [r9]
				conn->tx_ctrl = tx;
   17e6c:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17e70:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   17e74:	e77a      	b.n	17d6c <ull_conn_llcp+0xdec>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   17e76:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   17e78:	f889 8008 	strb.w	r8, [r9, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   17e7c:	f889 3007 	strb.w	r3, [r9, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   17e80:	2702      	movs	r7, #2
   17e82:	f7ff bb2f 	b.w	174e4 <ull_conn_llcp+0x564>
		conn->tx_data_last = tx;
   17e86:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   17e8a:	f7ff ba09 	b.w	172a0 <ull_conn_llcp+0x320>
	switch (conn->llcp_conn_param.state) {
   17e8e:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   17e92:	f003 0307 	and.w	r3, r3, #7
   17e96:	2b05      	cmp	r3, #5
   17e98:	f200 8299 	bhi.w	183ce <ull_conn_llcp+0x144e>
   17e9c:	a101      	add	r1, pc, #4	; (adr r1, 17ea4 <ull_conn_llcp+0xf24>)
   17e9e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17ea2:	bf00      	nop
   17ea4:	00017815 	.word	0x00017815
   17ea8:	0001778d 	.word	0x0001778d
   17eac:	0001773d 	.word	0x0001773d
   17eb0:	00016fa7 	.word	0x00016fa7
   17eb4:	00016fa7 	.word	0x00016fa7
   17eb8:	00016fa7 	.word	0x00016fa7
		conn->tx_data_last = tx;
   17ebc:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
		conn->procedure_expire = conn->procedure_reload;
   17ec0:	e58c      	b.n	179dc <ull_conn_llcp+0xa5c>
			tx->next = conn->tx_head->next;
   17ec2:	681a      	ldr	r2, [r3, #0]
   17ec4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   17ec6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   17ec8:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   17eca:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   17ece:	f7ff b979 	b.w	171c4 <ull_conn_llcp+0x244>
   17ed2:	bf00      	nop
   17ed4:	2000e428 	.word	0x2000e428
   17ed8:	00027f70 	.word	0x00027f70
   17edc:	00027b4c 	.word	0x00027b4c
   17ee0:	00027ab4 	.word	0x00027ab4
			tx->next = conn->tx_head;
   17ee4:	f8c9 0000 	str.w	r0, [r9]
				conn->tx_ctrl = tx;
   17ee8:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17eec:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   17ef0:	e5f0      	b.n	17ad4 <ull_conn_llcp+0xb54>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17ef2:	48b2      	ldr	r0, [pc, #712]	; (181bc <ull_conn_llcp+0x123c>)
   17ef4:	f7f7 ffc8 	bl	fe88 <mem_acquire>
		if (!tx) {
   17ef8:	4603      	mov	r3, r0
   17efa:	2800      	cmp	r0, #0
   17efc:	f000 8241 	beq.w	18382 <ull_conn_llcp+0x1402>
	conn->lll.enc_tx = 1;
   17f00:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
   17f04:	f042 0210 	orr.w	r2, r2, #16
   17f08:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   17f0c:	2201      	movs	r2, #1
   17f0e:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17f10:	7902      	ldrb	r2, [r0, #4]
   17f12:	f042 0203 	orr.w	r2, r2, #3
   17f16:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   17f18:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   17f1c:	2106      	movs	r1, #6
   17f1e:	71c1      	strb	r1, [r0, #7]
	    conn->tx_head &&
   17f20:	4610      	mov	r0, r2
	if (
   17f22:	b302      	cbz	r2, 17f66 <ull_conn_llcp+0xfe6>
	    !conn->llcp_enc.pause_tx &&
   17f24:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17f28:	078f      	lsls	r7, r1, #30
   17f2a:	d41c      	bmi.n	17f66 <ull_conn_llcp+0xfe6>
	    !conn->llcp_phy.pause_tx &&
   17f2c:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   17f30:	07c9      	lsls	r1, r1, #31
   17f32:	d418      	bmi.n	17f66 <ull_conn_llcp+0xfe6>
		if (conn->tx_head == conn->tx_data) {
   17f34:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17f38:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
		if (conn->tx_head == conn->tx_data) {
   17f3c:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   17f3e:	bf04      	itt	eq
   17f40:	6811      	ldreq	r1, [r2, #0]
   17f42:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17f46:	f1bc 0f00 	cmp.w	ip, #0
   17f4a:	f000 8179 	beq.w	18240 <ull_conn_llcp+0x12c0>
	tx->next = conn->tx_ctrl_last->next;
   17f4e:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   17f52:	6808      	ldr	r0, [r1, #0]
   17f54:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   17f56:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   17f58:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17f5c:	6819      	ldr	r1, [r3, #0]
   17f5e:	b331      	cbz	r1, 17fae <ull_conn_llcp+0x102e>
	    conn->tx_head &&
   17f60:	4610      	mov	r0, r2
		if (!conn->tx_ctrl) {
   17f62:	46e6      	mov	lr, ip
   17f64:	e598      	b.n	17a98 <ull_conn_llcp+0xb18>
		if (!conn->tx_ctrl) {
   17f66:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
   17f6a:	46e6      	mov	lr, ip
   17f6c:	f1bc 0f00 	cmp.w	ip, #0
   17f70:	d025      	beq.n	17fbe <ull_conn_llcp+0x103e>
	tx->next = conn->tx_ctrl_last->next;
   17f72:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   17f76:	680f      	ldr	r7, [r1, #0]
   17f78:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   17f7a:	600b      	str	r3, [r1, #0]
	if (!tx->next) {
   17f7c:	681f      	ldr	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   17f7e:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
   17f82:	4619      	mov	r1, r3
	if (!tx->next) {
   17f84:	b19f      	cbz	r7, 17fae <ull_conn_llcp+0x102e>
	if (
   17f86:	2a00      	cmp	r2, #0
   17f88:	f43f adc9 	beq.w	17b1e <ull_conn_llcp+0xb9e>
	    !conn->llcp_enc.pause_tx &&
   17f8c:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17f90:	079b      	lsls	r3, r3, #30
   17f92:	f57f ad85 	bpl.w	17aa0 <ull_conn_llcp+0xb20>
   17f96:	e5c2      	b.n	17b1e <ull_conn_llcp+0xb9e>
		if (!conn->tx_ctrl) {
   17f98:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17f9c:	2a00      	cmp	r2, #0
   17f9e:	f47f ae34 	bne.w	17c0a <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head;
   17fa2:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   17fa4:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17fa8:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   17fac:	e634      	b.n	17c18 <ull_conn_llcp+0xc98>
		conn->tx_data_last = tx;
   17fae:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
	    conn->tx_head &&
   17fb2:	4610      	mov	r0, r2
		if (!conn->tx_ctrl) {
   17fb4:	46e6      	mov	lr, ip
   17fb6:	e56d      	b.n	17a94 <ull_conn_llcp+0xb14>
		conn->tx_data_last = tx;
   17fb8:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   17fbc:	e6db      	b.n	17d76 <ull_conn_llcp+0xdf6>
			tx->next = conn->tx_head;
   17fbe:	601a      	str	r2, [r3, #0]
			conn->tx_head = tx;
   17fc0:	469c      	mov	ip, r3
				conn->tx_ctrl = tx;
   17fc2:	e9c4 336f 	strd	r3, r3, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17fc6:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
   17fca:	461a      	mov	r2, r3
   17fcc:	e7c6      	b.n	17f5c <ull_conn_llcp+0xfdc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17fce:	487b      	ldr	r0, [pc, #492]	; (181bc <ull_conn_llcp+0x123c>)
   17fd0:	f7f7 ff5a 	bl	fe88 <mem_acquire>
		if (!tx) {
   17fd4:	4601      	mov	r1, r0
   17fd6:	2800      	cmp	r0, #0
   17fd8:	f000 81e0 	beq.w	1839c <ull_conn_llcp+0x141c>
	conn->lll.enc_tx = 1;
   17fdc:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   17fe0:	f043 0310 	orr.w	r3, r3, #16
   17fe4:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   17fe8:	2301      	movs	r3, #1
   17fea:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17fec:	7903      	ldrb	r3, [r0, #4]
	    conn->tx_head &&
   17fee:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17ff2:	f043 0303 	orr.w	r3, r3, #3
   17ff6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   17ff8:	2306      	movs	r3, #6
   17ffa:	71c3      	strb	r3, [r0, #7]
	if (
   17ffc:	b312      	cbz	r2, 18044 <ull_conn_llcp+0x10c4>
	    !conn->llcp_enc.pause_tx &&
   17ffe:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18002:	0798      	lsls	r0, r3, #30
   18004:	d41e      	bmi.n	18044 <ull_conn_llcp+0x10c4>
	    !conn->llcp_phy.pause_tx &&
   18006:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1800a:	07db      	lsls	r3, r3, #31
   1800c:	d41a      	bmi.n	18044 <ull_conn_llcp+0x10c4>
		if (conn->tx_head == conn->tx_data) {
   1800e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18012:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
		if (conn->tx_head == conn->tx_data) {
   18016:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   18018:	bf04      	itt	eq
   1801a:	681b      	ldreq	r3, [r3, #0]
   1801c:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18020:	f1bc 0f00 	cmp.w	ip, #0
   18024:	f000 8184 	beq.w	18330 <ull_conn_llcp+0x13b0>
	tx->next = conn->tx_ctrl_last->next;
   18028:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
   1802c:	6803      	ldr	r3, [r0, #0]
   1802e:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   18030:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   18032:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18036:	680b      	ldr	r3, [r1, #0]
   18038:	2b00      	cmp	r3, #0
   1803a:	f47f ae79 	bne.w	17d30 <ull_conn_llcp+0xdb0>
		conn->tx_data_last = tx;
   1803e:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   18042:	e672      	b.n	17d2a <ull_conn_llcp+0xdaa>
		if (!conn->tx_ctrl) {
   18044:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
   18048:	f1bc 0f00 	cmp.w	ip, #0
   1804c:	d029      	beq.n	180a2 <ull_conn_llcp+0x1122>
	tx->next = conn->tx_ctrl_last->next;
   1804e:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
   18052:	6803      	ldr	r3, [r0, #0]
   18054:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   18056:	6001      	str	r1, [r0, #0]
	if (!tx->next) {
   18058:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   1805a:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
	if (!tx->next) {
   1805e:	2b00      	cmp	r3, #0
   18060:	f47f ae63 	bne.w	17d2a <ull_conn_llcp+0xdaa>
   18064:	e7eb      	b.n	1803e <ull_conn_llcp+0x10be>
			tx->next = conn->tx_head->next;
   18066:	681a      	ldr	r2, [r3, #0]
   18068:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1806c:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   18070:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   18074:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   18078:	f7ff b9fe 	b.w	17478 <ull_conn_llcp+0x4f8>
			tx->next = conn->tx_head->next;
   1807c:	681a      	ldr	r2, [r3, #0]
   1807e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   18080:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   18082:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   18084:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
   18088:	f7ff baaf 	b.w	175ea <ull_conn_llcp+0x66a>
			tx->next = conn->tx_head->next;
   1808c:	681a      	ldr	r2, [r3, #0]
   1808e:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   18092:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   18096:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   1809a:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   1809e:	f7ff b8fc 	b.w	1729a <ull_conn_llcp+0x31a>
			tx->next = conn->tx_head;
   180a2:	600a      	str	r2, [r1, #0]
			conn->tx_head = tx;
   180a4:	468c      	mov	ip, r1
				conn->tx_ctrl = tx;
   180a6:	e9c4 116f 	strd	r1, r1, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   180aa:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
   180ae:	460a      	mov	r2, r1
   180b0:	e7c1      	b.n	18036 <ull_conn_llcp+0x10b6>
		if (!conn->tx_ctrl) {
   180b2:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   180b6:	2900      	cmp	r1, #0
   180b8:	f47f ac05 	bne.w	178c6 <ull_conn_llcp+0x946>
			tx->next = conn->tx_head;
   180bc:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   180be:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   180c2:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   180c6:	e405      	b.n	178d4 <ull_conn_llcp+0x954>
			tx->next = conn->tx_head->next;
   180c8:	681a      	ldr	r2, [r3, #0]
   180ca:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   180ce:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   180d2:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   180d6:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   180da:	e47c      	b.n	179d6 <ull_conn_llcp+0xa56>
			tx->next = conn->tx_head->next;
   180dc:	6803      	ldr	r3, [r0, #0]
   180de:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   180e2:	f8c0 9000 	str.w	r9, [r0]
	if (!tx->next) {
   180e6:	f8d9 0000 	ldr.w	r0, [r9]
				conn->tx_ctrl_last = tx;
   180ea:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   180ee:	e4f1      	b.n	17ad4 <ull_conn_llcp+0xb54>
			tx->next = conn->tx_head->next;
   180f0:	681a      	ldr	r2, [r3, #0]
   180f2:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   180f6:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   180fa:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   180fe:	f7ff ba1a 	b.w	17536 <ull_conn_llcp+0x5b6>
		if (!conn->tx_ctrl) {
   18102:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   18106:	2b00      	cmp	r3, #0
   18108:	f47f ad7f 	bne.w	17c0a <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head;
   1810c:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1810e:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18112:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18116:	e57f      	b.n	17c18 <ull_conn_llcp+0xc98>
		if (conn->llcp_phy.tx & PHY_2M) {
   18118:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1811a:	f884 11b5 	strb.w	r1, [r4, #437]	; 0x1b5
		if (conn->llcp_phy.tx & PHY_2M) {
   1811e:	f3c3 0282 	ubfx	r2, r3, #2, #3
   18122:	f140 8118 	bpl.w	18356 <ull_conn_llcp+0x13d6>
			conn->llcp_phy.tx = PHY_2M;
   18126:	2202      	movs	r2, #2
   18128:	f362 0384 	bfi	r3, r2, #2, #3
   1812c:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		if (conn->llcp_phy.rx & PHY_2M) {
   18130:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   18134:	065f      	lsls	r7, r3, #25
   18136:	ea4f 1253 	mov.w	r2, r3, lsr #5
   1813a:	f140 8104 	bpl.w	18346 <ull_conn_llcp+0x13c6>
			conn->llcp_phy.rx = PHY_2M;
   1813e:	2202      	movs	r2, #2
   18140:	f362 1347 	bfi	r3, r2, #5, #3
   18144:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		conn->llcp_ack -= 2U;
   18148:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1814a:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
   1814e:	f894 7064 	ldrb.w	r7, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   18152:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp_ack -= 2U;
   18156:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1815a:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1815e:	f3c2 0182 	ubfx	r1, r2, #2, #3
   18162:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   18166:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1816a:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   1816e:	428f      	cmp	r7, r1
   18170:	bf08      	it	eq
   18172:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   18174:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   18176:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   1817a:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1817e:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   18182:	bf08      	it	eq
   18184:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   18186:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   1818a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   1818e:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   18190:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
   18194:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   18198:	f7fe bf59 	b.w	1704e <ull_conn_llcp+0xce>
			tx->next = conn->tx_head->next;
   1819c:	681a      	ldr	r2, [r3, #0]
   1819e:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   181a2:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   181a6:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   181aa:	e5a4      	b.n	17cf6 <ull_conn_llcp+0xd76>
			tx->next = conn->tx_head->next;
   181ac:	6813      	ldr	r3, [r2, #0]
   181ae:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   181b2:	f8c2 9000 	str.w	r9, [r2]
				conn->tx_ctrl_last = tx;
   181b6:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   181ba:	e5d7      	b.n	17d6c <ull_conn_llcp+0xdec>
   181bc:	2000e428 	.word	0x2000e428
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   181c0:	4885      	ldr	r0, [pc, #532]	; (183d8 <ull_conn_llcp+0x1458>)
   181c2:	f7f7 fe61 	bl	fe88 <mem_acquire>
		if (!tx) {
   181c6:	2800      	cmp	r0, #0
   181c8:	f43f aa4e 	beq.w	17668 <ull_conn_llcp+0x6e8>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   181cc:	7903      	ldrb	r3, [r0, #4]
   181ce:	f043 0303 	orr.w	r3, r3, #3
   181d2:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   181d4:	2311      	movs	r3, #17
   181d6:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   181d8:	2303      	movs	r3, #3
   181da:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   181dc:	230f      	movs	r3, #15
   181de:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   181e0:	f894 317f 	ldrb.w	r3, [r4, #383]	; 0x17f
   181e4:	7243      	strb	r3, [r0, #9]
	    conn->tx_head &&
   181e6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   181ea:	2b00      	cmp	r3, #0
   181ec:	f000 8095 	beq.w	1831a <ull_conn_llcp+0x139a>
	    !conn->llcp_enc.pause_tx &&
   181f0:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   181f4:	0789      	lsls	r1, r1, #30
   181f6:	f100 8090 	bmi.w	1831a <ull_conn_llcp+0x139a>
	    !conn->llcp_phy.pause_tx &&
   181fa:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   181fe:	07ca      	lsls	r2, r1, #31
   18200:	f100 808b 	bmi.w	1831a <ull_conn_llcp+0x139a>
		if (conn->tx_head == conn->tx_data) {
   18204:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   18208:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   1820a:	bf04      	itt	eq
   1820c:	6819      	ldreq	r1, [r3, #0]
   1820e:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18212:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18216:	2900      	cmp	r1, #0
   18218:	f000 80a7 	beq.w	1836a <ull_conn_llcp+0x13ea>
	tx->next = conn->tx_ctrl_last->next;
   1821c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   18220:	6819      	ldr	r1, [r3, #0]
   18222:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18224:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   18226:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   1822a:	6803      	ldr	r3, [r0, #0]
   1822c:	2b00      	cmp	r3, #0
   1822e:	d067      	beq.n	18300 <ull_conn_llcp+0x1380>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   18230:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   18234:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   18238:	2300      	movs	r3, #0
   1823a:	603b      	str	r3, [r7, #0]
   1823c:	f7ff ba14 	b.w	17668 <ull_conn_llcp+0x6e8>
			tx->next = conn->tx_head->next;
   18240:	6811      	ldr	r1, [r2, #0]
   18242:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   18244:	469c      	mov	ip, r3
   18246:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   18248:	e9c4 3370 	strd	r3, r3, [r4, #448]	; 0x1c0
   1824c:	e686      	b.n	17f5c <ull_conn_llcp+0xfdc>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1824e:	4862      	ldr	r0, [pc, #392]	; (183d8 <ull_conn_llcp+0x1458>)
   18250:	f7f7 fe1a 	bl	fe88 <mem_acquire>
	if (!tx) {
   18254:	2800      	cmp	r0, #0
   18256:	f43f aa07 	beq.w	17668 <ull_conn_llcp+0x6e8>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1825a:	7902      	ldrb	r2, [r0, #4]
   1825c:	f042 0203 	orr.w	r2, r2, #3
   18260:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   18262:	2218      	movs	r2, #24
   18264:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   18266:	f8b4 2180 	ldrh.w	r2, [r4, #384]	; 0x180
   1826a:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   1826c:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
   18270:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   18272:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
   18276:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   18278:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   1827c:	81c2      	strh	r2, [r0, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   1827e:	2210      	movs	r2, #16
   18280:	71c2      	strb	r2, [r0, #7]
	rsp->preferred_periodicity =
   18282:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
   18286:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   18288:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
	    conn->tx_head &&
   1828c:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	rsp->reference_conn_event_count =
   18290:	f8a0 1011 	strh.w	r1, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   18294:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   18298:	f8a0 1013 	strh.w	r1, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   1829c:	f8b4 118e 	ldrh.w	r1, [r4, #398]	; 0x18e
   182a0:	f8a0 1015 	strh.w	r1, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   182a4:	f8b4 1190 	ldrh.w	r1, [r4, #400]	; 0x190
   182a8:	f8a0 1017 	strh.w	r1, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   182ac:	f8b4 1192 	ldrh.w	r1, [r4, #402]	; 0x192
   182b0:	f8a0 1019 	strh.w	r1, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   182b4:	f8b4 1194 	ldrh.w	r1, [r4, #404]	; 0x194
   182b8:	f8a0 101b 	strh.w	r1, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   182bc:	f8b4 1196 	ldrh.w	r1, [r4, #406]	; 0x196
   182c0:	f8a0 101d 	strh.w	r1, [r0, #29]
	if (
   182c4:	b1fa      	cbz	r2, 18306 <ull_conn_llcp+0x1386>
	    !conn->llcp_enc.pause_tx &&
   182c6:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   182ca:	0789      	lsls	r1, r1, #30
   182cc:	d41b      	bmi.n	18306 <ull_conn_llcp+0x1386>
	    !conn->llcp_phy.pause_tx &&
   182ce:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   182d2:	07cb      	lsls	r3, r1, #31
   182d4:	d417      	bmi.n	18306 <ull_conn_llcp+0x1386>
		if (conn->tx_head == conn->tx_data) {
   182d6:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   182da:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   182dc:	bf04      	itt	eq
   182de:	6811      	ldreq	r1, [r2, #0]
   182e0:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   182e4:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   182e8:	2900      	cmp	r1, #0
   182ea:	d044      	beq.n	18376 <ull_conn_llcp+0x13f6>
	tx->next = conn->tx_ctrl_last->next;
   182ec:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
   182f0:	6811      	ldr	r1, [r2, #0]
   182f2:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   182f4:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   182f6:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   182fa:	6802      	ldr	r2, [r0, #0]
   182fc:	2a00      	cmp	r2, #0
   182fe:	d197      	bne.n	18230 <ull_conn_llcp+0x12b0>
		conn->tx_data_last = tx;
   18300:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   18304:	e794      	b.n	18230 <ull_conn_llcp+0x12b0>
		if (!conn->tx_ctrl) {
   18306:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   1830a:	2900      	cmp	r1, #0
   1830c:	d1ee      	bne.n	182ec <ull_conn_llcp+0x136c>
			tx->next = conn->tx_head;
   1830e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   18310:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18314:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18318:	e7ef      	b.n	182fa <ull_conn_llcp+0x137a>
		if (!conn->tx_ctrl) {
   1831a:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   1831e:	2900      	cmp	r1, #0
   18320:	f47f af7c 	bne.w	1821c <ull_conn_llcp+0x129c>
			tx->next = conn->tx_head;
   18324:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   18326:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1832a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   1832e:	e77c      	b.n	1822a <ull_conn_llcp+0x12aa>
			tx->next = conn->tx_head->next;
   18330:	6813      	ldr	r3, [r2, #0]
   18332:	600b      	str	r3, [r1, #0]
			conn->tx_head->next = tx;
   18334:	468c      	mov	ip, r1
   18336:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl_last = tx;
   18338:	e9c4 1170 	strd	r1, r1, [r4, #448]	; 0x1c0
   1833c:	e67b      	b.n	18036 <ull_conn_llcp+0x10b6>
				conn->llcp_conn_param.interval_max;
   1833e:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   18342:	f7ff ba44 	b.w	177ce <ull_conn_llcp+0x84e>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   18346:	07d1      	lsls	r1, r2, #31
   18348:	d51f      	bpl.n	1838a <ull_conn_llcp+0x140a>
			conn->llcp_phy.rx = PHY_1M;
   1834a:	2201      	movs	r2, #1
   1834c:	f362 1347 	bfi	r3, r2, #5, #3
   18350:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18354:	e6f8      	b.n	18148 <ull_conn_llcp+0x11c8>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   18356:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   18358:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		} else if (conn->llcp_phy.tx & PHY_1M) {
   1835c:	d52e      	bpl.n	183bc <ull_conn_llcp+0x143c>
			conn->llcp_phy.tx = PHY_1M;
   1835e:	2201      	movs	r2, #1
   18360:	f362 0384 	bfi	r3, r2, #2, #3
   18364:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18368:	e6e2      	b.n	18130 <ull_conn_llcp+0x11b0>
			tx->next = conn->tx_head->next;
   1836a:	6819      	ldr	r1, [r3, #0]
   1836c:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   1836e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   18370:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18374:	e759      	b.n	1822a <ull_conn_llcp+0x12aa>
			tx->next = conn->tx_head->next;
   18376:	6811      	ldr	r1, [r2, #0]
   18378:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   1837a:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   1837c:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18380:	e7bb      	b.n	182fa <ull_conn_llcp+0x137a>
		if (!conn->tx_ctrl) {
   18382:	e9d4 0e6f 	ldrd	r0, lr, [r4, #444]	; 0x1bc
   18386:	f7ff bb85 	b.w	17a94 <ull_conn_llcp+0xb14>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   1838a:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   1838e:	bf18      	it	ne
   18390:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   18392:	f362 1347 	bfi	r3, r2, #5, #3
   18396:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   1839a:	e6d5      	b.n	18148 <ull_conn_llcp+0x11c8>
   1839c:	e9d4 2c6f 	ldrd	r2, ip, [r4, #444]	; 0x1bc
   183a0:	e4c3      	b.n	17d2a <ull_conn_llcp+0xdaa>
			tx->next = conn->tx_head->next;
   183a2:	6813      	ldr	r3, [r2, #0]
   183a4:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   183a6:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   183a8:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   183ac:	e434      	b.n	17c18 <ull_conn_llcp+0xc98>
			tx->next = conn->tx_head->next;
   183ae:	6819      	ldr	r1, [r3, #0]
   183b0:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   183b2:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   183b4:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   183b8:	f7ff ba8c 	b.w	178d4 <ull_conn_llcp+0x954>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   183bc:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   183c0:	bf18      	it	ne
   183c2:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   183c4:	f362 0384 	bfi	r3, r2, #2, #3
   183c8:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   183cc:	e6b0      	b.n	18130 <ull_conn_llcp+0x11b0>
		LL_ASSERT(0);
   183ce:	4a03      	ldr	r2, [pc, #12]	; (183dc <ull_conn_llcp+0x145c>)
   183d0:	4903      	ldr	r1, [pc, #12]	; (183e0 <ull_conn_llcp+0x1460>)
   183d2:	f640 531f 	movw	r3, #3359	; 0xd1f
   183d6:	e4f4      	b.n	17dc2 <ull_conn_llcp+0xe42>
   183d8:	2000e428 	.word	0x2000e428
   183dc:	00027f70 	.word	0x00027f70
   183e0:	00027b4c 	.word	0x00027b4c

000183e4 <ull_conn_tx_demux>:
{
   183e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   183e8:	4f24      	ldr	r7, [pc, #144]	; (1847c <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   183ea:	4e25      	ldr	r6, [pc, #148]	; (18480 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   183ec:	78fa      	ldrb	r2, [r7, #3]
{
   183ee:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   183f0:	1d3d      	adds	r5, r7, #4
   183f2:	e021      	b.n	18438 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   183f4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   183f8:	4630      	mov	r0, r6
   183fa:	f7f7 fd77 	bl	feec <mem_get>
	if (conn->lll.handle != handle) {
   183fe:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   18400:	bb32      	cbnz	r2, 18450 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   18402:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   18406:	f8d0 11c8 	ldr.w	r1, [r0, #456]	; 0x1c8
			tx->next = NULL;
   1840a:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   1840c:	b359      	cbz	r1, 18466 <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   1840e:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
   18412:	b102      	cbz	r2, 18416 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   18414:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   18416:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
		MFIFO_DEQUEUE(conn_tx);
   1841a:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   1841c:	78bb      	ldrb	r3, [r7, #2]
   1841e:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   18420:	429a      	cmp	r2, r3
   18422:	d005      	beq.n	18430 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   18424:	3301      	adds	r3, #1
   18426:	b2db      	uxtb	r3, r3
		_first = 0U;
   18428:	4299      	cmp	r1, r3
   1842a:	bf08      	it	eq
   1842c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1842e:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   18430:	3c01      	subs	r4, #1
   18432:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   18436:	d01f      	beq.n	18478 <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   18438:	78bb      	ldrb	r3, [r7, #2]
   1843a:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   1843c:	4293      	cmp	r3, r2
   1843e:	d01b      	beq.n	18478 <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   18440:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   18444:	eb15 0803 	adds.w	r8, r5, r3
   18448:	d016      	beq.n	18478 <ull_conn_tx_demux+0x94>
	if (handle >= CONFIG_BT_MAX_CONN) {
   1844a:	5aea      	ldrh	r2, [r5, r3]
   1844c:	2a00      	cmp	r2, #0
   1844e:	d0d1      	beq.n	183f4 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   18450:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   18454:	790b      	ldrb	r3, [r1, #4]
   18456:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(0xFFFF, tx);
   1845a:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   1845e:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   18460:	f7fb fb60 	bl	13b24 <ll_tx_ack_put>
   18464:	e7d9      	b.n	1841a <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   18466:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
				conn->tx_data = tx;
   1846a:	f8c0 31c8 	str.w	r3, [r0, #456]	; 0x1c8
				if (!conn->tx_head) {
   1846e:	2a00      	cmp	r2, #0
   18470:	d1cd      	bne.n	1840e <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   18472:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
			if (conn->tx_data_last) {
   18476:	e7ce      	b.n	18416 <ull_conn_tx_demux+0x32>
}
   18478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1847c:	200005b0 	.word	0x200005b0
   18480:	2000e1d0 	.word	0x2000e1d0

00018484 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   18484:	4b3b      	ldr	r3, [pc, #236]	; (18574 <conn_cleanup+0xf0>)
   18486:	681a      	ldr	r2, [r3, #0]
{
   18488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
   1848c:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   1848e:	bf04      	itt	eq
   18490:	2200      	moveq	r2, #0
   18492:	601a      	streq	r2, [r3, #0]
	rx = conn->llcp_rx;
   18494:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
	rx->hdr.handle = conn->lll.handle;
   18498:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1849a:	f8a0 3142 	strh.w	r3, [r0, #322]	; 0x142
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1849e:	2314      	movs	r3, #20
{
   184a0:	b083      	sub	sp, #12
   184a2:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
   184a4:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   184a8:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	*((uint8_t *)rx->pdu) = reason;
   184ac:	f880 1158 	strb.w	r1, [r0, #344]	; 0x158
	while (rx) {
   184b0:	b144      	cbz	r4, 184c4 <conn_cleanup+0x40>
		hdr->type = NODE_RX_TYPE_RELEASE;
   184b2:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   184b4:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   184b6:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   184b8:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   184ba:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   184bc:	f7fb faee 	bl	13a9c <ll_rx_put>
	while (rx) {
   184c0:	2c00      	cmp	r4, #0
   184c2:	d1f7      	bne.n	184b4 <conn_cleanup+0x30>
	while (conn->tx_head) {
   184c4:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   184c8:	b381      	cbz	r1, 1852c <conn_cleanup+0xa8>
		link = mem_acquire(&mem_link_tx.free);
   184ca:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 18578 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   184ce:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1857c <conn_cleanup+0xf8>
   184d2:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 18580 <conn_cleanup+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   184d6:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   184da:	e007      	b.n	184ec <conn_cleanup+0x68>
   184dc:	4629      	mov	r1, r5
   184de:	463a      	mov	r2, r7
   184e0:	4620      	mov	r0, r4
   184e2:	f7f7 fd35 	bl	ff50 <memq_enqueue>
	while (conn->tx_head) {
   184e6:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   184ea:	b1f9      	cbz	r1, 1852c <conn_cleanup+0xa8>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   184ec:	4630      	mov	r0, r6
   184ee:	f7fc f985 	bl	147fc <tx_ull_dequeue>
   184f2:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   184f4:	4640      	mov	r0, r8
   184f6:	f7f7 fcc7 	bl	fe88 <mem_acquire>
		LL_ASSERT(link);
   184fa:	4604      	mov	r4, r0
   184fc:	2800      	cmp	r0, #0
   184fe:	d1ed      	bne.n	184dc <conn_cleanup+0x58>
   18500:	4820      	ldr	r0, [pc, #128]	; (18584 <conn_cleanup+0x100>)
   18502:	f44f 63ed 	mov.w	r3, #1896	; 0x768
   18506:	4652      	mov	r2, sl
   18508:	4649      	mov	r1, r9
   1850a:	f008 fec3 	bl	21294 <printk>
   1850e:	4040      	eors	r0, r0
   18510:	f380 8811 	msr	BASEPRI, r0
   18514:	f04f 0003 	mov.w	r0, #3
   18518:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1851a:	4629      	mov	r1, r5
   1851c:	463a      	mov	r2, r7
   1851e:	4620      	mov	r0, r4
   18520:	f7f7 fd16 	bl	ff50 <memq_enqueue>
	while (conn->tx_head) {
   18524:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   18528:	2900      	cmp	r1, #0
   1852a:	d1df      	bne.n	184ec <conn_cleanup+0x68>
				    TICKER_ID_CONN_BASE + lll->handle,
   1852c:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1852e:	4b16      	ldr	r3, [pc, #88]	; (18588 <conn_cleanup+0x104>)
   18530:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   18534:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   18536:	b2d2      	uxtb	r2, r2
   18538:	2101      	movs	r1, #1
   1853a:	2000      	movs	r0, #0
   1853c:	f7f8 ff76 	bl	1142c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18540:	f030 0302 	bics.w	r3, r0, #2
   18544:	d00c      	beq.n	18560 <conn_cleanup+0xdc>
   18546:	4a0d      	ldr	r2, [pc, #52]	; (1857c <conn_cleanup+0xf8>)
   18548:	4910      	ldr	r1, [pc, #64]	; (1858c <conn_cleanup+0x108>)
   1854a:	480e      	ldr	r0, [pc, #56]	; (18584 <conn_cleanup+0x100>)
   1854c:	f240 7327 	movw	r3, #1831	; 0x727
   18550:	f008 fea0 	bl	21294 <printk>
   18554:	4040      	eors	r0, r0
   18556:	f380 8811 	msr	BASEPRI, r0
   1855a:	f04f 0003 	mov.w	r0, #3
   1855e:	df02      	svc	2
	lll->handle = 0xFFFF;
   18560:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   18564:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   18566:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   18568:	b003      	add	sp, #12
   1856a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1856e:	f7ff bf39 	b.w	183e4 <ull_conn_tx_demux>
   18572:	bf00      	nop
   18574:	2000e3a4 	.word	0x2000e3a4
   18578:	2000e4ac 	.word	0x2000e4ac
   1857c:	00027f70 	.word	0x00027f70
   18580:	00027fc0 	.word	0x00027fc0
   18584:	00027ab4 	.word	0x00027ab4
   18588:	000149fd 	.word	0x000149fd
   1858c:	00028050 	.word	0x00028050

00018590 <ull_conn_done>:
{
   18590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   18594:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   18596:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   18598:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   1859a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1859e:	429a      	cmp	r2, r3
{
   185a0:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   185a2:	d05e      	beq.n	18662 <ull_conn_done+0xd2>
	switch (done->extra.mic_state) {
   185a4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   185a8:	2b01      	cmp	r3, #1
   185aa:	4606      	mov	r6, r0
   185ac:	f000 80ea 	beq.w	18784 <ull_conn_done+0x1f4>
   185b0:	2b02      	cmp	r3, #2
   185b2:	f000 80dd 	beq.w	18770 <ull_conn_done+0x1e0>
   185b6:	2b00      	cmp	r3, #0
   185b8:	f000 80c0 	beq.w	1873c <ull_conn_done+0x1ac>
	reason_peer = conn->llcp_terminate.reason_peer;
   185bc:	f894 713b 	ldrb.w	r7, [r4, #315]	; 0x13b
	if (reason_peer && (
   185c0:	2f00      	cmp	r7, #0
   185c2:	f040 80d8 	bne.w	18776 <ull_conn_done+0x1e6>
	latency_event = lll->latency_event;
   185c6:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   185ca:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	elapsed_event = latency_event + 1;
   185cc:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   185d0:	e9cd 7708 	strd	r7, r7, [sp, #32]
	elapsed_event = latency_event + 1;
   185d4:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   185d8:	2b00      	cmp	r3, #0
   185da:	d045      	beq.n	18668 <ull_conn_done+0xd8>
		} else if (lll->role) {
   185dc:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   185e0:	2b00      	cmp	r3, #0
   185e2:	f2c0 8118 	blt.w	18816 <ull_conn_done+0x286>
	if (done->extra.crc_valid) {
   185e6:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   185ea:	2200      	movs	r2, #0
   185ec:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   185f0:	2b00      	cmp	r3, #0
   185f2:	f000 80cd 	beq.w	18790 <ull_conn_done+0x200>
		conn->supervision_expire = 0U;
   185f6:	2300      	movs	r3, #0
   185f8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   185fc:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   18600:	b133      	cbz	r3, 18610 <ull_conn_done+0x80>
		if (conn->procedure_expire > elapsed_event) {
   18602:	4543      	cmp	r3, r8
   18604:	f240 8118 	bls.w	18838 <ull_conn_done+0x2a8>
			conn->procedure_expire -= elapsed_event;
   18608:	eba3 0308 	sub.w	r3, r3, r8
   1860c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   18610:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   18614:	b133      	cbz	r3, 18624 <ull_conn_done+0x94>
		if (conn->apto_expire > elapsed_event) {
   18616:	4543      	cmp	r3, r8
   18618:	f240 80ea 	bls.w	187f0 <ull_conn_done+0x260>
			conn->apto_expire -= elapsed_event;
   1861c:	eba3 0308 	sub.w	r3, r3, r8
   18620:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   18624:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   18628:	2b00      	cmp	r3, #0
   1862a:	d046      	beq.n	186ba <ull_conn_done+0x12a>
		if (conn->appto_expire > elapsed_event) {
   1862c:	4543      	cmp	r3, r8
   1862e:	f200 80be 	bhi.w	187ae <ull_conn_done+0x21e>
			conn->appto_expire = 0U;
   18632:	2300      	movs	r3, #0
   18634:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   18638:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   1863c:	2b00      	cmp	r3, #0
   1863e:	d13c      	bne.n	186ba <ull_conn_done+0x12a>
			    (conn->llcp_req == conn->llcp_ack)) {
   18640:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18644:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			if ((conn->procedure_expire == 0U) &&
   18648:	4293      	cmp	r3, r2
   1864a:	d13a      	bne.n	186c2 <ull_conn_done+0x132>
				conn->llcp_ack -= 2U;
   1864c:	3b02      	subs	r3, #2
   1864e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   18652:	2305      	movs	r3, #5
   18654:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18658:	e038      	b.n	186cc <ull_conn_done+0x13c>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   1865a:	2108      	movs	r1, #8
   1865c:	4620      	mov	r0, r4
   1865e:	f7ff ff11 	bl	18484 <conn_cleanup>
}
   18662:	b00b      	add	sp, #44	; 0x2c
   18664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   18668:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   1866c:	2b00      	cmp	r3, #0
   1866e:	d1c2      	bne.n	185f6 <ull_conn_done+0x66>
	else if (conn->connect_expire) {
   18670:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   18674:	2b00      	cmp	r3, #0
   18676:	f000 808b 	beq.w	18790 <ull_conn_done+0x200>
		if (conn->connect_expire > elapsed_event) {
   1867a:	4543      	cmp	r3, r8
   1867c:	f240 80f3 	bls.w	18866 <ull_conn_done+0x2d6>
			conn->connect_expire -= elapsed_event;
   18680:	eba3 0308 	sub.w	r3, r3, r8
   18684:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->supervision_expire) {
   18688:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1868c:	2b00      	cmp	r3, #0
   1868e:	d0b5      	beq.n	185fc <ull_conn_done+0x6c>
		if (conn->supervision_expire > elapsed_event) {
   18690:	4598      	cmp	r8, r3
   18692:	d2e2      	bcs.n	1865a <ull_conn_done+0xca>
			conn->supervision_expire -= elapsed_event;
   18694:	eba3 0308 	sub.w	r3, r3, r8
   18698:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   1869a:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   1869c:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1869e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0U;
   186a2:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   186a4:	d907      	bls.n	186b6 <ull_conn_done+0x126>
			else if (lll->role) {
   186a6:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   186aa:	4293      	cmp	r3, r2
   186ac:	daa6      	bge.n	185fc <ull_conn_done+0x6c>
				if (latency_event) {
   186ae:	f1b9 0f00 	cmp.w	r9, #0
   186b2:	f000 80ca 	beq.w	1884a <ull_conn_done+0x2ba>
				force = 1U;
   186b6:	2701      	movs	r7, #1
   186b8:	e7a0      	b.n	185fc <ull_conn_done+0x6c>
			    (conn->llcp_req == conn->llcp_ack)) {
   186ba:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   186be:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   186c2:	1a9b      	subs	r3, r3, r2
   186c4:	f003 0303 	and.w	r3, r3, #3
   186c8:	2b02      	cmp	r3, #2
   186ca:	d07d      	beq.n	187c8 <ull_conn_done+0x238>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   186cc:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   186d0:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   186d4:	429a      	cmp	r2, r3
   186d6:	f000 809c 	beq.w	18812 <ull_conn_done+0x282>
		lll->latency_event = 0U;
   186da:	2200      	movs	r2, #0
   186dc:	84aa      	strh	r2, [r5, #36]	; 0x24
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   186de:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   186e0:	b90f      	cbnz	r7, 186e6 <ull_conn_done+0x156>
   186e2:	4591      	cmp	r9, r2
   186e4:	d07d      	beq.n	187e2 <ull_conn_done+0x252>
		lazy = lll->latency_event + 1U;
   186e6:	3201      	adds	r2, #1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   186e8:	9c08      	ldr	r4, [sp, #32]
		lazy = lll->latency_event + 1U;
   186ea:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   186ec:	b90b      	cbnz	r3, 186f2 <ull_conn_done+0x162>
   186ee:	2c00      	cmp	r4, #0
   186f0:	d058      	beq.n	187a4 <ull_conn_done+0x214>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   186f2:	8baa      	ldrh	r2, [r5, #28]
		struct ll_conn *conn = lll->hdr.parent;
   186f4:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   186f6:	9400      	str	r4, [sp, #0]
   186f8:	2000      	movs	r0, #0
   186fa:	4c68      	ldr	r4, [pc, #416]	; (1889c <ull_conn_done+0x30c>)
   186fc:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   186fe:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18700:	e9cd 0001 	strd	r0, r0, [sp, #4]
   18704:	9704      	str	r7, [sp, #16]
   18706:	9506      	str	r5, [sp, #24]
   18708:	b2d2      	uxtb	r2, r2
   1870a:	2101      	movs	r1, #1
   1870c:	9405      	str	r4, [sp, #20]
   1870e:	f7f8 fe75 	bl	113fc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18712:	f030 0302 	bics.w	r3, r0, #2
   18716:	d0a4      	beq.n	18662 <ull_conn_done+0xd2>
   18718:	f7fb fa9c 	bl	13c54 <ull_disable_mark_get>
   1871c:	4285      	cmp	r5, r0
   1871e:	d0a0      	beq.n	18662 <ull_conn_done+0xd2>
   18720:	4a5f      	ldr	r2, [pc, #380]	; (188a0 <ull_conn_done+0x310>)
   18722:	4960      	ldr	r1, [pc, #384]	; (188a4 <ull_conn_done+0x314>)
   18724:	4860      	ldr	r0, [pc, #384]	; (188a8 <ull_conn_done+0x318>)
   18726:	f240 5376 	movw	r3, #1398	; 0x576
   1872a:	f008 fdb3 	bl	21294 <printk>
   1872e:	4040      	eors	r0, r0
   18730:	f380 8811 	msr	BASEPRI, r0
   18734:	f04f 0003 	mov.w	r0, #3
   18738:	df02      	svc	2
   1873a:	e792      	b.n	18662 <ull_conn_done+0xd2>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1873c:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   18740:	0719      	lsls	r1, r3, #28
   18742:	d548      	bpl.n	187d6 <ull_conn_done+0x246>
					    (lll->latency + 6)) ?
   18744:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   18746:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   1874a:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   1874c:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   1874e:	bfc4      	itt	gt
   18750:	1ad3      	subgt	r3, r2, r3
   18752:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   18754:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   18758:	bfcc      	ite	gt
   1875a:	b29b      	uxthgt	r3, r3
   1875c:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   1875e:	4299      	cmp	r1, r3
   18760:	d064      	beq.n	1882c <ull_conn_done+0x29c>
				conn->appto_reload = appto_reload_new;
   18762:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   18766:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   1876a:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   1876e:	e725      	b.n	185bc <ull_conn_done+0x2c>
		conn->llcp_terminate.reason_peer =
   18770:	273d      	movs	r7, #61	; 0x3d
   18772:	f884 713b 	strb.w	r7, [r4, #315]	; 0x13b
		conn_cleanup(conn, reason_peer);
   18776:	4639      	mov	r1, r7
   18778:	4620      	mov	r0, r4
}
   1877a:	b00b      	add	sp, #44	; 0x2c
   1877c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		conn_cleanup(conn, reason_peer);
   18780:	f7ff be80 	b.w	18484 <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
   18784:	2300      	movs	r3, #0
   18786:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   1878a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   1878e:	e715      	b.n	185bc <ull_conn_done+0x2c>
		if (!conn->supervision_expire) {
   18790:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   18794:	2b00      	cmp	r3, #0
   18796:	f47f af7b 	bne.w	18690 <ull_conn_done+0x100>
			conn->supervision_expire = conn->supervision_reload;
   1879a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1879e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   187a2:	e773      	b.n	1868c <ull_conn_done+0xfc>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   187a4:	2900      	cmp	r1, #0
   187a6:	d1a4      	bne.n	186f2 <ull_conn_done+0x162>
   187a8:	2f00      	cmp	r7, #0
   187aa:	d1a2      	bne.n	186f2 <ull_conn_done+0x162>
   187ac:	e759      	b.n	18662 <ull_conn_done+0xd2>
			conn->appto_expire -= elapsed_event;
   187ae:	eba3 0308 	sub.w	r3, r3, r8
			    (conn->llcp_req == conn->llcp_ack)) {
   187b2:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			conn->appto_expire -= elapsed_event;
   187b6:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
			    (conn->llcp_req == conn->llcp_ack)) {
   187ba:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   187be:	1a9b      	subs	r3, r3, r2
   187c0:	f003 0303 	and.w	r3, r3, #3
   187c4:	2b02      	cmp	r3, #2
   187c6:	d181      	bne.n	186cc <ull_conn_done+0x13c>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   187c8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   187cc:	3b01      	subs	r3, #1
   187ce:	2b01      	cmp	r3, #1
   187d0:	f63f af7c 	bhi.w	186cc <ull_conn_done+0x13c>
   187d4:	e781      	b.n	186da <ull_conn_done+0x14a>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   187d6:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   187da:	07da      	lsls	r2, r3, #31
   187dc:	f57f aeee 	bpl.w	185bc <ull_conn_done+0x2c>
   187e0:	e7b0      	b.n	18744 <ull_conn_done+0x1b4>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   187e2:	9c08      	ldr	r4, [sp, #32]
   187e4:	b913      	cbnz	r3, 187ec <ull_conn_done+0x25c>
   187e6:	2c00      	cmp	r4, #0
   187e8:	f43f af3b 	beq.w	18662 <ull_conn_done+0xd2>
	lazy = 0U;
   187ec:	4639      	mov	r1, r7
   187ee:	e780      	b.n	186f2 <ull_conn_done+0x162>
			rx = ll_pdu_rx_alloc();
   187f0:	f7fb f982 	bl	13af8 <ll_pdu_rx_alloc>
			if (rx) {
   187f4:	4601      	mov	r1, r0
   187f6:	b320      	cbz	r0, 18842 <ull_conn_done+0x2b2>
				rx->handle = lll->handle;
   187f8:	8bab      	ldrh	r3, [r5, #28]
				conn->apto_expire = 0U;
   187fa:	2200      	movs	r2, #0
   187fc:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
				rx->handle = lll->handle;
   18800:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   18802:	2317      	movs	r3, #23
   18804:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   18806:	6800      	ldr	r0, [r0, #0]
   18808:	f7fb f948 	bl	13a9c <ll_rx_put>
				ll_rx_sched();
   1880c:	f7fb f950 	bl	13ab0 <ll_rx_sched>
   18810:	e708      	b.n	18624 <ull_conn_done+0x94>
	if ((force) || (latency_event != lll->latency_event)) {
   18812:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   18814:	e763      	b.n	186de <ull_conn_done+0x14e>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   18816:	aa08      	add	r2, sp, #32
   18818:	a909      	add	r1, sp, #36	; 0x24
   1881a:	4630      	mov	r0, r6
   1881c:	f7e9 f80c 	bl	1838 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   18820:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   18824:	b323      	cbz	r3, 18870 <ull_conn_done+0x2e0>
				lll->latency_event = 0;
   18826:	2300      	movs	r3, #0
   18828:	84ab      	strh	r3, [r5, #36]	; 0x24
   1882a:	e6dc      	b.n	185e6 <ull_conn_done+0x56>
			if (conn->apto_expire == 0U) {
   1882c:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   18830:	2900      	cmp	r1, #0
   18832:	f47f aec3 	bne.w	185bc <ull_conn_done+0x2c>
   18836:	e796      	b.n	18766 <ull_conn_done+0x1d6>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   18838:	2122      	movs	r1, #34	; 0x22
   1883a:	4620      	mov	r0, r4
   1883c:	f7ff fe22 	bl	18484 <conn_cleanup>
			return;
   18840:	e70f      	b.n	18662 <ull_conn_done+0xd2>
				conn->apto_expire = 1U;
   18842:	2301      	movs	r3, #1
   18844:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   18848:	e6ec      	b.n	18624 <ull_conn_done+0x94>
					force = conn->slave.force & 0x01;
   1884a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1U;
   1884e:	085a      	lsrs	r2, r3, #1
					if (force) {
   18850:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   18854:	bf17      	itett	ne
   18856:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   1885a:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   1885e:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   18862:	461f      	movne	r7, r3
   18864:	e6ca      	b.n	185fc <ull_conn_done+0x6c>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   18866:	213e      	movs	r1, #62	; 0x3e
   18868:	4620      	mov	r0, r4
   1886a:	f7ff fe0b 	bl	18484 <conn_cleanup>
			return;
   1886e:	e6f8      	b.n	18662 <ull_conn_done+0xd2>
				ull_conn_tx_demux(UINT8_MAX);
   18870:	20ff      	movs	r0, #255	; 0xff
   18872:	f7ff fdb7 	bl	183e4 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   18876:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   1887a:	2b00      	cmp	r3, #0
   1887c:	d1d3      	bne.n	18826 <ull_conn_done+0x296>
   1887e:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   18882:	463a      	mov	r2, r7
   18884:	f7f7 fb6e 	bl	ff64 <memq_peek>
   18888:	2800      	cmp	r0, #0
   1888a:	d1cc      	bne.n	18826 <ull_conn_done+0x296>
			} else if (lll->slave.latency_enabled) {
   1888c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   18890:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   18892:	bf44      	itt	mi
   18894:	8c2b      	ldrhmi	r3, [r5, #32]
   18896:	84ab      	strhmi	r3, [r5, #36]	; 0x24
   18898:	e6a5      	b.n	185e6 <ull_conn_done+0x56>
   1889a:	bf00      	nop
   1889c:	00014b11 	.word	0x00014b11
   188a0:	00027f70 	.word	0x00027f70
   188a4:	00028104 	.word	0x00028104
   188a8:	00027ab4 	.word	0x00027ab4

000188ac <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   188ac:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   188b0:	2b00      	cmp	r3, #0
   188b2:	f000 80be 	beq.w	18a32 <ull_conn_tx_lll_enqueue+0x186>
   188b6:	3901      	subs	r1, #1
{
   188b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   188bc:	f8df 8174 	ldr.w	r8, [pc, #372]	; 18a34 <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   188c0:	f8df a174 	ldr.w	sl, [pc, #372]	; 18a38 <ull_conn_tx_lll_enqueue+0x18c>
   188c4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 18a3c <ull_conn_tx_lll_enqueue+0x190>
   188c8:	4604      	mov	r4, r0
   188ca:	b2cd      	uxtb	r5, r1
   188cc:	e010      	b.n	188f0 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   188ce:	4640      	mov	r0, r8
   188d0:	f7f7 fada 	bl	fe88 <mem_acquire>
		LL_ASSERT(link);
   188d4:	4607      	mov	r7, r0
   188d6:	b3b0      	cbz	r0, 18946 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   188d8:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   188dc:	4631      	mov	r1, r6
   188de:	4638      	mov	r0, r7
   188e0:	f7f7 fb36 	bl	ff50 <memq_enqueue>
	while (conn->tx_head &&
   188e4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   188e8:	3d01      	subs	r5, #1
   188ea:	b2ed      	uxtb	r5, r5
   188ec:	2b00      	cmp	r3, #0
   188ee:	d05c      	beq.n	189aa <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   188f0:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
	while (conn->tx_head &&
   188f4:	07d1      	lsls	r1, r2, #31
   188f6:	d403      	bmi.n	18900 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   188f8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		 !conn->llcp_phy.pause_tx &&
   188fc:	0792      	lsls	r2, r2, #30
   188fe:	d53a      	bpl.n	18976 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   18900:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   18904:	4293      	cmp	r3, r2
   18906:	d150      	bne.n	189aa <ull_conn_tx_lll_enqueue+0xfe>
   18908:	2dff      	cmp	r5, #255	; 0xff
   1890a:	d04e      	beq.n	189aa <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1890c:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   18910:	4620      	mov	r0, r4
   18912:	f7fb ff73 	bl	147fc <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   18916:	7903      	ldrb	r3, [r0, #4]
   18918:	f003 0303 	and.w	r3, r3, #3
   1891c:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1891e:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   18920:	d1d5      	bne.n	188ce <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   18922:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   18924:	2b0b      	cmp	r3, #11
   18926:	d042      	beq.n	189ae <ull_conn_tx_lll_enqueue+0x102>
   18928:	d81b      	bhi.n	18962 <ull_conn_tx_lll_enqueue+0xb6>
   1892a:	2b04      	cmp	r3, #4
   1892c:	d1cf      	bne.n	188ce <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1892e:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   18932:	f043 0302 	orr.w	r3, r3, #2
   18936:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		link = mem_acquire(&mem_link_tx.free);
   1893a:	4640      	mov	r0, r8
   1893c:	f7f7 faa4 	bl	fe88 <mem_acquire>
		LL_ASSERT(link);
   18940:	4607      	mov	r7, r0
   18942:	2800      	cmp	r0, #0
   18944:	d1c8      	bne.n	188d8 <ull_conn_tx_lll_enqueue+0x2c>
   18946:	483e      	ldr	r0, [pc, #248]	; (18a40 <ull_conn_tx_lll_enqueue+0x194>)
   18948:	f240 53ca 	movw	r3, #1482	; 0x5ca
   1894c:	4652      	mov	r2, sl
   1894e:	4649      	mov	r1, r9
   18950:	f008 fca0 	bl	21294 <printk>
   18954:	4040      	eors	r0, r0
   18956:	f380 8811 	msr	BASEPRI, r0
   1895a:	f04f 0003 	mov.w	r0, #3
   1895e:	df02      	svc	2
   18960:	e7ba      	b.n	188d8 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   18962:	3b16      	subs	r3, #22
   18964:	2b01      	cmp	r3, #1
   18966:	d8b2      	bhi.n	188ce <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   18968:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1896c:	f043 0301 	orr.w	r3, r3, #1
   18970:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
		break;
   18974:	e7ab      	b.n	188ce <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   18976:	791a      	ldrb	r2, [r3, #4]
   18978:	f002 0203 	and.w	r2, r2, #3
   1897c:	2a03      	cmp	r2, #3
   1897e:	d1c3      	bne.n	18908 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   18980:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   18982:	2a03      	cmp	r2, #3
   18984:	d001      	beq.n	1898a <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   18986:	2a0a      	cmp	r2, #10
   18988:	d1be      	bne.n	18908 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1898a:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   1898e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   18992:	428a      	cmp	r2, r1
   18994:	d010      	beq.n	189b8 <ull_conn_tx_lll_enqueue+0x10c>
   18996:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   1899a:	2a03      	cmp	r2, #3
   1899c:	d0b4      	beq.n	18908 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   1899e:	681a      	ldr	r2, [r3, #0]
   189a0:	b11a      	cbz	r2, 189aa <ull_conn_tx_lll_enqueue+0xfe>
   189a2:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   189a6:	428a      	cmp	r2, r1
   189a8:	d032      	beq.n	18a10 <ull_conn_tx_lll_enqueue+0x164>
}
   189aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   189ae:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   189b2:	2b00      	cmp	r3, #0
   189b4:	da8b      	bge.n	188ce <ull_conn_tx_lll_enqueue+0x22>
   189b6:	e7ba      	b.n	1892e <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   189b8:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   189bc:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   189c0:	4288      	cmp	r0, r1
   189c2:	d1ec      	bne.n	1899e <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   189c4:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   189c8:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
   189cc:	4288      	cmp	r0, r1
   189ce:	d1e6      	bne.n	1899e <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   189d0:	f894 017d 	ldrb.w	r0, [r4, #381]	; 0x17d
   189d4:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   189d8:	4288      	cmp	r0, r1
   189da:	d1e0      	bne.n	1899e <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   189dc:	f894 01a5 	ldrb.w	r0, [r4, #421]	; 0x1a5
   189e0:	f894 11a4 	ldrb.w	r1, [r4, #420]	; 0x1a4
   189e4:	4288      	cmp	r0, r1
   189e6:	d1da      	bne.n	1899e <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   189e8:	f894 01b5 	ldrb.w	r0, [r4, #437]	; 0x1b5
   189ec:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   189f0:	4288      	cmp	r0, r1
   189f2:	d1d4      	bne.n	1899e <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   189f4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_ack -= 2U;
   189f8:	3a02      	subs	r2, #2
   189fa:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   189fe:	2201      	movs	r2, #1
   18a00:	f362 0301 	bfi	r3, r2, #0, #2
   18a04:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_type = LLCP_ENCRYPTION;
   18a08:	2303      	movs	r3, #3
   18a0a:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   18a0e:	e77b      	b.n	18908 <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   18a10:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
				tx->next = conn->tx_ctrl_last->next;
   18a14:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
				if (!conn->tx_data_last) {
   18a18:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
				tx->next = conn->tx_ctrl_last->next;
   18a1c:	6810      	ldr	r0, [r2, #0]
   18a1e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   18a20:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   18a22:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
				if (!conn->tx_data_last) {
   18a26:	2900      	cmp	r1, #0
   18a28:	f47f af6e 	bne.w	18908 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   18a2c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
   18a30:	e76a      	b.n	18908 <ull_conn_tx_lll_enqueue+0x5c>
   18a32:	4770      	bx	lr
   18a34:	2000e4ac 	.word	0x2000e4ac
   18a38:	00027f70 	.word	0x00027f70
   18a3c:	00027fc0 	.word	0x00027fc0
   18a40:	00027ab4 	.word	0x00027ab4

00018a44 <tx_demux>:
{
   18a44:	b510      	push	{r4, lr}
   18a46:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   18a48:	2001      	movs	r0, #1
   18a4a:	f7ff fccb 	bl	183e4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   18a4e:	4620      	mov	r0, r4
   18a50:	2101      	movs	r1, #1
}
   18a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   18a56:	f7ff bf29 	b.w	188ac <ull_conn_tx_lll_enqueue>
   18a5a:	bf00      	nop

00018a5c <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   18a5c:	4901      	ldr	r1, [pc, #4]	; (18a64 <ull_conn_link_tx_release+0x8>)
   18a5e:	f7f7 ba2d 	b.w	febc <mem_release>
   18a62:	bf00      	nop
   18a64:	2000e4ac 	.word	0x2000e4ac

00018a68 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   18a68:	4b01      	ldr	r3, [pc, #4]	; (18a70 <ull_conn_ack_last_idx_get+0x8>)
}
   18a6a:	78d8      	ldrb	r0, [r3, #3]
   18a6c:	4770      	bx	lr
   18a6e:	bf00      	nop
   18a70:	2000056c 	.word	0x2000056c

00018a74 <ull_conn_ack_peek>:
{
   18a74:	b530      	push	{r4, r5, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   18a76:	4b0c      	ldr	r3, [pc, #48]	; (18aa8 <ull_conn_ack_peek+0x34>)
   18a78:	f893 c002 	ldrb.w	ip, [r3, #2]
   18a7c:	78dc      	ldrb	r4, [r3, #3]
   18a7e:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   18a80:	45a4      	cmp	ip, r4
   18a82:	d00f      	beq.n	18aa4 <ull_conn_ack_peek+0x30>
	return (void *)(fifo + first * size);
   18a84:	fb1c fc05 	smulbb	ip, ip, r5
   18a88:	3304      	adds	r3, #4
	if (!lll_tx) {
   18a8a:	4686      	mov	lr, r0
   18a8c:	eb13 000c 	adds.w	r0, r3, ip
   18a90:	d007      	beq.n	18aa2 <ull_conn_ack_peek+0x2e>
	*ack_last = mfifo_conn_ack.l;
   18a92:	f88e 4000 	strb.w	r4, [lr]
	*handle = lll_tx->handle;
   18a96:	f833 400c 	ldrh.w	r4, [r3, ip]
	*tx = lll_tx->node;
   18a9a:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   18a9c:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   18a9e:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   18aa0:	6818      	ldr	r0, [r3, #0]
}
   18aa2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   18aa4:	2000      	movs	r0, #0
}
   18aa6:	bd30      	pop	{r4, r5, pc}
   18aa8:	2000056c 	.word	0x2000056c

00018aac <ull_conn_ack_by_last_peek>:
{
   18aac:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   18aae:	4b0c      	ldr	r3, [pc, #48]	; (18ae0 <ull_conn_ack_by_last_peek+0x34>)
   18ab0:	f893 c002 	ldrb.w	ip, [r3, #2]
   18ab4:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   18ab8:	4584      	cmp	ip, r0
   18aba:	d00e      	beq.n	18ada <ull_conn_ack_by_last_peek+0x2e>
	return (void *)(fifo + first * size);
   18abc:	3304      	adds	r3, #4
   18abe:	fb1c fc0e 	smulbb	ip, ip, lr
	if (!lll_tx) {
   18ac2:	eb13 000c 	adds.w	r0, r3, ip
   18ac6:	d006      	beq.n	18ad6 <ull_conn_ack_by_last_peek+0x2a>
	*handle = lll_tx->handle;
   18ac8:	f833 c00c 	ldrh.w	ip, [r3, ip]
	*tx = lll_tx->node;
   18acc:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   18ace:	f8a1 c000 	strh.w	ip, [r1]
	*tx = lll_tx->node;
   18ad2:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   18ad4:	6818      	ldr	r0, [r3, #0]
}
   18ad6:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   18ada:	2000      	movs	r0, #0
   18adc:	e7fb      	b.n	18ad6 <ull_conn_ack_by_last_peek+0x2a>
   18ade:	bf00      	nop
   18ae0:	2000056c 	.word	0x2000056c

00018ae4 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   18ae4:	4b09      	ldr	r3, [pc, #36]	; (18b0c <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   18ae6:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   18ae8:	78da      	ldrb	r2, [r3, #3]
   18aea:	7818      	ldrb	r0, [r3, #0]
   18aec:	f893 c001 	ldrb.w	ip, [r3, #1]
   18af0:	428a      	cmp	r2, r1
   18af2:	d009      	beq.n	18b08 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   18af4:	1c4a      	adds	r2, r1, #1
   18af6:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   18af8:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   18afc:	4594      	cmp	ip, r2
   18afe:	bf08      	it	eq
   18b00:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   18b02:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   18b04:	709a      	strb	r2, [r3, #2]
	return mem;
   18b06:	4770      	bx	lr
		return NULL;
   18b08:	2000      	movs	r0, #0
}
   18b0a:	4770      	bx	lr
   18b0c:	2000056c 	.word	0x2000056c

00018b10 <ull_conn_lll_ack_enqueue>:
{
   18b10:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   18b12:	4a15      	ldr	r2, [pc, #84]	; (18b68 <ull_conn_lll_ack_enqueue+0x58>)
   18b14:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   18b16:	f892 e001 	ldrb.w	lr, [r2, #1]
   18b1a:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   18b1e:	1c63      	adds	r3, r4, #1
   18b20:	b2db      	uxtb	r3, r3
		last = 0U;
   18b22:	459e      	cmp	lr, r3
   18b24:	bf08      	it	eq
   18b26:	2300      	moveq	r3, #0
	if (last == first) {
   18b28:	459c      	cmp	ip, r3
   18b2a:	d00c      	beq.n	18b46 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18b2c:	4696      	mov	lr, r2
   18b2e:	f81e cb04 	ldrb.w	ip, [lr], #4
   18b32:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(lll_tx);
   18b36:	eb1e 040c 	adds.w	r4, lr, ip
   18b3a:	d004      	beq.n	18b46 <ull_conn_lll_ack_enqueue+0x36>
	lll_tx->handle = handle;
   18b3c:	f82e 000c 	strh.w	r0, [lr, ip]
	lll_tx->node = tx;
   18b40:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   18b42:	70d3      	strb	r3, [r2, #3]
}
   18b44:	bd10      	pop	{r4, pc}
	LL_ASSERT(lll_tx);
   18b46:	4a09      	ldr	r2, [pc, #36]	; (18b6c <ull_conn_lll_ack_enqueue+0x5c>)
   18b48:	4909      	ldr	r1, [pc, #36]	; (18b70 <ull_conn_lll_ack_enqueue+0x60>)
   18b4a:	480a      	ldr	r0, [pc, #40]	; (18b74 <ull_conn_lll_ack_enqueue+0x64>)
   18b4c:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   18b50:	f008 fba0 	bl	21294 <printk>
   18b54:	4040      	eors	r0, r0
   18b56:	f380 8811 	msr	BASEPRI, r0
   18b5a:	f04f 0003 	mov.w	r0, #3
   18b5e:	df02      	svc	2
	lll_tx->handle = handle;
   18b60:	2300      	movs	r3, #0
   18b62:	801b      	strh	r3, [r3, #0]
   18b64:	deff      	udf	#255	; 0xff
   18b66:	bf00      	nop
   18b68:	2000056c 	.word	0x2000056c
   18b6c:	00027f70 	.word	0x00027f70
   18b70:	00027fb0 	.word	0x00027fb0
   18b74:	00027ab4 	.word	0x00027ab4

00018b78 <ull_conn_tx_ack>:
{
   18b78:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   18b7a:	7953      	ldrb	r3, [r2, #5]
{
   18b7c:	b082      	sub	sp, #8
   18b7e:	4614      	mov	r4, r2
   18b80:	4605      	mov	r5, r0
   18b82:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   18b84:	b37b      	cbz	r3, 18be6 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   18b86:	7923      	ldrb	r3, [r4, #4]
   18b88:	f003 0203 	and.w	r2, r3, #3
   18b8c:	2a03      	cmp	r2, #3
   18b8e:	d00d      	beq.n	18bac <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   18b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18b94:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   18b96:	bf04      	itt	eq
   18b98:	f36f 0301 	bfceq	r3, #0, #2
   18b9c:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   18b9e:	4621      	mov	r1, r4
   18ba0:	4628      	mov	r0, r5
}
   18ba2:	b002      	add	sp, #8
   18ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   18ba8:	f7fa bfbc 	b.w	13b24 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   18bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18bb0:	429d      	cmp	r5, r3
   18bb2:	d126      	bne.n	18c02 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   18bb4:	6833      	ldr	r3, [r6, #0]
   18bb6:	429c      	cmp	r4, r3
   18bb8:	d03e      	beq.n	18c38 <ull_conn_tx_ack+0xc0>
			LL_ASSERT(!link->next);
   18bba:	2b00      	cmp	r3, #0
   18bbc:	d0ef      	beq.n	18b9e <ull_conn_tx_ack+0x26>
   18bbe:	4a64      	ldr	r2, [pc, #400]	; (18d50 <ull_conn_tx_ack+0x1d8>)
   18bc0:	4964      	ldr	r1, [pc, #400]	; (18d54 <ull_conn_tx_ack+0x1dc>)
   18bc2:	4865      	ldr	r0, [pc, #404]	; (18d58 <ull_conn_tx_ack+0x1e0>)
   18bc4:	f44f 63c5 	mov.w	r3, #1576	; 0x628
   18bc8:	f008 fb64 	bl	21294 <printk>
   18bcc:	4040      	eors	r0, r0
   18bce:	f380 8811 	msr	BASEPRI, r0
   18bd2:	f04f 0003 	mov.w	r0, #3
   18bd6:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   18bd8:	4621      	mov	r1, r4
   18bda:	4628      	mov	r0, r5
}
   18bdc:	b002      	add	sp, #8
   18bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   18be2:	f7fa bf9f 	b.w	13b24 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   18be6:	4a5a      	ldr	r2, [pc, #360]	; (18d50 <ull_conn_tx_ack+0x1d8>)
   18be8:	495c      	ldr	r1, [pc, #368]	; (18d5c <ull_conn_tx_ack+0x1e4>)
   18bea:	485b      	ldr	r0, [pc, #364]	; (18d58 <ull_conn_tx_ack+0x1e0>)
   18bec:	f240 6315 	movw	r3, #1557	; 0x615
   18bf0:	f008 fb50 	bl	21294 <printk>
   18bf4:	4040      	eors	r0, r0
   18bf6:	f380 8811 	msr	BASEPRI, r0
   18bfa:	f04f 0003 	mov.w	r0, #3
   18bfe:	df02      	svc	2
   18c00:	e7c1      	b.n	18b86 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18c02:	462a      	mov	r2, r5
   18c04:	4856      	ldr	r0, [pc, #344]	; (18d60 <ull_conn_tx_ack+0x1e8>)
   18c06:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   18c0a:	f7f7 f96f 	bl	feec <mem_get>
   18c0e:	79e2      	ldrb	r2, [r4, #7]
   18c10:	3a02      	subs	r2, #2
   18c12:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   18c14:	2a15      	cmp	r2, #21
   18c16:	d80c      	bhi.n	18c32 <ull_conn_tx_ack+0xba>
   18c18:	e8df f002 	tbb	[pc, r2]
   18c1c:	0b150b51 	.word	0x0b150b51
   18c20:	0b0b0b0b 	.word	0x0b0b0b0b
   18c24:	470b150b 	.word	0x470b150b
   18c28:	440b0b0b 	.word	0x440b0b0b
   18c2c:	587e0b0b 	.word	0x587e0b0b
   18c30:	231c      	.short	0x231c
		if (link->next == (void *)tx) {
   18c32:	6833      	ldr	r3, [r6, #0]
   18c34:	42a3      	cmp	r3, r4
   18c36:	d1c0      	bne.n	18bba <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   18c38:	494a      	ldr	r1, [pc, #296]	; (18d64 <ull_conn_tx_ack+0x1ec>)
   18c3a:	4620      	mov	r0, r4
}
   18c3c:	b002      	add	sp, #8
   18c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   18c42:	f7f7 b93b 	b.w	febc <mem_release>
			conn->llcp_enc.pause_tx = 1U;
   18c46:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
   18c4a:	f042 0202 	orr.w	r2, r2, #2
   18c4e:	f880 215e 	strb.w	r2, [r0, #350]	; 0x15e
		break;
   18c52:	e7af      	b.n	18bb4 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   18c54:	f890 21b6 	ldrb.w	r2, [r0, #438]	; 0x1b6
   18c58:	2102      	movs	r1, #2
   18c5a:	f361 0201 	bfi	r2, r1, #0, #2
   18c5e:	f880 21b6 	strb.w	r2, [r0, #438]	; 0x1b6
		if (conn->lll.role) {
   18c62:	f993 203d 	ldrsb.w	r2, [r3, #61]	; 0x3d
   18c66:	2a00      	cmp	r2, #0
   18c68:	da15      	bge.n	18c96 <ull_conn_tx_ack+0x11e>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   18c6a:	4a3f      	ldr	r2, [pc, #252]	; (18d68 <ull_conn_tx_ack+0x1f0>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   18c6c:	f893 c064 	ldrb.w	ip, [r3, #100]	; 0x64
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   18c70:	e892 0003 	ldmia.w	r2, {r0, r1}
   18c74:	aa02      	add	r2, sp, #8
   18c76:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   18c7a:	f893 21b6 	ldrb.w	r2, [r3, #438]	; 0x1b6
   18c7e:	ea4c 0292 	orr.w	r2, ip, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   18c82:	f002 0207 	and.w	r2, r2, #7
   18c86:	a902      	add	r1, sp, #8
   18c88:	440a      	add	r2, r1
   18c8a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   18c8e:	f362 1c06 	bfi	ip, r2, #4, #3
   18c92:	f883 c064 	strb.w	ip, [r3, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   18c96:	f893 21b7 	ldrb.w	r2, [r3, #439]	; 0x1b7
   18c9a:	f36f 0200 	bfc	r2, #0, #1
   18c9e:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
		break;
   18ca2:	e787      	b.n	18bb4 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   18ca4:	7a22      	ldrb	r2, [r4, #8]
   18ca6:	2a03      	cmp	r2, #3
   18ca8:	d184      	bne.n	18bb4 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   18caa:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
   18cae:	f022 0203 	bic.w	r2, r2, #3
   18cb2:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		conn->procedure_expire = 0U;
   18cb6:	2200      	movs	r2, #0
   18cb8:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		break;
   18cbc:	e77a      	b.n	18bb4 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   18cbe:	7a21      	ldrb	r1, [r4, #8]
   18cc0:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   18cc2:	bf08      	it	eq
   18cc4:	2116      	moveq	r1, #22
   18cc6:	f7ff fbdd 	bl	18484 <conn_cleanup>
	break;
   18cca:	e773      	b.n	18bb4 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   18ccc:	f890 01a4 	ldrb.w	r0, [r0, #420]	; 0x1a4
   18cd0:	f893 21a5 	ldrb.w	r2, [r3, #421]	; 0x1a5
   18cd4:	4282      	cmp	r2, r0
   18cd6:	f43f af6d 	beq.w	18bb4 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   18cda:	f893 11a6 	ldrb.w	r1, [r3, #422]	; 0x1a6
   18cde:	f001 0207 	and.w	r2, r1, #7
   18ce2:	2a03      	cmp	r2, #3
   18ce4:	d004      	beq.n	18cf0 <ull_conn_tx_ack+0x178>
   18ce6:	3203      	adds	r2, #3
   18ce8:	f002 0207 	and.w	r2, r2, #7
   18cec:	2a01      	cmp	r2, #1
   18cee:	d8a0      	bhi.n	18c32 <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   18cf0:	f8b3 21aa 	ldrh.w	r2, [r3, #426]	; 0x1aa
   18cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				conn->lll.max_tx_time =
   18cf8:	f8b3 21ae 	ldrh.w	r2, [r3, #430]	; 0x1ae
   18cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				if (conn->llcp_length.state ==
   18d00:	f001 0207 	and.w	r2, r1, #7
   18d04:	2a05      	cmp	r2, #5
   18d06:	d00f      	beq.n	18d28 <ull_conn_tx_ack+0x1b0>
				if (!conn->llcp_length.cache.tx_octets) {
   18d08:	f8b3 21b0 	ldrh.w	r2, [r3, #432]	; 0x1b0
   18d0c:	b992      	cbnz	r2, 18d34 <ull_conn_tx_ack+0x1bc>
					conn->llcp_length.ack =
   18d0e:	f883 01a5 	strb.w	r0, [r3, #421]	; 0x1a5
					conn->procedure_expire = 0U;
   18d12:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					break;
   18d16:	e74d      	b.n	18bb4 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   18d18:	f890 21a6 	ldrb.w	r2, [r0, #422]	; 0x1a6
   18d1c:	2102      	movs	r1, #2
   18d1e:	f361 0202 	bfi	r2, r1, #0, #3
   18d22:	f880 21a6 	strb.w	r2, [r0, #422]	; 0x1a6
		break;
   18d26:	e745      	b.n	18bb4 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   18d28:	2204      	movs	r2, #4
   18d2a:	f362 0102 	bfi	r1, r2, #0, #3
   18d2e:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
					break;
   18d32:	e73f      	b.n	18bb4 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.tx_octets =
   18d34:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
				conn->llcp_length.cache.tx_octets = 0;
   18d38:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18d3a:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   18d3e:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   18d42:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18d46:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
				conn->llcp_length.tx_time =
   18d4a:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
				break;
   18d4e:	e731      	b.n	18bb4 <ull_conn_tx_ack+0x3c>
   18d50:	00027f70 	.word	0x00027f70
   18d54:	0002816c 	.word	0x0002816c
   18d58:	00027ab4 	.word	0x00027ab4
   18d5c:	00028160 	.word	0x00028160
   18d60:	2000e1d0 	.word	0x2000e1d0
   18d64:	2000e428 	.word	0x2000e428
   18d68:	00028178 	.word	0x00028178

00018d6c <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   18d6c:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	if (lll->enc_tx) {
   18d70:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	switch (lll->phy_tx_time) {
   18d74:	f3c3 1302 	ubfx	r3, r3, #4, #3
   18d78:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   18d7a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
	return max_tx_octets;
   18d7e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   18d82:	bf15      	itete	ne
   18d84:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   18d86:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   18d88:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   18d8a:	3b0b      	subeq	r3, #11
   18d8c:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   18d8e:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   18d90:	bf44      	itt	mi
   18d92:	3b04      	submi	r3, #4
   18d94:	b29b      	uxthmi	r3, r3
}
   18d96:	4298      	cmp	r0, r3
   18d98:	bf28      	it	cs
   18d9a:	4618      	movcs	r0, r3
   18d9c:	4770      	bx	lr
   18d9e:	bf00      	nop

00018da0 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   18da0:	b510      	push	{r4, lr}
   18da2:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   18da4:	b930      	cbnz	r0, 18db4 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   18da6:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   18daa:	f36f 0341 	bfc	r3, #1, #1
   18dae:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   18db2:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   18db4:	4a09      	ldr	r2, [pc, #36]	; (18ddc <ticker_update_latency_cancel_op_cb+0x3c>)
   18db6:	490a      	ldr	r1, [pc, #40]	; (18de0 <ticker_update_latency_cancel_op_cb+0x40>)
   18db8:	480a      	ldr	r0, [pc, #40]	; (18de4 <ticker_update_latency_cancel_op_cb+0x44>)
   18dba:	f240 230d 	movw	r3, #525	; 0x20d
   18dbe:	f008 fa69 	bl	21294 <printk>
   18dc2:	4040      	eors	r0, r0
   18dc4:	f380 8811 	msr	BASEPRI, r0
   18dc8:	f04f 0003 	mov.w	r0, #3
   18dcc:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   18dce:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   18dd2:	f36f 0341 	bfc	r3, #1, #1
   18dd6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   18dda:	bd10      	pop	{r4, pc}
   18ddc:	00028198 	.word	0x00028198
   18de0:	000281dc 	.word	0x000281dc
   18de4:	00027ab4 	.word	0x00027ab4

00018de8 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18de8:	b900      	cbnz	r0, 18dec <ticker_op_cb+0x4>
   18dea:	4770      	bx	lr
{
   18dec:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18dee:	4a07      	ldr	r2, [pc, #28]	; (18e0c <ticker_op_cb+0x24>)
   18df0:	4907      	ldr	r1, [pc, #28]	; (18e10 <ticker_op_cb+0x28>)
   18df2:	4808      	ldr	r0, [pc, #32]	; (18e14 <ticker_op_cb+0x2c>)
   18df4:	f240 2305 	movw	r3, #517	; 0x205
   18df8:	f008 fa4c 	bl	21294 <printk>
   18dfc:	4040      	eors	r0, r0
   18dfe:	f380 8811 	msr	BASEPRI, r0
   18e02:	f04f 0003 	mov.w	r0, #3
   18e06:	df02      	svc	2
}
   18e08:	bd08      	pop	{r3, pc}
   18e0a:	bf00      	nop
   18e0c:	00028198 	.word	0x00028198
   18e10:	00027fc8 	.word	0x00027fc8
   18e14:	00027ab4 	.word	0x00027ab4

00018e18 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   18e18:	2801      	cmp	r0, #1
   18e1a:	d000      	beq.n	18e1e <ticker_op_stop_adv_cb+0x6>
   18e1c:	4770      	bx	lr
{
   18e1e:	b510      	push	{r4, lr}
   18e20:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   18e22:	f7fa ff17 	bl	13c54 <ull_disable_mark_get>
   18e26:	4284      	cmp	r4, r0
   18e28:	d00c      	beq.n	18e44 <ticker_op_stop_adv_cb+0x2c>
   18e2a:	4a07      	ldr	r2, [pc, #28]	; (18e48 <ticker_op_stop_adv_cb+0x30>)
   18e2c:	4907      	ldr	r1, [pc, #28]	; (18e4c <ticker_op_stop_adv_cb+0x34>)
   18e2e:	4808      	ldr	r0, [pc, #32]	; (18e50 <ticker_op_stop_adv_cb+0x38>)
   18e30:	f240 13fd 	movw	r3, #509	; 0x1fd
   18e34:	f008 fa2e 	bl	21294 <printk>
   18e38:	4040      	eors	r0, r0
   18e3a:	f380 8811 	msr	BASEPRI, r0
   18e3e:	f04f 0003 	mov.w	r0, #3
   18e42:	df02      	svc	2
}
   18e44:	bd10      	pop	{r4, pc}
   18e46:	bf00      	nop
   18e48:	00028198 	.word	0x00028198
   18e4c:	000281f0 	.word	0x000281f0
   18e50:	00027ab4 	.word	0x00027ab4

00018e54 <ull_slave_ticker_cb>:
{
   18e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e56:	460f      	mov	r7, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   18e58:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
{
   18e5a:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   18e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18e60:	4299      	cmp	r1, r3
   18e62:	d023      	beq.n	18eac <ull_slave_ticker_cb+0x58>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   18e64:	4605      	mov	r5, r0
   18e66:	4601      	mov	r1, r0
   18e68:	4620      	mov	r0, r4
   18e6a:	4616      	mov	r6, r2
   18e6c:	f7fe f888 	bl	16f80 <ull_conn_llcp>
		if (ret) {
   18e70:	b9e0      	cbnz	r0, 18eac <ull_slave_ticker_cb+0x58>
	return ++hdr->ref;
   18e72:	7c23      	ldrb	r3, [r4, #16]
   18e74:	3301      	adds	r3, #1
   18e76:	b2db      	uxtb	r3, r3
   18e78:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   18e7a:	b333      	cbz	r3, 18eca <ull_slave_ticker_cb+0x76>
	p.ticks_at_expire = ticks_at_expire;
   18e7c:	491a      	ldr	r1, [pc, #104]	; (18ee8 <ull_slave_ticker_cb+0x94>)
	mfy.param = &p;
   18e7e:	4b1b      	ldr	r3, [pc, #108]	; (18eec <ull_slave_ticker_cb+0x98>)
	p.ticks_at_expire = ticks_at_expire;
   18e80:	600d      	str	r5, [r1, #0]
	p.param = &conn->lll;
   18e82:	f104 021c 	add.w	r2, r4, #28
   18e86:	60ca      	str	r2, [r1, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   18e88:	2200      	movs	r2, #0
	p.remainder = remainder;
   18e8a:	604f      	str	r7, [r1, #4]
	p.lazy = lazy;
   18e8c:	810e      	strh	r6, [r1, #8]
	mfy.param = &p;
   18e8e:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   18e90:	2001      	movs	r0, #1
   18e92:	4611      	mov	r1, r2
   18e94:	f7f7 f8d0 	bl	10038 <mayfly_enqueue>
	LL_ASSERT(!err);
   18e98:	b948      	cbnz	r0, 18eae <ull_slave_ticker_cb+0x5a>
	ull_conn_tx_demux(UINT8_MAX);
   18e9a:	20ff      	movs	r0, #255	; 0xff
   18e9c:	f7ff faa2 	bl	183e4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   18ea0:	4620      	mov	r0, r4
   18ea2:	21ff      	movs	r1, #255	; 0xff
}
   18ea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   18ea8:	f7ff bd00 	b.w	188ac <ull_conn_tx_lll_enqueue>
}
   18eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   18eae:	4a10      	ldr	r2, [pc, #64]	; (18ef0 <ull_slave_ticker_cb+0x9c>)
   18eb0:	4910      	ldr	r1, [pc, #64]	; (18ef4 <ull_slave_ticker_cb+0xa0>)
   18eb2:	4811      	ldr	r0, [pc, #68]	; (18ef8 <ull_slave_ticker_cb+0xa4>)
   18eb4:	f240 13c1 	movw	r3, #449	; 0x1c1
   18eb8:	f008 f9ec 	bl	21294 <printk>
   18ebc:	4040      	eors	r0, r0
   18ebe:	f380 8811 	msr	BASEPRI, r0
   18ec2:	f04f 0003 	mov.w	r0, #3
   18ec6:	df02      	svc	2
   18ec8:	e7e7      	b.n	18e9a <ull_slave_ticker_cb+0x46>
	LL_ASSERT(ref);
   18eca:	4a09      	ldr	r2, [pc, #36]	; (18ef0 <ull_slave_ticker_cb+0x9c>)
   18ecc:	490b      	ldr	r1, [pc, #44]	; (18efc <ull_slave_ticker_cb+0xa8>)
   18ece:	480a      	ldr	r0, [pc, #40]	; (18ef8 <ull_slave_ticker_cb+0xa4>)
   18ed0:	f240 13b5 	movw	r3, #437	; 0x1b5
   18ed4:	f008 f9de 	bl	21294 <printk>
   18ed8:	4040      	eors	r0, r0
   18eda:	f380 8811 	msr	BASEPRI, r0
   18ede:	f04f 0003 	mov.w	r0, #3
   18ee2:	df02      	svc	2
   18ee4:	e7ca      	b.n	18e7c <ull_slave_ticker_cb+0x28>
   18ee6:	bf00      	nop
   18ee8:	2000e4f0 	.word	0x2000e4f0
   18eec:	200005f4 	.word	0x200005f4
   18ef0:	00028198 	.word	0x00028198
   18ef4:	00027d34 	.word	0x00027d34
   18ef8:	00027ab4 	.word	0x00027ab4
   18efc:	00027ef8 	.word	0x00027ef8

00018f00 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   18f00:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   18f02:	b123      	cbz	r3, 18f0e <ull_slave_latency_cancel+0xe>
   18f04:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   18f08:	f012 0302 	ands.w	r3, r2, #2
   18f0c:	d000      	beq.n	18f10 <ull_slave_latency_cancel+0x10>
   18f0e:	4770      	bx	lr
{
   18f10:	b510      	push	{r4, lr}
		conn->slave.latency_cancel = 1U;
   18f12:	f042 0202 	orr.w	r2, r2, #2
{
   18f16:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   18f18:	4c11      	ldr	r4, [pc, #68]	; (18f60 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   18f1a:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
				      (TICKER_ID_CONN_BASE + handle),
   18f1e:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   18f20:	2201      	movs	r2, #1
   18f22:	e9cd 3202 	strd	r3, r2, [sp, #8]
   18f26:	e9cd 3404 	strd	r3, r4, [sp, #16]
   18f2a:	e9cd 3300 	strd	r3, r3, [sp]
   18f2e:	9006      	str	r0, [sp, #24]
   18f30:	b2ca      	uxtb	r2, r1
   18f32:	4618      	mov	r0, r3
   18f34:	2103      	movs	r1, #3
   18f36:	f7f8 fa61 	bl	113fc <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18f3a:	f030 0302 	bics.w	r3, r0, #2
   18f3e:	d00c      	beq.n	18f5a <ull_slave_latency_cancel+0x5a>
   18f40:	4a08      	ldr	r2, [pc, #32]	; (18f64 <ull_slave_latency_cancel+0x64>)
   18f42:	4909      	ldr	r1, [pc, #36]	; (18f68 <ull_slave_latency_cancel+0x68>)
   18f44:	4809      	ldr	r0, [pc, #36]	; (18f6c <ull_slave_latency_cancel+0x6c>)
   18f46:	f240 1387 	movw	r3, #391	; 0x187
   18f4a:	f008 f9a3 	bl	21294 <printk>
   18f4e:	4040      	eors	r0, r0
   18f50:	f380 8811 	msr	BASEPRI, r0
   18f54:	f04f 0003 	mov.w	r0, #3
   18f58:	df02      	svc	2
}
   18f5a:	b008      	add	sp, #32
   18f5c:	bd10      	pop	{r4, pc}
   18f5e:	bf00      	nop
   18f60:	00018da1 	.word	0x00018da1
   18f64:	00028198 	.word	0x00028198
   18f68:	00028050 	.word	0x00028050
   18f6c:	00027ab4 	.word	0x00027ab4

00018f70 <ll_start_enc_req_send>:
{
   18f70:	b570      	push	{r4, r5, r6, lr}
   18f72:	460e      	mov	r6, r1
   18f74:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   18f76:	f7fc f989 	bl	1528c <ll_connected_get>
	if (!conn) {
   18f7a:	2800      	cmp	r0, #0
   18f7c:	d040      	beq.n	19000 <ll_start_enc_req_send+0x90>
	if (error_code) {
   18f7e:	4604      	mov	r4, r0
   18f80:	b95e      	cbnz	r6, 18f9a <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   18f82:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   18f86:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   18f8a:	429a      	cmp	r2, r3
   18f8c:	d003      	beq.n	18f96 <ll_start_enc_req_send+0x26>
   18f8e:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   18f92:	2b03      	cmp	r3, #3
   18f94:	d026      	beq.n	18fe4 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   18f96:	200c      	movs	r0, #12
}
   18f98:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   18f9a:	f890 015e 	ldrb.w	r0, [r0, #350]	; 0x15e
   18f9e:	f010 0004 	ands.w	r0, r0, #4
   18fa2:	d112      	bne.n	18fca <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   18fa4:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   18fa8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   18fac:	429a      	cmp	r2, r3
   18fae:	d0f2      	beq.n	18f96 <ll_start_enc_req_send+0x26>
   18fb0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   18fb4:	2b03      	cmp	r3, #3
   18fb6:	d1ee      	bne.n	18f96 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   18fb8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->llcp.encryption.error_code = error_code;
   18fbc:	f884 60f9 	strb.w	r6, [r4, #249]	; 0xf9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   18fc0:	f360 0301 	bfi	r3, r0, #0, #2
   18fc4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
}
   18fc8:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   18fca:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
			if (conn->llcp_terminate.ack !=
   18fce:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   18fd2:	4293      	cmp	r3, r2
   18fd4:	d1df      	bne.n	18f96 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   18fd6:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   18fd8:	f884 613a 	strb.w	r6, [r4, #314]	; 0x13a
			conn->llcp_terminate.req++;
   18fdc:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
	return 0;
   18fe0:	2000      	movs	r0, #0
}
   18fe2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   18fe4:	2210      	movs	r2, #16
   18fe6:	4629      	mov	r1, r5
   18fe8:	f200 1069 	addw	r0, r0, #361	; 0x169
   18fec:	f00a fdc5 	bl	23b7a <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   18ff0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
   18ff4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   18ff8:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
	return 0;
   18ffc:	4630      	mov	r0, r6
}
   18ffe:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19000:	2002      	movs	r0, #2
}
   19002:	bd70      	pop	{r4, r5, r6, pc}

00019004 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   19004:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   19006:	fb02 1c01 	mla	ip, r2, r1, r1
   1900a:	7802      	ldrb	r2, [r0, #0]
   1900c:	491c      	ldr	r1, [pc, #112]	; (19080 <lll_chan_sel_1+0x7c>)
{
   1900e:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   19012:	4494      	add	ip, r2
   19014:	fb81 210c 	smull	r2, r1, r1, ip
   19018:	4461      	add	r1, ip
   1901a:	1149      	asrs	r1, r1, #5
   1901c:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   19020:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   19024:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   19026:	ebac 0101 	sub.w	r1, ip, r1
   1902a:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   1902c:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1902e:	08c4      	lsrs	r4, r0, #3
   19030:	f001 0107 	and.w	r1, r1, #7
   19034:	f813 c004 	ldrb.w	ip, [r3, r4]
   19038:	fa4c f101 	asr.w	r1, ip, r1
   1903c:	f011 0101 	ands.w	r1, r1, #1
   19040:	d11d      	bne.n	1907e <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   19042:	fbb0 f2f5 	udiv	r2, r0, r5
   19046:	fb05 0212 	mls	r2, r5, r2, r0
   1904a:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1904c:	f103 3eff 	add.w	lr, r3, #4294967295
   19050:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   19052:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   19054:	f100 0c08 	add.w	ip, r0, #8
   19058:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1905c:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   19060:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   19064:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   19068:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   1906c:	d002      	beq.n	19074 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   1906e:	b132      	cbz	r2, 1907e <lll_chan_sel_1+0x7a>
				chan_index--;
   19070:	3a01      	subs	r2, #1
   19072:	b2d2      	uxtb	r2, r2
			chan_next++;
   19074:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   19076:	4584      	cmp	ip, r0
   19078:	d1f2      	bne.n	19060 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1907a:	45a6      	cmp	lr, r4
   1907c:	d1ea      	bne.n	19054 <lll_chan_sel_1+0x50>
}
   1907e:	bd30      	pop	{r4, r5, pc}
   19080:	dd67c8a7 	.word	0xdd67c8a7

00019084 <lll_chan_sel_2>:
{
   19084:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   19086:	4d2f      	ldr	r5, [pc, #188]	; (19144 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   19088:	4c2f      	ldr	r4, [pc, #188]	; (19148 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   1908a:	4048      	eors	r0, r1
   1908c:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   19090:	0a07      	lsrs	r7, r0, #8
   19092:	b2c0      	uxtb	r0, r0
   19094:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   19098:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   1909c:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   190a0:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   190a4:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   190a8:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   190ac:	433e      	orrs	r6, r7
   190ae:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   190b2:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   190b6:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   190ba:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   190be:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   190c2:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   190c4:	f3c0 4007 	ubfx	r0, r0, #16, #8
   190c8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   190cc:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   190d0:	f10c 3cff 	add.w	ip, ip, #4294967295
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   190d4:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   190d6:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   190da:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   190dc:	d1d8      	bne.n	19090 <lll_chan_sel_2+0xc>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   190de:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   190e0:	481a      	ldr	r0, [pc, #104]	; (1914c <lll_chan_sel_2+0xc8>)
   190e2:	fba0 4001 	umull	r4, r0, r0, r1
   190e6:	1a0c      	subs	r4, r1, r0
   190e8:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   190ec:	0940      	lsrs	r0, r0, #5
   190ee:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   190f2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   190f6:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   190f8:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   190fc:	f000 0507 	and.w	r5, r0, #7
   19100:	5d14      	ldrb	r4, [r2, r4]
   19102:	412c      	asrs	r4, r5
   19104:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   19106:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19108:	d41a      	bmi.n	19140 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1910a:	fb01 f303 	mul.w	r3, r1, r3
   1910e:	1e56      	subs	r6, r2, #1
   19110:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   19114:	3204      	adds	r2, #4
	chan_next = 0U;
   19116:	4660      	mov	r0, ip
		bite = *chan_map;
   19118:	f100 0508 	add.w	r5, r0, #8
   1911c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   19120:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   19122:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   19126:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   1912a:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1912e:	d002      	beq.n	19136 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   19130:	b133      	cbz	r3, 19140 <lll_chan_sel_2+0xbc>
				chan_index--;
   19132:	3b01      	subs	r3, #1
   19134:	b2db      	uxtb	r3, r3
			chan_next++;
   19136:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   19138:	42a8      	cmp	r0, r5
   1913a:	d1f2      	bne.n	19122 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   1913c:	42b2      	cmp	r2, r6
   1913e:	d1eb      	bne.n	19118 <lll_chan_sel_2+0x94>
}
   19140:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19142:	bf00      	nop
   19144:	00022110 	.word	0x00022110
   19148:	00088440 	.word	0x00088440
   1914c:	bacf914d 	.word	0xbacf914d

00019150 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   19150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19154:	4d18      	ldr	r5, [pc, #96]	; (191b8 <rl_update+0x68>)
   19156:	4e19      	ldr	r6, [pc, #100]	; (191bc <rl_update+0x6c>)
   19158:	2400      	movs	r4, #0
   1915a:	f106 39ff 	add.w	r9, r6, #4294967295
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1915e:	1eaf      	subs	r7, r5, #2
   19160:	f04f 0801 	mov.w	r8, #1
   19164:	e006      	b.n	19174 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19166:	3401      	adds	r4, #1
   19168:	2c08      	cmp	r4, #8
   1916a:	f105 0506 	add.w	r5, r5, #6
   1916e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19172:	d01e      	beq.n	191b2 <rl_update+0x62>
		if (rl[i].taken) {
   19174:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19178:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   1917c:	07da      	lsls	r2, r3, #31
   1917e:	d5f2      	bpl.n	19166 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   19180:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19182:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   19184:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   19188:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1918c:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   1918e:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19192:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19194:	4631      	mov	r1, r6
   19196:	4628      	mov	r0, r5
   19198:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1919a:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   1919c:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   191a0:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   191a2:	f00a fcea 	bl	23b7a <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   191a6:	2c08      	cmp	r4, #8
   191a8:	f105 0506 	add.w	r5, r5, #6
   191ac:	f106 0628 	add.w	r6, r6, #40	; 0x28
   191b0:	d1e0      	bne.n	19174 <rl_update+0x24>
}
   191b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   191b6:	bf00      	nop
   191b8:	2000e6fa 	.word	0x2000e6fa
   191bc:	2000e5b9 	.word	0x2000e5b9

000191c0 <wl_update>:
{
   191c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   191c4:	4e20      	ldr	r6, [pc, #128]	; (19248 <wl_update+0x88>)
   191c6:	4d21      	ldr	r5, [pc, #132]	; (1924c <wl_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   191c8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 19250 <wl_update+0x90>
   191cc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 19254 <wl_update+0x94>
{
   191d0:	2400      	movs	r4, #0
   191d2:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   191d6:	1eb7      	subs	r7, r6, #2
		if (!wl[i].taken) {
   191d8:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   191dc:	f04f 0c01 	mov.w	ip, #1
		if (!wl[i].taken) {
   191e0:	f013 0f01 	tst.w	r3, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   191e4:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   191e6:	fa0c fc04 	lsl.w	ip, ip, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   191ea:	4629      	mov	r1, r5
	for (i = 0U; i < WL_SIZE; i++) {
   191ec:	f106 0606 	add.w	r6, r6, #6
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   191f0:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   191f4:	d021      	beq.n	1923a <wl_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   191f6:	f898 3000 	ldrb.w	r3, [r8]
   191fa:	b163      	cbz	r3, 19216 <wl_update+0x56>
		j = wl[i].rl_idx;
   191fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19200:	2b07      	cmp	r3, #7
   19202:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   19206:	d806      	bhi.n	19216 <wl_update+0x56>
   19208:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   1920c:	f013 0f04 	tst.w	r3, #4
   19210:	d001      	beq.n	19216 <wl_update+0x56>
   19212:	06db      	lsls	r3, r3, #27
   19214:	d511      	bpl.n	1923a <wl_update+0x7a>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19216:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1921a:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1921e:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   19222:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19226:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   1922a:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1922e:	40a3      	lsls	r3, r4
   19230:	ea4e 0303 	orr.w	r3, lr, r3
   19234:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19236:	f00a fca0 	bl	23b7a <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   1923a:	3401      	adds	r4, #1
   1923c:	2c08      	cmp	r4, #8
   1923e:	f105 0508 	add.w	r5, r5, #8
   19242:	d1c9      	bne.n	191d8 <wl_update+0x18>
}
   19244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19248:	2000e772 	.word	0x2000e772
   1924c:	2000e732 	.word	0x2000e732
   19250:	2000f2b6 	.word	0x2000f2b6
   19254:	2000e5b8 	.word	0x2000e5b8

00019258 <ll_wl_size_get>:
}
   19258:	2008      	movs	r0, #8
   1925a:	4770      	bx	lr

0001925c <ll_wl_clear>:
{
   1925c:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   1925e:	2000      	movs	r0, #0
   19260:	f7fb fa58 	bl	14714 <ull_adv_filter_pol_get>
   19264:	b9d8      	cbnz	r0, 1929e <ll_wl_clear+0x42>
   19266:	4a0f      	ldr	r2, [pc, #60]	; (192a4 <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   19268:	4c0f      	ldr	r4, [pc, #60]	; (192a8 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   1926a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1926e:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   19270:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   19272:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   19276:	d805      	bhi.n	19284 <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   19278:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   1927c:	f36f 1345 	bfc	r3, #5, #1
   19280:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   19284:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   19288:	f36f 0300 	bfc	r3, #0, #1
   1928c:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   19290:	3001      	adds	r0, #1
   19292:	2808      	cmp	r0, #8
   19294:	d1e9      	bne.n	1926a <ll_wl_clear+0xe>
	wl_anon = 0U;
   19296:	4b05      	ldr	r3, [pc, #20]	; (192ac <ll_wl_clear+0x50>)
   19298:	2000      	movs	r0, #0
   1929a:	7018      	strb	r0, [r3, #0]
}
   1929c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1929e:	200c      	movs	r0, #12
}
   192a0:	bd10      	pop	{r4, pc}
   192a2:	bf00      	nop
   192a4:	2000e730 	.word	0x2000e730
   192a8:	2000e5b8 	.word	0x2000e5b8
   192ac:	2000f2b7 	.word	0x2000f2b7

000192b0 <ll_wl_add>:
{
   192b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192b4:	4681      	mov	r9, r0
   192b6:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   192b8:	2000      	movs	r0, #0
   192ba:	f7fb fa2b 	bl	14714 <ull_adv_filter_pol_get>
   192be:	2800      	cmp	r0, #0
   192c0:	d173      	bne.n	193aa <ll_wl_add+0xfa>
	if (addr->type == ADDR_TYPE_ANON) {
   192c2:	f899 a000 	ldrb.w	sl, [r9]
   192c6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   192ca:	4605      	mov	r5, r0
   192cc:	d067      	beq.n	1939e <ll_wl_add+0xee>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   192ce:	4e45      	ldr	r6, [pc, #276]	; (193e4 <ll_wl_add+0x134>)
   192d0:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   192d4:	f00a 0a01 	and.w	sl, sl, #1
		*free = FILTER_IDX_NONE;
   192d8:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   192dc:	4604      	mov	r4, r0
   192de:	1eb7      	subs	r7, r6, #2
   192e0:	e009      	b.n	192f6 <ll_wl_add+0x46>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   192e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   192e6:	d101      	bne.n	192ec <ll_wl_add+0x3c>
			*free = i;
   192e8:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < WL_SIZE; i++) {
   192ec:	3401      	adds	r4, #1
   192ee:	2c08      	cmp	r4, #8
   192f0:	f106 0608 	add.w	r6, r6, #8
   192f4:	d017      	beq.n	19326 <ll_wl_add+0x76>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   192f6:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   192fa:	07d8      	lsls	r0, r3, #31
   192fc:	f3c3 0240 	ubfx	r2, r3, #1, #1
   19300:	d5ef      	bpl.n	192e2 <ll_wl_add+0x32>
   19302:	4552      	cmp	r2, sl
   19304:	d1f2      	bne.n	192ec <ll_wl_add+0x3c>
   19306:	2206      	movs	r2, #6
   19308:	4630      	mov	r0, r6
   1930a:	4659      	mov	r1, fp
   1930c:	f00a fc24 	bl	23b58 <memcmp>
   19310:	2800      	cmp	r0, #0
   19312:	d041      	beq.n	19398 <ll_wl_add+0xe8>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19314:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   19318:	07d9      	lsls	r1, r3, #31
   1931a:	d5e2      	bpl.n	192e2 <ll_wl_add+0x32>
	for (i = 0; i < WL_SIZE; i++) {
   1931c:	3401      	adds	r4, #1
   1931e:	2c08      	cmp	r4, #8
   19320:	f106 0608 	add.w	r6, r6, #8
   19324:	d1e7      	bne.n	192f6 <ll_wl_add+0x46>
	} else if (j >= ARRAY_SIZE(wl)) {
   19326:	f1b8 0f07 	cmp.w	r8, #7
   1932a:	d856      	bhi.n	193da <ll_wl_add+0x12a>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1932c:	f899 2000 	ldrb.w	r2, [r9]
   19330:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   19334:	4e2c      	ldr	r6, [pc, #176]	; (193e8 <ll_wl_add+0x138>)
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19336:	2002      	movs	r0, #2
	wl[i].id_addr_type = id_addr->type & 0x1;
   19338:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1933c:	fb14 0008 	smlabb	r0, r4, r8, r0
	wl[i].id_addr_type = id_addr->type & 0x1;
   19340:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   19344:	4438      	add	r0, r7
   19346:	2206      	movs	r2, #6
   19348:	4659      	mov	r1, fp
   1934a:	f00a fc16 	bl	23b7a <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1934e:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19352:	f106 39ff 	add.w	r9, r6, #4294967295
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19356:	f003 0301 	and.w	r3, r3, #1
   1935a:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   1935e:	fa5f fa85 	uxtb.w	sl, r5
   19362:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   19366:	f3c2 1180 	ubfx	r1, r2, #6, #1
   1936a:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1936c:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19370:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   19374:	d501      	bpl.n	1937a <ll_wl_add+0xca>
   19376:	4299      	cmp	r1, r3
   19378:	d01b      	beq.n	193b2 <ll_wl_add+0x102>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1937a:	2d08      	cmp	r5, #8
   1937c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19380:	d1eb      	bne.n	1935a <ll_wl_add+0xaa>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19382:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   19386:	22ff      	movs	r2, #255	; 0xff
   19388:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   1938a:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   1938e:	f043 0301 	orr.w	r3, r3, #1
   19392:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   19396:	2000      	movs	r0, #0
}
   19398:	b003      	add	sp, #12
   1939a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl_anon = 1U;
   1939e:	4b13      	ldr	r3, [pc, #76]	; (193ec <ll_wl_add+0x13c>)
   193a0:	2201      	movs	r2, #1
   193a2:	701a      	strb	r2, [r3, #0]
}
   193a4:	b003      	add	sp, #12
   193a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   193aa:	200c      	movs	r0, #12
}
   193ac:	b003      	add	sp, #12
   193ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   193b2:	4630      	mov	r0, r6
   193b4:	2206      	movs	r2, #6
   193b6:	4659      	mov	r1, fp
   193b8:	9301      	str	r3, [sp, #4]
   193ba:	f00a fbcd 	bl	23b58 <memcmp>
   193be:	9b01      	ldr	r3, [sp, #4]
   193c0:	2800      	cmp	r0, #0
   193c2:	d1da      	bne.n	1937a <ll_wl_add+0xca>
		rl[j].wl = 1U;
   193c4:	f819 3004 	ldrb.w	r3, [r9, r4]
   193c8:	f043 0320 	orr.w	r3, r3, #32
   193cc:	f809 3004 	strb.w	r3, [r9, r4]
		wl[i].rl_idx = j;
   193d0:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   193d4:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].wl = 1U;
   193d8:	e7d7      	b.n	1938a <ll_wl_add+0xda>
   193da:	2007      	movs	r0, #7
}
   193dc:	b003      	add	sp, #12
   193de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193e2:	bf00      	nop
   193e4:	2000e732 	.word	0x2000e732
   193e8:	2000e5b9 	.word	0x2000e5b9
   193ec:	2000f2b7 	.word	0x2000f2b7

000193f0 <ll_wl_remove>:
{
   193f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193f4:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   193f6:	2000      	movs	r0, #0
   193f8:	f7fb f98c 	bl	14714 <ull_adv_filter_pol_get>
   193fc:	2800      	cmp	r0, #0
   193fe:	d13b      	bne.n	19478 <ll_wl_remove+0x88>
	if (addr->type == ADDR_TYPE_ANON) {
   19400:	783e      	ldrb	r6, [r7, #0]
   19402:	2eff      	cmp	r6, #255	; 0xff
   19404:	4604      	mov	r4, r0
   19406:	d033      	beq.n	19470 <ll_wl_remove+0x80>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   19408:	4d1d      	ldr	r5, [pc, #116]	; (19480 <ll_wl_remove+0x90>)
   1940a:	3701      	adds	r7, #1
	for (i = 0; i < WL_SIZE; i++) {
   1940c:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19410:	f006 0601 	and.w	r6, r6, #1
   19414:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   19418:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1941c:	07db      	lsls	r3, r3, #31
   1941e:	d501      	bpl.n	19424 <ll_wl_remove+0x34>
   19420:	42b2      	cmp	r2, r6
   19422:	d007      	beq.n	19434 <ll_wl_remove+0x44>
	for (i = 0; i < WL_SIZE; i++) {
   19424:	3401      	adds	r4, #1
   19426:	2c08      	cmp	r4, #8
   19428:	f105 0508 	add.w	r5, r5, #8
   1942c:	d1f2      	bne.n	19414 <ll_wl_remove+0x24>
   1942e:	2002      	movs	r0, #2
}
   19430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19434:	2206      	movs	r2, #6
   19436:	4628      	mov	r0, r5
   19438:	4639      	mov	r1, r7
   1943a:	f00a fb8d 	bl	23b58 <memcmp>
   1943e:	2800      	cmp	r0, #0
   19440:	d1f0      	bne.n	19424 <ll_wl_remove+0x34>
		uint8_t j = wl[i].rl_idx;
   19442:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   19446:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   19448:	2b07      	cmp	r3, #7
   1944a:	d808      	bhi.n	1945e <ll_wl_remove+0x6e>
			rl[j].wl = 0U;
   1944c:	4a0d      	ldr	r2, [pc, #52]	; (19484 <ll_wl_remove+0x94>)
   1944e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19452:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   19456:	f360 1145 	bfi	r1, r0, #5, #1
   1945a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		wl[i].taken = 0U;
   1945e:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   19462:	f36f 0300 	bfc	r3, #0, #1
   19466:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   1946a:	2000      	movs	r0, #0
}
   1946c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 0U;
   19470:	4b05      	ldr	r3, [pc, #20]	; (19488 <ll_wl_remove+0x98>)
   19472:	7018      	strb	r0, [r3, #0]
}
   19474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19478:	200c      	movs	r0, #12
}
   1947a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1947e:	bf00      	nop
   19480:	2000e732 	.word	0x2000e732
   19484:	2000e5b8 	.word	0x2000e5b8
   19488:	2000f2b7 	.word	0x2000f2b7

0001948c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1948c:	2807      	cmp	r0, #7
{
   1948e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19492:	4604      	mov	r4, r0
   19494:	460e      	mov	r6, r1
   19496:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19498:	d817      	bhi.n	194ca <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   1949a:	4d19      	ldr	r5, [pc, #100]	; (19500 <ll_rl_id_addr_get+0x74>)
   1949c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   194a0:	00a7      	lsls	r7, r4, #2
   194a2:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   194a6:	07db      	lsls	r3, r3, #31
   194a8:	d51c      	bpl.n	194e4 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   194aa:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   194ac:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   194ae:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   194b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   194b6:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   194ba:	7033      	strb	r3, [r6, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   194bc:	4640      	mov	r0, r8
   194be:	2206      	movs	r2, #6
}
   194c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   194c4:	3101      	adds	r1, #1
   194c6:	f00a bb58 	b.w	23b7a <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   194ca:	4a0e      	ldr	r2, [pc, #56]	; (19504 <ll_rl_id_addr_get+0x78>)
   194cc:	490e      	ldr	r1, [pc, #56]	; (19508 <ll_rl_id_addr_get+0x7c>)
   194ce:	480f      	ldr	r0, [pc, #60]	; (1950c <ll_rl_id_addr_get+0x80>)
   194d0:	23e9      	movs	r3, #233	; 0xe9
   194d2:	f007 fedf 	bl	21294 <printk>
   194d6:	4040      	eors	r0, r0
   194d8:	f380 8811 	msr	BASEPRI, r0
   194dc:	f04f 0003 	mov.w	r0, #3
   194e0:	df02      	svc	2
   194e2:	e7da      	b.n	1949a <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   194e4:	4a07      	ldr	r2, [pc, #28]	; (19504 <ll_rl_id_addr_get+0x78>)
   194e6:	490a      	ldr	r1, [pc, #40]	; (19510 <ll_rl_id_addr_get+0x84>)
   194e8:	4808      	ldr	r0, [pc, #32]	; (1950c <ll_rl_id_addr_get+0x80>)
   194ea:	23ea      	movs	r3, #234	; 0xea
   194ec:	f007 fed2 	bl	21294 <printk>
   194f0:	4040      	eors	r0, r0
   194f2:	f380 8811 	msr	BASEPRI, r0
   194f6:	f04f 0003 	mov.w	r0, #3
   194fa:	df02      	svc	2
   194fc:	e7d5      	b.n	194aa <ll_rl_id_addr_get+0x1e>
   194fe:	bf00      	nop
   19500:	2000e5b8 	.word	0x2000e5b8
   19504:	00028248 	.word	0x00028248
   19508:	0002828c 	.word	0x0002828c
   1950c:	00027ab4 	.word	0x00027ab4
   19510:	00028298 	.word	0x00028298

00019514 <ll_rl_size_get>:
   19514:	2008      	movs	r0, #8
   19516:	4770      	bx	lr

00019518 <ll_rl_clear>:
{
   19518:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1951a:	2000      	movs	r0, #0
   1951c:	f7fb f8ee 	bl	146fc <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19520:	bb88      	cbnz	r0, 19586 <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   19522:	4b1a      	ldr	r3, [pc, #104]	; (1958c <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   19524:	4c1a      	ldr	r4, [pc, #104]	; (19590 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   19526:	7819      	ldrb	r1, [r3, #0]
   19528:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   1952c:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   1952e:	f360 0100 	bfi	r1, r0, #0, #1
   19532:	f360 0200 	bfi	r2, r0, #0, #1
   19536:	7019      	strb	r1, [r3, #0]
   19538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1953c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   19540:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   19544:	f360 0100 	bfi	r1, r0, #0, #1
   19548:	f360 0200 	bfi	r2, r0, #0, #1
   1954c:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   19550:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   19554:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   19558:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   1955c:	f360 0100 	bfi	r1, r0, #0, #1
   19560:	f360 0200 	bfi	r2, r0, #0, #1
   19564:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   19568:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   1956c:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   19570:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   19574:	f360 0100 	bfi	r1, r0, #0, #1
   19578:	f360 0200 	bfi	r2, r0, #0, #1
   1957c:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   19580:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   19584:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19586:	200c      	movs	r0, #12
}
   19588:	bd10      	pop	{r4, pc}
   1958a:	bf00      	nop
   1958c:	2000e5b8 	.word	0x2000e5b8
   19590:	2000f2b5 	.word	0x2000f2b5

00019594 <ll_rl_remove>:
{
   19594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19598:	4681      	mov	r9, r0
   1959a:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1959c:	2000      	movs	r0, #0
   1959e:	f7fb f8ad 	bl	146fc <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   195a2:	2800      	cmp	r0, #0
   195a4:	d149      	bne.n	1963a <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   195a6:	46ca      	mov	sl, r9
   195a8:	4e4d      	ldr	r6, [pc, #308]	; (196e0 <ll_rl_remove+0x14c>)
   195aa:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   195ae:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   195b0:	f008 0801 	and.w	r8, r8, #1
   195b4:	1e75      	subs	r5, r6, #1
   195b6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   195ba:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   195be:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   195c2:	f3c2 1380 	ubfx	r3, r2, #6, #1
   195c6:	07d2      	lsls	r2, r2, #31
   195c8:	ea4f 0784 	mov.w	r7, r4, lsl #2
   195cc:	d501      	bpl.n	195d2 <ll_rl_remove+0x3e>
   195ce:	4543      	cmp	r3, r8
   195d0:	d008      	beq.n	195e4 <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   195d2:	3401      	adds	r4, #1
   195d4:	2c08      	cmp	r4, #8
   195d6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   195da:	d1ec      	bne.n	195b6 <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   195dc:	2002      	movs	r0, #2
}
   195de:	b003      	add	sp, #12
   195e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   195e4:	4630      	mov	r0, r6
   195e6:	2206      	movs	r2, #6
   195e8:	4651      	mov	r1, sl
   195ea:	f00a fab5 	bl	23b58 <memcmp>
   195ee:	4603      	mov	r3, r0
   195f0:	2800      	cmp	r0, #0
   195f2:	d1ee      	bne.n	195d2 <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   195f4:	f89b 2000 	ldrb.w	r2, [fp]
   195f8:	0752      	lsls	r2, r2, #29
   195fa:	d430      	bmi.n	1965e <ll_rl_remove+0xca>
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   195fc:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < WL_SIZE; i++) {
   19600:	4e38      	ldr	r6, [pc, #224]	; (196e4 <ll_rl_remove+0x150>)
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19602:	f009 0901 	and.w	r9, r9, #1
   19606:	f1a6 0802 	sub.w	r8, r6, #2
   1960a:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   1960e:	07d0      	lsls	r0, r2, #31
   19610:	f3c2 0140 	ubfx	r1, r2, #1, #1
   19614:	d501      	bpl.n	1961a <ll_rl_remove+0x86>
   19616:	4549      	cmp	r1, r9
   19618:	d013      	beq.n	19642 <ll_rl_remove+0xae>
	for (i = 0; i < WL_SIZE; i++) {
   1961a:	3301      	adds	r3, #1
   1961c:	2b08      	cmp	r3, #8
   1961e:	f106 0608 	add.w	r6, r6, #8
   19622:	d1f2      	bne.n	1960a <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   19624:	443c      	add	r4, r7
		return 0;
   19626:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   19628:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1962c:	f36f 0300 	bfc	r3, #0, #1
   19630:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   19634:	b003      	add	sp, #12
   19636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1963a:	200c      	movs	r0, #12
}
   1963c:	b003      	add	sp, #12
   1963e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19642:	2206      	movs	r2, #6
   19644:	4630      	mov	r0, r6
   19646:	4651      	mov	r1, sl
   19648:	9301      	str	r3, [sp, #4]
   1964a:	f00a fa85 	bl	23b58 <memcmp>
   1964e:	9b01      	ldr	r3, [sp, #4]
   19650:	2800      	cmp	r0, #0
   19652:	d1e2      	bne.n	1961a <ll_rl_remove+0x86>
			wl[j].rl_idx = FILTER_IDX_NONE;
   19654:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   19658:	22ff      	movs	r2, #255	; 0xff
   1965a:	705a      	strb	r2, [r3, #1]
   1965c:	e7e2      	b.n	19624 <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1965e:	4e22      	ldr	r6, [pc, #136]	; (196e8 <ll_rl_remove+0x154>)
   19660:	7832      	ldrb	r2, [r6, #0]
   19662:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   19664:	f012 08ff 	ands.w	r8, r2, #255	; 0xff
   19668:	d005      	beq.n	19676 <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1966a:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   1966e:	45c3      	cmp	fp, r8
   19670:	d104      	bne.n	1967c <ll_rl_remove+0xe8>
			peer_irk_count--;
   19672:	7032      	strb	r2, [r6, #0]
   19674:	e7c2      	b.n	195fc <ll_rl_remove+0x68>
   19676:	461a      	mov	r2, r3
   19678:	7032      	strb	r2, [r6, #0]
   1967a:	e7bf      	b.n	195fc <ll_rl_remove+0x68>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   1967c:	481b      	ldr	r0, [pc, #108]	; (196ec <ll_rl_remove+0x158>)
   1967e:	9301      	str	r3, [sp, #4]
   19680:	2210      	movs	r2, #16
   19682:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   19686:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   1968a:	f00a fa76 	bl	23b7a <memcpy>
   1968e:	9b01      	ldr	r3, [sp, #4]
   19690:	f8df c05c 	ldr.w	ip, [pc, #92]	; 196f0 <ll_rl_remove+0x15c>
   19694:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   19696:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1969a:	fa5f fe82 	uxtb.w	lr, r2
   1969e:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   196a2:	f010 0f01 	tst.w	r0, #1
   196a6:	f102 0201 	add.w	r2, r2, #1
   196aa:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   196ae:	d005      	beq.n	196bc <ll_rl_remove+0x128>
   196b0:	0740      	lsls	r0, r0, #29
   196b2:	d503      	bpl.n	196bc <ll_rl_remove+0x128>
   196b4:	f89c 0017 	ldrb.w	r0, [ip, #23]
   196b8:	4540      	cmp	r0, r8
   196ba:	d007      	beq.n	196cc <ll_rl_remove+0x138>
				for (k = 0U;
   196bc:	2a08      	cmp	r2, #8
   196be:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   196c2:	d1e8      	bne.n	19696 <ll_rl_remove+0x102>
			peer_irk_count--;
   196c4:	7832      	ldrb	r2, [r6, #0]
   196c6:	3a01      	subs	r2, #1
   196c8:	7032      	strb	r2, [r6, #0]
   196ca:	e797      	b.n	195fc <ll_rl_remove+0x68>
						peer_irk_rl_ids[pi] = k;
   196cc:	4a09      	ldr	r2, [pc, #36]	; (196f4 <ll_rl_remove+0x160>)
						rl[k].pirk_idx = pi;
   196ce:	f881 b017 	strb.w	fp, [r1, #23]
						peer_irk_rl_ids[pi] = k;
   196d2:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   196d6:	7832      	ldrb	r2, [r6, #0]
   196d8:	3a01      	subs	r2, #1
   196da:	7032      	strb	r2, [r6, #0]
   196dc:	e78e      	b.n	195fc <ll_rl_remove+0x68>
   196de:	bf00      	nop
   196e0:	2000e5b9 	.word	0x2000e5b9
   196e4:	2000e732 	.word	0x2000e732
   196e8:	2000f2b5 	.word	0x2000f2b5
   196ec:	2000e538 	.word	0x2000e538
   196f0:	2000e5b8 	.word	0x2000e5b8
   196f4:	2000e530 	.word	0x2000e530

000196f8 <ll_rl_crpa_set>:
{
   196f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   196fc:	795c      	ldrb	r4, [r3, #5]
   196fe:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   19702:	2c40      	cmp	r4, #64	; 0x40
   19704:	d001      	beq.n	1970a <ll_rl_crpa_set+0x12>
}
   19706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   1970a:	461e      	mov	r6, r3
   1970c:	460f      	mov	r7, r1
   1970e:	b301      	cbz	r1, 19752 <ll_rl_crpa_set+0x5a>
   19710:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1977c <ll_rl_crpa_set+0x84>
   19714:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19716:	f000 0a01 	and.w	sl, r0, #1
   1971a:	f109 38ff 	add.w	r8, r9, #4294967295
   1971e:	e003      	b.n	19728 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19720:	2c08      	cmp	r4, #8
   19722:	f109 0928 	add.w	r9, r9, #40	; 0x28
   19726:	d0ee      	beq.n	19706 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19728:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1972c:	4625      	mov	r5, r4
   1972e:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   19732:	f3c2 1380 	ubfx	r3, r2, #6, #1
   19736:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19738:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1973c:	d5f0      	bpl.n	19720 <ll_rl_crpa_set+0x28>
   1973e:	4553      	cmp	r3, sl
   19740:	d1ee      	bne.n	19720 <ll_rl_crpa_set+0x28>
   19742:	4648      	mov	r0, r9
   19744:	2206      	movs	r2, #6
   19746:	4639      	mov	r1, r7
   19748:	f00a fa06 	bl	23b58 <memcmp>
   1974c:	2800      	cmp	r0, #0
   1974e:	d1e7      	bne.n	19720 <ll_rl_crpa_set+0x28>
   19750:	e004      	b.n	1975c <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   19752:	2a07      	cmp	r2, #7
   19754:	d8d7      	bhi.n	19706 <ll_rl_crpa_set+0xe>
   19756:	f8df 8028 	ldr.w	r8, [pc, #40]	; 19780 <ll_rl_crpa_set+0x88>
   1975a:	4615      	mov	r5, r2
   1975c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19760:	00e8      	lsls	r0, r5, #3
   19762:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   19766:	07db      	lsls	r3, r3, #31
   19768:	d5cd      	bpl.n	19706 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1976a:	3018      	adds	r0, #24
   1976c:	4631      	mov	r1, r6
   1976e:	4440      	add	r0, r8
   19770:	2206      	movs	r2, #6
}
   19772:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   19776:	f00a ba00 	b.w	23b7a <memcpy>
   1977a:	bf00      	nop
   1977c:	2000e5b9 	.word	0x2000e5b9
   19780:	2000e5b8 	.word	0x2000e5b8

00019784 <ll_rl_crpa_get>:
{
   19784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19788:	4682      	mov	sl, r0
   1978a:	4e1a      	ldr	r6, [pc, #104]	; (197f4 <ll_rl_crpa_get+0x70>)
   1978c:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   19790:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19792:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19794:	f008 0801 	and.w	r8, r8, #1
   19798:	1e77      	subs	r7, r6, #1
   1979a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1979e:	00d5      	lsls	r5, r2, #3
   197a0:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   197a4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   197a8:	07db      	lsls	r3, r3, #31
   197aa:	f104 0401 	add.w	r4, r4, #1
   197ae:	d501      	bpl.n	197b4 <ll_rl_crpa_get+0x30>
   197b0:	4542      	cmp	r2, r8
   197b2:	d006      	beq.n	197c2 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   197b4:	2c08      	cmp	r4, #8
   197b6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   197ba:	d1ee      	bne.n	1979a <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   197bc:	2002      	movs	r0, #2
}
   197be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   197c2:	4630      	mov	r0, r6
   197c4:	2206      	movs	r2, #6
   197c6:	4651      	mov	r1, sl
   197c8:	f00a f9c6 	bl	23b58 <memcmp>
   197cc:	4683      	mov	fp, r0
   197ce:	2800      	cmp	r0, #0
   197d0:	d1f0      	bne.n	197b4 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   197d2:	f105 0218 	add.w	r2, r5, #24
   197d6:	4417      	add	r7, r2
   197d8:	2106      	movs	r1, #6
   197da:	4638      	mov	r0, r7
   197dc:	f7f6 fb9e 	bl	ff1c <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   197e0:	2800      	cmp	r0, #0
   197e2:	d0eb      	beq.n	197bc <ll_rl_crpa_get+0x38>
   197e4:	2206      	movs	r2, #6
   197e6:	4639      	mov	r1, r7
   197e8:	4648      	mov	r0, r9
   197ea:	f00a f9c6 	bl	23b7a <memcpy>
		return 0;
   197ee:	4658      	mov	r0, fp
}
   197f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197f4:	2000e5b9 	.word	0x2000e5b9

000197f8 <ll_rl_lrpa_get>:
{
   197f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   197fc:	4681      	mov	r9, r0
   197fe:	4e16      	ldr	r6, [pc, #88]	; (19858 <ll_rl_lrpa_get+0x60>)
   19800:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   19804:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19806:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19808:	f008 0801 	and.w	r8, r8, #1
   1980c:	1e77      	subs	r7, r6, #1
   1980e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19812:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   19816:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1981a:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1981e:	07db      	lsls	r3, r3, #31
   19820:	f104 0401 	add.w	r4, r4, #1
   19824:	d501      	bpl.n	1982a <ll_rl_lrpa_get+0x32>
   19826:	4542      	cmp	r2, r8
   19828:	d006      	beq.n	19838 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1982a:	2c08      	cmp	r4, #8
   1982c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19830:	d1ed      	bne.n	1980e <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19832:	2002      	movs	r0, #2
}
   19834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19838:	4630      	mov	r0, r6
   1983a:	2206      	movs	r2, #6
   1983c:	4649      	mov	r1, r9
   1983e:	f00a f98b 	bl	23b58 <memcmp>
   19842:	4683      	mov	fp, r0
   19844:	2800      	cmp	r0, #0
   19846:	d1f0      	bne.n	1982a <ll_rl_lrpa_get+0x32>
   19848:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1984a:	2206      	movs	r2, #6
   1984c:	4650      	mov	r0, sl
   1984e:	f00a f994 	bl	23b7a <memcpy>
		return 0;
   19852:	4658      	mov	r0, fp
}
   19854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19858:	2000e5b9 	.word	0x2000e5b9

0001985c <ll_rl_enable>:
{
   1985c:	b510      	push	{r4, lr}
   1985e:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19860:	2000      	movs	r0, #0
   19862:	f7fa ff4b 	bl	146fc <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19866:	b958      	cbnz	r0, 19880 <ll_rl_enable+0x24>
	switch (enable) {
   19868:	b134      	cbz	r4, 19878 <ll_rl_enable+0x1c>
   1986a:	2c01      	cmp	r4, #1
   1986c:	d001      	beq.n	19872 <ll_rl_enable+0x16>
   1986e:	2012      	movs	r0, #18
}
   19870:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   19872:	4b04      	ldr	r3, [pc, #16]	; (19884 <ll_rl_enable+0x28>)
   19874:	701c      	strb	r4, [r3, #0]
}
   19876:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   19878:	4b02      	ldr	r3, [pc, #8]	; (19884 <ll_rl_enable+0x28>)
   1987a:	701c      	strb	r4, [r3, #0]
	return 0;
   1987c:	4620      	mov	r0, r4
}
   1987e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19880:	200c      	movs	r0, #12
}
   19882:	bd10      	pop	{r4, pc}
   19884:	2000f2b6 	.word	0x2000f2b6

00019888 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   19888:	4b03      	ldr	r3, [pc, #12]	; (19898 <ll_rl_timeout_set+0x10>)
   1988a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1988e:	fb02 f000 	mul.w	r0, r2, r0
   19892:	6018      	str	r0, [r3, #0]
}
   19894:	4770      	bx	lr
   19896:	bf00      	nop
   19898:	2000e72c 	.word	0x2000e72c

0001989c <ll_priv_mode_set>:
{
   1989c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   198a0:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   198a2:	2000      	movs	r0, #0
{
   198a4:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   198a6:	f7fa ff29 	bl	146fc <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   198aa:	bb68      	cbnz	r0, 19908 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   198ac:	4e1d      	ldr	r6, [pc, #116]	; (19924 <ll_priv_mode_set+0x88>)
   198ae:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   198b2:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   198b4:	f009 0901 	and.w	r9, r9, #1
   198b8:	1e77      	subs	r7, r6, #1
   198ba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   198be:	00d5      	lsls	r5, r2, #3
   198c0:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   198c4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   198c8:	07db      	lsls	r3, r3, #31
   198ca:	f104 0401 	add.w	r4, r4, #1
   198ce:	d501      	bpl.n	198d4 <ll_priv_mode_set+0x38>
   198d0:	454a      	cmp	r2, r9
   198d2:	d006      	beq.n	198e2 <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   198d4:	2c08      	cmp	r4, #8
   198d6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   198da:	d1ee      	bne.n	198ba <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   198dc:	2002      	movs	r0, #2
}
   198de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   198e2:	4630      	mov	r0, r6
   198e4:	2206      	movs	r2, #6
   198e6:	4651      	mov	r1, sl
   198e8:	f00a f936 	bl	23b58 <memcmp>
   198ec:	2800      	cmp	r0, #0
   198ee:	d1f1      	bne.n	198d4 <ll_priv_mode_set+0x38>
		switch (mode) {
   198f0:	f1b8 0f00 	cmp.w	r8, #0
   198f4:	d00e      	beq.n	19914 <ll_priv_mode_set+0x78>
   198f6:	f1b8 0f01 	cmp.w	r8, #1
   198fa:	d108      	bne.n	1990e <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   198fc:	5d7b      	ldrb	r3, [r7, r5]
   198fe:	f043 0310 	orr.w	r3, r3, #16
   19902:	557b      	strb	r3, [r7, r5]
}
   19904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19908:	200c      	movs	r0, #12
}
   1990a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   1990e:	2012      	movs	r0, #18
}
   19910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   19914:	5d7b      	ldrb	r3, [r7, r5]
   19916:	f368 1304 	bfi	r3, r8, #4, #1
   1991a:	557b      	strb	r3, [r7, r5]
	return 0;
   1991c:	4640      	mov	r0, r8
}
   1991e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19922:	bf00      	nop
   19924:	2000e5b9 	.word	0x2000e5b9

00019928 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   19928:	b1b0      	cbz	r0, 19958 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   1992a:	4a0d      	ldr	r2, [pc, #52]	; (19960 <ull_filter_adv_scan_state_cb+0x38>)
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1992c:	6812      	ldr	r2, [r2, #0]
{
   1992e:	b510      	push	{r4, lr}
   19930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   19934:	f240 30e7 	movw	r0, #999	; 0x3e7
   19938:	2100      	movs	r1, #0
   1993a:	fbe2 0103 	umlal	r0, r1, r2, r3
   1993e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19942:	2300      	movs	r3, #0
   19944:	f7e7 fa80 	bl	e48 <__aeabi_uldivmod>
}
   19948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1994c:	4602      	mov	r2, r0
   1994e:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   19950:	4804      	ldr	r0, [pc, #16]	; (19964 <ull_filter_adv_scan_state_cb+0x3c>)
   19952:	4905      	ldr	r1, [pc, #20]	; (19968 <ull_filter_adv_scan_state_cb+0x40>)
   19954:	f006 ba98 	b.w	1fe88 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   19958:	4803      	ldr	r0, [pc, #12]	; (19968 <ull_filter_adv_scan_state_cb+0x40>)
   1995a:	f00c bfbd 	b.w	268d8 <k_delayed_work_cancel>
   1995e:	bf00      	nop
   19960:	2000e72c 	.word	0x2000e72c
   19964:	2000ac68 	.word	0x2000ac68
   19968:	2000ab28 	.word	0x2000ab28

0001996c <ull_filter_adv_update>:
{
   1996c:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1996e:	4b09      	ldr	r3, [pc, #36]	; (19994 <ull_filter_adv_update+0x28>)
   19970:	2200      	movs	r2, #0
   19972:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   19974:	b930      	cbnz	r0, 19984 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   19976:	4b08      	ldr	r3, [pc, #32]	; (19998 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   19978:	4a08      	ldr	r2, [pc, #32]	; (1999c <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   1997a:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1997c:	2100      	movs	r1, #0
   1997e:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   19980:	b91b      	cbnz	r3, 1998a <ull_filter_adv_update+0x1e>
}
   19982:	bd08      	pop	{r3, pc}
		wl_update();
   19984:	f7ff fc1c 	bl	191c0 <wl_update>
   19988:	e7f5      	b.n	19976 <ull_filter_adv_update+0xa>
}
   1998a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1998e:	f7ff bbdf 	b.w	19150 <rl_update>
   19992:	bf00      	nop
   19994:	2000e770 	.word	0x2000e770
   19998:	2000f2b6 	.word	0x2000f2b6
   1999c:	2000e6f8 	.word	0x2000e6f8

000199a0 <ull_filter_rpa_update>:
{
   199a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199a4:	4683      	mov	fp, r0
   199a6:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   199a8:	f00c ffef 	bl	2698a <z_impl_k_uptime_ticks>
   199ac:	014b      	lsls	r3, r1, #5
   199ae:	0142      	lsls	r2, r0, #5
   199b0:	1a12      	subs	r2, r2, r0
   199b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   199b6:	eb63 0301 	sbc.w	r3, r3, r1
   199ba:	009b      	lsls	r3, r3, #2
   199bc:	ea4f 0982 	mov.w	r9, r2, lsl #2
   199c0:	eb19 0900 	adds.w	r9, r9, r0
   199c4:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   199c8:	eb41 0103 	adc.w	r1, r1, r3
   199cc:	00cb      	lsls	r3, r1, #3
   199ce:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   199d2:	0bd9      	lsrs	r1, r3, #15
   199d4:	f3c9 3910 	ubfx	r9, r9, #12, #17
   199d8:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   199dc:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   199de:	f1bb 0f00 	cmp.w	fp, #0
   199e2:	d117      	bne.n	19a14 <ull_filter_rpa_update+0x74>
   199e4:	4a5d      	ldr	r2, [pc, #372]	; (19b5c <ull_filter_rpa_update+0x1bc>)
   199e6:	e9d2 3200 	ldrd	r3, r2, [r2]
   199ea:	f1b2 3fff 	cmp.w	r2, #4294967295
   199ee:	bf08      	it	eq
   199f0:	f1b3 3fff 	cmpeq.w	r3, #4294967295
   199f4:	d00e      	beq.n	19a14 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   199f6:	ebb9 0303 	subs.w	r3, r9, r3
   199fa:	eb61 0202 	sbc.w	r2, r1, r2
   199fe:	4958      	ldr	r1, [pc, #352]	; (19b60 <ull_filter_rpa_update+0x1c0>)
   19a00:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   19a02:	428b      	cmp	r3, r1
   19a04:	f172 0300 	sbcs.w	r3, r2, #0
   19a08:	bfac      	ite	ge
   19a0a:	f04f 0a01 	movge.w	sl, #1
   19a0e:	f04f 0a00 	movlt.w	sl, #0
   19a12:	e001      	b.n	19a18 <ull_filter_rpa_update+0x78>
   19a14:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19a18:	4e52      	ldr	r6, [pc, #328]	; (19b64 <ull_filter_rpa_update+0x1c4>)
   19a1a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 19b68 <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   19a1e:	2400      	movs	r4, #0
   19a20:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   19a24:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19a28:	00a5      	lsls	r5, r4, #2
   19a2a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   19a2e:	07da      	lsls	r2, r3, #31
   19a30:	d515      	bpl.n	19a5e <ull_filter_rpa_update+0xbe>
   19a32:	f1ba 0f00 	cmp.w	sl, #0
   19a36:	d101      	bne.n	19a3c <ull_filter_rpa_update+0x9c>
   19a38:	0798      	lsls	r0, r3, #30
   19a3a:	d410      	bmi.n	19a5e <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   19a3c:	192b      	adds	r3, r5, r4
   19a3e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   19a42:	0759      	lsls	r1, r3, #29
   19a44:	d432      	bmi.n	19aac <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   19a46:	192b      	adds	r3, r5, r4
   19a48:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   19a4c:	071a      	lsls	r2, r3, #28
   19a4e:	d41b      	bmi.n	19a88 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   19a50:	4425      	add	r5, r4
   19a52:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   19a56:	f043 0302 	orr.w	r3, r3, #2
   19a5a:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19a5e:	3401      	adds	r4, #1
   19a60:	2c08      	cmp	r4, #8
   19a62:	f108 0806 	add.w	r8, r8, #6
   19a66:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19a6a:	d1db      	bne.n	19a24 <ull_filter_rpa_update+0x84>
	if (all) {
   19a6c:	f1ba 0f00 	cmp.w	sl, #0
   19a70:	d004      	beq.n	19a7c <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   19a72:	4b3a      	ldr	r3, [pc, #232]	; (19b5c <ull_filter_rpa_update+0x1bc>)
   19a74:	9a01      	ldr	r2, [sp, #4]
   19a76:	f8c3 9000 	str.w	r9, [r3]
   19a7a:	605a      	str	r2, [r3, #4]
	if (timeout) {
   19a7c:	f1bb 0f00 	cmp.w	fp, #0
   19a80:	d138      	bne.n	19af4 <ull_filter_rpa_update+0x154>
}
   19a82:	b007      	add	sp, #28
   19a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   19a88:	a902      	add	r1, sp, #8
   19a8a:	f1a6 0017 	sub.w	r0, r6, #23
   19a8e:	f00a f924 	bl	23cda <bt_rpa_create>
				LL_ASSERT(!err);
   19a92:	2800      	cmp	r0, #0
   19a94:	d154      	bne.n	19b40 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   19a96:	ab02      	add	r3, sp, #8
   19a98:	f8c6 3006 	str.w	r3, [r6, #6]
   19a9c:	4619      	mov	r1, r3
   19a9e:	2206      	movs	r2, #6
   19aa0:	4640      	mov	r0, r8
   19aa2:	f00a f86a 	bl	23b7a <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   19aa6:	f8c6 8006 	str.w	r8, [r6, #6]
   19aaa:	e7d1      	b.n	19a50 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   19aac:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   19ab0:	4a2e      	ldr	r2, [pc, #184]	; (19b6c <ull_filter_rpa_update+0x1cc>)
   19ab2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   19ab6:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   19ab8:	f10d 0307 	add.w	r3, sp, #7
   19abc:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   19ac0:	f812 1901 	ldrb.w	r1, [r2], #-1
   19ac4:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   19ac8:	4283      	cmp	r3, r0
   19aca:	d1f9      	bne.n	19ac0 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   19acc:	4631      	mov	r1, r6
   19ace:	a802      	add	r0, sp, #8
   19ad0:	f00a f903 	bl	23cda <bt_rpa_create>
				LL_ASSERT(!err);
   19ad4:	2800      	cmp	r0, #0
   19ad6:	d0b6      	beq.n	19a46 <ull_filter_rpa_update+0xa6>
   19ad8:	4a25      	ldr	r2, [pc, #148]	; (19b70 <ull_filter_rpa_update+0x1d0>)
   19ada:	4926      	ldr	r1, [pc, #152]	; (19b74 <ull_filter_rpa_update+0x1d4>)
   19adc:	4826      	ldr	r0, [pc, #152]	; (19b78 <ull_filter_rpa_update+0x1d8>)
   19ade:	f240 2316 	movw	r3, #534	; 0x216
   19ae2:	f007 fbd7 	bl	21294 <printk>
   19ae6:	4040      	eors	r0, r0
   19ae8:	f380 8811 	msr	BASEPRI, r0
   19aec:	f04f 0003 	mov.w	r0, #3
   19af0:	df02      	svc	2
   19af2:	e7a8      	b.n	19a46 <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   19af4:	2000      	movs	r0, #0
   19af6:	f7fa fdf3 	bl	146e0 <ull_adv_is_enabled_get>
		if (adv) {
   19afa:	4604      	mov	r4, r0
   19afc:	2800      	cmp	r0, #0
   19afe:	d0c0      	beq.n	19a82 <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   19b00:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19b04:	075b      	lsls	r3, r3, #29
   19b06:	d5bc      	bpl.n	19a82 <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   19b08:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   19b0c:	2b07      	cmp	r3, #7
   19b0e:	d8b8      	bhi.n	19a82 <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   19b10:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   19b14:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   19b18:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   19b1a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   19b1c:	302c      	adds	r0, #44	; 0x2c
   19b1e:	f001 f8b7 	bl	1ac90 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   19b22:	7872      	ldrb	r2, [r6, #1]
   19b24:	4605      	mov	r5, r0
   19b26:	3202      	adds	r2, #2
   19b28:	4631      	mov	r1, r6
   19b2a:	f00a f826 	bl	23b7a <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   19b2e:	4629      	mov	r1, r5
   19b30:	4620      	mov	r0, r4
   19b32:	f7fa fe33 	bl	1479c <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   19b36:	f89d 3008 	ldrb.w	r3, [sp, #8]
   19b3a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   19b3e:	e7a0      	b.n	19a82 <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   19b40:	4a0b      	ldr	r2, [pc, #44]	; (19b70 <ull_filter_rpa_update+0x1d0>)
   19b42:	490c      	ldr	r1, [pc, #48]	; (19b74 <ull_filter_rpa_update+0x1d4>)
   19b44:	480c      	ldr	r0, [pc, #48]	; (19b78 <ull_filter_rpa_update+0x1d8>)
   19b46:	f240 2323 	movw	r3, #547	; 0x223
   19b4a:	f007 fba3 	bl	21294 <printk>
   19b4e:	4040      	eors	r0, r0
   19b50:	f380 8811 	msr	BASEPRI, r0
   19b54:	f04f 0003 	mov.w	r0, #3
   19b58:	df02      	svc	2
   19b5a:	e79c      	b.n	19a96 <ull_filter_rpa_update+0xf6>
   19b5c:	2000ab20 	.word	0x2000ab20
   19b60:	2000e72c 	.word	0x2000e72c
   19b64:	2000e5d6 	.word	0x2000e5d6
   19b68:	2000e500 	.word	0x2000e500
   19b6c:	2000e538 	.word	0x2000e538
   19b70:	00028248 	.word	0x00028248
   19b74:	00027d34 	.word	0x00027d34
   19b78:	00027ab4 	.word	0x00027ab4

00019b7c <rpa_timeout>:
{
   19b7c:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   19b7e:	2001      	movs	r0, #1
   19b80:	f7ff ff0e 	bl	199a0 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   19b84:	4a0a      	ldr	r2, [pc, #40]	; (19bb0 <rpa_timeout+0x34>)
   19b86:	6812      	ldr	r2, [r2, #0]
   19b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   19b8c:	f240 30e7 	movw	r0, #999	; 0x3e7
   19b90:	2100      	movs	r1, #0
   19b92:	fbe2 0103 	umlal	r0, r1, r2, r3
   19b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19b9a:	2300      	movs	r3, #0
   19b9c:	f7e7 f954 	bl	e48 <__aeabi_uldivmod>
}
   19ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19ba4:	4602      	mov	r2, r0
   19ba6:	460b      	mov	r3, r1
   19ba8:	4802      	ldr	r0, [pc, #8]	; (19bb4 <rpa_timeout+0x38>)
   19baa:	4903      	ldr	r1, [pc, #12]	; (19bb8 <rpa_timeout+0x3c>)
   19bac:	f006 b96c 	b.w	1fe88 <k_delayed_work_submit_to_queue>
   19bb0:	2000e72c 	.word	0x2000e72c
   19bb4:	2000ac68 	.word	0x2000ac68
   19bb8:	2000ab28 	.word	0x2000ab28

00019bbc <ull_filter_adva_get>:
{
   19bbc:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   19bbe:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19bc2:	2c07      	cmp	r4, #7
   19bc4:	d810      	bhi.n	19be8 <ull_filter_adva_get+0x2c>
   19bc6:	4d10      	ldr	r5, [pc, #64]	; (19c08 <ull_filter_adva_get+0x4c>)
   19bc8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19bcc:	00a6      	lsls	r6, r4, #2
   19bce:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   19bd2:	071a      	lsls	r2, r3, #28
   19bd4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   19bd8:	d505      	bpl.n	19be6 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   19bda:	079b      	lsls	r3, r3, #30
   19bdc:	d506      	bpl.n	19bec <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   19bde:	4434      	add	r4, r6
   19be0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   19be4:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   19be6:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   19be8:	2000      	movs	r0, #0
}
   19bea:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   19bec:	4a07      	ldr	r2, [pc, #28]	; (19c0c <ull_filter_adva_get+0x50>)
   19bee:	4908      	ldr	r1, [pc, #32]	; (19c10 <ull_filter_adva_get+0x54>)
   19bf0:	4808      	ldr	r0, [pc, #32]	; (19c14 <ull_filter_adva_get+0x58>)
   19bf2:	f240 2349 	movw	r3, #585	; 0x249
   19bf6:	f007 fb4d 	bl	21294 <printk>
   19bfa:	4040      	eors	r0, r0
   19bfc:	f380 8811 	msr	BASEPRI, r0
   19c00:	f04f 0003 	mov.w	r0, #3
   19c04:	df02      	svc	2
   19c06:	e7ea      	b.n	19bde <ull_filter_adva_get+0x22>
   19c08:	2000e5b8 	.word	0x2000e5b8
   19c0c:	00028248 	.word	0x00028248
   19c10:	000282ac 	.word	0x000282ac
   19c14:	00027ab4 	.word	0x00027ab4

00019c18 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   19c18:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19c1c:	2b07      	cmp	r3, #7
   19c1e:	d80d      	bhi.n	19c3c <ull_filter_tgta_get+0x24>
   19c20:	4a07      	ldr	r2, [pc, #28]	; (19c40 <ull_filter_tgta_get+0x28>)
   19c22:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   19c26:	f812 1031 	ldrb.w	r1, [r2, r1, lsl #3]
   19c2a:	f3c1 0080 	ubfx	r0, r1, #2, #1
   19c2e:	0749      	lsls	r1, r1, #29
   19c30:	d505      	bpl.n	19c3e <ull_filter_tgta_get+0x26>
		return rl[idx].peer_rpa.val;
   19c32:	2028      	movs	r0, #40	; 0x28
   19c34:	fb00 2003 	mla	r0, r0, r3, r2
   19c38:	301e      	adds	r0, #30
   19c3a:	4770      	bx	lr
	return NULL;
   19c3c:	2000      	movs	r0, #0
}
   19c3e:	4770      	bx	lr
   19c40:	2000e5b8 	.word	0x2000e5b8

00019c44 <ull_filter_rl_find>:
{
   19c44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c48:	468b      	mov	fp, r1
	if (free) {
   19c4a:	4617      	mov	r7, r2
   19c4c:	b10a      	cbz	r2, 19c52 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   19c4e:	23ff      	movs	r3, #255	; 0xff
   19c50:	7013      	strb	r3, [r2, #0]
   19c52:	4d1b      	ldr	r5, [pc, #108]	; (19cc0 <ull_filter_rl_find+0x7c>)
{
   19c54:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19c56:	f000 0a01 	and.w	sl, r0, #1
   19c5a:	f105 39ff 	add.w	r9, r5, #4294967295
   19c5e:	e006      	b.n	19c6e <ull_filter_rl_find+0x2a>
   19c60:	4552      	cmp	r2, sl
   19c62:	d01f      	beq.n	19ca4 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19c64:	3401      	adds	r4, #1
   19c66:	2c08      	cmp	r4, #8
   19c68:	f105 0528 	add.w	r5, r5, #40	; 0x28
   19c6c:	d015      	beq.n	19c9a <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19c6e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   19c72:	fa5f f884 	uxtb.w	r8, r4
   19c76:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   19c7a:	07d9      	lsls	r1, r3, #31
   19c7c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   19c80:	d4ee      	bmi.n	19c60 <ull_filter_rl_find+0x1c>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   19c82:	2f00      	cmp	r7, #0
   19c84:	d0ee      	beq.n	19c64 <ull_filter_rl_find+0x20>
   19c86:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19c88:	3401      	adds	r4, #1
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   19c8a:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   19c8c:	bf08      	it	eq
   19c8e:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19c92:	2c08      	cmp	r4, #8
   19c94:	f105 0528 	add.w	r5, r5, #40	; 0x28
   19c98:	d1e9      	bne.n	19c6e <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   19c9a:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   19c9e:	4640      	mov	r0, r8
   19ca0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19ca4:	4628      	mov	r0, r5
   19ca6:	2206      	movs	r2, #6
   19ca8:	4659      	mov	r1, fp
   19caa:	f009 ff55 	bl	23b58 <memcmp>
   19cae:	2800      	cmp	r0, #0
   19cb0:	d0f5      	beq.n	19c9e <ull_filter_rl_find+0x5a>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   19cb2:	2f00      	cmp	r7, #0
   19cb4:	d0d6      	beq.n	19c64 <ull_filter_rl_find+0x20>
   19cb6:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   19cba:	07db      	lsls	r3, r3, #31
   19cbc:	d4d2      	bmi.n	19c64 <ull_filter_rl_find+0x20>
   19cbe:	e7e2      	b.n	19c86 <ull_filter_rl_find+0x42>
   19cc0:	2000e5b9 	.word	0x2000e5b9

00019cc4 <ll_rl_add>:
{
   19cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cc8:	4680      	mov	r8, r0
   19cca:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19ccc:	2000      	movs	r0, #0
{
   19cce:	460e      	mov	r6, r1
   19cd0:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19cd2:	f7fa fd13 	bl	146fc <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19cd6:	2800      	cmp	r0, #0
   19cd8:	d17d      	bne.n	19dd6 <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   19cda:	46c2      	mov	sl, r8
   19cdc:	4604      	mov	r4, r0
   19cde:	f81a 0b01 	ldrb.w	r0, [sl], #1
   19ce2:	f10d 020f 	add.w	r2, sp, #15
   19ce6:	4651      	mov	r1, sl
   19ce8:	f7ff ffac 	bl	19c44 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   19cec:	2807      	cmp	r0, #7
   19cee:	f240 80b5 	bls.w	19e5c <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   19cf2:	f89d 700f 	ldrb.w	r7, [sp, #15]
   19cf6:	2f07      	cmp	r7, #7
   19cf8:	f200 8084 	bhi.w	19e04 <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   19cfc:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   19d00:	4d58      	ldr	r5, [pc, #352]	; (19e64 <ll_rl_add+0x1a0>)
   19d02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   19d06:	1c58      	adds	r0, r3, #1
   19d08:	2206      	movs	r2, #6
   19d0a:	4651      	mov	r1, sl
   19d0c:	4428      	add	r0, r5
   19d0e:	9300      	str	r3, [sp, #0]
   19d10:	f009 ff33 	bl	23b7a <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   19d14:	f898 3000 	ldrb.w	r3, [r8]
   19d18:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   19d1c:	465a      	mov	r2, fp
   19d1e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   19d22:	f363 1186 	bfi	r1, r3, #6, #1
   19d26:	f805 100b 	strb.w	r1, [r5, fp]
   19d2a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19d2e:	2110      	movs	r1, #16
   19d30:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   19d32:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19d34:	f7f6 f8f2 	bl	ff1c <mem_nz>
   19d38:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19d3c:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19d3e:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19d42:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   19d44:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   19d48:	f7f6 f8e8 	bl	ff1c <mem_nz>
   19d4c:	f815 200b 	ldrb.w	r2, [r5, fp]
   19d50:	f000 0001 	and.w	r0, r0, #1
   19d54:	f360 02c3 	bfi	r2, r0, #3, #1
   19d58:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   19d5c:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   19d5e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   19d62:	d453      	bmi.n	19e0c <ll_rl_add+0x148>
	if (rl[i].lirk) {
   19d64:	2800      	cmp	r0, #0
   19d66:	d16b      	bne.n	19e40 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   19d68:	9800      	ldr	r0, [sp, #0]
   19d6a:	4e3f      	ldr	r6, [pc, #252]	; (19e68 <ll_rl_add+0x1a4>)
   19d6c:	3018      	adds	r0, #24
   19d6e:	2206      	movs	r2, #6
   19d70:	2100      	movs	r1, #0
   19d72:	4428      	add	r0, r5
   19d74:	f009 ff2c 	bl	23bd0 <memset>
	rl[i].dev = 0U;
   19d78:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   19d7c:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   19d80:	f021 0112 	bic.w	r1, r1, #18
   19d84:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   19d88:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < WL_SIZE; i++) {
   19d8c:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19d90:	f009 0901 	and.w	r9, r9, #1
   19d94:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   19d98:	07d3      	lsls	r3, r2, #31
   19d9a:	f3c2 0140 	ubfx	r1, r2, #1, #1
   19d9e:	d501      	bpl.n	19da4 <ll_rl_add+0xe0>
   19da0:	4549      	cmp	r1, r9
   19da2:	d01c      	beq.n	19dde <ll_rl_add+0x11a>
	for (i = 0; i < WL_SIZE; i++) {
   19da4:	3401      	adds	r4, #1
   19da6:	2c08      	cmp	r4, #8
   19da8:	f106 0608 	add.w	r6, r6, #8
   19dac:	d1f2      	bne.n	19d94 <ll_rl_add+0xd0>
		rl[i].wl = 0U;
   19dae:	eb0b 0207 	add.w	r2, fp, r7
   19db2:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   19db6:	f36f 1145 	bfc	r1, #5, #1
   19dba:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   19dbe:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   19dc2:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   19dc4:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   19dc8:	f042 0201 	orr.w	r2, r2, #1
   19dcc:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   19dd0:	b005      	add	sp, #20
   19dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19dd6:	200c      	movs	r0, #12
}
   19dd8:	b005      	add	sp, #20
   19dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19dde:	2206      	movs	r2, #6
   19de0:	4630      	mov	r0, r6
   19de2:	4651      	mov	r1, sl
   19de4:	f009 feb8 	bl	23b58 <memcmp>
   19de8:	2800      	cmp	r0, #0
   19dea:	d1db      	bne.n	19da4 <ll_rl_add+0xe0>
		rl[i].wl = 1U;
   19dec:	eb0b 0207 	add.w	r2, fp, r7
		wl[j].rl_idx = i;
   19df0:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].wl = 1U;
   19df4:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		wl[j].rl_idx = i;
   19df8:	7067      	strb	r7, [r4, #1]
		rl[i].wl = 1U;
   19dfa:	f041 0120 	orr.w	r1, r1, #32
   19dfe:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   19e02:	e7dc      	b.n	19dbe <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19e04:	2007      	movs	r0, #7
}
   19e06:	b005      	add	sp, #20
   19e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   19e0c:	4b17      	ldr	r3, [pc, #92]	; (19e6c <ll_rl_add+0x1a8>)
		peer_irk_rl_ids[peer_irk_count] = i;
   19e0e:	4a18      	ldr	r2, [pc, #96]	; (19e70 <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   19e10:	7819      	ldrb	r1, [r3, #0]
   19e12:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   19e16:	5457      	strb	r7, [r2, r1]
   19e18:	4a16      	ldr	r2, [pc, #88]	; (19e74 <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   19e1a:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   19e1e:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   19e22:	3101      	adds	r1, #1
	psrc += length - 1;
   19e24:	f106 020f 	add.w	r2, r6, #15
   19e28:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   19e2a:	f10c 3cff 	add.w	ip, ip, #4294967295
   19e2e:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   19e30:	f812 1901 	ldrb.w	r1, [r2], #-1
   19e34:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   19e38:	42b2      	cmp	r2, r6
   19e3a:	d1f9      	bne.n	19e30 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   19e3c:	2800      	cmp	r0, #0
   19e3e:	d093      	beq.n	19d68 <ll_rl_add+0xa4>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   19e40:	9b00      	ldr	r3, [sp, #0]
   19e42:	1dd8      	adds	r0, r3, #7
   19e44:	4649      	mov	r1, r9
   19e46:	2210      	movs	r2, #16
   19e48:	4428      	add	r0, r5
   19e4a:	f009 fe96 	bl	23b7a <memcpy>
		rl[i].local_rpa = NULL;
   19e4e:	eb0b 0207 	add.w	r2, fp, r7
   19e52:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   19e56:	2100      	movs	r1, #0
   19e58:	6251      	str	r1, [r2, #36]	; 0x24
   19e5a:	e785      	b.n	19d68 <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   19e5c:	2012      	movs	r0, #18
}
   19e5e:	b005      	add	sp, #20
   19e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e64:	2000e5b8 	.word	0x2000e5b8
   19e68:	2000e732 	.word	0x2000e732
   19e6c:	2000f2b5 	.word	0x2000f2b5
   19e70:	2000e530 	.word	0x2000e530
   19e74:	2000e538 	.word	0x2000e538

00019e78 <ull_filter_reset>:
	wl_anon = 0U;
   19e78:	4a33      	ldr	r2, [pc, #204]	; (19f48 <ull_filter_reset+0xd0>)
   19e7a:	4934      	ldr	r1, [pc, #208]	; (19f4c <ull_filter_reset+0xd4>)
{
   19e7c:	b538      	push	{r3, r4, r5, lr}
	wl_anon = 0U;
   19e7e:	2300      	movs	r3, #0
   19e80:	4c33      	ldr	r4, [pc, #204]	; (19f50 <ull_filter_reset+0xd8>)
   19e82:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   19e84:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   19e88:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   19e8a:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   19e8c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   19e90:	d805      	bhi.n	19e9e <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   19e92:	f814 203c 	ldrb.w	r2, [r4, ip, lsl #3]
   19e96:	f36f 1245 	bfc	r2, #5, #1
   19e9a:	f804 203c 	strb.w	r2, [r4, ip, lsl #3]
		wl[i].taken = 0U;
   19e9e:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   19ea2:	f36f 0200 	bfc	r2, #0, #1
   19ea6:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   19eaa:	3301      	adds	r3, #1
   19eac:	2b08      	cmp	r3, #8
   19eae:	d1e9      	bne.n	19e84 <ull_filter_reset+0xc>
	rl_enable = 0U;
   19eb0:	4b28      	ldr	r3, [pc, #160]	; (19f54 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   19eb2:	4a29      	ldr	r2, [pc, #164]	; (19f58 <ull_filter_reset+0xe0>)
	rl_enable = 0U;
   19eb4:	2100      	movs	r1, #0
   19eb6:	7019      	strb	r1, [r3, #0]
		rl[i].taken = 0U;
   19eb8:	7823      	ldrb	r3, [r4, #0]
   19eba:	f361 0300 	bfi	r3, r1, #0, #1
   19ebe:	7023      	strb	r3, [r4, #0]
   19ec0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   19ec4:	f361 0300 	bfi	r3, r1, #0, #1
   19ec8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   19ecc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   19ed0:	f361 0300 	bfi	r3, r1, #0, #1
   19ed4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   19ed8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   19edc:	f361 0300 	bfi	r3, r1, #0, #1
   19ee0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   19ee4:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   19ee8:	f361 0300 	bfi	r3, r1, #0, #1
   19eec:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
   19ef0:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   19ef4:	f361 0300 	bfi	r3, r1, #0, #1
   19ef8:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   19efc:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   19f00:	f361 0300 	bfi	r3, r1, #0, #1
   19f04:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
   19f08:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   19f0c:	f361 0300 	bfi	r3, r1, #0, #1
   19f10:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	peer_irk_count = 0U;
   19f14:	4b11      	ldr	r3, [pc, #68]	; (19f5c <ull_filter_reset+0xe4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   19f16:	4c12      	ldr	r4, [pc, #72]	; (19f60 <ull_filter_reset+0xe8>)
	peer_irk_count = 0U;
   19f18:	7019      	strb	r1, [r3, #0]
	rpa_last_ms = -1;
   19f1a:	4b12      	ldr	r3, [pc, #72]	; (19f64 <ull_filter_reset+0xec>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   19f1c:	6014      	str	r4, [r2, #0]
	rpa_last_ms = -1;
   19f1e:	f04f 35ff 	mov.w	r5, #4294967295
   19f22:	f04f 34ff 	mov.w	r4, #4294967295
   19f26:	e9c3 4500 	strd	r4, r5, [r3]
	if (init) {
   19f2a:	b138      	cbz	r0, 19f3c <ull_filter_reset+0xc4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   19f2c:	4b0e      	ldr	r3, [pc, #56]	; (19f68 <ull_filter_reset+0xf0>)
   19f2e:	2230      	movs	r2, #48	; 0x30
   19f30:	4618      	mov	r0, r3
   19f32:	f009 fe4d 	bl	23bd0 <memset>
   19f36:	4a0d      	ldr	r2, [pc, #52]	; (19f6c <ull_filter_reset+0xf4>)
   19f38:	6042      	str	r2, [r0, #4]
}
   19f3a:	bd38      	pop	{r3, r4, r5, pc}
   19f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_delayed_work_cancel(&rpa_work);
   19f40:	4809      	ldr	r0, [pc, #36]	; (19f68 <ull_filter_reset+0xf0>)
   19f42:	f00c bcc9 	b.w	268d8 <k_delayed_work_cancel>
   19f46:	bf00      	nop
   19f48:	2000f2b7 	.word	0x2000f2b7
   19f4c:	2000e730 	.word	0x2000e730
   19f50:	2000e5b8 	.word	0x2000e5b8
   19f54:	2000f2b6 	.word	0x2000f2b6
   19f58:	2000e72c 	.word	0x2000e72c
   19f5c:	2000f2b5 	.word	0x2000f2b5
   19f60:	000dbba0 	.word	0x000dbba0
   19f64:	2000ab20 	.word	0x2000ab20
   19f68:	2000ab28 	.word	0x2000ab28
   19f6c:	00019b7d 	.word	0x00019b7d

00019f70 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   19f70:	2807      	cmp	r0, #7
   19f72:	d807      	bhi.n	19f84 <ull_filter_lll_lrpa_used+0x14>
   19f74:	4b04      	ldr	r3, [pc, #16]	; (19f88 <ull_filter_lll_lrpa_used+0x18>)
   19f76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19f7a:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   19f7e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   19f82:	4770      	bx	lr
   19f84:	2000      	movs	r0, #0
}
   19f86:	4770      	bx	lr
   19f88:	2000e5b8 	.word	0x2000e5b8

00019f8c <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   19f8c:	4b02      	ldr	r3, [pc, #8]	; (19f98 <ull_filter_lll_irks_get+0xc>)
   19f8e:	781b      	ldrb	r3, [r3, #0]
   19f90:	7003      	strb	r3, [r0, #0]
}
   19f92:	4802      	ldr	r0, [pc, #8]	; (19f9c <ull_filter_lll_irks_get+0x10>)
   19f94:	4770      	bx	lr
   19f96:	bf00      	nop
   19f98:	2000f2b5 	.word	0x2000f2b5
   19f9c:	2000e538 	.word	0x2000e538

00019fa0 <ull_filter_lll_rl_irk_idx>:
{
   19fa0:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19fa2:	4b20      	ldr	r3, [pc, #128]	; (1a024 <ull_filter_lll_rl_irk_idx+0x84>)
   19fa4:	781b      	ldrb	r3, [r3, #0]
   19fa6:	4283      	cmp	r3, r0
{
   19fa8:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19faa:	d90c      	bls.n	19fc6 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   19fac:	4b1e      	ldr	r3, [pc, #120]	; (1a028 <ull_filter_lll_rl_irk_idx+0x88>)
   19fae:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19fb0:	2c07      	cmp	r4, #7
   19fb2:	d819      	bhi.n	19fe8 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   19fb4:	4b1d      	ldr	r3, [pc, #116]	; (1a02c <ull_filter_lll_rl_irk_idx+0x8c>)
   19fb6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19fba:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   19fbe:	07db      	lsls	r3, r3, #31
   19fc0:	d520      	bpl.n	1a004 <ull_filter_lll_rl_irk_idx+0x64>
}
   19fc2:	4620      	mov	r0, r4
   19fc4:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19fc6:	4a1a      	ldr	r2, [pc, #104]	; (1a030 <ull_filter_lll_rl_irk_idx+0x90>)
   19fc8:	491a      	ldr	r1, [pc, #104]	; (1a034 <ull_filter_lll_rl_irk_idx+0x94>)
   19fca:	481b      	ldr	r0, [pc, #108]	; (1a038 <ull_filter_lll_rl_irk_idx+0x98>)
   19fcc:	f240 23b9 	movw	r3, #697	; 0x2b9
   19fd0:	f007 f960 	bl	21294 <printk>
   19fd4:	4040      	eors	r0, r0
   19fd6:	f380 8811 	msr	BASEPRI, r0
   19fda:	f04f 0003 	mov.w	r0, #3
   19fde:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   19fe0:	4b11      	ldr	r3, [pc, #68]	; (1a028 <ull_filter_lll_rl_irk_idx+0x88>)
   19fe2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19fe4:	2c07      	cmp	r4, #7
   19fe6:	d9e5      	bls.n	19fb4 <ull_filter_lll_rl_irk_idx+0x14>
   19fe8:	4a11      	ldr	r2, [pc, #68]	; (1a030 <ull_filter_lll_rl_irk_idx+0x90>)
   19fea:	4914      	ldr	r1, [pc, #80]	; (1a03c <ull_filter_lll_rl_irk_idx+0x9c>)
   19fec:	4812      	ldr	r0, [pc, #72]	; (1a038 <ull_filter_lll_rl_irk_idx+0x98>)
   19fee:	f240 23bb 	movw	r3, #699	; 0x2bb
   19ff2:	f007 f94f 	bl	21294 <printk>
   19ff6:	4040      	eors	r0, r0
   19ff8:	f380 8811 	msr	BASEPRI, r0
   19ffc:	f04f 0003 	mov.w	r0, #3
   1a000:	df02      	svc	2
   1a002:	e7d7      	b.n	19fb4 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1a004:	4a0a      	ldr	r2, [pc, #40]	; (1a030 <ull_filter_lll_rl_irk_idx+0x90>)
   1a006:	490e      	ldr	r1, [pc, #56]	; (1a040 <ull_filter_lll_rl_irk_idx+0xa0>)
   1a008:	480b      	ldr	r0, [pc, #44]	; (1a038 <ull_filter_lll_rl_irk_idx+0x98>)
   1a00a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   1a00e:	f007 f941 	bl	21294 <printk>
   1a012:	4040      	eors	r0, r0
   1a014:	f380 8811 	msr	BASEPRI, r0
   1a018:	f04f 0003 	mov.w	r0, #3
   1a01c:	df02      	svc	2
}
   1a01e:	4620      	mov	r0, r4
   1a020:	bd10      	pop	{r4, pc}
   1a022:	bf00      	nop
   1a024:	2000f2b5 	.word	0x2000f2b5
   1a028:	2000e530 	.word	0x2000e530
   1a02c:	2000e5b8 	.word	0x2000e5b8
   1a030:	00028248 	.word	0x00028248
   1a034:	0002842c 	.word	0x0002842c
   1a038:	00027ab4 	.word	0x00027ab4
   1a03c:	0002844c 	.word	0x0002844c
   1a040:	00028420 	.word	0x00028420

0001a044 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1a044:	2807      	cmp	r0, #7
   1a046:	d823      	bhi.n	1a090 <ull_filter_lll_irk_whitelisted+0x4c>
{
   1a048:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1a04a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a04e:	4e11      	ldr	r6, [pc, #68]	; (1a094 <ull_filter_lll_irk_whitelisted+0x50>)
   1a050:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1a054:	07db      	lsls	r3, r3, #31
   1a056:	4604      	mov	r4, r0
   1a058:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1a05c:	d505      	bpl.n	1a06a <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   1a05e:	442c      	add	r4, r5
   1a060:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1a064:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1a068:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1a06a:	4a0b      	ldr	r2, [pc, #44]	; (1a098 <ull_filter_lll_irk_whitelisted+0x54>)
   1a06c:	490b      	ldr	r1, [pc, #44]	; (1a09c <ull_filter_lll_irk_whitelisted+0x58>)
   1a06e:	480c      	ldr	r0, [pc, #48]	; (1a0a0 <ull_filter_lll_irk_whitelisted+0x5c>)
   1a070:	f240 23c7 	movw	r3, #711	; 0x2c7
   1a074:	f007 f90e 	bl	21294 <printk>
   1a078:	4040      	eors	r0, r0
   1a07a:	f380 8811 	msr	BASEPRI, r0
   1a07e:	f04f 0003 	mov.w	r0, #3
   1a082:	df02      	svc	2
	return rl[rl_idx].wl;
   1a084:	442c      	add	r4, r5
   1a086:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1a08a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1a08e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1a090:	2000      	movs	r0, #0
}
   1a092:	4770      	bx	lr
   1a094:	2000e5b8 	.word	0x2000e5b8
   1a098:	00028248 	.word	0x00028248
   1a09c:	00028298 	.word	0x00028298
   1a0a0:	00027ab4 	.word	0x00027ab4

0001a0a4 <ull_filter_lll_get>:
		return &wl_filter;
   1a0a4:	4a03      	ldr	r2, [pc, #12]	; (1a0b4 <ull_filter_lll_get+0x10>)
   1a0a6:	4b04      	ldr	r3, [pc, #16]	; (1a0b8 <ull_filter_lll_get+0x14>)
}
   1a0a8:	2800      	cmp	r0, #0
   1a0aa:	bf0c      	ite	eq
   1a0ac:	4610      	moveq	r0, r2
   1a0ae:	4618      	movne	r0, r3
   1a0b0:	4770      	bx	lr
   1a0b2:	bf00      	nop
   1a0b4:	2000e6f8 	.word	0x2000e6f8
   1a0b8:	2000e770 	.word	0x2000e770

0001a0bc <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1a0bc:	4b1c      	ldr	r3, [pc, #112]	; (1a130 <ull_filter_lll_rl_addr_allowed+0x74>)
   1a0be:	781b      	ldrb	r3, [r3, #0]
   1a0c0:	b1f3      	cbz	r3, 1a100 <ull_filter_lll_rl_addr_allowed+0x44>
   1a0c2:	7813      	ldrb	r3, [r2, #0]
   1a0c4:	2bff      	cmp	r3, #255	; 0xff
   1a0c6:	d11b      	bne.n	1a100 <ull_filter_lll_rl_addr_allowed+0x44>
{
   1a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0cc:	4d19      	ldr	r5, [pc, #100]	; (1a134 <ull_filter_lll_rl_addr_allowed+0x78>)
   1a0ce:	4604      	mov	r4, r0
   1a0d0:	46ae      	mov	lr, r5
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1a0d2:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1a0d4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1a0d8:	b2df      	uxtb	r7, r3
   1a0da:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1a0de:	f01c 0001 	ands.w	r0, ip, #1
   1a0e2:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1a0e6:	d003      	beq.n	1a0f0 <ull_filter_lll_rl_addr_allowed+0x34>
   1a0e8:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1a0ec:	45a4      	cmp	ip, r4
   1a0ee:	d009      	beq.n	1a104 <ull_filter_lll_rl_addr_allowed+0x48>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a0f0:	3301      	adds	r3, #1
   1a0f2:	2b08      	cmp	r3, #8
   1a0f4:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1a0f8:	d1ec      	bne.n	1a0d4 <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   1a0fa:	2001      	movs	r0, #1
}
   1a0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1a100:	2001      	movs	r0, #1
}
   1a102:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a104:	f101 38ff 	add.w	r8, r1, #4294967295
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1a108:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a10a:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1a10e:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1a112:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1a116:	45ca      	cmp	sl, r9
   1a118:	d1ea      	bne.n	1a0f0 <ull_filter_lll_rl_addr_allowed+0x34>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a11a:	45dc      	cmp	ip, fp
   1a11c:	d1f7      	bne.n	1a10e <ull_filter_lll_rl_addr_allowed+0x52>
				return !rl[i].pirk || rl[i].dev;
   1a11e:	4433      	add	r3, r6
				*rl_idx = i;
   1a120:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1a122:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1a126:	075a      	lsls	r2, r3, #29
   1a128:	d5e8      	bpl.n	1a0fc <ull_filter_lll_rl_addr_allowed+0x40>
   1a12a:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1a12e:	e7e5      	b.n	1a0fc <ull_filter_lll_rl_addr_allowed+0x40>
   1a130:	2000f2b6 	.word	0x2000f2b6
   1a134:	2000e5b8 	.word	0x2000e5b8

0001a138 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1a138:	4b02      	ldr	r3, [pc, #8]	; (1a144 <ull_filter_lll_rl_enabled+0xc>)
   1a13a:	7818      	ldrb	r0, [r3, #0]
}
   1a13c:	3800      	subs	r0, #0
   1a13e:	bf18      	it	ne
   1a140:	2001      	movne	r0, #1
   1a142:	4770      	bx	lr
   1a144:	2000f2b6 	.word	0x2000f2b6

0001a148 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a148:	4668      	mov	r0, sp
   1a14a:	f020 0107 	bic.w	r1, r0, #7
   1a14e:	468d      	mov	sp, r1
   1a150:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1a152:	f001 ff2d 	bl	1bfb0 <isr_radio>

	ISR_DIRECT_PM();
   1a156:	f7ec fefb 	bl	6f50 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1a15a:	f7ed fa2f 	bl	75bc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a15e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1a162:	4685      	mov	sp, r0
   1a164:	4770      	bx	lr
   1a166:	bf00      	nop

0001a168 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1a168:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1a16a:	4b09      	ldr	r3, [pc, #36]	; (1a190 <rtc0_nrf5_isr+0x28>)
   1a16c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1a170:	b93a      	cbnz	r2, 1a182 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1a172:	2001      	movs	r0, #1
   1a174:	f7f5 ffb4 	bl	100e0 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1a178:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1a17c:	2002      	movs	r0, #2
   1a17e:	f7f5 bfaf 	b.w	100e0 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1a182:	2000      	movs	r0, #0
   1a184:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1a188:	f7f7 f858 	bl	1123c <ticker_trigger>
   1a18c:	e7f1      	b.n	1a172 <rtc0_nrf5_isr+0xa>
   1a18e:	bf00      	nop
   1a190:	4000b000 	.word	0x4000b000

0001a194 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1a194:	2000      	movs	r0, #0
   1a196:	f7f5 bfa3 	b.w	100e0 <mayfly_run>
   1a19a:	bf00      	nop

0001a19c <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   1a19c:	f002 b822 	b.w	1c1e4 <radio_status_reset>

0001a1a0 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a1a0:	2801      	cmp	r0, #1
   1a1a2:	d800      	bhi.n	1a1a6 <ticker_stop_op_cb+0x6>
   1a1a4:	4770      	bx	lr
{
   1a1a6:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a1a8:	4a06      	ldr	r2, [pc, #24]	; (1a1c4 <ticker_stop_op_cb+0x24>)
   1a1aa:	4907      	ldr	r1, [pc, #28]	; (1a1c8 <ticker_stop_op_cb+0x28>)
   1a1ac:	4807      	ldr	r0, [pc, #28]	; (1a1cc <ticker_stop_op_cb+0x2c>)
   1a1ae:	f240 23a3 	movw	r3, #675	; 0x2a3
   1a1b2:	f007 f86f 	bl	21294 <printk>
   1a1b6:	4040      	eors	r0, r0
   1a1b8:	f380 8811 	msr	BASEPRI, r0
   1a1bc:	f04f 0003 	mov.w	r0, #3
   1a1c0:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1a1c2:	bd08      	pop	{r3, pc}
   1a1c4:	00028468 	.word	0x00028468
   1a1c8:	000284b0 	.word	0x000284b0
   1a1cc:	00027ab4 	.word	0x00027ab4

0001a1d0 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a1d0:	2801      	cmp	r0, #1
   1a1d2:	d800      	bhi.n	1a1d6 <ticker_start_op_cb+0x6>
   1a1d4:	4770      	bx	lr
{
   1a1d6:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a1d8:	4a06      	ldr	r2, [pc, #24]	; (1a1f4 <ticker_start_op_cb+0x24>)
   1a1da:	4907      	ldr	r1, [pc, #28]	; (1a1f8 <ticker_start_op_cb+0x28>)
   1a1dc:	4807      	ldr	r0, [pc, #28]	; (1a1fc <ticker_start_op_cb+0x2c>)
   1a1de:	f240 23ae 	movw	r3, #686	; 0x2ae
   1a1e2:	f007 f857 	bl	21294 <printk>
   1a1e6:	4040      	eors	r0, r0
   1a1e8:	f380 8811 	msr	BASEPRI, r0
   1a1ec:	f04f 0003 	mov.w	r0, #3
   1a1f0:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1a1f2:	bd08      	pop	{r3, pc}
   1a1f4:	00028468 	.word	0x00028468
   1a1f8:	000284b0 	.word	0x000284b0
   1a1fc:	00027ab4 	.word	0x00027ab4

0001a200 <preempt_ticker_cb>:
{
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a200:	2200      	movs	r2, #0
{
   1a202:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a204:	4611      	mov	r1, r2
   1a206:	4b0a      	ldr	r3, [pc, #40]	; (1a230 <preempt_ticker_cb+0x30>)
   1a208:	2001      	movs	r0, #1
   1a20a:	f7f5 ff15 	bl	10038 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1a20e:	b900      	cbnz	r0, 1a212 <preempt_ticker_cb+0x12>
}
   1a210:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1a212:	4a08      	ldr	r2, [pc, #32]	; (1a234 <preempt_ticker_cb+0x34>)
   1a214:	4908      	ldr	r1, [pc, #32]	; (1a238 <preempt_ticker_cb+0x38>)
   1a216:	4809      	ldr	r0, [pc, #36]	; (1a23c <preempt_ticker_cb+0x3c>)
   1a218:	f240 23da 	movw	r3, #730	; 0x2da
   1a21c:	f007 f83a 	bl	21294 <printk>
   1a220:	4040      	eors	r0, r0
   1a222:	f380 8811 	msr	BASEPRI, r0
   1a226:	f04f 0003 	mov.w	r0, #3
   1a22a:	df02      	svc	2
}
   1a22c:	bd08      	pop	{r3, pc}
   1a22e:	bf00      	nop
   1a230:	20000604 	.word	0x20000604
   1a234:	00028468 	.word	0x00028468
   1a238:	00027d50 	.word	0x00027d50
   1a23c:	00027ab4 	.word	0x00027ab4

0001a240 <preempt_ticker_start.isra.0>:
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1a240:	b530      	push	{r4, r5, lr}
	evt = HDR_LLL2EVT(prepare_param->param);
   1a242:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a244:	4c16      	ldr	r4, [pc, #88]	; (1a2a0 <preempt_ticker_start.isra.0+0x60>)
   1a246:	4917      	ldr	r1, [pc, #92]	; (1a2a4 <preempt_ticker_start.isra.0+0x64>)
   1a248:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1a24a:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a24c:	e9cd 4207 	strd	r4, r2, [sp, #28]
   1a250:	e9cd 1205 	strd	r1, r2, [sp, #20]
   1a254:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1a258:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
   1a25c:	e9d3 5400 	ldrd	r5, r4, [r3]
   1a260:	6899      	ldr	r1, [r3, #8]
   1a262:	42a5      	cmp	r5, r4
   1a264:	bf2c      	ite	cs
   1a266:	ebc1 0105 	rsbcs	r1, r1, r5
   1a26a:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1a26e:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a270:	9100      	str	r1, [sp, #0]
   1a272:	4610      	mov	r0, r2
   1a274:	4611      	mov	r1, r2
   1a276:	f7f7 f84f 	bl	11318 <ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a27a:	2802      	cmp	r0, #2
   1a27c:	d801      	bhi.n	1a282 <preempt_ticker_start.isra.0+0x42>
}
   1a27e:	b00b      	add	sp, #44	; 0x2c
   1a280:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a282:	4a09      	ldr	r2, [pc, #36]	; (1a2a8 <preempt_ticker_start.isra.0+0x68>)
   1a284:	4909      	ldr	r1, [pc, #36]	; (1a2ac <preempt_ticker_start.isra.0+0x6c>)
   1a286:	480a      	ldr	r0, [pc, #40]	; (1a2b0 <preempt_ticker_start.isra.0+0x70>)
   1a288:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   1a28c:	f007 f802 	bl	21294 <printk>
   1a290:	4040      	eors	r0, r0
   1a292:	f380 8811 	msr	BASEPRI, r0
   1a296:	f04f 0003 	mov.w	r0, #3
   1a29a:	df02      	svc	2
}
   1a29c:	b00b      	add	sp, #44	; 0x2c
   1a29e:	bd30      	pop	{r4, r5, pc}
   1a2a0:	0001a1d1 	.word	0x0001a1d1
   1a2a4:	0001a201 	.word	0x0001a201
   1a2a8:	00028468 	.word	0x00028468
   1a2ac:	000284d0 	.word	0x000284d0
   1a2b0:	00027ab4 	.word	0x00027ab4

0001a2b4 <preempt>:

static void preempt(void *param)
{
   1a2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1a2b6:	4e4b      	ldr	r6, [pc, #300]	; (1a3e4 <preempt+0x130>)
   1a2b8:	68b3      	ldr	r3, [r6, #8]
{
   1a2ba:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   1a2bc:	b1b3      	cbz	r3, 1a2ec <preempt+0x38>
   1a2be:	6833      	ldr	r3, [r6, #0]
   1a2c0:	b1a3      	cbz	r3, 1a2ec <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   1a2c2:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   1a2c4:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   1a2c8:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   1a2cc:	f7f9 fdf2 	bl	13eb4 <ull_prepare_dequeue_iter>
	if (!next) {
   1a2d0:	4604      	mov	r4, r0
   1a2d2:	b158      	cbz	r0, 1a2ec <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   1a2d4:	f894 3020 	ldrb.w	r3, [r4, #32]
   1a2d8:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1a2dc:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   1a2e0:	d006      	beq.n	1a2f0 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1a2e2:	f7f9 fde7 	bl	13eb4 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1a2e6:	4604      	mov	r4, r0
   1a2e8:	2800      	cmp	r0, #0
   1a2ea:	d1f3      	bne.n	1a2d4 <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   1a2ec:	b00b      	add	sp, #44	; 0x2c
   1a2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1a2f0:	ab05      	add	r3, sp, #20
   1a2f2:	e9d6 2700 	ldrd	r2, r7, [r6]
   1a2f6:	69e1      	ldr	r1, [r4, #28]
   1a2f8:	68e0      	ldr	r0, [r4, #12]
   1a2fa:	9300      	str	r3, [sp, #0]
   1a2fc:	ab04      	add	r3, sp, #16
   1a2fe:	47b8      	blx	r7
	if (!ret) {
   1a300:	4607      	mov	r7, r0
   1a302:	2800      	cmp	r0, #0
   1a304:	d062      	beq.n	1a3cc <preempt+0x118>
	event.curr.abort_cb(NULL, event.curr.param);
   1a306:	68b3      	ldr	r3, [r6, #8]
   1a308:	6831      	ldr	r1, [r6, #0]
   1a30a:	4628      	mov	r0, r5
   1a30c:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1a30e:	f117 0f0b 	cmn.w	r7, #11
   1a312:	d01a      	beq.n	1a34a <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   1a314:	3748      	adds	r7, #72	; 0x48
   1a316:	d011      	beq.n	1a33c <preempt+0x88>
   1a318:	4a33      	ldr	r2, [pc, #204]	; (1a3e8 <preempt+0x134>)
   1a31a:	4934      	ldr	r1, [pc, #208]	; (1a3ec <preempt+0x138>)
   1a31c:	4834      	ldr	r0, [pc, #208]	; (1a3f0 <preempt+0x13c>)
   1a31e:	f44f 7346 	mov.w	r3, #792	; 0x318
   1a322:	f006 ffb7 	bl	21294 <printk>
   1a326:	4040      	eors	r0, r0
   1a328:	f380 8811 	msr	BASEPRI, r0
   1a32c:	f04f 0003 	mov.w	r0, #3
   1a330:	df02      	svc	2
   1a332:	e003      	b.n	1a33c <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   1a334:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a338:	079b      	lsls	r3, r3, #30
   1a33a:	d041      	beq.n	1a3c0 <preempt+0x10c>
		next = ull_prepare_dequeue_iter(&idx);
   1a33c:	f10d 000e 	add.w	r0, sp, #14
   1a340:	f7f9 fdb8 	bl	13eb4 <ull_prepare_dequeue_iter>
		if (!next) {
   1a344:	2800      	cmp	r0, #0
   1a346:	d1f5      	bne.n	1a334 <preempt+0x80>
   1a348:	e7d0      	b.n	1a2ec <preempt+0x38>
		iter_idx = UINT8_MAX;
   1a34a:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1a34c:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   1a350:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1a354:	f7f9 fdae 	bl	13eb4 <ull_prepare_dequeue_iter>
		while (iter) {
   1a358:	bb48      	cbnz	r0, 1a3ae <preempt+0xfa>
	prepare_param.param = event.curr.param;
   1a35a:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   1a35c:	9905      	ldr	r1, [sp, #20]
	prepare_param.param = event.curr.param;
   1a35e:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1a360:	2301      	movs	r3, #1
	event.curr.param = NULL;
   1a362:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1a364:	9301      	str	r3, [sp, #4]
   1a366:	9100      	str	r1, [sp, #0]
	event.curr.param = NULL;
   1a368:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1a36a:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1a36e:	9b04      	ldr	r3, [sp, #16]
   1a370:	aa06      	add	r2, sp, #24
   1a372:	f7f9 fd5b 	bl	13e2c <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1a376:	2800      	cmp	r0, #0
   1a378:	d0e0      	beq.n	1a33c <preempt+0x88>
   1a37a:	4a1b      	ldr	r2, [pc, #108]	; (1a3e8 <preempt+0x134>)
   1a37c:	491d      	ldr	r1, [pc, #116]	; (1a3f4 <preempt+0x140>)
   1a37e:	481c      	ldr	r0, [pc, #112]	; (1a3f0 <preempt+0x13c>)
   1a380:	f240 3316 	movw	r3, #790	; 0x316
   1a384:	f006 ff86 	bl	21294 <printk>
   1a388:	4040      	eors	r0, r0
   1a38a:	f380 8811 	msr	BASEPRI, r0
   1a38e:	f04f 0003 	mov.w	r0, #3
   1a392:	df02      	svc	2
   1a394:	e7d2      	b.n	1a33c <preempt+0x88>
				iter->is_aborted = 1;
   1a396:	f043 0302 	orr.w	r3, r3, #2
				iter->abort_cb(&iter->prepare_param,
   1a39a:	6982      	ldr	r2, [r0, #24]
				iter->is_aborted = 1;
   1a39c:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1a3a0:	4790      	blx	r2
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1a3a2:	f10d 000f 	add.w	r0, sp, #15
   1a3a6:	f7f9 fd85 	bl	13eb4 <ull_prepare_dequeue_iter>
		while (iter) {
   1a3aa:	2800      	cmp	r0, #0
   1a3ac:	d0d5      	beq.n	1a35a <preempt+0xa6>
			if (!iter->is_aborted &&
   1a3ae:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a3b2:	079a      	lsls	r2, r3, #30
   1a3b4:	d4f5      	bmi.n	1a3a2 <preempt+0xee>
			    event.curr.param == iter->prepare_param.param) {
   1a3b6:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1a3b8:	6831      	ldr	r1, [r6, #0]
   1a3ba:	4291      	cmp	r1, r2
   1a3bc:	d1f1      	bne.n	1a3a2 <preempt+0xee>
   1a3be:	e7ea      	b.n	1a396 <preempt+0xe2>
	preempt_ticker_start(&next->prepare_param);
   1a3c0:	68c1      	ldr	r1, [r0, #12]
   1a3c2:	6800      	ldr	r0, [r0, #0]
   1a3c4:	f7ff ff3c 	bl	1a240 <preempt_ticker_start.isra.0>
}
   1a3c8:	b00b      	add	sp, #44	; 0x2c
   1a3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   1a3cc:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1a3d0:	69a2      	ldr	r2, [r4, #24]
   1a3d2:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   1a3d4:	f043 0302 	orr.w	r3, r3, #2
   1a3d8:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1a3dc:	4620      	mov	r0, r4
   1a3de:	4790      	blx	r2
		goto preempt_next;
   1a3e0:	e7ac      	b.n	1a33c <preempt+0x88>
   1a3e2:	bf00      	nop
   1a3e4:	2000e7a8 	.word	0x2000e7a8
   1a3e8:	00028468 	.word	0x00028468
   1a3ec:	000284f8 	.word	0x000284f8
   1a3f0:	00027ab4 	.word	0x00027ab4
   1a3f4:	00027d50 	.word	0x00027d50

0001a3f8 <prepare>:
{
   1a3f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a3fc:	b085      	sub	sp, #20
   1a3fe:	4604      	mov	r4, r0
   1a400:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   1a402:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1a406:	23ff      	movs	r3, #255	; 0xff
{
   1a408:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1a40c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   1a410:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1a414:	460d      	mov	r5, r1
   1a416:	4616      	mov	r6, r2
	p = ull_prepare_dequeue_iter(&idx);
   1a418:	f7f9 fd4c 	bl	13eb4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1a41c:	b918      	cbnz	r0, 1a426 <prepare+0x2e>
   1a41e:	e01e      	b.n	1a45e <prepare+0x66>
		p = ull_prepare_dequeue_iter(&idx);
   1a420:	f7f9 fd48 	bl	13eb4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1a424:	b1d8      	cbz	r0, 1a45e <prepare+0x66>
   1a426:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a42a:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   1a42c:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1a430:	d1f6      	bne.n	1a420 <prepare+0x28>
	if (event.curr.abort_cb || (p && is_resume)) {
   1a432:	4b2e      	ldr	r3, [pc, #184]	; (1a4ec <prepare+0xf4>)
   1a434:	689a      	ldr	r2, [r3, #8]
   1a436:	b9aa      	cbnz	r2, 1a464 <prepare+0x6c>
   1a438:	f1b9 0f00 	cmp.w	r9, #0
   1a43c:	d036      	beq.n	1a4ac <prepare+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1a43e:	2201      	movs	r2, #1
   1a440:	9201      	str	r2, [sp, #4]
   1a442:	9700      	str	r7, [sp, #0]
   1a444:	4633      	mov	r3, r6
   1a446:	4629      	mov	r1, r5
   1a448:	4620      	mov	r0, r4
   1a44a:	4642      	mov	r2, r8
   1a44c:	f7f9 fcee 	bl	13e2c <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1a450:	b9d8      	cbnz	r0, 1a48a <prepare+0x92>
		return -EINPROGRESS;
   1a452:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   1a456:	4620      	mov	r0, r4
   1a458:	b005      	add	sp, #20
   1a45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   1a45e:	4b23      	ldr	r3, [pc, #140]	; (1a4ec <prepare+0xf4>)
   1a460:	689a      	ldr	r2, [r3, #8]
   1a462:	b31a      	cbz	r2, 1a4ac <prepare+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1a464:	e9cd 7900 	strd	r7, r9, [sp]
   1a468:	4633      	mov	r3, r6
   1a46a:	4629      	mov	r1, r5
   1a46c:	4620      	mov	r0, r4
   1a46e:	4642      	mov	r2, r8
   1a470:	f7f9 fcdc 	bl	13e2c <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1a474:	b948      	cbnz	r0, 1a48a <prepare+0x92>
		if (is_resume) {
   1a476:	f1b9 0f00 	cmp.w	r9, #0
   1a47a:	d1ea      	bne.n	1a452 <prepare+0x5a>
		preempt_ticker_start(prepare_param);
   1a47c:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1a480:	f8d8 0000 	ldr.w	r0, [r8]
   1a484:	f7ff fedc 	bl	1a240 <preempt_ticker_start.isra.0>
   1a488:	e7e3      	b.n	1a452 <prepare+0x5a>
		LL_ASSERT(!err);
   1a48a:	4a19      	ldr	r2, [pc, #100]	; (1a4f0 <prepare+0xf8>)
   1a48c:	4919      	ldr	r1, [pc, #100]	; (1a4f4 <prepare+0xfc>)
   1a48e:	481a      	ldr	r0, [pc, #104]	; (1a4f8 <prepare+0x100>)
   1a490:	f44f 7312 	mov.w	r3, #584	; 0x248
   1a494:	f006 fefe 	bl	21294 <printk>
   1a498:	4040      	eors	r0, r0
   1a49a:	f380 8811 	msr	BASEPRI, r0
   1a49e:	f04f 0003 	mov.w	r0, #3
   1a4a2:	df02      	svc	2
		if (is_resume) {
   1a4a4:	f1b9 0f00 	cmp.w	r9, #0
   1a4a8:	d1d3      	bne.n	1a452 <prepare+0x5a>
   1a4aa:	e7e7      	b.n	1a47c <prepare+0x84>
	event.curr.param = prepare_param->param;
   1a4ac:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1a4b0:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   1a4b2:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   1a4b6:	4640      	mov	r0, r8
   1a4b8:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a4ba:	2200      	movs	r2, #0
   1a4bc:	4b0f      	ldr	r3, [pc, #60]	; (1a4fc <prepare+0x104>)
   1a4be:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   1a4c0:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a4c2:	4611      	mov	r1, r2
   1a4c4:	4610      	mov	r0, r2
   1a4c6:	f7f6 ffb1 	bl	1142c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a4ca:	2802      	cmp	r0, #2
   1a4cc:	d9c3      	bls.n	1a456 <prepare+0x5e>
   1a4ce:	4a08      	ldr	r2, [pc, #32]	; (1a4f0 <prepare+0xf8>)
   1a4d0:	490b      	ldr	r1, [pc, #44]	; (1a500 <prepare+0x108>)
   1a4d2:	4809      	ldr	r0, [pc, #36]	; (1a4f8 <prepare+0x100>)
   1a4d4:	f240 2382 	movw	r3, #642	; 0x282
   1a4d8:	f006 fedc 	bl	21294 <printk>
   1a4dc:	4040      	eors	r0, r0
   1a4de:	f380 8811 	msr	BASEPRI, r0
   1a4e2:	f04f 0003 	mov.w	r0, #3
   1a4e6:	df02      	svc	2
   1a4e8:	e7b5      	b.n	1a456 <prepare+0x5e>
   1a4ea:	bf00      	nop
   1a4ec:	2000e7a8 	.word	0x2000e7a8
   1a4f0:	00028468 	.word	0x00028468
   1a4f4:	00027d34 	.word	0x00027d34
   1a4f8:	00027ab4 	.word	0x00027ab4
   1a4fc:	0001a1a1 	.word	0x0001a1a1
   1a500:	000284d0 	.word	0x000284d0

0001a504 <lll_init>:
{
   1a504:	b510      	push	{r4, lr}
   1a506:	4816      	ldr	r0, [pc, #88]	; (1a560 <lll_init+0x5c>)
   1a508:	f004 fcce 	bl	1eea8 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1a50c:	4b15      	ldr	r3, [pc, #84]	; (1a564 <lll_init+0x60>)
   1a50e:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1a510:	b310      	cbz	r0, 1a558 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1a512:	4b15      	ldr	r3, [pc, #84]	; (1a568 <lll_init+0x64>)
   1a514:	2400      	movs	r4, #0
   1a516:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1a518:	f000 fa3c 	bl	1a994 <lll_clock_init>
	if (err < 0) {
   1a51c:	2800      	cmp	r0, #0
   1a51e:	db1a      	blt.n	1a556 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1a520:	4621      	mov	r1, r4
   1a522:	2001      	movs	r0, #1
   1a524:	4622      	mov	r2, r4
   1a526:	f7ec fcfb 	bl	6f20 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1a52a:	4622      	mov	r2, r4
   1a52c:	200b      	movs	r0, #11
   1a52e:	2101      	movs	r1, #1
   1a530:	f7ec fcf6 	bl	6f20 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1a534:	4622      	mov	r2, r4
   1a536:	4621      	mov	r1, r4
   1a538:	2018      	movs	r0, #24
   1a53a:	f7ec fcf1 	bl	6f20 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1a53e:	2001      	movs	r0, #1
   1a540:	f7ec fcbc 	bl	6ebc <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1a544:	200b      	movs	r0, #11
   1a546:	f7ec fcb9 	bl	6ebc <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1a54a:	2018      	movs	r0, #24
   1a54c:	f7ec fcb6 	bl	6ebc <arch_irq_enable>
	radio_setup();
   1a550:	f001 fd5e 	bl	1c010 <radio_setup>
	return 0;
   1a554:	4620      	mov	r0, r4
}
   1a556:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1a558:	f06f 0012 	mvn.w	r0, #18
}
   1a55c:	bd10      	pop	{r4, pc}
   1a55e:	bf00      	nop
   1a560:	00028504 	.word	0x00028504
   1a564:	2000e7a4 	.word	0x2000e7a4
   1a568:	2000e7a8 	.word	0x2000e7a8

0001a56c <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1a56c:	4a05      	ldr	r2, [pc, #20]	; (1a584 <lll_csrand_get+0x18>)
{
   1a56e:	b410      	push	{r4}
   1a570:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1a572:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1a574:	6884      	ldr	r4, [r0, #8]
   1a576:	6824      	ldr	r4, [r4, #0]
   1a578:	b28a      	uxth	r2, r1
   1a57a:	4619      	mov	r1, r3
   1a57c:	4623      	mov	r3, r4
}
   1a57e:	bc10      	pop	{r4}
   1a580:	4718      	bx	r3
   1a582:	bf00      	nop
   1a584:	2000e7a4 	.word	0x2000e7a4

0001a588 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1a588:	4b08      	ldr	r3, [pc, #32]	; (1a5ac <lll_csrand_isr_get+0x24>)
{
   1a58a:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1a58c:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1a58e:	68ab      	ldr	r3, [r5, #8]
   1a590:	685c      	ldr	r4, [r3, #4]
   1a592:	b13c      	cbz	r4, 1a5a4 <lll_csrand_isr_get+0x1c>
   1a594:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1a596:	46a4      	mov	ip, r4
   1a598:	4601      	mov	r1, r0
   1a59a:	b292      	uxth	r2, r2
   1a59c:	4628      	mov	r0, r5
   1a59e:	2300      	movs	r3, #0
}
   1a5a0:	bc30      	pop	{r4, r5}
   1a5a2:	4760      	bx	ip
   1a5a4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a5a8:	bc30      	pop	{r4, r5}
   1a5aa:	4770      	bx	lr
   1a5ac:	2000e7a4 	.word	0x2000e7a4

0001a5b0 <lll_rand_isr_get>:
   1a5b0:	4b08      	ldr	r3, [pc, #32]	; (1a5d4 <lll_rand_isr_get+0x24>)
   1a5b2:	b430      	push	{r4, r5}
   1a5b4:	681d      	ldr	r5, [r3, #0]
   1a5b6:	68ab      	ldr	r3, [r5, #8]
   1a5b8:	685c      	ldr	r4, [r3, #4]
   1a5ba:	b13c      	cbz	r4, 1a5cc <lll_rand_isr_get+0x1c>
   1a5bc:	460a      	mov	r2, r1
   1a5be:	46a4      	mov	ip, r4
   1a5c0:	4601      	mov	r1, r0
   1a5c2:	b292      	uxth	r2, r2
   1a5c4:	4628      	mov	r0, r5
   1a5c6:	2300      	movs	r3, #0
   1a5c8:	bc30      	pop	{r4, r5}
   1a5ca:	4760      	bx	ip
   1a5cc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a5d0:	bc30      	pop	{r4, r5}
   1a5d2:	4770      	bx	lr
   1a5d4:	2000e7a4 	.word	0x2000e7a4

0001a5d8 <lll_reset>:
}
   1a5d8:	2000      	movs	r0, #0
   1a5da:	4770      	bx	lr

0001a5dc <lll_prepare>:
{
   1a5dc:	b510      	push	{r4, lr}
   1a5de:	b082      	sub	sp, #8
   1a5e0:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1a5e2:	9400      	str	r4, [sp, #0]
   1a5e4:	2400      	movs	r4, #0
   1a5e6:	9401      	str	r4, [sp, #4]
   1a5e8:	f7ff ff06 	bl	1a3f8 <prepare>
}
   1a5ec:	b002      	add	sp, #8
   1a5ee:	bd10      	pop	{r4, pc}

0001a5f0 <lll_resume>:
{
   1a5f0:	b510      	push	{r4, lr}
   1a5f2:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1a5f4:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   1a5f6:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1a5fa:	69c3      	ldr	r3, [r0, #28]
   1a5fc:	6902      	ldr	r2, [r0, #16]
   1a5fe:	f004 0401 	and.w	r4, r4, #1
   1a602:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1a606:	9401      	str	r4, [sp, #4]
   1a608:	f7ff fef6 	bl	1a3f8 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1a60c:	b108      	cbz	r0, 1a612 <lll_resume+0x22>
   1a60e:	3044      	adds	r0, #68	; 0x44
   1a610:	d101      	bne.n	1a616 <lll_resume+0x26>
}
   1a612:	b002      	add	sp, #8
   1a614:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1a616:	4a07      	ldr	r2, [pc, #28]	; (1a634 <lll_resume+0x44>)
   1a618:	4907      	ldr	r1, [pc, #28]	; (1a638 <lll_resume+0x48>)
   1a61a:	4808      	ldr	r0, [pc, #32]	; (1a63c <lll_resume+0x4c>)
   1a61c:	23fe      	movs	r3, #254	; 0xfe
   1a61e:	f006 fe39 	bl	21294 <printk>
   1a622:	4040      	eors	r0, r0
   1a624:	f380 8811 	msr	BASEPRI, r0
   1a628:	f04f 0003 	mov.w	r0, #3
   1a62c:	df02      	svc	2
}
   1a62e:	b002      	add	sp, #8
   1a630:	bd10      	pop	{r4, pc}
   1a632:	bf00      	nop
   1a634:	00028468 	.word	0x00028468
   1a638:	00028508 	.word	0x00028508
   1a63c:	00027ab4 	.word	0x00027ab4

0001a640 <lll_disable>:
{
   1a640:	b510      	push	{r4, lr}
	if (!param || (param == event.curr.param)) {
   1a642:	4604      	mov	r4, r0
{
   1a644:	b082      	sub	sp, #8
	if (!param || (param == event.curr.param)) {
   1a646:	2800      	cmp	r0, #0
   1a648:	d033      	beq.n	1a6b2 <lll_disable+0x72>
   1a64a:	4b26      	ldr	r3, [pc, #152]	; (1a6e4 <lll_disable+0xa4>)
   1a64c:	681a      	ldr	r2, [r3, #0]
   1a64e:	4282      	cmp	r2, r0
   1a650:	d029      	beq.n	1a6a6 <lll_disable+0x66>
		idx = UINT8_MAX;
   1a652:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1a654:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1a658:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1a65c:	f7f9 fc2a 	bl	13eb4 <ull_prepare_dequeue_iter>
		while (next) {
   1a660:	b940      	cbnz	r0, 1a674 <lll_disable+0x34>
   1a662:	e01c      	b.n	1a69e <lll_disable+0x5e>
			    (!param || (param == next->prepare_param.param))) {
   1a664:	68c3      	ldr	r3, [r0, #12]
   1a666:	42a3      	cmp	r3, r4
   1a668:	d01b      	beq.n	1a6a2 <lll_disable+0x62>
			next = ull_prepare_dequeue_iter(&idx);
   1a66a:	f10d 0007 	add.w	r0, sp, #7
   1a66e:	f7f9 fc21 	bl	13eb4 <ull_prepare_dequeue_iter>
		while (next) {
   1a672:	b1a0      	cbz	r0, 1a69e <lll_disable+0x5e>
			if (!next->is_aborted &&
   1a674:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a678:	079b      	lsls	r3, r3, #30
   1a67a:	d4f6      	bmi.n	1a66a <lll_disable+0x2a>
   1a67c:	2c00      	cmp	r4, #0
   1a67e:	d1f1      	bne.n	1a664 <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   1a680:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   1a682:	f890 3020 	ldrb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1a686:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1a688:	f043 0302 	orr.w	r3, r3, #2
   1a68c:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1a690:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1a692:	f10d 0007 	add.w	r0, sp, #7
   1a696:	f7f9 fc0d 	bl	13eb4 <ull_prepare_dequeue_iter>
		while (next) {
   1a69a:	2800      	cmp	r0, #0
   1a69c:	d1ea      	bne.n	1a674 <lll_disable+0x34>
}
   1a69e:	b002      	add	sp, #8
   1a6a0:	bd10      	pop	{r4, pc}
   1a6a2:	4621      	mov	r1, r4
   1a6a4:	e7ed      	b.n	1a682 <lll_disable+0x42>
		if (event.curr.abort_cb && event.curr.param) {
   1a6a6:	689b      	ldr	r3, [r3, #8]
   1a6a8:	b16b      	cbz	r3, 1a6c6 <lll_disable+0x86>
   1a6aa:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1a6ac:	2000      	movs	r0, #0
   1a6ae:	4798      	blx	r3
   1a6b0:	e7cf      	b.n	1a652 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   1a6b2:	4a0c      	ldr	r2, [pc, #48]	; (1a6e4 <lll_disable+0xa4>)
   1a6b4:	6893      	ldr	r3, [r2, #8]
   1a6b6:	2b00      	cmp	r3, #0
   1a6b8:	d0cb      	beq.n	1a652 <lll_disable+0x12>
   1a6ba:	6811      	ldr	r1, [r2, #0]
   1a6bc:	2900      	cmp	r1, #0
   1a6be:	d0c8      	beq.n	1a652 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   1a6c0:	2000      	movs	r0, #0
   1a6c2:	4798      	blx	r3
   1a6c4:	e7c5      	b.n	1a652 <lll_disable+0x12>
			LL_ASSERT(!param);
   1a6c6:	4a08      	ldr	r2, [pc, #32]	; (1a6e8 <lll_disable+0xa8>)
   1a6c8:	4908      	ldr	r1, [pc, #32]	; (1a6ec <lll_disable+0xac>)
   1a6ca:	4809      	ldr	r0, [pc, #36]	; (1a6f0 <lll_disable+0xb0>)
   1a6cc:	f44f 7384 	mov.w	r3, #264	; 0x108
   1a6d0:	f006 fde0 	bl	21294 <printk>
   1a6d4:	4040      	eors	r0, r0
   1a6d6:	f380 8811 	msr	BASEPRI, r0
   1a6da:	f04f 0003 	mov.w	r0, #3
   1a6de:	df02      	svc	2
   1a6e0:	e7b7      	b.n	1a652 <lll_disable+0x12>
   1a6e2:	bf00      	nop
   1a6e4:	2000e7a8 	.word	0x2000e7a8
   1a6e8:	00028468 	.word	0x00028468
   1a6ec:	0002851c 	.word	0x0002851c
   1a6f0:	00027ab4 	.word	0x00027ab4

0001a6f4 <lll_prepare_done>:
}
   1a6f4:	2000      	movs	r0, #0
   1a6f6:	4770      	bx	lr

0001a6f8 <lll_done>:
{
   1a6f8:	b510      	push	{r4, lr}
   1a6fa:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1a6fc:	f7f9 fbcc 	bl	13e98 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1a700:	b13c      	cbz	r4, 1a712 <lll_done+0x1a>
   1a702:	b320      	cbz	r0, 1a74e <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1a704:	6820      	ldr	r0, [r4, #0]
   1a706:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1a708:	f7f9 fc04 	bl	13f14 <ull_event_done>
	LL_ASSERT(evdone);
   1a70c:	b180      	cbz	r0, 1a730 <lll_done+0x38>
}
   1a70e:	2000      	movs	r0, #0
   1a710:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   1a712:	4c1d      	ldr	r4, [pc, #116]	; (1a788 <lll_done+0x90>)
   1a714:	68a3      	ldr	r3, [r4, #8]
   1a716:	b343      	cbz	r3, 1a76a <lll_done+0x72>
		param = event.curr.param;
   1a718:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1a71a:	2300      	movs	r3, #0
   1a71c:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1a71e:	6023      	str	r3, [r4, #0]
		if (param) {
   1a720:	2800      	cmp	r0, #0
   1a722:	d0f1      	beq.n	1a708 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1a724:	6800      	ldr	r0, [r0, #0]
   1a726:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1a728:	f7f9 fbf4 	bl	13f14 <ull_event_done>
	LL_ASSERT(evdone);
   1a72c:	2800      	cmp	r0, #0
   1a72e:	d1ee      	bne.n	1a70e <lll_done+0x16>
   1a730:	4a16      	ldr	r2, [pc, #88]	; (1a78c <lll_done+0x94>)
   1a732:	4917      	ldr	r1, [pc, #92]	; (1a790 <lll_done+0x98>)
   1a734:	4817      	ldr	r0, [pc, #92]	; (1a794 <lll_done+0x9c>)
   1a736:	f240 1359 	movw	r3, #345	; 0x159
   1a73a:	f006 fdab 	bl	21294 <printk>
   1a73e:	4040      	eors	r0, r0
   1a740:	f380 8811 	msr	BASEPRI, r0
   1a744:	f04f 0003 	mov.w	r0, #3
   1a748:	df02      	svc	2
}
   1a74a:	2000      	movs	r0, #0
   1a74c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   1a74e:	4a0f      	ldr	r2, [pc, #60]	; (1a78c <lll_done+0x94>)
   1a750:	4911      	ldr	r1, [pc, #68]	; (1a798 <lll_done+0xa0>)
   1a752:	4810      	ldr	r0, [pc, #64]	; (1a794 <lll_done+0x9c>)
   1a754:	f240 133b 	movw	r3, #315	; 0x13b
   1a758:	f006 fd9c 	bl	21294 <printk>
   1a75c:	4040      	eors	r0, r0
   1a75e:	f380 8811 	msr	BASEPRI, r0
   1a762:	f04f 0003 	mov.w	r0, #3
   1a766:	df02      	svc	2
   1a768:	e7cc      	b.n	1a704 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1a76a:	4a08      	ldr	r2, [pc, #32]	; (1a78c <lll_done+0x94>)
   1a76c:	490b      	ldr	r1, [pc, #44]	; (1a79c <lll_done+0xa4>)
   1a76e:	4809      	ldr	r0, [pc, #36]	; (1a794 <lll_done+0x9c>)
   1a770:	f240 1341 	movw	r3, #321	; 0x141
   1a774:	f006 fd8e 	bl	21294 <printk>
   1a778:	4040      	eors	r0, r0
   1a77a:	f380 8811 	msr	BASEPRI, r0
   1a77e:	f04f 0003 	mov.w	r0, #3
   1a782:	df02      	svc	2
   1a784:	e7c8      	b.n	1a718 <lll_done+0x20>
   1a786:	bf00      	nop
   1a788:	2000e7a8 	.word	0x2000e7a8
   1a78c:	00028468 	.word	0x00028468
   1a790:	00028548 	.word	0x00028548
   1a794:	00027ab4 	.word	0x00027ab4
   1a798:	00028524 	.word	0x00028524
   1a79c:	00028534 	.word	0x00028534

0001a7a0 <lll_is_abort_cb>:
}
   1a7a0:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1a7a4:	4770      	bx	lr
   1a7a6:	bf00      	nop

0001a7a8 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   1a7a8:	6803      	ldr	r3, [r0, #0]
   1a7aa:	2b00      	cmp	r3, #0
		return MAX(evt->ticks_active_to_start,
   1a7ac:	bfb4      	ite	lt
   1a7ae:	e9d0 0301 	ldrdlt	r0, r3, [r0, #4]
		return MAX(evt->ticks_active_to_start,
   1a7b2:	6840      	ldrge	r0, [r0, #4]
   1a7b4:	4298      	cmp	r0, r3
   1a7b6:	bf38      	it	cc
   1a7b8:	4618      	movcc	r0, r3
}
   1a7ba:	4770      	bx	lr

0001a7bc <lll_preempt_calc>:
{
   1a7bc:	b510      	push	{r4, lr}
   1a7be:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1a7c0:	f7f6 fe76 	bl	114b0 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   1a7c4:	4621      	mov	r1, r4
   1a7c6:	f7f6 fe75 	bl	114b4 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1a7ca:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   1a7cc:	0203      	lsls	r3, r0, #8
   1a7ce:	d404      	bmi.n	1a7da <lll_preempt_calc+0x1e>
   1a7d0:	2809      	cmp	r0, #9
   1a7d2:	bf94      	ite	ls
   1a7d4:	2000      	movls	r0, #0
   1a7d6:	2001      	movhi	r0, #1
}
   1a7d8:	bd10      	pop	{r4, pc}
	return 0;
   1a7da:	2000      	movs	r0, #0
}
   1a7dc:	bd10      	pop	{r4, pc}
   1a7de:	bf00      	nop

0001a7e0 <lll_chan_set>:
	switch (chan) {
   1a7e0:	2826      	cmp	r0, #38	; 0x26
{
   1a7e2:	b510      	push	{r4, lr}
   1a7e4:	4604      	mov	r4, r0
	switch (chan) {
   1a7e6:	d01c      	beq.n	1a822 <lll_chan_set+0x42>
   1a7e8:	2827      	cmp	r0, #39	; 0x27
   1a7ea:	d012      	beq.n	1a812 <lll_chan_set+0x32>
   1a7ec:	2825      	cmp	r0, #37	; 0x25
   1a7ee:	d008      	beq.n	1a802 <lll_chan_set+0x22>
		if (chan < 11) {
   1a7f0:	280a      	cmp	r0, #10
   1a7f2:	d91e      	bls.n	1a832 <lll_chan_set+0x52>
		} else if (chan < 40) {
   1a7f4:	2827      	cmp	r0, #39	; 0x27
   1a7f6:	d821      	bhi.n	1a83c <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1a7f8:	3003      	adds	r0, #3
   1a7fa:	0040      	lsls	r0, r0, #1
   1a7fc:	f001 fc64 	bl	1c0c8 <radio_freq_chan_set>
   1a800:	e002      	b.n	1a808 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1a802:	2002      	movs	r0, #2
   1a804:	f001 fc60 	bl	1c0c8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a808:	4620      	mov	r0, r4
}
   1a80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a80e:	f001 bc61 	b.w	1c0d4 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1a812:	2050      	movs	r0, #80	; 0x50
   1a814:	f001 fc58 	bl	1c0c8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a818:	4620      	mov	r0, r4
}
   1a81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a81e:	f001 bc59 	b.w	1c0d4 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1a822:	201a      	movs	r0, #26
   1a824:	f001 fc50 	bl	1c0c8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1a828:	4620      	mov	r0, r4
}
   1a82a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1a82e:	f001 bc51 	b.w	1c0d4 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1a832:	3002      	adds	r0, #2
   1a834:	0040      	lsls	r0, r0, #1
   1a836:	f001 fc47 	bl	1c0c8 <radio_freq_chan_set>
   1a83a:	e7e5      	b.n	1a808 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1a83c:	4a06      	ldr	r2, [pc, #24]	; (1a858 <lll_chan_set+0x78>)
   1a83e:	4907      	ldr	r1, [pc, #28]	; (1a85c <lll_chan_set+0x7c>)
   1a840:	4807      	ldr	r0, [pc, #28]	; (1a860 <lll_chan_set+0x80>)
   1a842:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   1a846:	f006 fd25 	bl	21294 <printk>
   1a84a:	4040      	eors	r0, r0
   1a84c:	f380 8811 	msr	BASEPRI, r0
   1a850:	f04f 0003 	mov.w	r0, #3
   1a854:	df02      	svc	2
   1a856:	e7d7      	b.n	1a808 <lll_chan_set+0x28>
   1a858:	00028468 	.word	0x00028468
   1a85c:	00027b4c 	.word	0x00027b4c
   1a860:	00027ab4 	.word	0x00027ab4

0001a864 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1a864:	f001 bc9c 	b.w	1c1a0 <radio_rx_ready_delay_get>

0001a868 <lll_isr_tx_status_reset>:
{
   1a868:	b508      	push	{r3, lr}
	radio_status_reset();
   1a86a:	f001 fcbb 	bl	1c1e4 <radio_status_reset>
}
   1a86e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1a872:	f001 be09 	b.w	1c488 <radio_tmr_status_reset>
   1a876:	bf00      	nop

0001a878 <lll_isr_rx_status_reset>:
{
   1a878:	b508      	push	{r3, lr}
	radio_status_reset();
   1a87a:	f001 fcb3 	bl	1c1e4 <radio_status_reset>
	radio_tmr_status_reset();
   1a87e:	f001 fe03 	bl	1c488 <radio_tmr_status_reset>
}
   1a882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1a886:	f001 bdab 	b.w	1c3e0 <radio_rssi_status_reset>
   1a88a:	bf00      	nop

0001a88c <lll_isr_status_reset>:
{
   1a88c:	b508      	push	{r3, lr}
	radio_status_reset();
   1a88e:	f001 fca9 	bl	1c1e4 <radio_status_reset>
	radio_tmr_status_reset();
   1a892:	f001 fdf9 	bl	1c488 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1a896:	f001 fddf 	bl	1c458 <radio_filter_status_reset>
	radio_ar_status_reset();
   1a89a:	f001 ffbf 	bl	1c81c <radio_ar_status_reset>
}
   1a89e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1a8a2:	f001 bd9d 	b.w	1c3e0 <radio_rssi_status_reset>
   1a8a6:	bf00      	nop

0001a8a8 <lll_isr_cleanup>:
{
   1a8a8:	b508      	push	{r3, lr}
   1a8aa:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1a8ac:	4815      	ldr	r0, [pc, #84]	; (1a904 <lll_isr_cleanup+0x5c>)
   1a8ae:	f001 fb8f 	bl	1bfd0 <radio_isr_set>
	if (!radio_is_idle()) {
   1a8b2:	f001 fcb7 	bl	1c224 <radio_is_idle>
   1a8b6:	b150      	cbz	r0, 1a8ce <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1a8b8:	f001 fe8a 	bl	1c5d0 <radio_tmr_stop>
	err = lll_hfclock_off();
   1a8bc:	f000 f8ae 	bl	1aa1c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a8c0:	2800      	cmp	r0, #0
   1a8c2:	db0c      	blt.n	1a8de <lll_isr_cleanup+0x36>
}
   1a8c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1a8c8:	2000      	movs	r0, #0
   1a8ca:	f7ff bf15 	b.w	1a6f8 <lll_done>
		radio_disable();
   1a8ce:	f001 fc75 	bl	1c1bc <radio_disable>
	radio_tmr_stop();
   1a8d2:	f001 fe7d 	bl	1c5d0 <radio_tmr_stop>
	err = lll_hfclock_off();
   1a8d6:	f000 f8a1 	bl	1aa1c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1a8da:	2800      	cmp	r0, #0
   1a8dc:	daf2      	bge.n	1a8c4 <lll_isr_cleanup+0x1c>
   1a8de:	4a0a      	ldr	r2, [pc, #40]	; (1a908 <lll_isr_cleanup+0x60>)
   1a8e0:	490a      	ldr	r1, [pc, #40]	; (1a90c <lll_isr_cleanup+0x64>)
   1a8e2:	480b      	ldr	r0, [pc, #44]	; (1a910 <lll_isr_cleanup+0x68>)
   1a8e4:	f240 231f 	movw	r3, #543	; 0x21f
   1a8e8:	f006 fcd4 	bl	21294 <printk>
   1a8ec:	4040      	eors	r0, r0
   1a8ee:	f380 8811 	msr	BASEPRI, r0
   1a8f2:	f04f 0003 	mov.w	r0, #3
   1a8f6:	df02      	svc	2
	lll_done(NULL);
   1a8f8:	2000      	movs	r0, #0
}
   1a8fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1a8fe:	f7ff befb 	b.w	1a6f8 <lll_done>
   1a902:	bf00      	nop
   1a904:	0001a19d 	.word	0x0001a19d
   1a908:	00028468 	.word	0x00028468
   1a90c:	00028550 	.word	0x00028550
   1a910:	00027ab4 	.word	0x00027ab4

0001a914 <lll_isr_abort>:
{
   1a914:	b510      	push	{r4, lr}
   1a916:	4604      	mov	r4, r0
	radio_status_reset();
   1a918:	f001 fc64 	bl	1c1e4 <radio_status_reset>
	radio_tmr_status_reset();
   1a91c:	f001 fdb4 	bl	1c488 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1a920:	f001 fd9a 	bl	1c458 <radio_filter_status_reset>
	radio_ar_status_reset();
   1a924:	f001 ff7a 	bl	1c81c <radio_ar_status_reset>
	radio_rssi_status_reset();
   1a928:	f001 fd5a 	bl	1c3e0 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1a92c:	4620      	mov	r0, r4
}
   1a92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1a932:	f7ff bfb9 	b.w	1a8a8 <lll_isr_cleanup>
   1a936:	bf00      	nop

0001a938 <clock_ready>:
	z_impl_k_sem_give(sem);
   1a938:	f101 0010 	add.w	r0, r1, #16
   1a93c:	f005 b94a 	b.w	1fbd4 <z_impl_k_sem_give>

0001a940 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1a940:	b570      	push	{r4, r5, r6, lr}
   1a942:	4605      	mov	r5, r0
   1a944:	b08a      	sub	sp, #40	; 0x28
   1a946:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a948:	2201      	movs	r2, #1
   1a94a:	2100      	movs	r1, #0
   1a94c:	a804      	add	r0, sp, #16
   1a94e:	f00b ff41 	bl	267d4 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1a952:	4b0f      	ldr	r3, [pc, #60]	; (1a990 <blocking_on+0x50>)
   1a954:	9301      	str	r3, [sp, #4]
   1a956:	2600      	movs	r6, #0
   1a958:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1a95a:	4669      	mov	r1, sp
   1a95c:	4628      	mov	r0, r5
   1a95e:	9603      	str	r6, [sp, #12]
   1a960:	9302      	str	r3, [sp, #8]
   1a962:	f006 fd13 	bl	2138c <onoff_request>
	if (err < 0) {
   1a966:	2800      	cmp	r0, #0
   1a968:	db10      	blt.n	1a98c <blocking_on+0x4c>
   1a96a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a96e:	4631      	mov	r1, r6
   1a970:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a974:	fbe4 0103 	umlal	r0, r1, r4, r3
   1a978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a97c:	2300      	movs	r3, #0
   1a97e:	f7e6 fa63 	bl	e48 <__aeabi_uldivmod>
   1a982:	4602      	mov	r2, r0
   1a984:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1a986:	a804      	add	r0, sp, #16
   1a988:	f005 f94a 	bl	1fc20 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1a98c:	b00a      	add	sp, #40	; 0x28
   1a98e:	bd70      	pop	{r4, r5, r6, pc}
   1a990:	0001a939 	.word	0x0001a939

0001a994 <lll_clock_init>:

int lll_clock_init(void)
{
   1a994:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1a996:	2001      	movs	r0, #1
   1a998:	f7eb fece 	bl	6738 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1a99c:	4904      	ldr	r1, [pc, #16]	; (1a9b0 <lll_clock_init+0x1c>)
   1a99e:	2300      	movs	r3, #0
   1a9a0:	2401      	movs	r4, #1
   1a9a2:	608c      	str	r4, [r1, #8]
   1a9a4:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1a9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a9aa:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1a9ac:	f006 bcee 	b.w	2138c <onoff_request>
   1a9b0:	2000e7c0 	.word	0x2000e7c0

0001a9b4 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1a9b4:	4b0c      	ldr	r3, [pc, #48]	; (1a9e8 <lll_clock_wait+0x34>)
   1a9b6:	781a      	ldrb	r2, [r3, #0]
   1a9b8:	b10a      	cbz	r2, 1a9be <lll_clock_wait+0xa>
		return 0;
   1a9ba:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1a9bc:	4770      	bx	lr
{
   1a9be:	b510      	push	{r4, lr}
	done = true;
   1a9c0:	2001      	movs	r0, #1
   1a9c2:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1a9c4:	f7eb feb8 	bl	6738 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1a9c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1a9cc:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1a9ce:	f7ff ffb7 	bl	1a940 <blocking_on>
	if (err) {
   1a9d2:	b938      	cbnz	r0, 1a9e4 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   1a9d4:	4620      	mov	r0, r4
   1a9d6:	f006 fd22 	bl	2141e <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1a9da:	2802      	cmp	r0, #2
		return 0;
   1a9dc:	bf0c      	ite	eq
   1a9de:	2000      	moveq	r0, #0
		return -EIO;
   1a9e0:	f06f 0004 	mvnne.w	r0, #4
}
   1a9e4:	bd10      	pop	{r4, pc}
   1a9e6:	bf00      	nop
   1a9e8:	2000f2b8 	.word	0x2000f2b8

0001a9ec <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1a9ec:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a9ee:	4b0a      	ldr	r3, [pc, #40]	; (1aa18 <lll_hfclock_on+0x2c>)
   1a9f0:	f3bf 8f5b 	dmb	ish
   1a9f4:	e853 2f00 	ldrex	r2, [r3]
   1a9f8:	1c51      	adds	r1, r2, #1
   1a9fa:	e843 1000 	strex	r0, r1, [r3]
   1a9fe:	2800      	cmp	r0, #0
   1aa00:	d1f8      	bne.n	1a9f4 <lll_hfclock_on+0x8>
   1aa02:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1aa06:	2a00      	cmp	r2, #0
   1aa08:	dd01      	ble.n	1aa0e <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1aa0a:	2000      	movs	r0, #0
   1aa0c:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1aa0e:	f7eb fe9b 	bl	6748 <z_nrf_clock_bt_ctlr_hf_request>
}
   1aa12:	2000      	movs	r0, #0
   1aa14:	bd08      	pop	{r3, pc}
   1aa16:	bf00      	nop
   1aa18:	2000e7bc 	.word	0x2000e7bc

0001aa1c <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1aa1c:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1aa1e:	4b0d      	ldr	r3, [pc, #52]	; (1aa54 <lll_hfclock_off+0x38>)
   1aa20:	681a      	ldr	r2, [r3, #0]
   1aa22:	2a00      	cmp	r2, #0
   1aa24:	dd12      	ble.n	1aa4c <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1aa26:	f3bf 8f5b 	dmb	ish
   1aa2a:	e853 2f00 	ldrex	r2, [r3]
   1aa2e:	1e51      	subs	r1, r2, #1
   1aa30:	e843 1000 	strex	r0, r1, [r3]
   1aa34:	2800      	cmp	r0, #0
   1aa36:	d1f8      	bne.n	1aa2a <lll_hfclock_off+0xe>
   1aa38:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1aa3c:	2a01      	cmp	r2, #1
   1aa3e:	dd01      	ble.n	1aa44 <lll_hfclock_off+0x28>
		return 0;
   1aa40:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1aa42:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1aa44:	f7eb fe96 	bl	6774 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1aa48:	2000      	movs	r0, #0
}
   1aa4a:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1aa4c:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1aa50:	bd08      	pop	{r3, pc}
   1aa52:	bf00      	nop
   1aa54:	2000e7bc 	.word	0x2000e7bc

0001aa58 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   1aa58:	2014      	movs	r0, #20
   1aa5a:	4770      	bx	lr

0001aa5c <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   1aa5c:	4b01      	ldr	r3, [pc, #4]	; (1aa64 <lll_clock_ppm_get+0x8>)
}
   1aa5e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1aa62:	4770      	bx	lr
   1aa64:	0002857c 	.word	0x0002857c

0001aa68 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1aa68:	b510      	push	{r4, lr}
   1aa6a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1aa6c:	f7ff ff0e 	bl	1a88c <lll_isr_status_reset>

	radio_filter_disable();
   1aa70:	f001 fce8 	bl	1c444 <radio_filter_disable>

	lll_isr_cleanup(param);
   1aa74:	4620      	mov	r0, r4
}
   1aa76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1aa7a:	f7ff bf15 	b.w	1a8a8 <lll_isr_cleanup>
   1aa7e:	bf00      	nop

0001aa80 <isr_tx>:
{
   1aa80:	b530      	push	{r4, r5, lr}
   1aa82:	b083      	sub	sp, #12
   1aa84:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1aa86:	f7ff feef 	bl	1a868 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1aa8a:	2096      	movs	r0, #150	; 0x96
   1aa8c:	f001 fd0c 	bl	1c4a8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1aa90:	2300      	movs	r3, #0
   1aa92:	461a      	mov	r2, r3
   1aa94:	4619      	mov	r1, r3
   1aa96:	4618      	mov	r0, r3
   1aa98:	f001 fc34 	bl	1c304 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1aa9c:	f001 fbe6 	bl	1c26c <radio_pkt_scratch_get>
   1aaa0:	f001 fb70 	bl	1c184 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1aaa4:	f001 fbaa 	bl	1c1fc <radio_is_ready>
   1aaa8:	b9e0      	cbnz	r0, 1aae4 <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   1aaaa:	481e      	ldr	r0, [pc, #120]	; (1ab24 <isr_tx+0xa4>)
   1aaac:	4621      	mov	r1, r4
   1aaae:	f001 fa8f 	bl	1bfd0 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1aab2:	f7ff fb41 	bl	1a138 <ull_filter_lll_rl_enabled>
   1aab6:	bb50      	cbnz	r0, 1ab0e <isr_tx+0x8e>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1aab8:	f001 fdde 	bl	1c678 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1aabc:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1aabe:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1aac0:	4608      	mov	r0, r1
   1aac2:	f001 fb6f 	bl	1c1a4 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1aac6:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1aac8:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1aaca:	4608      	mov	r0, r1
   1aacc:	f001 fb66 	bl	1c19c <radio_tx_chain_delay_get>
   1aad0:	442c      	add	r4, r5
   1aad2:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1aad4:	1a20      	subs	r0, r4, r0
   1aad6:	f001 fd87 	bl	1c5e8 <radio_tmr_hcto_configure>
}
   1aada:	b003      	add	sp, #12
   1aadc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   1aae0:	f001 bdbc 	b.w	1c65c <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   1aae4:	4a10      	ldr	r2, [pc, #64]	; (1ab28 <isr_tx+0xa8>)
   1aae6:	4911      	ldr	r1, [pc, #68]	; (1ab2c <isr_tx+0xac>)
   1aae8:	4811      	ldr	r0, [pc, #68]	; (1ab30 <isr_tx+0xb0>)
   1aaea:	f240 238e 	movw	r3, #654	; 0x28e
   1aaee:	f006 fbd1 	bl	21294 <printk>
   1aaf2:	4040      	eors	r0, r0
   1aaf4:	f380 8811 	msr	BASEPRI, r0
   1aaf8:	f04f 0003 	mov.w	r0, #3
   1aafc:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1aafe:	4809      	ldr	r0, [pc, #36]	; (1ab24 <isr_tx+0xa4>)
   1ab00:	4621      	mov	r1, r4
   1ab02:	f001 fa65 	bl	1bfd0 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1ab06:	f7ff fb17 	bl	1a138 <ull_filter_lll_rl_enabled>
   1ab0a:	2800      	cmp	r0, #0
   1ab0c:	d0d4      	beq.n	1aab8 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1ab0e:	f10d 0007 	add.w	r0, sp, #7
   1ab12:	f7ff fa3b 	bl	19f8c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1ab16:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1ab18:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1ab1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ab1e:	f001 fe43 	bl	1c7a8 <radio_ar_configure>
   1ab22:	e7c9      	b.n	1aab8 <isr_tx+0x38>
   1ab24:	0001b285 	.word	0x0001b285
   1ab28:	0002858c 	.word	0x0002858c
   1ab2c:	000285d8 	.word	0x000285d8
   1ab30:	00027ab4 	.word	0x00027ab4

0001ab34 <is_abort_cb>:
	if (next != curr) {
   1ab34:	4282      	cmp	r2, r0
{
   1ab36:	b508      	push	{r3, lr}
	if (next != curr) {
   1ab38:	d011      	beq.n	1ab5e <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   1ab3a:	7b12      	ldrb	r2, [r2, #12]
   1ab3c:	07d2      	lsls	r2, r2, #31
   1ab3e:	d402      	bmi.n	1ab46 <is_abort_cb+0x12>
			return -ECANCELED;
   1ab40:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   1ab44:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1ab46:	4914      	ldr	r1, [pc, #80]	; (1ab98 <is_abort_cb+0x64>)
   1ab48:	6019      	str	r1, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1ab4a:	9b02      	ldr	r3, [sp, #8]
   1ab4c:	2200      	movs	r2, #0
   1ab4e:	601a      	str	r2, [r3, #0]
			err = lll_hfclock_on();
   1ab50:	f7ff ff4c 	bl	1a9ec <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1ab54:	2800      	cmp	r0, #0
   1ab56:	db0f      	blt.n	1ab78 <is_abort_cb+0x44>
   1ab58:	f06f 000a 	mvn.w	r0, #10
}
   1ab5c:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1ab5e:	7c13      	ldrb	r3, [r2, #16]
   1ab60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1ab64:	6953      	ldr	r3, [r2, #20]
   1ab66:	781b      	ldrb	r3, [r3, #0]
   1ab68:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1ab6c:	2b01      	cmp	r3, #1
   1ab6e:	bf14      	ite	ne
   1ab70:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   1ab74:	2000      	moveq	r0, #0
}
   1ab76:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1ab78:	4a08      	ldr	r2, [pc, #32]	; (1ab9c <is_abort_cb+0x68>)
   1ab7a:	4909      	ldr	r1, [pc, #36]	; (1aba0 <is_abort_cb+0x6c>)
   1ab7c:	4809      	ldr	r0, [pc, #36]	; (1aba4 <is_abort_cb+0x70>)
   1ab7e:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1ab82:	f006 fb87 	bl	21294 <printk>
   1ab86:	4040      	eors	r0, r0
   1ab88:	f380 8811 	msr	BASEPRI, r0
   1ab8c:	f04f 0003 	mov.w	r0, #3
   1ab90:	df02      	svc	2
   1ab92:	f06f 000a 	mvn.w	r0, #10
}
   1ab96:	bd08      	pop	{r3, pc}
   1ab98:	0001b0a1 	.word	0x0001b0a1
   1ab9c:	0002858c 	.word	0x0002858c
   1aba0:	00028550 	.word	0x00028550
   1aba4:	00027ab4 	.word	0x00027ab4

0001aba8 <abort_cb>:
{
   1aba8:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1abaa:	b1d8      	cbz	r0, 1abe4 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1abac:	460c      	mov	r4, r1
   1abae:	f7ff ff35 	bl	1aa1c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1abb2:	2800      	cmp	r0, #0
   1abb4:	db04      	blt.n	1abc0 <abort_cb+0x18>
	lll_done(param);
   1abb6:	4620      	mov	r0, r4
}
   1abb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1abbc:	f7ff bd9c 	b.w	1a6f8 <lll_done>
	LL_ASSERT(err >= 0);
   1abc0:	4a0c      	ldr	r2, [pc, #48]	; (1abf4 <abort_cb+0x4c>)
   1abc2:	490d      	ldr	r1, [pc, #52]	; (1abf8 <abort_cb+0x50>)
   1abc4:	480d      	ldr	r0, [pc, #52]	; (1abfc <abort_cb+0x54>)
   1abc6:	f240 2372 	movw	r3, #626	; 0x272
   1abca:	f006 fb63 	bl	21294 <printk>
   1abce:	4040      	eors	r0, r0
   1abd0:	f380 8811 	msr	BASEPRI, r0
   1abd4:	f04f 0003 	mov.w	r0, #3
   1abd8:	df02      	svc	2
	lll_done(param);
   1abda:	4620      	mov	r0, r4
}
   1abdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1abe0:	f7ff bd8a 	b.w	1a6f8 <lll_done>
		radio_isr_set(isr_abort, param);
   1abe4:	4806      	ldr	r0, [pc, #24]	; (1ac00 <abort_cb+0x58>)
   1abe6:	f001 f9f3 	bl	1bfd0 <radio_isr_set>
}
   1abea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1abee:	f001 bae5 	b.w	1c1bc <radio_disable>
   1abf2:	bf00      	nop
   1abf4:	0002858c 	.word	0x0002858c
   1abf8:	00028550 	.word	0x00028550
   1abfc:	00027ab4 	.word	0x00027ab4
   1ac00:	0001aa69 	.word	0x0001aa69

0001ac04 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1ac04:	4b08      	ldr	r3, [pc, #32]	; (1ac28 <lll_adv_init+0x24>)
{
   1ac06:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1ac08:	1d18      	adds	r0, r3, #4
   1ac0a:	2205      	movs	r2, #5
   1ac0c:	2128      	movs	r1, #40	; 0x28
   1ac0e:	f7f5 f90b 	bl	fe28 <mem_init>
	MFIFO_INIT(pdu_free);
   1ac12:	4b06      	ldr	r3, [pc, #24]	; (1ac2c <lll_adv_init+0x28>)
   1ac14:	2400      	movs	r4, #0
   1ac16:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ac18:	2203      	movs	r2, #3
   1ac1a:	4621      	mov	r1, r4
   1ac1c:	4804      	ldr	r0, [pc, #16]	; (1ac30 <lll_adv_init+0x2c>)
   1ac1e:	f00b fdd9 	bl	267d4 <z_impl_k_sem_init>
}
   1ac22:	4620      	mov	r0, r4
   1ac24:	bd10      	pop	{r4, pc}
   1ac26:	bf00      	nop
   1ac28:	2000e7d0 	.word	0x2000e7d0
   1ac2c:	20000614 	.word	0x20000614
   1ac30:	2000e89c 	.word	0x2000e89c

0001ac34 <lll_adv_reset>:
   1ac34:	4b08      	ldr	r3, [pc, #32]	; (1ac58 <lll_adv_reset+0x24>)
   1ac36:	b510      	push	{r4, lr}
   1ac38:	1d18      	adds	r0, r3, #4
   1ac3a:	2205      	movs	r2, #5
   1ac3c:	2128      	movs	r1, #40	; 0x28
   1ac3e:	f7f5 f8f3 	bl	fe28 <mem_init>
   1ac42:	4b06      	ldr	r3, [pc, #24]	; (1ac5c <lll_adv_reset+0x28>)
   1ac44:	2400      	movs	r4, #0
   1ac46:	805c      	strh	r4, [r3, #2]
   1ac48:	2203      	movs	r2, #3
   1ac4a:	4621      	mov	r1, r4
   1ac4c:	4804      	ldr	r0, [pc, #16]	; (1ac60 <lll_adv_reset+0x2c>)
   1ac4e:	f00b fdc1 	bl	267d4 <z_impl_k_sem_init>
   1ac52:	4620      	mov	r0, r4
   1ac54:	bd10      	pop	{r4, pc}
   1ac56:	bf00      	nop
   1ac58:	2000e7d0 	.word	0x2000e7d0
   1ac5c:	20000614 	.word	0x20000614
   1ac60:	2000e89c 	.word	0x2000e89c

0001ac64 <lll_adv_data_init>:
{
   1ac64:	b510      	push	{r4, lr}
   1ac66:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1ac68:	4805      	ldr	r0, [pc, #20]	; (1ac80 <lll_adv_data_init+0x1c>)
   1ac6a:	f7f5 f90d 	bl	fe88 <mem_acquire>
	if (!p) {
   1ac6e:	b120      	cbz	r0, 1ac7a <lll_adv_data_init+0x16>
   1ac70:	4603      	mov	r3, r0
	p->len = 0U;
   1ac72:	2000      	movs	r0, #0
   1ac74:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1ac76:	6063      	str	r3, [r4, #4]
}
   1ac78:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1ac7a:	f06f 000b 	mvn.w	r0, #11
}
   1ac7e:	bd10      	pop	{r4, pc}
   1ac80:	2000e7d0 	.word	0x2000e7d0

0001ac84 <lll_adv_data_reset>:
{
   1ac84:	4603      	mov	r3, r0
	pdu->first = 0U;
   1ac86:	2000      	movs	r0, #0
   1ac88:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1ac8a:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1ac8c:	6098      	str	r0, [r3, #8]
}
   1ac8e:	4770      	bx	lr

0001ac90 <lll_adv_pdu_alloc>:
{
   1ac90:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   1ac92:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1ac94:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1ac96:	429a      	cmp	r2, r3
   1ac98:	d004      	beq.n	1aca4 <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   1ac9a:	b2d4      	uxtb	r4, r2
   1ac9c:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1ac9e:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1aca0:	4294      	cmp	r4, r2
   1aca2:	d003      	beq.n	1acac <lll_adv_pdu_alloc+0x1c>
		last++;
   1aca4:	3301      	adds	r3, #1
   1aca6:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1aca8:	2b02      	cmp	r3, #2
   1acaa:	d007      	beq.n	1acbc <lll_adv_pdu_alloc+0x2c>
	p = (void *)pdu->pdu[last];
   1acac:	461c      	mov	r4, r3
   1acae:	eb00 0484 	add.w	r4, r0, r4, lsl #2
	*idx = last;
   1acb2:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1acb4:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1acb6:	b14d      	cbz	r5, 1accc <lll_adv_pdu_alloc+0x3c>
}
   1acb8:	4628      	mov	r0, r5
   1acba:	bd70      	pop	{r4, r5, r6, pc}
{
   1acbc:	2400      	movs	r4, #0
			last = 0U;
   1acbe:	4623      	mov	r3, r4
	*idx = last;
   1acc0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1acc4:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1acc6:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1acc8:	2d00      	cmp	r5, #0
   1acca:	d1f5      	bne.n	1acb8 <lll_adv_pdu_alloc+0x28>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1accc:	4e34      	ldr	r6, [pc, #208]	; (1ada0 <lll_adv_pdu_alloc+0x110>)
   1acce:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   1acd0:	78f1      	ldrb	r1, [r6, #3]
   1acd2:	7833      	ldrb	r3, [r6, #0]
   1acd4:	4291      	cmp	r1, r2
   1acd6:	d003      	beq.n	1ace0 <lll_adv_pdu_alloc+0x50>
	return *((void **)(fifo + first * size));
   1acd8:	fb02 6303 	mla	r3, r2, r3, r6
   1acdc:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1acde:	b93d      	cbnz	r5, 1acf0 <lll_adv_pdu_alloc+0x60>
	p = mem_acquire(&mem_pdu.free);
   1ace0:	4830      	ldr	r0, [pc, #192]	; (1ada4 <lll_adv_pdu_alloc+0x114>)
   1ace2:	f7f5 f8d1 	bl	fe88 <mem_acquire>
	if (p) {
   1ace6:	4605      	mov	r5, r0
   1ace8:	b1a8      	cbz	r0, 1ad16 <lll_adv_pdu_alloc+0x86>
	pdu->pdu[last] = (void *)p;
   1acea:	6065      	str	r5, [r4, #4]
}
   1acec:	4628      	mov	r0, r5
   1acee:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   1acf0:	482d      	ldr	r0, [pc, #180]	; (1ada8 <lll_adv_pdu_alloc+0x118>)
   1acf2:	2200      	movs	r2, #0
   1acf4:	2300      	movs	r3, #0
   1acf6:	f004 ff93 	bl	1fc20 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1acfa:	2800      	cmp	r0, #0
   1acfc:	d134      	bne.n	1ad68 <lll_adv_pdu_alloc+0xd8>
	uint8_t _first = *first; /* Copy read-index */
   1acfe:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1ad00:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   1ad02:	7871      	ldrb	r1, [r6, #1]
   1ad04:	429a      	cmp	r2, r3
   1ad06:	d0f0      	beq.n	1acea <lll_adv_pdu_alloc+0x5a>
	_first += 1U;
   1ad08:	3301      	adds	r3, #1
   1ad0a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1ad0c:	4299      	cmp	r1, r3
   1ad0e:	bf08      	it	eq
   1ad10:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1ad12:	70b3      	strb	r3, [r6, #2]
	return mem;
   1ad14:	e7e9      	b.n	1acea <lll_adv_pdu_alloc+0x5a>
   1ad16:	4824      	ldr	r0, [pc, #144]	; (1ada8 <lll_adv_pdu_alloc+0x118>)
   1ad18:	f04f 32ff 	mov.w	r2, #4294967295
   1ad1c:	f04f 33ff 	mov.w	r3, #4294967295
   1ad20:	f004 ff7e 	bl	1fc20 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1ad24:	2800      	cmp	r0, #0
   1ad26:	d12c      	bne.n	1ad82 <lll_adv_pdu_alloc+0xf2>
	uint8_t _first = *first; /* Copy read-index */
   1ad28:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1ad2a:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1ad2c:	7832      	ldrb	r2, [r6, #0]
   1ad2e:	7870      	ldrb	r0, [r6, #1]
   1ad30:	4299      	cmp	r1, r3
   1ad32:	d00a      	beq.n	1ad4a <lll_adv_pdu_alloc+0xba>
	mem = *((void **)(fifo + _first * size));
   1ad34:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   1ad38:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1ad3a:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   1ad3c:	b2db      	uxtb	r3, r3
		_first = 0U;
   1ad3e:	4298      	cmp	r0, r3
   1ad40:	bf08      	it	eq
   1ad42:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1ad44:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   1ad46:	2d00      	cmp	r5, #0
   1ad48:	d1cf      	bne.n	1acea <lll_adv_pdu_alloc+0x5a>
   1ad4a:	4a18      	ldr	r2, [pc, #96]	; (1adac <lll_adv_pdu_alloc+0x11c>)
   1ad4c:	4918      	ldr	r1, [pc, #96]	; (1adb0 <lll_adv_pdu_alloc+0x120>)
   1ad4e:	4819      	ldr	r0, [pc, #100]	; (1adb4 <lll_adv_pdu_alloc+0x124>)
   1ad50:	f44f 7385 	mov.w	r3, #266	; 0x10a
   1ad54:	f006 fa9e 	bl	21294 <printk>
   1ad58:	4040      	eors	r0, r0
   1ad5a:	f380 8811 	msr	BASEPRI, r0
   1ad5e:	f04f 0003 	mov.w	r0, #3
   1ad62:	df02      	svc	2
   1ad64:	2500      	movs	r5, #0
   1ad66:	e7c0      	b.n	1acea <lll_adv_pdu_alloc+0x5a>
		LL_ASSERT(!err);
   1ad68:	4a10      	ldr	r2, [pc, #64]	; (1adac <lll_adv_pdu_alloc+0x11c>)
   1ad6a:	4913      	ldr	r1, [pc, #76]	; (1adb8 <lll_adv_pdu_alloc+0x128>)
   1ad6c:	4811      	ldr	r0, [pc, #68]	; (1adb4 <lll_adv_pdu_alloc+0x124>)
   1ad6e:	23f7      	movs	r3, #247	; 0xf7
   1ad70:	f006 fa90 	bl	21294 <printk>
   1ad74:	4040      	eors	r0, r0
   1ad76:	f380 8811 	msr	BASEPRI, r0
   1ad7a:	f04f 0003 	mov.w	r0, #3
   1ad7e:	df02      	svc	2
   1ad80:	e7bd      	b.n	1acfe <lll_adv_pdu_alloc+0x6e>
	LL_ASSERT(!err);
   1ad82:	4a0a      	ldr	r2, [pc, #40]	; (1adac <lll_adv_pdu_alloc+0x11c>)
   1ad84:	490c      	ldr	r1, [pc, #48]	; (1adb8 <lll_adv_pdu_alloc+0x128>)
   1ad86:	480b      	ldr	r0, [pc, #44]	; (1adb4 <lll_adv_pdu_alloc+0x124>)
   1ad88:	f240 1307 	movw	r3, #263	; 0x107
   1ad8c:	f006 fa82 	bl	21294 <printk>
   1ad90:	4040      	eors	r0, r0
   1ad92:	f380 8811 	msr	BASEPRI, r0
   1ad96:	f04f 0003 	mov.w	r0, #3
   1ad9a:	df02      	svc	2
   1ad9c:	e7c4      	b.n	1ad28 <lll_adv_pdu_alloc+0x98>
   1ad9e:	bf00      	nop
   1ada0:	20000614 	.word	0x20000614
   1ada4:	2000e7d0 	.word	0x2000e7d0
   1ada8:	2000e89c 	.word	0x2000e89c
   1adac:	0002858c 	.word	0x0002858c
   1adb0:	000285ec 	.word	0x000285ec
   1adb4:	00027ab4 	.word	0x00027ab4
   1adb8:	00027d34 	.word	0x00027d34

0001adbc <lll_adv_pdu_latest_get>:
{
   1adbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1adbe:	4604      	mov	r4, r0
	first = pdu->first;
   1adc0:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   1adc2:	7840      	ldrb	r0, [r0, #1]
   1adc4:	4298      	cmp	r0, r3
   1adc6:	d028      	beq.n	1ae1a <lll_adv_pdu_latest_get+0x5e>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1adc8:	4d1c      	ldr	r5, [pc, #112]	; (1ae3c <lll_adv_pdu_latest_get+0x80>)
   1adca:	b2da      	uxtb	r2, r3
	last = last + 1;
   1adcc:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   1adce:	786e      	ldrb	r6, [r5, #1]
   1add0:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   1add2:	3301      	adds	r3, #1
   1add4:	b2db      	uxtb	r3, r3
		last = 0U;
   1add6:	429e      	cmp	r6, r3
   1add8:	bf08      	it	eq
   1adda:	2300      	moveq	r3, #0
	if (last == first) {
   1addc:	4298      	cmp	r0, r3
   1adde:	d01e      	beq.n	1ae1e <lll_adv_pdu_latest_get+0x62>
		first += 1U;
   1ade0:	1c50      	adds	r0, r2, #1
   1ade2:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   1ade4:	2802      	cmp	r0, #2
   1ade6:	bf04      	itt	eq
   1ade8:	2600      	moveq	r6, #0
			first = 0U;
   1adea:	4630      	moveq	r0, r6
		pdu->first = first;
   1adec:	7020      	strb	r0, [r4, #0]
	return (void *)pdu->pdu[first];
   1adee:	bf18      	it	ne
   1adf0:	4606      	movne	r6, r0
		*is_modified = 1U;
   1adf2:	2001      	movs	r0, #1
   1adf4:	7008      	strb	r0, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1adf6:	78e8      	ldrb	r0, [r5, #3]
   1adf8:	7829      	ldrb	r1, [r5, #0]
   1adfa:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1adfe:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   1ae02:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   1ae04:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   1ae06:	6057      	str	r7, [r2, #4]
   1ae08:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1ae0a:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   1ae0c:	480c      	ldr	r0, [pc, #48]	; (1ae40 <lll_adv_pdu_latest_get+0x84>)
   1ae0e:	f004 fee1 	bl	1fbd4 <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   1ae12:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   1ae16:	6860      	ldr	r0, [r4, #4]
}
   1ae18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (void *)pdu->pdu[first];
   1ae1a:	4606      	mov	r6, r0
   1ae1c:	e7f9      	b.n	1ae12 <lll_adv_pdu_latest_get+0x56>
			LL_ASSERT(false);
   1ae1e:	4a09      	ldr	r2, [pc, #36]	; (1ae44 <lll_adv_pdu_latest_get+0x88>)
   1ae20:	4909      	ldr	r1, [pc, #36]	; (1ae48 <lll_adv_pdu_latest_get+0x8c>)
   1ae22:	480a      	ldr	r0, [pc, #40]	; (1ae4c <lll_adv_pdu_latest_get+0x90>)
   1ae24:	f240 131d 	movw	r3, #285	; 0x11d
   1ae28:	f006 fa34 	bl	21294 <printk>
   1ae2c:	4040      	eors	r0, r0
   1ae2e:	f380 8811 	msr	BASEPRI, r0
   1ae32:	f04f 0003 	mov.w	r0, #3
   1ae36:	df02      	svc	2
			return NULL;
   1ae38:	2000      	movs	r0, #0
}
   1ae3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ae3c:	20000614 	.word	0x20000614
   1ae40:	2000e89c 	.word	0x2000e89c
   1ae44:	0002858c 	.word	0x0002858c
   1ae48:	00027b4c 	.word	0x00027b4c
   1ae4c:	00027ab4 	.word	0x00027ab4

0001ae50 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1ae50:	7b03      	ldrb	r3, [r0, #12]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1ae52:	b530      	push	{r4, r5, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1ae54:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1ae58:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1ae5a:	4604      	mov	r4, r0
   1ae5c:	fa93 f0a3 	rbit	r0, r3
   1ae60:	fab0 f080 	clz	r0, r0
   1ae64:	bf08      	it	eq
   1ae66:	f04f 30ff 	moveq.w	r0, #4294967295
	LL_ASSERT(chan);
   1ae6a:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1ae6c:	b083      	sub	sp, #12
	LL_ASSERT(chan);
   1ae6e:	d03d      	beq.n	1aeec <chan_prepare.isra.0+0x9c>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1ae70:	7b22      	ldrb	r2, [r4, #12]
   1ae72:	1e59      	subs	r1, r3, #1
   1ae74:	400b      	ands	r3, r1
   1ae76:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   1ae7a:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1ae7e:	7322      	strb	r2, [r4, #12]
	lll_chan_set(36 + chan);
   1ae80:	f7ff fcae 	bl	1a7e0 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1ae84:	2300      	movs	r3, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1ae86:	f10d 0107 	add.w	r1, sp, #7
   1ae8a:	f104 0010 	add.w	r0, r4, #16
   1ae8e:	f88d 3007 	strb.w	r3, [sp, #7]
   1ae92:	f7ff ff93 	bl	1adbc <lll_adv_pdu_latest_get>
   1ae96:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1ae98:	f001 f97a 	bl	1c190 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1ae9c:	782b      	ldrb	r3, [r5, #0]
   1ae9e:	f003 030f 	and.w	r3, r3, #15
   1aea2:	2b02      	cmp	r3, #2
   1aea4:	d01a      	beq.n	1aedc <chan_prepare.isra.0+0x8c>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1aea6:	f10d 0107 	add.w	r1, sp, #7
   1aeaa:	f104 001c 	add.w	r0, r4, #28
   1aeae:	f7ff ff85 	bl	1adbc <lll_adv_pdu_latest_get>
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1aeb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1aeb6:	b95b      	cbnz	r3, 1aed0 <chan_prepare.isra.0+0x80>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1aeb8:	4621      	mov	r1, r4
   1aeba:	4815      	ldr	r0, [pc, #84]	; (1af10 <chan_prepare.isra.0+0xc0>)
   1aebc:	f001 f888 	bl	1bfd0 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1aec0:	2096      	movs	r0, #150	; 0x96
   1aec2:	f001 faf1 	bl	1c4a8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1aec6:	2000      	movs	r0, #0
   1aec8:	f001 f9d4 	bl	1c274 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1aecc:	b003      	add	sp, #12
   1aece:	bd30      	pop	{r4, r5, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   1aed0:	2206      	movs	r2, #6
   1aed2:	1ca9      	adds	r1, r5, #2
   1aed4:	3002      	adds	r0, #2
   1aed6:	f008 fe50 	bl	23b7a <memcpy>
   1aeda:	e7ed      	b.n	1aeb8 <chan_prepare.isra.0+0x68>
		radio_isr_set(isr_done, lll);
   1aedc:	480d      	ldr	r0, [pc, #52]	; (1af14 <chan_prepare.isra.0+0xc4>)
   1aede:	4621      	mov	r1, r4
   1aee0:	f001 f876 	bl	1bfd0 <radio_isr_set>
		radio_switch_complete_and_disable();
   1aee4:	f001 fa6e 	bl	1c3c4 <radio_switch_complete_and_disable>
}
   1aee8:	b003      	add	sp, #12
   1aeea:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(chan);
   1aeec:	4a0a      	ldr	r2, [pc, #40]	; (1af18 <chan_prepare.isra.0+0xc8>)
   1aeee:	490b      	ldr	r1, [pc, #44]	; (1af1c <chan_prepare.isra.0+0xcc>)
   1aef0:	480b      	ldr	r0, [pc, #44]	; (1af20 <chan_prepare.isra.0+0xd0>)
   1aef2:	f240 3387 	movw	r3, #903	; 0x387
   1aef6:	f006 f9cd 	bl	21294 <printk>
   1aefa:	4040      	eors	r0, r0
   1aefc:	f380 8811 	msr	BASEPRI, r0
   1af00:	f04f 0003 	mov.w	r0, #3
   1af04:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1af06:	7b23      	ldrb	r3, [r4, #12]
   1af08:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1af0c:	e7b0      	b.n	1ae70 <chan_prepare.isra.0+0x20>
   1af0e:	bf00      	nop
   1af10:	0001aa81 	.word	0x0001aa81
   1af14:	0001af25 	.word	0x0001af25
   1af18:	0002858c 	.word	0x0002858c
   1af1c:	00028240 	.word	0x00028240
   1af20:	00027ab4 	.word	0x00027ab4

0001af24 <isr_done>:
{
   1af24:	b510      	push	{r4, lr}
   1af26:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1af28:	f7ff fcb0 	bl	1a88c <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1af2c:	7b23      	ldrb	r3, [r4, #12]
   1af2e:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1af32:	2a01      	cmp	r2, #1
   1af34:	d105      	bne.n	1af42 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1af36:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1af3a:	f362 1306 	bfi	r3, r2, #4, #3
   1af3e:	7323      	strb	r3, [r4, #12]
	if (lll->chan_map_curr) {
   1af40:	b2db      	uxtb	r3, r3
   1af42:	f013 0f70 	tst.w	r3, #112	; 0x70
   1af46:	d106      	bne.n	1af56 <isr_done+0x32>
	radio_filter_disable();
   1af48:	f001 fa7c 	bl	1c444 <radio_filter_disable>
	lll_isr_cleanup(param);
   1af4c:	4620      	mov	r0, r4
}
   1af4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1af52:	f7ff bca9 	b.w	1a8a8 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1af56:	4620      	mov	r0, r4
   1af58:	f7ff ff7a 	bl	1ae50 <chan_prepare.isra.0>
		radio_tx_enable();
   1af5c:	f001 f928 	bl	1c1b0 <radio_tx_enable>
}
   1af60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1af64:	f001 bb7a 	b.w	1c65c <radio_tmr_end_capture>

0001af68 <prepare_cb>:
{
   1af68:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1af6a:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1af6c:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1af6e:	f015 0501 	ands.w	r5, r5, #1
{
   1af72:	b083      	sub	sp, #12
	if (unlikely(lll_is_stop(lll))) {
   1af74:	d16e      	bne.n	1b054 <prepare_cb+0xec>
	radio_reset();
   1af76:	4606      	mov	r6, r0
   1af78:	f001 f86c 	bl	1c054 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1af7c:	4628      	mov	r0, r5
   1af7e:	f001 f89d 	bl	1c0bc <radio_tx_power_set>
	radio_phy_set(0, 0);
   1af82:	4629      	mov	r1, r5
   1af84:	4628      	mov	r0, r5
   1af86:	f001 f889 	bl	1c09c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1af8a:	462a      	mov	r2, r5
   1af8c:	2125      	movs	r1, #37	; 0x25
   1af8e:	2008      	movs	r0, #8
   1af90:	f001 f8ca 	bl	1c128 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1af94:	4b3b      	ldr	r3, [pc, #236]	; (1b084 <prepare_cb+0x11c>)
   1af96:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1af98:	a801      	add	r0, sp, #4
   1af9a:	f001 f8ad 	bl	1c0f8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1af9e:	493a      	ldr	r1, [pc, #232]	; (1b088 <prepare_cb+0x120>)
   1afa0:	f240 605b 	movw	r0, #1627	; 0x65b
   1afa4:	f001 f948 	bl	1c238 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1afa8:	7b23      	ldrb	r3, [r4, #12]
   1afaa:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1afae:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   1afb2:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   1afb4:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   1afb6:	f7ff ff4b 	bl	1ae50 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   1afba:	f7ff f8bd 	bl	1a138 <ull_filter_lll_rl_enabled>
   1afbe:	bb50      	cbnz	r0, 1b016 <prepare_cb+0xae>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1afc0:	7b63      	ldrb	r3, [r4, #13]
   1afc2:	079b      	lsls	r3, r3, #30
   1afc4:	d134      	bne.n	1b030 <prepare_cb+0xc8>
	evt = HDR_LLL2EVT(lll);
   1afc6:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1afc8:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1afca:	4638      	mov	r0, r7
   1afcc:	f7ff fbec 	bl	1a7a8 <lll_evt_offset_get>
   1afd0:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1afd2:	6872      	ldr	r2, [r6, #4]
   1afd4:	f105 0109 	add.w	r1, r5, #9
   1afd8:	2001      	movs	r0, #1
   1afda:	f001 fa71 	bl	1c4c0 <radio_tmr_start>
	radio_tmr_end_capture();
   1afde:	f001 fb3d 	bl	1c65c <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1afe2:	4620      	mov	r0, r4
   1afe4:	f7f9 fb6e 	bl	146c4 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1afe8:	1c81      	adds	r1, r0, #2
   1afea:	462a      	mov	r2, r5
   1afec:	b2c9      	uxtb	r1, r1
   1afee:	4638      	mov	r0, r7
   1aff0:	f7ff fbe4 	bl	1a7bc <lll_preempt_calc>
   1aff4:	b930      	cbnz	r0, 1b004 <prepare_cb+0x9c>
		ret = lll_prepare_done(lll);
   1aff6:	4620      	mov	r0, r4
   1aff8:	f7ff fb7c 	bl	1a6f4 <lll_prepare_done>
		LL_ASSERT(!ret);
   1affc:	b9d0      	cbnz	r0, 1b034 <prepare_cb+0xcc>
}
   1affe:	2000      	movs	r0, #0
   1b000:	b003      	add	sp, #12
   1b002:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1b004:	4821      	ldr	r0, [pc, #132]	; (1b08c <prepare_cb+0x124>)
   1b006:	4621      	mov	r1, r4
   1b008:	f000 ffe2 	bl	1bfd0 <radio_isr_set>
		radio_disable();
   1b00c:	f001 f8d6 	bl	1c1bc <radio_disable>
}
   1b010:	2000      	movs	r0, #0
   1b012:	b003      	add	sp, #12
   1b014:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   1b016:	7b60      	ldrb	r0, [r4, #13]
   1b018:	f010 0003 	ands.w	r0, r0, #3
   1b01c:	bf18      	it	ne
   1b01e:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   1b020:	f7ff f840 	bl	1a0a4 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1b024:	7841      	ldrb	r1, [r0, #1]
   1b026:	1c82      	adds	r2, r0, #2
   1b028:	7800      	ldrb	r0, [r0, #0]
   1b02a:	f001 f9eb 	bl	1c404 <radio_filter_configure>
   1b02e:	e7ca      	b.n	1afc6 <prepare_cb+0x5e>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1b030:	2001      	movs	r0, #1
   1b032:	e7f5      	b.n	1b020 <prepare_cb+0xb8>
		LL_ASSERT(!ret);
   1b034:	4a16      	ldr	r2, [pc, #88]	; (1b090 <prepare_cb+0x128>)
   1b036:	4917      	ldr	r1, [pc, #92]	; (1b094 <prepare_cb+0x12c>)
   1b038:	4817      	ldr	r0, [pc, #92]	; (1b098 <prepare_cb+0x130>)
   1b03a:	f240 2321 	movw	r3, #545	; 0x221
   1b03e:	f006 f929 	bl	21294 <printk>
   1b042:	4040      	eors	r0, r0
   1b044:	f380 8811 	msr	BASEPRI, r0
   1b048:	f04f 0003 	mov.w	r0, #3
   1b04c:	df02      	svc	2
}
   1b04e:	2000      	movs	r0, #0
   1b050:	b003      	add	sp, #12
   1b052:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   1b054:	f7ff fce2 	bl	1aa1c <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1b058:	2800      	cmp	r0, #0
   1b05a:	db05      	blt.n	1b068 <prepare_cb+0x100>
		lll_done(NULL);
   1b05c:	2000      	movs	r0, #0
   1b05e:	f7ff fb4b 	bl	1a6f8 <lll_done>
}
   1b062:	2000      	movs	r0, #0
   1b064:	b003      	add	sp, #12
   1b066:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   1b068:	4a09      	ldr	r2, [pc, #36]	; (1b090 <prepare_cb+0x128>)
   1b06a:	490c      	ldr	r1, [pc, #48]	; (1b09c <prepare_cb+0x134>)
   1b06c:	480a      	ldr	r0, [pc, #40]	; (1b098 <prepare_cb+0x130>)
   1b06e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   1b072:	f006 f90f 	bl	21294 <printk>
   1b076:	4040      	eors	r0, r0
   1b078:	f380 8811 	msr	BASEPRI, r0
   1b07c:	f04f 0003 	mov.w	r0, #3
   1b080:	df02      	svc	2
   1b082:	e7eb      	b.n	1b05c <prepare_cb+0xf4>
   1b084:	8e89bed6 	.word	0x8e89bed6
   1b088:	00555555 	.word	0x00555555
   1b08c:	0001aa69 	.word	0x0001aa69
   1b090:	0002858c 	.word	0x0002858c
   1b094:	00027d50 	.word	0x00027d50
   1b098:	00027ab4 	.word	0x00027ab4
   1b09c:	00028550 	.word	0x00028550

0001b0a0 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   1b0a0:	68c3      	ldr	r3, [r0, #12]
{
   1b0a2:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   1b0a4:	681e      	ldr	r6, [r3, #0]
{
   1b0a6:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b0a8:	f7f6 fa02 	bl	114b0 <ticker_ticks_now_get>
   1b0ac:	4605      	mov	r5, r0
   1b0ae:	4630      	mov	r0, r6
   1b0b0:	f7ff fb7a 	bl	1a7a8 <lll_evt_offset_get>
	p->remainder = 0;
   1b0b4:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b0b6:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1b0b8:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1b0bc:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1b0be:	4620      	mov	r0, r4
}
   1b0c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1b0c4:	f7ff bf50 	b.w	1af68 <prepare_cb>

0001b0c8 <lll_adv_prepare>:
{
   1b0c8:	b510      	push	{r4, lr}
   1b0ca:	b082      	sub	sp, #8
   1b0cc:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1b0ce:	f7ff fc8d 	bl	1a9ec <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1b0d2:	2800      	cmp	r0, #0
   1b0d4:	db1a      	blt.n	1b10c <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1b0d6:	4a14      	ldr	r2, [pc, #80]	; (1b128 <lll_adv_prepare+0x60>)
   1b0d8:	4914      	ldr	r1, [pc, #80]	; (1b12c <lll_adv_prepare+0x64>)
   1b0da:	4815      	ldr	r0, [pc, #84]	; (1b130 <lll_adv_prepare+0x68>)
   1b0dc:	9400      	str	r4, [sp, #0]
   1b0de:	2300      	movs	r3, #0
   1b0e0:	f7ff fa7c 	bl	1a5dc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b0e4:	b108      	cbz	r0, 1b0ea <lll_adv_prepare+0x22>
   1b0e6:	3044      	adds	r0, #68	; 0x44
   1b0e8:	d101      	bne.n	1b0ee <lll_adv_prepare+0x26>
}
   1b0ea:	b002      	add	sp, #8
   1b0ec:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b0ee:	4a11      	ldr	r2, [pc, #68]	; (1b134 <lll_adv_prepare+0x6c>)
   1b0f0:	4911      	ldr	r1, [pc, #68]	; (1b138 <lll_adv_prepare+0x70>)
   1b0f2:	4812      	ldr	r0, [pc, #72]	; (1b13c <lll_adv_prepare+0x74>)
   1b0f4:	f240 133d 	movw	r3, #317	; 0x13d
   1b0f8:	f006 f8cc 	bl	21294 <printk>
   1b0fc:	4040      	eors	r0, r0
   1b0fe:	f380 8811 	msr	BASEPRI, r0
   1b102:	f04f 0003 	mov.w	r0, #3
   1b106:	df02      	svc	2
}
   1b108:	b002      	add	sp, #8
   1b10a:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1b10c:	4a09      	ldr	r2, [pc, #36]	; (1b134 <lll_adv_prepare+0x6c>)
   1b10e:	490c      	ldr	r1, [pc, #48]	; (1b140 <lll_adv_prepare+0x78>)
   1b110:	480a      	ldr	r0, [pc, #40]	; (1b13c <lll_adv_prepare+0x74>)
   1b112:	f44f 739d 	mov.w	r3, #314	; 0x13a
   1b116:	f006 f8bd 	bl	21294 <printk>
   1b11a:	4040      	eors	r0, r0
   1b11c:	f380 8811 	msr	BASEPRI, r0
   1b120:	f04f 0003 	mov.w	r0, #3
   1b124:	df02      	svc	2
   1b126:	e7d6      	b.n	1b0d6 <lll_adv_prepare+0xe>
   1b128:	0001af69 	.word	0x0001af69
   1b12c:	0001aba9 	.word	0x0001aba9
   1b130:	0001ab35 	.word	0x0001ab35
   1b134:	0002858c 	.word	0x0002858c
   1b138:	000285f0 	.word	0x000285f0
   1b13c:	00027ab4 	.word	0x00027ab4
   1b140:	00028550 	.word	0x00028550

0001b144 <lll_adv_scan_req_check>:
{
   1b144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   1b148:	f890 c00d 	ldrb.w	ip, [r0, #13]
{
   1b14c:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b150:	f01c 0f01 	tst.w	ip, #1
{
   1b154:	460f      	mov	r7, r1
   1b156:	4616      	mov	r6, r2
   1b158:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b15a:	d009      	beq.n	1b170 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & 0x01) != 0) &&
   1b15c:	f1b8 0f00 	cmp.w	r8, #0
   1b160:	d016      	beq.n	1b190 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1b162:	783b      	ldrb	r3, [r7, #0]
   1b164:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   1b168:	d019      	beq.n	1b19e <lll_adv_scan_req_check+0x5a>
{
   1b16a:	2000      	movs	r0, #0
}
   1b16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b170:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1b172:	f811 0b02 	ldrb.w	r0, [r1], #2
   1b176:	9a07      	ldr	r2, [sp, #28]
   1b178:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b17c:	f7fe ff9e 	bl	1a0bc <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1b180:	2800      	cmp	r0, #0
   1b182:	d1ee      	bne.n	1b162 <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & 0x01) != 0) &&
   1b184:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1b186:	07db      	lsls	r3, r3, #31
   1b188:	d5ef      	bpl.n	1b16a <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & 0x01) != 0) &&
   1b18a:	f1b8 0f00 	cmp.w	r8, #0
   1b18e:	d1e8      	bne.n	1b162 <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b190:	9b07      	ldr	r3, [sp, #28]
   1b192:	7818      	ldrb	r0, [r3, #0]
   1b194:	f7fe ff56 	bl	1a044 <ull_filter_lll_irk_whitelisted>
   1b198:	2800      	cmp	r0, #0
   1b19a:	d1e2      	bne.n	1b162 <lll_adv_scan_req_check+0x1e>
   1b19c:	e7e5      	b.n	1b16a <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1b19e:	2206      	movs	r2, #6
   1b1a0:	f107 0108 	add.w	r1, r7, #8
   1b1a4:	4628      	mov	r0, r5
   1b1a6:	f008 fcd7 	bl	23b58 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1b1aa:	fab0 f080 	clz	r0, r0
   1b1ae:	0940      	lsrs	r0, r0, #5
}
   1b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b1b4 <lll_adv_connect_ind_check>:
{
   1b1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b1b8:	461f      	mov	r7, r3
	if (tgt_addr) {
   1b1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   1b1bc:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1b1c0:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1b1c4:	4605      	mov	r5, r0
   1b1c6:	460c      	mov	r4, r1
   1b1c8:	4690      	mov	r8, r2
	if (tgt_addr) {
   1b1ca:	b9fb      	cbnz	r3, 1b20c <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1b1cc:	7b43      	ldrb	r3, [r0, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b1ce:	079a      	lsls	r2, r3, #30
   1b1d0:	d507      	bpl.n	1b1e2 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   1b1d2:	b1a6      	cbz	r6, 1b1fe <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1b1d4:	7823      	ldrb	r3, [r4, #0]
   1b1d6:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1b1da:	d03a      	beq.n	1b252 <lll_adv_connect_ind_check+0x9e>
   1b1dc:	2000      	movs	r0, #0
}
   1b1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1b1e2:	f811 0b02 	ldrb.w	r0, [r1], #2
   1b1e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b1e8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b1ec:	f7fe ff66 	bl	1a0bc <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1b1f0:	2800      	cmp	r0, #0
   1b1f2:	d1ef      	bne.n	1b1d4 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   1b1f4:	7b6b      	ldrb	r3, [r5, #13]
						rl_idx)) ||
   1b1f6:	079b      	lsls	r3, r3, #30
   1b1f8:	d5f0      	bpl.n	1b1dc <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   1b1fa:	2e00      	cmp	r6, #0
   1b1fc:	d1ea      	bne.n	1b1d4 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b1fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b200:	7818      	ldrb	r0, [r3, #0]
   1b202:	f7fe ff1f 	bl	1a044 <ull_filter_lll_irk_whitelisted>
   1b206:	2800      	cmp	r0, #0
   1b208:	d1e4      	bne.n	1b1d4 <lll_adv_connect_ind_check+0x20>
   1b20a:	e7e7      	b.n	1b1dc <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   1b20c:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1b20e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b210:	f81a 0b02 	ldrb.w	r0, [sl], #2
   1b214:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b218:	4651      	mov	r1, sl
   1b21a:	f7fe ff4f 	bl	1a0bc <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1b21e:	2800      	cmp	r0, #0
   1b220:	d0dc      	beq.n	1b1dc <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   1b222:	7823      	ldrb	r3, [r4, #0]
   1b224:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1b228:	d1d8      	bne.n	1b1dc <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1b22a:	4638      	mov	r0, r7
   1b22c:	2206      	movs	r2, #6
   1b22e:	f104 0108 	add.w	r1, r4, #8
   1b232:	f008 fc91 	bl	23b58 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1b236:	2800      	cmp	r0, #0
   1b238:	d1d0      	bne.n	1b1dc <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   1b23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b23c:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1b23e:	28ff      	cmp	r0, #255	; 0xff
   1b240:	d011      	beq.n	1b266 <lll_adv_connect_ind_check+0xb2>
   1b242:	7bab      	ldrb	r3, [r5, #14]
   1b244:	2bff      	cmp	r3, #255	; 0xff
   1b246:	d00e      	beq.n	1b266 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   1b248:	1ac0      	subs	r0, r0, r3
   1b24a:	fab0 f080 	clz	r0, r0
   1b24e:	0940      	lsrs	r0, r0, #5
   1b250:	e7c5      	b.n	1b1de <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1b252:	2206      	movs	r2, #6
   1b254:	f104 0108 	add.w	r1, r4, #8
   1b258:	4638      	mov	r0, r7
   1b25a:	f008 fc7d 	bl	23b58 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1b25e:	fab0 f080 	clz	r0, r0
   1b262:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b264:	e7bb      	b.n	1b1de <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   1b266:	7823      	ldrb	r3, [r4, #0]
   1b268:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1b26c:	454b      	cmp	r3, r9
   1b26e:	d1b5      	bne.n	1b1dc <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1b270:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b272:	2206      	movs	r2, #6
   1b274:	4651      	mov	r1, sl
   1b276:	f008 fc6f 	bl	23b58 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1b27a:	fab0 f080 	clz	r0, r0
   1b27e:	0940      	lsrs	r0, r0, #5
   1b280:	e7ad      	b.n	1b1de <lll_adv_connect_ind_check+0x2a>
   1b282:	bf00      	nop

0001b284 <isr_rx>:
{
   1b284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b288:	b089      	sub	sp, #36	; 0x24
   1b28a:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1b28c:	f000 ffc0 	bl	1c210 <radio_is_done>
	if (trx_done) {
   1b290:	b2c0      	uxtb	r0, r0
   1b292:	b950      	cbnz	r0, 1b2aa <isr_rx+0x26>
	lll_isr_status_reset();
   1b294:	f7ff fafa 	bl	1a88c <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1b298:	4879      	ldr	r0, [pc, #484]	; (1b480 <isr_rx+0x1fc>)
   1b29a:	4621      	mov	r1, r4
   1b29c:	f000 fe98 	bl	1bfd0 <radio_isr_set>
}
   1b2a0:	b009      	add	sp, #36	; 0x24
   1b2a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   1b2a6:	f000 bf89 	b.w	1c1bc <radio_disable>
		crc_ok = radio_crc_is_valid();
   1b2aa:	f000 ffd1 	bl	1c250 <radio_crc_is_valid>
   1b2ae:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   1b2b0:	f001 f8da 	bl	1c468 <radio_filter_has_match>
   1b2b4:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   1b2b6:	f001 f8e1 	bl	1c47c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1b2ba:	f001 fac5 	bl	1c848 <radio_ar_has_match>
   1b2be:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   1b2c0:	f001 faa6 	bl	1c810 <radio_ar_match_get>
	if (crc_ok) {
   1b2c4:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   1b2c6:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   1b2c8:	f001 f892 	bl	1c3f0 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1b2cc:	f7ff fade 	bl	1a88c <lll_isr_status_reset>
	if (crc_ok) {
   1b2d0:	2d00      	cmp	r5, #0
   1b2d2:	d0e1      	beq.n	1b298 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1b2d4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   1b2d8:	d175      	bne.n	1b3c6 <isr_rx+0x142>
   1b2da:	20ff      	movs	r0, #255	; 0xff
   1b2dc:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1b2e0:	f000 ffc4 	bl	1c26c <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1b2e4:	7c23      	ldrb	r3, [r4, #16]
   1b2e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1b2ea:	4680      	mov	r8, r0
   1b2ec:	6959      	ldr	r1, [r3, #20]
	addr = pdu_adv->adv_ind.addr;
   1b2ee:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   1b2f0:	b2ff      	uxtb	r7, r7
	tx_addr = pdu_adv->tx_addr;
   1b2f2:	f813 5b02 	ldrb.w	r5, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1b2f6:	f005 000f 	and.w	r0, r5, #15
   1b2fa:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1b2fc:	bf08      	it	eq
   1b2fe:	f101 0908 	addeq.w	r9, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1b302:	f898 1000 	ldrb.w	r1, [r8]
   1b306:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   1b30a:	bf18      	it	ne
   1b30c:	f04f 0900 	movne.w	r9, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1b310:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   1b312:	f3c5 1280 	ubfx	r2, r5, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1b316:	ea4f 15d5 	mov.w	r5, r5, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1b31a:	d05b      	beq.n	1b3d4 <isr_rx+0x150>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1b31c:	2905      	cmp	r1, #5
   1b31e:	d1bb      	bne.n	1b298 <isr_rx+0x14>
   1b320:	f898 1001 	ldrb.w	r1, [r8, #1]
   1b324:	2922      	cmp	r1, #34	; 0x22
   1b326:	d1b7      	bne.n	1b298 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1b328:	f10d 011f 	add.w	r1, sp, #31
   1b32c:	9103      	str	r1, [sp, #12]
   1b32e:	e9cd 9701 	strd	r9, r7, [sp, #4]
   1b332:	9500      	str	r5, [sp, #0]
   1b334:	4641      	mov	r1, r8
   1b336:	4620      	mov	r0, r4
   1b338:	f7ff ff3c 	bl	1b1b4 <lll_adv_connect_ind_check>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1b33c:	2800      	cmp	r0, #0
   1b33e:	d0ab      	beq.n	1b298 <isr_rx+0x14>
					     devmatch_ok, &rl_idx) &&
   1b340:	68a3      	ldr	r3, [r4, #8]
   1b342:	2b00      	cmp	r3, #0
   1b344:	d0a8      	beq.n	1b298 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   1b346:	2004      	movs	r0, #4
   1b348:	f7f8 fd24 	bl	13d94 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1b34c:	2800      	cmp	r0, #0
   1b34e:	d0a3      	beq.n	1b298 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   1b350:	484c      	ldr	r0, [pc, #304]	; (1b484 <isr_rx+0x200>)
   1b352:	4621      	mov	r1, r4
   1b354:	f000 fe3c 	bl	1bfd0 <radio_isr_set>
		radio_disable();
   1b358:	f000 ff30 	bl	1c1bc <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1b35c:	f000 ff4e 	bl	1c1fc <radio_is_ready>
   1b360:	2800      	cmp	r0, #0
   1b362:	d160      	bne.n	1b426 <isr_rx+0x1a2>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   1b364:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   1b366:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   1b36a:	07db      	lsls	r3, r3, #31
   1b36c:	7122      	strb	r2, [r4, #4]
   1b36e:	d44c      	bmi.n	1b40a <isr_rx+0x186>
		rx = ull_pdu_rx_alloc();
   1b370:	f7f8 fd2e 	bl	13dd0 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1b374:	2313      	movs	r3, #19
		rx = ull_pdu_rx_alloc();
   1b376:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1b378:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   1b37a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b37e:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1b380:	4641      	mov	r1, r8
   1b382:	2224      	movs	r2, #36	; 0x24
   1b384:	301c      	adds	r0, #28
   1b386:	f008 fbf8 	bl	23b7a <memcpy>
		ftr->param = lll;
   1b38a:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1b38c:	f001 f91a 	bl	1c5c4 <radio_tmr_start_get>
   1b390:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1b392:	f001 f96b 	bl	1c66c <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1b396:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1b398:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1b39a:	4608      	mov	r0, r1
   1b39c:	f000 fefe 	bl	1c19c <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1b3a0:	1a24      	subs	r4, r4, r0
   1b3a2:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1b3a4:	b1a6      	cbz	r6, 1b3d0 <isr_rx+0x14c>
   1b3a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1b3aa:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1b3ac:	f7f8 fd10 	bl	13dd0 <ull_pdu_rx_alloc>
   1b3b0:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   1b3b2:	4629      	mov	r1, r5
   1b3b4:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   1b3b6:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   1b3b8:	f7f8 fd20 	bl	13dfc <ull_rx_put>
		ull_rx_sched();
   1b3bc:	f7f8 fd2e 	bl	13e1c <ull_rx_sched>
}
   1b3c0:	b009      	add	sp, #36	; 0x24
   1b3c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1b3c6:	fa5f f088 	uxtb.w	r0, r8
   1b3ca:	f7fe fde9 	bl	19fa0 <ull_filter_lll_rl_irk_idx>
   1b3ce:	e785      	b.n	1b2dc <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1b3d0:	23ff      	movs	r3, #255	; 0xff
   1b3d2:	e7ea      	b.n	1b3aa <isr_rx+0x126>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1b3d4:	f898 1001 	ldrb.w	r1, [r8, #1]
   1b3d8:	290c      	cmp	r1, #12
   1b3da:	f47f af5d 	bne.w	1b298 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1b3de:	f1b9 0f00 	cmp.w	r9, #0
   1b3e2:	f47f af59 	bne.w	1b298 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1b3e6:	f10d 011f 	add.w	r1, sp, #31
   1b3ea:	9101      	str	r1, [sp, #4]
   1b3ec:	9700      	str	r7, [sp, #0]
   1b3ee:	4641      	mov	r1, r8
   1b3f0:	4620      	mov	r0, r4
   1b3f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1b3f6:	f7ff fea5 	bl	1b144 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1b3fa:	bb10      	cbnz	r0, 1b442 <isr_rx+0x1be>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1b3fc:	f898 1000 	ldrb.w	r1, [r8]
   1b400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1b404:	f001 010f 	and.w	r1, r1, #15
   1b408:	e788      	b.n	1b31c <isr_rx+0x98>
		LL_ASSERT(!ret);
   1b40a:	4a1f      	ldr	r2, [pc, #124]	; (1b488 <isr_rx+0x204>)
   1b40c:	491f      	ldr	r1, [pc, #124]	; (1b48c <isr_rx+0x208>)
   1b40e:	4820      	ldr	r0, [pc, #128]	; (1b490 <isr_rx+0x20c>)
   1b410:	f240 4329 	movw	r3, #1065	; 0x429
   1b414:	f005 ff3e 	bl	21294 <printk>
   1b418:	4040      	eors	r0, r0
   1b41a:	f380 8811 	msr	BASEPRI, r0
   1b41e:	f04f 0003 	mov.w	r0, #3
   1b422:	df02      	svc	2
   1b424:	e7a4      	b.n	1b370 <isr_rx+0xec>
		LL_ASSERT(!radio_is_ready());
   1b426:	4a18      	ldr	r2, [pc, #96]	; (1b488 <isr_rx+0x204>)
   1b428:	491a      	ldr	r1, [pc, #104]	; (1b494 <isr_rx+0x210>)
   1b42a:	4819      	ldr	r0, [pc, #100]	; (1b490 <isr_rx+0x20c>)
   1b42c:	f240 431b 	movw	r3, #1051	; 0x41b
   1b430:	f005 ff30 	bl	21294 <printk>
   1b434:	4040      	eors	r0, r0
   1b436:	f380 8811 	msr	BASEPRI, r0
   1b43a:	f04f 0003 	mov.w	r0, #3
   1b43e:	df02      	svc	2
   1b440:	e790      	b.n	1b364 <isr_rx+0xe0>
		radio_isr_set(isr_done, lll);
   1b442:	4621      	mov	r1, r4
   1b444:	480e      	ldr	r0, [pc, #56]	; (1b480 <isr_rx+0x1fc>)
   1b446:	f000 fdc3 	bl	1bfd0 <radio_isr_set>
		radio_switch_complete_and_disable();
   1b44a:	f000 ffbb 	bl	1c3c4 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1b44e:	7f23      	ldrb	r3, [r4, #28]
   1b450:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1b454:	6a20      	ldr	r0, [r4, #32]
   1b456:	f000 fe9b 	bl	1c190 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1b45a:	f000 fecf 	bl	1c1fc <radio_is_ready>
   1b45e:	2800      	cmp	r0, #0
   1b460:	d0ae      	beq.n	1b3c0 <isr_rx+0x13c>
   1b462:	4a09      	ldr	r2, [pc, #36]	; (1b488 <isr_rx+0x204>)
   1b464:	490b      	ldr	r1, [pc, #44]	; (1b494 <isr_rx+0x210>)
   1b466:	480a      	ldr	r0, [pc, #40]	; (1b490 <isr_rx+0x20c>)
   1b468:	f240 33dd 	movw	r3, #989	; 0x3dd
   1b46c:	f005 ff12 	bl	21294 <printk>
   1b470:	4040      	eors	r0, r0
   1b472:	f380 8811 	msr	BASEPRI, r0
   1b476:	f04f 0003 	mov.w	r0, #3
   1b47a:	df02      	svc	2
		if (!err) {
   1b47c:	e7a0      	b.n	1b3c0 <isr_rx+0x13c>
   1b47e:	bf00      	nop
   1b480:	0001af25 	.word	0x0001af25
   1b484:	0001aa69 	.word	0x0001aa69
   1b488:	0002858c 	.word	0x0002858c
   1b48c:	00027d50 	.word	0x00027d50
   1b490:	00027ab4 	.word	0x00027ab4
   1b494:	000285d8 	.word	0x000285d8

0001b498 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b49a:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1b49c:	f7ff f9f6 	bl	1a88c <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1b4a0:	f7f8 fd28 	bl	13ef4 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1b4a4:	4604      	mov	r4, r0
   1b4a6:	2800      	cmp	r0, #0
   1b4a8:	d033      	beq.n	1b512 <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1b4aa:	4b21      	ldr	r3, [pc, #132]	; (1b530 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   1b4ac:	4921      	ldr	r1, [pc, #132]	; (1b534 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1b4ae:	4a22      	ldr	r2, [pc, #136]	; (1b538 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   1b4b0:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1b4b2:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   1b4b4:	7812      	ldrb	r2, [r2, #0]
	e->crc_valid = crc_valid;
   1b4b6:	71a1      	strb	r1, [r4, #6]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1b4b8:	2001      	movs	r0, #1
   1b4ba:	7020      	strb	r0, [r4, #0]
	e->trx_cnt = trx_cnt;
   1b4bc:	80a3      	strh	r3, [r4, #4]
	e->mic_state = mic_state;
   1b4be:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1b4c0:	b11b      	cbz	r3, 1b4ca <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   1b4c2:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1b4c6:	2b00      	cmp	r3, #0
   1b4c8:	db04      	blt.n	1b4d4 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1b4ca:	4628      	mov	r0, r5
}
   1b4cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1b4d0:	f7ff b9ea 	b.w	1a8a8 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1b4d4:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   1b4d8:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1b4dc:	2b02      	cmp	r3, #2
   1b4de:	d016      	beq.n	1b50e <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1b4e0:	2b04      	cmp	r3, #4
   1b4e2:	bf14      	ite	ne
   1b4e4:	2728      	movne	r7, #40	; 0x28
   1b4e6:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1b4ea:	f001 f8ab 	bl	1c644 <radio_tmr_aa_restore>
   1b4ee:	4606      	mov	r6, r0
   1b4f0:	f001 f8ae 	bl	1c650 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1b4f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1b4f6:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1b4f8:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   1b4fa:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   1b4fe:	2300      	movs	r3, #0
   1b500:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1b502:	63eb      	str	r3, [r5, #60]	; 0x3c
	lll_isr_cleanup(param);
   1b504:	4628      	mov	r0, r5
}
   1b506:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1b50a:	f7ff b9cd 	b.w	1a8a8 <lll_isr_cleanup>
	switch (phy) {
   1b50e:	2718      	movs	r7, #24
   1b510:	e7eb      	b.n	1b4ea <isr_done+0x52>
	LL_ASSERT(e);
   1b512:	4a0a      	ldr	r2, [pc, #40]	; (1b53c <isr_done+0xa4>)
   1b514:	490a      	ldr	r1, [pc, #40]	; (1b540 <isr_done+0xa8>)
   1b516:	480b      	ldr	r0, [pc, #44]	; (1b544 <isr_done+0xac>)
   1b518:	f240 236e 	movw	r3, #622	; 0x26e
   1b51c:	f005 feba 	bl	21294 <printk>
   1b520:	4040      	eors	r0, r0
   1b522:	f380 8811 	msr	BASEPRI, r0
   1b526:	f04f 0003 	mov.w	r0, #3
   1b52a:	df02      	svc	2
   1b52c:	e7bd      	b.n	1b4aa <isr_done+0x12>
   1b52e:	bf00      	nop
   1b530:	2000ed1e 	.word	0x2000ed1e
   1b534:	2000f2ba 	.word	0x2000f2ba
   1b538:	2000f2bb 	.word	0x2000f2bb
   1b53c:	00028614 	.word	0x00028614
   1b540:	00027edc 	.word	0x00027edc
   1b544:	00027ab4 	.word	0x00027ab4

0001b548 <lll_conn_init>:
{
   1b548:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1b54a:	f000 fe8b 	bl	1c264 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b54e:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1b550:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b552:	2101      	movs	r1, #1
   1b554:	f361 0201 	bfi	r2, r1, #0, #2
}
   1b558:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b55a:	701a      	strb	r2, [r3, #0]
}
   1b55c:	bd08      	pop	{r3, pc}
   1b55e:	bf00      	nop

0001b560 <lll_conn_reset>:
}
   1b560:	2000      	movs	r0, #0
   1b562:	4770      	bx	lr

0001b564 <lll_conn_flush>:
}
   1b564:	4770      	bx	lr
   1b566:	bf00      	nop

0001b568 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1b568:	4805      	ldr	r0, [pc, #20]	; (1b580 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1b56a:	4906      	ldr	r1, [pc, #24]	; (1b584 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1b56c:	4a06      	ldr	r2, [pc, #24]	; (1b588 <lll_conn_prepare_reset+0x20>)
{
   1b56e:	b410      	push	{r4}
	trx_cnt = 0U;
   1b570:	2300      	movs	r3, #0
   1b572:	4c06      	ldr	r4, [pc, #24]	; (1b58c <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1b574:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1b576:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1b578:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1b57a:	8023      	strh	r3, [r4, #0]
}
   1b57c:	bc10      	pop	{r4}
   1b57e:	4770      	bx	lr
   1b580:	2000f2ba 	.word	0x2000f2ba
   1b584:	2000f2b9 	.word	0x2000f2b9
   1b588:	2000f2bb 	.word	0x2000f2bb
   1b58c:	2000ed1e 	.word	0x2000ed1e

0001b590 <lll_conn_abort_cb>:
{
   1b590:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1b592:	b1d0      	cbz	r0, 1b5ca <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   1b594:	460c      	mov	r4, r1
   1b596:	f7ff fa41 	bl	1aa1c <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b59a:	2800      	cmp	r0, #0
   1b59c:	db04      	blt.n	1b5a8 <lll_conn_abort_cb+0x18>
	lll_done(param);
   1b59e:	4620      	mov	r0, r4
}
   1b5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b5a4:	f7ff b8a8 	b.w	1a6f8 <lll_done>
	LL_ASSERT(err >= 0);
   1b5a8:	4a0b      	ldr	r2, [pc, #44]	; (1b5d8 <lll_conn_abort_cb+0x48>)
   1b5aa:	490c      	ldr	r1, [pc, #48]	; (1b5dc <lll_conn_abort_cb+0x4c>)
   1b5ac:	480c      	ldr	r0, [pc, #48]	; (1b5e0 <lll_conn_abort_cb+0x50>)
   1b5ae:	239c      	movs	r3, #156	; 0x9c
   1b5b0:	f005 fe70 	bl	21294 <printk>
   1b5b4:	4040      	eors	r0, r0
   1b5b6:	f380 8811 	msr	BASEPRI, r0
   1b5ba:	f04f 0003 	mov.w	r0, #3
   1b5be:	df02      	svc	2
	lll_done(param);
   1b5c0:	4620      	mov	r0, r4
}
   1b5c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b5c6:	f7ff b897 	b.w	1a6f8 <lll_done>
		radio_isr_set(isr_done, param);
   1b5ca:	4806      	ldr	r0, [pc, #24]	; (1b5e4 <lll_conn_abort_cb+0x54>)
   1b5cc:	f000 fd00 	bl	1bfd0 <radio_isr_set>
}
   1b5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1b5d4:	f000 bdf2 	b.w	1c1bc <radio_disable>
   1b5d8:	00028614 	.word	0x00028614
   1b5dc:	00028550 	.word	0x00028550
   1b5e0:	00027ab4 	.word	0x00027ab4
   1b5e4:	0001b499 	.word	0x0001b499

0001b5e8 <lll_conn_rx_pkt_set>:
{
   1b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b5ea:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b5ec:	2001      	movs	r0, #1
   1b5ee:	f7f8 fbd1 	bl	13d94 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b5f2:	4606      	mov	r6, r0
   1b5f4:	b368      	cbz	r0, 1b652 <lll_conn_rx_pkt_set+0x6a>
	phy = lll->phy_rx;
   1b5f6:	f895 4049 	ldrb.w	r4, [r5, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   1b5fa:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	phy = lll->phy_rx;
   1b5fe:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   1b602:	2100      	movs	r1, #0
   1b604:	4620      	mov	r0, r4
   1b606:	f000 fd49 	bl	1c09c <radio_phy_set>
	} else if (lll->enc_rx) {
   1b60a:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1b60e:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1b610:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   1b614:	d511      	bpl.n	1b63a <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1b616:	1d39      	adds	r1, r7, #4
   1b618:	f042 0201 	orr.w	r2, r2, #1
   1b61c:	b2c9      	uxtb	r1, r1
   1b61e:	2008      	movs	r0, #8
   1b620:	f000 fd82 	bl	1c128 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1b624:	f106 021c 	add.w	r2, r6, #28
   1b628:	4621      	mov	r1, r4
   1b62a:	f105 0063 	add.w	r0, r5, #99	; 0x63
   1b62e:	f001 f829 	bl	1c684 <radio_ccm_rx_pkt_set>
}
   1b632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1b636:	f000 bda5 	b.w	1c184 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1b63a:	2008      	movs	r0, #8
   1b63c:	b2f9      	uxtb	r1, r7
   1b63e:	f042 0201 	orr.w	r2, r2, #1
   1b642:	f000 fd71 	bl	1c128 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1b646:	f106 001c 	add.w	r0, r6, #28
}
   1b64a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1b64e:	f000 bd99 	b.w	1c184 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1b652:	4a07      	ldr	r2, [pc, #28]	; (1b670 <lll_conn_rx_pkt_set+0x88>)
   1b654:	4907      	ldr	r1, [pc, #28]	; (1b674 <lll_conn_rx_pkt_set+0x8c>)
   1b656:	4808      	ldr	r0, [pc, #32]	; (1b678 <lll_conn_rx_pkt_set+0x90>)
   1b658:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   1b65c:	f005 fe1a 	bl	21294 <printk>
   1b660:	4040      	eors	r0, r0
   1b662:	f380 8811 	msr	BASEPRI, r0
   1b666:	f04f 0003 	mov.w	r0, #3
   1b66a:	df02      	svc	2
   1b66c:	e7c3      	b.n	1b5f6 <lll_conn_rx_pkt_set+0xe>
   1b66e:	bf00      	nop
   1b670:	00028614 	.word	0x00028614
   1b674:	00028660 	.word	0x00028660
   1b678:	00027ab4 	.word	0x00027ab4

0001b67c <lll_conn_isr_tx>:
{
   1b67c:	b538      	push	{r3, r4, r5, lr}
   1b67e:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1b680:	f7ff f8f2 	bl	1a868 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b684:	2096      	movs	r0, #150	; 0x96
   1b686:	f000 ff0f 	bl	1c4a8 <radio_tmr_tifs_set>
				     lll->phy_flags);
   1b68a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1b68e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1b692:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1b696:	f000 0007 	and.w	r0, r0, #7
   1b69a:	f002 0207 	and.w	r2, r2, #7
   1b69e:	2100      	movs	r1, #0
   1b6a0:	f000 fe30 	bl	1c304 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1b6a4:	4620      	mov	r0, r4
   1b6a6:	f7ff ff9f 	bl	1b5e8 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1b6aa:	f000 fda7 	bl	1c1fc <radio_is_ready>
   1b6ae:	bb58      	cbnz	r0, 1b708 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1b6b0:	f000 ffe2 	bl	1c678 <radio_tmr_tifs_base_get>
   1b6b4:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1b6b6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1b6ba:	2101      	movs	r1, #1
   1b6bc:	f000 0007 	and.w	r0, r0, #7
   1b6c0:	f000 fd70 	bl	1c1a4 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1b6c4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1b6c8:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1b6cc:	4405      	add	r5, r0
   1b6ce:	2b02      	cmp	r3, #2
   1b6d0:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1b6d4:	d016      	beq.n	1b704 <lll_conn_isr_tx+0x88>
		return 376;
   1b6d6:	2b04      	cmp	r3, #4
   1b6d8:	bf14      	ite	ne
   1b6da:	2328      	movne	r3, #40	; 0x28
   1b6dc:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1b6e0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1b6e4:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1b6e8:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1b6ec:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1b6ee:	f000 fd55 	bl	1c19c <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1b6f2:	1a28      	subs	r0, r5, r0
   1b6f4:	f000 ff78 	bl	1c5e8 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1b6f8:	4621      	mov	r1, r4
   1b6fa:	480a      	ldr	r0, [pc, #40]	; (1b724 <lll_conn_isr_tx+0xa8>)
}
   1b6fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1b700:	f000 bc66 	b.w	1bfd0 <radio_isr_set>
	switch (phy) {
   1b704:	2318      	movs	r3, #24
   1b706:	e7eb      	b.n	1b6e0 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1b708:	4a07      	ldr	r2, [pc, #28]	; (1b728 <lll_conn_isr_tx+0xac>)
   1b70a:	4908      	ldr	r1, [pc, #32]	; (1b72c <lll_conn_isr_tx+0xb0>)
   1b70c:	4808      	ldr	r0, [pc, #32]	; (1b730 <lll_conn_isr_tx+0xb4>)
   1b70e:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
   1b712:	f005 fdbf 	bl	21294 <printk>
   1b716:	4040      	eors	r0, r0
   1b718:	f380 8811 	msr	BASEPRI, r0
   1b71c:	f04f 0003 	mov.w	r0, #3
   1b720:	df02      	svc	2
   1b722:	e7c5      	b.n	1b6b0 <lll_conn_isr_tx+0x34>
   1b724:	0001b875 	.word	0x0001b875
   1b728:	00028614 	.word	0x00028614
   1b72c:	000285d8 	.word	0x000285d8
   1b730:	00027ab4 	.word	0x00027ab4

0001b734 <lll_conn_tx_pkt_set>:
{
   1b734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b736:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   1b738:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   1b73c:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   1b740:	f001 0507 	and.w	r5, r1, #7
{
   1b744:	4604      	mov	r4, r0
	radio_phy_set(phy, flags);
   1b746:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1b74a:	4628      	mov	r0, r5
   1b74c:	f000 fca6 	bl	1c09c <radio_phy_set>
	} else if (lll->enc_tx) {
   1b750:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b754:	06db      	lsls	r3, r3, #27
				    (phy << 1) | 0x01);
   1b756:	ea4f 0245 	mov.w	r2, r5, lsl #1
	} else if (lll->enc_tx) {
   1b75a:	d50f      	bpl.n	1b77c <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1b75c:	1d39      	adds	r1, r7, #4
   1b75e:	f042 0201 	orr.w	r2, r2, #1
   1b762:	b2c9      	uxtb	r1, r1
   1b764:	2008      	movs	r0, #8
   1b766:	f000 fcdf 	bl	1c128 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1b76a:	4631      	mov	r1, r6
   1b76c:	f104 0084 	add.w	r0, r4, #132	; 0x84
   1b770:	f000 ffc6 	bl	1c700 <radio_ccm_tx_pkt_set>
}
   1b774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1b778:	f000 bd0a 	b.w	1c190 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1b77c:	b2f9      	uxtb	r1, r7
   1b77e:	2008      	movs	r0, #8
   1b780:	f042 0201 	orr.w	r2, r2, #1
   1b784:	f000 fcd0 	bl	1c128 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1b788:	4630      	mov	r0, r6
}
   1b78a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1b78e:	f000 bcff 	b.w	1c190 <radio_pkt_tx_set>
   1b792:	bf00      	nop

0001b794 <lll_conn_pdu_tx_prep>:
{
   1b794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b798:	4604      	mov	r4, r0
   1b79a:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b79c:	aa01      	add	r2, sp, #4
   1b79e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   1b7a0:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b7a2:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1b7a4:	f7f4 fbde 	bl	ff64 <memq_peek>
	if (lll->empty || !link) {
   1b7a8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b7ac:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1b7ae:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1b7b0:	d432      	bmi.n	1b818 <lll_conn_pdu_tx_prep+0x84>
   1b7b2:	2800      	cmp	r0, #0
   1b7b4:	d04e      	beq.n	1b854 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1b7b6:	9b01      	ldr	r3, [sp, #4]
   1b7b8:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
   1b7bc:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1b7c0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1b7c4:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1b7c8:	b913      	cbnz	r3, 1b7d0 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1b7ca:	786b      	ldrb	r3, [r5, #1]
   1b7cc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   1b7d0:	b137      	cbz	r7, 1b7e0 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1b7d2:	f818 2007 	ldrb.w	r2, [r8, r7]
   1b7d6:	2101      	movs	r1, #1
   1b7d8:	f361 0201 	bfi	r2, r1, #0, #2
   1b7dc:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1b7e0:	1bdb      	subs	r3, r3, r7
   1b7e2:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1b7e4:	4620      	mov	r0, r4
   1b7e6:	f7fd fac1 	bl	18d6c <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1b7ea:	786b      	ldrb	r3, [r5, #1]
   1b7ec:	4283      	cmp	r3, r0
   1b7ee:	d924      	bls.n	1b83a <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1b7f0:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1b7f2:	f818 3007 	ldrb.w	r3, [r8, r7]
   1b7f6:	f043 0310 	orr.w	r3, r3, #16
   1b7fa:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1b7fe:	f818 3007 	ldrb.w	r3, [r8, r7]
   1b802:	f36f 1347 	bfc	r3, #5, #3
   1b806:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1b80a:	2300      	movs	r3, #0
   1b80c:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   1b80e:	f8c9 5000 	str.w	r5, [r9]
}
   1b812:	b003      	add	sp, #12
   1b814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1b818:	f043 0304 	orr.w	r3, r3, #4
   1b81c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1b820:	f000 fd20 	bl	1c264 <radio_pkt_empty_get>
   1b824:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1b826:	b1e6      	cbz	r6, 1b862 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1b828:	7803      	ldrb	r3, [r0, #0]
   1b82a:	f043 0310 	orr.w	r3, r3, #16
   1b82e:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1b830:	f8c9 5000 	str.w	r5, [r9]
}
   1b834:	b003      	add	sp, #12
   1b836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1b83a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1b83c:	6832      	ldr	r2, [r6, #0]
   1b83e:	429a      	cmp	r2, r3
			p->md = 1U;
   1b840:	f818 3007 	ldrb.w	r3, [r8, r7]
   1b844:	bf14      	ite	ne
   1b846:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1b84a:	f36f 1304 	bfceq	r3, #4, #1
   1b84e:	f808 3007 	strb.w	r3, [r8, r7]
   1b852:	e7d4      	b.n	1b7fe <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1b854:	f043 0304 	orr.w	r3, r3, #4
   1b858:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1b85c:	f000 fd02 	bl	1c264 <radio_pkt_empty_get>
   1b860:	4605      	mov	r5, r0
			p->md = 0U;
   1b862:	782b      	ldrb	r3, [r5, #0]
   1b864:	f36f 1304 	bfc	r3, #4, #1
   1b868:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1b86a:	f8c9 5000 	str.w	r5, [r9]
}
   1b86e:	b003      	add	sp, #12
   1b870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001b874 <lll_conn_isr_rx>:
{
   1b874:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b876:	b083      	sub	sp, #12
   1b878:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1b87a:	f000 fcc9 	bl	1c210 <radio_is_done>
	if (trx_done) {
   1b87e:	b2c0      	uxtb	r0, r0
   1b880:	b950      	cbnz	r0, 1b898 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   1b882:	f7fe fff9 	bl	1a878 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1b886:	48b1      	ldr	r0, [pc, #708]	; (1bb4c <lll_conn_isr_rx+0x2d8>)
   1b888:	4621      	mov	r1, r4
   1b88a:	f000 fba1 	bl	1bfd0 <radio_isr_set>
}
   1b88e:	b003      	add	sp, #12
   1b890:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   1b894:	f000 bc92 	b.w	1c1bc <radio_disable>
		crc_ok = radio_crc_is_valid();
   1b898:	f000 fcda 	bl	1c250 <radio_crc_is_valid>
   1b89c:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1b89e:	f000 fda7 	bl	1c3f0 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1b8a2:	f7fe ffe9 	bl	1a878 <lll_isr_rx_status_reset>
	trx_cnt++;
   1b8a6:	4aaa      	ldr	r2, [pc, #680]	; (1bb50 <lll_conn_isr_rx+0x2dc>)
   1b8a8:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b8aa:	2001      	movs	r0, #1
	trx_cnt++;
   1b8ac:	4403      	add	r3, r0
   1b8ae:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1b8b0:	f7f8 fa70 	bl	13d94 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1b8b4:	4606      	mov	r6, r0
   1b8b6:	2800      	cmp	r0, #0
   1b8b8:	f000 80bd 	beq.w	1ba36 <lll_conn_isr_rx+0x1c2>
	if (crc_ok) {
   1b8bc:	2d00      	cmp	r5, #0
   1b8be:	d155      	bne.n	1b96c <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   1b8c0:	4ba4      	ldr	r3, [pc, #656]	; (1bb54 <lll_conn_isr_rx+0x2e0>)
   1b8c2:	781f      	ldrb	r7, [r3, #0]
   1b8c4:	2f00      	cmp	r7, #0
   1b8c6:	f040 80a5 	bne.w	1ba14 <lll_conn_isr_rx+0x1a0>
		crc_expire--;
   1b8ca:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b8cc:	a901      	add	r1, sp, #4
   1b8ce:	4620      	mov	r0, r4
		crc_expire--;
   1b8d0:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1b8d2:	f7ff ff5f 	bl	1b794 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1b8d6:	2096      	movs	r0, #150	; 0x96
   1b8d8:	f000 fde6 	bl	1c4a8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1b8dc:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1b8e0:	f000 0007 	and.w	r0, r0, #7
   1b8e4:	f000 fcc6 	bl	1c274 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1b8e8:	489b      	ldr	r0, [pc, #620]	; (1bb58 <lll_conn_isr_rx+0x2e4>)
   1b8ea:	4621      	mov	r1, r4
   1b8ec:	f000 fb70 	bl	1bfd0 <radio_isr_set>
		radio_tmr_end_capture();
   1b8f0:	f000 feb4 	bl	1c65c <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1b8f4:	9901      	ldr	r1, [sp, #4]
   1b8f6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	pdu_data_tx->nesn = lll->nesn;
   1b8fa:	780b      	ldrb	r3, [r1, #0]
   1b8fc:	f023 000c 	bic.w	r0, r3, #12
   1b900:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1b904:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1b906:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1b90a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1b90e:	4303      	orrs	r3, r0
   1b910:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1b912:	4620      	mov	r0, r4
   1b914:	f7ff ff0e 	bl	1b734 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1b918:	f000 fc70 	bl	1c1fc <radio_is_ready>
   1b91c:	2800      	cmp	r0, #0
   1b91e:	f040 80b9 	bne.w	1ba94 <lll_conn_isr_rx+0x220>
	if (!radio_tmr_aa_restore()) {
   1b922:	f000 fe8f 	bl	1c644 <radio_tmr_aa_restore>
   1b926:	b170      	cbz	r0, 1b946 <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   1b928:	b19d      	cbz	r5, 1b952 <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   1b92a:	8a20      	ldrh	r0, [r4, #16]
   1b92c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b930:	4298      	cmp	r0, r3
   1b932:	f000 80bd 	beq.w	1bab0 <lll_conn_isr_rx+0x23c>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1b936:	4629      	mov	r1, r5
   1b938:	f7fd f8ea 	bl	18b10 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1b93c:	b95f      	cbnz	r7, 1b956 <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   1b93e:	f7f8 fa6d 	bl	13e1c <ull_rx_sched>
}
   1b942:	b003      	add	sp, #12
   1b944:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1b946:	f000 fe71 	bl	1c62c <radio_tmr_aa_get>
   1b94a:	f000 fe75 	bl	1c638 <radio_tmr_aa_save>
	if (tx_release) {
   1b94e:	2d00      	cmp	r5, #0
   1b950:	d1eb      	bne.n	1b92a <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   1b952:	2f00      	cmp	r7, #0
   1b954:	d0f5      	beq.n	1b942 <lll_conn_isr_rx+0xce>
		ull_pdu_rx_alloc();
   1b956:	f7f8 fa3b 	bl	13dd0 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1b95a:	2303      	movs	r3, #3
   1b95c:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1b95e:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1b960:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1b962:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1b964:	4631      	mov	r1, r6
   1b966:	f7f8 fa49 	bl	13dfc <ull_rx_put>
	if (is_ull_rx) {
   1b96a:	e7e8      	b.n	1b93e <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   1b96c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b970:	7f32      	ldrb	r2, [r6, #28]
   1b972:	f003 0101 	and.w	r1, r3, #1
   1b976:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1b97a:	4288      	cmp	r0, r1
   1b97c:	d06b      	beq.n	1ba56 <lll_conn_isr_rx+0x1e2>
		if (lll->role) {
   1b97e:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
		lll->sn++;
   1b982:	f081 0101 	eor.w	r1, r1, #1
   1b986:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1b98a:	2a00      	cmp	r2, #0
		lll->sn++;
   1b98c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   1b990:	da05      	bge.n	1b99e <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   1b992:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1b996:	f043 0301 	orr.w	r3, r3, #1
   1b99a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   1b99e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b9a2:	075a      	lsls	r2, r3, #29
   1b9a4:	f100 8093 	bmi.w	1bace <lll_conn_isr_rx+0x25a>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1b9a8:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   1b9ac:	aa01      	add	r2, sp, #4
   1b9ae:	f7f4 fad9 	bl	ff64 <memq_peek>
		if (link) {
   1b9b2:	4605      	mov	r5, r0
   1b9b4:	2800      	cmp	r0, #0
   1b9b6:	f000 8097 	beq.w	1bae8 <lll_conn_isr_rx+0x274>
					       lll->packet_tx_head_offset);
   1b9ba:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   1b9be:	9b01      	ldr	r3, [sp, #4]
   1b9c0:	4413      	add	r3, r2
   1b9c2:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1b9c4:	b171      	cbz	r1, 1b9e4 <lll_conn_isr_rx+0x170>
				if (lll->enc_tx) {
   1b9c6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1b9ca:	06df      	lsls	r7, r3, #27
   1b9cc:	d50a      	bpl.n	1b9e4 <lll_conn_isr_rx+0x170>
					lll->ccm_tx.counter++;
   1b9ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1b9d2:	3301      	adds	r3, #1
   1b9d4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   1b9d8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1b9dc:	f143 0300 	adc.w	r3, r3, #0
   1b9e0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if (offset < lll->packet_tx_head_len) {
   1b9e4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1b9e8:	440a      	add	r2, r1
   1b9ea:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1b9ec:	429a      	cmp	r2, r3
   1b9ee:	d379      	bcc.n	1bae4 <lll_conn_isr_rx+0x270>
			} else if (offset == lll->packet_tx_head_len) {
   1b9f0:	d17a      	bne.n	1bae8 <lll_conn_isr_rx+0x274>
				lll->packet_tx_head_len = 0;
   1b9f2:	2200      	movs	r2, #0
   1b9f4:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   1b9f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1b9fa:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1b9fe:	f7f4 fab9 	bl	ff74 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1ba02:	9b01      	ldr	r3, [sp, #4]
   1ba04:	681a      	ldr	r2, [r3, #0]
   1ba06:	602a      	str	r2, [r5, #0]
				tx->next = link;
   1ba08:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   1ba0a:	9d01      	ldr	r5, [sp, #4]
   1ba0c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1ba10:	7f32      	ldrb	r2, [r6, #28]
   1ba12:	e021      	b.n	1ba58 <lll_conn_isr_rx+0x1e4>
		crc_expire--;
   1ba14:	3f01      	subs	r7, #1
   1ba16:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1ba18:	a901      	add	r1, sp, #4
   1ba1a:	4620      	mov	r0, r4
		crc_expire--;
   1ba1c:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1ba1e:	f7ff feb9 	bl	1b794 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1ba22:	2f00      	cmp	r7, #0
   1ba24:	f040 80dd 	bne.w	1bbe2 <lll_conn_isr_rx+0x36e>
		radio_isr_set(isr_done, param);
   1ba28:	4848      	ldr	r0, [pc, #288]	; (1bb4c <lll_conn_isr_rx+0x2d8>)
   1ba2a:	4621      	mov	r1, r4
   1ba2c:	f000 fad0 	bl	1bfd0 <radio_isr_set>
			radio_switch_complete_and_disable();
   1ba30:	f000 fcc8 	bl	1c3c4 <radio_switch_complete_and_disable>
   1ba34:	e75e      	b.n	1b8f4 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   1ba36:	4a49      	ldr	r2, [pc, #292]	; (1bb5c <lll_conn_isr_rx+0x2e8>)
   1ba38:	4949      	ldr	r1, [pc, #292]	; (1bb60 <lll_conn_isr_rx+0x2ec>)
   1ba3a:	484a      	ldr	r0, [pc, #296]	; (1bb64 <lll_conn_isr_rx+0x2f0>)
   1ba3c:	23d1      	movs	r3, #209	; 0xd1
   1ba3e:	f005 fc29 	bl	21294 <printk>
   1ba42:	4040      	eors	r0, r0
   1ba44:	f380 8811 	msr	BASEPRI, r0
   1ba48:	f04f 0003 	mov.w	r0, #3
   1ba4c:	df02      	svc	2
	if (crc_ok) {
   1ba4e:	2d00      	cmp	r5, #0
   1ba50:	f43f af36 	beq.w	1b8c0 <lll_conn_isr_rx+0x4c>
   1ba54:	e78a      	b.n	1b96c <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   1ba56:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   1ba58:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1ba5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1ba60:	429a      	cmp	r2, r3
   1ba62:	d046      	beq.n	1baf2 <lll_conn_isr_rx+0x27e>
	is_rx_enqueue = 0U;
   1ba64:	2700      	movs	r7, #0
		crc_expire = 0U;
   1ba66:	4a3b      	ldr	r2, [pc, #236]	; (1bb54 <lll_conn_isr_rx+0x2e0>)
		crc_valid = 1U;
   1ba68:	4b3f      	ldr	r3, [pc, #252]	; (1bb68 <lll_conn_isr_rx+0x2f4>)
		crc_expire = 0U;
   1ba6a:	2100      	movs	r1, #0
   1ba6c:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1ba6e:	4620      	mov	r0, r4
		crc_valid = 1U;
   1ba70:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1ba72:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1ba74:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1ba76:	f7ff fe8d 	bl	1b794 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1ba7a:	7f33      	ldrb	r3, [r6, #28]
   1ba7c:	06d9      	lsls	r1, r3, #27
   1ba7e:	f53f af2a 	bmi.w	1b8d6 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1ba82:	9b01      	ldr	r3, [sp, #4]
   1ba84:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1ba86:	06d2      	lsls	r2, r2, #27
   1ba88:	f53f af25 	bmi.w	1b8d6 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1ba8c:	785b      	ldrb	r3, [r3, #1]
   1ba8e:	2b00      	cmp	r3, #0
   1ba90:	d0ca      	beq.n	1ba28 <lll_conn_isr_rx+0x1b4>
   1ba92:	e720      	b.n	1b8d6 <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   1ba94:	4a31      	ldr	r2, [pc, #196]	; (1bb5c <lll_conn_isr_rx+0x2e8>)
   1ba96:	4935      	ldr	r1, [pc, #212]	; (1bb6c <lll_conn_isr_rx+0x2f8>)
   1ba98:	4832      	ldr	r0, [pc, #200]	; (1bb64 <lll_conn_isr_rx+0x2f0>)
   1ba9a:	f240 133d 	movw	r3, #317	; 0x13d
   1ba9e:	f005 fbf9 	bl	21294 <printk>
   1baa2:	4040      	eors	r0, r0
   1baa4:	f380 8811 	msr	BASEPRI, r0
   1baa8:	f04f 0003 	mov.w	r0, #3
   1baac:	df02      	svc	2
   1baae:	e738      	b.n	1b922 <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   1bab0:	4a2a      	ldr	r2, [pc, #168]	; (1bb5c <lll_conn_isr_rx+0x2e8>)
   1bab2:	492f      	ldr	r1, [pc, #188]	; (1bb70 <lll_conn_isr_rx+0x2fc>)
   1bab4:	482b      	ldr	r0, [pc, #172]	; (1bb64 <lll_conn_isr_rx+0x2f0>)
   1bab6:	f44f 73a6 	mov.w	r3, #332	; 0x14c
   1baba:	f005 fbeb 	bl	21294 <printk>
   1babe:	4040      	eors	r0, r0
   1bac0:	f380 8811 	msr	BASEPRI, r0
   1bac4:	f04f 0003 	mov.w	r0, #3
   1bac8:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1baca:	8a20      	ldrh	r0, [r4, #16]
   1bacc:	e733      	b.n	1b936 <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   1bace:	f36f 0382 	bfc	r3, #2, #1
   1bad2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1bad6:	f000 fbc5 	bl	1c264 <radio_pkt_empty_get>
	tx_release = NULL;
   1bada:	2500      	movs	r5, #0
   1badc:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1bae0:	7f32      	ldrb	r2, [r6, #28]
   1bae2:	e7b9      	b.n	1ba58 <lll_conn_isr_rx+0x1e4>
				lll->packet_tx_head_offset = offset;
   1bae4:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   1bae8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1baec:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   1baee:	2500      	movs	r5, #0
   1baf0:	e7b2      	b.n	1ba58 <lll_conn_isr_rx+0x1e4>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1baf2:	2003      	movs	r0, #3
   1baf4:	f7f8 f94e 	bl	13d94 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1baf8:	2800      	cmp	r0, #0
   1bafa:	d0b3      	beq.n	1ba64 <lll_conn_isr_rx+0x1f0>
		lll->nesn++;
   1bafc:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1bb00:	f083 0302 	eor.w	r3, r3, #2
   1bb04:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   1bb08:	7f73      	ldrb	r3, [r6, #29]
   1bb0a:	2b00      	cmp	r3, #0
   1bb0c:	d0aa      	beq.n	1ba64 <lll_conn_isr_rx+0x1f0>
			if (lll->enc_rx) {
   1bb0e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1bb12:	0718      	lsls	r0, r3, #28
   1bb14:	d401      	bmi.n	1bb1a <lll_conn_isr_rx+0x2a6>
			*is_rx_enqueue = 1U;
   1bb16:	2701      	movs	r7, #1
   1bb18:	e7a5      	b.n	1ba66 <lll_conn_isr_rx+0x1f2>
				done = radio_ccm_is_done();
   1bb1a:	f000 fe19 	bl	1c750 <radio_ccm_is_done>
				LL_ASSERT(done);
   1bb1e:	2800      	cmp	r0, #0
   1bb20:	d051      	beq.n	1bbc6 <lll_conn_isr_rx+0x352>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1bb22:	f000 fe37 	bl	1c794 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1bb26:	2800      	cmp	r0, #0
   1bb28:	d13d      	bne.n	1bba6 <lll_conn_isr_rx+0x332>
				    lll->ccm_rx.counter == 0 &&
   1bb2a:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1bb2e:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   1bb32:	4313      	orrs	r3, r2
   1bb34:	d104      	bne.n	1bb40 <lll_conn_isr_rx+0x2cc>
				    (pdu_data_rx->ll_id ==
   1bb36:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1bb38:	f003 0303 	and.w	r3, r3, #3
   1bb3c:	2b03      	cmp	r3, #3
   1bb3e:	d01b      	beq.n	1bb78 <lll_conn_isr_rx+0x304>
					mic_state = LLL_CONN_MIC_FAIL;
   1bb40:	4b0c      	ldr	r3, [pc, #48]	; (1bb74 <lll_conn_isr_rx+0x300>)
   1bb42:	2202      	movs	r2, #2
   1bb44:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1bb46:	2700      	movs	r7, #0
   1bb48:	e6eb      	b.n	1b922 <lll_conn_isr_rx+0xae>
   1bb4a:	bf00      	nop
   1bb4c:	0001b499 	.word	0x0001b499
   1bb50:	2000ed1e 	.word	0x2000ed1e
   1bb54:	2000f2b9 	.word	0x2000f2b9
   1bb58:	0001b67d 	.word	0x0001b67d
   1bb5c:	00028614 	.word	0x00028614
   1bb60:	00028660 	.word	0x00028660
   1bb64:	00027ab4 	.word	0x00027ab4
   1bb68:	2000f2ba 	.word	0x2000f2ba
   1bb6c:	000285d8 	.word	0x000285d8
   1bb70:	00028670 	.word	0x00028670
   1bb74:	2000f2bb 	.word	0x2000f2bb
						radio_pkt_scratch_get();
   1bb78:	f000 fb78 	bl	1c26c <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1bb7c:	7843      	ldrb	r3, [r0, #1]
   1bb7e:	2b1b      	cmp	r3, #27
						radio_pkt_scratch_get();
   1bb80:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1bb82:	d8dd      	bhi.n	1bb40 <lll_conn_isr_rx+0x2cc>
						memcpy(pdu_data_rx,
   1bb84:	3303      	adds	r3, #3
   1bb86:	b2da      	uxtb	r2, r3
   1bb88:	f106 001c 	add.w	r0, r6, #28
   1bb8c:	f007 fff5 	bl	23b7a <memcpy>
						lll->ccm_rx.counter--;
   1bb90:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1bb94:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1bb98:	3b01      	subs	r3, #1
   1bb9a:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1bb9e:	f142 33ff 	adc.w	r3, r2, #4294967295
   1bba2:	f8c4 3077 	str.w	r3, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   1bba6:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   1bbaa:	4a0f      	ldr	r2, [pc, #60]	; (1bbe8 <lll_conn_isr_rx+0x374>)
				lll->ccm_rx.counter++;
   1bbac:	3301      	adds	r3, #1
   1bbae:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1bbb2:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
						lll->ccm_rx.counter--;
   1bbb6:	f104 0173 	add.w	r1, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   1bbba:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   1bbbe:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   1bbc0:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1bbc2:	7017      	strb	r7, [r2, #0]
		if (err) {
   1bbc4:	e74f      	b.n	1ba66 <lll_conn_isr_rx+0x1f2>
				LL_ASSERT(done);
   1bbc6:	4a09      	ldr	r2, [pc, #36]	; (1bbec <lll_conn_isr_rx+0x378>)
   1bbc8:	4909      	ldr	r1, [pc, #36]	; (1bbf0 <lll_conn_isr_rx+0x37c>)
   1bbca:	480a      	ldr	r0, [pc, #40]	; (1bbf4 <lll_conn_isr_rx+0x380>)
   1bbcc:	f44f 7344 	mov.w	r3, #784	; 0x310
   1bbd0:	f005 fb60 	bl	21294 <printk>
   1bbd4:	4040      	eors	r0, r0
   1bbd6:	f380 8811 	msr	BASEPRI, r0
   1bbda:	f04f 0003 	mov.w	r0, #3
   1bbde:	df02      	svc	2
   1bbe0:	e79f      	b.n	1bb22 <lll_conn_isr_rx+0x2ae>
	is_rx_enqueue = 0U;
   1bbe2:	462f      	mov	r7, r5
   1bbe4:	e677      	b.n	1b8d6 <lll_conn_isr_rx+0x62>
   1bbe6:	bf00      	nop
   1bbe8:	2000f2bb 	.word	0x2000f2bb
   1bbec:	00028614 	.word	0x00028614
   1bbf0:	00028668 	.word	0x00028668
   1bbf4:	00027ab4 	.word	0x00027ab4

0001bbf8 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1bbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1bbfc:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1bbfe:	8a22      	ldrh	r2, [r4, #16]
   1bc00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bc04:	429a      	cmp	r2, r3
{
   1bc06:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   1bc08:	f000 80c3 	beq.w	1bd92 <prepare_cb+0x19a>
		DEBUG_RADIO_CLOSE_S(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1bc0c:	4605      	mov	r5, r0
   1bc0e:	f7ff fcab 	bl	1b568 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1bc12:	8ae3      	ldrh	r3, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1bc14:	8b60      	ldrh	r0, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   1bc16:	1e5a      	subs	r2, r3, #1

	/* Update event counter to next value */
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1bc18:	4403      	add	r3, r0
   1bc1a:	8363      	strh	r3, [r4, #26]

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;
   1bc1c:	2300      	movs	r3, #0
   1bc1e:	82e3      	strh	r3, [r4, #22]

	if (lll->data_chan_sel) {
   1bc20:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1bc24:	b292      	uxth	r2, r2
	if (lll->data_chan_sel) {
   1bc26:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   1bc28:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   1bc2a:	f100 808f 	bmi.w	1bd4c <prepare_cb+0x154>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1bc2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bc32:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1bc36:	9300      	str	r3, [sp, #0]
   1bc38:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1bc3c:	f104 031c 	add.w	r3, r4, #28
   1bc40:	f7fd f9e0 	bl	19004 <lll_chan_sel_1>
   1bc44:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1bc46:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1bc4a:	441a      	add	r2, r3
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1bc4c:	e9d4 130e 	ldrd	r1, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1bc50:	2600      	movs	r6, #0
	lll->slave.window_size_event_us +=
   1bc52:	440b      	add	r3, r1
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1bc54:	e9c4 630e 	strd	r6, r3, [r4, #56]	; 0x38
	    lll->slave.window_widening_max_us) {
   1bc58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	lll->slave.window_widening_prepare_us = 0;
   1bc5a:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_widening_event_us =
   1bc5c:	4293      	cmp	r3, r2
   1bc5e:	bf28      	it	cs
   1bc60:	4613      	movcs	r3, r2
   1bc62:	6363      	str	r3, [r4, #52]	; 0x34

	/* Start setting up Radio h/w */
	radio_reset();
   1bc64:	f000 f9f6 	bl	1c054 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1bc68:	4630      	mov	r0, r6
   1bc6a:	f000 fa27 	bl	1c0bc <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1bc6e:	4620      	mov	r0, r4
   1bc70:	f7ff fcba 	bl	1b5e8 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1bc74:	f104 0008 	add.w	r0, r4, #8
   1bc78:	f000 fa3e 	bl	1c0f8 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1bc7c:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1bc7e:	7ba1      	ldrb	r1, [r4, #14]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1bc80:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1bc82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   1bc86:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1bc88:	f240 605b 	movw	r0, #1627	; 0x65b
   1bc8c:	4319      	orrs	r1, r3
   1bc8e:	f000 fad3 	bl	1c238 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1bc92:	4638      	mov	r0, r7
   1bc94:	f7fe fda4 	bl	1a7e0 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1bc98:	4621      	mov	r1, r4
   1bc9a:	484a      	ldr	r0, [pc, #296]	; (1bdc4 <prepare_cb+0x1cc>)
   1bc9c:	f000 f998 	bl	1bfd0 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1bca0:	2096      	movs	r0, #150	; 0x96
   1bca2:	f000 fc01 	bl	1c4a8 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1bca6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   1bcaa:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1bcae:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1bcb2:	4631      	mov	r1, r6
   1bcb4:	f002 0207 	and.w	r2, r2, #7
   1bcb8:	f000 0007 	and.w	r0, r0, #7
   1bcbc:	f000 fb22 	bl	1c304 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1bcc0:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1bcc4:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1bcc6:	4640      	mov	r0, r8
   1bcc8:	f7fe fd6e 	bl	1a7a8 <lll_evt_offset_get>
   1bccc:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1bcce:	686a      	ldr	r2, [r5, #4]
   1bcd0:	f107 0109 	add.w	r1, r7, #9
   1bcd4:	4630      	mov	r0, r6
   1bcd6:	f000 fbf3 	bl	1c4c0 <radio_tmr_start>
   1bcda:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1bcdc:	f000 fc92 	bl	1c604 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1bce0:	4630      	mov	r0, r6
   1bce2:	f000 fca9 	bl	1c638 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1bce6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bce8:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   1bcec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1bcee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1bcf2:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1bcf6:	2101      	movs	r1, #1
   1bcf8:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   1bcfc:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1bcfe:	f000 fa4f 	bl	1c1a0 <radio_rx_ready_delay_get>
   1bd02:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   1bd04:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1bd08:	f000 0007 	and.w	r0, r0, #7
   1bd0c:	2802      	cmp	r0, #2
   1bd0e:	d03e      	beq.n	1bd8e <prepare_cb+0x196>
		return 40;
   1bd10:	2804      	cmp	r0, #4
   1bd12:	bf0c      	ite	eq
   1bd14:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1bd18:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1bd1a:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1bd1c:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1bd1e:	f000 fa41 	bl	1c1a4 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1bd22:	4428      	add	r0, r5
   1bd24:	f000 fc60 	bl	1c5e8 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1bd28:	8a21      	ldrh	r1, [r4, #16]
   1bd2a:	3103      	adds	r1, #3
   1bd2c:	463a      	mov	r2, r7
   1bd2e:	b2c9      	uxtb	r1, r1
   1bd30:	4640      	mov	r0, r8
   1bd32:	f7fe fd43 	bl	1a7bc <lll_preempt_calc>
   1bd36:	b1a0      	cbz	r0, 1bd62 <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1bd38:	4823      	ldr	r0, [pc, #140]	; (1bdc8 <prepare_cb+0x1d0>)
   1bd3a:	4621      	mov	r1, r4
   1bd3c:	f000 f948 	bl	1bfd0 <radio_isr_set>
		radio_disable();
   1bd40:	f000 fa3c 	bl	1c1bc <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1bd44:	2000      	movs	r0, #0
   1bd46:	b002      	add	sp, #8
   1bd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   1bd4c:	4410      	add	r0, r2
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1bd4e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1bd50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bd54:	f104 021c 	add.w	r2, r4, #28
   1bd58:	b280      	uxth	r0, r0
   1bd5a:	f7fd f993 	bl	19084 <lll_chan_sel_2>
   1bd5e:	4607      	mov	r7, r0
   1bd60:	e771      	b.n	1bc46 <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   1bd62:	4620      	mov	r0, r4
   1bd64:	f7fe fcc6 	bl	1a6f4 <lll_prepare_done>
		LL_ASSERT(!ret);
   1bd68:	2800      	cmp	r0, #0
   1bd6a:	d0eb      	beq.n	1bd44 <prepare_cb+0x14c>
   1bd6c:	4a17      	ldr	r2, [pc, #92]	; (1bdcc <prepare_cb+0x1d4>)
   1bd6e:	4918      	ldr	r1, [pc, #96]	; (1bdd0 <prepare_cb+0x1d8>)
   1bd70:	4818      	ldr	r0, [pc, #96]	; (1bdd4 <prepare_cb+0x1dc>)
   1bd72:	f240 1313 	movw	r3, #275	; 0x113
   1bd76:	f005 fa8d 	bl	21294 <printk>
   1bd7a:	4040      	eors	r0, r0
   1bd7c:	f380 8811 	msr	BASEPRI, r0
   1bd80:	f04f 0003 	mov.w	r0, #3
   1bd84:	df02      	svc	2
}
   1bd86:	2000      	movs	r0, #0
   1bd88:	b002      	add	sp, #8
   1bd8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   1bd8e:	2318      	movs	r3, #24
   1bd90:	e7c3      	b.n	1bd1a <prepare_cb+0x122>
		err = lll_hfclock_off();
   1bd92:	f7fe fe43 	bl	1aa1c <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1bd96:	2800      	cmp	r0, #0
   1bd98:	db06      	blt.n	1bda8 <prepare_cb+0x1b0>
		lll_done(NULL);
   1bd9a:	2000      	movs	r0, #0
   1bd9c:	f7fe fcac 	bl	1a6f8 <lll_done>
}
   1bda0:	2000      	movs	r0, #0
   1bda2:	b002      	add	sp, #8
   1bda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(err >= 0);
   1bda8:	4a08      	ldr	r2, [pc, #32]	; (1bdcc <prepare_cb+0x1d4>)
   1bdaa:	490b      	ldr	r1, [pc, #44]	; (1bdd8 <prepare_cb+0x1e0>)
   1bdac:	4809      	ldr	r0, [pc, #36]	; (1bdd4 <prepare_cb+0x1dc>)
   1bdae:	237d      	movs	r3, #125	; 0x7d
   1bdb0:	f005 fa70 	bl	21294 <printk>
   1bdb4:	4040      	eors	r0, r0
   1bdb6:	f380 8811 	msr	BASEPRI, r0
   1bdba:	f04f 0003 	mov.w	r0, #3
   1bdbe:	df02      	svc	2
   1bdc0:	e7eb      	b.n	1bd9a <prepare_cb+0x1a2>
   1bdc2:	bf00      	nop
   1bdc4:	0001b875 	.word	0x0001b875
   1bdc8:	0001a915 	.word	0x0001a915
   1bdcc:	0002869c 	.word	0x0002869c
   1bdd0:	00027d50 	.word	0x00027d50
   1bdd4:	00027ab4 	.word	0x00027ab4
   1bdd8:	00028550 	.word	0x00028550

0001bddc <lll_slave_prepare>:
{
   1bddc:	b510      	push	{r4, lr}
   1bdde:	b082      	sub	sp, #8
   1bde0:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1bde2:	f7fe fe03 	bl	1a9ec <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1bde6:	2800      	cmp	r0, #0
   1bde8:	db2a      	blt.n	1be40 <lll_slave_prepare+0x64>
	lll = p->param;
   1bdea:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   1bdec:	8923      	ldrh	r3, [r4, #8]
	lll->slave.window_widening_prepare_us +=
   1bdee:	6b0a      	ldr	r2, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1bdf0:	f8b1 c016 	ldrh.w	ip, [r1, #22]
	    lll->slave.window_widening_periodic_us * elapsed;
   1bdf4:	6a88      	ldr	r0, [r1, #40]	; 0x28
	elapsed = p->lazy + 1;
   1bdf6:	3301      	adds	r3, #1
   1bdf8:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   1bdfa:	fb00 2003 	mla	r0, r0, r3, r2
	lll->latency_prepare += elapsed;
   1bdfe:	4463      	add	r3, ip
   1be00:	82cb      	strh	r3, [r1, #22]
	    lll->slave.window_widening_max_us) {
   1be02:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1be04:	4a15      	ldr	r2, [pc, #84]	; (1be5c <lll_slave_prepare+0x80>)
		lll->slave.window_widening_prepare_us =
   1be06:	4283      	cmp	r3, r0
   1be08:	bf28      	it	cs
   1be0a:	4603      	movcs	r3, r0
   1be0c:	630b      	str	r3, [r1, #48]	; 0x30
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1be0e:	4814      	ldr	r0, [pc, #80]	; (1be60 <lll_slave_prepare+0x84>)
   1be10:	4914      	ldr	r1, [pc, #80]	; (1be64 <lll_slave_prepare+0x88>)
   1be12:	9400      	str	r4, [sp, #0]
   1be14:	2300      	movs	r3, #0
   1be16:	f7fe fbe1 	bl	1a5dc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1be1a:	b108      	cbz	r0, 1be20 <lll_slave_prepare+0x44>
   1be1c:	3044      	adds	r0, #68	; 0x44
   1be1e:	d101      	bne.n	1be24 <lll_slave_prepare+0x48>
}
   1be20:	b002      	add	sp, #8
   1be22:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1be24:	4a10      	ldr	r2, [pc, #64]	; (1be68 <lll_slave_prepare+0x8c>)
   1be26:	4911      	ldr	r1, [pc, #68]	; (1be6c <lll_slave_prepare+0x90>)
   1be28:	4811      	ldr	r0, [pc, #68]	; (1be70 <lll_slave_prepare+0x94>)
   1be2a:	235f      	movs	r3, #95	; 0x5f
   1be2c:	f005 fa32 	bl	21294 <printk>
   1be30:	4040      	eors	r0, r0
   1be32:	f380 8811 	msr	BASEPRI, r0
   1be36:	f04f 0003 	mov.w	r0, #3
   1be3a:	df02      	svc	2
}
   1be3c:	b002      	add	sp, #8
   1be3e:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1be40:	4a09      	ldr	r2, [pc, #36]	; (1be68 <lll_slave_prepare+0x8c>)
   1be42:	490c      	ldr	r1, [pc, #48]	; (1be74 <lll_slave_prepare+0x98>)
   1be44:	480a      	ldr	r0, [pc, #40]	; (1be70 <lll_slave_prepare+0x94>)
   1be46:	2348      	movs	r3, #72	; 0x48
   1be48:	f005 fa24 	bl	21294 <printk>
   1be4c:	4040      	eors	r0, r0
   1be4e:	f380 8811 	msr	BASEPRI, r0
   1be52:	f04f 0003 	mov.w	r0, #3
   1be56:	df02      	svc	2
   1be58:	e7c7      	b.n	1bdea <lll_slave_prepare+0xe>
   1be5a:	bf00      	nop
   1be5c:	0001bbf9 	.word	0x0001bbf9
   1be60:	0001a7a1 	.word	0x0001a7a1
   1be64:	0001b591 	.word	0x0001b591
   1be68:	0002869c 	.word	0x0002869c
   1be6c:	000285f0 	.word	0x000285f0
   1be70:	00027ab4 	.word	0x00027ab4
   1be74:	00028550 	.word	0x00028550

0001be78 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1be78:	4b05      	ldr	r3, [pc, #20]	; (1be90 <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   1be7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1be7e:	2100      	movs	r1, #0
   1be80:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1be84:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1be88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1be8c:	4770      	bx	lr
   1be8e:	bf00      	nop
   1be90:	4000b000 	.word	0x4000b000

0001be94 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1be94:	4b05      	ldr	r3, [pc, #20]	; (1beac <cntr_start+0x18>)
   1be96:	7818      	ldrb	r0, [r3, #0]
   1be98:	1c42      	adds	r2, r0, #1
   1be9a:	701a      	strb	r2, [r3, #0]
   1be9c:	b918      	cbnz	r0, 1bea6 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1be9e:	4b04      	ldr	r3, [pc, #16]	; (1beb0 <cntr_start+0x1c>)
   1bea0:	2201      	movs	r2, #1
   1bea2:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1bea4:	4770      	bx	lr
		return 1;
   1bea6:	2001      	movs	r0, #1
}
   1bea8:	4770      	bx	lr
   1beaa:	bf00      	nop
   1beac:	2000f2bc 	.word	0x2000f2bc
   1beb0:	4000b000 	.word	0x4000b000

0001beb4 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1beb4:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1beb6:	4c0d      	ldr	r4, [pc, #52]	; (1beec <cntr_stop+0x38>)
   1beb8:	7820      	ldrb	r0, [r4, #0]
   1beba:	b148      	cbz	r0, 1bed0 <cntr_stop+0x1c>

	if (--_refcount) {
   1bebc:	3801      	subs	r0, #1
   1bebe:	b2c0      	uxtb	r0, r0
   1bec0:	7020      	strb	r0, [r4, #0]
   1bec2:	b918      	cbnz	r0, 1becc <cntr_stop+0x18>
   1bec4:	4b0a      	ldr	r3, [pc, #40]	; (1bef0 <cntr_stop+0x3c>)
   1bec6:	2201      	movs	r2, #1
   1bec8:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1beca:	bd10      	pop	{r4, pc}
		return 1;
   1becc:	2001      	movs	r0, #1
}
   1bece:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1bed0:	4a08      	ldr	r2, [pc, #32]	; (1bef4 <cntr_stop+0x40>)
   1bed2:	4909      	ldr	r1, [pc, #36]	; (1bef8 <cntr_stop+0x44>)
   1bed4:	4809      	ldr	r0, [pc, #36]	; (1befc <cntr_stop+0x48>)
   1bed6:	232d      	movs	r3, #45	; 0x2d
   1bed8:	f005 f9dc 	bl	21294 <printk>
   1bedc:	4040      	eors	r0, r0
   1bede:	f380 8811 	msr	BASEPRI, r0
   1bee2:	f04f 0003 	mov.w	r0, #3
   1bee6:	df02      	svc	2
	if (--_refcount) {
   1bee8:	7820      	ldrb	r0, [r4, #0]
   1beea:	e7e7      	b.n	1bebc <cntr_stop+0x8>
   1beec:	2000f2bc 	.word	0x2000f2bc
   1bef0:	4000b000 	.word	0x4000b000
   1bef4:	000286fc 	.word	0x000286fc
   1bef8:	00028748 	.word	0x00028748
   1befc:	00027ab4 	.word	0x00027ab4

0001bf00 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1bf00:	4b01      	ldr	r3, [pc, #4]	; (1bf08 <cntr_cnt_get+0x8>)
   1bf02:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1bf06:	4770      	bx	lr
   1bf08:	4000b000 	.word	0x4000b000

0001bf0c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1bf0c:	4b02      	ldr	r3, [pc, #8]	; (1bf18 <cntr_cmp_set+0xc>)
   1bf0e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1bf12:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1bf16:	4770      	bx	lr
   1bf18:	4000b000 	.word	0x4000b000

0001bf1c <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bf1c:	4b12      	ldr	r3, [pc, #72]	; (1bf68 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1bf1e:	b430      	push	{r4, r5}
   1bf20:	2101      	movs	r1, #1
   1bf22:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1bf24:	2000      	movs	r0, #0
   1bf26:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1bf28:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1bf2c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1bf30:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1bf34:	6019      	str	r1, [r3, #0]
}
   1bf36:	e005      	b.n	1bf44 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1bf38:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1bf3c:	b932      	cbnz	r2, 1bf4c <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1bf3e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1bf42:	b11a      	cbz	r2, 1bf4c <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1bf44:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1bf48:	2a00      	cmp	r2, #0
   1bf4a:	d0f5      	beq.n	1bf38 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bf4c:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1bf4e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1bf52:	2a00      	cmp	r2, #0
   1bf54:	d1e7      	bne.n	1bf26 <do_ecb+0xa>
   1bf56:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1bf5a:	2d00      	cmp	r5, #0
   1bf5c:	d0e3      	beq.n	1bf26 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1bf5e:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1bf60:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1bf64:	4770      	bx	lr
   1bf66:	bf00      	nop
   1bf68:	4000e000 	.word	0x4000e000

0001bf6c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1bf6c:	b570      	push	{r4, r5, r6, lr}
   1bf6e:	b08c      	sub	sp, #48	; 0x30
   1bf70:	460e      	mov	r6, r1
   1bf72:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1bf74:	4601      	mov	r1, r0
   1bf76:	2210      	movs	r2, #16
   1bf78:	4668      	mov	r0, sp
{
   1bf7a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1bf7c:	f7f3 ffc0 	bl	ff00 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1bf80:	2210      	movs	r2, #16
   1bf82:	eb0d 0002 	add.w	r0, sp, r2
   1bf86:	4631      	mov	r1, r6
   1bf88:	f7f3 ffba 	bl	ff00 <mem_rcopy>

	do_ecb(&ecb);
   1bf8c:	4668      	mov	r0, sp
   1bf8e:	f7ff ffc5 	bl	1bf1c <do_ecb>

	if (cipher_text_le) {
   1bf92:	b125      	cbz	r5, 1bf9e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1bf94:	2210      	movs	r2, #16
   1bf96:	a908      	add	r1, sp, #32
   1bf98:	4628      	mov	r0, r5
   1bf9a:	f7f3 ffb1 	bl	ff00 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1bf9e:	b124      	cbz	r4, 1bfaa <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1bfa0:	2210      	movs	r2, #16
   1bfa2:	a908      	add	r1, sp, #32
   1bfa4:	4620      	mov	r0, r4
   1bfa6:	f007 fde8 	bl	23b7a <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1bfaa:	b00c      	add	sp, #48	; 0x30
   1bfac:	bd70      	pop	{r4, r5, r6, pc}
   1bfae:	bf00      	nop

0001bfb0 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1bfb0:	4b04      	ldr	r3, [pc, #16]	; (1bfc4 <isr_radio+0x14>)
   1bfb2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1bfb6:	b123      	cbz	r3, 1bfc2 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1bfb8:	4a03      	ldr	r2, [pc, #12]	; (1bfc8 <isr_radio+0x18>)
   1bfba:	4b04      	ldr	r3, [pc, #16]	; (1bfcc <isr_radio+0x1c>)
   1bfbc:	6810      	ldr	r0, [r2, #0]
   1bfbe:	681b      	ldr	r3, [r3, #0]
   1bfc0:	4718      	bx	r3
}
   1bfc2:	4770      	bx	lr
   1bfc4:	40001000 	.word	0x40001000
   1bfc8:	2000ead0 	.word	0x2000ead0
   1bfcc:	2000eacc 	.word	0x2000eacc

0001bfd0 <radio_isr_set>:
{
   1bfd0:	b538      	push	{r3, r4, r5, lr}
   1bfd2:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1bfd4:	2001      	movs	r0, #1
{
   1bfd6:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1bfd8:	f7ea ff80 	bl	6edc <arch_irq_disable>
	isr_cb = cb;
   1bfdc:	4b08      	ldr	r3, [pc, #32]	; (1c000 <radio_isr_set+0x30>)
	isr_cb_param = param;
   1bfde:	4a09      	ldr	r2, [pc, #36]	; (1c004 <radio_isr_set+0x34>)
	isr_cb = cb;
   1bfe0:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1bfe2:	4909      	ldr	r1, [pc, #36]	; (1c008 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bfe4:	4b09      	ldr	r3, [pc, #36]	; (1c00c <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1bfe6:	6015      	str	r5, [r2, #0]
   1bfe8:	2010      	movs	r0, #16
   1bfea:	2202      	movs	r2, #2
   1bfec:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1bff0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1bff4:	2001      	movs	r0, #1
}
   1bff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1bffa:	f7ea bf5f 	b.w	6ebc <arch_irq_enable>
   1bffe:	bf00      	nop
   1c000:	2000eacc 	.word	0x2000eacc
   1c004:	2000ead0 	.word	0x2000ead0
   1c008:	40001000 	.word	0x40001000
   1c00c:	e000e100 	.word	0xe000e100

0001c010 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1c010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c014:	f04f 32ff 	mov.w	r2, #4294967295
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1c018:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1c01a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1c01e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1c022:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1c026:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1c02a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1c02e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1c032:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1c036:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1c03a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1c03e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1c042:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1c046:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1c04a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1c04e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1c052:	4770      	bx	lr

0001c054 <radio_reset>:
{
   1c054:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1c056:	2001      	movs	r0, #1
   1c058:	f7ea ff40 	bl	6edc <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1c05c:	4a0d      	ldr	r2, [pc, #52]	; (1c094 <radio_reset+0x40>)
   1c05e:	2100      	movs	r1, #0
   1c060:	2301      	movs	r3, #1
   1c062:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1c066:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1c06a:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1c06e:	490a      	ldr	r1, [pc, #40]	; (1c098 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1c070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1c074:	f023 0301 	bic.w	r3, r3, #1
   1c078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c07c:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1c080:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1c084:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1c088:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1c08c:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1c090:	bd10      	pop	{r4, pc}
   1c092:	bf00      	nop
   1c094:	40001000 	.word	0x40001000
   1c098:	4001f000 	.word	0x4001f000

0001c09c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1c09c:	4b06      	ldr	r3, [pc, #24]	; (1c0b8 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1c09e:	2802      	cmp	r0, #2
   1c0a0:	bf14      	ite	ne
   1c0a2:	2203      	movne	r2, #3
   1c0a4:	2204      	moveq	r2, #4
   1c0a6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1c0aa:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1c0ae:	f042 0201 	orr.w	r2, r2, #1
   1c0b2:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1c0b6:	4770      	bx	lr
   1c0b8:	40001000 	.word	0x40001000

0001c0bc <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1c0bc:	4b01      	ldr	r3, [pc, #4]	; (1c0c4 <radio_tx_power_set+0x8>)
   1c0be:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1c0c2:	4770      	bx	lr
   1c0c4:	40001000 	.word	0x40001000

0001c0c8 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1c0c8:	4b01      	ldr	r3, [pc, #4]	; (1c0d0 <radio_freq_chan_set+0x8>)
   1c0ca:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1c0ce:	4770      	bx	lr
   1c0d0:	40001000 	.word	0x40001000

0001c0d4 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1c0d4:	4b07      	ldr	r3, [pc, #28]	; (1c0f4 <radio_whiten_iv_set+0x20>)
   1c0d6:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1c0da:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1c0de:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1c0e2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1c0e6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1c0ea:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1c0ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1c0f2:	4770      	bx	lr
   1c0f4:	40001000 	.word	0x40001000

0001c0f8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1c0f8:	4a0a      	ldr	r2, [pc, #40]	; (1c124 <radio_aa_set+0x2c>)
   1c0fa:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1c0fc:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1c0fe:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1c102:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1c106:	78c3      	ldrb	r3, [r0, #3]
   1c108:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1c10c:	7843      	ldrb	r3, [r0, #1]
   1c10e:	f890 c002 	ldrb.w	ip, [r0, #2]
   1c112:	7801      	ldrb	r1, [r0, #0]
   1c114:	041b      	lsls	r3, r3, #16
   1c116:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1c11a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1c11e:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1c122:	4770      	bx	lr
   1c124:	40001000 	.word	0x40001000

0001c128 <radio_pkt_configure>:
	switch (phy) {
   1c128:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1c12c:	2b02      	cmp	r3, #2
   1c12e:	bf14      	ite	ne
   1c130:	f04f 0c00 	movne.w	ip, #0
   1c134:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (dc) {
   1c138:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1c13a:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1c13e:	bf48      	it	mi
   1c140:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1c144:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1c146:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1c14a:	ea40 000c 	orr.w	r0, r0, ip
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1c14e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1c152:	4a0a      	ldr	r2, [pc, #40]	; (1c17c <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1c154:	4303      	orrs	r3, r0
   1c156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1c15a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1c15e:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1c162:	4b07      	ldr	r3, [pc, #28]	; (1c180 <radio_pkt_configure+0x58>)
   1c164:	4003      	ands	r3, r0
   1c166:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1c16a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1c16e:	4319      	orrs	r1, r3
   1c170:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1c174:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1c178:	4770      	bx	lr
   1c17a:	bf00      	nop
   1c17c:	40001000 	.word	0x40001000
   1c180:	fef80000 	.word	0xfef80000

0001c184 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1c184:	4b01      	ldr	r3, [pc, #4]	; (1c18c <radio_pkt_rx_set+0x8>)
   1c186:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1c18a:	4770      	bx	lr
   1c18c:	40001000 	.word	0x40001000

0001c190 <radio_pkt_tx_set>:
   1c190:	4b01      	ldr	r3, [pc, #4]	; (1c198 <radio_pkt_tx_set+0x8>)
   1c192:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1c196:	4770      	bx	lr
   1c198:	40001000 	.word	0x40001000

0001c19c <radio_tx_chain_delay_get>:
}
   1c19c:	2001      	movs	r0, #1
   1c19e:	4770      	bx	lr

0001c1a0 <radio_rx_ready_delay_get>:
}
   1c1a0:	2029      	movs	r0, #41	; 0x29
   1c1a2:	4770      	bx	lr

0001c1a4 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   1c1a4:	2802      	cmp	r0, #2
}
   1c1a6:	bf14      	ite	ne
   1c1a8:	200a      	movne	r0, #10
   1c1aa:	2005      	moveq	r0, #5
   1c1ac:	4770      	bx	lr
   1c1ae:	bf00      	nop

0001c1b0 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c1b0:	4b01      	ldr	r3, [pc, #4]	; (1c1b8 <radio_tx_enable+0x8>)
   1c1b2:	2201      	movs	r2, #1
   1c1b4:	601a      	str	r2, [r3, #0]
}
   1c1b6:	4770      	bx	lr
   1c1b8:	40001000 	.word	0x40001000

0001c1bc <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1c1bc:	4a07      	ldr	r2, [pc, #28]	; (1c1dc <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1c1be:	4908      	ldr	r1, [pc, #32]	; (1c1e0 <radio_disable+0x24>)
{
   1c1c0:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1c1c2:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1c1c4:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1c1c8:	2000      	movs	r0, #0
   1c1ca:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1c1ce:	6053      	str	r3, [r2, #4]
}
   1c1d0:	bc10      	pop	{r4}
   1c1d2:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1c1d4:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1c1d8:	610b      	str	r3, [r1, #16]
}
   1c1da:	4770      	bx	lr
   1c1dc:	4001f000 	.word	0x4001f000
   1c1e0:	40001000 	.word	0x40001000

0001c1e4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1c1e4:	4b04      	ldr	r3, [pc, #16]	; (1c1f8 <radio_status_reset+0x14>)
   1c1e6:	2200      	movs	r2, #0
   1c1e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1c1ec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1c1f0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1c1f4:	4770      	bx	lr
   1c1f6:	bf00      	nop
   1c1f8:	40001000 	.word	0x40001000

0001c1fc <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1c1fc:	4b03      	ldr	r3, [pc, #12]	; (1c20c <radio_is_ready+0x10>)
   1c1fe:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1c202:	3800      	subs	r0, #0
   1c204:	bf18      	it	ne
   1c206:	2001      	movne	r0, #1
   1c208:	4770      	bx	lr
   1c20a:	bf00      	nop
   1c20c:	40001000 	.word	0x40001000

0001c210 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1c210:	4b03      	ldr	r3, [pc, #12]	; (1c220 <radio_is_done+0x10>)
   1c212:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1c216:	3800      	subs	r0, #0
   1c218:	bf18      	it	ne
   1c21a:	2001      	movne	r0, #1
   1c21c:	4770      	bx	lr
   1c21e:	bf00      	nop
   1c220:	40001000 	.word	0x40001000

0001c224 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1c224:	4b03      	ldr	r3, [pc, #12]	; (1c234 <radio_is_idle+0x10>)
   1c226:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1c22a:	fab0 f080 	clz	r0, r0
   1c22e:	0940      	lsrs	r0, r0, #5
   1c230:	4770      	bx	lr
   1c232:	bf00      	nop
   1c234:	40001000 	.word	0x40001000

0001c238 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1c238:	4b04      	ldr	r3, [pc, #16]	; (1c24c <radio_crc_configure+0x14>)
   1c23a:	f240 1203 	movw	r2, #259	; 0x103
   1c23e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1c242:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1c246:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1c24a:	4770      	bx	lr
   1c24c:	40001000 	.word	0x40001000

0001c250 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1c250:	4b03      	ldr	r3, [pc, #12]	; (1c260 <radio_crc_is_valid+0x10>)
   1c252:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1c256:	3800      	subs	r0, #0
   1c258:	bf18      	it	ne
   1c25a:	2001      	movne	r0, #1
   1c25c:	4770      	bx	lr
   1c25e:	bf00      	nop
   1c260:	40001000 	.word	0x40001000

0001c264 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1c264:	4800      	ldr	r0, [pc, #0]	; (1c268 <radio_pkt_empty_get+0x4>)
   1c266:	4770      	bx	lr
   1c268:	2000e9c4 	.word	0x2000e9c4

0001c26c <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1c26c:	4800      	ldr	r0, [pc, #0]	; (1c270 <radio_pkt_scratch_get+0x4>)
   1c26e:	4770      	bx	lr
   1c270:	2000e9c8 	.word	0x2000e9c8

0001c274 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c274:	4b1d      	ldr	r3, [pc, #116]	; (1c2ec <radio_switch_complete_and_rx+0x78>)
{
   1c276:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c278:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c27a:	4d1d      	ldr	r5, [pc, #116]	; (1c2f0 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c27c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c280:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c282:	4e1c      	ldr	r6, [pc, #112]	; (1c2f4 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c284:	4c1c      	ldr	r4, [pc, #112]	; (1c2f8 <radio_switch_complete_and_rx+0x84>)
   1c286:	4f1d      	ldr	r7, [pc, #116]	; (1c2fc <radio_switch_complete_and_rx+0x88>)
   1c288:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   1c28c:	f102 030c 	add.w	r3, r2, #12
   1c290:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c292:	00d0      	lsls	r0, r2, #3
   1c294:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c296:	0091      	lsls	r1, r2, #2
   1c298:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c29c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1c2a0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1c2a4:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c2a8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1c2ac:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1c2b0:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c2b4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c2b8:	4811      	ldr	r0, [pc, #68]	; (1c300 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c2ba:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c2be:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		SW_SWITCH_TIMER->CC[cc]) {
   1c2c2:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
	if (delay <
   1c2c6:	2b28      	cmp	r3, #40	; 0x28
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1c2c8:	bf8a      	itet	hi
   1c2ca:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1c2ce:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1c2d0:	3b28      	subhi	r3, #40	; 0x28
   1c2d2:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1c2d6:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1c2d8:	4b06      	ldr	r3, [pc, #24]	; (1c2f4 <radio_switch_complete_and_rx+0x80>)
   1c2da:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1;
   1c2de:	f002 0201 	and.w	r2, r2, #1
   1c2e2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1c2e6:	702a      	strb	r2, [r5, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c2e8:	bcf0      	pop	{r4, r5, r6, r7}
   1c2ea:	4770      	bx	lr
   1c2ec:	40001000 	.word	0x40001000
   1c2f0:	2000f2bd 	.word	0x2000f2bd
   1c2f4:	4001f000 	.word	0x4001f000
   1c2f8:	40009140 	.word	0x40009140
   1c2fc:	4000110c 	.word	0x4000110c
   1c300:	40001004 	.word	0x40001004

0001c304 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx, uint8_t phy_tx,
				  uint8_t flags_tx)
{
   1c304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c308:	4e28      	ldr	r6, [pc, #160]	; (1c3ac <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c30a:	4c29      	ldr	r4, [pc, #164]	; (1c3b0 <radio_switch_complete_and_tx+0xac>)
   1c30c:	4f29      	ldr	r7, [pc, #164]	; (1c3b4 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c30e:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1c3b8 <radio_switch_complete_and_tx+0xb4>
   1c312:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1c3bc <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c316:	2303      	movs	r3, #3
   1c318:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c31c:	7821      	ldrb	r1, [r4, #0]
   1c31e:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1c322:	f101 030c 	add.w	r3, r1, #12
   1c326:	b2db      	uxtb	r3, r3
   1c328:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c32a:	00cd      	lsls	r5, r1, #3
   1c32c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c330:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1c334:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c338:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c33c:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c340:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c344:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c348:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1c34c:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c350:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1c354:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   1c358:	2a02      	cmp	r2, #2
   1c35a:	bf18      	it	ne
   1c35c:	461d      	movne	r5, r3
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1c35e:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1c362:	f241 3288 	movw	r2, #5000	; 0x1388
   1c366:	f242 43b8 	movw	r3, #9400	; 0x24b8
   1c36a:	2802      	cmp	r0, #2
   1c36c:	bf08      	it	eq
   1c36e:	4613      	moveq	r3, r2
   1c370:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
		delay = HAL_RADIO_NS2US_ROUND(
   1c374:	4a12      	ldr	r2, [pc, #72]	; (1c3c0 <radio_switch_complete_and_tx+0xbc>)
   1c376:	442b      	add	r3, r5
   1c378:	fba2 2303 	umull	r2, r3, r2, r3
		SW_SWITCH_TIMER->CC[cc]) {
   1c37c:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
	if (delay <
   1c380:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   1c384:	bf85      	ittet	hi
   1c386:	0998      	lsrhi	r0, r3, #6
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1c388:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   1c38c:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1c38e:	1a1b      	subhi	r3, r3, r0
   1c390:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1c394:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1c396:	4b08      	ldr	r3, [pc, #32]	; (1c3b8 <radio_switch_complete_and_tx+0xb4>)
   1c398:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1;
   1c39c:	f001 0101 	and.w	r1, r1, #1
   1c3a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1c3a4:	7021      	strb	r1, [r4, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c3aa:	bf00      	nop
   1c3ac:	40001000 	.word	0x40001000
   1c3b0:	2000f2bd 	.word	0x2000f2bd
   1c3b4:	40009140 	.word	0x40009140
   1c3b8:	4001f000 	.word	0x4001f000
   1c3bc:	4000110c 	.word	0x4000110c
   1c3c0:	10624dd3 	.word	0x10624dd3

0001c3c4 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1c3c4:	4904      	ldr	r1, [pc, #16]	; (1c3d8 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1c3c6:	4b05      	ldr	r3, [pc, #20]	; (1c3dc <radio_switch_complete_and_disable+0x18>)
   1c3c8:	2003      	movs	r0, #3
   1c3ca:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1c3ce:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1c3d2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c3d6:	4770      	bx	lr
   1c3d8:	40001000 	.word	0x40001000
   1c3dc:	4001f000 	.word	0x4001f000

0001c3e0 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1c3e0:	4b02      	ldr	r3, [pc, #8]	; (1c3ec <radio_rssi_status_reset+0xc>)
   1c3e2:	2200      	movs	r2, #0
   1c3e4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1c3e8:	4770      	bx	lr
   1c3ea:	bf00      	nop
   1c3ec:	40001000 	.word	0x40001000

0001c3f0 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1c3f0:	4b03      	ldr	r3, [pc, #12]	; (1c400 <radio_rssi_is_ready+0x10>)
   1c3f2:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1c3f6:	3800      	subs	r0, #0
   1c3f8:	bf18      	it	ne
   1c3fa:	2001      	movne	r0, #1
   1c3fc:	4770      	bx	lr
   1c3fe:	bf00      	nop
   1c400:	40001000 	.word	0x40001000

0001c404 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1c404:	b410      	push	{r4}
   1c406:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1c40a:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1c40e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1c416:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1c418:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   1c41c:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1c420:	8894      	ldrh	r4, [r2, #4]
   1c422:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1c426:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1c42a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1c42e:	d1ec      	bne.n	1c40a <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1c430:	4b03      	ldr	r3, [pc, #12]	; (1c440 <radio_filter_configure+0x3c>)
}
   1c432:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1c434:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1c438:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1c43c:	4770      	bx	lr
   1c43e:	bf00      	nop
   1c440:	40001000 	.word	0x40001000

0001c444 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1c444:	4a03      	ldr	r2, [pc, #12]	; (1c454 <radio_filter_disable+0x10>)
   1c446:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1c44a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1c44e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1c452:	4770      	bx	lr
   1c454:	40001000 	.word	0x40001000

0001c458 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1c458:	4b02      	ldr	r3, [pc, #8]	; (1c464 <radio_filter_status_reset+0xc>)
   1c45a:	2200      	movs	r2, #0
   1c45c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1c460:	4770      	bx	lr
   1c462:	bf00      	nop
   1c464:	40001000 	.word	0x40001000

0001c468 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1c468:	4b03      	ldr	r3, [pc, #12]	; (1c478 <radio_filter_has_match+0x10>)
   1c46a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1c46e:	3800      	subs	r0, #0
   1c470:	bf18      	it	ne
   1c472:	2001      	movne	r0, #1
   1c474:	4770      	bx	lr
   1c476:	bf00      	nop
   1c478:	40001000 	.word	0x40001000

0001c47c <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1c47c:	4b01      	ldr	r3, [pc, #4]	; (1c484 <radio_filter_match_get+0x8>)
   1c47e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1c482:	4770      	bx	lr
   1c484:	40001000 	.word	0x40001000

0001c488 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   1c488:	4904      	ldr	r1, [pc, #16]	; (1c49c <radio_tmr_status_reset+0x14>)
   1c48a:	4b05      	ldr	r3, [pc, #20]	; (1c4a0 <radio_tmr_status_reset+0x18>)
   1c48c:	4a05      	ldr	r2, [pc, #20]	; (1c4a4 <radio_tmr_status_reset+0x1c>)
   1c48e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1c492:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1c496:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1c49a:	4770      	bx	lr
   1c49c:	4000b000 	.word	0x4000b000
   1c4a0:	4001f000 	.word	0x4001f000
   1c4a4:	0e7000c0 	.word	0x0e7000c0

0001c4a8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1c4a8:	4b03      	ldr	r3, [pc, #12]	; (1c4b8 <radio_tmr_tifs_set+0x10>)
   1c4aa:	4a04      	ldr	r2, [pc, #16]	; (1c4bc <radio_tmr_tifs_set+0x14>)
   1c4ac:	781b      	ldrb	r3, [r3, #0]
   1c4ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1c4b2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c4b6:	4770      	bx	lr
   1c4b8:	2000f2bd 	.word	0x2000f2bd
   1c4bc:	40009000 	.word	0x40009000

0001c4c0 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1c4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1c4c4:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1c4c8:	4d31      	ldr	r5, [pc, #196]	; (1c590 <radio_tmr_start+0xd0>)
   1c4ca:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1c4ce:	42ab      	cmp	r3, r5
{
   1c4d0:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1c4d2:	d906      	bls.n	1c4e2 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   1c4d4:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1c4d8:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1c4dc:	3901      	subs	r1, #1
		remainder += 30517578UL;
   1c4de:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c4e2:	4b2c      	ldr	r3, [pc, #176]	; (1c594 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   1c4e4:	482c      	ldr	r0, [pc, #176]	; (1c598 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1c4e6:	4d2d      	ldr	r5, [pc, #180]	; (1c59c <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c4e8:	4e2d      	ldr	r6, [pc, #180]	; (1c5a0 <radio_tmr_start+0xe0>)
   1c4ea:	2701      	movs	r7, #1
   1c4ec:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1c4ee:	2700      	movs	r7, #0
   1c4f0:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   1c4f4:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1c4f8:	2704      	movs	r7, #4
   1c4fa:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1c4fe:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1c500:	2702      	movs	r7, #2
   1c502:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1c506:	4a27      	ldr	r2, [pc, #156]	; (1c5a4 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   1c508:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1c50c:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1c510:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1c514:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1c518:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c51a:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c51e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1c522:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1c526:	bb64      	cbnz	r4, 1c582 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   1c528:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1c52c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1c530:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1c534:	4b1b      	ldr	r3, [pc, #108]	; (1c5a4 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c536:	4a1c      	ldr	r2, [pc, #112]	; (1c5a8 <radio_tmr_start+0xe8>)
   1c538:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1c53c:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1c53e:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c540:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1c5ac <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c544:	f8df e068 	ldr.w	lr, [pc, #104]	; 1c5b0 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c548:	f8df c068 	ldr.w	ip, [pc, #104]	; 1c5b4 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c54c:	4f1a      	ldr	r7, [pc, #104]	; (1c5b8 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c54e:	4e1b      	ldr	r6, [pc, #108]	; (1c5bc <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c550:	4d1b      	ldr	r5, [pc, #108]	; (1c5c0 <radio_tmr_start+0x100>)
   1c552:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1c554:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   1c558:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1c55c:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1c560:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   1c564:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c566:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c56a:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c56e:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c572:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c576:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c57a:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1c57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   1c582:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1c586:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1c58a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   1c58e:	e7d1      	b.n	1c534 <radio_tmr_start+0x74>
   1c590:	7ff0bdbf 	.word	0x7ff0bdbf
   1c594:	40008000 	.word	0x40008000
   1c598:	431bde83 	.word	0x431bde83
   1c59c:	4000b000 	.word	0x4000b000
   1c5a0:	4000b148 	.word	0x4000b148
   1c5a4:	4001f000 	.word	0x4001f000
   1c5a8:	40009000 	.word	0x40009000
   1c5ac:	4000110c 	.word	0x4000110c
   1c5b0:	4000900c 	.word	0x4000900c
   1c5b4:	40009140 	.word	0x40009140
   1c5b8:	4001f004 	.word	0x4001f004
   1c5bc:	40009144 	.word	0x40009144
   1c5c0:	4001f00c 	.word	0x4001f00c

0001c5c4 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1c5c4:	4b01      	ldr	r3, [pc, #4]	; (1c5cc <radio_tmr_start_get+0x8>)
   1c5c6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1c5ca:	4770      	bx	lr
   1c5cc:	4000b000 	.word	0x4000b000

0001c5d0 <radio_tmr_stop>:
   1c5d0:	4903      	ldr	r1, [pc, #12]	; (1c5e0 <radio_tmr_stop+0x10>)
   1c5d2:	4a04      	ldr	r2, [pc, #16]	; (1c5e4 <radio_tmr_stop+0x14>)
   1c5d4:	2301      	movs	r3, #1
   1c5d6:	604b      	str	r3, [r1, #4]
   1c5d8:	610b      	str	r3, [r1, #16]
   1c5da:	6053      	str	r3, [r2, #4]
   1c5dc:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1c5de:	4770      	bx	lr
   1c5e0:	40008000 	.word	0x40008000
   1c5e4:	40009000 	.word	0x40009000

0001c5e8 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1c5e8:	4904      	ldr	r1, [pc, #16]	; (1c5fc <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1c5ea:	4b05      	ldr	r3, [pc, #20]	; (1c600 <radio_tmr_hcto_configure+0x18>)
   1c5ec:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1c5f0:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1c5f4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1c5f8:	4770      	bx	lr
   1c5fa:	bf00      	nop
   1c5fc:	40008000 	.word	0x40008000
   1c600:	4001f000 	.word	0x4001f000

0001c604 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c604:	4b05      	ldr	r3, [pc, #20]	; (1c61c <radio_tmr_aa_capture+0x18>)
   1c606:	4806      	ldr	r0, [pc, #24]	; (1c620 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c608:	4906      	ldr	r1, [pc, #24]	; (1c624 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1c60a:	4a07      	ldr	r2, [pc, #28]	; (1c628 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c60c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c610:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1c614:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1c618:	4770      	bx	lr
   1c61a:	bf00      	nop
   1c61c:	4001f000 	.word	0x4001f000
   1c620:	40001100 	.word	0x40001100
   1c624:	40008040 	.word	0x40008040
   1c628:	04000080 	.word	0x04000080

0001c62c <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1c62c:	4b01      	ldr	r3, [pc, #4]	; (1c634 <radio_tmr_aa_get+0x8>)
   1c62e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1c632:	4770      	bx	lr
   1c634:	40008000 	.word	0x40008000

0001c638 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1c638:	4b01      	ldr	r3, [pc, #4]	; (1c640 <radio_tmr_aa_save+0x8>)
   1c63a:	6018      	str	r0, [r3, #0]
}
   1c63c:	4770      	bx	lr
   1c63e:	bf00      	nop
   1c640:	2000ead4 	.word	0x2000ead4

0001c644 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1c644:	4b01      	ldr	r3, [pc, #4]	; (1c64c <radio_tmr_aa_restore+0x8>)
}
   1c646:	6818      	ldr	r0, [r3, #0]
   1c648:	4770      	bx	lr
   1c64a:	bf00      	nop
   1c64c:	2000ead4 	.word	0x2000ead4

0001c650 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1c650:	4b01      	ldr	r3, [pc, #4]	; (1c658 <radio_tmr_ready_get+0x8>)
   1c652:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1c656:	4770      	bx	lr
   1c658:	40008000 	.word	0x40008000

0001c65c <radio_tmr_end_capture>:
   1c65c:	4b02      	ldr	r3, [pc, #8]	; (1c668 <radio_tmr_end_capture+0xc>)
   1c65e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1c662:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1c666:	4770      	bx	lr
   1c668:	4001f000 	.word	0x4001f000

0001c66c <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1c66c:	4b01      	ldr	r3, [pc, #4]	; (1c674 <radio_tmr_end_get+0x8>)
   1c66e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1c672:	4770      	bx	lr
   1c674:	40008000 	.word	0x40008000

0001c678 <radio_tmr_tifs_base_get>:
   1c678:	4b01      	ldr	r3, [pc, #4]	; (1c680 <radio_tmr_tifs_base_get+0x8>)
   1c67a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1c67e:	4770      	bx	lr
   1c680:	40008000 	.word	0x40008000

0001c684 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c684:	4b17      	ldr	r3, [pc, #92]	; (1c6e4 <radio_ccm_rx_pkt_set+0x60>)
{
   1c686:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c688:	2400      	movs	r4, #0
{
   1c68a:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c68c:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1c68e:	4816      	ldr	r0, [pc, #88]	; (1c6e8 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c690:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c694:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1c698:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1c69c:	4e13      	ldr	r6, [pc, #76]	; (1c6ec <radio_ccm_rx_pkt_set+0x68>)
   1c69e:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1c6a0:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1c6a4:	4812      	ldr	r0, [pc, #72]	; (1c6f0 <radio_ccm_rx_pkt_set+0x6c>)
   1c6a6:	2902      	cmp	r1, #2
   1c6a8:	bf08      	it	eq
   1c6aa:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   1c6ac:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1c6b0:	4810      	ldr	r0, [pc, #64]	; (1c6f4 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1c6b2:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c6b6:	4910      	ldr	r1, [pc, #64]	; (1c6f8 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1c6b8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1c6bc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1c6c0:	4a0e      	ldr	r2, [pc, #56]	; (1c6fc <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c6c2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1c6c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   1c6ca:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1c6ce:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1c6d2:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1c6d6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c6da:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1c6dc:	bc70      	pop	{r4, r5, r6}
   1c6de:	601a      	str	r2, [r3, #0]
   1c6e0:	4770      	bx	lr
   1c6e2:	bf00      	nop
   1c6e4:	4000f000 	.word	0x4000f000
   1c6e8:	40001000 	.word	0x40001000
   1c6ec:	01010001 	.word	0x01010001
   1c6f0:	01000001 	.word	0x01000001
   1c6f4:	2000e9c8 	.word	0x2000e9c8
   1c6f8:	2000e8b8 	.word	0x2000e8b8
   1c6fc:	4001f000 	.word	0x4001f000

0001c700 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c700:	4b0f      	ldr	r3, [pc, #60]	; (1c740 <radio_ccm_tx_pkt_set+0x40>)
{
   1c702:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c704:	2200      	movs	r2, #0
{
   1c706:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c708:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1c70a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1c70e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1c712:	480c      	ldr	r0, [pc, #48]	; (1c744 <radio_ccm_tx_pkt_set+0x44>)
   1c714:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1c718:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1c71c:	480a      	ldr	r0, [pc, #40]	; (1c748 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1c71e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c722:	4c0a      	ldr	r4, [pc, #40]	; (1c74c <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1c724:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1c728:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1c72a:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1c72e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1c732:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1c734:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1c738:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1c73c:	6019      	str	r1, [r3, #0]
}
   1c73e:	4770      	bx	lr
   1c740:	4000f000 	.word	0x4000f000
   1c744:	01010000 	.word	0x01010000
   1c748:	2000e9c8 	.word	0x2000e9c8
   1c74c:	2000e8b8 	.word	0x2000e8b8

0001c750 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c750:	4a0e      	ldr	r2, [pc, #56]	; (1c78c <radio_ccm_is_done+0x3c>)
   1c752:	2302      	movs	r3, #2
   1c754:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1c758:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1c75c:	b933      	cbnz	r3, 1c76c <radio_ccm_is_done+0x1c>
		__WFE();
   1c75e:	bf20      	wfe
		__SEV();
   1c760:	bf40      	sev
		__WFE();
   1c762:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1c764:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1c768:	2b00      	cmp	r3, #0
   1c76a:	d0f8      	beq.n	1c75e <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1c76c:	4b07      	ldr	r3, [pc, #28]	; (1c78c <radio_ccm_is_done+0x3c>)
   1c76e:	4a08      	ldr	r2, [pc, #32]	; (1c790 <radio_ccm_is_done+0x40>)
   1c770:	2002      	movs	r0, #2
   1c772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1c776:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1c77a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1c77e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1c782:	fab0 f080 	clz	r0, r0
   1c786:	0940      	lsrs	r0, r0, #5
   1c788:	4770      	bx	lr
   1c78a:	bf00      	nop
   1c78c:	4000f000 	.word	0x4000f000
   1c790:	e000e100 	.word	0xe000e100

0001c794 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1c794:	4b03      	ldr	r3, [pc, #12]	; (1c7a4 <radio_ccm_mic_is_valid+0x10>)
   1c796:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1c79a:	3800      	subs	r0, #0
   1c79c:	bf18      	it	ne
   1c79e:	2001      	movne	r0, #1
   1c7a0:	4770      	bx	lr
   1c7a2:	bf00      	nop
   1c7a4:	4000f000 	.word	0x4000f000

0001c7a8 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1c7a8:	4a15      	ldr	r2, [pc, #84]	; (1c800 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1c7aa:	4b16      	ldr	r3, [pc, #88]	; (1c804 <radio_ar_configure+0x5c>)
{
   1c7ac:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1c7ae:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1c7b2:	4e15      	ldr	r6, [pc, #84]	; (1c808 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1c7b4:	2703      	movs	r7, #3
   1c7b6:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   1c7ba:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   1c7bc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1c7c0:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1c7c2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   1c7c6:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   1c7c8:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1c7cc:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1c7d0:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1c7d4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1c7d8:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1c7dc:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1c7e0:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1c7e4:	4909      	ldr	r1, [pc, #36]	; (1c80c <radio_ar_configure+0x64>)
   1c7e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c7ea:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1c7ee:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1c7f2:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1c7f6:	bcf0      	pop	{r4, r5, r6, r7}
   1c7f8:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1c7fc:	4770      	bx	lr
   1c7fe:	bf00      	nop
   1c800:	40001000 	.word	0x40001000
   1c804:	4000f000 	.word	0x4000f000
   1c808:	2000e8b4 	.word	0x2000e8b4
   1c80c:	4001f000 	.word	0x4001f000

0001c810 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1c810:	4b01      	ldr	r3, [pc, #4]	; (1c818 <radio_ar_match_get+0x8>)
   1c812:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1c816:	4770      	bx	lr
   1c818:	4000f000 	.word	0x4000f000

0001c81c <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1c81c:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1c81e:	4807      	ldr	r0, [pc, #28]	; (1c83c <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1c820:	4c07      	ldr	r4, [pc, #28]	; (1c840 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1c822:	4a08      	ldr	r2, [pc, #32]	; (1c844 <radio_ar_status_reset+0x28>)
   1c824:	2300      	movs	r3, #0
   1c826:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1c82a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1c82e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1c832:	bc10      	pop	{r4}
   1c834:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1c838:	4770      	bx	lr
   1c83a:	bf00      	nop
   1c83c:	4000f000 	.word	0x4000f000
   1c840:	40001000 	.word	0x40001000
   1c844:	4001f000 	.word	0x4001f000

0001c848 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1c848:	4b08      	ldr	r3, [pc, #32]	; (1c86c <radio_ar_has_match+0x24>)
   1c84a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1c84e:	b160      	cbz	r0, 1c86a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1c850:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1c854:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1c858:	b138      	cbz	r0, 1c86a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1c85a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1c85e:	b120      	cbz	r0, 1c86a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1c860:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1c864:	fab0 f080 	clz	r0, r0
   1c868:	0940      	lsrs	r0, r0, #5
}
   1c86a:	4770      	bx	lr
   1c86c:	40001000 	.word	0x40001000

0001c870 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1c870:	2902      	cmp	r1, #2
{
   1c872:	b510      	push	{r4, lr}
   1c874:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1c876:	d00b      	beq.n	1c890 <mayfly_enable_cb+0x20>
   1c878:	4a0a      	ldr	r2, [pc, #40]	; (1c8a4 <mayfly_enable_cb+0x34>)
   1c87a:	490b      	ldr	r1, [pc, #44]	; (1c8a8 <mayfly_enable_cb+0x38>)
   1c87c:	480b      	ldr	r0, [pc, #44]	; (1c8ac <mayfly_enable_cb+0x3c>)
   1c87e:	231e      	movs	r3, #30
   1c880:	f004 fd08 	bl	21294 <printk>
   1c884:	4040      	eors	r0, r0
   1c886:	f380 8811 	msr	BASEPRI, r0
   1c88a:	f04f 0003 	mov.w	r0, #3
   1c88e:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1c890:	200b      	movs	r0, #11
	if (enable) {
   1c892:	b11c      	cbz	r4, 1c89c <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1c894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1c898:	f7ea bb10 	b.w	6ebc <arch_irq_enable>
}
   1c89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1c8a0:	f7ea bb1c 	b.w	6edc <arch_irq_disable>
   1c8a4:	0002877c 	.word	0x0002877c
   1c8a8:	000287cc 	.word	0x000287cc
   1c8ac:	00027ab4 	.word	0x00027ab4

0001c8b0 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1c8b0:	b129      	cbz	r1, 1c8be <mayfly_is_enabled+0xe>
   1c8b2:	3901      	subs	r1, #1
   1c8b4:	2901      	cmp	r1, #1
   1c8b6:	d805      	bhi.n	1c8c4 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1c8b8:	200b      	movs	r0, #11
   1c8ba:	f7ea bb23 	b.w	6f04 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1c8be:	2018      	movs	r0, #24
   1c8c0:	f7ea bb20 	b.w	6f04 <arch_irq_is_enabled>
{
   1c8c4:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1c8c6:	4a07      	ldr	r2, [pc, #28]	; (1c8e4 <mayfly_is_enabled+0x34>)
   1c8c8:	4907      	ldr	r1, [pc, #28]	; (1c8e8 <mayfly_is_enabled+0x38>)
   1c8ca:	4808      	ldr	r0, [pc, #32]	; (1c8ec <mayfly_is_enabled+0x3c>)
   1c8cc:	2336      	movs	r3, #54	; 0x36
   1c8ce:	f004 fce1 	bl	21294 <printk>
   1c8d2:	4040      	eors	r0, r0
   1c8d4:	f380 8811 	msr	BASEPRI, r0
   1c8d8:	f04f 0003 	mov.w	r0, #3
   1c8dc:	df02      	svc	2
		break;
	}

	return 0;
}
   1c8de:	2000      	movs	r0, #0
   1c8e0:	bd08      	pop	{r3, pc}
   1c8e2:	bf00      	nop
   1c8e4:	0002877c 	.word	0x0002877c
   1c8e8:	00027b4c 	.word	0x00027b4c
   1c8ec:	00027ab4 	.word	0x00027ab4

0001c8f0 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1c8f0:	4288      	cmp	r0, r1
   1c8f2:	d00b      	beq.n	1c90c <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1c8f4:	2801      	cmp	r0, #1
   1c8f6:	d003      	beq.n	1c900 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1c8f8:	2802      	cmp	r0, #2
   1c8fa:	d009      	beq.n	1c910 <mayfly_prio_is_equal+0x20>
   1c8fc:	2000      	movs	r0, #0
#endif
	       0;
}
   1c8fe:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1c900:	f1a1 0002 	sub.w	r0, r1, #2
   1c904:	fab0 f080 	clz	r0, r0
   1c908:	0940      	lsrs	r0, r0, #5
   1c90a:	4770      	bx	lr
   1c90c:	2001      	movs	r0, #1
   1c90e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1c910:	f1a1 0001 	sub.w	r0, r1, #1
   1c914:	fab0 f080 	clz	r0, r0
   1c918:	0940      	lsrs	r0, r0, #5
   1c91a:	4770      	bx	lr

0001c91c <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1c91c:	2901      	cmp	r1, #1
{
   1c91e:	b508      	push	{r3, lr}
	switch (callee_id) {
   1c920:	d00f      	beq.n	1c942 <mayfly_pend+0x26>
   1c922:	2902      	cmp	r1, #2
   1c924:	d00d      	beq.n	1c942 <mayfly_pend+0x26>
   1c926:	b191      	cbz	r1, 1c94e <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1c928:	4a0c      	ldr	r2, [pc, #48]	; (1c95c <mayfly_pend+0x40>)
   1c92a:	490d      	ldr	r1, [pc, #52]	; (1c960 <mayfly_pend+0x44>)
   1c92c:	480d      	ldr	r0, [pc, #52]	; (1c964 <mayfly_pend+0x48>)
   1c92e:	2367      	movs	r3, #103	; 0x67
   1c930:	f004 fcb0 	bl	21294 <printk>
   1c934:	4040      	eors	r0, r0
   1c936:	f380 8811 	msr	BASEPRI, r0
   1c93a:	f04f 0003 	mov.w	r0, #3
   1c93e:	df02      	svc	2
		break;
	}
}
   1c940:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c942:	4b09      	ldr	r3, [pc, #36]	; (1c968 <mayfly_pend+0x4c>)
   1c944:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1c948:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1c94c:	bd08      	pop	{r3, pc}
   1c94e:	4b06      	ldr	r3, [pc, #24]	; (1c968 <mayfly_pend+0x4c>)
   1c950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1c954:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1c958:	bd08      	pop	{r3, pc}
   1c95a:	bf00      	nop
   1c95c:	0002877c 	.word	0x0002877c
   1c960:	00027b4c 	.word	0x00027b4c
   1c964:	00027ab4 	.word	0x00027ab4
   1c968:	e000e100 	.word	0xe000e100

0001c96c <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1c96c:	2803      	cmp	r0, #3
{
   1c96e:	b510      	push	{r4, lr}
   1c970:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1c972:	d804      	bhi.n	1c97e <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1c974:	4b11      	ldr	r3, [pc, #68]	; (1c9bc <hal_ticker_instance0_caller_id_get+0x50>)
   1c976:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1c978:	b18c      	cbz	r4, 1c99e <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1c97a:	4620      	mov	r0, r4
   1c97c:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1c97e:	4a10      	ldr	r2, [pc, #64]	; (1c9c0 <hal_ticker_instance0_caller_id_get+0x54>)
   1c980:	4910      	ldr	r1, [pc, #64]	; (1c9c4 <hal_ticker_instance0_caller_id_get+0x58>)
   1c982:	4811      	ldr	r0, [pc, #68]	; (1c9c8 <hal_ticker_instance0_caller_id_get+0x5c>)
   1c984:	232b      	movs	r3, #43	; 0x2b
   1c986:	f004 fc85 	bl	21294 <printk>
   1c98a:	4040      	eors	r0, r0
   1c98c:	f380 8811 	msr	BASEPRI, r0
   1c990:	f04f 0003 	mov.w	r0, #3
   1c994:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1c996:	4b09      	ldr	r3, [pc, #36]	; (1c9bc <hal_ticker_instance0_caller_id_get+0x50>)
   1c998:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1c99a:	2c00      	cmp	r4, #0
   1c99c:	d1ed      	bne.n	1c97a <hal_ticker_instance0_caller_id_get+0xe>
   1c99e:	4a08      	ldr	r2, [pc, #32]	; (1c9c0 <hal_ticker_instance0_caller_id_get+0x54>)
   1c9a0:	490a      	ldr	r1, [pc, #40]	; (1c9cc <hal_ticker_instance0_caller_id_get+0x60>)
   1c9a2:	4809      	ldr	r0, [pc, #36]	; (1c9c8 <hal_ticker_instance0_caller_id_get+0x5c>)
   1c9a4:	232e      	movs	r3, #46	; 0x2e
   1c9a6:	f004 fc75 	bl	21294 <printk>
   1c9aa:	4040      	eors	r0, r0
   1c9ac:	f380 8811 	msr	BASEPRI, r0
   1c9b0:	f04f 0003 	mov.w	r0, #3
   1c9b4:	df02      	svc	2
}
   1c9b6:	4620      	mov	r0, r4
   1c9b8:	bd10      	pop	{r4, pc}
   1c9ba:	bf00      	nop
   1c9bc:	00028884 	.word	0x00028884
   1c9c0:	000287f0 	.word	0x000287f0
   1c9c4:	00028840 	.word	0x00028840
   1c9c8:	00027ab4 	.word	0x00027ab4
   1c9cc:	00028860 	.word	0x00028860

0001c9d0 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1c9d0:	3801      	subs	r0, #1
{
   1c9d2:	b510      	push	{r4, lr}
   1c9d4:	461c      	mov	r4, r3
   1c9d6:	2804      	cmp	r0, #4
   1c9d8:	f200 8082 	bhi.w	1cae0 <hal_ticker_instance0_sched+0x110>
   1c9dc:	e8df f000 	tbb	[pc, r0]
   1c9e0:	3f302112 	.word	0x3f302112
   1c9e4:	03          	.byte	0x03
   1c9e5:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1c9e6:	2904      	cmp	r1, #4
   1c9e8:	d04a      	beq.n	1ca80 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1c9ea:	4a44      	ldr	r2, [pc, #272]	; (1cafc <hal_ticker_instance0_sched+0x12c>)
   1c9ec:	4944      	ldr	r1, [pc, #272]	; (1cb00 <hal_ticker_instance0_sched+0x130>)
   1c9ee:	4845      	ldr	r0, [pc, #276]	; (1cb04 <hal_ticker_instance0_sched+0x134>)
   1c9f0:	23ba      	movs	r3, #186	; 0xba
   1c9f2:	f004 fc4f 	bl	21294 <printk>
   1c9f6:	4040      	eors	r0, r0
   1c9f8:	f380 8811 	msr	BASEPRI, r0
   1c9fc:	f04f 0003 	mov.w	r0, #3
   1ca00:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1ca02:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1ca04:	2904      	cmp	r1, #4
   1ca06:	d043      	beq.n	1ca90 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   1ca08:	4a3c      	ldr	r2, [pc, #240]	; (1cafc <hal_ticker_instance0_sched+0x12c>)
   1ca0a:	493d      	ldr	r1, [pc, #244]	; (1cb00 <hal_ticker_instance0_sched+0x130>)
   1ca0c:	483d      	ldr	r0, [pc, #244]	; (1cb04 <hal_ticker_instance0_sched+0x134>)
   1ca0e:	234e      	movs	r3, #78	; 0x4e
   1ca10:	f004 fc40 	bl	21294 <printk>
   1ca14:	4040      	eors	r0, r0
   1ca16:	f380 8811 	msr	BASEPRI, r0
   1ca1a:	f04f 0003 	mov.w	r0, #3
   1ca1e:	df02      	svc	2
}
   1ca20:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1ca22:	2903      	cmp	r1, #3
   1ca24:	d03c      	beq.n	1caa0 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   1ca26:	4a35      	ldr	r2, [pc, #212]	; (1cafc <hal_ticker_instance0_sched+0x12c>)
   1ca28:	4935      	ldr	r1, [pc, #212]	; (1cb00 <hal_ticker_instance0_sched+0x130>)
   1ca2a:	4836      	ldr	r0, [pc, #216]	; (1cb04 <hal_ticker_instance0_sched+0x134>)
   1ca2c:	2365      	movs	r3, #101	; 0x65
   1ca2e:	f004 fc31 	bl	21294 <printk>
   1ca32:	4040      	eors	r0, r0
   1ca34:	f380 8811 	msr	BASEPRI, r0
   1ca38:	f04f 0003 	mov.w	r0, #3
   1ca3c:	df02      	svc	2
}
   1ca3e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1ca40:	2904      	cmp	r1, #4
   1ca42:	d035      	beq.n	1cab0 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1ca44:	4a2d      	ldr	r2, [pc, #180]	; (1cafc <hal_ticker_instance0_sched+0x12c>)
   1ca46:	492e      	ldr	r1, [pc, #184]	; (1cb00 <hal_ticker_instance0_sched+0x130>)
   1ca48:	482e      	ldr	r0, [pc, #184]	; (1cb04 <hal_ticker_instance0_sched+0x134>)
   1ca4a:	237c      	movs	r3, #124	; 0x7c
   1ca4c:	f004 fc22 	bl	21294 <printk>
   1ca50:	4040      	eors	r0, r0
   1ca52:	f380 8811 	msr	BASEPRI, r0
   1ca56:	f04f 0003 	mov.w	r0, #3
   1ca5a:	df02      	svc	2
}
   1ca5c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1ca5e:	2903      	cmp	r1, #3
   1ca60:	d036      	beq.n	1cad0 <hal_ticker_instance0_sched+0x100>
   1ca62:	2904      	cmp	r1, #4
   1ca64:	d02c      	beq.n	1cac0 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   1ca66:	4a25      	ldr	r2, [pc, #148]	; (1cafc <hal_ticker_instance0_sched+0x12c>)
   1ca68:	4925      	ldr	r1, [pc, #148]	; (1cb00 <hal_ticker_instance0_sched+0x130>)
   1ca6a:	4826      	ldr	r0, [pc, #152]	; (1cb04 <hal_ticker_instance0_sched+0x134>)
   1ca6c:	23a2      	movs	r3, #162	; 0xa2
   1ca6e:	f004 fc11 	bl	21294 <printk>
   1ca72:	4040      	eors	r0, r0
   1ca74:	f380 8811 	msr	BASEPRI, r0
   1ca78:	f04f 0003 	mov.w	r0, #3
   1ca7c:	df02      	svc	2
}
   1ca7e:	bd10      	pop	{r4, pc}
			m.param = instance;
   1ca80:	4b21      	ldr	r3, [pc, #132]	; (1cb08 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1ca82:	2102      	movs	r1, #2
			m.param = instance;
   1ca84:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1ca86:	2003      	movs	r0, #3
}
   1ca88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1ca8c:	f7f3 bad4 	b.w	10038 <mayfly_enqueue>
			m.param = instance;
   1ca90:	4b1e      	ldr	r3, [pc, #120]	; (1cb0c <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1ca92:	2102      	movs	r1, #2
			m.param = instance;
   1ca94:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1ca96:	2000      	movs	r0, #0
}
   1ca98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1ca9c:	f7f3 bacc 	b.w	10038 <mayfly_enqueue>
			m.param = instance;
   1caa0:	4b1b      	ldr	r3, [pc, #108]	; (1cb10 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1caa2:	2101      	movs	r1, #1
			m.param = instance;
   1caa4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1caa6:	4608      	mov	r0, r1
}
   1caa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1caac:	f7f3 bac4 	b.w	10038 <mayfly_enqueue>
			m.param = instance;
   1cab0:	4b18      	ldr	r3, [pc, #96]	; (1cb14 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1cab2:	2102      	movs	r1, #2
			m.param = instance;
   1cab4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1cab6:	2001      	movs	r0, #1
}
   1cab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1cabc:	f7f3 babc 	b.w	10038 <mayfly_enqueue>
			m.param = instance;
   1cac0:	4b15      	ldr	r3, [pc, #84]	; (1cb18 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cac2:	2102      	movs	r1, #2
			m.param = instance;
   1cac4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cac6:	4608      	mov	r0, r1
}
   1cac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cacc:	f7f3 bab4 	b.w	10038 <mayfly_enqueue>
			m.param = instance;
   1cad0:	4b12      	ldr	r3, [pc, #72]	; (1cb1c <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cad2:	2101      	movs	r1, #1
			m.param = instance;
   1cad4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cad6:	2002      	movs	r0, #2
}
   1cad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1cadc:	f7f3 baac 	b.w	10038 <mayfly_enqueue>
		LL_ASSERT(0);
   1cae0:	4a06      	ldr	r2, [pc, #24]	; (1cafc <hal_ticker_instance0_sched+0x12c>)
   1cae2:	4907      	ldr	r1, [pc, #28]	; (1cb00 <hal_ticker_instance0_sched+0x130>)
   1cae4:	4807      	ldr	r0, [pc, #28]	; (1cb04 <hal_ticker_instance0_sched+0x134>)
   1cae6:	23c0      	movs	r3, #192	; 0xc0
   1cae8:	f004 fbd4 	bl	21294 <printk>
   1caec:	4040      	eors	r0, r0
   1caee:	f380 8811 	msr	BASEPRI, r0
   1caf2:	f04f 0003 	mov.w	r0, #3
   1caf6:	df02      	svc	2
}
   1caf8:	bd10      	pop	{r4, pc}
   1cafa:	bf00      	nop
   1cafc:	000287f0 	.word	0x000287f0
   1cb00:	00027b4c 	.word	0x00027b4c
   1cb04:	00027ab4 	.word	0x00027ab4
   1cb08:	20000648 	.word	0x20000648
   1cb0c:	20000638 	.word	0x20000638
   1cb10:	20000628 	.word	0x20000628
   1cb14:	20000678 	.word	0x20000678
   1cb18:	20000658 	.word	0x20000658
   1cb1c:	20000668 	.word	0x20000668

0001cb20 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1cb20:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1cb22:	2000      	movs	r0, #0
   1cb24:	f7ff b9f2 	b.w	1bf0c <cntr_cmp_set>

0001cb28 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   1cb28:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1cb2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1cb2e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1cb32:	3201      	adds	r2, #1
   1cb34:	d008      	beq.n	1cb48 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1cb36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1cb3a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1cb3e:	f013 0301 	ands.w	r3, r3, #1
   1cb42:	d10a      	bne.n	1cb5a <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   1cb44:	4618      	mov	r0, r3
}
   1cb46:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1cb48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1cb4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1cb50:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1cb52:	4293      	cmp	r3, r2
   1cb54:	d1ef      	bne.n	1cb36 <hci_vendor_read_static_addr+0xe>
	return 0;
   1cb56:	2000      	movs	r0, #0
}
   1cb58:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1cb5a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   1cb5e:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1cb60:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1cb62:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1cb66:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1cb6a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1cb6c:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1cb6e:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1cb72:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1cb76:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1cb78:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1cb7c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1cb80:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1cb82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1cb86:	3301      	adds	r3, #1
   1cb88:	d03b      	beq.n	1cc02 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1cb8a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1cb8e:	3301      	adds	r3, #1
   1cb90:	d037      	beq.n	1cc02 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1cb92:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1cb96:	3301      	adds	r3, #1
   1cb98:	d033      	beq.n	1cc02 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1cb9a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1cb9e:	3301      	adds	r3, #1
   1cba0:	d02f      	beq.n	1cc02 <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1cba2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1cba6:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1cba8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1cbaa:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1cbae:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1cbb2:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1cbb4:	f880 c009 	strb.w	ip, [r0, #9]
   1cbb8:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1cbba:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1cbbe:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1cbc0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1cbc2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1cbc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1cbca:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1cbcc:	f880 c00d 	strb.w	ip, [r0, #13]
   1cbd0:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1cbd2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1cbd6:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1cbd8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1cbda:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1cbde:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1cbe2:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1cbe4:	73c3      	strb	r3, [r0, #15]
   1cbe6:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1cbea:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1cbee:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1cbf0:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1cbf2:	0a11      	lsrs	r1, r2, #8
   1cbf4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1cbf8:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   1cbfa:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1cbfc:	7541      	strb	r1, [r0, #21]
		return 1;
   1cbfe:	2001      	movs	r0, #1
}
   1cc00:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1cc02:	2210      	movs	r2, #16
   1cc04:	2100      	movs	r1, #0
   1cc06:	3006      	adds	r0, #6
   1cc08:	f006 ffe2 	bl	23bd0 <memset>
		return 1;
   1cc0c:	2001      	movs	r0, #1
}
   1cc0e:	bd08      	pop	{r3, pc}

0001cc10 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1cc10:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1cc12:	2210      	movs	r2, #16
{
   1cc14:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1cc16:	2100      	movs	r1, #0
   1cc18:	f006 ffda 	bl	23bd0 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1cc1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1cc20:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1cc24:	3201      	adds	r2, #1
   1cc26:	d034      	beq.n	1cc92 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1cc28:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1cc2c:	3201      	adds	r2, #1
   1cc2e:	d030      	beq.n	1cc92 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1cc30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1cc34:	3201      	adds	r2, #1
   1cc36:	d02c      	beq.n	1cc92 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1cc38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1cc3c:	3201      	adds	r2, #1
   1cc3e:	d028      	beq.n	1cc92 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1cc40:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1cc44:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1cc46:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1cc48:	0a08      	lsrs	r0, r1, #8
   1cc4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1cc4e:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1cc50:	70e0      	strb	r0, [r4, #3]
   1cc52:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1cc54:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1cc58:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1cc5a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1cc5c:	0a08      	lsrs	r0, r1, #8
   1cc5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1cc62:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1cc64:	71e0      	strb	r0, [r4, #7]
   1cc66:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1cc68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1cc6c:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1cc6e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1cc70:	0a08      	lsrs	r0, r1, #8
   1cc72:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1cc76:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   1cc78:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1cc7a:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1cc7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1cc80:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1cc82:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1cc84:	0a11      	lsrs	r1, r2, #8
   1cc86:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1cc8a:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   1cc8c:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1cc8e:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1cc90:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1cc92:	4620      	mov	r0, r4
   1cc94:	2210      	movs	r2, #16
}
   1cc96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1cc9a:	2100      	movs	r1, #0
   1cc9c:	f006 bf98 	b.w	23bd0 <memset>

0001cca0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1cca0:	4b02      	ldr	r3, [pc, #8]	; (1ccac <net_buf_pool_get+0xc>)
   1cca2:	2228      	movs	r2, #40	; 0x28
   1cca4:	fb02 3000 	mla	r0, r2, r0, r3
   1cca8:	4770      	bx	lr
   1ccaa:	bf00      	nop
   1ccac:	2000a018 	.word	0x2000a018

0001ccb0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ccb0:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   1ccb2:	4b05      	ldr	r3, [pc, #20]	; (1ccc8 <net_buf_id+0x18>)
   1ccb4:	2128      	movs	r1, #40	; 0x28
   1ccb6:	fb01 3302 	mla	r3, r1, r2, r3
   1ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ccbc:	1ac0      	subs	r0, r0, r3
}
   1ccbe:	4b03      	ldr	r3, [pc, #12]	; (1cccc <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1ccc0:	10c0      	asrs	r0, r0, #3
}
   1ccc2:	4358      	muls	r0, r3
   1ccc4:	4770      	bx	lr
   1ccc6:	bf00      	nop
   1ccc8:	2000a018 	.word	0x2000a018
   1cccc:	aaaaaaab 	.word	0xaaaaaaab

0001ccd0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1ccd0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ccd2:	4b0a      	ldr	r3, [pc, #40]	; (1ccfc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ccd4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ccd6:	2428      	movs	r4, #40	; 0x28
   1ccd8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1ccdc:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ccde:	6a1b      	ldr	r3, [r3, #32]
   1cce0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1cce2:	6823      	ldr	r3, [r4, #0]
   1cce4:	429a      	cmp	r2, r3
   1cce6:	bf94      	ite	ls
   1cce8:	600a      	strls	r2, [r1, #0]
   1ccea:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1ccec:	f7ff ffe0 	bl	1ccb0 <net_buf_id>
   1ccf0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1ccf4:	fb02 3000 	mla	r0, r2, r0, r3
   1ccf8:	bd10      	pop	{r4, pc}
   1ccfa:	bf00      	nop
   1ccfc:	2000a018 	.word	0x2000a018

0001cd00 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1cd00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd04:	4605      	mov	r5, r0
   1cd06:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1cd08:	4610      	mov	r0, r2
   1cd0a:	4619      	mov	r1, r3
{
   1cd0c:	4691      	mov	r9, r2
   1cd0e:	4698      	mov	r8, r3
   1cd10:	4617      	mov	r7, r2
   1cd12:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1cd14:	f009 fe3b 	bl	2698e <z_timeout_end_calc>
   1cd18:	4682      	mov	sl, r0
   1cd1a:	468b      	mov	fp, r1
	__asm__ volatile(
   1cd1c:	f04f 0320 	mov.w	r3, #32
   1cd20:	f3ef 8111 	mrs	r1, BASEPRI
   1cd24:	f383 8811 	msr	BASEPRI, r3
   1cd28:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1cd2c:	8b6b      	ldrh	r3, [r5, #26]
   1cd2e:	2b00      	cmp	r3, #0
   1cd30:	d055      	beq.n	1cdde <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1cd32:	8b2a      	ldrh	r2, [r5, #24]
   1cd34:	429a      	cmp	r2, r3
   1cd36:	d93e      	bls.n	1cdb6 <net_buf_alloc_len+0xb6>
   1cd38:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1cd3a:	2200      	movs	r2, #0
   1cd3c:	2300      	movs	r3, #0
   1cd3e:	4628      	mov	r0, r5
   1cd40:	f002 fb8c 	bl	1f45c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1cd44:	9900      	ldr	r1, [sp, #0]
   1cd46:	4604      	mov	r4, r0
   1cd48:	2800      	cmp	r0, #0
   1cd4a:	d034      	beq.n	1cdb6 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1cd4c:	f381 8811 	msr	BASEPRI, r1
   1cd50:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1cd54:	9b01      	ldr	r3, [sp, #4]
   1cd56:	2b00      	cmp	r3, #0
   1cd58:	d051      	beq.n	1cdfe <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1cd5a:	ea58 0309 	orrs.w	r3, r8, r9
   1cd5e:	d00f      	beq.n	1cd80 <net_buf_alloc_len+0x80>
   1cd60:	f1b8 3fff 	cmp.w	r8, #4294967295
   1cd64:	bf08      	it	eq
   1cd66:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1cd6a:	d009      	beq.n	1cd80 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1cd6c:	f003 fa1a 	bl	201a4 <z_tick_get>
   1cd70:	ebba 0700 	subs.w	r7, sl, r0
   1cd74:	eb6b 0601 	sbc.w	r6, fp, r1
   1cd78:	2e00      	cmp	r6, #0
   1cd7a:	bfbc      	itt	lt
   1cd7c:	2700      	movlt	r7, #0
   1cd7e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cd80:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1cd82:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1ce14 <net_buf_alloc_len+0x114>
   1cd86:	2228      	movs	r2, #40	; 0x28
   1cd88:	fb02 8303 	mla	r3, r2, r3, r8
   1cd8c:	a901      	add	r1, sp, #4
   1cd8e:	6a1b      	ldr	r3, [r3, #32]
   1cd90:	681b      	ldr	r3, [r3, #0]
   1cd92:	463a      	mov	r2, r7
   1cd94:	681d      	ldr	r5, [r3, #0]
   1cd96:	4620      	mov	r0, r4
   1cd98:	4633      	mov	r3, r6
   1cd9a:	47a8      	blx	r5
   1cd9c:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1cd9e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1cda0:	bb70      	cbnz	r0, 1ce00 <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   1cda2:	79a0      	ldrb	r0, [r4, #6]
   1cda4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1cda8:	4621      	mov	r1, r4
   1cdaa:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1cdae:	f009 fbde 	bl	2656e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1cdb2:	462c      	mov	r4, r5
}
   1cdb4:	e01f      	b.n	1cdf6 <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   1cdb6:	8b6b      	ldrh	r3, [r5, #26]
   1cdb8:	1e5a      	subs	r2, r3, #1
   1cdba:	836a      	strh	r2, [r5, #26]
   1cdbc:	f381 8811 	msr	BASEPRI, r1
   1cdc0:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1cdc4:	8b2c      	ldrh	r4, [r5, #24]
   1cdc6:	1ae3      	subs	r3, r4, r3
   1cdc8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1cdca:	2018      	movs	r0, #24
   1cdcc:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1cdd0:	4810      	ldr	r0, [pc, #64]	; (1ce14 <net_buf_alloc_len+0x114>)
   1cdd2:	4b11      	ldr	r3, [pc, #68]	; (1ce18 <net_buf_alloc_len+0x118>)
   1cdd4:	1a2d      	subs	r5, r5, r0
   1cdd6:	10ed      	asrs	r5, r5, #3
   1cdd8:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1cdda:	71a5      	strb	r5, [r4, #6]
		goto success;
   1cddc:	e7ba      	b.n	1cd54 <net_buf_alloc_len+0x54>
   1cdde:	f381 8811 	msr	BASEPRI, r1
   1cde2:	f3bf 8f6f 	isb	sy
   1cde6:	464a      	mov	r2, r9
   1cde8:	4643      	mov	r3, r8
   1cdea:	4628      	mov	r0, r5
   1cdec:	f002 fb36 	bl	1f45c <z_impl_k_queue_get>
	if (!buf) {
   1cdf0:	4604      	mov	r4, r0
   1cdf2:	2800      	cmp	r0, #0
   1cdf4:	d1ae      	bne.n	1cd54 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1cdf6:	4620      	mov	r0, r4
   1cdf8:	b003      	add	sp, #12
   1cdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1cdfe:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1ce00:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1ce02:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ce04:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1ce06:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1ce08:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1ce0a:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1ce0c:	6923      	ldr	r3, [r4, #16]
   1ce0e:	81e2      	strh	r2, [r4, #14]
   1ce10:	60a3      	str	r3, [r4, #8]
	return buf;
   1ce12:	e7f0      	b.n	1cdf6 <net_buf_alloc_len+0xf6>
   1ce14:	2000a018 	.word	0x2000a018
   1ce18:	cccccccd 	.word	0xcccccccd

0001ce1c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ce1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce20:	4d17      	ldr	r5, [pc, #92]	; (1ce80 <net_buf_unref+0x64>)
   1ce22:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1ce24:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1ce26:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1ce28:	b90c      	cbnz	r4, 1ce2e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1ce2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1ce2e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1ce30:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1ce34:	3b01      	subs	r3, #1
   1ce36:	b2db      	uxtb	r3, r3
   1ce38:	7123      	strb	r3, [r4, #4]
   1ce3a:	2b00      	cmp	r3, #0
   1ce3c:	d1f5      	bne.n	1ce2a <net_buf_unref+0xe>
		if (buf->__buf) {
   1ce3e:	6921      	ldr	r1, [r4, #16]
   1ce40:	b159      	cbz	r1, 1ce5a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1ce42:	7963      	ldrb	r3, [r4, #5]
   1ce44:	079b      	lsls	r3, r3, #30
   1ce46:	d407      	bmi.n	1ce58 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ce48:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1ce4a:	fb07 5303 	mla	r3, r7, r3, r5
   1ce4e:	4620      	mov	r0, r4
   1ce50:	6a1b      	ldr	r3, [r3, #32]
   1ce52:	681b      	ldr	r3, [r3, #0]
   1ce54:	689b      	ldr	r3, [r3, #8]
   1ce56:	4798      	blx	r3
			buf->__buf = NULL;
   1ce58:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1ce5a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1ce5c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1ce5e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1ce62:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1ce64:	69db      	ldr	r3, [r3, #28]
   1ce66:	b11b      	cbz	r3, 1ce70 <net_buf_unref+0x54>
			pool->destroy(buf);
   1ce68:	4620      	mov	r0, r4
   1ce6a:	4798      	blx	r3
{
   1ce6c:	4644      	mov	r4, r8
   1ce6e:	e7db      	b.n	1ce28 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1ce70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ce74:	4621      	mov	r1, r4
   1ce76:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1ce7a:	f009 fb78 	bl	2656e <k_queue_prepend>
}
   1ce7e:	e7f5      	b.n	1ce6c <net_buf_unref+0x50>
   1ce80:	2000a018 	.word	0x2000a018

0001ce84 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1ce84:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1ce86:	4b09      	ldr	r3, [pc, #36]	; (1ceac <gpio_nrfx_init+0x28>)
   1ce88:	781a      	ldrb	r2, [r3, #0]
   1ce8a:	b96a      	cbnz	r2, 1cea8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1ce8c:	2101      	movs	r1, #1
   1ce8e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1ce90:	2006      	movs	r0, #6
   1ce92:	2105      	movs	r1, #5
   1ce94:	f7ea f844 	bl	6f20 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1ce98:	2006      	movs	r0, #6
   1ce9a:	f7ea f80f 	bl	6ebc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1ce9e:	4b04      	ldr	r3, [pc, #16]	; (1ceb0 <gpio_nrfx_init+0x2c>)
   1cea0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1cea4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1cea8:	2000      	movs	r0, #0
   1ceaa:	bd08      	pop	{r3, pc}
   1ceac:	2000f2be 	.word	0x2000f2be
   1ceb0:	40006000 	.word	0x40006000

0001ceb4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ceb4:	4b2b      	ldr	r3, [pc, #172]	; (1cf64 <gpio_nrfx_config+0xb0>)
{
   1ceb6:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
   1ceb8:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1ceba:	482b      	ldr	r0, [pc, #172]	; (1cf68 <gpio_nrfx_config+0xb4>)
   1cebc:	4013      	ands	r3, r2
   1cebe:	4283      	cmp	r3, r0
   1cec0:	d041      	beq.n	1cf46 <gpio_nrfx_config+0x92>
   1cec2:	d80d      	bhi.n	1cee0 <gpio_nrfx_config+0x2c>
   1cec4:	2b06      	cmp	r3, #6
   1cec6:	d015      	beq.n	1cef4 <gpio_nrfx_config+0x40>
   1cec8:	d805      	bhi.n	1ced6 <gpio_nrfx_config+0x22>
   1ceca:	b19b      	cbz	r3, 1cef4 <gpio_nrfx_config+0x40>
   1cecc:	2b02      	cmp	r3, #2
   1cece:	d03c      	beq.n	1cf4a <gpio_nrfx_config+0x96>
   1ced0:	f06f 0015 	mvn.w	r0, #21
   1ced4:	e036      	b.n	1cf44 <gpio_nrfx_config+0x90>
   1ced6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ceda:	d1f9      	bne.n	1ced0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1cedc:	2301      	movs	r3, #1
   1cede:	e009      	b.n	1cef4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1cee0:	4822      	ldr	r0, [pc, #136]	; (1cf6c <gpio_nrfx_config+0xb8>)
   1cee2:	4283      	cmp	r3, r0
   1cee4:	d033      	beq.n	1cf4e <gpio_nrfx_config+0x9a>
   1cee6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1ceea:	d032      	beq.n	1cf52 <gpio_nrfx_config+0x9e>
   1ceec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1cef0:	d1ee      	bne.n	1ced0 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1cef2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1cef4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1cef6:	bf54      	ite	pl
   1cef8:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1cefc:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1cefe:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1cf02:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1cf04:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1cf08:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1cf0c:	d507      	bpl.n	1cf1e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1cf0e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1cf12:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1cf14:	d01f      	beq.n	1cf56 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1cf16:	2201      	movs	r2, #1
   1cf18:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1cf1a:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1cf1e:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1cf20:	4c13      	ldr	r4, [pc, #76]	; (1cf70 <gpio_nrfx_config+0xbc>)
   1cf22:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1cf24:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1cf28:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1cf2c:	bf18      	it	ne
   1cf2e:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1cf32:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cf36:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1cf3a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1cf3e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1cf42:	2000      	movs	r0, #0
}
   1cf44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1cf46:	2307      	movs	r3, #7
   1cf48:	e7d4      	b.n	1cef4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1cf4a:	2304      	movs	r3, #4
   1cf4c:	e7d2      	b.n	1cef4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1cf4e:	2305      	movs	r3, #5
   1cf50:	e7d0      	b.n	1cef4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1cf52:	2303      	movs	r3, #3
   1cf54:	e7ce      	b.n	1cef4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1cf56:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1cf58:	bf42      	ittt	mi
   1cf5a:	2201      	movmi	r2, #1
   1cf5c:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1cf5e:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1cf62:	e7dc      	b.n	1cf1e <gpio_nrfx_config+0x6a>
   1cf64:	00f00006 	.word	0x00f00006
   1cf68:	00100006 	.word	0x00100006
   1cf6c:	00400002 	.word	0x00400002
   1cf70:	50000300 	.word	0x50000300

0001cf74 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1cf74:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1cf78:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1cf7a:	4b08      	ldr	r3, [pc, #32]	; (1cf9c <nrf_gpio_cfg_sense_set+0x28>)
   1cf7c:	2801      	cmp	r0, #1
   1cf7e:	bf18      	it	ne
   1cf80:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1cf84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1cf88:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1cf8c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1cf90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1cf94:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1cf98:	4770      	bx	lr
   1cf9a:	bf00      	nop
   1cf9c:	50000300 	.word	0x50000300

0001cfa0 <gpiote_event_handler>:
{
   1cfa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1cfa2:	2600      	movs	r6, #0
   1cfa4:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cfa8:	4d28      	ldr	r5, [pc, #160]	; (1d04c <gpiote_event_handler+0xac>)
   1cfaa:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   1cfae:	b15c      	cbz	r4, 1cfc8 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   1cfb0:	4827      	ldr	r0, [pc, #156]	; (1d050 <gpiote_event_handler+0xb0>)
   1cfb2:	f008 ff01 	bl	25db8 <check_level_trigger_pins>
		fired_triggers[0] =
   1cfb6:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   1cfb8:	4826      	ldr	r0, [pc, #152]	; (1d054 <gpiote_event_handler+0xb4>)
   1cfba:	f008 fefd 	bl	25db8 <check_level_trigger_pins>
		fired_triggers[1] =
   1cfbe:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cfc0:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   1cfc4:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   1cfc8:	4923      	ldr	r1, [pc, #140]	; (1d058 <gpiote_event_handler+0xb8>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1cfca:	4d20      	ldr	r5, [pc, #128]	; (1d04c <gpiote_event_handler+0xac>)
   1cfcc:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1cfce:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cfd0:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1cfd2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1cfd6:	fa06 f002 	lsl.w	r0, r6, r2
   1cfda:	4218      	tst	r0, r3
   1cfdc:	d016      	beq.n	1d00c <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cfde:	680b      	ldr	r3, [r1, #0]
   1cfe0:	b1a3      	cbz	r3, 1d00c <gpiote_event_handler+0x6c>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1cfe2:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1cfe6:	af02      	add	r7, sp, #8
   1cfe8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cfec:	f8c1 c000 	str.w	ip, [r1]
   1cff0:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1cff4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1cff8:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1cffc:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1d000:	fa06 f303 	lsl.w	r3, r6, r3
   1d004:	433b      	orrs	r3, r7
   1d006:	f840 3c08 	str.w	r3, [r0, #-8]
   1d00a:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d00c:	3201      	adds	r2, #1
   1d00e:	2a08      	cmp	r2, #8
   1d010:	f101 0104 	add.w	r1, r1, #4
   1d014:	d1dd      	bne.n	1cfd2 <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   1d016:	9a00      	ldr	r2, [sp, #0]
   1d018:	b122      	cbz	r2, 1d024 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   1d01a:	4b10      	ldr	r3, [pc, #64]	; (1d05c <gpiote_event_handler+0xbc>)
   1d01c:	490c      	ldr	r1, [pc, #48]	; (1d050 <gpiote_event_handler+0xb0>)
   1d01e:	6858      	ldr	r0, [r3, #4]
   1d020:	f008 fe93 	bl	25d4a <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   1d024:	9a01      	ldr	r2, [sp, #4]
   1d026:	b122      	cbz	r2, 1d032 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   1d028:	4b0d      	ldr	r3, [pc, #52]	; (1d060 <gpiote_event_handler+0xc0>)
   1d02a:	490a      	ldr	r1, [pc, #40]	; (1d054 <gpiote_event_handler+0xb4>)
   1d02c:	6858      	ldr	r0, [r3, #4]
   1d02e:	f008 fe8c 	bl	25d4a <gpio_fire_callbacks.isra.0>
	if (port_event) {
   1d032:	b144      	cbz	r4, 1d046 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1d034:	4806      	ldr	r0, [pc, #24]	; (1d050 <gpiote_event_handler+0xb0>)
   1d036:	f008 fe99 	bl	25d6c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1d03a:	4806      	ldr	r0, [pc, #24]	; (1d054 <gpiote_event_handler+0xb4>)
}
   1d03c:	b003      	add	sp, #12
   1d03e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1d042:	f008 be93 	b.w	25d6c <cfg_level_pins>
}
   1d046:	b003      	add	sp, #12
   1d048:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d04a:	bf00      	nop
   1d04c:	40006000 	.word	0x40006000
   1d050:	20009d98 	.word	0x20009d98
   1d054:	20009da8 	.word	0x20009da8
   1d058:	40006100 	.word	0x40006100
   1d05c:	2000eb08 	.word	0x2000eb08
   1d060:	2000eb24 	.word	0x2000eb24

0001d064 <gpio_nrfx_pin_interrupt_configure>:
{
   1d064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d066:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d068:	6842      	ldr	r2, [r0, #4]
	return port->data;
   1d06a:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d06c:	7a12      	ldrb	r2, [r2, #8]
   1d06e:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d072:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
   1d076:	460e      	mov	r6, r1
   1d078:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d07c:	d110      	bne.n	1d0a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
    return pin_number >> 5;
   1d07e:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
   1d080:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
   1d082:	f005 021f 	and.w	r2, r5, #31
        case 1: return NRF_P1;
   1d086:	4961      	ldr	r1, [pc, #388]	; (1d20c <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d088:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1d08c:	bf18      	it	ne
   1d08e:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d092:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1d096:	07d0      	lsls	r0, r2, #31
   1d098:	d507      	bpl.n	1d0aa <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
   1d09a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d09e:	e09a      	b.n	1d1d6 <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d0a0:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
   1d0a4:	68f9      	ldr	r1, [r7, #12]
   1d0a6:	f000 8098 	beq.w	1d1da <gpio_nrfx_pin_interrupt_configure+0x176>
   1d0aa:	68fa      	ldr	r2, [r7, #12]
   1d0ac:	2101      	movs	r1, #1
   1d0ae:	40b1      	lsls	r1, r6
   1d0b0:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d0b2:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d0b4:	60f9      	str	r1, [r7, #12]
   1d0b6:	2101      	movs	r1, #1
   1d0b8:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d0ba:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   1d0be:	bf0c      	ite	eq
   1d0c0:	430a      	orreq	r2, r1
   1d0c2:	438a      	bicne	r2, r1
   1d0c4:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1d0c6:	69ba      	ldr	r2, [r7, #24]
   1d0c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1d0cc:	bf0c      	ite	eq
   1d0ce:	430a      	orreq	r2, r1
   1d0d0:	438a      	bicne	r2, r1
   1d0d2:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d0d4:	693a      	ldr	r2, [r7, #16]
   1d0d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1d0da:	bf0c      	ite	eq
   1d0dc:	4311      	orreq	r1, r2
   1d0de:	ea22 0101 	bicne.w	r1, r2, r1
    return p_reg->INTENSET & mask;
   1d0e2:	4a4b      	ldr	r2, [pc, #300]	; (1d210 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
   1d0e4:	6139      	str	r1, [r7, #16]
   1d0e6:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d0ea:	2000      	movs	r0, #0
   1d0ec:	b2db      	uxtb	r3, r3
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d0ee:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1d0f2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1d0f6:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1d0fa:	428d      	cmp	r5, r1
   1d0fc:	d172      	bne.n	1d1e4 <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
   1d0fe:	fa23 f100 	lsr.w	r1, r3, r0
   1d102:	07c9      	lsls	r1, r1, #31
   1d104:	d56e      	bpl.n	1d1e4 <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1d106:	0083      	lsls	r3, r0, #2
   1d108:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d10c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1d110:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1d114:	f021 0101 	bic.w	r1, r1, #1
   1d118:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1d11c:	2301      	movs	r3, #1
   1d11e:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1d120:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1d124:	b2c0      	uxtb	r0, r0
   1d126:	f001 fa39 	bl	1e59c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d12a:	4628      	mov	r0, r5
   1d12c:	2100      	movs	r1, #0
   1d12e:	f7ff ff21 	bl	1cf74 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1d132:	68f8      	ldr	r0, [r7, #12]
   1d134:	40f0      	lsrs	r0, r6
   1d136:	f010 0001 	ands.w	r0, r0, #1
   1d13a:	d04c      	beq.n	1d1d6 <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
   1d13c:	6978      	ldr	r0, [r7, #20]
   1d13e:	40f0      	lsrs	r0, r6
   1d140:	f010 0401 	ands.w	r4, r0, #1
   1d144:	d055      	beq.n	1d1f2 <gpio_nrfx_pin_interrupt_configure+0x18e>
			if (data->double_edge & BIT(pin)) {
   1d146:	69bb      	ldr	r3, [r7, #24]
   1d148:	40f3      	lsrs	r3, r6
   1d14a:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d14c:	bf5f      	itttt	pl
   1d14e:	6939      	ldrpl	r1, [r7, #16]
   1d150:	fa21 f606 	lsrpl.w	r6, r1, r6
   1d154:	f006 0601 	andpl.w	r6, r6, #1
   1d158:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1d15c:	f10d 0007 	add.w	r0, sp, #7
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d160:	bf54      	ite	pl
   1d162:	b2f6      	uxtbpl	r6, r6
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1d164:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1d166:	f001 fa39 	bl	1e5dc <nrfx_gpiote_channel_alloc>
   1d16a:	4b2a      	ldr	r3, [pc, #168]	; (1d214 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   1d16c:	4298      	cmp	r0, r3
   1d16e:	d13d      	bne.n	1d1ec <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1d170:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d174:	0093      	lsls	r3, r2, #2
   1d176:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d17a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d17e:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d180:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1d184:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1d188:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1d18c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d190:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1d194:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1d198:	430d      	orrs	r5, r1
   1d19a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   1d19e:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1d1a2:	0093      	lsls	r3, r2, #2
   1d1a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d1a8:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d1ac:	2000      	movs	r0, #0
   1d1ae:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   1d1b0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1d1b4:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1d1b6:	008b      	lsls	r3, r1, #2
   1d1b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d1bc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1d1c0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1d1c4:	f042 0201 	orr.w	r2, r2, #1
   1d1c8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1d1cc:	4a10      	ldr	r2, [pc, #64]	; (1d210 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1d1ce:	2301      	movs	r3, #1
   1d1d0:	408b      	lsls	r3, r1
   1d1d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1d1d6:	b003      	add	sp, #12
   1d1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d1da:	2201      	movs	r2, #1
   1d1dc:	40b2      	lsls	r2, r6
   1d1de:	ea21 0102 	bic.w	r1, r1, r2
   1d1e2:	e766      	b.n	1d0b2 <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d1e4:	3001      	adds	r0, #1
   1d1e6:	2808      	cmp	r0, #8
   1d1e8:	d181      	bne.n	1d0ee <gpio_nrfx_pin_interrupt_configure+0x8a>
   1d1ea:	e79e      	b.n	1d12a <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   1d1ec:	f06f 0012 	mvn.w	r0, #18
   1d1f0:	e7f1      	b.n	1d1d6 <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d1f2:	6939      	ldr	r1, [r7, #16]
   1d1f4:	40f1      	lsrs	r1, r6
   1d1f6:	f001 0101 	and.w	r1, r1, #1
   1d1fa:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d1fe:	4628      	mov	r0, r5
   1d200:	b2c9      	uxtb	r1, r1
   1d202:	f7ff feb7 	bl	1cf74 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1d206:	4620      	mov	r0, r4
   1d208:	e7e5      	b.n	1d1d6 <gpio_nrfx_pin_interrupt_configure+0x172>
   1d20a:	bf00      	nop
   1d20c:	50000300 	.word	0x50000300
   1d210:	40006000 	.word	0x40006000
   1d214:	0bad0000 	.word	0x0bad0000

0001d218 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   1d218:	b510      	push	{r4, lr}
   1d21a:	4604      	mov	r4, r0
   1d21c:	2200      	movs	r2, #0
   1d21e:	2101      	movs	r1, #1
   1d220:	2003      	movs	r0, #3
   1d222:	f7e9 fe7d 	bl	6f20 <z_arm_irq_priority_set>
	return dev->config;
   1d226:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   1d228:	68e3      	ldr	r3, [r4, #12]
   1d22a:	4a0c      	ldr	r2, [pc, #48]	; (1d25c <twi_0_init+0x44>)
   1d22c:	f100 0108 	add.w	r1, r0, #8
   1d230:	f001 fcae 	bl	1eb90 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1d234:	4b0a      	ldr	r3, [pc, #40]	; (1d260 <twi_0_init+0x48>)
   1d236:	4298      	cmp	r0, r3
   1d238:	d00d      	beq.n	1d256 <twi_0_init+0x3e>
   1d23a:	4b0a      	ldr	r3, [pc, #40]	; (1d264 <twi_0_init+0x4c>)
   1d23c:	4a0a      	ldr	r2, [pc, #40]	; (1d268 <twi_0_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   1d23e:	480b      	ldr	r0, [pc, #44]	; (1d26c <twi_0_init+0x54>)
   1d240:	6821      	ldr	r1, [r4, #0]
   1d242:	1ad2      	subs	r2, r2, r3
   1d244:	08d2      	lsrs	r2, r2, #3
   1d246:	0192      	lsls	r2, r2, #6
   1d248:	f042 0201 	orr.w	r2, r2, #1
   1d24c:	f004 fc96 	bl	21b7c <log_1>
		return -EBUSY;
   1d250:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
   1d254:	bd10      	pop	{r4, pc}
	return 0;
   1d256:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(0);
   1d258:	e7fc      	b.n	1d254 <twi_0_init+0x3c>
   1d25a:	bf00      	nop
   1d25c:	0001d2c5 	.word	0x0001d2c5
   1d260:	0bad0000 	.word	0x0bad0000
   1d264:	00026fc8 	.word	0x00026fc8
   1d268:	000270e0 	.word	0x000270e0
   1d26c:	0002ccf1 	.word	0x0002ccf1

0001d270 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1d270:	07ca      	lsls	r2, r1, #31
{
   1d272:	b508      	push	{r3, lr}
	return dev->config;
   1d274:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1d276:	d40f      	bmi.n	1d298 <i2c_nrfx_twi_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   1d278:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1d27c:	2a01      	cmp	r2, #1
   1d27e:	d00e      	beq.n	1d29e <i2c_nrfx_twi_configure+0x2e>
   1d280:	2a02      	cmp	r2, #2
   1d282:	d015      	beq.n	1d2b0 <i2c_nrfx_twi_configure+0x40>
   1d284:	490c      	ldr	r1, [pc, #48]	; (1d2b8 <i2c_nrfx_twi_configure+0x48>)
   1d286:	4b0d      	ldr	r3, [pc, #52]	; (1d2bc <i2c_nrfx_twi_configure+0x4c>)
		LOG_ERR("unsupported speed");
   1d288:	480d      	ldr	r0, [pc, #52]	; (1d2c0 <i2c_nrfx_twi_configure+0x50>)
   1d28a:	1ac9      	subs	r1, r1, r3
   1d28c:	08c9      	lsrs	r1, r1, #3
   1d28e:	0189      	lsls	r1, r1, #6
   1d290:	f041 0101 	orr.w	r1, r1, #1
   1d294:	f004 fc65 	bl	21b62 <log_0>
		return -EINVAL;
   1d298:	f06f 0015 	mvn.w	r0, #21
   1d29c:	e007      	b.n	1d2ae <i2c_nrfx_twi_configure+0x3e>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   1d29e:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1d2a0:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1d2a4:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1d2a8:	68c3      	ldr	r3, [r0, #12]
	return 0;
   1d2aa:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1d2ac:	6359      	str	r1, [r3, #52]	; 0x34
}
   1d2ae:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1d2b0:	681b      	ldr	r3, [r3, #0]
   1d2b2:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   1d2b6:	e7f5      	b.n	1d2a4 <i2c_nrfx_twi_configure+0x34>
   1d2b8:	000270e0 	.word	0x000270e0
   1d2bc:	00026fc8 	.word	0x00026fc8
   1d2c0:	0002cd11 	.word	0x0002cd11

0001d2c4 <event_handler>:
	switch (p_event->type) {
   1d2c4:	7803      	ldrb	r3, [r0, #0]
   1d2c6:	2b01      	cmp	r3, #1
   1d2c8:	d008      	beq.n	1d2dc <event_handler+0x18>
   1d2ca:	2b02      	cmp	r3, #2
   1d2cc:	d008      	beq.n	1d2e0 <event_handler+0x1c>
   1d2ce:	b94b      	cbnz	r3, 1d2e4 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1d2d0:	4b05      	ldr	r3, [pc, #20]	; (1d2e8 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1d2d2:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1d2d4:	f101 0018 	add.w	r0, r1, #24
   1d2d8:	f002 bc7c 	b.w	1fbd4 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1d2dc:	4b03      	ldr	r3, [pc, #12]	; (1d2ec <event_handler+0x28>)
   1d2de:	e7f8      	b.n	1d2d2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1d2e0:	4b03      	ldr	r3, [pc, #12]	; (1d2f0 <event_handler+0x2c>)
   1d2e2:	e7f6      	b.n	1d2d2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1d2e4:	4b03      	ldr	r3, [pc, #12]	; (1d2f4 <event_handler+0x30>)
   1d2e6:	e7f4      	b.n	1d2d2 <event_handler+0xe>
   1d2e8:	0bad0000 	.word	0x0bad0000
   1d2ec:	0bae0001 	.word	0x0bae0001
   1d2f0:	0bae0002 	.word	0x0bae0002
   1d2f4:	0bad0001 	.word	0x0bad0001

0001d2f8 <i2c_nrfx_twi_transfer>:
{
   1d2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2fc:	4604      	mov	r4, r0
   1d2fe:	b087      	sub	sp, #28
   1d300:	460d      	mov	r5, r1
   1d302:	4690      	mov	r8, r2
   1d304:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1d306:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
   1d308:	f04f 32ff 	mov.w	r2, #4294967295
   1d30c:	f04f 33ff 	mov.w	r3, #4294967295
   1d310:	f002 fc86 	bl	1fc20 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1d314:	68e0      	ldr	r0, [r4, #12]
   1d316:	3018      	adds	r0, #24
   1d318:	2200      	movs	r2, #0
   1d31a:	2300      	movs	r3, #0
   1d31c:	f002 fc80 	bl	1fc20 <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1d320:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
   1d322:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1d408 <i2c_nrfx_twi_transfer+0x110>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1d326:	f001 fc8b 	bl	1ec40 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1d32a:	2600      	movs	r6, #0
   1d32c:	4546      	cmp	r6, r8
   1d32e:	d301      	bcc.n	1d334 <i2c_nrfx_twi_transfer+0x3c>
   1d330:	2500      	movs	r5, #0
   1d332:	e02d      	b.n	1d390 <i2c_nrfx_twi_transfer+0x98>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1d334:	f895 b008 	ldrb.w	fp, [r5, #8]
   1d338:	f01b 0708 	ands.w	r7, fp, #8
   1d33c:	d160      	bne.n	1d400 <i2c_nrfx_twi_transfer+0x108>
		nrfx_twi_xfer_desc_t cur_xfer = {
   1d33e:	2214      	movs	r2, #20
   1d340:	4639      	mov	r1, r7
   1d342:	a801      	add	r0, sp, #4
   1d344:	f006 fc44 	bl	23bd0 <memset>
   1d348:	686a      	ldr	r2, [r5, #4]
   1d34a:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1d34c:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   1d350:	682a      	ldr	r2, [r5, #0]
   1d352:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1d356:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   1d35a:	f88d 9005 	strb.w	r9, [sp, #5]
   1d35e:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1d360:	d120      	bne.n	1d3a4 <i2c_nrfx_twi_transfer+0xac>
			if ((i < (num_msgs - 1)) &&
   1d362:	f108 32ff 	add.w	r2, r8, #4294967295
   1d366:	42b2      	cmp	r2, r6
   1d368:	d902      	bls.n	1d370 <i2c_nrfx_twi_transfer+0x78>
   1d36a:	7d2a      	ldrb	r2, [r5, #20]
   1d36c:	0752      	lsls	r2, r2, #29
   1d36e:	d51b      	bpl.n	1d3a8 <i2c_nrfx_twi_transfer+0xb0>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   1d370:	2b00      	cmp	r3, #0
   1d372:	d145      	bne.n	1d400 <i2c_nrfx_twi_transfer+0x108>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   1d374:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   1d376:	6860      	ldr	r0, [r4, #4]
   1d378:	a901      	add	r1, sp, #4
   1d37a:	f001 fc8b 	bl	1ec94 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   1d37e:	4550      	cmp	r0, sl
   1d380:	d014      	beq.n	1d3ac <i2c_nrfx_twi_transfer+0xb4>
			if (res == NRFX_ERROR_BUSY) {
   1d382:	4b22      	ldr	r3, [pc, #136]	; (1d40c <i2c_nrfx_twi_transfer+0x114>)
				ret = -EIO;
   1d384:	4298      	cmp	r0, r3
   1d386:	bf0c      	ite	eq
   1d388:	f06f 050f 	mvneq.w	r5, #15
   1d38c:	f06f 0504 	mvnne.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   1d390:	6860      	ldr	r0, [r4, #4]
   1d392:	f001 fc65 	bl	1ec60 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1d396:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
   1d398:	f002 fc1c 	bl	1fbd4 <z_impl_k_sem_give>
}
   1d39c:	4628      	mov	r0, r5
   1d39e:	b007      	add	sp, #28
   1d3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   1d3a4:	463a      	mov	r2, r7
   1d3a6:	e7e6      	b.n	1d376 <i2c_nrfx_twi_transfer+0x7e>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1d3a8:	2240      	movs	r2, #64	; 0x40
   1d3aa:	e7e4      	b.n	1d376 <i2c_nrfx_twi_transfer+0x7e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1d3ac:	68e0      	ldr	r0, [r4, #12]
   1d3ae:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1d3b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d3b4:	2300      	movs	r3, #0
   1d3b6:	f002 fc33 	bl	1fc20 <z_impl_k_sem_take>
		if (ret != 0) {
   1d3ba:	b168      	cbz	r0, 1d3d8 <i2c_nrfx_twi_transfer+0xe0>
   1d3bc:	4a14      	ldr	r2, [pc, #80]	; (1d410 <i2c_nrfx_twi_transfer+0x118>)
   1d3be:	4b15      	ldr	r3, [pc, #84]	; (1d414 <i2c_nrfx_twi_transfer+0x11c>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1d3c0:	4815      	ldr	r0, [pc, #84]	; (1d418 <i2c_nrfx_twi_transfer+0x120>)
   1d3c2:	1ad2      	subs	r2, r2, r3
   1d3c4:	08d2      	lsrs	r2, r2, #3
   1d3c6:	0192      	lsls	r2, r2, #6
   1d3c8:	f042 0201 	orr.w	r2, r2, #1
   1d3cc:	4631      	mov	r1, r6
   1d3ce:	f004 fbd5 	bl	21b7c <log_1>
			ret = -EIO;
   1d3d2:	f06f 0504 	mvn.w	r5, #4
			break;
   1d3d6:	e7db      	b.n	1d390 <i2c_nrfx_twi_transfer+0x98>
	return dev->data;
   1d3d8:	68e3      	ldr	r3, [r4, #12]
		res = get_dev_data(dev)->res;
   1d3da:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1d3dc:	4551      	cmp	r1, sl
   1d3de:	f105 050c 	add.w	r5, r5, #12
   1d3e2:	d00b      	beq.n	1d3fc <i2c_nrfx_twi_transfer+0x104>
   1d3e4:	4a0b      	ldr	r2, [pc, #44]	; (1d414 <i2c_nrfx_twi_transfer+0x11c>)
   1d3e6:	4b0a      	ldr	r3, [pc, #40]	; (1d410 <i2c_nrfx_twi_transfer+0x118>)
			LOG_ERR("Error %d occurred for message %d", res, i);
   1d3e8:	480c      	ldr	r0, [pc, #48]	; (1d41c <i2c_nrfx_twi_transfer+0x124>)
   1d3ea:	1a9b      	subs	r3, r3, r2
   1d3ec:	08db      	lsrs	r3, r3, #3
   1d3ee:	019b      	lsls	r3, r3, #6
   1d3f0:	f043 0301 	orr.w	r3, r3, #1
   1d3f4:	4632      	mov	r2, r6
   1d3f6:	f004 fbd5 	bl	21ba4 <log_2>
   1d3fa:	e7ea      	b.n	1d3d2 <i2c_nrfx_twi_transfer+0xda>
	for (size_t i = 0; i < num_msgs; i++) {
   1d3fc:	3601      	adds	r6, #1
   1d3fe:	e795      	b.n	1d32c <i2c_nrfx_twi_transfer+0x34>
			ret = -ENOTSUP;
   1d400:	f06f 0522 	mvn.w	r5, #34	; 0x22
   1d404:	e7c4      	b.n	1d390 <i2c_nrfx_twi_transfer+0x98>
   1d406:	bf00      	nop
   1d408:	0bad0000 	.word	0x0bad0000
   1d40c:	0bad000b 	.word	0x0bad000b
   1d410:	000270e0 	.word	0x000270e0
   1d414:	00026fc8 	.word	0x00026fc8
   1d418:	0002cd23 	.word	0x0002cd23
   1d41c:	0002cd4d 	.word	0x0002cd4d

0001d420 <spi_2_init>:
#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPI
SPI_NRFX_SPI_DEVICE(2);
   1d420:	b538      	push	{r3, r4, r5, lr}
   1d422:	4604      	mov	r4, r0
   1d424:	2200      	movs	r2, #0
   1d426:	2101      	movs	r1, #1
   1d428:	2023      	movs	r0, #35	; 0x23
   1d42a:	f7e9 fd79 	bl	6f20 <z_arm_irq_priority_set>
	return dev->data;
   1d42e:	68e3      	ldr	r3, [r4, #12]
	return dev->config;
   1d430:	6860      	ldr	r0, [r4, #4]
	dev_data->dev = dev;
   1d432:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   1d434:	4a0d      	ldr	r2, [pc, #52]	; (1d46c <spi_2_init+0x4c>)
   1d436:	f100 0108 	add.w	r1, r0, #8
   1d43a:	f001 f989 	bl	1e750 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1d43e:	4b0c      	ldr	r3, [pc, #48]	; (1d470 <spi_2_init+0x50>)
   1d440:	4298      	cmp	r0, r3
   1d442:	d011      	beq.n	1d468 <spi_2_init+0x48>
   1d444:	4b0b      	ldr	r3, [pc, #44]	; (1d474 <spi_2_init+0x54>)
   1d446:	4a0c      	ldr	r2, [pc, #48]	; (1d478 <spi_2_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1d448:	6821      	ldr	r1, [r4, #0]
   1d44a:	480c      	ldr	r0, [pc, #48]	; (1d47c <spi_2_init+0x5c>)
   1d44c:	1ad2      	subs	r2, r2, r3
   1d44e:	08d2      	lsrs	r2, r2, #3
   1d450:	0192      	lsls	r2, r2, #6
   1d452:	f042 0201 	orr.w	r2, r2, #1
   1d456:	f004 fb91 	bl	21b7c <log_1>
		return -EBUSY;
   1d45a:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(2);
   1d45e:	68e0      	ldr	r0, [r4, #12]
   1d460:	f008 fd08 	bl	25e74 <spi_context_unlock_unconditionally>
   1d464:	4628      	mov	r0, r5
   1d466:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1d468:	2500      	movs	r5, #0
   1d46a:	e7f8      	b.n	1d45e <spi_2_init+0x3e>
   1d46c:	0001d4fd 	.word	0x0001d4fd
   1d470:	0bad0000 	.word	0x0bad0000
   1d474:	00026fc8 	.word	0x00026fc8
   1d478:	00027120 	.word	0x00027120
   1d47c:	0002ccf1 	.word	0x0002ccf1

0001d480 <transfer_next_chunk>:
{
   1d480:	b530      	push	{r4, r5, lr}
	return dev->data;
   1d482:	68c5      	ldr	r5, [r0, #12]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1d484:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		return ctx->rx_len;
   1d486:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   1d488:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   1d48a:	b982      	cbnz	r2, 1d4ae <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1d48c:	bb73      	cbnz	r3, 1d4ec <transfer_next_chunk+0x6c>
	int error = 0;
   1d48e:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1d490:	2200      	movs	r2, #0
   1d492:	4611      	mov	r1, r2
   1d494:	4628      	mov	r0, r5
   1d496:	f008 fcc8 	bl	25e2a <_spi_context_cs_control>
	ctx->sync_status = status;
   1d49a:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   1d49c:	f105 0020 	add.w	r0, r5, #32
   1d4a0:	f002 fb98 	bl	1fbd4 <z_impl_k_sem_give>
	dev_data->busy = false;
   1d4a4:	2300      	movs	r3, #0
   1d4a6:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   1d4aa:	b005      	add	sp, #20
   1d4ac:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
   1d4ae:	4611      	mov	r1, r2
   1d4b0:	b113      	cbz	r3, 1d4b8 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1d4b2:	429a      	cmp	r2, r3
   1d4b4:	bf28      	it	cs
   1d4b6:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1d4b8:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   1d4ba:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   1d4bc:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   1d4be:	b1bc      	cbz	r4, 1d4f0 <transfer_next_chunk+0x70>
   1d4c0:	2a00      	cmp	r2, #0
   1d4c2:	bf18      	it	ne
   1d4c4:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1d4c6:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1d4c8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   1d4ca:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1d4cc:	b192      	cbz	r2, 1d4f4 <transfer_next_chunk+0x74>
   1d4ce:	2b00      	cmp	r3, #0
   1d4d0:	bf18      	it	ne
   1d4d2:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1d4d4:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1d4d6:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1d4d8:	2200      	movs	r2, #0
   1d4da:	4669      	mov	r1, sp
   1d4dc:	f001 f9da 	bl	1e894 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1d4e0:	4b05      	ldr	r3, [pc, #20]	; (1d4f8 <transfer_next_chunk+0x78>)
   1d4e2:	4298      	cmp	r0, r3
   1d4e4:	d0e1      	beq.n	1d4aa <transfer_next_chunk+0x2a>
		error = -EIO;
   1d4e6:	f06f 0404 	mvn.w	r4, #4
   1d4ea:	e7d1      	b.n	1d490 <transfer_next_chunk+0x10>
   1d4ec:	4619      	mov	r1, r3
   1d4ee:	e7e3      	b.n	1d4b8 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1d4f0:	4622      	mov	r2, r4
   1d4f2:	e7e8      	b.n	1d4c6 <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1d4f4:	4613      	mov	r3, r2
   1d4f6:	e7ed      	b.n	1d4d4 <transfer_next_chunk+0x54>
   1d4f8:	0bad0000 	.word	0x0bad0000

0001d4fc <event_handler>:
{
   1d4fc:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1d4fe:	7803      	ldrb	r3, [r0, #0]
{
   1d500:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1d502:	2b00      	cmp	r3, #0
   1d504:	d14e      	bne.n	1d5a4 <event_handler+0xa8>
	if (!ctx->tx_len) {
   1d506:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1d508:	b163      	cbz	r3, 1d524 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1d50a:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   1d50c:	429a      	cmp	r2, r3
   1d50e:	d91d      	bls.n	1d54c <event_handler+0x50>
   1d510:	4925      	ldr	r1, [pc, #148]	; (1d5a8 <event_handler+0xac>)
   1d512:	4b26      	ldr	r3, [pc, #152]	; (1d5ac <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1d514:	4826      	ldr	r0, [pc, #152]	; (1d5b0 <event_handler+0xb4>)
   1d516:	1ac9      	subs	r1, r1, r3
   1d518:	08c9      	lsrs	r1, r1, #3
   1d51a:	0189      	lsls	r1, r1, #6
   1d51c:	f041 0101 	orr.w	r1, r1, #1
   1d520:	f004 fb1f 	bl	21b62 <log_0>
	if (!ctx->rx_len) {
   1d524:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1d526:	b163      	cbz	r3, 1d542 <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1d528:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   1d52a:	429a      	cmp	r2, r3
   1d52c:	d924      	bls.n	1d578 <event_handler+0x7c>
   1d52e:	491e      	ldr	r1, [pc, #120]	; (1d5a8 <event_handler+0xac>)
   1d530:	4b1e      	ldr	r3, [pc, #120]	; (1d5ac <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1d532:	481f      	ldr	r0, [pc, #124]	; (1d5b0 <event_handler+0xb4>)
   1d534:	1ac9      	subs	r1, r1, r3
   1d536:	08c9      	lsrs	r1, r1, #3
   1d538:	0189      	lsls	r1, r1, #6
   1d53a:	f041 0101 	orr.w	r1, r1, #1
   1d53e:	f004 fb10 	bl	21b62 <log_0>
		transfer_next_chunk(dev_data->dev);
   1d542:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   1d544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1d548:	f7ff bf9a 	b.w	1d480 <transfer_next_chunk>
	ctx->tx_len -= len;
   1d54c:	1a9b      	subs	r3, r3, r2
   1d54e:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   1d550:	b963      	cbnz	r3, 1d56c <event_handler+0x70>
		ctx->tx_count--;
   1d552:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1d554:	3b01      	subs	r3, #1
   1d556:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   1d558:	b163      	cbz	r3, 1d574 <event_handler+0x78>
			ctx->current_tx++;
   1d55a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1d55c:	f103 0208 	add.w	r2, r3, #8
   1d560:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1d562:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   1d564:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1d566:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   1d568:	650b      	str	r3, [r1, #80]	; 0x50
   1d56a:	e7db      	b.n	1d524 <event_handler+0x28>
	} else if (ctx->tx_buf) {
   1d56c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1d56e:	2b00      	cmp	r3, #0
   1d570:	d0d8      	beq.n	1d524 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   1d572:	4413      	add	r3, r2
   1d574:	64e3      	str	r3, [r4, #76]	; 0x4c
   1d576:	e7d5      	b.n	1d524 <event_handler+0x28>
	ctx->rx_len -= len;
   1d578:	1a9b      	subs	r3, r3, r2
   1d57a:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   1d57c:	b963      	cbnz	r3, 1d598 <event_handler+0x9c>
		ctx->rx_count--;
   1d57e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1d580:	3b01      	subs	r3, #1
   1d582:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   1d584:	b163      	cbz	r3, 1d5a0 <event_handler+0xa4>
			ctx->current_rx++;
   1d586:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1d588:	f103 0208 	add.w	r2, r3, #8
   1d58c:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1d58e:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   1d590:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1d592:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   1d594:	65a3      	str	r3, [r4, #88]	; 0x58
   1d596:	e7d4      	b.n	1d542 <event_handler+0x46>
	} else if (ctx->rx_buf) {
   1d598:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1d59a:	2b00      	cmp	r3, #0
   1d59c:	d0d1      	beq.n	1d542 <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   1d59e:	4413      	add	r3, r2
   1d5a0:	6563      	str	r3, [r4, #84]	; 0x54
   1d5a2:	e7ce      	b.n	1d542 <event_handler+0x46>
}
   1d5a4:	bd10      	pop	{r4, pc}
   1d5a6:	bf00      	nop
   1d5a8:	00027120 	.word	0x00027120
   1d5ac:	00026fc8 	.word	0x00026fc8
   1d5b0:	0002cd7b 	.word	0x0002cd7b

0001d5b4 <spi_nrfx_transceive>:
{
   1d5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5b8:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1d5ba:	888b      	ldrh	r3, [r1, #4]
	return dev->data;
   1d5bc:	68c4      	ldr	r4, [r0, #12]
   1d5be:	045b      	lsls	r3, r3, #17
{
   1d5c0:	4680      	mov	r8, r0
   1d5c2:	460d      	mov	r5, r1
   1d5c4:	4617      	mov	r7, r2
   1d5c6:	d42d      	bmi.n	1d624 <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
   1d5c8:	f04f 32ff 	mov.w	r2, #4294967295
   1d5cc:	f04f 33ff 	mov.w	r3, #4294967295
   1d5d0:	f104 0008 	add.w	r0, r4, #8
   1d5d4:	f002 fb24 	bl	1fc20 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1d5d8:	6065      	str	r5, [r4, #4]
	return dev->data;
   1d5da:	f8d8 200c 	ldr.w	r2, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   1d5de:	6813      	ldr	r3, [r2, #0]
   1d5e0:	429d      	cmp	r5, r3
   1d5e2:	f000 80b1 	beq.w	1d748 <spi_nrfx_transceive+0x194>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1d5e6:	88ab      	ldrh	r3, [r5, #4]
   1d5e8:	07d8      	lsls	r0, r3, #31
   1d5ea:	d522      	bpl.n	1d632 <spi_nrfx_transceive+0x7e>
   1d5ec:	4a82      	ldr	r2, [pc, #520]	; (1d7f8 <spi_nrfx_transceive+0x244>)
   1d5ee:	4b83      	ldr	r3, [pc, #524]	; (1d7fc <spi_nrfx_transceive+0x248>)
		LOG_ERR("Slave mode is not supported on %s",
   1d5f0:	f8d8 1000 	ldr.w	r1, [r8]
   1d5f4:	4882      	ldr	r0, [pc, #520]	; (1d800 <spi_nrfx_transceive+0x24c>)
   1d5f6:	1ad2      	subs	r2, r2, r3
   1d5f8:	08d2      	lsrs	r2, r2, #3
   1d5fa:	0192      	lsls	r2, r2, #6
   1d5fc:	f042 0201 	orr.w	r2, r2, #1
   1d600:	f004 fabc 	bl	21b7c <log_1>
		return -EINVAL;
   1d604:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1d608:	6823      	ldr	r3, [r4, #0]
   1d60a:	889b      	ldrh	r3, [r3, #4]
   1d60c:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   1d610:	d104      	bne.n	1d61c <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
   1d612:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1d614:	f104 0008 	add.w	r0, r4, #8
   1d618:	f002 fadc 	bl	1fbd4 <z_impl_k_sem_give>
}
   1d61c:	4628      	mov	r0, r5
   1d61e:	b003      	add	sp, #12
   1d620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1d624:	6923      	ldr	r3, [r4, #16]
   1d626:	2b00      	cmp	r3, #0
   1d628:	d1ce      	bne.n	1d5c8 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1d62a:	6863      	ldr	r3, [r4, #4]
   1d62c:	4299      	cmp	r1, r3
   1d62e:	d1cb      	bne.n	1d5c8 <spi_nrfx_transceive+0x14>
   1d630:	e7d3      	b.n	1d5da <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1d632:	0719      	lsls	r1, r3, #28
   1d634:	d50a      	bpl.n	1d64c <spi_nrfx_transceive+0x98>
   1d636:	4970      	ldr	r1, [pc, #448]	; (1d7f8 <spi_nrfx_transceive+0x244>)
   1d638:	4b70      	ldr	r3, [pc, #448]	; (1d7fc <spi_nrfx_transceive+0x248>)
		LOG_ERR("Loopback mode is not supported");
   1d63a:	4872      	ldr	r0, [pc, #456]	; (1d804 <spi_nrfx_transceive+0x250>)
   1d63c:	1ac9      	subs	r1, r1, r3
   1d63e:	08c9      	lsrs	r1, r1, #3
   1d640:	0189      	lsls	r1, r1, #6
   1d642:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
   1d646:	f004 fa8c 	bl	21b62 <log_0>
   1d64a:	e7db      	b.n	1d604 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1d64c:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   1d650:	d008      	beq.n	1d664 <spi_nrfx_transceive+0xb0>
   1d652:	4969      	ldr	r1, [pc, #420]	; (1d7f8 <spi_nrfx_transceive+0x244>)
   1d654:	4b69      	ldr	r3, [pc, #420]	; (1d7fc <spi_nrfx_transceive+0x248>)
		LOG_ERR("Only single line mode is supported");
   1d656:	486c      	ldr	r0, [pc, #432]	; (1d808 <spi_nrfx_transceive+0x254>)
   1d658:	1ac9      	subs	r1, r1, r3
   1d65a:	08c9      	lsrs	r1, r1, #3
   1d65c:	0189      	lsls	r1, r1, #6
   1d65e:	f041 0101 	orr.w	r1, r1, #1
   1d662:	e7f0      	b.n	1d646 <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1d664:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1d668:	2b08      	cmp	r3, #8
   1d66a:	d008      	beq.n	1d67e <spi_nrfx_transceive+0xca>
   1d66c:	4962      	ldr	r1, [pc, #392]	; (1d7f8 <spi_nrfx_transceive+0x244>)
   1d66e:	4b63      	ldr	r3, [pc, #396]	; (1d7fc <spi_nrfx_transceive+0x248>)
		LOG_ERR("Word sizes other than 8 bits"
   1d670:	4866      	ldr	r0, [pc, #408]	; (1d80c <spi_nrfx_transceive+0x258>)
   1d672:	1ac9      	subs	r1, r1, r3
   1d674:	08c9      	lsrs	r1, r1, #3
   1d676:	0189      	lsls	r1, r1, #6
   1d678:	f041 0101 	orr.w	r1, r1, #1
   1d67c:	e7e3      	b.n	1d646 <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
   1d67e:	6829      	ldr	r1, [r5, #0]
   1d680:	4b63      	ldr	r3, [pc, #396]	; (1d810 <spi_nrfx_transceive+0x25c>)
   1d682:	4299      	cmp	r1, r3
   1d684:	d808      	bhi.n	1d698 <spi_nrfx_transceive+0xe4>
   1d686:	495c      	ldr	r1, [pc, #368]	; (1d7f8 <spi_nrfx_transceive+0x244>)
   1d688:	4b5c      	ldr	r3, [pc, #368]	; (1d7fc <spi_nrfx_transceive+0x248>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1d68a:	4862      	ldr	r0, [pc, #392]	; (1d814 <spi_nrfx_transceive+0x260>)
   1d68c:	1ac9      	subs	r1, r1, r3
   1d68e:	08c9      	lsrs	r1, r1, #3
   1d690:	0189      	lsls	r1, r1, #6
   1d692:	f041 0101 	orr.w	r1, r1, #1
   1d696:	e7d6      	b.n	1d646 <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1d698:	68ab      	ldr	r3, [r5, #8]
	return dev->config;
   1d69a:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
   1d69e:	6015      	str	r5, [r2, #0]
   1d6a0:	2b00      	cmp	r3, #0
   1d6a2:	d07b      	beq.n	1d79c <spi_nrfx_transceive+0x1e8>
   1d6a4:	6818      	ldr	r0, [r3, #0]
   1d6a6:	2800      	cmp	r0, #0
   1d6a8:	d078      	beq.n	1d79c <spi_nrfx_transceive+0x1e8>
				   ctx->config->cs->gpio_dt_flags |
   1d6aa:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1d6ae:	7a19      	ldrb	r1, [r3, #8]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   1d6b0:	f8d0 b00c 	ldr.w	fp, [r0, #12]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1d6b4:	f01a 0f01 	tst.w	sl, #1
   1d6b8:	bf0c      	ite	eq
   1d6ba:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   1d6be:	f48a 6a20 	eorne.w	sl, sl, #2560	; 0xa00
	return api->pin_configure(port, pin, flags);
   1d6c2:	6883      	ldr	r3, [r0, #8]
   1d6c4:	9101      	str	r1, [sp, #4]
   1d6c6:	681b      	ldr	r3, [r3, #0]
   1d6c8:	4652      	mov	r2, sl
   1d6ca:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   1d6cc:	b960      	cbnz	r0, 1d6e8 <spi_nrfx_transceive+0x134>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d6ce:	9901      	ldr	r1, [sp, #4]
   1d6d0:	f8db 3000 	ldr.w	r3, [fp]
   1d6d4:	2201      	movs	r2, #1
   1d6d6:	fa02 f101 	lsl.w	r1, r2, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1d6da:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d6de:	bf14      	ite	ne
   1d6e0:	430b      	orrne	r3, r1
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1d6e2:	438b      	biceq	r3, r1
   1d6e4:	f8cb 3000 	str.w	r3, [fp]
	nrf_spi_configure(spi->p_reg,
   1d6e8:	88a9      	ldrh	r1, [r5, #4]
   1d6ea:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1d6ee:	0788      	lsls	r0, r1, #30
   1d6f0:	f001 0304 	and.w	r3, r1, #4
   1d6f4:	d55d      	bpl.n	1d7b2 <spi_nrfx_transceive+0x1fe>
			return NRF_SPI_MODE_2;
   1d6f6:	2b00      	cmp	r3, #0
   1d6f8:	bf14      	ite	ne
   1d6fa:	2303      	movne	r3, #3
   1d6fc:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1d6fe:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   1d700:	f3c1 1100 	ubfx	r1, r1, #4, #1
   1d704:	d059      	beq.n	1d7ba <spi_nrfx_transceive+0x206>
   1d706:	2b03      	cmp	r3, #3
   1d708:	d05a      	beq.n	1d7c0 <spi_nrfx_transceive+0x20c>
   1d70a:	2b01      	cmp	r3, #1
   1d70c:	d101      	bne.n	1d712 <spi_nrfx_transceive+0x15e>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1d70e:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
   1d712:	4b41      	ldr	r3, [pc, #260]	; (1d818 <spi_nrfx_transceive+0x264>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1d714:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
   1d718:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
   1d71a:	4299      	cmp	r1, r3
   1d71c:	d953      	bls.n	1d7c6 <spi_nrfx_transceive+0x212>
	} else if (frequency < 500000) {
   1d71e:	4b3f      	ldr	r3, [pc, #252]	; (1d81c <spi_nrfx_transceive+0x268>)
   1d720:	4299      	cmp	r1, r3
   1d722:	d953      	bls.n	1d7cc <spi_nrfx_transceive+0x218>
	} else if (frequency < 1000000) {
   1d724:	4b3e      	ldr	r3, [pc, #248]	; (1d820 <spi_nrfx_transceive+0x26c>)
   1d726:	4299      	cmp	r1, r3
   1d728:	d953      	bls.n	1d7d2 <spi_nrfx_transceive+0x21e>
	} else if (frequency < 2000000) {
   1d72a:	4b3e      	ldr	r3, [pc, #248]	; (1d824 <spi_nrfx_transceive+0x270>)
   1d72c:	4299      	cmp	r1, r3
   1d72e:	d953      	bls.n	1d7d8 <spi_nrfx_transceive+0x224>
	} else if (frequency < 4000000) {
   1d730:	4b3d      	ldr	r3, [pc, #244]	; (1d828 <spi_nrfx_transceive+0x274>)
   1d732:	4299      	cmp	r1, r3
   1d734:	d953      	bls.n	1d7de <spi_nrfx_transceive+0x22a>
		return NRF_SPI_FREQ_8M;
   1d736:	4b3d      	ldr	r3, [pc, #244]	; (1d82c <spi_nrfx_transceive+0x278>)
   1d738:	4299      	cmp	r1, r3
   1d73a:	bf34      	ite	cc
   1d73c:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   1d740:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   1d744:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   1d748:	2301      	movs	r3, #1
   1d74a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   1d74e:	2f00      	cmp	r7, #0
   1d750:	d048      	beq.n	1d7e4 <spi_nrfx_transceive+0x230>
		ctx->current_tx = tx_bufs->buffers;
   1d752:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   1d754:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   1d756:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   1d758:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1d75a:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1d75c:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1d75e:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   1d760:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   1d762:	2e00      	cmp	r6, #0
   1d764:	d043      	beq.n	1d7ee <spi_nrfx_transceive+0x23a>
		ctx->current_rx = rx_bufs->buffers;
   1d766:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   1d768:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   1d76a:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   1d76c:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1d76e:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1d770:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1d772:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   1d774:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   1d776:	2200      	movs	r2, #0
   1d778:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   1d77a:	2101      	movs	r1, #1
   1d77c:	4620      	mov	r0, r4
   1d77e:	f008 fb54 	bl	25e2a <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1d782:	4640      	mov	r0, r8
   1d784:	f7ff fe7c 	bl	1d480 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   1d788:	f04f 32ff 	mov.w	r2, #4294967295
   1d78c:	f04f 33ff 	mov.w	r3, #4294967295
   1d790:	f104 0020 	add.w	r0, r4, #32
   1d794:	f002 fa44 	bl	1fc20 <z_impl_k_sem_take>
	status = ctx->sync_status;
   1d798:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   1d79a:	e735      	b.n	1d608 <spi_nrfx_transceive+0x54>
   1d79c:	4b17      	ldr	r3, [pc, #92]	; (1d7fc <spi_nrfx_transceive+0x248>)
   1d79e:	4916      	ldr	r1, [pc, #88]	; (1d7f8 <spi_nrfx_transceive+0x244>)
		LOG_INF("CS control inhibited (no GPIO device)");
   1d7a0:	4823      	ldr	r0, [pc, #140]	; (1d830 <spi_nrfx_transceive+0x27c>)
   1d7a2:	1ac9      	subs	r1, r1, r3
   1d7a4:	08c9      	lsrs	r1, r1, #3
   1d7a6:	0189      	lsls	r1, r1, #6
   1d7a8:	f041 0103 	orr.w	r1, r1, #3
   1d7ac:	f004 f9d9 	bl	21b62 <log_0>
   1d7b0:	e79a      	b.n	1d6e8 <spi_nrfx_transceive+0x134>
			return NRF_SPI_MODE_0;
   1d7b2:	3b00      	subs	r3, #0
   1d7b4:	bf18      	it	ne
   1d7b6:	2301      	movne	r3, #1
   1d7b8:	e7a1      	b.n	1d6fe <spi_nrfx_transceive+0x14a>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1d7ba:	f041 0104 	orr.w	r1, r1, #4
        break;
   1d7be:	e7a8      	b.n	1d712 <spi_nrfx_transceive+0x15e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1d7c0:	f041 0106 	orr.w	r1, r1, #6
        break;
   1d7c4:	e7a5      	b.n	1d712 <spi_nrfx_transceive+0x15e>
		return NRF_SPI_FREQ_125K;
   1d7c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1d7ca:	e7bb      	b.n	1d744 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_250K;
   1d7cc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   1d7d0:	e7b8      	b.n	1d744 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_500K;
   1d7d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   1d7d6:	e7b5      	b.n	1d744 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_1M;
   1d7d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1d7dc:	e7b2      	b.n	1d744 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_2M;
   1d7de:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1d7e2:	e7af      	b.n	1d744 <spi_nrfx_transceive+0x190>
		ctx->tx_count = 0;
   1d7e4:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   1d7e8:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   1d7ec:	e7b9      	b.n	1d762 <spi_nrfx_transceive+0x1ae>
		ctx->rx_count = 0;
   1d7ee:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   1d7f2:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   1d7f6:	e7be      	b.n	1d776 <spi_nrfx_transceive+0x1c2>
   1d7f8:	00027120 	.word	0x00027120
   1d7fc:	00026fc8 	.word	0x00026fc8
   1d800:	0002cd99 	.word	0x0002cd99
   1d804:	0002cdbb 	.word	0x0002cdbb
   1d808:	0002cdda 	.word	0x0002cdda
   1d80c:	0002cdfd 	.word	0x0002cdfd
   1d810:	0001e847 	.word	0x0001e847
   1d814:	0002ce2c 	.word	0x0002ce2c
   1d818:	0003d08f 	.word	0x0003d08f
   1d81c:	0007a11f 	.word	0x0007a11f
   1d820:	000f423f 	.word	0x000f423f
   1d824:	001e847f 	.word	0x001e847f
   1d828:	003d08ff 	.word	0x003d08ff
   1d82c:	007a1200 	.word	0x007a1200
   1d830:	0002ce5d 	.word	0x0002ce5d

0001d834 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1d834:	4b02      	ldr	r3, [pc, #8]	; (1d840 <flash_nrf_pages_layout+0xc>)
   1d836:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1d838:	2301      	movs	r3, #1
   1d83a:	6013      	str	r3, [r2, #0]
}
   1d83c:	4770      	bx	lr
   1d83e:	bf00      	nop
   1d840:	2000eb40 	.word	0x2000eb40

0001d844 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1d844:	4800      	ldr	r0, [pc, #0]	; (1d848 <flash_nrf_get_parameters+0x4>)
   1d846:	4770      	bx	lr
   1d848:	00028934 	.word	0x00028934

0001d84c <flash_nrf_read>:
{
   1d84c:	b570      	push	{r4, r5, r6, lr}
   1d84e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1d850:	4628      	mov	r0, r5
   1d852:	4619      	mov	r1, r3
{
   1d854:	4616      	mov	r6, r2
   1d856:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1d858:	f008 fb30 	bl	25ebc <is_regular_addr_valid>
   1d85c:	b970      	cbnz	r0, 1d87c <flash_nrf_read+0x30>
   1d85e:	4a0c      	ldr	r2, [pc, #48]	; (1d890 <flash_nrf_read+0x44>)
   1d860:	4b0c      	ldr	r3, [pc, #48]	; (1d894 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d862:	480d      	ldr	r0, [pc, #52]	; (1d898 <flash_nrf_read+0x4c>)
   1d864:	1a9b      	subs	r3, r3, r2
   1d866:	08db      	lsrs	r3, r3, #3
   1d868:	019b      	lsls	r3, r3, #6
   1d86a:	f043 0301 	orr.w	r3, r3, #1
   1d86e:	4622      	mov	r2, r4
   1d870:	4629      	mov	r1, r5
   1d872:	f004 f997 	bl	21ba4 <log_2>
		return -EINVAL;
   1d876:	f06f 0015 	mvn.w	r0, #21
}
   1d87a:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1d87c:	b134      	cbz	r4, 1d88c <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1d87e:	4622      	mov	r2, r4
   1d880:	4629      	mov	r1, r5
   1d882:	4630      	mov	r0, r6
   1d884:	f006 f979 	bl	23b7a <memcpy>
	return 0;
   1d888:	2000      	movs	r0, #0
   1d88a:	e7f6      	b.n	1d87a <flash_nrf_read+0x2e>
		return 0;
   1d88c:	4620      	mov	r0, r4
   1d88e:	e7f4      	b.n	1d87a <flash_nrf_read+0x2e>
   1d890:	00026fc8 	.word	0x00026fc8
   1d894:	000270c0 	.word	0x000270c0
   1d898:	0002ce90 	.word	0x0002ce90

0001d89c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1d89c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d89e:	2201      	movs	r2, #1
   1d8a0:	4611      	mov	r1, r2
   1d8a2:	4807      	ldr	r0, [pc, #28]	; (1d8c0 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d8a4:	4c07      	ldr	r4, [pc, #28]	; (1d8c4 <nrf_flash_init+0x28>)
   1d8a6:	f008 ff95 	bl	267d4 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1d8aa:	f000 f97d 	bl	1dba8 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1d8ae:	f008 fc43 	bl	26138 <nrfx_nvmc_flash_page_count_get>
   1d8b2:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1d8b4:	f008 fc3c 	bl	26130 <nrfx_nvmc_flash_page_size_get>
   1d8b8:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1d8ba:	2000      	movs	r0, #0
   1d8bc:	bd10      	pop	{r4, pc}
   1d8be:	bf00      	nop
   1d8c0:	2000eb48 	.word	0x2000eb48
   1d8c4:	2000eb40 	.word	0x2000eb40

0001d8c8 <flash_nrf_erase>:
{
   1d8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8ca:	b087      	sub	sp, #28
   1d8cc:	460e      	mov	r6, r1
   1d8ce:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d8d0:	f008 fc2e 	bl	26130 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1d8d4:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1d8d6:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1d8d8:	4630      	mov	r0, r6
   1d8da:	f008 faef 	bl	25ebc <is_regular_addr_valid>
   1d8de:	b388      	cbz	r0, 1d944 <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1d8e0:	fbb6 f3f7 	udiv	r3, r6, r7
   1d8e4:	fb07 6313 	mls	r3, r7, r3, r6
   1d8e8:	b923      	cbnz	r3, 1d8f4 <flash_nrf_erase+0x2c>
   1d8ea:	fbb5 f4f7 	udiv	r4, r5, r7
   1d8ee:	fb07 5414 	mls	r4, r7, r4, r5
   1d8f2:	b184      	cbz	r4, 1d916 <flash_nrf_erase+0x4e>
   1d8f4:	4a25      	ldr	r2, [pc, #148]	; (1d98c <flash_nrf_erase+0xc4>)
   1d8f6:	4b26      	ldr	r3, [pc, #152]	; (1d990 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1d8f8:	4826      	ldr	r0, [pc, #152]	; (1d994 <flash_nrf_erase+0xcc>)
   1d8fa:	1a9b      	subs	r3, r3, r2
   1d8fc:	08db      	lsrs	r3, r3, #3
   1d8fe:	019b      	lsls	r3, r3, #6
   1d900:	f043 0301 	orr.w	r3, r3, #1
   1d904:	462a      	mov	r2, r5
   1d906:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d908:	f004 f94c 	bl	21ba4 <log_2>
		return -EINVAL;
   1d90c:	f06f 0415 	mvn.w	r4, #21
}
   1d910:	4620      	mov	r0, r4
   1d912:	b007      	add	sp, #28
   1d914:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1d916:	42bd      	cmp	r5, r7
   1d918:	d3fa      	bcc.n	1d910 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1d91a:	f04f 33ff 	mov.w	r3, #4294967295
   1d91e:	f04f 32ff 	mov.w	r2, #4294967295
   1d922:	481d      	ldr	r0, [pc, #116]	; (1d998 <flash_nrf_erase+0xd0>)
   1d924:	f002 f97c 	bl	1fc20 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1d928:	f008 fb00 	bl	25f2c <nrf_flash_sync_is_required>
   1d92c:	ab02      	add	r3, sp, #8
   1d92e:	4601      	mov	r1, r0
   1d930:	b998      	cbnz	r0, 1d95a <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1d932:	2210      	movs	r2, #16
   1d934:	4618      	mov	r0, r3
   1d936:	f006 f94b 	bl	23bd0 <memset>
   1d93a:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1d93e:	f008 fad0 	bl	25ee2 <erase_op>
   1d942:	e01d      	b.n	1d980 <flash_nrf_erase+0xb8>
   1d944:	4a11      	ldr	r2, [pc, #68]	; (1d98c <flash_nrf_erase+0xc4>)
   1d946:	4b12      	ldr	r3, [pc, #72]	; (1d990 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1d948:	4814      	ldr	r0, [pc, #80]	; (1d99c <flash_nrf_erase+0xd4>)
   1d94a:	1a9b      	subs	r3, r3, r2
   1d94c:	08db      	lsrs	r3, r3, #3
   1d94e:	019b      	lsls	r3, r3, #6
   1d950:	f043 0301 	orr.w	r3, r3, #1
   1d954:	462a      	mov	r2, r5
   1d956:	4631      	mov	r1, r6
   1d958:	e7d6      	b.n	1d908 <flash_nrf_erase+0x40>
	struct flash_context context = {
   1d95a:	2210      	movs	r2, #16
   1d95c:	4621      	mov	r1, r4
   1d95e:	4618      	mov	r0, r3
   1d960:	f006 f936 	bl	23bd0 <memset>
   1d964:	2201      	movs	r2, #1
   1d966:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1d96a:	4a0d      	ldr	r2, [pc, #52]	; (1d9a0 <flash_nrf_erase+0xd8>)
   1d96c:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1d970:	480c      	ldr	r0, [pc, #48]	; (1d9a4 <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1d972:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1d976:	f000 f921 	bl	1dbbc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1d97a:	4668      	mov	r0, sp
   1d97c:	f7e4 fe8c 	bl	2698 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1d980:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1d982:	4805      	ldr	r0, [pc, #20]	; (1d998 <flash_nrf_erase+0xd0>)
   1d984:	f002 f926 	bl	1fbd4 <z_impl_k_sem_give>
}
   1d988:	e7c2      	b.n	1d910 <flash_nrf_erase+0x48>
   1d98a:	bf00      	nop
   1d98c:	00026fc8 	.word	0x00026fc8
   1d990:	000270c0 	.word	0x000270c0
   1d994:	0002cead 	.word	0x0002cead
   1d998:	2000eb48 	.word	0x2000eb48
   1d99c:	0002ce90 	.word	0x0002ce90
   1d9a0:	00025ee3 	.word	0x00025ee3
   1d9a4:	00015e64 	.word	0x00015e64

0001d9a8 <write_op>:
{
   1d9a8:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1d9aa:	7b03      	ldrb	r3, [r0, #12]
{
   1d9ac:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1d9ae:	b10b      	cbz	r3, 1d9b4 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1d9b0:	f000 f90c 	bl	1dbcc <nrf_flash_sync_get_timestamp_begin>
{
   1d9b4:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1d9b6:	68a3      	ldr	r3, [r4, #8]
   1d9b8:	2b03      	cmp	r3, #3
   1d9ba:	d806      	bhi.n	1d9ca <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1d9bc:	4a12      	ldr	r2, [pc, #72]	; (1da08 <write_op+0x60>)
   1d9be:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d9c2:	07db      	lsls	r3, r3, #31
   1d9c4:	d5fb      	bpl.n	1d9be <write_op+0x16>
	return FLASH_OP_DONE;
   1d9c6:	2000      	movs	r0, #0
}
   1d9c8:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1d9ca:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1d9cc:	6860      	ldr	r0, [r4, #4]
   1d9ce:	6819      	ldr	r1, [r3, #0]
   1d9d0:	f000 fe68 	bl	1e6a4 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1d9d4:	6863      	ldr	r3, [r4, #4]
   1d9d6:	3304      	adds	r3, #4
   1d9d8:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1d9da:	6823      	ldr	r3, [r4, #0]
   1d9dc:	3304      	adds	r3, #4
   1d9de:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1d9e0:	68a3      	ldr	r3, [r4, #8]
   1d9e2:	3b04      	subs	r3, #4
   1d9e4:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1d9e6:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1d9e8:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1d9ea:	2b00      	cmp	r3, #0
   1d9ec:	d0e3      	beq.n	1d9b6 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1d9ee:	4628      	mov	r0, r5
   1d9f0:	f7e4 fece 	bl	2790 <nrf_flash_sync_check_time_limit>
   1d9f4:	2800      	cmp	r0, #0
   1d9f6:	d0de      	beq.n	1d9b6 <write_op+0xe>
   1d9f8:	4a03      	ldr	r2, [pc, #12]	; (1da08 <write_op+0x60>)
   1d9fa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1d9fe:	07d9      	lsls	r1, r3, #31
   1da00:	d5fb      	bpl.n	1d9fa <write_op+0x52>
				return FLASH_OP_ONGOING;
   1da02:	f04f 30ff 	mov.w	r0, #4294967295
   1da06:	e7df      	b.n	1d9c8 <write_op+0x20>
   1da08:	4001e000 	.word	0x4001e000

0001da0c <flash_nrf_write>:
{
   1da0c:	b570      	push	{r4, r5, r6, lr}
   1da0e:	460d      	mov	r5, r1
   1da10:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1da12:	4619      	mov	r1, r3
   1da14:	4628      	mov	r0, r5
{
   1da16:	4616      	mov	r6, r2
   1da18:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1da1a:	f008 fa4f 	bl	25ebc <is_regular_addr_valid>
   1da1e:	b980      	cbnz	r0, 1da42 <flash_nrf_write+0x36>
   1da20:	4a23      	ldr	r2, [pc, #140]	; (1dab0 <flash_nrf_write+0xa4>)
   1da22:	4b24      	ldr	r3, [pc, #144]	; (1dab4 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1da24:	4824      	ldr	r0, [pc, #144]	; (1dab8 <flash_nrf_write+0xac>)
   1da26:	1a9b      	subs	r3, r3, r2
   1da28:	08db      	lsrs	r3, r3, #3
   1da2a:	019b      	lsls	r3, r3, #6
   1da2c:	f043 0301 	orr.w	r3, r3, #1
   1da30:	4622      	mov	r2, r4
   1da32:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1da34:	f004 f8b6 	bl	21ba4 <log_2>
		return -EINVAL;
   1da38:	f06f 0415 	mvn.w	r4, #21
}
   1da3c:	4620      	mov	r0, r4
   1da3e:	b006      	add	sp, #24
   1da40:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1da42:	ea44 0305 	orr.w	r3, r4, r5
   1da46:	079b      	lsls	r3, r3, #30
   1da48:	d00a      	beq.n	1da60 <flash_nrf_write+0x54>
   1da4a:	4a19      	ldr	r2, [pc, #100]	; (1dab0 <flash_nrf_write+0xa4>)
   1da4c:	4b19      	ldr	r3, [pc, #100]	; (1dab4 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1da4e:	481b      	ldr	r0, [pc, #108]	; (1dabc <flash_nrf_write+0xb0>)
   1da50:	1a9b      	subs	r3, r3, r2
   1da52:	08db      	lsrs	r3, r3, #3
   1da54:	019b      	lsls	r3, r3, #6
   1da56:	f043 0301 	orr.w	r3, r3, #1
   1da5a:	4622      	mov	r2, r4
   1da5c:	4629      	mov	r1, r5
   1da5e:	e7e9      	b.n	1da34 <flash_nrf_write+0x28>
	if (!len) {
   1da60:	2c00      	cmp	r4, #0
   1da62:	d0eb      	beq.n	1da3c <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1da64:	f04f 33ff 	mov.w	r3, #4294967295
   1da68:	f04f 32ff 	mov.w	r2, #4294967295
   1da6c:	4814      	ldr	r0, [pc, #80]	; (1dac0 <flash_nrf_write+0xb4>)
   1da6e:	f002 f8d7 	bl	1fc20 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1da72:	f008 fa5b 	bl	25f2c <nrf_flash_sync_is_required>
   1da76:	4603      	mov	r3, r0
	struct flash_context context = {
   1da78:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1da7c:	a802      	add	r0, sp, #8
   1da7e:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1da80:	b18b      	cbz	r3, 1daa6 <flash_nrf_write+0x9a>
	struct flash_context context = {
   1da82:	2301      	movs	r3, #1
   1da84:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1da88:	4b0e      	ldr	r3, [pc, #56]	; (1dac4 <flash_nrf_write+0xb8>)
   1da8a:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1da8e:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1da92:	f000 f893 	bl	1dbbc <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1da96:	4668      	mov	r0, sp
   1da98:	f7e4 fdfe 	bl	2698 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1da9c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1da9e:	4808      	ldr	r0, [pc, #32]	; (1dac0 <flash_nrf_write+0xb4>)
   1daa0:	f002 f898 	bl	1fbd4 <z_impl_k_sem_give>
}
   1daa4:	e7ca      	b.n	1da3c <flash_nrf_write+0x30>
	struct flash_context context = {
   1daa6:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1daaa:	f7ff ff7d 	bl	1d9a8 <write_op>
   1daae:	e7f5      	b.n	1da9c <flash_nrf_write+0x90>
   1dab0:	00026fc8 	.word	0x00026fc8
   1dab4:	000270c0 	.word	0x000270c0
   1dab8:	0002ce90 	.word	0x0002ce90
   1dabc:	0002cecc 	.word	0x0002cecc
   1dac0:	2000eb48 	.word	0x2000eb48
   1dac4:	0001d9a9 	.word	0x0001d9a9

0001dac8 <time_slot_callback_work>:
{
   1dac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   1daca:	e9d3 2000 	ldrd	r2, r0, [r3]
   1dace:	4790      	blx	r2
   1dad0:	4604      	mov	r4, r0
   1dad2:	b998      	cbnz	r0, 1dafc <time_slot_callback_work+0x34>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1dad4:	f10d 010f 	add.w	r1, sp, #15
   1dad8:	f10d 000e 	add.w	r0, sp, #14
   1dadc:	f7f6 f856 	bl	13b8c <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1dae0:	4623      	mov	r3, r4
   1dae2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1dae6:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1daea:	9400      	str	r4, [sp, #0]
   1daec:	4621      	mov	r1, r4
   1daee:	f7f3 fc9d 	bl	1142c <ticker_stop>
		_ticker_sync_context.result = 0;
   1daf2:	4b03      	ldr	r3, [pc, #12]	; (1db00 <time_slot_callback_work+0x38>)
   1daf4:	60dc      	str	r4, [r3, #12]
	z_impl_k_sem_give(sem);
   1daf6:	4803      	ldr	r0, [pc, #12]	; (1db04 <time_slot_callback_work+0x3c>)
   1daf8:	f002 f86c 	bl	1fbd4 <z_impl_k_sem_give>
}
   1dafc:	b004      	add	sp, #16
   1dafe:	bd10      	pop	{r4, pc}
   1db00:	2000eb60 	.word	0x2000eb60
   1db04:	2000eb70 	.word	0x2000eb70

0001db08 <time_slot_delay>:
{
   1db08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1db0c:	b08d      	sub	sp, #52	; 0x34
   1db0e:	4606      	mov	r6, r0
   1db10:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1db12:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1db16:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   1db1a:	4690      	mov	r8, r2
   1db1c:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1db1e:	f7f6 f835 	bl	13b8c <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   1db22:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   1db26:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1db2a:	9700      	str	r7, [sp, #0]
   1db2c:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   1db2e:	3501      	adds	r5, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   1db30:	4633      	mov	r3, r6
   1db32:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1db36:	e9cd 8905 	strd	r8, r9, [sp, #20]
   1db3a:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1db3e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1db42:	b2ea      	uxtb	r2, r5
   1db44:	4621      	mov	r1, r4
   1db46:	f7f3 fbe7 	bl	11318 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1db4a:	f030 0302 	bics.w	r3, r0, #2
   1db4e:	d00d      	beq.n	1db6c <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   1db50:	4b08      	ldr	r3, [pc, #32]	; (1db74 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1db52:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   1db56:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1db58:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1db5c:	9400      	str	r4, [sp, #0]
   1db5e:	4623      	mov	r3, r4
   1db60:	4621      	mov	r1, r4
   1db62:	f7f3 fc63 	bl	1142c <ticker_stop>
   1db66:	4804      	ldr	r0, [pc, #16]	; (1db78 <time_slot_delay+0x70>)
   1db68:	f002 f834 	bl	1fbd4 <z_impl_k_sem_give>
}
   1db6c:	b00d      	add	sp, #52	; 0x34
   1db6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1db72:	bf00      	nop
   1db74:	2000eb60 	.word	0x2000eb60
   1db78:	2000eb70 	.word	0x2000eb70

0001db7c <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   1db7c:	4a01      	ldr	r2, [pc, #4]	; (1db84 <time_slot_callback_prepare+0x8>)
   1db7e:	2131      	movs	r1, #49	; 0x31
   1db80:	f7ff bfc2 	b.w	1db08 <time_slot_delay>
   1db84:	0001db89 	.word	0x0001db89

0001db88 <time_slot_callback_abort>:
{
   1db88:	b570      	push	{r4, r5, r6, lr}
   1db8a:	4604      	mov	r4, r0
   1db8c:	461d      	mov	r5, r3
	ll_radio_state_abort();
   1db8e:	f7f6 f803 	bl	13b98 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   1db92:	462b      	mov	r3, r5
   1db94:	4620      	mov	r0, r4
   1db96:	4a03      	ldr	r2, [pc, #12]	; (1dba4 <time_slot_callback_abort+0x1c>)
}
   1db98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   1db9c:	2106      	movs	r1, #6
   1db9e:	f7ff bfb3 	b.w	1db08 <time_slot_delay>
   1dba2:	bf00      	nop
   1dba4:	0001dac9 	.word	0x0001dac9

0001dba8 <nrf_flash_sync_init>:
{
   1dba8:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1dbaa:	2201      	movs	r2, #1
   1dbac:	2100      	movs	r1, #0
   1dbae:	4802      	ldr	r0, [pc, #8]	; (1dbb8 <nrf_flash_sync_init+0x10>)
   1dbb0:	f008 fe10 	bl	267d4 <z_impl_k_sem_init>
}
   1dbb4:	2000      	movs	r0, #0
   1dbb6:	bd08      	pop	{r3, pc}
   1dbb8:	2000eb70 	.word	0x2000eb70

0001dbbc <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   1dbbc:	4b02      	ldr	r3, [pc, #8]	; (1dbc8 <nrf_flash_sync_set_context+0xc>)
   1dbbe:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   1dbc2:	e9c3 2000 	strd	r2, r0, [r3]
}
   1dbc6:	4770      	bx	lr
   1dbc8:	2000eb60 	.word	0x2000eb60

0001dbcc <nrf_flash_sync_get_timestamp_begin>:
{
   1dbcc:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   1dbce:	f7f3 fc6f 	bl	114b0 <ticker_ticks_now_get>
   1dbd2:	4b01      	ldr	r3, [pc, #4]	; (1dbd8 <nrf_flash_sync_get_timestamp_begin+0xc>)
   1dbd4:	6098      	str	r0, [r3, #8]
}
   1dbd6:	bd08      	pop	{r3, pc}
   1dbd8:	2000eb60 	.word	0x2000eb60

0001dbdc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1dbdc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1dbde:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1dbe2:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1dbe4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1dbe6:	6002      	str	r2, [r0, #0]
}
   1dbe8:	4802      	ldr	r0, [pc, #8]	; (1dbf4 <nrf_gpio_pin_port_decode+0x18>)
   1dbea:	bf18      	it	ne
   1dbec:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1dbf0:	4770      	bx	lr
   1dbf2:	bf00      	nop
   1dbf4:	50000300 	.word	0x50000300

0001dbf8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1dbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1dbfa:	794b      	ldrb	r3, [r1, #5]
   1dbfc:	2b01      	cmp	r3, #1
   1dbfe:	d029      	beq.n	1dc54 <uarte_nrfx_configure+0x5c>
   1dc00:	2b03      	cmp	r3, #3
   1dc02:	d124      	bne.n	1dc4e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1dc04:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1dc06:	798b      	ldrb	r3, [r1, #6]
   1dc08:	2b03      	cmp	r3, #3
   1dc0a:	d120      	bne.n	1dc4e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1dc0c:	79cc      	ldrb	r4, [r1, #7]
   1dc0e:	b124      	cbz	r4, 1dc1a <uarte_nrfx_configure+0x22>
   1dc10:	2c01      	cmp	r4, #1
   1dc12:	d11c      	bne.n	1dc4e <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1dc14:	6843      	ldr	r3, [r0, #4]
   1dc16:	791b      	ldrb	r3, [r3, #4]
   1dc18:	b1cb      	cbz	r3, 1dc4e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1dc1a:	790a      	ldrb	r2, [r1, #4]
   1dc1c:	b112      	cbz	r2, 1dc24 <uarte_nrfx_configure+0x2c>
   1dc1e:	2a02      	cmp	r2, #2
   1dc20:	d115      	bne.n	1dc4e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1dc22:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1dc24:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1dc26:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1dc28:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1dc2c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1dc2e:	d065      	beq.n	1dcfc <uarte_nrfx_configure+0x104>
   1dc30:	d82d      	bhi.n	1dc8e <uarte_nrfx_configure+0x96>
   1dc32:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1dc36:	d064      	beq.n	1dd02 <uarte_nrfx_configure+0x10a>
   1dc38:	d816      	bhi.n	1dc68 <uarte_nrfx_configure+0x70>
   1dc3a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1dc3e:	d062      	beq.n	1dd06 <uarte_nrfx_configure+0x10e>
   1dc40:	d80a      	bhi.n	1dc58 <uarte_nrfx_configure+0x60>
   1dc42:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1dc46:	d061      	beq.n	1dd0c <uarte_nrfx_configure+0x114>
   1dc48:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1dc4c:	d061      	beq.n	1dd12 <uarte_nrfx_configure+0x11a>
   1dc4e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1dc52:	e052      	b.n	1dcfa <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   1dc54:	2600      	movs	r6, #0
   1dc56:	e7d6      	b.n	1dc06 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1dc58:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1dc5c:	d05c      	beq.n	1dd18 <uarte_nrfx_configure+0x120>
   1dc5e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1dc62:	d1f4      	bne.n	1dc4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1dc64:	4b37      	ldr	r3, [pc, #220]	; (1dd44 <uarte_nrfx_configure+0x14c>)
   1dc66:	e03c      	b.n	1dce2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1dc68:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1dc6c:	d057      	beq.n	1dd1e <uarte_nrfx_configure+0x126>
   1dc6e:	d807      	bhi.n	1dc80 <uarte_nrfx_configure+0x88>
   1dc70:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1dc74:	d055      	beq.n	1dd22 <uarte_nrfx_configure+0x12a>
   1dc76:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1dc7a:	d1e8      	bne.n	1dc4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1dc7c:	4b32      	ldr	r3, [pc, #200]	; (1dd48 <uarte_nrfx_configure+0x150>)
   1dc7e:	e030      	b.n	1dce2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1dc80:	f647 2712 	movw	r7, #31250	; 0x7a12
   1dc84:	42bb      	cmp	r3, r7
   1dc86:	d1e2      	bne.n	1dc4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1dc88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1dc8c:	e029      	b.n	1dce2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1dc8e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1dc92:	d048      	beq.n	1dd26 <uarte_nrfx_configure+0x12e>
   1dc94:	d813      	bhi.n	1dcbe <uarte_nrfx_configure+0xc6>
   1dc96:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1dc9a:	d047      	beq.n	1dd2c <uarte_nrfx_configure+0x134>
   1dc9c:	d809      	bhi.n	1dcb2 <uarte_nrfx_configure+0xba>
   1dc9e:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1dca2:	42bb      	cmp	r3, r7
   1dca4:	d044      	beq.n	1dd30 <uarte_nrfx_configure+0x138>
   1dca6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1dcaa:	d1d0      	bne.n	1dc4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1dcac:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1dcb0:	e017      	b.n	1dce2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1dcb2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1dcb6:	d1ca      	bne.n	1dc4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1dcb8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1dcbc:	e011      	b.n	1dce2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1dcbe:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1dcc2:	d038      	beq.n	1dd36 <uarte_nrfx_configure+0x13e>
   1dcc4:	d808      	bhi.n	1dcd8 <uarte_nrfx_configure+0xe0>
   1dcc6:	4f21      	ldr	r7, [pc, #132]	; (1dd4c <uarte_nrfx_configure+0x154>)
   1dcc8:	42bb      	cmp	r3, r7
   1dcca:	d037      	beq.n	1dd3c <uarte_nrfx_configure+0x144>
   1dccc:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1dcd0:	d1bd      	bne.n	1dc4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1dcd2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1dcd6:	e004      	b.n	1dce2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1dcd8:	4f1d      	ldr	r7, [pc, #116]	; (1dd50 <uarte_nrfx_configure+0x158>)
   1dcda:	42bb      	cmp	r3, r7
   1dcdc:	d1b7      	bne.n	1dc4e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1dcde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1dce2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1dce6:	68c3      	ldr	r3, [r0, #12]
   1dce8:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1dcea:	4334      	orrs	r4, r6
   1dcec:	4322      	orrs	r2, r4
   1dcee:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1dcf0:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1dcf4:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1dcf8:	2000      	movs	r0, #0
}
   1dcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1dcfc:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1dd00:	e7ef      	b.n	1dce2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1dd02:	4b14      	ldr	r3, [pc, #80]	; (1dd54 <uarte_nrfx_configure+0x15c>)
   1dd04:	e7ed      	b.n	1dce2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1dd06:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1dd0a:	e7ea      	b.n	1dce2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1dd0c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1dd10:	e7e7      	b.n	1dce2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1dd12:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1dd16:	e7e4      	b.n	1dce2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1dd18:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1dd1c:	e7e1      	b.n	1dce2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1dd1e:	4b0e      	ldr	r3, [pc, #56]	; (1dd58 <uarte_nrfx_configure+0x160>)
   1dd20:	e7df      	b.n	1dce2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1dd22:	4b0e      	ldr	r3, [pc, #56]	; (1dd5c <uarte_nrfx_configure+0x164>)
   1dd24:	e7dd      	b.n	1dce2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1dd26:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1dd2a:	e7da      	b.n	1dce2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1dd2c:	4b0c      	ldr	r3, [pc, #48]	; (1dd60 <uarte_nrfx_configure+0x168>)
   1dd2e:	e7d8      	b.n	1dce2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1dd30:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1dd34:	e7d5      	b.n	1dce2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1dd36:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1dd3a:	e7d2      	b.n	1dce2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1dd3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1dd40:	e7cf      	b.n	1dce2 <uarte_nrfx_configure+0xea>
   1dd42:	bf00      	nop
   1dd44:	0013b000 	.word	0x0013b000
   1dd48:	004ea000 	.word	0x004ea000
   1dd4c:	0003d090 	.word	0x0003d090
   1dd50:	000f4240 	.word	0x000f4240
   1dd54:	00275000 	.word	0x00275000
   1dd58:	0075c000 	.word	0x0075c000
   1dd5c:	003af000 	.word	0x003af000
   1dd60:	013a9000 	.word	0x013a9000

0001dd64 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1dd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return dev->data;
   1dd68:	68c7      	ldr	r7, [r0, #12]
{
   1dd6a:	4606      	mov	r6, r0
   1dd6c:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1dd6e:	f008 fd41 	bl	267f4 <k_is_in_isr>
   1dd72:	b9b8      	cbnz	r0, 1dda4 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   1dd74:	4b28      	ldr	r3, [pc, #160]	; (1de18 <uarte_nrfx_poll_out+0xb4>)
   1dd76:	781b      	ldrb	r3, [r3, #0]
   1dd78:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1dd7c:	6872      	ldr	r2, [r6, #4]
   1dd7e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   1dd80:	b193      	cbz	r3, 1dda8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1dd82:	f04f 0320 	mov.w	r3, #32
   1dd86:	f3ef 8411 	mrs	r4, BASEPRI
   1dd8a:	f383 8811 	msr	BASEPRI, r3
   1dd8e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1dd92:	6870      	ldr	r0, [r6, #4]
   1dd94:	f008 f95e 	bl	26054 <is_tx_ready.isra.0>
   1dd98:	bb38      	cbnz	r0, 1ddea <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1dd9a:	f384 8811 	msr	BASEPRI, r4
   1dd9e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1dda2:	e7ee      	b.n	1dd82 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1dda4:	2301      	movs	r3, #1
   1dda6:	e7e9      	b.n	1dd7c <uarte_nrfx_poll_out+0x18>
   1dda8:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1ddaa:	6870      	ldr	r0, [r6, #4]
   1ddac:	f008 f952 	bl	26054 <is_tx_ready.isra.0>
   1ddb0:	b970      	cbnz	r0, 1ddd0 <uarte_nrfx_poll_out+0x6c>
   1ddb2:	2001      	movs	r0, #1
   1ddb4:	f008 f97e 	bl	260b4 <nrfx_busy_wait>
   1ddb8:	3c01      	subs	r4, #1
   1ddba:	d1f6      	bne.n	1ddaa <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1ddbc:	2100      	movs	r1, #0
   1ddbe:	2021      	movs	r0, #33	; 0x21
   1ddc0:	f001 fee8 	bl	1fb94 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1ddc4:	e7f0      	b.n	1dda8 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1ddc6:	f384 8811 	msr	BASEPRI, r4
   1ddca:	f3bf 8f6f 	isb	sy
}
   1ddce:	e7f5      	b.n	1ddbc <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   1ddd0:	f04f 0320 	mov.w	r3, #32
   1ddd4:	f3ef 8411 	mrs	r4, BASEPRI
   1ddd8:	f383 8811 	msr	BASEPRI, r3
   1dddc:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1dde0:	6870      	ldr	r0, [r6, #4]
   1dde2:	f008 f937 	bl	26054 <is_tx_ready.isra.0>
   1dde6:	2800      	cmp	r0, #0
   1dde8:	d0ed      	beq.n	1ddc6 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1ddea:	f807 8f10 	strb.w	r8, [r7, #16]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1ddee:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ddf0:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ddf2:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ddf6:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ddfa:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1ddfe:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1de02:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1de06:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1de0a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   1de0c:	f384 8811 	msr	BASEPRI, r4
   1de10:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   1de14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1de18:	2000f2c0 	.word	0x2000f2c0

0001de1c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1de1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1de20:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1de22:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   1de24:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   1de26:	460d      	mov	r5, r1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1de28:	2100      	movs	r1, #0
   1de2a:	682b      	ldr	r3, [r5, #0]
   1de2c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   1de30:	4606      	mov	r6, r0
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1de32:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1de34:	a801      	add	r0, sp, #4
   1de36:	9301      	str	r3, [sp, #4]
   1de38:	f7ff fed0 	bl	1dbdc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1de3c:	9a01      	ldr	r2, [sp, #4]
   1de3e:	2301      	movs	r3, #1
   1de40:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1de42:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1de46:	682b      	ldr	r3, [r5, #0]
   1de48:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1de4a:	a801      	add	r0, sp, #4
   1de4c:	f7ff fec6 	bl	1dbdc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1de50:	9b01      	ldr	r3, [sp, #4]
   1de52:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1de56:	2203      	movs	r2, #3
   1de58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1de5c:	686b      	ldr	r3, [r5, #4]
   1de5e:	1c58      	adds	r0, r3, #1
   1de60:	d008      	beq.n	1de74 <uarte_instance_init.constprop.0+0x58>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1de62:	a801      	add	r0, sp, #4
   1de64:	9301      	str	r3, [sp, #4]
   1de66:	f7ff feb9 	bl	1dbdc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1de6a:	9b01      	ldr	r3, [sp, #4]
   1de6c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1de70:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1de74:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   1de78:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1de7c:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1de80:	68ab      	ldr	r3, [r5, #8]
   1de82:	1c59      	adds	r1, r3, #1
   1de84:	d009      	beq.n	1de9a <uarte_instance_init.constprop.0+0x7e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1de86:	a801      	add	r0, sp, #4
   1de88:	9301      	str	r3, [sp, #4]
   1de8a:	f7ff fea7 	bl	1dbdc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1de8e:	9b01      	ldr	r3, [sp, #4]
   1de90:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1de94:	2200      	movs	r2, #0
   1de96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1de9a:	68eb      	ldr	r3, [r5, #12]
   1de9c:	1c5a      	adds	r2, r3, #1
   1de9e:	d013      	beq.n	1dec8 <uarte_instance_init.constprop.0+0xac>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1dea0:	a801      	add	r0, sp, #4
   1dea2:	9301      	str	r3, [sp, #4]
   1dea4:	f7ff fe9a 	bl	1dbdc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1dea8:	9a01      	ldr	r2, [sp, #4]
   1deaa:	2301      	movs	r3, #1
   1deac:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1deae:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1deb2:	68eb      	ldr	r3, [r5, #12]
   1deb4:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1deb6:	a801      	add	r0, sp, #4
   1deb8:	f7ff fe90 	bl	1dbdc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1debc:	9b01      	ldr	r3, [sp, #4]
   1debe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1dec2:	2203      	movs	r2, #3
   1dec4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   1dec8:	e9d5 3202 	ldrd	r3, r2, [r5, #8]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1decc:	68f1      	ldr	r1, [r6, #12]
    p_reg->PSEL.RTS = pselrts;
   1dece:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1ded2:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   1ded4:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1ded8:	4630      	mov	r0, r6
   1deda:	f7ff fe8d 	bl	1dbf8 <uarte_nrfx_configure>
	if (err) {
   1dede:	4680      	mov	r8, r0
   1dee0:	b9a8      	cbnz	r0, 1df0e <uarte_instance_init.constprop.0+0xf2>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   1dee2:	6873      	ldr	r3, [r6, #4]
   1dee4:	799b      	ldrb	r3, [r3, #6]
   1dee6:	b34b      	cbz	r3, 1df3c <uarte_instance_init.constprop.0+0x120>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1dee8:	f107 0012 	add.w	r0, r7, #18
   1deec:	f000 fbe8 	bl	1e6c0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1def0:	4b24      	ldr	r3, [pc, #144]	; (1df84 <uarte_instance_init.constprop.0+0x168>)
   1def2:	4298      	cmp	r0, r3
   1def4:	d00f      	beq.n	1df16 <uarte_instance_init.constprop.0+0xfa>
   1def6:	4b24      	ldr	r3, [pc, #144]	; (1df88 <uarte_instance_init.constprop.0+0x16c>)
   1def8:	4924      	ldr	r1, [pc, #144]	; (1df8c <uarte_instance_init.constprop.0+0x170>)
		LOG_ERR("Failed to allocate PPI Channel");
   1defa:	4825      	ldr	r0, [pc, #148]	; (1df90 <uarte_instance_init.constprop.0+0x174>)
   1defc:	1ac9      	subs	r1, r1, r3
   1defe:	08c9      	lsrs	r1, r1, #3
   1df00:	0189      	lsls	r1, r1, #6
   1df02:	f041 0101 	orr.w	r1, r1, #1
   1df06:	f003 fe2c 	bl	21b62 <log_0>
		return -EIO;
   1df0a:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1df0e:	4640      	mov	r0, r8
   1df10:	b002      	add	sp, #8
   1df12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1df16:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1df18:	00c3      	lsls	r3, r0, #3
   1df1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1df1e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1df22:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1df26:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1df2a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1df2e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1df32:	4a18      	ldr	r2, [pc, #96]	; (1df94 <uarte_instance_init.constprop.0+0x178>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1df34:	2301      	movs	r3, #1
   1df36:	4083      	lsls	r3, r0
   1df38:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1df3c:	2308      	movs	r3, #8
   1df3e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1df42:	686b      	ldr	r3, [r5, #4]
   1df44:	3301      	adds	r3, #1
   1df46:	d00c      	beq.n	1df62 <uarte_instance_init.constprop.0+0x146>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1df48:	2300      	movs	r3, #0
   1df4a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1df4e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1df52:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1df56:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1df5a:	2301      	movs	r3, #1
   1df5c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1df60:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   1df62:	6873      	ldr	r3, [r6, #4]
   1df64:	799b      	ldrb	r3, [r3, #6]
   1df66:	b91b      	cbnz	r3, 1df70 <uarte_instance_init.constprop.0+0x154>
    p_reg->INTENSET = mask;
   1df68:	f44f 7380 	mov.w	r3, #256	; 0x100
   1df6c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1df70:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1df72:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1df74:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1df78:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1df7c:	2301      	movs	r3, #1
   1df7e:	60a3      	str	r3, [r4, #8]
   1df80:	60e3      	str	r3, [r4, #12]
	return 0;
   1df82:	e7c4      	b.n	1df0e <uarte_instance_init.constprop.0+0xf2>
   1df84:	0bad0000 	.word	0x0bad0000
   1df88:	00026fc8 	.word	0x00026fc8
   1df8c:	00027128 	.word	0x00027128
   1df90:	0002cef4 	.word	0x0002cef4
   1df94:	4001f000 	.word	0x4001f000

0001df98 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1df98:	b530      	push	{r4, r5, lr}
   1df9a:	4b0a      	ldr	r3, [pc, #40]	; (1dfc4 <uarte_1_init+0x2c>)
   1df9c:	4605      	mov	r5, r0
   1df9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1dfa0:	b085      	sub	sp, #20
   1dfa2:	466c      	mov	r4, sp
   1dfa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1dfa8:	2200      	movs	r2, #0
   1dfaa:	2101      	movs	r1, #1
   1dfac:	2028      	movs	r0, #40	; 0x28
   1dfae:	f7e8 ffb7 	bl	6f20 <z_arm_irq_priority_set>
   1dfb2:	2028      	movs	r0, #40	; 0x28
   1dfb4:	f7e8 ff82 	bl	6ebc <arch_irq_enable>
   1dfb8:	4621      	mov	r1, r4
   1dfba:	4628      	mov	r0, r5
   1dfbc:	f7ff ff2e 	bl	1de1c <uarte_instance_init.constprop.0>
   1dfc0:	b005      	add	sp, #20
   1dfc2:	bd30      	pop	{r4, r5, pc}
   1dfc4:	000271d0 	.word	0x000271d0

0001dfc8 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   1dfc8:	b530      	push	{r4, r5, lr}
   1dfca:	4b0a      	ldr	r3, [pc, #40]	; (1dff4 <uarte_0_init+0x2c>)
   1dfcc:	4605      	mov	r5, r0
   1dfce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1dfd0:	b085      	sub	sp, #20
   1dfd2:	466c      	mov	r4, sp
   1dfd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1dfd8:	2200      	movs	r2, #0
   1dfda:	2101      	movs	r1, #1
   1dfdc:	2002      	movs	r0, #2
   1dfde:	f7e8 ff9f 	bl	6f20 <z_arm_irq_priority_set>
   1dfe2:	2002      	movs	r0, #2
   1dfe4:	f7e8 ff6a 	bl	6ebc <arch_irq_enable>
   1dfe8:	4621      	mov	r1, r4
   1dfea:	4628      	mov	r0, r5
   1dfec:	f7ff ff16 	bl	1de1c <uarte_instance_init.constprop.0>
   1dff0:	b005      	add	sp, #20
   1dff2:	bd30      	pop	{r4, r5, pc}
   1dff4:	000271e0 	.word	0x000271e0

0001dff8 <random_byte_get>:
	__asm__ volatile(
   1dff8:	f04f 0320 	mov.w	r3, #32
   1dffc:	f3ef 8211 	mrs	r2, BASEPRI
   1e000:	f383 8811 	msr	BASEPRI, r3
   1e004:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e008:	4b09      	ldr	r3, [pc, #36]	; (1e030 <random_byte_get+0x38>)
   1e00a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e00e:	b161      	cbz	r1, 1e02a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e010:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e012:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e016:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1e01a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e01e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1e020:	f382 8811 	msr	BASEPRI, r2
   1e024:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e028:	4770      	bx	lr
	int retval = -EAGAIN;
   1e02a:	f06f 000a 	mvn.w	r0, #10
   1e02e:	e7f7      	b.n	1e020 <random_byte_get+0x28>
   1e030:	4000d000 	.word	0x4000d000

0001e034 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e034:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e036:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1e038:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e03a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1e03c:	f04f 0020 	mov.w	r0, #32
   1e040:	f3ef 8e11 	mrs	lr, BASEPRI
   1e044:	f380 8811 	msr	BASEPRI, r0
   1e048:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e04c:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e04e:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1e052:	1ba4      	subs	r4, r4, r6
   1e054:	403c      	ands	r4, r7
	if (available < len) {
   1e056:	42a2      	cmp	r2, r4
		len = available;
   1e058:	bf88      	it	hi
   1e05a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e05c:	18b0      	adds	r0, r6, r2
   1e05e:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1e060:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1e062:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1e064:	f38e 8811 	msr	BASEPRI, lr
   1e068:	f3bf 8f6f 	isb	sy
   1e06c:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1e06e:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1e070:	4290      	cmp	r0, r2
   1e072:	d119      	bne.n	1e0a8 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e074:	4566      	cmp	r6, ip
   1e076:	d10d      	bne.n	1e094 <rng_pool_get+0x60>
	__asm__ volatile(
   1e078:	f04f 0520 	mov.w	r5, #32
   1e07c:	f3ef 8011 	mrs	r0, BASEPRI
   1e080:	f385 8811 	msr	BASEPRI, r5
   1e084:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e088:	781d      	ldrb	r5, [r3, #0]
   1e08a:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1e08c:	f380 8811 	msr	BASEPRI, r0
   1e090:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e094:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1e096:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1e098:	b290      	uxth	r0, r2
	available = available - len;
   1e09a:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1e09c:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e09e:	bf22      	ittt	cs
   1e0a0:	4b06      	ldrcs	r3, [pc, #24]	; (1e0bc <rng_pool_get+0x88>)
   1e0a2:	2201      	movcs	r2, #1
   1e0a4:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1e0a8:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1e0ac:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1e0ae:	f89e e005 	ldrb.w	lr, [lr, #5]
   1e0b2:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1e0b6:	403d      	ands	r5, r7
   1e0b8:	e7da      	b.n	1e070 <rng_pool_get+0x3c>
   1e0ba:	bf00      	nop
   1e0bc:	4000d000 	.word	0x4000d000

0001e0c0 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e0c0:	43db      	mvns	r3, r3
{
   1e0c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e0c6:	f013 0501 	ands.w	r5, r3, #1
{
   1e0ca:	460e      	mov	r6, r1
   1e0cc:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e0ce:	d004      	beq.n	1e0da <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e0d0:	4821      	ldr	r0, [pc, #132]	; (1e158 <entropy_nrf5_get_entropy_isr+0x98>)
   1e0d2:	f7ff ffaf 	bl	1e034 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1e0da:	b3a2      	cbz	r2, 1e146 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1e0dc:	f04f 0320 	mov.w	r3, #32
   1e0e0:	f3ef 8811 	mrs	r8, BASEPRI
   1e0e4:	f383 8811 	msr	BASEPRI, r3
   1e0e8:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e0ec:	200d      	movs	r0, #13
   1e0ee:	f7e8 ff09 	bl	6f04 <arch_irq_is_enabled>
   1e0f2:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e0f4:	200d      	movs	r0, #13
   1e0f6:	f7e8 fef1 	bl	6edc <arch_irq_disable>
	__asm__ volatile(
   1e0fa:	f388 8811 	msr	BASEPRI, r8
   1e0fe:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e102:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1e15c <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e106:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1e160 <entropy_nrf5_get_entropy_isr+0xa0>
   1e10a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1e10e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1e112:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e116:	2301      	movs	r3, #1
   1e118:	f8c8 3000 	str.w	r3, [r8]
   1e11c:	4625      	mov	r5, r4
   1e11e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e122:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1e126:	b183      	cbz	r3, 1e14a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1e128:	f7ff ff66 	bl	1dff8 <random_byte_get>
			if (byte < 0) {
   1e12c:	1e03      	subs	r3, r0, #0
   1e12e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1e132:	dbf6      	blt.n	1e122 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1e134:	3d01      	subs	r5, #1
   1e136:	b2ad      	uxth	r5, r5
   1e138:	5573      	strb	r3, [r6, r5]
		} while (len);
   1e13a:	2d00      	cmp	r5, #0
   1e13c:	d1f1      	bne.n	1e122 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1e13e:	b117      	cbz	r7, 1e146 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1e140:	200d      	movs	r0, #13
   1e142:	f7e8 febb 	bl	6ebc <arch_irq_enable>
	return cnt;
   1e146:	4620      	mov	r0, r4
   1e148:	e7c5      	b.n	1e0d6 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1e14a:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e14e:	bf20      	wfe
				__SEV();
   1e150:	bf40      	sev
				__WFE();
   1e152:	bf20      	wfe
   1e154:	e7e5      	b.n	1e122 <entropy_nrf5_get_entropy_isr+0x62>
   1e156:	bf00      	nop
   1e158:	2000ebb8 	.word	0x2000ebb8
   1e15c:	4000d000 	.word	0x4000d000
   1e160:	e000e100 	.word	0xe000e100

0001e164 <entropy_nrf5_get_entropy>:
{
   1e164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1e168:	4f13      	ldr	r7, [pc, #76]	; (1e1b8 <entropy_nrf5_get_entropy+0x54>)
   1e16a:	460d      	mov	r5, r1
   1e16c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e16e:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1e172:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1e176:	b914      	cbnz	r4, 1e17e <entropy_nrf5_get_entropy+0x1a>
}
   1e178:	4620      	mov	r0, r4
   1e17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e17e:	f04f 33ff 	mov.w	r3, #4294967295
   1e182:	f04f 32ff 	mov.w	r2, #4294967295
   1e186:	4638      	mov	r0, r7
   1e188:	f001 fd4a 	bl	1fc20 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e18c:	4622      	mov	r2, r4
   1e18e:	4629      	mov	r1, r5
   1e190:	4640      	mov	r0, r8
   1e192:	f7ff ff4f 	bl	1e034 <rng_pool_get>
   1e196:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1e198:	4638      	mov	r0, r7
   1e19a:	f001 fd1b 	bl	1fbd4 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e19e:	b93e      	cbnz	r6, 1e1b0 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1e1a0:	f04f 32ff 	mov.w	r2, #4294967295
   1e1a4:	f04f 33ff 	mov.w	r3, #4294967295
   1e1a8:	4648      	mov	r0, r9
   1e1aa:	f001 fd39 	bl	1fc20 <z_impl_k_sem_take>
			continue;
   1e1ae:	e7e2      	b.n	1e176 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1e1b0:	1ba4      	subs	r4, r4, r6
   1e1b2:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e1b4:	4435      	add	r5, r6
   1e1b6:	e7de      	b.n	1e176 <entropy_nrf5_get_entropy+0x12>
   1e1b8:	2000eb88 	.word	0x2000eb88

0001e1bc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   1e1bc:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e1be:	4c19      	ldr	r4, [pc, #100]	; (1e224 <entropy_nrf5_init+0x68>)
   1e1c0:	2201      	movs	r2, #1
   1e1c2:	4611      	mov	r1, r2
   1e1c4:	4620      	mov	r0, r4
   1e1c6:	f008 fb05 	bl	267d4 <z_impl_k_sem_init>
   1e1ca:	2201      	movs	r2, #1
   1e1cc:	2100      	movs	r1, #0
   1e1ce:	f104 0018 	add.w	r0, r4, #24
   1e1d2:	f008 faff 	bl	267d4 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1e1d6:	f240 4307 	movw	r3, #1031	; 0x407
   1e1da:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1e1de:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e1e2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1e1e4:	230c      	movs	r3, #12
   1e1e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1e1ea:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1e1ec:	4b0e      	ldr	r3, [pc, #56]	; (1e228 <entropy_nrf5_init+0x6c>)
   1e1ee:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1e1f2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1e1f6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e1fa:	f042 0201 	orr.w	r2, r2, #1
   1e1fe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1e202:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e204:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1e208:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e20c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e210:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e212:	6019      	str	r1, [r3, #0]
   1e214:	200d      	movs	r0, #13
   1e216:	f7e8 fe83 	bl	6f20 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e21a:	200d      	movs	r0, #13
   1e21c:	f7e8 fe4e 	bl	6ebc <arch_irq_enable>

	return 0;
}
   1e220:	4628      	mov	r0, r5
   1e222:	bd38      	pop	{r3, r4, r5, pc}
   1e224:	2000eb88 	.word	0x2000eb88
   1e228:	4000d000 	.word	0x4000d000

0001e22c <isr>:
{
   1e22c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e22e:	f7ff fee3 	bl	1dff8 <random_byte_get>
	if (byte < 0) {
   1e232:	2800      	cmp	r0, #0
   1e234:	db20      	blt.n	1e278 <isr+0x4c>
	uint8_t last  = rngp->last;
   1e236:	4b17      	ldr	r3, [pc, #92]	; (1e294 <isr+0x68>)
   1e238:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1e23c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1e240:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1e244:	1a51      	subs	r1, r2, r1
   1e246:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e24a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1e24c:	d10d      	bne.n	1e26a <isr+0x3e>
	uint8_t last  = rngp->last;
   1e24e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1e252:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1e256:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1e25a:	1a51      	subs	r1, r2, r1
   1e25c:	ea34 0101 	bics.w	r1, r4, r1
   1e260:	d10b      	bne.n	1e27a <isr+0x4e>
   1e262:	4b0d      	ldr	r3, [pc, #52]	; (1e298 <isr+0x6c>)
   1e264:	2201      	movs	r2, #1
   1e266:	605a      	str	r2, [r3, #4]
}
   1e268:	e00e      	b.n	1e288 <isr+0x5c>
	rngp->buffer[last] = byte;
   1e26a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e26c:	3201      	adds	r2, #1
   1e26e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e270:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1e274:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1e278:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1e27a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e27c:	3201      	adds	r2, #1
   1e27e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e280:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1e284:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1e288:	4804      	ldr	r0, [pc, #16]	; (1e29c <isr+0x70>)
}
   1e28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e28e:	f001 bca1 	b.w	1fbd4 <z_impl_k_sem_give>
   1e292:	bf00      	nop
   1e294:	2000eb88 	.word	0x2000eb88
   1e298:	4000d000 	.word	0x4000d000
   1e29c:	2000eba0 	.word	0x2000eba0

0001e2a0 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e2a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1e2a4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e2a8:	2a08      	cmp	r2, #8
   1e2aa:	d106      	bne.n	1e2ba <nrf52_errata_136+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1e2ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1e2b0:	2b05      	cmp	r3, #5
   1e2b2:	d802      	bhi.n	1e2ba <nrf52_errata_136+0x1a>
   1e2b4:	4a02      	ldr	r2, [pc, #8]	; (1e2c0 <nrf52_errata_136+0x20>)
   1e2b6:	5cd0      	ldrb	r0, [r2, r3]
   1e2b8:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1e2ba:	2000      	movs	r0, #0
    #endif
}
   1e2bc:	4770      	bx	lr
   1e2be:	bf00      	nop
   1e2c0:	0002cf2e 	.word	0x0002cf2e

0001e2c4 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e2c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1e2c8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e2cc:	2a08      	cmp	r2, #8
   1e2ce:	d106      	bne.n	1e2de <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1e2d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1e2d4:	2b05      	cmp	r3, #5
   1e2d6:	d802      	bhi.n	1e2de <nrf52_errata_103+0x1a>
   1e2d8:	4a02      	ldr	r2, [pc, #8]	; (1e2e4 <nrf52_errata_103+0x20>)
   1e2da:	5cd0      	ldrb	r0, [r2, r3]
   1e2dc:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1e2de:	2000      	movs	r0, #0
    #endif
}
   1e2e0:	4770      	bx	lr
   1e2e2:	bf00      	nop
   1e2e4:	0002cf34 	.word	0x0002cf34

0001e2e8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1e2e8:	4a02      	ldr	r2, [pc, #8]	; (1e2f4 <nvmc_wait+0xc>)
   1e2ea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1e2ee:	2b00      	cmp	r3, #0
   1e2f0:	d0fb      	beq.n	1e2ea <nvmc_wait+0x2>
}
   1e2f2:	4770      	bx	lr
   1e2f4:	4001e000 	.word	0x4001e000

0001e2f8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1e2f8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1e2fa:	f7ff ffd1 	bl	1e2a0 <nrf52_errata_136>
   1e2fe:	b140      	cbz	r0, 1e312 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1e300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e304:	2200      	movs	r2, #0
   1e306:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1e30a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1e30e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1e312:	f7ff ffc5 	bl	1e2a0 <nrf52_errata_136>
   1e316:	2800      	cmp	r0, #0
   1e318:	d046      	beq.n	1e3a8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1e31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1e31e:	4b55      	ldr	r3, [pc, #340]	; (1e474 <SystemInit+0x17c>)
   1e320:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1e324:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1e328:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1e32c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1e330:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1e334:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1e338:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1e33c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1e340:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1e344:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1e348:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1e34c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1e350:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1e354:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1e358:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1e35c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1e360:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1e364:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1e368:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1e36c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1e370:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1e374:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1e378:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1e37c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1e380:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1e384:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1e388:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1e38c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1e390:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1e394:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1e398:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1e39c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1e3a0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1e3a4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1e3a8:	f7ff ff8c 	bl	1e2c4 <nrf52_errata_103>
   1e3ac:	b118      	cbz	r0, 1e3b6 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1e3ae:	4b32      	ldr	r3, [pc, #200]	; (1e478 <SystemInit+0x180>)
   1e3b0:	4a32      	ldr	r2, [pc, #200]	; (1e47c <SystemInit+0x184>)
   1e3b2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1e3b6:	f7ff ff85 	bl	1e2c4 <nrf52_errata_103>
   1e3ba:	b118      	cbz	r0, 1e3c4 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1e3bc:	4b30      	ldr	r3, [pc, #192]	; (1e480 <SystemInit+0x188>)
   1e3be:	22fb      	movs	r2, #251	; 0xfb
   1e3c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1e3c4:	f7ff ff7e 	bl	1e2c4 <nrf52_errata_103>
   1e3c8:	b170      	cbz	r0, 1e3e8 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1e3ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1e3ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e3d2:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1e3d6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1e3da:	f022 020f 	bic.w	r2, r2, #15
   1e3de:	f003 030f 	and.w	r3, r3, #15
   1e3e2:	4313      	orrs	r3, r2
   1e3e4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1e3e8:	f7ff ff6c 	bl	1e2c4 <nrf52_errata_103>
   1e3ec:	b120      	cbz	r0, 1e3f8 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1e3ee:	4b25      	ldr	r3, [pc, #148]	; (1e484 <SystemInit+0x18c>)
   1e3f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1e3f4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1e3f8:	f7ff ff52 	bl	1e2a0 <nrf52_errata_136>
   1e3fc:	b148      	cbz	r0, 1e412 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1e3fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e402:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1e406:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1e408:	bf44      	itt	mi
   1e40a:	f06f 0201 	mvnmi.w	r2, #1
   1e40e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e412:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1e416:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1e41a:	2a00      	cmp	r2, #0
   1e41c:	db03      	blt.n	1e426 <SystemInit+0x12e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1e41e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e422:	2b00      	cmp	r3, #0
   1e424:	da22      	bge.n	1e46c <SystemInit+0x174>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e426:	4918      	ldr	r1, [pc, #96]	; (1e488 <SystemInit+0x190>)
   1e428:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e42a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e42e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e432:	2412      	movs	r4, #18
    nvmc_wait();
   1e434:	f7ff ff58 	bl	1e2e8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e438:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1e43c:	f7ff ff54 	bl	1e2e8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1e440:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1e444:	f7ff ff50 	bl	1e2e8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e448:	2300      	movs	r3, #0
   1e44a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1e44e:	f7ff ff4b 	bl	1e2e8 <nvmc_wait>
   1e452:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1e456:	490d      	ldr	r1, [pc, #52]	; (1e48c <SystemInit+0x194>)
   1e458:	4b0d      	ldr	r3, [pc, #52]	; (1e490 <SystemInit+0x198>)
   1e45a:	68ca      	ldr	r2, [r1, #12]
   1e45c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1e460:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1e462:	60cb      	str	r3, [r1, #12]
   1e464:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1e468:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1e46a:	e7fd      	b.n	1e468 <SystemInit+0x170>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1e46c:	4b09      	ldr	r3, [pc, #36]	; (1e494 <SystemInit+0x19c>)
   1e46e:	4a0a      	ldr	r2, [pc, #40]	; (1e498 <SystemInit+0x1a0>)
   1e470:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1e472:	bd10      	pop	{r4, pc}
   1e474:	4000c000 	.word	0x4000c000
   1e478:	40005000 	.word	0x40005000
   1e47c:	00038148 	.word	0x00038148
   1e480:	4000f000 	.word	0x4000f000
   1e484:	40029000 	.word	0x40029000
   1e488:	4001e000 	.word	0x4001e000
   1e48c:	e000ed00 	.word	0xe000ed00
   1e490:	05fa0004 	.word	0x05fa0004
   1e494:	20000750 	.word	0x20000750
   1e498:	03d09000 	.word	0x03d09000

0001e49c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1e49c:	4b04      	ldr	r3, [pc, #16]	; (1e4b0 <nrfx_clock_init+0x14>)
   1e49e:	791a      	ldrb	r2, [r3, #4]
   1e4a0:	b922      	cbnz	r2, 1e4ac <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1e4a2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1e4a4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1e4a6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1e4a8:	4802      	ldr	r0, [pc, #8]	; (1e4b4 <nrfx_clock_init+0x18>)
   1e4aa:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1e4ac:	4802      	ldr	r0, [pc, #8]	; (1e4b8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1e4ae:	4770      	bx	lr
   1e4b0:	2000ebdc 	.word	0x2000ebdc
   1e4b4:	0bad0000 	.word	0x0bad0000
   1e4b8:	0bad000c 	.word	0x0bad000c

0001e4bc <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1e4bc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1e4be:	b110      	cbz	r0, 1e4c6 <nrfx_clock_stop+0xa>
   1e4c0:	2801      	cmp	r0, #1
   1e4c2:	d017      	beq.n	1e4f4 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1e4c4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1e4c6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1e4ca:	2302      	movs	r3, #2
   1e4cc:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e4d0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1e4d4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e4d8:	2301      	movs	r3, #1
   1e4da:	60e3      	str	r3, [r4, #12]
   1e4dc:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e4e0:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1e4e4:	03db      	lsls	r3, r3, #15
   1e4e6:	d5ed      	bpl.n	1e4c4 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1e4e8:	2001      	movs	r0, #1
   1e4ea:	f007 fde3 	bl	260b4 <nrfx_busy_wait>
   1e4ee:	3d01      	subs	r5, #1
   1e4f0:	d1f6      	bne.n	1e4e0 <nrfx_clock_stop+0x24>
   1e4f2:	e7e7      	b.n	1e4c4 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1e4f4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e4f8:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   1e4fa:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e4fe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e502:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e506:	6060      	str	r0, [r4, #4]
   1e508:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1e50c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1e510:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1e514:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1e516:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1e51a:	d505      	bpl.n	1e528 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1e51c:	b123      	cbz	r3, 1e528 <nrfx_clock_stop+0x6c>
   1e51e:	2001      	movs	r0, #1
   1e520:	f007 fdc8 	bl	260b4 <nrfx_busy_wait>
   1e524:	3d01      	subs	r5, #1
   1e526:	d1f1      	bne.n	1e50c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   1e528:	4b01      	ldr	r3, [pc, #4]	; (1e530 <nrfx_clock_stop+0x74>)
   1e52a:	2200      	movs	r2, #0
   1e52c:	715a      	strb	r2, [r3, #5]
   1e52e:	e7c9      	b.n	1e4c4 <nrfx_clock_stop+0x8>
   1e530:	2000ebdc 	.word	0x2000ebdc

0001e534 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1e538:	b510      	push	{r4, lr}
   1e53a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1e53e:	b16a      	cbz	r2, 1e55c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e540:	2200      	movs	r2, #0
   1e542:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1e546:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1e54a:	2201      	movs	r2, #1
   1e54c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1e550:	4b11      	ldr	r3, [pc, #68]	; (1e598 <nrfx_power_clock_irq_handler+0x64>)
   1e552:	7958      	ldrb	r0, [r3, #5]
   1e554:	b910      	cbnz	r0, 1e55c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1e556:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1e558:	681b      	ldr	r3, [r3, #0]
   1e55a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1e55c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e560:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1e564:	b172      	cbz	r2, 1e584 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e566:	2200      	movs	r2, #0
   1e568:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1e56c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1e570:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1e574:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1e578:	0792      	lsls	r2, r2, #30
   1e57a:	d104      	bne.n	1e586 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1e57c:	2201      	movs	r2, #1
   1e57e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e582:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1e584:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1e586:	2202      	movs	r2, #2
   1e588:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e58c:	4b02      	ldr	r3, [pc, #8]	; (1e598 <nrfx_power_clock_irq_handler+0x64>)
}
   1e58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e592:	681b      	ldr	r3, [r3, #0]
   1e594:	2001      	movs	r0, #1
   1e596:	4718      	bx	r3
   1e598:	2000ebdc 	.word	0x2000ebdc

0001e59c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1e59c:	2301      	movs	r3, #1
   1e59e:	fa03 f000 	lsl.w	r0, r3, r0
   1e5a2:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1e5a4:	b193      	cbz	r3, 1e5cc <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1e5a6:	f04f 0320 	mov.w	r3, #32
   1e5aa:	f3ef 8111 	mrs	r1, BASEPRI
   1e5ae:	f383 8811 	msr	BASEPRI, r3
   1e5b2:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1e5b6:	4a06      	ldr	r2, [pc, #24]	; (1e5d0 <nrfx_gpiote_channel_free+0x34>)
   1e5b8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1e5ba:	ea23 0000 	bic.w	r0, r3, r0
   1e5be:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1e5c0:	f381 8811 	msr	BASEPRI, r1
   1e5c4:	f3bf 8f6f 	isb	sy
   1e5c8:	4802      	ldr	r0, [pc, #8]	; (1e5d4 <nrfx_gpiote_channel_free+0x38>)
   1e5ca:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1e5cc:	4802      	ldr	r0, [pc, #8]	; (1e5d8 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1e5ce:	4770      	bx	lr
   1e5d0:	2000ebe4 	.word	0x2000ebe4
   1e5d4:	0bad0000 	.word	0x0bad0000
   1e5d8:	0bad0004 	.word	0x0bad0004

0001e5dc <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1e5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e5e0:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1e5e2:	f8df e05c 	ldr.w	lr, [pc, #92]	; 1e640 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1e5e6:	4817      	ldr	r0, [pc, #92]	; (1e644 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1e5e8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1e648 <nrfx_gpiote_channel_alloc+0x6c>
{
   1e5ec:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1e5ee:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1e5f0:	2601      	movs	r6, #1
   1e5f2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1e5f4:	f04f 0120 	mov.w	r1, #32
   1e5f8:	f3ef 8c11 	mrs	ip, BASEPRI
   1e5fc:	f381 8811 	msr	BASEPRI, r1
   1e600:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1e604:	fa22 f103 	lsr.w	r1, r2, r3
   1e608:	07c9      	lsls	r1, r1, #31
   1e60a:	d50a      	bpl.n	1e622 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1e60c:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   1e610:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1e614:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1e616:	bf01      	itttt	eq
   1e618:	4339      	orreq	r1, r7
   1e61a:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   1e61e:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1e620:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1e622:	f38c 8811 	msr	BASEPRI, ip
   1e626:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1e62a:	4540      	cmp	r0, r8
   1e62c:	d005      	beq.n	1e63a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1e62e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1e632:	439a      	bics	r2, r3
   1e634:	f104 0401 	add.w	r4, r4, #1
   1e638:	d1db      	bne.n	1e5f2 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1e63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e63e:	bf00      	nop
   1e640:	2000ebe4 	.word	0x2000ebe4
   1e644:	0bad0002 	.word	0x0bad0002
   1e648:	0bad0000 	.word	0x0bad0000

0001e64c <nvmc_word_write>:
   1e64c:	4a04      	ldr	r2, [pc, #16]	; (1e660 <nvmc_word_write+0x14>)
   1e64e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1e652:	07db      	lsls	r3, r3, #31
   1e654:	d5fb      	bpl.n	1e64e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1e656:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1e658:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1e65c:	4770      	bx	lr
   1e65e:	bf00      	nop
   1e660:	4001e000 	.word	0x4001e000

0001e664 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1e664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e668:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1e66a:	fbb0 f3f2 	udiv	r3, r0, r2
   1e66e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1e672:	b973      	cbnz	r3, 1e692 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1e674:	4b08      	ldr	r3, [pc, #32]	; (1e698 <nrfx_nvmc_page_erase+0x34>)
   1e676:	2202      	movs	r2, #2
   1e678:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1e67c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e680:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1e684:	07d2      	lsls	r2, r2, #31
   1e686:	d5fb      	bpl.n	1e680 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   1e688:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1e68a:	4804      	ldr	r0, [pc, #16]	; (1e69c <nrfx_nvmc_page_erase+0x38>)
   1e68c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1e690:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1e692:	4803      	ldr	r0, [pc, #12]	; (1e6a0 <nrfx_nvmc_page_erase+0x3c>)
}
   1e694:	4770      	bx	lr
   1e696:	bf00      	nop
   1e698:	4001e000 	.word	0x4001e000
   1e69c:	0bad0000 	.word	0x0bad0000
   1e6a0:	0bad000a 	.word	0x0bad000a

0001e6a4 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1e6a4:	b510      	push	{r4, lr}
   1e6a6:	4c05      	ldr	r4, [pc, #20]	; (1e6bc <nrfx_nvmc_word_write+0x18>)
   1e6a8:	2301      	movs	r3, #1
   1e6aa:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1e6ae:	f7ff ffcd 	bl	1e64c <nvmc_word_write>
   1e6b2:	2300      	movs	r3, #0
   1e6b4:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1e6b8:	bd10      	pop	{r4, pc}
   1e6ba:	bf00      	nop
   1e6bc:	4001e000 	.word	0x4001e000

0001e6c0 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1e6c0:	4b18      	ldr	r3, [pc, #96]	; (1e724 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1e6c2:	f8df c064 	ldr.w	ip, [pc, #100]	; 1e728 <nrfx_ppi_channel_alloc+0x68>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1e6c6:	681b      	ldr	r3, [r3, #0]
{
   1e6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1e6cc:	43db      	mvns	r3, r3
{
   1e6ce:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1e6d0:	4f16      	ldr	r7, [pc, #88]	; (1e72c <nrfx_ppi_channel_alloc+0x6c>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1e6d2:	4817      	ldr	r0, [pc, #92]	; (1e730 <nrfx_ppi_channel_alloc+0x70>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1e6d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1e6d8:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1e6da:	f04f 0e01 	mov.w	lr, #1
   1e6de:	b2e6      	uxtb	r6, r4
   1e6e0:	b90b      	cbnz	r3, 1e6e6 <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1e6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1e6e6:	f04f 0220 	mov.w	r2, #32
   1e6ea:	f3ef 8811 	mrs	r8, BASEPRI
   1e6ee:	f382 8811 	msr	BASEPRI, r2
   1e6f2:	f3bf 8f6f 	isb	sy
   1e6f6:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1e6fa:	4213      	tst	r3, r2
   1e6fc:	d006      	beq.n	1e70c <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1e6fe:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1e700:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1e702:	bf01      	itttt	eq
   1e704:	4311      	orreq	r1, r2
   1e706:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1e708:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1e70a:	4660      	moveq	r0, ip
	__asm__ volatile(
   1e70c:	f388 8811 	msr	BASEPRI, r8
   1e710:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1e714:	4560      	cmp	r0, ip
   1e716:	f104 0401 	add.w	r4, r4, #1
   1e71a:	d0e2      	beq.n	1e6e2 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1e71c:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1e720:	e7dd      	b.n	1e6de <nrfx_ppi_channel_alloc+0x1e>
   1e722:	bf00      	nop
   1e724:	00028778 	.word	0x00028778
   1e728:	0bad0000 	.word	0x0bad0000
   1e72c:	2000ec44 	.word	0x2000ec44
   1e730:	0bad0002 	.word	0x0bad0002

0001e734 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1e734:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1e736:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e73a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1e73c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1e73e:	6002      	str	r2, [r0, #0]
}
   1e740:	4802      	ldr	r0, [pc, #8]	; (1e74c <nrf_gpio_pin_port_decode+0x18>)
   1e742:	bf18      	it	ne
   1e744:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1e748:	4770      	bx	lr
   1e74a:	bf00      	nop
   1e74c:	50000300 	.word	0x50000300

0001e750 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   1e750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1e754:	7907      	ldrb	r7, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1e756:	4c4c      	ldr	r4, [pc, #304]	; (1e888 <nrfx_spi_init+0x138>)
{
   1e758:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1e75a:	2028      	movs	r0, #40	; 0x28
   1e75c:	4378      	muls	r0, r7
   1e75e:	1825      	adds	r5, r4, r0
   1e760:	7f2e      	ldrb	r6, [r5, #28]
   1e762:	2e00      	cmp	r6, #0
   1e764:	f040 808e 	bne.w	1e884 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   1e768:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
   1e76a:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   1e76c:	7b0b      	ldrb	r3, [r1, #12]
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   1e76e:	7808      	ldrb	r0, [r1, #0]
    if (p_config->mode <= NRF_SPI_MODE_1)
   1e770:	2b01      	cmp	r3, #1
   1e772:	d878      	bhi.n	1e866 <nrfx_spi_init+0x116>
        nrf_gpio_pin_clear(p_config->sck_pin);
   1e774:	f007 fcf1 	bl	2615a <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   1e778:	780b      	ldrb	r3, [r1, #0]
   1e77a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e77c:	a801      	add	r0, sp, #4
   1e77e:	f7ff ffd9 	bl	1e734 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e782:	9b01      	ldr	r3, [sp, #4]
   1e784:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e788:	2201      	movs	r2, #1
   1e78a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1e78e:	784d      	ldrb	r5, [r1, #1]
   1e790:	2dff      	cmp	r5, #255	; 0xff
   1e792:	d06b      	beq.n	1e86c <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   1e794:	4628      	mov	r0, r5
   1e796:	f007 fce0 	bl	2615a <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e79a:	a801      	add	r0, sp, #4
   1e79c:	9501      	str	r5, [sp, #4]
   1e79e:	f7ff ffc9 	bl	1e734 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e7a2:	9b01      	ldr	r3, [sp, #4]
   1e7a4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e7a8:	2203      	movs	r2, #3
   1e7aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1e7ae:	788e      	ldrb	r6, [r1, #2]
   1e7b0:	2eff      	cmp	r6, #255	; 0xff
   1e7b2:	d05e      	beq.n	1e872 <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e7b4:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   1e7b6:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
   1e7ba:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e7bc:	f7ff ffba 	bl	1e734 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e7c0:	9b01      	ldr	r3, [sp, #4]
   1e7c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   1e7c6:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e7ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1e7ce:	78c8      	ldrb	r0, [r1, #3]
   1e7d0:	28ff      	cmp	r0, #255	; 0xff
   1e7d2:	d00c      	beq.n	1e7ee <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
   1e7d4:	f007 fcb4 	bl	26140 <nrf_gpio_pin_set>
        nrf_gpio_cfg_output(p_config->ss_pin);
   1e7d8:	78cb      	ldrb	r3, [r1, #3]
   1e7da:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e7dc:	a801      	add	r0, sp, #4
   1e7de:	f7ff ffa9 	bl	1e734 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e7e2:	9b01      	ldr	r3, [sp, #4]
   1e7e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e7e8:	2203      	movs	r2, #3
   1e7ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   1e7ee:	f898 2004 	ldrb.w	r2, [r8, #4]
   1e7f2:	78c8      	ldrb	r0, [r1, #3]
   1e7f4:	2328      	movs	r3, #40	; 0x28
   1e7f6:	fb03 4302 	mla	r3, r3, r2, r4
   1e7fa:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1e7fc:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   1e800:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
   1e802:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   1e806:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   1e808:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1e80c:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   1e810:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1e814:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   1e816:	7b0d      	ldrb	r5, [r1, #12]
   1e818:	3b00      	subs	r3, #0
   1e81a:	bf18      	it	ne
   1e81c:	2301      	movne	r3, #1
    switch (spi_mode)
   1e81e:	2d02      	cmp	r5, #2
   1e820:	d02a      	beq.n	1e878 <nrfx_spi_init+0x128>
   1e822:	2d03      	cmp	r5, #3
   1e824:	d02b      	beq.n	1e87e <nrfx_spi_init+0x12e>
   1e826:	2d01      	cmp	r5, #1
   1e828:	d101      	bne.n	1e82e <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1e82a:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   1e82e:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1e832:	2328      	movs	r3, #40	; 0x28
   1e834:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   1e838:	437b      	muls	r3, r7
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1e83a:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
   1e83c:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1e83e:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1e840:	2201      	movs	r2, #1
   1e842:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
   1e846:	b11b      	cbz	r3, 1e850 <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1e848:	f340 3007 	sbfx	r0, r0, #12, #8
   1e84c:	f7e8 fb36 	bl	6ebc <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1e850:	2328      	movs	r3, #40	; 0x28
   1e852:	fb03 4407 	mla	r4, r3, r7, r4
   1e856:	2300      	movs	r3, #0
   1e858:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1e85a:	480c      	ldr	r0, [pc, #48]	; (1e88c <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1e85c:	2301      	movs	r3, #1
   1e85e:	7723      	strb	r3, [r4, #28]
}
   1e860:	b003      	add	sp, #12
   1e862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   1e866:	f007 fc6b 	bl	26140 <nrf_gpio_pin_set>
   1e86a:	e785      	b.n	1e778 <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1e86c:	f04f 35ff 	mov.w	r5, #4294967295
   1e870:	e79d      	b.n	1e7ae <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1e872:	f04f 36ff 	mov.w	r6, #4294967295
   1e876:	e7aa      	b.n	1e7ce <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1e878:	f043 0304 	orr.w	r3, r3, #4
        break;
   1e87c:	e7d7      	b.n	1e82e <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1e87e:	f043 0306 	orr.w	r3, r3, #6
        break;
   1e882:	e7d4      	b.n	1e82e <nrfx_spi_init+0xde>
        return err_code;
   1e884:	4802      	ldr	r0, [pc, #8]	; (1e890 <nrfx_spi_init+0x140>)
   1e886:	e7eb      	b.n	1e860 <nrfx_spi_init+0x110>
   1e888:	2000ec48 	.word	0x2000ec48
   1e88c:	0bad0000 	.word	0x0bad0000
   1e890:	0bad0005 	.word	0x0bad0005

0001e894 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1e894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1e898:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1e89a:	4c39      	ldr	r4, [pc, #228]	; (1e980 <nrfx_spi_xfer+0xec>)
   1e89c:	2328      	movs	r3, #40	; 0x28
   1e89e:	437b      	muls	r3, r7
{
   1e8a0:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   1e8a2:	18e2      	adds	r2, r4, r3
{
   1e8a4:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   1e8a6:	7f51      	ldrb	r1, [r2, #29]
{
   1e8a8:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   1e8aa:	2900      	cmp	r1, #0
   1e8ac:	d165      	bne.n	1e97a <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   1e8ae:	58e3      	ldr	r3, [r4, r3]
   1e8b0:	b10b      	cbz	r3, 1e8b6 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   1e8b2:	2301      	movs	r3, #1
   1e8b4:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1e8b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1e8ba:	2528      	movs	r5, #40	; 0x28
   1e8bc:	fb05 4507 	mla	r5, r5, r7, r4
   1e8c0:	f105 0c0c 	add.w	ip, r5, #12
   1e8c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1e8c8:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
   1e8ca:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1e8cc:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   1e8ce:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1e8d2:	d001      	beq.n	1e8d8 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
   1e8d4:	f007 fc41 	bl	2615a <nrf_gpio_pin_clear>
    }
    if (flags)
   1e8d8:	2328      	movs	r3, #40	; 0x28
   1e8da:	f1b8 0f00 	cmp.w	r8, #0
   1e8de:	d006      	beq.n	1e8ee <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   1e8e0:	fb03 4407 	mla	r4, r3, r7, r4
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   1e8e4:	4827      	ldr	r0, [pc, #156]	; (1e984 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   1e8e6:	2300      	movs	r3, #0
   1e8e8:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1e8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   1e8ee:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
   1e8f2:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
   1e8f6:	2204      	movs	r2, #4
   1e8f8:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   1e8fc:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e900:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   1e904:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   1e908:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
   1e90a:	b192      	cbz	r2, 1e932 <nrfx_spi_xfer+0x9e>
   1e90c:	6833      	ldr	r3, [r6, #0]
   1e90e:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   1e910:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   1e914:	2a01      	cmp	r2, #1
   1e916:	d90e      	bls.n	1e936 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1e918:	6833      	ldr	r3, [r6, #0]
   1e91a:	785b      	ldrb	r3, [r3, #1]
   1e91c:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
   1e920:	2328      	movs	r3, #40	; 0x28
   1e922:	437b      	muls	r3, r7
   1e924:	58e6      	ldr	r6, [r4, r3]
   1e926:	b176      	cbz	r6, 1e946 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   1e928:	2304      	movs	r3, #4
   1e92a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   1e92e:	4816      	ldr	r0, [pc, #88]	; (1e988 <nrfx_spi_xfer+0xf4>)
   1e930:	e7db      	b.n	1e8ea <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   1e932:	7fdb      	ldrb	r3, [r3, #31]
   1e934:	e7ec      	b.n	1e910 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   1e936:	68f3      	ldr	r3, [r6, #12]
   1e938:	2b01      	cmp	r3, #1
   1e93a:	d9f1      	bls.n	1e920 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1e93c:	2328      	movs	r3, #40	; 0x28
   1e93e:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
   1e942:	7fdb      	ldrb	r3, [r3, #31]
   1e944:	e7ea      	b.n	1e91c <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1e946:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   1e94a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e94e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   1e952:	2b00      	cmp	r3, #0
   1e954:	d0fb      	beq.n	1e94e <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e956:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   1e95a:	4628      	mov	r0, r5
   1e95c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1e960:	f007 fc08 	bl	26174 <transfer_byte>
   1e964:	2800      	cmp	r0, #0
   1e966:	d1f2      	bne.n	1e94e <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1e968:	2328      	movs	r3, #40	; 0x28
   1e96a:	fb03 4407 	mla	r4, r3, r7, r4
   1e96e:	7fa0      	ldrb	r0, [r4, #30]
   1e970:	28ff      	cmp	r0, #255	; 0xff
   1e972:	d0dc      	beq.n	1e92e <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
   1e974:	f007 fbe4 	bl	26140 <nrf_gpio_pin_set>
   1e978:	e7d9      	b.n	1e92e <nrfx_spi_xfer+0x9a>
        return err_code;
   1e97a:	4804      	ldr	r0, [pc, #16]	; (1e98c <nrfx_spi_xfer+0xf8>)
   1e97c:	e7b5      	b.n	1e8ea <nrfx_spi_xfer+0x56>
   1e97e:	bf00      	nop
   1e980:	2000ec48 	.word	0x2000ec48
   1e984:	0bad0003 	.word	0x0bad0003
   1e988:	0bad0000 	.word	0x0bad0000
   1e98c:	0bad000b 	.word	0x0bad000b

0001e990 <nrfx_spi_2_irq_handler>:
   1e990:	480c      	ldr	r0, [pc, #48]	; (1e9c4 <nrfx_spi_2_irq_handler+0x34>)
    NRFX_ASSERT(p_cb->handler);

    nrf_spi_event_clear(p_spi, NRF_SPI_EVENT_READY);
    NRFX_LOG_DEBUG("Event: NRF_SPI_EVENT_READY.");

    if (!transfer_byte(p_spi, p_cb))
   1e992:	490d      	ldr	r1, [pc, #52]	; (1e9c8 <nrfx_spi_2_irq_handler+0x38>)
   1e994:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI2_ENABLED)
void nrfx_spi_2_irq_handler(void)
{
   1e996:	b510      	push	{r4, lr}
   1e998:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1e99c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   1e9a0:	f007 fbe8 	bl	26174 <transfer_byte>
   1e9a4:	b968      	cbnz	r0, 1e9c2 <nrfx_spi_2_irq_handler+0x32>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1e9a6:	7f88      	ldrb	r0, [r1, #30]
   1e9a8:	28ff      	cmp	r0, #255	; 0xff
   1e9aa:	d001      	beq.n	1e9b0 <nrfx_spi_2_irq_handler+0x20>
        nrf_gpio_pin_set(p_cb->ss_pin);
   1e9ac:	f007 fbc8 	bl	26140 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   1e9b0:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   1e9b2:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   1e9b4:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI2, &m_cb[NRFX_SPI2_INST_IDX]);
}
   1e9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1e9ba:	e9d1 3100 	ldrd	r3, r1, [r1]
   1e9be:	4803      	ldr	r0, [pc, #12]	; (1e9cc <nrfx_spi_2_irq_handler+0x3c>)
   1e9c0:	4718      	bx	r3
}
   1e9c2:	bd10      	pop	{r4, pc}
   1e9c4:	40023000 	.word	0x40023000
   1e9c8:	2000ec48 	.word	0x2000ec48
   1e9cc:	2000ec50 	.word	0x2000ec50

0001e9d0 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1e9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1e9d2:	4b30      	ldr	r3, [pc, #192]	; (1ea94 <twi_tx_start_transfer+0xc4>)
   1e9d4:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e9d6:	2300      	movs	r3, #0
   1e9d8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1e9dc:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1e9e0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1e9e4:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1e9e8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1e9ec:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1e9f0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1e9f4:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   1e9f8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   1e9fc:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1e9fe:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ea02:	2301      	movs	r3, #1
   1ea04:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1ea06:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
   1ea0a:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1ea0c:	429a      	cmp	r2, r3
   1ea0e:	bf18      	it	ne
   1ea10:	6083      	strne	r3, [r0, #8]
{
   1ea12:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
   1ea14:	f007 fbe1 	bl	261da <twi_send_byte>

    if (p_cb->handler)
   1ea18:	682b      	ldr	r3, [r5, #0]
   1ea1a:	b183      	cbz	r3, 1ea3e <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1ea1c:	f240 2386 	movw	r3, #646	; 0x286
   1ea20:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1ea22:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1ea24:	481c      	ldr	r0, [pc, #112]	; (1ea98 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   1ea26:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   1ea2a:	b003      	add	sp, #12
   1ea2c:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   1ea2e:	4629      	mov	r1, r5
   1ea30:	4620      	mov	r0, r4
   1ea32:	f007 fbef 	bl	26214 <twi_transfer>
        while ((hw_timeout > 0) &&
   1ea36:	b128      	cbz	r0, 1ea44 <twi_tx_start_transfer+0x74>
            hw_timeout--;
   1ea38:	9b01      	ldr	r3, [sp, #4]
   1ea3a:	3b01      	subs	r3, #1
   1ea3c:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1ea3e:	9b01      	ldr	r3, [sp, #4]
   1ea40:	2b00      	cmp	r3, #0
   1ea42:	dcf4      	bgt.n	1ea2e <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   1ea44:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1ea48:	b95b      	cbnz	r3, 1ea62 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1ea4a:	4813      	ldr	r0, [pc, #76]	; (1ea98 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   1ea4c:	9b01      	ldr	r3, [sp, #4]
   1ea4e:	2b00      	cmp	r3, #0
   1ea50:	dceb      	bgt.n	1ea2a <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1ea52:	2300      	movs	r3, #0
   1ea54:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1ea58:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1ea5a:	4810      	ldr	r0, [pc, #64]	; (1ea9c <twi_tx_start_transfer+0xcc>)
   1ea5c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1ea60:	e7e3      	b.n	1ea2a <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   1ea62:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1ea66:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1ea6a:	b18b      	cbz	r3, 1ea90 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1ea6c:	4a0c      	ldr	r2, [pc, #48]	; (1eaa0 <twi_tx_start_transfer+0xd0>)
   1ea6e:	480b      	ldr	r0, [pc, #44]	; (1ea9c <twi_tx_start_transfer+0xcc>)
   1ea70:	f013 0f01 	tst.w	r3, #1
   1ea74:	bf18      	it	ne
   1ea76:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1ea78:	f013 0f02 	tst.w	r3, #2
   1ea7c:	f102 0201 	add.w	r2, r2, #1
   1ea80:	bf18      	it	ne
   1ea82:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1ea84:	f013 0f04 	tst.w	r3, #4
   1ea88:	4b06      	ldr	r3, [pc, #24]	; (1eaa4 <twi_tx_start_transfer+0xd4>)
   1ea8a:	bf18      	it	ne
   1ea8c:	4618      	movne	r0, r3
   1ea8e:	e7dd      	b.n	1ea4c <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   1ea90:	4802      	ldr	r0, [pc, #8]	; (1ea9c <twi_tx_start_transfer+0xcc>)
   1ea92:	e7db      	b.n	1ea4c <twi_tx_start_transfer+0x7c>
   1ea94:	000186a0 	.word	0x000186a0
   1ea98:	0bad0000 	.word	0x0bad0000
   1ea9c:	0bad0001 	.word	0x0bad0001
   1eaa0:	0bae0000 	.word	0x0bae0000
   1eaa4:	0bae0002 	.word	0x0bae0002

0001eaa8 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1eaa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1eaaa:	4b34      	ldr	r3, [pc, #208]	; (1eb7c <twi_rx_start_transfer+0xd4>)
   1eaac:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eaae:	2300      	movs	r3, #0
   1eab0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1eab4:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1eab8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1eabc:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1eac0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1eac4:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1eac8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1eacc:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1ead0:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1ead2:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1ead6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1ead8:	2b01      	cmp	r3, #1
{
   1eada:	4604      	mov	r4, r0
   1eadc:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1eade:	d117      	bne.n	1eb10 <twi_rx_start_transfer+0x68>
   1eae0:	6a0b      	ldr	r3, [r1, #32]
   1eae2:	065b      	lsls	r3, r3, #25
   1eae4:	d414      	bmi.n	1eb10 <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
   1eae6:	2302      	movs	r3, #2
   1eae8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eaec:	2301      	movs	r3, #1
   1eaee:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   1eaf0:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   1eaf4:	2a02      	cmp	r2, #2
   1eaf6:	bf18      	it	ne
   1eaf8:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1eafa:	682b      	ldr	r3, [r5, #0]
   1eafc:	b193      	cbz	r3, 1eb24 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1eafe:	f240 2386 	movw	r3, #646	; 0x286
   1eb02:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1eb04:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1eb06:	481e      	ldr	r0, [pc, #120]	; (1eb80 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   1eb08:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1eb0c:	b003      	add	sp, #12
   1eb0e:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   1eb10:	2301      	movs	r3, #1
   1eb12:	e7e9      	b.n	1eae8 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   1eb14:	4629      	mov	r1, r5
   1eb16:	4620      	mov	r0, r4
   1eb18:	f007 fb7c 	bl	26214 <twi_transfer>
        while ((hw_timeout > 0) &&
   1eb1c:	b128      	cbz	r0, 1eb2a <twi_rx_start_transfer+0x82>
               hw_timeout--;
   1eb1e:	9b01      	ldr	r3, [sp, #4]
   1eb20:	3b01      	subs	r3, #1
   1eb22:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1eb24:	9b01      	ldr	r3, [sp, #4]
   1eb26:	2b00      	cmp	r3, #0
   1eb28:	dcf4      	bgt.n	1eb14 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
   1eb2a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1eb2e:	b95b      	cbnz	r3, 1eb48 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1eb30:	4813      	ldr	r0, [pc, #76]	; (1eb80 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   1eb32:	9b01      	ldr	r3, [sp, #4]
   1eb34:	2b00      	cmp	r3, #0
   1eb36:	dce9      	bgt.n	1eb0c <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1eb38:	2300      	movs	r3, #0
   1eb3a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1eb3e:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1eb40:	4810      	ldr	r0, [pc, #64]	; (1eb84 <twi_rx_start_transfer+0xdc>)
   1eb42:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1eb46:	e7e1      	b.n	1eb0c <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   1eb48:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1eb4c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1eb50:	b18b      	cbz	r3, 1eb76 <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1eb52:	4a0d      	ldr	r2, [pc, #52]	; (1eb88 <twi_rx_start_transfer+0xe0>)
   1eb54:	480b      	ldr	r0, [pc, #44]	; (1eb84 <twi_rx_start_transfer+0xdc>)
   1eb56:	f013 0f01 	tst.w	r3, #1
   1eb5a:	bf18      	it	ne
   1eb5c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1eb5e:	f013 0f02 	tst.w	r3, #2
   1eb62:	f102 0201 	add.w	r2, r2, #1
   1eb66:	bf18      	it	ne
   1eb68:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1eb6a:	f013 0f04 	tst.w	r3, #4
   1eb6e:	4b07      	ldr	r3, [pc, #28]	; (1eb8c <twi_rx_start_transfer+0xe4>)
   1eb70:	bf18      	it	ne
   1eb72:	4618      	movne	r0, r3
   1eb74:	e7dd      	b.n	1eb32 <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
   1eb76:	4803      	ldr	r0, [pc, #12]	; (1eb84 <twi_rx_start_transfer+0xdc>)
   1eb78:	e7db      	b.n	1eb32 <twi_rx_start_transfer+0x8a>
   1eb7a:	bf00      	nop
   1eb7c:	000186a0 	.word	0x000186a0
   1eb80:	0bad0000 	.word	0x0bad0000
   1eb84:	0bad0001 	.word	0x0bad0001
   1eb88:	0bae0000 	.word	0x0bae0000
   1eb8c:	0bae0002 	.word	0x0bae0002

0001eb90 <nrfx_twi_init>:
{
   1eb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1eb94:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1eb98:	4d25      	ldr	r5, [pc, #148]	; (1ec30 <nrfx_twi_init+0xa0>)
   1eb9a:	273c      	movs	r7, #60	; 0x3c
   1eb9c:	fb07 f708 	mul.w	r7, r7, r8
   1eba0:	19ec      	adds	r4, r5, r7
   1eba2:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   1eba6:	2e00      	cmp	r6, #0
   1eba8:	d13f      	bne.n	1ec2a <nrfx_twi_init+0x9a>
    p_cb->int_mask        = 0;
   1ebaa:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1ebac:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
   1ebb0:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
   1ebb4:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    TWI_PIN_INIT(p_config->scl);
   1ebb8:	680e      	ldr	r6, [r1, #0]
    p_cb->p_context       = p_context;
   1ebba:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1ebbc:	7b4b      	ldrb	r3, [r1, #13]
   1ebbe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->handler         = event_handler;
   1ebc2:	51ea      	str	r2, [r5, r7]
        case 1: return NRF_P1;
   1ebc4:	4b1b      	ldr	r3, [pc, #108]	; (1ec34 <nrfx_twi_init+0xa4>)
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1ebc6:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
   1ebc8:	0977      	lsrs	r7, r6, #5
        case 1: return NRF_P1;
   1ebca:	2f01      	cmp	r7, #1
    *p_pin = pin_number & 0x1F;
   1ebcc:	f006 041f 	and.w	r4, r6, #31
        case 1: return NRF_P1;
   1ebd0:	bf0c      	ite	eq
   1ebd2:	461f      	moveq	r7, r3
   1ebd4:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ebd8:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   1ebdc:	f240 6c0c 	movw	ip, #1548	; 0x60c
   1ebe0:	f847 c024 	str.w	ip, [r7, r4, lsl #2]
    TWI_PIN_INIT(p_config->sda);
   1ebe4:	684c      	ldr	r4, [r1, #4]
    return pin_number >> 5;
   1ebe6:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    *p_pin = pin_number & 0x1F;
   1ebea:	f004 071f 	and.w	r7, r4, #31
        case 1: return NRF_P1;
   1ebee:	f1be 0f01 	cmp.w	lr, #1
   1ebf2:	bf18      	it	ne
   1ebf4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ebf8:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   1ebfc:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
        (nrf_twi_frequency_t)p_config->frequency);
   1ec00:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
   1ec02:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1ec06:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
   1ec0a:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   1ec0e:	b11a      	cbz	r2, 1ec18 <nrfx_twi_init+0x88>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   1ec10:	f340 3007 	sbfx	r0, r0, #12, #8
   1ec14:	f7e8 f952 	bl	6ebc <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ec18:	233c      	movs	r3, #60	; 0x3c
   1ec1a:	fb03 5508 	mla	r5, r3, r8, r5
    return err_code;
   1ec1e:	4806      	ldr	r0, [pc, #24]	; (1ec38 <nrfx_twi_init+0xa8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ec20:	2301      	movs	r3, #1
   1ec22:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1ec26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1ec2a:	4804      	ldr	r0, [pc, #16]	; (1ec3c <nrfx_twi_init+0xac>)
   1ec2c:	e7fb      	b.n	1ec26 <nrfx_twi_init+0x96>
   1ec2e:	bf00      	nop
   1ec30:	2000ec70 	.word	0x2000ec70
   1ec34:	50000300 	.word	0x50000300
   1ec38:	0bad0000 	.word	0x0bad0000
   1ec3c:	0bad0005 	.word	0x0bad0005

0001ec40 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1ec40:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ec42:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1ec44:	2105      	movs	r1, #5
   1ec46:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1ec4a:	4b04      	ldr	r3, [pc, #16]	; (1ec5c <nrfx_twi_enable+0x1c>)
   1ec4c:	213c      	movs	r1, #60	; 0x3c
   1ec4e:	fb01 3302 	mla	r3, r1, r2, r3
   1ec52:	2202      	movs	r2, #2
   1ec54:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1ec58:	4770      	bx	lr
   1ec5a:	bf00      	nop
   1ec5c:	2000ec70 	.word	0x2000ec70

0001ec60 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1ec60:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   1ec62:	4a0a      	ldr	r2, [pc, #40]	; (1ec8c <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ec64:	7901      	ldrb	r1, [r0, #4]
   1ec66:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1ec6a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1ec6e:	f022 0203 	bic.w	r2, r2, #3
   1ec72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1ec76:	2200      	movs	r2, #0
   1ec78:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ec7c:	4b04      	ldr	r3, [pc, #16]	; (1ec90 <nrfx_twi_disable+0x30>)
   1ec7e:	223c      	movs	r2, #60	; 0x3c
   1ec80:	fb02 3301 	mla	r3, r2, r1, r3
   1ec84:	2201      	movs	r2, #1
   1ec86:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1ec8a:	4770      	bx	lr
   1ec8c:	00044286 	.word	0x00044286
   1ec90:	2000ec70 	.word	0x2000ec70

0001ec94 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1ec94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ec98:	4f31      	ldr	r7, [pc, #196]	; (1ed60 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ec9a:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1ec9c:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1eca0:	233c      	movs	r3, #60	; 0x3c
   1eca2:	fb03 7304 	mla	r3, r3, r4, r7
{
   1eca6:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1eca8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1ecac:	2b01      	cmp	r3, #1
{
   1ecae:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ecb0:	d104      	bne.n	1ecbc <nrfx_twi_xfer+0x28>
   1ecb2:	780b      	ldrb	r3, [r1, #0]
   1ecb4:	2b01      	cmp	r3, #1
   1ecb6:	d106      	bne.n	1ecc6 <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
   1ecb8:	482a      	ldr	r0, [pc, #168]	; (1ed64 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1ecba:	e011      	b.n	1ece0 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1ecbc:	2b02      	cmp	r3, #2
   1ecbe:	d102      	bne.n	1ecc6 <nrfx_twi_xfer+0x32>
   1ecc0:	780b      	ldrb	r3, [r1, #0]
   1ecc2:	2b01      	cmp	r3, #1
   1ecc4:	d1f8      	bne.n	1ecb8 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
   1ecc6:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   1ecc8:	4b27      	ldr	r3, [pc, #156]	; (1ed68 <nrfx_twi_xfer+0xd4>)
   1ecca:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   1ecce:	fb06 7604 	mla	r6, r6, r4, r7
   1ecd2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1ecd6:	b12b      	cbz	r3, 1ece4 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1ecd8:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   1ecda:	4824      	ldr	r0, [pc, #144]	; (1ed6c <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
   1ecdc:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1ece0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   1ece4:	f08c 0304 	eor.w	r3, ip, #4
   1ece8:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1ecec:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   1ecf0:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   1ecf4:	46a8      	mov	r8, r5
   1ecf6:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   1ecfa:	f106 0e0c 	add.w	lr, r6, #12
   1ecfe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ed02:	f8d8 3000 	ldr.w	r3, [r8]
   1ed06:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   1ed0a:	686b      	ldr	r3, [r5, #4]
   1ed0c:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   1ed0e:	68eb      	ldr	r3, [r5, #12]
   1ed10:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   1ed12:	786b      	ldrb	r3, [r5, #1]
   1ed14:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1ed18:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ed1a:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1ed1e:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ed20:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1ed24:	d017      	beq.n	1ed56 <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1ed26:	b99b      	cbnz	r3, 1ed50 <nrfx_twi_xfer+0xbc>
   1ed28:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   1ed2c:	233c      	movs	r3, #60	; 0x3c
   1ed2e:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1ed32:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1ed34:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1ed38:	4648      	mov	r0, r9
   1ed3a:	f7ff fe49 	bl	1e9d0 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   1ed3e:	233c      	movs	r3, #60	; 0x3c
   1ed40:	435c      	muls	r4, r3
   1ed42:	193a      	adds	r2, r7, r4
   1ed44:	593b      	ldr	r3, [r7, r4]
   1ed46:	2b00      	cmp	r3, #0
   1ed48:	d1ca      	bne.n	1ece0 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
   1ed4a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   1ed4e:	e7c7      	b.n	1ece0 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1ed50:	f04f 0c01 	mov.w	ip, #1
   1ed54:	e7ea      	b.n	1ed2c <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   1ed56:	4651      	mov	r1, sl
   1ed58:	4648      	mov	r0, r9
   1ed5a:	f7ff fea5 	bl	1eaa8 <twi_rx_start_transfer>
   1ed5e:	e7ee      	b.n	1ed3e <nrfx_twi_xfer+0xaa>
   1ed60:	2000ec70 	.word	0x2000ec70
   1ed64:	0bad0005 	.word	0x0bad0005
   1ed68:	00044286 	.word	0x00044286
   1ed6c:	0bad000b 	.word	0x0bad000b

0001ed70 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   1ed70:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   1ed72:	4c2b      	ldr	r4, [pc, #172]	; (1ee20 <nrfx_twi_0_irq_handler+0xb0>)
   1ed74:	482b      	ldr	r0, [pc, #172]	; (1ee24 <nrfx_twi_0_irq_handler+0xb4>)
{
   1ed76:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   1ed78:	4621      	mov	r1, r4
   1ed7a:	f007 fa4b 	bl	26214 <twi_transfer>
   1ed7e:	2800      	cmp	r0, #0
   1ed80:	d140      	bne.n	1ee04 <nrfx_twi_0_irq_handler+0x94>
    if (!p_cb->error &&
   1ed82:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1ed86:	f8d4 c020 	ldr.w	ip, [r4, #32]
    if (!p_cb->error &&
   1ed8a:	b9ff      	cbnz	r7, 1edcc <nrfx_twi_0_irq_handler+0x5c>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   1ed8c:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   1ed8e:	1e9a      	subs	r2, r3, #2
   1ed90:	2a01      	cmp	r2, #1
   1ed92:	d81b      	bhi.n	1edcc <nrfx_twi_0_irq_handler+0x5c>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   1ed94:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1ed96:	69a2      	ldr	r2, [r4, #24]
   1ed98:	4291      	cmp	r1, r2
   1ed9a:	d117      	bne.n	1edcc <nrfx_twi_0_irq_handler+0x5c>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   1ed9c:	69e2      	ldr	r2, [r4, #28]
   1ed9e:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1eda0:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1eda4:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1eda6:	481f      	ldr	r0, [pc, #124]	; (1ee24 <nrfx_twi_0_irq_handler+0xb4>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1eda8:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1edaa:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1edac:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1edb0:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1edb4:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1edb6:	d104      	bne.n	1edc2 <nrfx_twi_0_irq_handler+0x52>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   1edb8:	b007      	add	sp, #28
   1edba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1edbe:	f7ff be07 	b.w	1e9d0 <twi_tx_start_transfer>
}
   1edc2:	b007      	add	sp, #28
   1edc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   1edc8:	f7ff be6e 	b.w	1eaa8 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
   1edcc:	4e16      	ldr	r6, [pc, #88]	; (1ee28 <nrfx_twi_0_irq_handler+0xb8>)
   1edce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1edd0:	ad01      	add	r5, sp, #4
   1edd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1edd4:	6833      	ldr	r3, [r6, #0]
   1edd6:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   1edd8:	b1ff      	cbz	r7, 1ee1a <nrfx_twi_0_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
   1edda:	4a12      	ldr	r2, [pc, #72]	; (1ee24 <nrfx_twi_0_irq_handler+0xb4>)
   1eddc:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1ede0:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   1ede4:	0799      	lsls	r1, r3, #30
   1ede6:	d50f      	bpl.n	1ee08 <nrfx_twi_0_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   1ede8:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1edea:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1edee:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1edf0:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
   1edf4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1edf8:	d000      	beq.n	1edfc <nrfx_twi_0_irq_handler+0x8c>
   1edfa:	b11f      	cbz	r7, 1ee04 <nrfx_twi_0_irq_handler+0x94>
            p_cb->handler(&event, p_cb->p_context);
   1edfc:	e9d4 3100 	ldrd	r3, r1, [r4]
   1ee00:	4668      	mov	r0, sp
   1ee02:	4798      	blx	r3
}
   1ee04:	b007      	add	sp, #28
   1ee06:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   1ee08:	075a      	lsls	r2, r3, #29
   1ee0a:	d501      	bpl.n	1ee10 <nrfx_twi_0_irq_handler+0xa0>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1ee0c:	2302      	movs	r3, #2
   1ee0e:	e7ec      	b.n	1edea <nrfx_twi_0_irq_handler+0x7a>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   1ee10:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   1ee12:	bf4c      	ite	mi
   1ee14:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   1ee16:	2304      	movpl	r3, #4
   1ee18:	e7e7      	b.n	1edea <nrfx_twi_0_irq_handler+0x7a>
            event.type = NRFX_TWI_EVT_DONE;
   1ee1a:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   1ee1e:	e7e6      	b.n	1edee <nrfx_twi_0_irq_handler+0x7e>
   1ee20:	2000ec70 	.word	0x2000ec70
   1ee24:	40003000 	.word	0x40003000
   1ee28:	2000ec7c 	.word	0x2000ec7c

0001ee2c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1ee2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ee2e:	4b10      	ldr	r3, [pc, #64]	; (1ee70 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1ee30:	4f10      	ldr	r7, [pc, #64]	; (1ee74 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ee32:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1ee36:	3001      	adds	r0, #1
   1ee38:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1ee3c:	42ae      	cmp	r6, r5
   1ee3e:	d800      	bhi.n	1ee42 <z_sys_init_run_level+0x16>
		}
	}
}
   1ee40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1ee42:	e9d5 3400 	ldrd	r3, r4, [r5]
   1ee46:	4620      	mov	r0, r4
   1ee48:	4798      	blx	r3
   1ee4a:	b170      	cbz	r0, 1ee6a <z_sys_init_run_level+0x3e>
   1ee4c:	b16c      	cbz	r4, 1ee6a <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1ee4e:	1be4      	subs	r4, r4, r7
   1ee50:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1ee52:	0961      	lsrs	r1, r4, #5
   1ee54:	4a08      	ldr	r2, [pc, #32]	; (1ee78 <z_sys_init_run_level+0x4c>)
   1ee56:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1ee5a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1ee5e:	2301      	movs	r3, #1
   1ee60:	fa03 f404 	lsl.w	r4, r3, r4
   1ee64:	4304      	orrs	r4, r0
   1ee66:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ee6a:	3508      	adds	r5, #8
   1ee6c:	e7e6      	b.n	1ee3c <z_sys_init_run_level+0x10>
   1ee6e:	bf00      	nop
   1ee70:	00028968 	.word	0x00028968
   1ee74:	20009d48 	.word	0x20009d48
   1ee78:	20009de8 	.word	0x20009de8

0001ee7c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1ee7c:	4b08      	ldr	r3, [pc, #32]	; (1eea0 <z_device_ready+0x24>)
   1ee7e:	1ac0      	subs	r0, r0, r3
   1ee80:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1ee82:	4b08      	ldr	r3, [pc, #32]	; (1eea4 <z_device_ready+0x28>)
   1ee84:	0942      	lsrs	r2, r0, #5
   1ee86:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1ee8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1ee8e:	2301      	movs	r3, #1
   1ee90:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1ee94:	4210      	tst	r0, r2
}
   1ee96:	bf0c      	ite	eq
   1ee98:	4618      	moveq	r0, r3
   1ee9a:	2000      	movne	r0, #0
   1ee9c:	4770      	bx	lr
   1ee9e:	bf00      	nop
   1eea0:	20009d48 	.word	0x20009d48
   1eea4:	20009de8 	.word	0x20009de8

0001eea8 <z_impl_device_get_binding>:
{
   1eea8:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1eeaa:	4c10      	ldr	r4, [pc, #64]	; (1eeec <z_impl_device_get_binding+0x44>)
   1eeac:	4e10      	ldr	r6, [pc, #64]	; (1eef0 <z_impl_device_get_binding+0x48>)
{
   1eeae:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   1eeb0:	42b4      	cmp	r4, r6
   1eeb2:	d104      	bne.n	1eebe <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   1eeb4:	4c0d      	ldr	r4, [pc, #52]	; (1eeec <z_impl_device_get_binding+0x44>)
   1eeb6:	42b4      	cmp	r4, r6
   1eeb8:	d10a      	bne.n	1eed0 <z_impl_device_get_binding+0x28>
	return NULL;
   1eeba:	2400      	movs	r4, #0
   1eebc:	e014      	b.n	1eee8 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   1eebe:	4620      	mov	r0, r4
   1eec0:	f7ff ffdc 	bl	1ee7c <z_device_ready>
   1eec4:	b110      	cbz	r0, 1eecc <z_impl_device_get_binding+0x24>
   1eec6:	6823      	ldr	r3, [r4, #0]
   1eec8:	42ab      	cmp	r3, r5
   1eeca:	d00d      	beq.n	1eee8 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1eecc:	3410      	adds	r4, #16
   1eece:	e7ef      	b.n	1eeb0 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1eed0:	4620      	mov	r0, r4
   1eed2:	f7ff ffd3 	bl	1ee7c <z_device_ready>
   1eed6:	b908      	cbnz	r0, 1eedc <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   1eed8:	3410      	adds	r4, #16
   1eeda:	e7ec      	b.n	1eeb6 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1eedc:	6821      	ldr	r1, [r4, #0]
   1eede:	4628      	mov	r0, r5
   1eee0:	f004 fe1d 	bl	23b1e <strcmp>
   1eee4:	2800      	cmp	r0, #0
   1eee6:	d1f7      	bne.n	1eed8 <z_impl_device_get_binding+0x30>
}
   1eee8:	4620      	mov	r0, r4
   1eeea:	bd70      	pop	{r4, r5, r6, pc}
   1eeec:	20009d48 	.word	0x20009d48
   1eef0:	20009de8 	.word	0x20009de8

0001eef4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1eef4:	4b01      	ldr	r3, [pc, #4]	; (1eefc <z_impl_z_errno+0x8>)
   1eef6:	6898      	ldr	r0, [r3, #8]
}
   1eef8:	3068      	adds	r0, #104	; 0x68
   1eefa:	4770      	bx	lr
   1eefc:	2000ecac 	.word	0x2000ecac

0001ef00 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1ef00:	b510      	push	{r4, lr}
   1ef02:	4604      	mov	r4, r0
	z_impl_log_panic();
   1ef04:	f7e6 f8ea 	bl	50dc <z_impl_log_panic>
   1ef08:	4b06      	ldr	r3, [pc, #24]	; (1ef24 <k_sys_fatal_error_handler+0x24>)
   1ef0a:	4907      	ldr	r1, [pc, #28]	; (1ef28 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1ef0c:	4807      	ldr	r0, [pc, #28]	; (1ef2c <k_sys_fatal_error_handler+0x2c>)
   1ef0e:	1ac9      	subs	r1, r1, r3
   1ef10:	08c9      	lsrs	r1, r1, #3
   1ef12:	0189      	lsls	r1, r1, #6
   1ef14:	f041 0101 	orr.w	r1, r1, #1
   1ef18:	f002 fe23 	bl	21b62 <log_0>
	arch_system_halt(reason);
   1ef1c:	4620      	mov	r0, r4
   1ef1e:	f007 fa05 	bl	2632c <arch_system_halt>
   1ef22:	bf00      	nop
   1ef24:	00026fc8 	.word	0x00026fc8
   1ef28:	00027100 	.word	0x00027100
   1ef2c:	0002cf3a 	.word	0x0002cf3a

0001ef30 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ef30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ef34:	4606      	mov	r6, r0
   1ef36:	460f      	mov	r7, r1
	__asm__ volatile(
   1ef38:	f04f 0320 	mov.w	r3, #32
   1ef3c:	f3ef 8811 	mrs	r8, BASEPRI
   1ef40:	f383 8811 	msr	BASEPRI, r3
   1ef44:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1ef48:	f000 fe3e 	bl	1fbc8 <z_impl_k_current_get>
   1ef4c:	4c1f      	ldr	r4, [pc, #124]	; (1efcc <z_fatal_error+0x9c>)
   1ef4e:	4b20      	ldr	r3, [pc, #128]	; (1efd0 <z_fatal_error+0xa0>)
   1ef50:	1ae4      	subs	r4, r4, r3
   1ef52:	2e04      	cmp	r6, #4
   1ef54:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1ef58:	bf96      	itet	ls
   1ef5a:	4a1e      	ldrls	r2, [pc, #120]	; (1efd4 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1ef5c:	4a1e      	ldrhi	r2, [pc, #120]	; (1efd8 <z_fatal_error+0xa8>)
   1ef5e:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1ef62:	01a4      	lsls	r4, r4, #6
   1ef64:	f044 0301 	orr.w	r3, r4, #1
   1ef68:	4605      	mov	r5, r0
   1ef6a:	f8ad 3000 	strh.w	r3, [sp]
   1ef6e:	481b      	ldr	r0, [pc, #108]	; (1efdc <z_fatal_error+0xac>)
   1ef70:	2300      	movs	r3, #0
   1ef72:	4631      	mov	r1, r6
   1ef74:	f002 fe2f 	bl	21bd6 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1ef78:	b147      	cbz	r7, 1ef8c <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1ef7a:	69fb      	ldr	r3, [r7, #28]
   1ef7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1ef80:	b123      	cbz	r3, 1ef8c <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1ef82:	4817      	ldr	r0, [pc, #92]	; (1efe0 <z_fatal_error+0xb0>)
   1ef84:	f044 0101 	orr.w	r1, r4, #1
   1ef88:	f002 fdeb 	bl	21b62 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1ef8c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1ef90:	b12d      	cbz	r5, 1ef9e <z_fatal_error+0x6e>
   1ef92:	4628      	mov	r0, r5
   1ef94:	f007 fc3b 	bl	2680e <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1ef98:	b108      	cbz	r0, 1ef9e <z_fatal_error+0x6e>
   1ef9a:	7803      	ldrb	r3, [r0, #0]
   1ef9c:	b903      	cbnz	r3, 1efa0 <z_fatal_error+0x70>
		thread_name = "unknown";
   1ef9e:	4811      	ldr	r0, [pc, #68]	; (1efe4 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1efa0:	f7e5 ff18 	bl	4dd4 <log_strdup>
   1efa4:	4623      	mov	r3, r4
   1efa6:	4602      	mov	r2, r0
   1efa8:	4629      	mov	r1, r5
   1efaa:	480f      	ldr	r0, [pc, #60]	; (1efe8 <z_fatal_error+0xb8>)
   1efac:	f002 fdfa 	bl	21ba4 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1efb0:	4639      	mov	r1, r7
   1efb2:	4630      	mov	r0, r6
   1efb4:	f7ff ffa4 	bl	1ef00 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1efb8:	f388 8811 	msr	BASEPRI, r8
   1efbc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1efc0:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1efc2:	b002      	add	sp, #8
   1efc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1efc8:	f7e8 bb12 	b.w	75f0 <z_impl_k_thread_abort>
   1efcc:	00027100 	.word	0x00027100
   1efd0:	00026fc8 	.word	0x00026fc8
   1efd4:	00028980 	.word	0x00028980
   1efd8:	0002cf49 	.word	0x0002cf49
   1efdc:	0002cf57 	.word	0x0002cf57
   1efe0:	0002cf7f 	.word	0x0002cf7f
   1efe4:	0002b644 	.word	0x0002b644
   1efe8:	0002cfa0 	.word	0x0002cfa0

0001efec <z_pm_save_idle_exit>:
}
#endif /* !SMP_FALLBACK */


void z_pm_save_idle_exit(int32_t ticks)
{
   1efec:	b508      	push	{r3, lr}
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts. This can be
	 * disabled by calling pm_idle_exit_notification_disable().
	 * Alternatively it can be simply ignored if not required.
	 */
	if (pm_idle_exit_notify) {
   1efee:	4b04      	ldr	r3, [pc, #16]	; (1f000 <z_pm_save_idle_exit+0x14>)
   1eff0:	781b      	ldrb	r3, [r3, #0]
   1eff2:	b10b      	cbz	r3, 1eff8 <z_pm_save_idle_exit+0xc>
		pm_system_resume();
   1eff4:	f7e7 fa6c 	bl	64d0 <pm_system_resume>
	}
#endif	/* CONFIG_PM */
	z_clock_idle_exit();
}
   1eff8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_idle_exit();
   1effc:	f003 bbc6 	b.w	2278c <z_clock_idle_exit>
   1f000:	2000f2bf 	.word	0x2000f2bf

0001f004 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1f004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   1f008:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1f078 <idle+0x74>
	pm_idle_exit_notify = 1U;
   1f00c:	4e1b      	ldr	r6, [pc, #108]	; (1f07c <idle+0x78>)
{
   1f00e:	4605      	mov	r5, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f010:	2701      	movs	r7, #1
	__asm__ volatile(
   1f012:	f04f 0220 	mov.w	r2, #32
   1f016:	f3ef 8311 	mrs	r3, BASEPRI
   1f01a:	f382 8811 	msr	BASEPRI, r2
   1f01e:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1f022:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1f024:	b190      	cbz	r0, 1f04c <idle+0x48>
			cpu->pending_abort = NULL;
   1f026:	2200      	movs	r2, #0
   1f028:	612a      	str	r2, [r5, #16]
	__asm__ volatile(
   1f02a:	f383 8811 	msr	BASEPRI, r3
   1f02e:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   1f032:	f000 fc05 	bl	1f840 <z_thread_single_abort>
	__asm__ volatile(
   1f036:	f04f 0320 	mov.w	r3, #32
   1f03a:	f3ef 8011 	mrs	r0, BASEPRI
   1f03e:	f383 8811 	msr	BASEPRI, r3
   1f042:	f3bf 8f6f 	isb	sy
   1f046:	f007 faf1 	bl	2662c <z_reschedule_irqlock>
			continue;
   1f04a:	e7e2      	b.n	1f012 <idle+0xe>
		int32_t ticks = z_get_next_timeout_expiry();
   1f04c:	f007 fc6f 	bl	2692e <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f050:	2101      	movs	r1, #1
   1f052:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   1f054:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f056:	bfd8      	it	le
   1f058:	4608      	movle	r0, r1
   1f05a:	f007 fc78 	bl	2694e <z_set_timeout_expiry>
	idle_state = pm_system_suspend(ticks);
   1f05e:	4620      	mov	r0, r4
		_kernel.idle = ticks;
   1f060:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
	pm_idle_exit_notify = 1U;
   1f064:	7037      	strb	r7, [r6, #0]
	idle_state = pm_system_suspend(ticks);
   1f066:	f7e7 f9f7 	bl	6458 <pm_system_suspend>
	if (idle_state == PM_STATE_ACTIVE) {
   1f06a:	2800      	cmp	r0, #0
   1f06c:	d1d1      	bne.n	1f012 <idle+0xe>
		pm_idle_exit_notify = 0U;
   1f06e:	7030      	strb	r0, [r6, #0]
	arch_cpu_idle();
   1f070:	f7e7 ffce 	bl	7010 <arch_cpu_idle>
}
   1f074:	e7cd      	b.n	1f012 <idle+0xe>
   1f076:	bf00      	nop
   1f078:	2000ecac 	.word	0x2000ecac
   1f07c:	2000f2bf 	.word	0x2000f2bf

0001f080 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1f080:	4802      	ldr	r0, [pc, #8]	; (1f08c <z_bss_zero+0xc>)
   1f082:	4a03      	ldr	r2, [pc, #12]	; (1f090 <z_bss_zero+0x10>)
   1f084:	2100      	movs	r1, #0
   1f086:	1a12      	subs	r2, r2, r0
   1f088:	f004 bda2 	b.w	23bd0 <memset>
   1f08c:	2000a130 	.word	0x2000a130
   1f090:	2000f2c4 	.word	0x2000f2c4

0001f094 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f094:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1f096:	4b0a      	ldr	r3, [pc, #40]	; (1f0c0 <bg_thread_main+0x2c>)
   1f098:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f09a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1f09c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f09e:	f7ff fec5 	bl	1ee2c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1f0a2:	f000 ff31 	bl	1ff08 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1f0a6:	2003      	movs	r0, #3
   1f0a8:	f7ff fec0 	bl	1ee2c <z_sys_init_run_level>

	z_init_static_threads();
   1f0ac:	f000 fe56 	bl	1fd5c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1f0b0:	f7e3 fc92 	bl	29d8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f0b4:	4a03      	ldr	r2, [pc, #12]	; (1f0c4 <bg_thread_main+0x30>)
   1f0b6:	7b13      	ldrb	r3, [r2, #12]
   1f0b8:	f023 0301 	bic.w	r3, r3, #1
   1f0bc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f0be:	bd08      	pop	{r3, pc}
   1f0c0:	2000f2c0 	.word	0x2000f2c0
   1f0c4:	2000abe0 	.word	0x2000abe0

0001f0c8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1f0c8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1f0cc:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1f0ce:	f7e5 fdd9 	bl	4c84 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1f0d2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1f1a8 <z_cstart+0xe0>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f0d6:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f0da:	4d34      	ldr	r5, [pc, #208]	; (1f1ac <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1f0dc:	4e34      	ldr	r6, [pc, #208]	; (1f1b0 <z_cstart+0xe8>)
   1f0de:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f0e0:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1f1b4 <z_cstart+0xec>
	z_setup_new_thread(thread, stack,
   1f0e4:	4f34      	ldr	r7, [pc, #208]	; (1f1b8 <z_cstart+0xf0>)
   1f0e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f0ea:	2400      	movs	r4, #0
   1f0ec:	616b      	str	r3, [r5, #20]
   1f0ee:	23e0      	movs	r3, #224	; 0xe0
   1f0f0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f0f4:	77ec      	strb	r4, [r5, #31]
   1f0f6:	762c      	strb	r4, [r5, #24]
   1f0f8:	766c      	strb	r4, [r5, #25]
   1f0fa:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f0fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f0fe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f102:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f104:	f7e8 fa52 	bl	75ac <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f108:	f7e7 ff7c 	bl	7004 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f10c:	f04f 33ff 	mov.w	r3, #4294967295
   1f110:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f112:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1f114:	4d29      	ldr	r5, [pc, #164]	; (1f1bc <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f116:	f240 1301 	movw	r3, #257	; 0x101
   1f11a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1f11e:	ab06      	add	r3, sp, #24
   1f120:	60ab      	str	r3, [r5, #8]
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f122:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1f124:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1f128:	f7ff fe80 	bl	1ee2c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f12c:	2001      	movs	r0, #1
   1f12e:	f7ff fe7d 	bl	1ee2c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f132:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1f136:	f000 fc99 	bl	1fa6c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f13a:	4b21      	ldr	r3, [pc, #132]	; (1f1c0 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   1f13c:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f13e:	4921      	ldr	r1, [pc, #132]	; (1f1c4 <z_cstart+0xfc>)
   1f140:	9305      	str	r3, [sp, #20]
   1f142:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f146:	4653      	mov	r3, sl
   1f148:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1f14c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f150:	9400      	str	r4, [sp, #0]
   1f152:	4630      	mov	r0, r6
   1f154:	f000 fda4 	bl	1fca0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f158:	7b73      	ldrb	r3, [r6, #13]
   1f15a:	4680      	mov	r8, r0
   1f15c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1f160:	4630      	mov	r0, r6
   1f162:	7373      	strb	r3, [r6, #13]
   1f164:	f007 faa0 	bl	266a8 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1f168:	230f      	movs	r3, #15
   1f16a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1f16e:	4916      	ldr	r1, [pc, #88]	; (1f1c8 <z_cstart+0x100>)
   1f170:	4b16      	ldr	r3, [pc, #88]	; (1f1cc <z_cstart+0x104>)
   1f172:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f176:	e9cd b404 	strd	fp, r4, [sp, #16]
   1f17a:	e9cd 5400 	strd	r5, r4, [sp]
   1f17e:	4638      	mov	r0, r7
   1f180:	f000 fd8e 	bl	1fca0 <z_setup_new_thread>
   1f184:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1f186:	60ef      	str	r7, [r5, #12]
   1f188:	f023 0304 	bic.w	r3, r3, #4
   1f18c:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1f18e:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1f192:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1f196:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1f198:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f19c:	4652      	mov	r2, sl
   1f19e:	4641      	mov	r1, r8
   1f1a0:	4630      	mov	r0, r6
   1f1a2:	f7e7 ff15 	bl	6fd0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f1a6:	bf00      	nop
   1f1a8:	200120c0 	.word	0x200120c0
   1f1ac:	e000ed00 	.word	0xe000ed00
   1f1b0:	2000abe0 	.word	0x2000abe0
   1f1b4:	0001f095 	.word	0x0001f095
   1f1b8:	2000ab58 	.word	0x2000ab58
   1f1bc:	2000ecac 	.word	0x2000ecac
   1f1c0:	0002d002 	.word	0x0002d002
   1f1c4:	20011320 	.word	0x20011320
   1f1c8:	20011740 	.word	0x20011740
   1f1cc:	0001f005 	.word	0x0001f005

0001f1d0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1f1d0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f1d2:	4c06      	ldr	r4, [pc, #24]	; (1f1ec <statics_init+0x1c>)
   1f1d4:	4d06      	ldr	r5, [pc, #24]	; (1f1f0 <statics_init+0x20>)
   1f1d6:	42ac      	cmp	r4, r5
   1f1d8:	d301      	bcc.n	1f1de <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1f1da:	2000      	movs	r0, #0
   1f1dc:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1f1de:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1f1e2:	4620      	mov	r0, r4
   1f1e4:	f007 f8ab 	bl	2633e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f1e8:	3414      	adds	r4, #20
   1f1ea:	e7f4      	b.n	1f1d6 <statics_init+0x6>
   1f1ec:	20009f60 	.word	0x20009f60
   1f1f0:	20009f60 	.word	0x20009f60

0001f1f4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1f1f4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f1f6:	4b0e      	ldr	r3, [pc, #56]	; (1f230 <init_mem_slab_module+0x3c>)
   1f1f8:	4c0e      	ldr	r4, [pc, #56]	; (1f234 <init_mem_slab_module+0x40>)
   1f1fa:	42a3      	cmp	r3, r4
   1f1fc:	d301      	bcc.n	1f202 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1f1fe:	2000      	movs	r0, #0
	return rc;
}
   1f200:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f202:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1f206:	ea41 0200 	orr.w	r2, r1, r0
   1f20a:	f012 0203 	ands.w	r2, r2, #3
   1f20e:	d10b      	bne.n	1f228 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1f210:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1f212:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f214:	42aa      	cmp	r2, r5
   1f216:	d101      	bne.n	1f21c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f218:	331c      	adds	r3, #28
   1f21a:	e7ee      	b.n	1f1fa <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1f21c:	695e      	ldr	r6, [r3, #20]
   1f21e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f220:	3201      	adds	r2, #1
		slab->free_list = p;
   1f222:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1f224:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1f226:	e7f5      	b.n	1f214 <init_mem_slab_module+0x20>
	return rc;
   1f228:	f06f 0015 	mvn.w	r0, #21
   1f22c:	e7e8      	b.n	1f200 <init_mem_slab_module+0xc>
   1f22e:	bf00      	nop
   1f230:	20009f0c 	.word	0x20009f0c
   1f234:	20009f60 	.word	0x20009f60

0001f238 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f238:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f23a:	460c      	mov	r4, r1
   1f23c:	f04f 0520 	mov.w	r5, #32
   1f240:	f3ef 8111 	mrs	r1, BASEPRI
   1f244:	f385 8811 	msr	BASEPRI, r5
   1f248:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1f24c:	6945      	ldr	r5, [r0, #20]
   1f24e:	b15d      	cbz	r5, 1f268 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1f250:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f252:	682b      	ldr	r3, [r5, #0]
   1f254:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1f256:	6983      	ldr	r3, [r0, #24]
   1f258:	3301      	adds	r3, #1
   1f25a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f25c:	2000      	movs	r0, #0
	__asm__ volatile(
   1f25e:	f381 8811 	msr	BASEPRI, r1
   1f262:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1f266:	e011      	b.n	1f28c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f268:	ea52 0c03 	orrs.w	ip, r2, r3
   1f26c:	d103      	bne.n	1f276 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1f26e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1f270:	f06f 000b 	mvn.w	r0, #11
   1f274:	e7f3      	b.n	1f25e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1f276:	e9cd 2300 	strd	r2, r3, [sp]
   1f27a:	4602      	mov	r2, r0
   1f27c:	4804      	ldr	r0, [pc, #16]	; (1f290 <k_mem_slab_alloc+0x58>)
   1f27e:	f000 fba1 	bl	1f9c4 <z_pend_curr>
		if (result == 0) {
   1f282:	b918      	cbnz	r0, 1f28c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1f284:	4b03      	ldr	r3, [pc, #12]	; (1f294 <k_mem_slab_alloc+0x5c>)
   1f286:	689b      	ldr	r3, [r3, #8]
   1f288:	695b      	ldr	r3, [r3, #20]
   1f28a:	6023      	str	r3, [r4, #0]
}
   1f28c:	b003      	add	sp, #12
   1f28e:	bd30      	pop	{r4, r5, pc}
   1f290:	2000f2c1 	.word	0x2000f2c1
   1f294:	2000ecac 	.word	0x2000ecac

0001f298 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f29a:	4604      	mov	r4, r0
   1f29c:	460d      	mov	r5, r1
	__asm__ volatile(
   1f29e:	f04f 0320 	mov.w	r3, #32
   1f2a2:	f3ef 8611 	mrs	r6, BASEPRI
   1f2a6:	f383 8811 	msr	BASEPRI, r3
   1f2aa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1f2ae:	6947      	ldr	r7, [r0, #20]
   1f2b0:	b977      	cbnz	r7, 1f2d0 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f2b2:	f007 fa66 	bl	26782 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1f2b6:	b158      	cbz	r0, 1f2d0 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f2b8:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f2ba:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f2bc:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
			z_ready_thread(pending_thread);
   1f2c0:	f007 f9f2 	bl	266a8 <z_ready_thread>
			z_reschedule(&lock, key);
   1f2c4:	4631      	mov	r1, r6
   1f2c6:	4809      	ldr	r0, [pc, #36]	; (1f2ec <k_mem_slab_free+0x54>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1f2c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1f2cc:	f000 b93a 	b.w	1f544 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1f2d0:	682b      	ldr	r3, [r5, #0]
   1f2d2:	6962      	ldr	r2, [r4, #20]
   1f2d4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1f2d6:	682b      	ldr	r3, [r5, #0]
   1f2d8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1f2da:	69a3      	ldr	r3, [r4, #24]
   1f2dc:	3b01      	subs	r3, #1
   1f2de:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1f2e0:	f386 8811 	msr	BASEPRI, r6
   1f2e4:	f3bf 8f6f 	isb	sy
}
   1f2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f2ea:	bf00      	nop
   1f2ec:	2000f2c1 	.word	0x2000f2c1

0001f2f0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1f2f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f2f4:	4604      	mov	r4, r0
   1f2f6:	4617      	mov	r7, r2
   1f2f8:	461e      	mov	r6, r3
	__asm__ volatile(
   1f2fa:	f04f 0320 	mov.w	r3, #32
   1f2fe:	f3ef 8811 	mrs	r8, BASEPRI
   1f302:	f383 8811 	msr	BASEPRI, r3
   1f306:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f30a:	68c3      	ldr	r3, [r0, #12]
   1f30c:	4a2f      	ldr	r2, [pc, #188]	; (1f3cc <z_impl_k_mutex_lock+0xdc>)
   1f30e:	b16b      	cbz	r3, 1f32c <z_impl_k_mutex_lock+0x3c>
   1f310:	6880      	ldr	r0, [r0, #8]
   1f312:	6891      	ldr	r1, [r2, #8]
   1f314:	4288      	cmp	r0, r1
   1f316:	d019      	beq.n	1f34c <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1f318:	ea57 0306 	orrs.w	r3, r7, r6
   1f31c:	d118      	bne.n	1f350 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1f31e:	f388 8811 	msr	BASEPRI, r8
   1f322:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1f326:	f06f 000f 	mvn.w	r0, #15
   1f32a:	e00c      	b.n	1f346 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1f32c:	6891      	ldr	r1, [r2, #8]
   1f32e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1f332:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1f334:	3301      	adds	r3, #1
   1f336:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1f338:	6893      	ldr	r3, [r2, #8]
   1f33a:	60a3      	str	r3, [r4, #8]
   1f33c:	f388 8811 	msr	BASEPRI, r8
   1f340:	f3bf 8f6f 	isb	sy
		return 0;
   1f344:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1f346:	b002      	add	sp, #8
   1f348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1f34c:	6921      	ldr	r1, [r4, #16]
   1f34e:	e7f0      	b.n	1f332 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1f350:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f354:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1f358:	4299      	cmp	r1, r3
   1f35a:	bfa8      	it	ge
   1f35c:	4619      	movge	r1, r3
   1f35e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1f362:	428b      	cmp	r3, r1
   1f364:	dd2b      	ble.n	1f3be <z_impl_k_mutex_lock+0xce>
		resched = adjust_owner_prio(mutex, new_prio);
   1f366:	f007 f86b 	bl	26440 <adjust_owner_prio.isra.0>
   1f36a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1f36c:	e9cd 7600 	strd	r7, r6, [sp]
   1f370:	4817      	ldr	r0, [pc, #92]	; (1f3d0 <z_impl_k_mutex_lock+0xe0>)
   1f372:	4622      	mov	r2, r4
   1f374:	4641      	mov	r1, r8
   1f376:	f000 fb25 	bl	1f9c4 <z_pend_curr>
	if (got_mutex == 0) {
   1f37a:	2800      	cmp	r0, #0
   1f37c:	d0e3      	beq.n	1f346 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1f37e:	f04f 0320 	mov.w	r3, #32
   1f382:	f3ef 8611 	mrs	r6, BASEPRI
   1f386:	f383 8811 	msr	BASEPRI, r3
   1f38a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1f38e:	6823      	ldr	r3, [r4, #0]
   1f390:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f392:	42a3      	cmp	r3, r4
   1f394:	d007      	beq.n	1f3a6 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1f396:	b133      	cbz	r3, 1f3a6 <z_impl_k_mutex_lock+0xb6>
   1f398:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f39c:	4299      	cmp	r1, r3
   1f39e:	bfa8      	it	ge
   1f3a0:	4619      	movge	r1, r3
   1f3a2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f3a6:	68a0      	ldr	r0, [r4, #8]
   1f3a8:	f007 f84a 	bl	26440 <adjust_owner_prio.isra.0>
   1f3ac:	b900      	cbnz	r0, 1f3b0 <z_impl_k_mutex_lock+0xc0>
	if (resched) {
   1f3ae:	b145      	cbz	r5, 1f3c2 <z_impl_k_mutex_lock+0xd2>
		z_reschedule(&lock, key);
   1f3b0:	4807      	ldr	r0, [pc, #28]	; (1f3d0 <z_impl_k_mutex_lock+0xe0>)
   1f3b2:	4631      	mov	r1, r6
   1f3b4:	f000 f8c6 	bl	1f544 <z_reschedule>
	return -EAGAIN;
   1f3b8:	f06f 000a 	mvn.w	r0, #10
   1f3bc:	e7c3      	b.n	1f346 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1f3be:	2500      	movs	r5, #0
   1f3c0:	e7d4      	b.n	1f36c <z_impl_k_mutex_lock+0x7c>
	__asm__ volatile(
   1f3c2:	f386 8811 	msr	BASEPRI, r6
   1f3c6:	f3bf 8f6f 	isb	sy
   1f3ca:	e7f5      	b.n	1f3b8 <z_impl_k_mutex_lock+0xc8>
   1f3cc:	2000ecac 	.word	0x2000ecac
   1f3d0:	2000f2c1 	.word	0x2000f2c1

0001f3d4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1f3d4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1f3d6:	6883      	ldr	r3, [r0, #8]
{
   1f3d8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1f3da:	2b00      	cmp	r3, #0
   1f3dc:	d033      	beq.n	1f446 <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1f3de:	4a1d      	ldr	r2, [pc, #116]	; (1f454 <z_impl_k_mutex_unlock+0x80>)
   1f3e0:	6892      	ldr	r2, [r2, #8]
   1f3e2:	4293      	cmp	r3, r2
   1f3e4:	d132      	bne.n	1f44c <z_impl_k_mutex_unlock+0x78>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1f3e6:	7bda      	ldrb	r2, [r3, #15]
   1f3e8:	3a01      	subs	r2, #1
   1f3ea:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1f3ec:	68c3      	ldr	r3, [r0, #12]
   1f3ee:	2b01      	cmp	r3, #1
   1f3f0:	d005      	beq.n	1f3fe <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1f3f2:	3b01      	subs	r3, #1
   1f3f4:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1f3f6:	f000 f909 	bl	1f60c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1f3fa:	2000      	movs	r0, #0
}
   1f3fc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1f3fe:	f04f 0320 	mov.w	r3, #32
   1f402:	f3ef 8511 	mrs	r5, BASEPRI
   1f406:	f383 8811 	msr	BASEPRI, r3
   1f40a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1f40e:	6901      	ldr	r1, [r0, #16]
   1f410:	6880      	ldr	r0, [r0, #8]
   1f412:	f007 f815 	bl	26440 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1f416:	4620      	mov	r0, r4
   1f418:	f007 f9b3 	bl	26782 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1f41c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1f41e:	b160      	cbz	r0, 1f43a <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
   1f420:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1f424:	6122      	str	r2, [r4, #16]
   1f426:	2200      	movs	r2, #0
   1f428:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   1f42c:	f007 f93c 	bl	266a8 <z_ready_thread>
		z_reschedule(&lock, key);
   1f430:	4809      	ldr	r0, [pc, #36]	; (1f458 <z_impl_k_mutex_unlock+0x84>)
   1f432:	4629      	mov	r1, r5
   1f434:	f000 f886 	bl	1f544 <z_reschedule>
   1f438:	e7dd      	b.n	1f3f6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1f43a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1f43c:	f385 8811 	msr	BASEPRI, r5
   1f440:	f3bf 8f6f 	isb	sy
   1f444:	e7d7      	b.n	1f3f6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1f446:	f06f 0015 	mvn.w	r0, #21
   1f44a:	e7d7      	b.n	1f3fc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1f44c:	f04f 30ff 	mov.w	r0, #4294967295
   1f450:	e7d4      	b.n	1f3fc <z_impl_k_mutex_unlock+0x28>
   1f452:	bf00      	nop
   1f454:	2000ecac 	.word	0x2000ecac
   1f458:	2000f2c1 	.word	0x2000f2c1

0001f45c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1f45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f45e:	4611      	mov	r1, r2
	__asm__ volatile(
   1f460:	f04f 0220 	mov.w	r2, #32
   1f464:	f3ef 8511 	mrs	r5, BASEPRI
   1f468:	f382 8811 	msr	BASEPRI, r2
   1f46c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1f470:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1f472:	b19c      	cbz	r4, 1f49c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f474:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f476:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f478:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f47c:	4294      	cmp	r4, r2
	list->head = node;
   1f47e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1f480:	bf08      	it	eq
   1f482:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1f484:	2101      	movs	r1, #1
   1f486:	4620      	mov	r0, r4
   1f488:	f007 f84e 	bl	26528 <z_queue_node_peek>
   1f48c:	4604      	mov	r4, r0
	__asm__ volatile(
   1f48e:	f385 8811 	msr	BASEPRI, r5
   1f492:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1f496:	4620      	mov	r0, r4
   1f498:	b003      	add	sp, #12
   1f49a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f49c:	ea51 0203 	orrs.w	r2, r1, r3
   1f4a0:	d0f5      	beq.n	1f48e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f4a2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1f4a6:	e9cd 1300 	strd	r1, r3, [sp]
   1f4aa:	4610      	mov	r0, r2
   1f4ac:	4629      	mov	r1, r5
   1f4ae:	f000 fa89 	bl	1f9c4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1f4b2:	2800      	cmp	r0, #0
   1f4b4:	d1ef      	bne.n	1f496 <z_impl_k_queue_get+0x3a>
   1f4b6:	4b02      	ldr	r3, [pc, #8]	; (1f4c0 <z_impl_k_queue_get+0x64>)
   1f4b8:	689b      	ldr	r3, [r3, #8]
   1f4ba:	695c      	ldr	r4, [r3, #20]
   1f4bc:	e7eb      	b.n	1f496 <z_impl_k_queue_get+0x3a>
   1f4be:	bf00      	nop
   1f4c0:	2000ecac 	.word	0x2000ecac

0001f4c4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1f4c4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1f4c6:	4c08      	ldr	r4, [pc, #32]	; (1f4e8 <z_reset_time_slice+0x24>)
   1f4c8:	6823      	ldr	r3, [r4, #0]
   1f4ca:	b15b      	cbz	r3, 1f4e4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1f4cc:	f7e7 fabe 	bl	6a4c <z_clock_elapsed>
   1f4d0:	4603      	mov	r3, r0
   1f4d2:	6820      	ldr	r0, [r4, #0]
   1f4d4:	4a05      	ldr	r2, [pc, #20]	; (1f4ec <z_reset_time_slice+0x28>)
   1f4d6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1f4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1f4dc:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1f4de:	2100      	movs	r1, #0
   1f4e0:	f007 ba35 	b.w	2694e <z_set_timeout_expiry>
}
   1f4e4:	bd10      	pop	{r4, pc}
   1f4e6:	bf00      	nop
   1f4e8:	2000ece8 	.word	0x2000ece8
   1f4ec:	2000ecac 	.word	0x2000ecac

0001f4f0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f4f2:	4604      	mov	r4, r0
   1f4f4:	460d      	mov	r5, r1
	__asm__ volatile(
   1f4f6:	f04f 0320 	mov.w	r3, #32
   1f4fa:	f3ef 8711 	mrs	r7, BASEPRI
   1f4fe:	f383 8811 	msr	BASEPRI, r3
   1f502:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1f506:	4b0c      	ldr	r3, [pc, #48]	; (1f538 <k_sched_time_slice_set+0x48>)
   1f508:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1f50a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1f50e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f512:	6159      	str	r1, [r3, #20]
   1f514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f518:	2300      	movs	r3, #0
   1f51a:	fbe4 0106 	umlal	r0, r1, r4, r6
   1f51e:	f7e1 fc93 	bl	e48 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1f522:	4b06      	ldr	r3, [pc, #24]	; (1f53c <k_sched_time_slice_set+0x4c>)
   1f524:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1f526:	4b06      	ldr	r3, [pc, #24]	; (1f540 <k_sched_time_slice_set+0x50>)
   1f528:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1f52a:	f7ff ffcb 	bl	1f4c4 <z_reset_time_slice>
	__asm__ volatile(
   1f52e:	f387 8811 	msr	BASEPRI, r7
   1f532:	f3bf 8f6f 	isb	sy
	}
}
   1f536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f538:	2000ecac 	.word	0x2000ecac
   1f53c:	2000ece8 	.word	0x2000ece8
   1f540:	2000ece4 	.word	0x2000ece4

0001f544 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f544:	b949      	cbnz	r1, 1f55a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f546:	f3ef 8005 	mrs	r0, IPSR
   1f54a:	b930      	cbnz	r0, 1f55a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1f54c:	4b05      	ldr	r3, [pc, #20]	; (1f564 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1f54e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1f550:	689b      	ldr	r3, [r3, #8]
   1f552:	429a      	cmp	r2, r3
   1f554:	d001      	beq.n	1f55a <z_reschedule+0x16>
	ret = arch_swap(key);
   1f556:	f7e7 bc5b 	b.w	6e10 <arch_swap>
   1f55a:	f381 8811 	msr	BASEPRI, r1
   1f55e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1f562:	4770      	bx	lr
   1f564:	2000ecac 	.word	0x2000ecac

0001f568 <k_sched_lock>:
	__asm__ volatile(
   1f568:	f04f 0320 	mov.w	r3, #32
   1f56c:	f3ef 8111 	mrs	r1, BASEPRI
   1f570:	f383 8811 	msr	BASEPRI, r3
   1f574:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1f578:	4b04      	ldr	r3, [pc, #16]	; (1f58c <k_sched_lock+0x24>)
   1f57a:	689a      	ldr	r2, [r3, #8]
   1f57c:	7bd3      	ldrb	r3, [r2, #15]
   1f57e:	3b01      	subs	r3, #1
   1f580:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1f582:	f381 8811 	msr	BASEPRI, r1
   1f586:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1f58a:	4770      	bx	lr
   1f58c:	2000ecac 	.word	0x2000ecac

0001f590 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1f590:	4b09      	ldr	r3, [pc, #36]	; (1f5b8 <z_priq_dumb_remove+0x28>)
   1f592:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1f596:	4282      	cmp	r2, r0
   1f598:	d105      	bne.n	1f5a6 <z_priq_dumb_remove+0x16>
   1f59a:	689b      	ldr	r3, [r3, #8]
   1f59c:	428b      	cmp	r3, r1
   1f59e:	d102      	bne.n	1f5a6 <z_priq_dumb_remove+0x16>
   1f5a0:	7b4b      	ldrb	r3, [r1, #13]
   1f5a2:	06db      	lsls	r3, r3, #27
   1f5a4:	d106      	bne.n	1f5b4 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1f5a6:	e9d1 3200 	ldrd	r3, r2, [r1]
   1f5aa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1f5ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f5ae:	2300      	movs	r3, #0
	node->prev = NULL;
   1f5b0:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1f5b4:	4770      	bx	lr
   1f5b6:	bf00      	nop
   1f5b8:	2000ecac 	.word	0x2000ecac

0001f5bc <update_cache>:
{
   1f5bc:	b538      	push	{r3, r4, r5, lr}
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1f5be:	4d12      	ldr	r5, [pc, #72]	; (1f608 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1f5c0:	692b      	ldr	r3, [r5, #16]
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1f5c2:	68aa      	ldr	r2, [r5, #8]
{
   1f5c4:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1f5c6:	b10b      	cbz	r3, 1f5cc <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1f5c8:	68ec      	ldr	r4, [r5, #12]
   1f5ca:	e00c      	b.n	1f5e6 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1f5cc:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   1f5d0:	f007 f864 	bl	2669c <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1f5d4:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1f5d6:	4604      	mov	r4, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1f5d8:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1f5da:	bf44      	itt	mi
   1f5dc:	f043 0308 	orrmi.w	r3, r3, #8
   1f5e0:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1f5e2:	2c00      	cmp	r4, #0
   1f5e4:	d0f0      	beq.n	1f5c8 <update_cache+0xc>
	if (preempt_ok != 0) {
   1f5e6:	b949      	cbnz	r1, 1f5fc <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1f5e8:	7b53      	ldrb	r3, [r2, #13]
   1f5ea:	06db      	lsls	r3, r3, #27
   1f5ec:	d106      	bne.n	1f5fc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1f5ee:	69a3      	ldr	r3, [r4, #24]
   1f5f0:	b923      	cbnz	r3, 1f5fc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1f5f2:	89d3      	ldrh	r3, [r2, #14]
   1f5f4:	2b7f      	cmp	r3, #127	; 0x7f
   1f5f6:	d901      	bls.n	1f5fc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1f5f8:	62aa      	str	r2, [r5, #40]	; 0x28
}
   1f5fa:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1f5fc:	4294      	cmp	r4, r2
   1f5fe:	d001      	beq.n	1f604 <update_cache+0x48>
			z_reset_time_slice();
   1f600:	f7ff ff60 	bl	1f4c4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1f604:	62ac      	str	r4, [r5, #40]	; 0x28
}
   1f606:	e7f8      	b.n	1f5fa <update_cache+0x3e>
   1f608:	2000ecac 	.word	0x2000ecac

0001f60c <k_sched_unlock>:
{
   1f60c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f60e:	f04f 0320 	mov.w	r3, #32
   1f612:	f3ef 8411 	mrs	r4, BASEPRI
   1f616:	f383 8811 	msr	BASEPRI, r3
   1f61a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1f61e:	4b08      	ldr	r3, [pc, #32]	; (1f640 <k_sched_unlock+0x34>)
   1f620:	689a      	ldr	r2, [r3, #8]
   1f622:	7bd3      	ldrb	r3, [r2, #15]
   1f624:	3301      	adds	r3, #1
   1f626:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1f628:	2000      	movs	r0, #0
   1f62a:	f7ff ffc7 	bl	1f5bc <update_cache>
	__asm__ volatile(
   1f62e:	f384 8811 	msr	BASEPRI, r4
   1f632:	f3bf 8f6f 	isb	sy
}
   1f636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1f63a:	f007 b803 	b.w	26644 <z_reschedule_unlocked>
   1f63e:	bf00      	nop
   1f640:	2000ecac 	.word	0x2000ecac

0001f644 <ready_thread>:
{
   1f644:	b4f0      	push	{r4, r5, r6, r7}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1f646:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1f64a:	7b41      	ldrb	r1, [r0, #13]
   1f64c:	2b00      	cmp	r3, #0
   1f64e:	db28      	blt.n	1f6a2 <ready_thread+0x5e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1f650:	06cb      	lsls	r3, r1, #27
   1f652:	d126      	bne.n	1f6a2 <ready_thread+0x5e>
   1f654:	6983      	ldr	r3, [r0, #24]
   1f656:	bb23      	cbnz	r3, 1f6a2 <ready_thread+0x5e>
	return list->head == list;
   1f658:	4a13      	ldr	r2, [pc, #76]	; (1f6a8 <ready_thread+0x64>)
	return (node == list->tail) ? NULL : node->next;
   1f65a:	e9d2 340b 	ldrd	r3, r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f65e:	f102 052c 	add.w	r5, r2, #44	; 0x2c
   1f662:	42ab      	cmp	r3, r5
   1f664:	d017      	beq.n	1f696 <ready_thread+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f666:	b1b3      	cbz	r3, 1f696 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   1f668:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1f66c:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1f670:	42b7      	cmp	r7, r6
   1f672:	dd0b      	ble.n	1f68c <ready_thread+0x48>
	node->prev = successor->prev;
   1f674:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1f676:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1f67a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1f67c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1f67e:	f061 017f 	orn	r1, r1, #127	; 0x7f
   1f682:	7341      	strb	r1, [r0, #13]
}
   1f684:	bcf0      	pop	{r4, r5, r6, r7}
		update_cache(0);
   1f686:	2000      	movs	r0, #0
   1f688:	f7ff bf98 	b.w	1f5bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1f68c:	42a3      	cmp	r3, r4
   1f68e:	d002      	beq.n	1f696 <ready_thread+0x52>
   1f690:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f692:	2b00      	cmp	r3, #0
   1f694:	d1ea      	bne.n	1f66c <ready_thread+0x28>
	node->prev = list->tail;
   1f696:	e9c0 5400 	strd	r5, r4, [r0]
	list->tail->next = node;
   1f69a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1f69c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1f69e:	6310      	str	r0, [r2, #48]	; 0x30
}
   1f6a0:	e7ed      	b.n	1f67e <ready_thread+0x3a>
}
   1f6a2:	bcf0      	pop	{r4, r5, r6, r7}
   1f6a4:	4770      	bx	lr
   1f6a6:	bf00      	nop
   1f6a8:	2000ecac 	.word	0x2000ecac

0001f6ac <z_sched_start>:
{
   1f6ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f6ae:	f04f 0220 	mov.w	r2, #32
   1f6b2:	f3ef 8411 	mrs	r4, BASEPRI
   1f6b6:	f382 8811 	msr	BASEPRI, r2
   1f6ba:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1f6be:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1f6c0:	0751      	lsls	r1, r2, #29
   1f6c2:	d404      	bmi.n	1f6ce <z_sched_start+0x22>
	__asm__ volatile(
   1f6c4:	f384 8811 	msr	BASEPRI, r4
   1f6c8:	f3bf 8f6f 	isb	sy
}
   1f6cc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f6ce:	f022 0204 	bic.w	r2, r2, #4
   1f6d2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1f6d4:	f7ff ffb6 	bl	1f644 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1f6d8:	4621      	mov	r1, r4
   1f6da:	4802      	ldr	r0, [pc, #8]	; (1f6e4 <z_sched_start+0x38>)
}
   1f6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1f6e0:	f7ff bf30 	b.w	1f544 <z_reschedule>
   1f6e4:	2000f2c1 	.word	0x2000f2c1

0001f6e8 <move_thread_to_end_of_prio_q>:
{
   1f6e8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1f6ea:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1f6ee:	2b00      	cmp	r3, #0
{
   1f6f0:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1f6f2:	da02      	bge.n	1f6fa <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f6f4:	4816      	ldr	r0, [pc, #88]	; (1f750 <move_thread_to_end_of_prio_q+0x68>)
   1f6f6:	f7ff ff4b 	bl	1f590 <z_priq_dumb_remove>
	return list->head == list;
   1f6fa:	4a16      	ldr	r2, [pc, #88]	; (1f754 <move_thread_to_end_of_prio_q+0x6c>)
	return (node == list->tail) ? NULL : node->next;
   1f6fc:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f700:	f102 042c 	add.w	r4, r2, #44	; 0x2c
   1f704:	42a3      	cmp	r3, r4
   1f706:	d01c      	beq.n	1f742 <move_thread_to_end_of_prio_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f708:	b1db      	cbz	r3, 1f742 <move_thread_to_end_of_prio_q+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1f70a:	f991 500e 	ldrsb.w	r5, [r1, #14]
   1f70e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1f712:	42ae      	cmp	r6, r5
   1f714:	dd10      	ble.n	1f738 <move_thread_to_end_of_prio_q+0x50>
	node->prev = successor->prev;
   1f716:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1f718:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1f71c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1f71e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1f720:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1f722:	6890      	ldr	r0, [r2, #8]
   1f724:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f728:	734b      	strb	r3, [r1, #13]
   1f72a:	1a43      	subs	r3, r0, r1
   1f72c:	4258      	negs	r0, r3
}
   1f72e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1f732:	4158      	adcs	r0, r3
   1f734:	f7ff bf42 	b.w	1f5bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1f738:	4283      	cmp	r3, r0
   1f73a:	d002      	beq.n	1f742 <move_thread_to_end_of_prio_q+0x5a>
   1f73c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f73e:	2b00      	cmp	r3, #0
   1f740:	d1e5      	bne.n	1f70e <move_thread_to_end_of_prio_q+0x26>
	node->prev = list->tail;
   1f742:	e9c1 4000 	strd	r4, r0, [r1]
	list->tail->next = node;
   1f746:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1f748:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1f74a:	6311      	str	r1, [r2, #48]	; 0x30
}
   1f74c:	e7e8      	b.n	1f720 <move_thread_to_end_of_prio_q+0x38>
   1f74e:	bf00      	nop
   1f750:	2000ecd8 	.word	0x2000ecd8
   1f754:	2000ecac 	.word	0x2000ecac

0001f758 <z_time_slice>:
{
   1f758:	b538      	push	{r3, r4, r5, lr}
   1f75a:	4601      	mov	r1, r0
	__asm__ volatile(
   1f75c:	f04f 0320 	mov.w	r3, #32
   1f760:	f3ef 8411 	mrs	r4, BASEPRI
   1f764:	f383 8811 	msr	BASEPRI, r3
   1f768:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1f76c:	4b15      	ldr	r3, [pc, #84]	; (1f7c4 <z_time_slice+0x6c>)
   1f76e:	4a16      	ldr	r2, [pc, #88]	; (1f7c8 <z_time_slice+0x70>)
   1f770:	6898      	ldr	r0, [r3, #8]
   1f772:	6815      	ldr	r5, [r2, #0]
   1f774:	42a8      	cmp	r0, r5
   1f776:	d106      	bne.n	1f786 <z_time_slice+0x2e>
			z_reset_time_slice();
   1f778:	f7ff fea4 	bl	1f4c4 <z_reset_time_slice>
	__asm__ volatile(
   1f77c:	f384 8811 	msr	BASEPRI, r4
   1f780:	f3bf 8f6f 	isb	sy
}
   1f784:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1f786:	2500      	movs	r5, #0
   1f788:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1f78a:	4a10      	ldr	r2, [pc, #64]	; (1f7cc <z_time_slice+0x74>)
   1f78c:	6812      	ldr	r2, [r2, #0]
   1f78e:	b1ba      	cbz	r2, 1f7c0 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1f790:	89c2      	ldrh	r2, [r0, #14]
   1f792:	2a7f      	cmp	r2, #127	; 0x7f
   1f794:	d814      	bhi.n	1f7c0 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   1f796:	7b42      	ldrb	r2, [r0, #13]
   1f798:	06d2      	lsls	r2, r2, #27
   1f79a:	d111      	bne.n	1f7c0 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1f79c:	4a0c      	ldr	r2, [pc, #48]	; (1f7d0 <z_time_slice+0x78>)
   1f79e:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1f7a2:	6812      	ldr	r2, [r2, #0]
   1f7a4:	4295      	cmp	r5, r2
   1f7a6:	db0b      	blt.n	1f7c0 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1f7a8:	4a0a      	ldr	r2, [pc, #40]	; (1f7d4 <z_time_slice+0x7c>)
   1f7aa:	4290      	cmp	r0, r2
   1f7ac:	d008      	beq.n	1f7c0 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   1f7ae:	695a      	ldr	r2, [r3, #20]
   1f7b0:	428a      	cmp	r2, r1
   1f7b2:	dc02      	bgt.n	1f7ba <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   1f7b4:	f7ff ff98 	bl	1f6e8 <move_thread_to_end_of_prio_q>
   1f7b8:	e7de      	b.n	1f778 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1f7ba:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   1f7bc:	615a      	str	r2, [r3, #20]
   1f7be:	e7dd      	b.n	1f77c <z_time_slice+0x24>
   1f7c0:	2200      	movs	r2, #0
   1f7c2:	e7fb      	b.n	1f7bc <z_time_slice+0x64>
   1f7c4:	2000ecac 	.word	0x2000ecac
   1f7c8:	2000ece0 	.word	0x2000ece0
   1f7cc:	2000ece8 	.word	0x2000ece8
   1f7d0:	2000ece4 	.word	0x2000ece4
   1f7d4:	2000ab58 	.word	0x2000ab58

0001f7d8 <z_impl_k_thread_suspend>:
{
   1f7d8:	b570      	push	{r4, r5, r6, lr}
   1f7da:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1f7dc:	3018      	adds	r0, #24
   1f7de:	f007 f890 	bl	26902 <z_abort_timeout>
	__asm__ volatile(
   1f7e2:	f04f 0320 	mov.w	r3, #32
   1f7e6:	f3ef 8611 	mrs	r6, BASEPRI
   1f7ea:	f383 8811 	msr	BASEPRI, r3
   1f7ee:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1f7f2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1f7f6:	2b00      	cmp	r3, #0
   1f7f8:	da07      	bge.n	1f80a <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f7fa:	480f      	ldr	r0, [pc, #60]	; (1f838 <z_impl_k_thread_suspend+0x60>)
   1f7fc:	4621      	mov	r1, r4
   1f7fe:	f7ff fec7 	bl	1f590 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f802:	7b63      	ldrb	r3, [r4, #13]
   1f804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f808:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1f80a:	4d0c      	ldr	r5, [pc, #48]	; (1f83c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1f80c:	7b63      	ldrb	r3, [r4, #13]
   1f80e:	68a8      	ldr	r0, [r5, #8]
   1f810:	f043 0310 	orr.w	r3, r3, #16
   1f814:	7363      	strb	r3, [r4, #13]
   1f816:	1b03      	subs	r3, r0, r4
   1f818:	4258      	negs	r0, r3
   1f81a:	4158      	adcs	r0, r3
   1f81c:	f7ff fece 	bl	1f5bc <update_cache>
	__asm__ volatile(
   1f820:	f386 8811 	msr	BASEPRI, r6
   1f824:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1f828:	68ab      	ldr	r3, [r5, #8]
   1f82a:	42a3      	cmp	r3, r4
   1f82c:	d103      	bne.n	1f836 <z_impl_k_thread_suspend+0x5e>
}
   1f82e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1f832:	f006 bf07 	b.w	26644 <z_reschedule_unlocked>
}
   1f836:	bd70      	pop	{r4, r5, r6, pc}
   1f838:	2000ecd8 	.word	0x2000ecd8
   1f83c:	2000ecac 	.word	0x2000ecac

0001f840 <z_thread_single_abort>:
{
   1f840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f844:	4604      	mov	r4, r0
	__asm__ volatile(
   1f846:	f04f 0320 	mov.w	r3, #32
   1f84a:	f3ef 8211 	mrs	r2, BASEPRI
   1f84e:	f383 8811 	msr	BASEPRI, r3
   1f852:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1f856:	7b43      	ldrb	r3, [r0, #13]
   1f858:	f013 0f28 	tst.w	r3, #40	; 0x28
   1f85c:	d005      	beq.n	1f86a <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1f85e:	f382 8811 	msr	BASEPRI, r2
   1f862:	f3bf 8f6f 	isb	sy
}
   1f866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1f86a:	f043 0320 	orr.w	r3, r3, #32
   1f86e:	7343      	strb	r3, [r0, #13]
   1f870:	f382 8811 	msr	BASEPRI, r2
   1f874:	f3bf 8f6f 	isb	sy
   1f878:	3018      	adds	r0, #24
   1f87a:	f007 f842 	bl	26902 <z_abort_timeout>
	__asm__ volatile(
   1f87e:	f04f 0320 	mov.w	r3, #32
   1f882:	f3ef 8611 	mrs	r6, BASEPRI
   1f886:	f383 8811 	msr	BASEPRI, r3
   1f88a:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1f88e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1f890:	06d8      	lsls	r0, r3, #27
   1f892:	d116      	bne.n	1f8c2 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1f894:	69a2      	ldr	r2, [r4, #24]
   1f896:	b9a2      	cbnz	r2, 1f8c2 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1f898:	0619      	lsls	r1, r3, #24
   1f89a:	d507      	bpl.n	1f8ac <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1f89c:	4826      	ldr	r0, [pc, #152]	; (1f938 <z_thread_single_abort+0xf8>)
   1f89e:	4621      	mov	r1, r4
   1f8a0:	f7ff fe76 	bl	1f590 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f8a4:	7b63      	ldrb	r3, [r4, #13]
   1f8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f8aa:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1f8ac:	4b23      	ldr	r3, [pc, #140]	; (1f93c <z_thread_single_abort+0xfc>)
   1f8ae:	6898      	ldr	r0, [r3, #8]
   1f8b0:	1b02      	subs	r2, r0, r4
   1f8b2:	4250      	negs	r0, r2
   1f8b4:	4150      	adcs	r0, r2
   1f8b6:	f7ff fe81 	bl	1f5bc <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1f8ba:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1f8be:	2700      	movs	r7, #0
   1f8c0:	e01e      	b.n	1f900 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1f8c2:	079b      	lsls	r3, r3, #30
   1f8c4:	d5f9      	bpl.n	1f8ba <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1f8c6:	68a0      	ldr	r0, [r4, #8]
   1f8c8:	4621      	mov	r1, r4
   1f8ca:	f7ff fe61 	bl	1f590 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1f8ce:	7b63      	ldrb	r3, [r4, #13]
   1f8d0:	f023 0302 	bic.w	r3, r3, #2
   1f8d4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1f8d6:	2300      	movs	r3, #0
   1f8d8:	60a3      	str	r3, [r4, #8]
   1f8da:	e7ee      	b.n	1f8ba <z_thread_single_abort+0x7a>
   1f8dc:	f105 0018 	add.w	r0, r5, #24
   1f8e0:	f007 f80f 	bl	26902 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1f8e4:	68a8      	ldr	r0, [r5, #8]
   1f8e6:	4629      	mov	r1, r5
   1f8e8:	f7ff fe52 	bl	1f590 <z_priq_dumb_remove>
   1f8ec:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1f8ee:	60af      	str	r7, [r5, #8]
   1f8f0:	f023 0302 	bic.w	r3, r3, #2
   1f8f4:	736b      	strb	r3, [r5, #13]
   1f8f6:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   1f8fa:	4628      	mov	r0, r5
   1f8fc:	f7ff fea2 	bl	1f644 <ready_thread>
	return list->head == list;
   1f900:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f902:	4545      	cmp	r5, r8
   1f904:	d001      	beq.n	1f90a <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1f906:	2d00      	cmp	r5, #0
   1f908:	d1e8      	bne.n	1f8dc <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1f90a:	4b0c      	ldr	r3, [pc, #48]	; (1f93c <z_thread_single_abort+0xfc>)
   1f90c:	689a      	ldr	r2, [r3, #8]
   1f90e:	4b0c      	ldr	r3, [pc, #48]	; (1f940 <z_thread_single_abort+0x100>)
   1f910:	429a      	cmp	r2, r3
   1f912:	d102      	bne.n	1f91a <z_thread_single_abort+0xda>
			update_cache(1);
   1f914:	2001      	movs	r0, #1
   1f916:	f7ff fe51 	bl	1f5bc <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1f91a:	7b63      	ldrb	r3, [r4, #13]
   1f91c:	f043 0308 	orr.w	r3, r3, #8
   1f920:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1f922:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1f924:	f386 8811 	msr	BASEPRI, r6
   1f928:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1f92c:	2b00      	cmp	r3, #0
   1f92e:	d09a      	beq.n	1f866 <z_thread_single_abort+0x26>
		fn_abort(thread);
   1f930:	4620      	mov	r0, r4
}
   1f932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1f936:	4718      	bx	r3
   1f938:	2000ecd8 	.word	0x2000ecd8
   1f93c:	2000ecac 	.word	0x2000ecac
   1f940:	2000ab58 	.word	0x2000ab58

0001f944 <unready_thread>:
{
   1f944:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1f946:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1f94a:	2b00      	cmp	r3, #0
{
   1f94c:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1f94e:	da06      	bge.n	1f95e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1f950:	4807      	ldr	r0, [pc, #28]	; (1f970 <unready_thread+0x2c>)
   1f952:	f7ff fe1d 	bl	1f590 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1f956:	7b4b      	ldrb	r3, [r1, #13]
   1f958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f95c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1f95e:	4b05      	ldr	r3, [pc, #20]	; (1f974 <unready_thread+0x30>)
   1f960:	6898      	ldr	r0, [r3, #8]
   1f962:	1a43      	subs	r3, r0, r1
   1f964:	4258      	negs	r0, r3
   1f966:	4158      	adcs	r0, r3
}
   1f968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1f96c:	f7ff be26 	b.w	1f5bc <update_cache>
   1f970:	2000ecd8 	.word	0x2000ecd8
   1f974:	2000ecac 	.word	0x2000ecac

0001f978 <pend>:
{
   1f978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f97c:	4606      	mov	r6, r0
   1f97e:	4615      	mov	r5, r2
   1f980:	461c      	mov	r4, r3
	__asm__ volatile(
   1f982:	f04f 0320 	mov.w	r3, #32
   1f986:	f3ef 8711 	mrs	r7, BASEPRI
   1f98a:	f383 8811 	msr	BASEPRI, r3
   1f98e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1f992:	f006 feb9 	bl	26708 <add_to_waitq_locked>
	__asm__ volatile(
   1f996:	f387 8811 	msr	BASEPRI, r7
   1f99a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f99e:	f1b4 3fff 	cmp.w	r4, #4294967295
   1f9a2:	bf08      	it	eq
   1f9a4:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1f9a8:	d008      	beq.n	1f9bc <pend+0x44>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1f9aa:	462a      	mov	r2, r5
   1f9ac:	4623      	mov	r3, r4
   1f9ae:	f106 0018 	add.w	r0, r6, #24
   1f9b2:	4903      	ldr	r1, [pc, #12]	; (1f9c0 <pend+0x48>)
}
   1f9b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f9b8:	f000 bb18 	b.w	1ffec <z_add_timeout>
   1f9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f9c0:	000266c9 	.word	0x000266c9

0001f9c4 <z_pend_curr>:
{
   1f9c4:	b510      	push	{r4, lr}
	pending_current = _current;
   1f9c6:	4b07      	ldr	r3, [pc, #28]	; (1f9e4 <z_pend_curr+0x20>)
   1f9c8:	6898      	ldr	r0, [r3, #8]
   1f9ca:	4b07      	ldr	r3, [pc, #28]	; (1f9e8 <z_pend_curr+0x24>)
{
   1f9cc:	460c      	mov	r4, r1
	pending_current = _current;
   1f9ce:	6018      	str	r0, [r3, #0]
{
   1f9d0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1f9d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1f9d6:	f7ff ffcf 	bl	1f978 <pend>
   1f9da:	4620      	mov	r0, r4
}
   1f9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f9e0:	f7e7 ba16 	b.w	6e10 <arch_swap>
   1f9e4:	2000ecac 	.word	0x2000ecac
   1f9e8:	2000ece0 	.word	0x2000ece0

0001f9ec <z_set_prio>:
{
   1f9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f9ee:	4604      	mov	r4, r0
	__asm__ volatile(
   1f9f0:	f04f 0320 	mov.w	r3, #32
   1f9f4:	f3ef 8711 	mrs	r7, BASEPRI
   1f9f8:	f383 8811 	msr	BASEPRI, r3
   1f9fc:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fa00:	7b43      	ldrb	r3, [r0, #13]
   1fa02:	06db      	lsls	r3, r3, #27
				thread->base.prio = prio;
   1fa04:	b24d      	sxtb	r5, r1
   1fa06:	d12b      	bne.n	1fa60 <z_set_prio+0x74>
		if (need_sched) {
   1fa08:	6983      	ldr	r3, [r0, #24]
   1fa0a:	bb4b      	cbnz	r3, 1fa60 <z_set_prio+0x74>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fa0c:	4e16      	ldr	r6, [pc, #88]	; (1fa68 <z_set_prio+0x7c>)
   1fa0e:	4621      	mov	r1, r4
   1fa10:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   1fa14:	f7ff fdbc 	bl	1f590 <z_priq_dumb_remove>
	return list->head == list;
   1fa18:	6af3      	ldr	r3, [r6, #44]	; 0x2c
				thread->base.prio = prio;
   1fa1a:	73a5      	strb	r5, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fa1c:	4283      	cmp	r3, r0
   1fa1e:	d018      	beq.n	1fa52 <z_set_prio+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fa20:	b1bb      	cbz	r3, 1fa52 <z_set_prio+0x66>
	return (node == list->tail) ? NULL : node->next;
   1fa22:	6b32      	ldr	r2, [r6, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   1fa24:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1fa28:	42a9      	cmp	r1, r5
   1fa2a:	dd0d      	ble.n	1fa48 <z_set_prio+0x5c>
	node->prev = successor->prev;
   1fa2c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1fa2e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1fa32:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1fa34:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1fa36:	2001      	movs	r0, #1
   1fa38:	f7ff fdc0 	bl	1f5bc <update_cache>
   1fa3c:	2001      	movs	r0, #1
	__asm__ volatile(
   1fa3e:	f387 8811 	msr	BASEPRI, r7
   1fa42:	f3bf 8f6f 	isb	sy
}
   1fa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1fa48:	4293      	cmp	r3, r2
   1fa4a:	d002      	beq.n	1fa52 <z_set_prio+0x66>
   1fa4c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fa4e:	2b00      	cmp	r3, #0
   1fa50:	d1e8      	bne.n	1fa24 <z_set_prio+0x38>
	node->prev = list->tail;
   1fa52:	6b33      	ldr	r3, [r6, #48]	; 0x30
   1fa54:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1fa56:	6b33      	ldr	r3, [r6, #48]	; 0x30
	node->next = list;
   1fa58:	6020      	str	r0, [r4, #0]
	list->tail->next = node;
   1fa5a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1fa5c:	6334      	str	r4, [r6, #48]	; 0x30
}
   1fa5e:	e7ea      	b.n	1fa36 <z_set_prio+0x4a>
			thread->base.prio = prio;
   1fa60:	73a5      	strb	r5, [r4, #14]
   1fa62:	2000      	movs	r0, #0
   1fa64:	e7eb      	b.n	1fa3e <z_set_prio+0x52>
   1fa66:	bf00      	nop
   1fa68:	2000ecac 	.word	0x2000ecac

0001fa6c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1fa6c:	4b04      	ldr	r3, [pc, #16]	; (1fa80 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1fa6e:	2100      	movs	r1, #0
   1fa70:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1fa74:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1fa78:	4608      	mov	r0, r1
   1fa7a:	f7ff bd39 	b.w	1f4f0 <k_sched_time_slice_set>
   1fa7e:	bf00      	nop
   1fa80:	2000ecac 	.word	0x2000ecac

0001fa84 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1fa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
   1fa86:	4c23      	ldr	r4, [pc, #140]	; (1fb14 <z_impl_k_yield+0x90>)
   1fa88:	4b23      	ldr	r3, [pc, #140]	; (1fb18 <z_impl_k_yield+0x94>)
   1fa8a:	68a2      	ldr	r2, [r4, #8]
   1fa8c:	429a      	cmp	r2, r3
   1fa8e:	d028      	beq.n	1fae2 <z_impl_k_yield+0x5e>
	__asm__ volatile(
   1fa90:	f04f 0320 	mov.w	r3, #32
   1fa94:	f3ef 8511 	mrs	r5, BASEPRI
   1fa98:	f383 8811 	msr	BASEPRI, r3
   1fa9c:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   1faa0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1faa4:	68a1      	ldr	r1, [r4, #8]
   1faa6:	f7ff fd73 	bl	1f590 <z_priq_dumb_remove>
	return list->head == list;
   1faaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1faac:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1faae:	4282      	cmp	r2, r0
   1fab0:	d028      	beq.n	1fb04 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fab2:	b33a      	cbz	r2, 1fb04 <z_impl_k_yield+0x80>
	return (node == list->tail) ? NULL : node->next;
   1fab4:	6b21      	ldr	r1, [r4, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   1fab6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1faba:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1fabe:	42b7      	cmp	r7, r6
   1fac0:	dd1b      	ble.n	1fafa <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   1fac2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1fac4:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   1fac8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1faca:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   1facc:	7b5a      	ldrb	r2, [r3, #13]
   1face:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1fad2:	735a      	strb	r2, [r3, #13]
			z_mark_thread_as_queued(_current);
			update_cache(1);
   1fad4:	2001      	movs	r0, #1
   1fad6:	f7ff fd71 	bl	1f5bc <update_cache>
	__asm__ volatile(
   1fada:	f385 8811 	msr	BASEPRI, r5
   1fade:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1fae2:	f04f 0320 	mov.w	r3, #32
   1fae6:	f3ef 8011 	mrs	r0, BASEPRI
   1faea:	f383 8811 	msr	BASEPRI, r3
   1faee:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1faf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1faf6:	f7e7 b98b 	b.w	6e10 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1fafa:	428a      	cmp	r2, r1
   1fafc:	d002      	beq.n	1fb04 <z_impl_k_yield+0x80>
   1fafe:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fb00:	2a00      	cmp	r2, #0
   1fb02:	d1da      	bne.n	1faba <z_impl_k_yield+0x36>
	node->prev = list->tail;
   1fb04:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1fb06:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1fb08:	6b22      	ldr	r2, [r4, #48]	; 0x30
	node->next = list;
   1fb0a:	6018      	str	r0, [r3, #0]
	list->tail->next = node;
   1fb0c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1fb0e:	6323      	str	r3, [r4, #48]	; 0x30
}
   1fb10:	e7dc      	b.n	1facc <z_impl_k_yield+0x48>
   1fb12:	bf00      	nop
   1fb14:	2000ecac 	.word	0x2000ecac
   1fb18:	2000ab58 	.word	0x2000ab58

0001fb1c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1fb1c:	ea50 0301 	orrs.w	r3, r0, r1
{
   1fb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb24:	4605      	mov	r5, r0
   1fb26:	460e      	mov	r6, r1
	if (ticks == 0) {
   1fb28:	d104      	bne.n	1fb34 <z_tick_sleep+0x18>
	z_impl_k_yield();
   1fb2a:	f7ff ffab 	bl	1fa84 <z_impl_k_yield>
		k_yield();
		return 0;
   1fb2e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1fb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1fb34:	f006 ff25 	bl	26982 <z_tick_get_32>
   1fb38:	4604      	mov	r4, r0
   1fb3a:	f04f 0320 	mov.w	r3, #32
   1fb3e:	f3ef 8811 	mrs	r8, BASEPRI
   1fb42:	f383 8811 	msr	BASEPRI, r3
   1fb46:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1fb4a:	4f0f      	ldr	r7, [pc, #60]	; (1fb88 <z_tick_sleep+0x6c>)
   1fb4c:	4b0f      	ldr	r3, [pc, #60]	; (1fb8c <z_tick_sleep+0x70>)
   1fb4e:	68b8      	ldr	r0, [r7, #8]
   1fb50:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1fb52:	f7ff fef7 	bl	1f944 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1fb56:	68b8      	ldr	r0, [r7, #8]
   1fb58:	490d      	ldr	r1, [pc, #52]	; (1fb90 <z_tick_sleep+0x74>)
   1fb5a:	462a      	mov	r2, r5
   1fb5c:	4633      	mov	r3, r6
   1fb5e:	3018      	adds	r0, #24
   1fb60:	f000 fa44 	bl	1ffec <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1fb64:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1fb66:	7b53      	ldrb	r3, [r2, #13]
   1fb68:	f043 0310 	orr.w	r3, r3, #16
   1fb6c:	7353      	strb	r3, [r2, #13]
   1fb6e:	4640      	mov	r0, r8
   1fb70:	f7e7 f94e 	bl	6e10 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1fb74:	f006 ff05 	bl	26982 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1fb78:	1962      	adds	r2, r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1fb7a:	1a10      	subs	r0, r2, r0
   1fb7c:	eb63 0303 	sbc.w	r3, r3, r3
   1fb80:	2b00      	cmp	r3, #0
   1fb82:	bfb8      	it	lt
   1fb84:	2000      	movlt	r0, #0
   1fb86:	e7d3      	b.n	1fb30 <z_tick_sleep+0x14>
   1fb88:	2000ecac 	.word	0x2000ecac
   1fb8c:	2000ece0 	.word	0x2000ece0
   1fb90:	000266c9 	.word	0x000266c9

0001fb94 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fb94:	f1b1 3fff 	cmp.w	r1, #4294967295
   1fb98:	bf08      	it	eq
   1fb9a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1fb9e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fba0:	d106      	bne.n	1fbb0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1fba2:	4b08      	ldr	r3, [pc, #32]	; (1fbc4 <z_impl_k_sleep+0x30>)
   1fba4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1fba6:	f7ff fe17 	bl	1f7d8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1fbaa:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1fbae:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1fbb0:	f7ff ffb4 	bl	1fb1c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1fbb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1fbb8:	fb80 0303 	smull	r0, r3, r0, r3
   1fbbc:	0bc0      	lsrs	r0, r0, #15
   1fbbe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1fbc2:	e7f4      	b.n	1fbae <z_impl_k_sleep+0x1a>
   1fbc4:	2000ecac 	.word	0x2000ecac

0001fbc8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1fbc8:	4b01      	ldr	r3, [pc, #4]	; (1fbd0 <z_impl_k_current_get+0x8>)
   1fbca:	6898      	ldr	r0, [r3, #8]
   1fbcc:	4770      	bx	lr
   1fbce:	bf00      	nop
   1fbd0:	2000ecac 	.word	0x2000ecac

0001fbd4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1fbd4:	b538      	push	{r3, r4, r5, lr}
   1fbd6:	4604      	mov	r4, r0
   1fbd8:	f04f 0320 	mov.w	r3, #32
   1fbdc:	f3ef 8511 	mrs	r5, BASEPRI
   1fbe0:	f383 8811 	msr	BASEPRI, r3
   1fbe4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   1fbe8:	f006 fdcb 	bl	26782 <z_unpend_first_thread>

	if (thread != NULL) {
   1fbec:	b150      	cbz	r0, 1fc04 <z_impl_k_sem_give+0x30>
   1fbee:	2200      	movs	r2, #0
   1fbf0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1fbf4:	f006 fd58 	bl	266a8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1fbf8:	4629      	mov	r1, r5
   1fbfa:	4808      	ldr	r0, [pc, #32]	; (1fc1c <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1fbfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1fc00:	f7ff bca0 	b.w	1f544 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1fc04:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1fc08:	429a      	cmp	r2, r3
   1fc0a:	bf18      	it	ne
   1fc0c:	3301      	addne	r3, #1
   1fc0e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1fc10:	2102      	movs	r1, #2
   1fc12:	f104 0010 	add.w	r0, r4, #16
   1fc16:	f007 f84f 	bl	26cb8 <z_handle_obj_poll_events>
}
   1fc1a:	e7ed      	b.n	1fbf8 <z_impl_k_sem_give+0x24>
   1fc1c:	2000f2c1 	.word	0x2000f2c1

0001fc20 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1fc20:	b513      	push	{r0, r1, r4, lr}
   1fc22:	f04f 0420 	mov.w	r4, #32
   1fc26:	f3ef 8111 	mrs	r1, BASEPRI
   1fc2a:	f384 8811 	msr	BASEPRI, r4
   1fc2e:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1fc32:	6884      	ldr	r4, [r0, #8]
   1fc34:	b144      	cbz	r4, 1fc48 <z_impl_k_sem_take+0x28>
		sem->count--;
   1fc36:	3c01      	subs	r4, #1
   1fc38:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1fc3a:	f381 8811 	msr	BASEPRI, r1
   1fc3e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1fc42:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1fc44:	b002      	add	sp, #8
   1fc46:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fc48:	ea52 0403 	orrs.w	r4, r2, r3
   1fc4c:	d106      	bne.n	1fc5c <z_impl_k_sem_take+0x3c>
   1fc4e:	f381 8811 	msr	BASEPRI, r1
   1fc52:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1fc56:	f06f 000f 	mvn.w	r0, #15
   1fc5a:	e7f3      	b.n	1fc44 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1fc5c:	e9cd 2300 	strd	r2, r3, [sp]
   1fc60:	4602      	mov	r2, r0
   1fc62:	4802      	ldr	r0, [pc, #8]	; (1fc6c <z_impl_k_sem_take+0x4c>)
   1fc64:	f7ff feae 	bl	1f9c4 <z_pend_curr>
	return ret;
   1fc68:	e7ec      	b.n	1fc44 <z_impl_k_sem_take+0x24>
   1fc6a:	bf00      	nop
   1fc6c:	2000f2c1 	.word	0x2000f2c1

0001fc70 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1fc70:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1fc72:	4c08      	ldr	r4, [pc, #32]	; (1fc94 <k_sys_work_q_init+0x24>)
   1fc74:	4908      	ldr	r1, [pc, #32]	; (1fc98 <k_sys_work_q_init+0x28>)
   1fc76:	f04f 33ff 	mov.w	r3, #4294967295
   1fc7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1fc7e:	4620      	mov	r0, r4
   1fc80:	f000 f8dc 	bl	1fe3c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1fc84:	4905      	ldr	r1, [pc, #20]	; (1fc9c <k_sys_work_q_init+0x2c>)
   1fc86:	f104 0018 	add.w	r0, r4, #24
   1fc8a:	f006 fdbd 	bl	26808 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1fc8e:	2000      	movs	r0, #0
   1fc90:	bd10      	pop	{r4, pc}
   1fc92:	bf00      	nop
   1fc94:	2000ac68 	.word	0x2000ac68
   1fc98:	200120c0 	.word	0x200120c0
   1fc9c:	0002d00a 	.word	0x0002d00a

0001fca0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1fca0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1fca4:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1fca8:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1fcac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1fcae:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1fcb0:	2504      	movs	r5, #4
   1fcb2:	7345      	strb	r5, [r0, #13]
{
   1fcb4:	460f      	mov	r7, r1

	thread_base->prio = priority;
   1fcb6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1fcb8:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1fcba:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
   1fcbc:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fcbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1fcc0:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1fcc2:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1fcc6:	3720      	adds	r7, #32
	node->prev = NULL;
   1fcc8:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1fccc:	e9c0 761b 	strd	r7, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   1fcd0:	6745      	str	r5, [r0, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1fcd2:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fcd6:	9202      	str	r2, [sp, #8]
   1fcd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fcda:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1fcdc:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fcde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fce0:	9200      	str	r2, [sp, #0]
   1fce2:	4642      	mov	r2, r8
{
   1fce4:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1fce6:	f7e7 f941 	bl	6f6c <arch_new_thread>
	if (!_current) {
   1fcea:	4b05      	ldr	r3, [pc, #20]	; (1fd00 <z_setup_new_thread+0x60>)
   1fcec:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1fcee:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1fcf2:	b103      	cbz	r3, 1fcf6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1fcf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   1fcf6:	67a3      	str	r3, [r4, #120]	; 0x78
}
   1fcf8:	4640      	mov	r0, r8
   1fcfa:	b004      	add	sp, #16
   1fcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fd00:	2000ecac 	.word	0x2000ecac

0001fd04 <z_impl_k_thread_create>:
{
   1fd04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd06:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd08:	2700      	movs	r7, #0
   1fd0a:	9705      	str	r7, [sp, #20]
   1fd0c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1fd0e:	9704      	str	r7, [sp, #16]
   1fd10:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1fd12:	9703      	str	r7, [sp, #12]
   1fd14:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1fd16:	9702      	str	r7, [sp, #8]
{
   1fd18:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd1c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1fd1e:	9701      	str	r7, [sp, #4]
   1fd20:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1fd22:	9700      	str	r7, [sp, #0]
{
   1fd24:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1fd26:	f7ff ffbb 	bl	1fca0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1fd2a:	f1b5 3fff 	cmp.w	r5, #4294967295
   1fd2e:	bf08      	it	eq
   1fd30:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1fd34:	d005      	beq.n	1fd42 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fd36:	ea55 0306 	orrs.w	r3, r5, r6
   1fd3a:	d105      	bne.n	1fd48 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1fd3c:	4620      	mov	r0, r4
   1fd3e:	f7ff fcb5 	bl	1f6ac <z_sched_start>
}
   1fd42:	4620      	mov	r0, r4
   1fd44:	b007      	add	sp, #28
   1fd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fd48:	4903      	ldr	r1, [pc, #12]	; (1fd58 <z_impl_k_thread_create+0x54>)
   1fd4a:	4632      	mov	r2, r6
   1fd4c:	462b      	mov	r3, r5
   1fd4e:	f104 0018 	add.w	r0, r4, #24
   1fd52:	f000 f94b 	bl	1ffec <z_add_timeout>
   1fd56:	e7f4      	b.n	1fd42 <z_impl_k_thread_create+0x3e>
   1fd58:	000266c9 	.word	0x000266c9

0001fd5c <z_init_static_threads>:
{
   1fd5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fd60:	4c29      	ldr	r4, [pc, #164]	; (1fe08 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1fd62:	4d2a      	ldr	r5, [pc, #168]	; (1fe0c <z_init_static_threads+0xb0>)
{
   1fd64:	b087      	sub	sp, #28
   1fd66:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1fd68:	42ae      	cmp	r6, r5
   1fd6a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1fd6e:	d30f      	bcc.n	1fd90 <z_init_static_threads+0x34>
	k_sched_lock();
   1fd70:	f7ff fbfa 	bl	1f568 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1fd74:	4c24      	ldr	r4, [pc, #144]	; (1fe08 <z_init_static_threads+0xac>)
   1fd76:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1fe10 <z_init_static_threads+0xb4>
   1fd7a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1fd7e:	f240 37e7 	movw	r7, #999	; 0x3e7
   1fd82:	42ac      	cmp	r4, r5
   1fd84:	d320      	bcc.n	1fdc8 <z_init_static_threads+0x6c>
}
   1fd86:	b007      	add	sp, #28
   1fd88:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1fd8c:	f7ff bc3e 	b.w	1f60c <k_sched_unlock>
		z_setup_new_thread(
   1fd90:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1fd94:	9305      	str	r3, [sp, #20]
   1fd96:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1fd9a:	9304      	str	r3, [sp, #16]
   1fd9c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1fda0:	9303      	str	r3, [sp, #12]
   1fda2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1fda6:	9302      	str	r3, [sp, #8]
   1fda8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1fdac:	9301      	str	r3, [sp, #4]
   1fdae:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1fdb2:	9300      	str	r3, [sp, #0]
   1fdb4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1fdb8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1fdbc:	f7ff ff70 	bl	1fca0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1fdc0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1fdc4:	65de      	str	r6, [r3, #92]	; 0x5c
	_FOREACH_STATIC_THREAD(thread_data) {
   1fdc6:	e7ce      	b.n	1fd66 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1fdc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fdca:	1c5a      	adds	r2, r3, #1
   1fdcc:	d00d      	beq.n	1fdea <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1fdce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1fdd2:	2100      	movs	r1, #0
   1fdd4:	4638      	mov	r0, r7
   1fdd6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fdda:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1fdde:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fde2:	d104      	bne.n	1fdee <z_init_static_threads+0x92>
	z_sched_start(thread);
   1fde4:	4640      	mov	r0, r8
   1fde6:	f7ff fc61 	bl	1f6ac <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1fdea:	3430      	adds	r4, #48	; 0x30
   1fdec:	e7c9      	b.n	1fd82 <z_init_static_threads+0x26>
   1fdee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fdf2:	2300      	movs	r3, #0
   1fdf4:	f7e1 f828 	bl	e48 <__aeabi_uldivmod>
   1fdf8:	4602      	mov	r2, r0
   1fdfa:	460b      	mov	r3, r1
   1fdfc:	f108 0018 	add.w	r0, r8, #24
   1fe00:	4649      	mov	r1, r9
   1fe02:	f000 f8f3 	bl	1ffec <z_add_timeout>
   1fe06:	e7f0      	b.n	1fdea <z_init_static_threads+0x8e>
   1fe08:	20009dec 	.word	0x20009dec
   1fe0c:	20009f0c 	.word	0x20009f0c
   1fe10:	000266c9 	.word	0x000266c9

0001fe14 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   1fe14:	b508      	push	{r3, lr}
	__asm__ volatile(
   1fe16:	f04f 0320 	mov.w	r3, #32
   1fe1a:	f3ef 8411 	mrs	r4, BASEPRI
   1fe1e:	f383 8811 	msr	BASEPRI, r3
   1fe22:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   1fe26:	4b04      	ldr	r3, [pc, #16]	; (1fe38 <z_self_abort+0x24>)
   1fe28:	6898      	ldr	r0, [r3, #8]
   1fe2a:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   1fe2c:	f7ff fcd4 	bl	1f7d8 <z_impl_k_thread_suspend>
   1fe30:	4620      	mov	r0, r4
   1fe32:	f7e6 ffed 	bl	6e10 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1fe36:	bf00      	nop
   1fe38:	2000ecac 	.word	0x2000ecac

0001fe3c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1fe3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe40:	4604      	mov	r4, r0
   1fe42:	b088      	sub	sp, #32
   1fe44:	460d      	mov	r5, r1
   1fe46:	4616      	mov	r6, r2
   1fe48:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1fe4a:	f006 fb79 	bl	26540 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1fe4e:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fe52:	2200      	movs	r2, #0
   1fe54:	2300      	movs	r3, #0
   1fe56:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1fe5a:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1fe5e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1fe62:	4b07      	ldr	r3, [pc, #28]	; (1fe80 <k_work_q_start+0x44>)
   1fe64:	9400      	str	r4, [sp, #0]
   1fe66:	4632      	mov	r2, r6
   1fe68:	4629      	mov	r1, r5
   1fe6a:	4640      	mov	r0, r8
   1fe6c:	f7ff ff4a 	bl	1fd04 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1fe70:	4904      	ldr	r1, [pc, #16]	; (1fe84 <k_work_q_start+0x48>)
   1fe72:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1fe74:	b008      	add	sp, #32
   1fe76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fe7a:	f006 bcc5 	b.w	26808 <z_impl_k_thread_name_set>
   1fe7e:	bf00      	nop
   1fe80:	0002147d 	.word	0x0002147d
   1fe84:	0002d013 	.word	0x0002d013

0001fe88 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1fe88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fe8c:	4606      	mov	r6, r0
   1fe8e:	460d      	mov	r5, r1
   1fe90:	4690      	mov	r8, r2
   1fe92:	461f      	mov	r7, r3
   1fe94:	f04f 0320 	mov.w	r3, #32
   1fe98:	f3ef 8911 	mrs	r9, BASEPRI
   1fe9c:	f383 8811 	msr	BASEPRI, r3
   1fea0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1fea4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1fea6:	b17b      	cbz	r3, 1fec8 <k_delayed_work_submit_to_queue+0x40>
   1fea8:	4283      	cmp	r3, r0
   1feaa:	d128      	bne.n	1fefe <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1feac:	4628      	mov	r0, r5
   1feae:	f006 fccd 	bl	2684c <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   1feb2:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1feb6:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1feb8:	d008      	beq.n	1fecc <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1feba:	2800      	cmp	r0, #0
   1febc:	da07      	bge.n	1fece <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1febe:	f389 8811 	msr	BASEPRI, r9
   1fec2:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1fec6:	e00f      	b.n	1fee8 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1fec8:	2800      	cmp	r0, #0
   1feca:	d0ef      	beq.n	1feac <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1fecc:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fece:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   1fed2:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fed4:	d10b      	bne.n	1feee <k_delayed_work_submit_to_queue+0x66>
   1fed6:	f389 8811 	msr	BASEPRI, r9
   1feda:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1fede:	4629      	mov	r1, r5
   1fee0:	4630      	mov	r0, r6
   1fee2:	f006 fc96 	bl	26812 <k_work_submit_to_queue>
		return 0;
   1fee6:	2400      	movs	r4, #0
}
   1fee8:	4620      	mov	r0, r4
   1feea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1feee:	4905      	ldr	r1, [pc, #20]	; (1ff04 <k_delayed_work_submit_to_queue+0x7c>)
   1fef0:	4642      	mov	r2, r8
   1fef2:	463b      	mov	r3, r7
   1fef4:	f105 0010 	add.w	r0, r5, #16
   1fef8:	f000 f878 	bl	1ffec <z_add_timeout>
   1fefc:	e7df      	b.n	1febe <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1fefe:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1ff02:	e7dc      	b.n	1febe <k_delayed_work_submit_to_queue+0x36>
   1ff04:	00026843 	.word	0x00026843

0001ff08 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1ff08:	4a02      	ldr	r2, [pc, #8]	; (1ff14 <boot_banner+0xc>)
   1ff0a:	4903      	ldr	r1, [pc, #12]	; (1ff18 <boot_banner+0x10>)
   1ff0c:	4803      	ldr	r0, [pc, #12]	; (1ff1c <boot_banner+0x14>)
   1ff0e:	f001 b9c1 	b.w	21294 <printk>
   1ff12:	bf00      	nop
   1ff14:	00028b54 	.word	0x00028b54
   1ff18:	0002d01d 	.word	0x0002d01d
   1ff1c:	0002d038 	.word	0x0002d038

0001ff20 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1ff20:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1ff22:	4806      	ldr	r0, [pc, #24]	; (1ff3c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1ff24:	4a06      	ldr	r2, [pc, #24]	; (1ff40 <z_data_copy+0x20>)
   1ff26:	4907      	ldr	r1, [pc, #28]	; (1ff44 <z_data_copy+0x24>)
   1ff28:	1a12      	subs	r2, r2, r0
   1ff2a:	f003 fe26 	bl	23b7a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1ff2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1ff32:	4a05      	ldr	r2, [pc, #20]	; (1ff48 <z_data_copy+0x28>)
   1ff34:	4905      	ldr	r1, [pc, #20]	; (1ff4c <z_data_copy+0x2c>)
   1ff36:	4806      	ldr	r0, [pc, #24]	; (1ff50 <z_data_copy+0x30>)
   1ff38:	f003 be1f 	b.w	23b7a <memcpy>
   1ff3c:	20000000 	.word	0x20000000
   1ff40:	2000a130 	.word	0x2000a130
   1ff44:	0002d060 	.word	0x0002d060
   1ff48:	00000000 	.word	0x00000000
   1ff4c:	0002d060 	.word	0x0002d060
   1ff50:	20000000 	.word	0x20000000

0001ff54 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   1ff54:	4b03      	ldr	r3, [pc, #12]	; (1ff64 <elapsed+0x10>)
   1ff56:	681b      	ldr	r3, [r3, #0]
   1ff58:	b90b      	cbnz	r3, 1ff5e <elapsed+0xa>
   1ff5a:	f7e6 bd77 	b.w	6a4c <z_clock_elapsed>
}
   1ff5e:	2000      	movs	r0, #0
   1ff60:	4770      	bx	lr
   1ff62:	bf00      	nop
   1ff64:	2000ecec 	.word	0x2000ecec

0001ff68 <next_timeout>:
	return list->head == list;
   1ff68:	4b11      	ldr	r3, [pc, #68]	; (1ffb0 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1ff6a:	b510      	push	{r4, lr}
   1ff6c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ff6e:	429c      	cmp	r4, r3
   1ff70:	bf08      	it	eq
   1ff72:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1ff74:	f7ff ffee 	bl	1ff54 <elapsed>
   1ff78:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1ff7a:	b16c      	cbz	r4, 1ff98 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1ff7c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   1ff80:	1ac0      	subs	r0, r0, r3
   1ff82:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1ff86:	2801      	cmp	r0, #1
   1ff88:	f173 0200 	sbcs.w	r2, r3, #0
   1ff8c:	db0d      	blt.n	1ffaa <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1ff8e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1ff92:	f173 0300 	sbcs.w	r3, r3, #0
   1ff96:	db01      	blt.n	1ff9c <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   1ff98:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1ff9c:	4b05      	ldr	r3, [pc, #20]	; (1ffb4 <next_timeout+0x4c>)
   1ff9e:	695b      	ldr	r3, [r3, #20]
   1ffa0:	b113      	cbz	r3, 1ffa8 <next_timeout+0x40>
   1ffa2:	4298      	cmp	r0, r3
   1ffa4:	bfa8      	it	ge
   1ffa6:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1ffa8:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1ffaa:	2000      	movs	r0, #0
   1ffac:	e7f6      	b.n	1ff9c <next_timeout+0x34>
   1ffae:	bf00      	nop
   1ffb0:	20000754 	.word	0x20000754
   1ffb4:	2000ecac 	.word	0x2000ecac

0001ffb8 <remove_timeout>:
{
   1ffb8:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1ffba:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ffbc:	b168      	cbz	r0, 1ffda <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1ffbe:	4a0a      	ldr	r2, [pc, #40]	; (1ffe8 <remove_timeout+0x30>)
   1ffc0:	6852      	ldr	r2, [r2, #4]
   1ffc2:	4290      	cmp	r0, r2
   1ffc4:	d009      	beq.n	1ffda <remove_timeout+0x22>
	if (next(t) != NULL) {
   1ffc6:	b143      	cbz	r3, 1ffda <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1ffc8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1ffcc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1ffd0:	1912      	adds	r2, r2, r4
   1ffd2:	eb41 0105 	adc.w	r1, r1, r5
   1ffd6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1ffda:	6842      	ldr	r2, [r0, #4]
   1ffdc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1ffde:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1ffe0:	2300      	movs	r3, #0
	node->prev = NULL;
   1ffe2:	e9c0 3300 	strd	r3, r3, [r0]
}
   1ffe6:	bd30      	pop	{r4, r5, pc}
   1ffe8:	20000754 	.word	0x20000754

0001ffec <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ffec:	f1b3 3fff 	cmp.w	r3, #4294967295
   1fff0:	bf08      	it	eq
   1fff2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1fff6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fffa:	4604      	mov	r4, r0
   1fffc:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fffe:	d064      	beq.n	200ca <z_add_timeout+0xde>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   20000:	1c55      	adds	r5, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   20002:	f06f 0701 	mvn.w	r7, #1
	k_ticks_t ticks = timeout.ticks + 1;
   20006:	f143 0600 	adc.w	r6, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   2000a:	f04f 39ff 	mov.w	r9, #4294967295
   2000e:	1b7b      	subs	r3, r7, r5
   20010:	eb69 0306 	sbc.w	r3, r9, r6
   20014:	2b00      	cmp	r3, #0
   20016:	db0d      	blt.n	20034 <z_add_timeout+0x48>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   20018:	f7ff ff9c 	bl	1ff54 <elapsed>
   2001c:	4b30      	ldr	r3, [pc, #192]	; (200e0 <z_add_timeout+0xf4>)
   2001e:	e9d3 2300 	ldrd	r2, r3, [r3]
   20022:	1abf      	subs	r7, r7, r2
   20024:	eb69 0303 	sbc.w	r3, r9, r3
   20028:	1b7d      	subs	r5, r7, r5
   2002a:	eb63 0606 	sbc.w	r6, r3, r6
   2002e:	1a2d      	subs	r5, r5, r0
   20030:	eb66 76e0 	sbc.w	r6, r6, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   20034:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   20038:	f04f 0320 	mov.w	r3, #32
   2003c:	f3ef 8711 	mrs	r7, BASEPRI
   20040:	f383 8811 	msr	BASEPRI, r3
   20044:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   20048:	f7ff ff84 	bl	1ff54 <elapsed>
	ticks = MAX(1, ticks);
   2004c:	2d01      	cmp	r5, #1
	return list->head == list;
   2004e:	4a25      	ldr	r2, [pc, #148]	; (200e4 <z_add_timeout+0xf8>)
   20050:	f176 0300 	sbcs.w	r3, r6, #0
   20054:	bfb8      	it	lt
   20056:	2501      	movlt	r5, #1
   20058:	6813      	ldr	r3, [r2, #0]
   2005a:	bfb8      	it	lt
   2005c:	2600      	movlt	r6, #0
		to->dticks = ticks + elapsed();
   2005e:	182d      	adds	r5, r5, r0
   20060:	eb46 76e0 	adc.w	r6, r6, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20064:	4293      	cmp	r3, r2
   20066:	e9c4 5604 	strd	r5, r6, [r4, #16]
   2006a:	d002      	beq.n	20072 <z_add_timeout+0x86>
	return (node == list->tail) ? NULL : node->next;
   2006c:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   20070:	b933      	cbnz	r3, 20080 <z_add_timeout+0x94>
	node->prev = list->tail;
   20072:	6853      	ldr	r3, [r2, #4]
   20074:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   20076:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   20078:	6022      	str	r2, [r4, #0]
	list->tail->next = node;
   2007a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2007c:	6054      	str	r4, [r2, #4]
}
   2007e:	e011      	b.n	200a4 <z_add_timeout+0xb8>
			if (t->dticks > to->dticks) {
   20080:	e9d3 0604 	ldrd	r0, r6, [r3, #16]
   20084:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   20088:	4281      	cmp	r1, r0
   2008a:	eb75 0e06 	sbcs.w	lr, r5, r6
   2008e:	da1e      	bge.n	200ce <z_add_timeout+0xe2>
				t->dticks -= to->dticks;
   20090:	1a41      	subs	r1, r0, r1
   20092:	eb66 0505 	sbc.w	r5, r6, r5
   20096:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   2009a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2009c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   200a0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   200a2:	605c      	str	r4, [r3, #4]
	return list->head == list;
   200a4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   200a6:	4293      	cmp	r3, r2
   200a8:	d00b      	beq.n	200c2 <z_add_timeout+0xd6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   200aa:	429c      	cmp	r4, r3
   200ac:	d109      	bne.n	200c2 <z_add_timeout+0xd6>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   200ae:	f7ff ff5b 	bl	1ff68 <next_timeout>

			if (next_time == 0 ||
   200b2:	b118      	cbz	r0, 200bc <z_add_timeout+0xd0>
			    _current_cpu->slice_ticks != next_time) {
   200b4:	4b0c      	ldr	r3, [pc, #48]	; (200e8 <z_add_timeout+0xfc>)
			if (next_time == 0 ||
   200b6:	695b      	ldr	r3, [r3, #20]
   200b8:	4283      	cmp	r3, r0
   200ba:	d002      	beq.n	200c2 <z_add_timeout+0xd6>
				z_clock_set_timeout(next_time, false);
   200bc:	2100      	movs	r1, #0
   200be:	f7e6 fc93 	bl	69e8 <z_clock_set_timeout>
	__asm__ volatile(
   200c2:	f387 8811 	msr	BASEPRI, r7
   200c6:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   200ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   200ce:	1a09      	subs	r1, r1, r0
   200d0:	eb65 0506 	sbc.w	r5, r5, r6
	return (node == list->tail) ? NULL : node->next;
   200d4:	4563      	cmp	r3, ip
   200d6:	e9c4 1504 	strd	r1, r5, [r4, #16]
   200da:	d0ca      	beq.n	20072 <z_add_timeout+0x86>
   200dc:	681b      	ldr	r3, [r3, #0]
   200de:	e7c7      	b.n	20070 <z_add_timeout+0x84>
   200e0:	2000ad08 	.word	0x2000ad08
   200e4:	20000754 	.word	0x20000754
   200e8:	2000ecac 	.word	0x2000ecac

000200ec <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   200ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   200f0:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   200f2:	f7ff fb31 	bl	1f758 <z_time_slice>
	__asm__ volatile(
   200f6:	f04f 0320 	mov.w	r3, #32
   200fa:	f3ef 8411 	mrs	r4, BASEPRI
   200fe:	f383 8811 	msr	BASEPRI, r3
   20102:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   20106:	4e24      	ldr	r6, [pc, #144]	; (20198 <z_clock_announce+0xac>)
	return list->head == list;
   20108:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2019c <z_clock_announce+0xb0>
   2010c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2010e:	4d24      	ldr	r5, [pc, #144]	; (201a0 <z_clock_announce+0xb4>)
   20110:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   20114:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20116:	4540      	cmp	r0, r8
		curr_tick += dt;
   20118:	e9d5 1e00 	ldrd	r1, lr, [r5]
   2011c:	ea4f 77e2 	mov.w	r7, r2, asr #31
   20120:	d00b      	beq.n	2013a <z_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   20122:	b150      	cbz	r0, 2013a <z_clock_announce+0x4e>
   20124:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   20128:	429a      	cmp	r2, r3
   2012a:	eb77 090c 	sbcs.w	r9, r7, ip
   2012e:	da16      	bge.n	2015e <z_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   20130:	1a9b      	subs	r3, r3, r2
   20132:	eb6c 0c07 	sbc.w	ip, ip, r7
   20136:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   2013a:	1852      	adds	r2, r2, r1
   2013c:	eb4e 0707 	adc.w	r7, lr, r7
   20140:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   20144:	2500      	movs	r5, #0
   20146:	6035      	str	r5, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   20148:	f7ff ff0e 	bl	1ff68 <next_timeout>
   2014c:	4629      	mov	r1, r5
   2014e:	f7e6 fc4b 	bl	69e8 <z_clock_set_timeout>
	__asm__ volatile(
   20152:	f384 8811 	msr	BASEPRI, r4
   20156:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2015a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2015e:	1859      	adds	r1, r3, r1
   20160:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   20164:	1ad3      	subs	r3, r2, r3
   20166:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   20168:	2200      	movs	r2, #0
   2016a:	2300      	movs	r3, #0
   2016c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   20170:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   20174:	f7ff ff20 	bl	1ffb8 <remove_timeout>
   20178:	f384 8811 	msr	BASEPRI, r4
   2017c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   20180:	6883      	ldr	r3, [r0, #8]
   20182:	4798      	blx	r3
	__asm__ volatile(
   20184:	f04f 0320 	mov.w	r3, #32
   20188:	f3ef 8411 	mrs	r4, BASEPRI
   2018c:	f383 8811 	msr	BASEPRI, r3
   20190:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   20194:	e7bc      	b.n	20110 <z_clock_announce+0x24>
   20196:	bf00      	nop
   20198:	2000ecec 	.word	0x2000ecec
   2019c:	20000754 	.word	0x20000754
   201a0:	2000ad08 	.word	0x2000ad08

000201a4 <z_tick_get>:

int64_t z_tick_get(void)
{
   201a4:	b510      	push	{r4, lr}
   201a6:	f04f 0320 	mov.w	r3, #32
   201aa:	f3ef 8411 	mrs	r4, BASEPRI
   201ae:	f383 8811 	msr	BASEPRI, r3
   201b2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   201b6:	f7e6 fc49 	bl	6a4c <z_clock_elapsed>
   201ba:	4a05      	ldr	r2, [pc, #20]	; (201d0 <z_tick_get+0x2c>)
   201bc:	e9d2 3100 	ldrd	r3, r1, [r2]
   201c0:	18c0      	adds	r0, r0, r3
   201c2:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   201c6:	f384 8811 	msr	BASEPRI, r4
   201ca:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   201ce:	bd10      	pop	{r4, pc}
   201d0:	2000ad08 	.word	0x2000ad08

000201d4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   201d4:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   201d6:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   201da:	3301      	adds	r3, #1
   201dc:	f142 0200 	adc.w	r2, r2, #0
   201e0:	2b02      	cmp	r3, #2
   201e2:	f172 0300 	sbcs.w	r3, r2, #0
{
   201e6:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   201e8:	d304      	bcc.n	201f4 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   201ea:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   201ee:	490c      	ldr	r1, [pc, #48]	; (20220 <z_timer_expiration_handler+0x4c>)
   201f0:	f7ff fefc 	bl	1ffec <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   201f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   201f6:	3301      	adds	r3, #1
   201f8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   201fa:	6a23      	ldr	r3, [r4, #32]
   201fc:	b10b      	cbz	r3, 20202 <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   201fe:	4620      	mov	r0, r4
   20200:	4798      	blx	r3
	return list->head == list;
   20202:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20206:	42a5      	cmp	r5, r4
   20208:	d009      	beq.n	2021e <z_timer_expiration_handler+0x4a>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2020a:	b145      	cbz	r5, 2021e <z_timer_expiration_handler+0x4a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2020c:	4628      	mov	r0, r5
   2020e:	f006 f9fd 	bl	2660c <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   20212:	4628      	mov	r0, r5
   20214:	f006 fa48 	bl	266a8 <z_ready_thread>
   20218:	2300      	movs	r3, #0
   2021a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   2021e:	bd38      	pop	{r3, r4, r5, pc}
   20220:	000201d5 	.word	0x000201d5

00020224 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20228:	4611      	mov	r1, r2
   2022a:	4605      	mov	r5, r0
   2022c:	4618      	mov	r0, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2022e:	f1b0 3fff 	cmp.w	r0, #4294967295
   20232:	bf08      	it	eq
   20234:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   20238:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2023c:	4688      	mov	r8, r1
   2023e:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20240:	d036      	beq.n	202b0 <z_impl_k_timer_start+0x8c>
   20242:	4614      	mov	r4, r2
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   20244:	431a      	orrs	r2, r3
   20246:	461e      	mov	r6, r3
   20248:	d011      	beq.n	2026e <z_impl_k_timer_start+0x4a>
   2024a:	f06f 0201 	mvn.w	r2, #1
   2024e:	1b12      	subs	r2, r2, r4
   20250:	f04f 32ff 	mov.w	r2, #4294967295
   20254:	eb62 0203 	sbc.w	r2, r2, r3
   20258:	2a00      	cmp	r2, #0
   2025a:	da08      	bge.n	2026e <z_impl_k_timer_start+0x4a>
		period.ticks = MAX(period.ticks - 1, 1);
   2025c:	3c01      	subs	r4, #1
   2025e:	f163 0600 	sbc.w	r6, r3, #0
   20262:	2c01      	cmp	r4, #1
   20264:	f176 0300 	sbcs.w	r3, r6, #0
   20268:	bfbc      	itt	lt
   2026a:	2401      	movlt	r4, #1
   2026c:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2026e:	f06f 0301 	mvn.w	r3, #1
   20272:	1a5b      	subs	r3, r3, r1
   20274:	f04f 33ff 	mov.w	r3, #4294967295
   20278:	eb63 0300 	sbc.w	r3, r3, r0
   2027c:	2b00      	cmp	r3, #0
   2027e:	da08      	bge.n	20292 <z_impl_k_timer_start+0x6e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   20280:	1e4a      	subs	r2, r1, #1
   20282:	f160 0700 	sbc.w	r7, r0, #0
   20286:	2f00      	cmp	r7, #0
   20288:	4690      	mov	r8, r2
   2028a:	bfbc      	itt	lt
   2028c:	f04f 0800 	movlt.w	r8, #0
   20290:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   20292:	4628      	mov	r0, r5
   20294:	f006 fb35 	bl	26902 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   20298:	2300      	movs	r3, #0
   2029a:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   2029c:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   202a0:	4642      	mov	r2, r8
   202a2:	463b      	mov	r3, r7
   202a4:	4628      	mov	r0, r5
   202a6:	4903      	ldr	r1, [pc, #12]	; (202b4 <z_impl_k_timer_start+0x90>)
		     duration);
}
   202a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   202ac:	f7ff be9e 	b.w	1ffec <z_add_timeout>
}
   202b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   202b4:	000201d5 	.word	0x000201d5

000202b8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   202b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   202bc:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   202be:	4b29      	ldr	r3, [pc, #164]	; (20364 <z_impl_k_poll+0xac>)
   202c0:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   202c2:	2301      	movs	r3, #1
   202c4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	poller->mode = MODE_POLL;
   202c8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   202cc:	ea52 0305 	orrs.w	r3, r2, r5
{
   202d0:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   202d2:	bf0c      	ite	eq
   202d4:	2301      	moveq	r3, #1
   202d6:	2300      	movne	r3, #0
   202d8:	f107 0264 	add.w	r2, r7, #100	; 0x64
{
   202dc:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   202de:	f006 fc4e 	bl	26b7e <register_events>
   202e2:	4681      	mov	r9, r0
	__asm__ volatile(
   202e4:	f04f 0320 	mov.w	r3, #32
   202e8:	f3ef 8a11 	mrs	sl, BASEPRI
   202ec:	f383 8811 	msr	BASEPRI, r3
   202f0:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   202f4:	f897 4064 	ldrb.w	r4, [r7, #100]	; 0x64
   202f8:	b964      	cbnz	r4, 20314 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   202fa:	4601      	mov	r1, r0
   202fc:	4652      	mov	r2, sl
   202fe:	4640      	mov	r0, r8
   20300:	f006 fc9e 	bl	26c40 <clear_event_registrations>
	__asm__ volatile(
   20304:	f38a 8811 	msr	BASEPRI, sl
   20308:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   2030c:	4620      	mov	r0, r4
   2030e:	b002      	add	sp, #8
   20310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   20314:	2300      	movs	r3, #0
   20316:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2031a:	ea56 0305 	orrs.w	r3, r6, r5
   2031e:	d106      	bne.n	2032e <z_impl_k_poll+0x76>
   20320:	f38a 8811 	msr	BASEPRI, sl
   20324:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20328:	f06f 040a 	mvn.w	r4, #10
   2032c:	e7ee      	b.n	2030c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2032e:	e9cd 6500 	strd	r6, r5, [sp]
   20332:	4a0d      	ldr	r2, [pc, #52]	; (20368 <z_impl_k_poll+0xb0>)
   20334:	480d      	ldr	r0, [pc, #52]	; (2036c <z_impl_k_poll+0xb4>)
   20336:	4651      	mov	r1, sl
   20338:	f7ff fb44 	bl	1f9c4 <z_pend_curr>
   2033c:	4604      	mov	r4, r0
	__asm__ volatile(
   2033e:	f04f 0320 	mov.w	r3, #32
   20342:	f3ef 8511 	mrs	r5, BASEPRI
   20346:	f383 8811 	msr	BASEPRI, r3
   2034a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   2034e:	462a      	mov	r2, r5
   20350:	4649      	mov	r1, r9
   20352:	4640      	mov	r0, r8
   20354:	f006 fc74 	bl	26c40 <clear_event_registrations>
	__asm__ volatile(
   20358:	f385 8811 	msr	BASEPRI, r5
   2035c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   20360:	e7d4      	b.n	2030c <z_impl_k_poll+0x54>
   20362:	bf00      	nop
   20364:	2000ecac 	.word	0x2000ecac
   20368:	2000075c 	.word	0x2000075c
   2036c:	2000f2c1 	.word	0x2000f2c1

00020370 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   20370:	b538      	push	{r3, r4, r5, lr}
   20372:	4603      	mov	r3, r0
	__asm__ volatile(
   20374:	f04f 0220 	mov.w	r2, #32
   20378:	f3ef 8511 	mrs	r5, BASEPRI
   2037c:	f382 8811 	msr	BASEPRI, r2
   20380:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   20384:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   20386:	2101      	movs	r1, #1
   20388:	6081      	str	r1, [r0, #8]
	return list->head == list;
   2038a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2038c:	4283      	cmp	r3, r0
   2038e:	d106      	bne.n	2039e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   20390:	f385 8811 	msr	BASEPRI, r5
   20394:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   20398:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   2039a:	4620      	mov	r0, r4
   2039c:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   2039e:	e9d0 3200 	ldrd	r3, r2, [r0]
   203a2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   203a4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   203a6:	2300      	movs	r3, #0
	node->prev = NULL;
   203a8:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   203ac:	f006 fb5b 	bl	26a66 <signal_poll_event>
	z_reschedule(&lock, key);
   203b0:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   203b2:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   203b4:	4801      	ldr	r0, [pc, #4]	; (203bc <z_impl_k_poll_signal_raise+0x4c>)
   203b6:	f7ff f8c5 	bl	1f544 <z_reschedule>
	return rc;
   203ba:	e7ee      	b.n	2039a <z_impl_k_poll_signal_raise+0x2a>
   203bc:	2000f2c1 	.word	0x2000f2c1

000203c0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   203c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   203c2:	4606      	mov	r6, r0
   203c4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   203c6:	f006 fa15 	bl	267f4 <k_is_in_isr>
   203ca:	b978      	cbnz	r0, 203ec <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   203cc:	4b0b      	ldr	r3, [pc, #44]	; (203fc <z_thread_aligned_alloc+0x3c>)
   203ce:	689b      	ldr	r3, [r3, #8]
   203d0:	6f9c      	ldr	r4, [r3, #120]	; 0x78
	}

	if (heap) {
   203d2:	b17c      	cbz	r4, 203f4 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   203d4:	1d2a      	adds	r2, r5, #4
   203d6:	d209      	bcs.n	203ec <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   203d8:	2000      	movs	r0, #0
   203da:	2100      	movs	r1, #0
   203dc:	e9cd 0100 	strd	r0, r1, [sp]
   203e0:	f046 0104 	orr.w	r1, r6, #4
   203e4:	4620      	mov	r0, r4
   203e6:	f005 ffb2 	bl	2634e <k_heap_aligned_alloc>
	if (mem == NULL) {
   203ea:	b908      	cbnz	r0, 203f0 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   203ec:	2400      	movs	r4, #0
	}

	return ret;
   203ee:	e001      	b.n	203f4 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   203f0:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   203f2:	1d04      	adds	r4, r0, #4
}
   203f4:	4620      	mov	r0, r4
   203f6:	b002      	add	sp, #8
   203f8:	bd70      	pop	{r4, r5, r6, pc}
   203fa:	bf00      	nop
   203fc:	2000ecac 	.word	0x2000ecac

00020400 <write_without_rsp_vnd>:
{
   20400:	b510      	push	{r4, lr}
   20402:	4608      	mov	r0, r1
   20404:	4611      	mov	r1, r2
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   20406:	f89d 200c 	ldrb.w	r2, [sp, #12]
	uint8_t *value = attr->user_data;
   2040a:	68c0      	ldr	r0, [r0, #12]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   2040c:	0792      	lsls	r2, r2, #30
{
   2040e:	461c      	mov	r4, r3
   20410:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   20414:	d508      	bpl.n	20428 <write_without_rsp_vnd+0x28>
	if (offset + len > sizeof(vnd_value)) {
   20416:	191a      	adds	r2, r3, r4
   20418:	2a06      	cmp	r2, #6
   2041a:	dc08      	bgt.n	2042e <write_without_rsp_vnd+0x2e>
	memcpy(value + offset, buf, len);
   2041c:	4622      	mov	r2, r4
   2041e:	4418      	add	r0, r3
   20420:	f003 fbab 	bl	23b7a <memcpy>
}
   20424:	4620      	mov	r0, r4
   20426:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_REQ_REJECTED);
   20428:	f06f 04fb 	mvn.w	r4, #251	; 0xfb
   2042c:	e7fa      	b.n	20424 <write_without_rsp_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2042e:	f06f 0406 	mvn.w	r4, #6
   20432:	e7f7      	b.n	20424 <write_without_rsp_vnd+0x24>

00020434 <write_signed>:
{
   20434:	b538      	push	{r3, r4, r5, lr}
   20436:	460c      	mov	r4, r1
   20438:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   2043c:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(signed_value)) {
   2043e:	461c      	mov	r4, r3
   20440:	18c3      	adds	r3, r0, r3
   20442:	2b04      	cmp	r3, #4
{
   20444:	4611      	mov	r1, r2
	if (offset + len > sizeof(signed_value)) {
   20446:	dc05      	bgt.n	20454 <write_signed+0x20>
	memcpy(value + offset, buf, len);
   20448:	4622      	mov	r2, r4
   2044a:	4428      	add	r0, r5
   2044c:	f003 fb95 	bl	23b7a <memcpy>
}
   20450:	4620      	mov	r0, r4
   20452:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20454:	f06f 0406 	mvn.w	r4, #6
   20458:	e7fa      	b.n	20450 <write_signed+0x1c>

0002045a <write_long_vnd>:
{
   2045a:	b538      	push	{r3, r4, r5, lr}
   2045c:	460d      	mov	r5, r1
   2045e:	4611      	mov	r1, r2
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   20460:	f89d 2014 	ldrb.w	r2, [sp, #20]
   20464:	07d2      	lsls	r2, r2, #31
{
   20466:	461c      	mov	r4, r3
   20468:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   2046c:	d409      	bmi.n	20482 <write_long_vnd+0x28>
	if (offset + len > sizeof(vnd_long_value)) {
   2046e:	191a      	adds	r2, r3, r4
   20470:	2a4a      	cmp	r2, #74	; 0x4a
   20472:	dc08      	bgt.n	20486 <write_long_vnd+0x2c>
	memcpy(value + offset, buf, len);
   20474:	68e8      	ldr	r0, [r5, #12]
   20476:	4622      	mov	r2, r4
   20478:	4418      	add	r0, r3
   2047a:	f003 fb7e 	bl	23b7a <memcpy>
}
   2047e:	4620      	mov	r0, r4
   20480:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   20482:	2400      	movs	r4, #0
   20484:	e7fb      	b.n	2047e <write_long_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20486:	f06f 0406 	mvn.w	r4, #6
   2048a:	e7f8      	b.n	2047e <write_long_vnd+0x24>

0002048c <write_vnd>:
{
   2048c:	b538      	push	{r3, r4, r5, lr}
   2048e:	460c      	mov	r4, r1
   20490:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   20494:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(vnd_value)) {
   20496:	461c      	mov	r4, r3
   20498:	18c3      	adds	r3, r0, r3
   2049a:	2b06      	cmp	r3, #6
{
   2049c:	4611      	mov	r1, r2
	if (offset + len > sizeof(vnd_value)) {
   2049e:	dc05      	bgt.n	204ac <write_vnd+0x20>
	memcpy(value + offset, buf, len);
   204a0:	4622      	mov	r2, r4
   204a2:	4428      	add	r0, r5
   204a4:	f003 fb69 	bl	23b7a <memcpy>
}
   204a8:	4620      	mov	r0, r4
   204aa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   204ac:	f06f 0406 	mvn.w	r4, #6
   204b0:	e7fa      	b.n	204a8 <write_vnd+0x1c>

000204b2 <read_signed>:
{
   204b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   204b4:	2404      	movs	r4, #4
   204b6:	9402      	str	r4, [sp, #8]
   204b8:	68cc      	ldr	r4, [r1, #12]
   204ba:	9401      	str	r4, [sp, #4]
   204bc:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   204c0:	9400      	str	r4, [sp, #0]
   204c2:	f004 fea8 	bl	25216 <bt_gatt_attr_read>
}
   204c6:	b004      	add	sp, #16
   204c8:	bd10      	pop	{r4, pc}

000204ca <read_long_vnd>:
{
   204ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   204cc:	244a      	movs	r4, #74	; 0x4a
   204ce:	9402      	str	r4, [sp, #8]
   204d0:	68cc      	ldr	r4, [r1, #12]
   204d2:	9401      	str	r4, [sp, #4]
   204d4:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   204d8:	9400      	str	r4, [sp, #0]
   204da:	f004 fe9c 	bl	25216 <bt_gatt_attr_read>
}
   204de:	b004      	add	sp, #16
   204e0:	bd10      	pop	{r4, pc}

000204e2 <read_vnd>:
{
   204e2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   204e6:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   204ea:	4605      	mov	r5, r0
				 strlen(value));
   204ec:	4640      	mov	r0, r8
{
   204ee:	461f      	mov	r7, r3
   204f0:	460c      	mov	r4, r1
   204f2:	4616      	mov	r6, r2
				 strlen(value));
   204f4:	f003 fb03 	bl	23afe <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   204f8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   204fc:	9300      	str	r3, [sp, #0]
   204fe:	b280      	uxth	r0, r0
   20500:	e9cd 8001 	strd	r8, r0, [sp, #4]
   20504:	463b      	mov	r3, r7
   20506:	4632      	mov	r2, r6
   20508:	4621      	mov	r1, r4
   2050a:	4628      	mov	r0, r5
   2050c:	f004 fe83 	bl	25216 <bt_gatt_attr_read>
}
   20510:	b004      	add	sp, #16
   20512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020516 <k_msleep.isra.0>:
 * @param ms Number of milliseconds to sleep.
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
   20516:	4601      	mov	r1, r0
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   20518:	f240 30e7 	movw	r0, #999	; 0x3e7
   2051c:	b508      	push	{r3, lr}
   2051e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20522:	2300      	movs	r3, #0
   20524:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   20528:	1449      	asrs	r1, r1, #17
   2052a:	f7e0 fc8d 	bl	e48 <__aeabi_uldivmod>
{
	return k_sleep(Z_TIMEOUT_MS(ms));
}
   2052e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   20532:	f7ff bb2f 	b.w	1fb94 <z_impl_k_sleep>

00020536 <bma_delay_us>:
	z_impl_k_busy_wait(usec_to_wait);
   20536:	f006 b963 	b.w	26800 <z_impl_k_busy_wait>

0002053a <null_pointer_check>:
 */
static int8_t null_pointer_check(const struct bma4_dev *dev)
{
    int8_t rslt = BMA4_OK;

    if ((dev == NULL) || (dev->bus_read == NULL) || (dev->bus_write == NULL) || (dev->intf_ptr == NULL))
   2053a:	b148      	cbz	r0, 20550 <null_pointer_check+0x16>
   2053c:	6a03      	ldr	r3, [r0, #32]
   2053e:	b13b      	cbz	r3, 20550 <null_pointer_check+0x16>
   20540:	6a43      	ldr	r3, [r0, #36]	; 0x24
   20542:	b12b      	cbz	r3, 20550 <null_pointer_check+0x16>
   20544:	6840      	ldr	r0, [r0, #4]
   20546:	fab0 f080 	clz	r0, r0
   2054a:	0940      	lsrs	r0, r0, #5
   2054c:	4240      	negs	r0, r0
   2054e:	4770      	bx	lr
    {
        rslt = BMA4_E_NULL_PTR;
   20550:	f04f 30ff 	mov.w	r0, #4294967295
    {
        rslt = BMA4_OK;
    }

    return rslt;
}
   20554:	4770      	bx	lr

00020556 <write_regs>:
{
   20556:	b570      	push	{r4, r5, r6, lr}
   20558:	4605      	mov	r5, r0
    rslt = null_pointer_check(dev);
   2055a:	4618      	mov	r0, r3
{
   2055c:	461c      	mov	r4, r3
    rslt = null_pointer_check(dev);
   2055e:	f7ff ffec 	bl	2053a <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   20562:	b9b8      	cbnz	r0, 20594 <write_regs+0x3e>
   20564:	b1b1      	cbz	r1, 20594 <write_regs+0x3e>
        if (dev->intf == BMA4_SPI_INTF)
   20566:	7a23      	ldrb	r3, [r4, #8]
   20568:	b90b      	cbnz	r3, 2056e <write_regs+0x18>
            addr = addr & BMA4_SPI_WR_MASK;
   2056a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
        dev->intf_rslt = dev->bus_write(addr, data, len, dev->intf_ptr);
   2056e:	4628      	mov	r0, r5
   20570:	6a66      	ldr	r6, [r4, #36]	; 0x24
   20572:	6863      	ldr	r3, [r4, #4]
   20574:	47b0      	blx	r6
   20576:	4605      	mov	r5, r0
   20578:	7260      	strb	r0, [r4, #9]
        if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS)
   2057a:	b970      	cbnz	r0, 2059a <write_regs+0x44>
            if (dev->perf_mode_status == BMA4_ENABLE)
   2057c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
                dev->delay_us(2, dev->intf_ptr);
   20580:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20582:	6861      	ldr	r1, [r4, #4]
            if (dev->perf_mode_status == BMA4_ENABLE)
   20584:	2a01      	cmp	r2, #1
                dev->delay_us(2, dev->intf_ptr);
   20586:	bf0c      	ite	eq
   20588:	2002      	moveq	r0, #2
                dev->delay_us(450, dev->intf_ptr);
   2058a:	f44f 70e1 	movne.w	r0, #450	; 0x1c2
   2058e:	4798      	blx	r3
}
   20590:	4628      	mov	r0, r5
   20592:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BMA4_E_NULL_PTR;
   20594:	f04f 35ff 	mov.w	r5, #4294967295
   20598:	e7fa      	b.n	20590 <write_regs+0x3a>
            rslt = BMA4_E_COM_FAIL;
   2059a:	f06f 0501 	mvn.w	r5, #1
   2059e:	e7f7      	b.n	20590 <write_regs+0x3a>

000205a0 <read_regs>:
{
   205a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205a4:	4683      	mov	fp, r0
   205a6:	af00      	add	r7, sp, #0
    rslt = null_pointer_check(dev);
   205a8:	4618      	mov	r0, r3
{
   205aa:	4688      	mov	r8, r1
   205ac:	4615      	mov	r5, r2
   205ae:	461c      	mov	r4, r3
    rslt = null_pointer_check(dev);
   205b0:	f7ff ffc3 	bl	2053a <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   205b4:	bb40      	cbnz	r0, 20608 <read_regs+0x68>
   205b6:	b339      	cbz	r1, 20608 <read_regs+0x68>
        uint32_t temp_len = len + dev->dummy_byte;
   205b8:	7ae2      	ldrb	r2, [r4, #11]
   205ba:	442a      	add	r2, r5
        uint8_t temp_buff[temp_len];
   205bc:	1dd3      	adds	r3, r2, #7
   205be:	f023 0307 	bic.w	r3, r3, #7
    {
   205c2:	46e9      	mov	r9, sp
        uint8_t temp_buff[temp_len];
   205c4:	ebad 0d03 	sub.w	sp, sp, r3
        if (dev->intf == BMA4_SPI_INTF)
   205c8:	7a23      	ldrb	r3, [r4, #8]
        uint8_t temp_buff[temp_len];
   205ca:	46ea      	mov	sl, sp
        if (dev->intf == BMA4_SPI_INTF)
   205cc:	b90b      	cbnz	r3, 205d2 <read_regs+0x32>
            addr = addr | BMA4_SPI_RD_MASK;
   205ce:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
        dev->intf_rslt = dev->bus_read(addr, temp_buff, temp_len, dev->intf_ptr);
   205d2:	6a26      	ldr	r6, [r4, #32]
   205d4:	6863      	ldr	r3, [r4, #4]
   205d6:	4651      	mov	r1, sl
   205d8:	4658      	mov	r0, fp
   205da:	47b0      	blx	r6
   205dc:	7260      	strb	r0, [r4, #9]
        if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS)
   205de:	b188      	cbz	r0, 20604 <read_regs+0x64>
            rslt = BMA4_E_COM_FAIL;
   205e0:	f06f 0001 	mvn.w	r0, #1
   205e4:	46cd      	mov	sp, r9
}
   205e6:	46bd      	mov	sp, r7
   205e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                data[indx] = temp_buff[indx + dev->dummy_byte];
   205ec:	7ae1      	ldrb	r1, [r4, #11]
   205ee:	eb0a 0602 	add.w	r6, sl, r2
   205f2:	5c71      	ldrb	r1, [r6, r1]
   205f4:	f808 1002 	strb.w	r1, [r8, r2]
            for (indx = 0; indx < len; indx++)
   205f8:	b29a      	uxth	r2, r3
   205fa:	42aa      	cmp	r2, r5
   205fc:	f103 0301 	add.w	r3, r3, #1
   20600:	d3f4      	bcc.n	205ec <read_regs+0x4c>
   20602:	e7ef      	b.n	205e4 <read_regs+0x44>
   20604:	4603      	mov	r3, r0
   20606:	e7f7      	b.n	205f8 <read_regs+0x58>
        rslt = BMA4_E_NULL_PTR;
   20608:	f04f 30ff 	mov.w	r0, #4294967295
   2060c:	e7eb      	b.n	205e6 <read_regs+0x46>

0002060e <increment_feature_config_addr>:
{
   2060e:	b513      	push	{r0, r1, r4, lr}
    uint8_t asic_lsb = 0;
   20610:	2300      	movs	r3, #0
{
   20612:	4604      	mov	r4, r0
    uint8_t asic_lsb = 0;
   20614:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t asic_msb = 0;
   20618:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   2061c:	f7ff ff8d 	bl	2053a <null_pointer_check>
    if (rslt == BMA4_OK)
   20620:	b948      	cbnz	r0, 20636 <increment_feature_config_addr+0x28>
        rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
   20622:	4623      	mov	r3, r4
   20624:	2201      	movs	r2, #1
   20626:	f10d 0106 	add.w	r1, sp, #6
   2062a:	205b      	movs	r0, #91	; 0x5b
   2062c:	f7ff ffb8 	bl	205a0 <read_regs>
        if (rslt == BMA4_OK)
   20630:	b118      	cbz	r0, 2063a <increment_feature_config_addr+0x2c>
            rslt = BMA4_E_COM_FAIL;
   20632:	f06f 0001 	mvn.w	r0, #1
}
   20636:	b002      	add	sp, #8
   20638:	bd10      	pop	{r4, pc}
            rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
   2063a:	4623      	mov	r3, r4
   2063c:	2201      	movs	r2, #1
   2063e:	f10d 0107 	add.w	r1, sp, #7
   20642:	205c      	movs	r0, #92	; 0x5c
   20644:	f7ff ffac 	bl	205a0 <read_regs>
        if (rslt == BMA4_OK)
   20648:	2800      	cmp	r0, #0
   2064a:	d1f2      	bne.n	20632 <increment_feature_config_addr+0x24>
            asic_addr = (asic_msb << 4) | (asic_lsb & 0x0F);
   2064c:	f89d 2006 	ldrb.w	r2, [sp, #6]
   20650:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20654:	f002 020f 	and.w	r2, r2, #15
   20658:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
            asic_addr = asic_addr + (dev->read_write_len / 2);
   2065c:	8aa3      	ldrh	r3, [r4, #20]
   2065e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
            asic_lsb = asic_addr & 0x0F;
   20662:	f002 030f 	and.w	r3, r2, #15
            asic_msb = (uint8_t)(asic_addr >> 4);
   20666:	0912      	lsrs	r2, r2, #4
            asic_lsb = asic_addr & 0x0F;
   20668:	f88d 3006 	strb.w	r3, [sp, #6]
            asic_msb = (uint8_t)(asic_addr >> 4);
   2066c:	f88d 2007 	strb.w	r2, [sp, #7]
            rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
   20670:	4623      	mov	r3, r4
   20672:	2201      	movs	r2, #1
   20674:	f10d 0106 	add.w	r1, sp, #6
   20678:	205b      	movs	r0, #91	; 0x5b
   2067a:	f7ff ff6c 	bl	20556 <write_regs>
            if (rslt == BMA4_OK)
   2067e:	2800      	cmp	r0, #0
   20680:	d1d9      	bne.n	20636 <increment_feature_config_addr+0x28>
                rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
   20682:	4623      	mov	r3, r4
   20684:	2201      	movs	r2, #1
   20686:	f10d 0107 	add.w	r1, sp, #7
   2068a:	205c      	movs	r0, #92	; 0x5c
   2068c:	f7ff ff63 	bl	20556 <write_regs>
   20690:	e7d1      	b.n	20636 <increment_feature_config_addr+0x28>

00020692 <set_feature_config_start_addr>:
{
   20692:	b510      	push	{r4, lr}
   20694:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   20696:	f7ff ff50 	bl	2053a <null_pointer_check>
    if (rslt == BMA4_OK)
   2069a:	b980      	cbnz	r0, 206be <set_feature_config_start_addr+0x2c>
        rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &dev->asic_data.asic_lsb, 1, dev);
   2069c:	4623      	mov	r3, r4
   2069e:	2201      	movs	r2, #1
   206a0:	f104 0117 	add.w	r1, r4, #23
   206a4:	205b      	movs	r0, #91	; 0x5b
   206a6:	f7ff ff56 	bl	20556 <write_regs>
        if (rslt == BMA4_OK)
   206aa:	b940      	cbnz	r0, 206be <set_feature_config_start_addr+0x2c>
            rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &dev->asic_data.asic_msb, 1, dev);
   206ac:	4623      	mov	r3, r4
   206ae:	f104 0118 	add.w	r1, r4, #24
   206b2:	2201      	movs	r2, #1
}
   206b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &dev->asic_data.asic_msb, 1, dev);
   206b8:	205c      	movs	r0, #92	; 0x5c
   206ba:	f7ff bf4c 	b.w	20556 <write_regs>
}
   206be:	bd10      	pop	{r4, pc}

000206c0 <bma4_get_advance_power_save>:
{
   206c0:	b513      	push	{r0, r1, r4, lr}
    uint8_t data = 0;
   206c2:	2300      	movs	r3, #0
{
   206c4:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   206c6:	4608      	mov	r0, r1
    uint8_t data = 0;
   206c8:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   206cc:	f7ff ff35 	bl	2053a <null_pointer_check>
    if ((rslt == BMA4_OK) && (adv_pwr_save != NULL))
   206d0:	b978      	cbnz	r0, 206f2 <bma4_get_advance_power_save+0x32>
   206d2:	b174      	cbz	r4, 206f2 <bma4_get_advance_power_save+0x32>
        rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   206d4:	460b      	mov	r3, r1
   206d6:	2201      	movs	r2, #1
   206d8:	f10d 0107 	add.w	r1, sp, #7
   206dc:	207c      	movs	r0, #124	; 0x7c
   206de:	f000 f80b 	bl	206f8 <bma4_read_regs>
        if (rslt == BMA4_OK)
   206e2:	b920      	cbnz	r0, 206ee <bma4_get_advance_power_save+0x2e>
            *adv_pwr_save = BMA4_GET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE);
   206e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   206e8:	f003 0301 	and.w	r3, r3, #1
   206ec:	7023      	strb	r3, [r4, #0]
}
   206ee:	b002      	add	sp, #8
   206f0:	bd10      	pop	{r4, pc}
        rslt = BMA4_E_NULL_PTR;
   206f2:	f04f 30ff 	mov.w	r0, #4294967295
   206f6:	e7fa      	b.n	206ee <bma4_get_advance_power_save+0x2e>

000206f8 <bma4_read_regs>:
{
   206f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   206fc:	461d      	mov	r5, r3
   206fe:	4607      	mov	r7, r0
    uint8_t adv_pwr_save = 0;
   20700:	2300      	movs	r3, #0
    rslt = null_pointer_check(dev);
   20702:	4628      	mov	r0, r5
    uint8_t adv_pwr_save = 0;
   20704:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   20708:	f7ff ff17 	bl	2053a <null_pointer_check>
{
   2070c:	460e      	mov	r6, r1
   2070e:	4614      	mov	r4, r2
    if ((rslt == BMA4_OK) && (data != NULL))
   20710:	4680      	mov	r8, r0
   20712:	2800      	cmp	r0, #0
   20714:	d172      	bne.n	207fc <bma4_read_regs+0x104>
   20716:	2900      	cmp	r1, #0
   20718:	d070      	beq.n	207fc <bma4_read_regs+0x104>
        if (addr == BMA4_FEATURE_CONFIG_ADDR)
   2071a:	2f5e      	cmp	r7, #94	; 0x5e
   2071c:	d168      	bne.n	207f0 <bma4_read_regs+0xf8>
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   2071e:	4629      	mov	r1, r5
   20720:	f10d 0007 	add.w	r0, sp, #7
   20724:	f7ff ffcc 	bl	206c0 <bma4_get_advance_power_save>
            if (adv_pwr_save == BMA4_ENABLE)
   20728:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2072c:	2b01      	cmp	r3, #1
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   2072e:	4607      	mov	r7, r0
            if (adv_pwr_save == BMA4_ENABLE)
   20730:	d109      	bne.n	20746 <bma4_read_regs+0x4e>
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   20732:	4629      	mov	r1, r5
   20734:	4640      	mov	r0, r8
   20736:	f000 f867 	bl	20808 <bma4_set_advance_power_save>
                dev->delay_us(450, dev->intf_ptr);
   2073a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2073c:	6869      	ldr	r1, [r5, #4]
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   2073e:	4607      	mov	r7, r0
                dev->delay_us(450, dev->intf_ptr);
   20740:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   20744:	4798      	blx	r3
            if (((len % 2) == 0) && (len <= dev->feature_len) && (rslt == BMA4_OK))
   20746:	f014 0901 	ands.w	r9, r4, #1
   2074a:	d15a      	bne.n	20802 <bma4_read_regs+0x10a>
   2074c:	7dab      	ldrb	r3, [r5, #22]
   2074e:	42a3      	cmp	r3, r4
   20750:	d357      	bcc.n	20802 <bma4_read_regs+0x10a>
   20752:	2f00      	cmp	r7, #0
   20754:	d155      	bne.n	20802 <bma4_read_regs+0x10a>
                if (dev->read_write_len < len)
   20756:	8aaf      	ldrh	r7, [r5, #20]
   20758:	42a7      	cmp	r7, r4
   2075a:	d242      	bcs.n	207e2 <bma4_read_regs+0xea>
                    loop_count = len / dev->read_write_len;
   2075c:	fbb4 faf7 	udiv	sl, r4, r7
                    rslt = set_feature_config_start_addr(dev);
   20760:	4628      	mov	r0, r5
   20762:	f7ff ff96 	bl	20692 <set_feature_config_start_addr>
                    overflow = len % dev->read_write_len;
   20766:	fb07 471a 	mls	r7, r7, sl, r4
                    index = 0;
   2076a:	46c8      	mov	r8, r9
                    rslt = set_feature_config_start_addr(dev);
   2076c:	4604      	mov	r4, r0
                    for (idx = 0; idx < loop_count; idx++)
   2076e:	fa5f f389 	uxtb.w	r3, r9
   20772:	459a      	cmp	sl, r3
   20774:	d820      	bhi.n	207b8 <bma4_read_regs+0xc0>
                    if ((overflow) && (rslt == BMA4_OK))
   20776:	b147      	cbz	r7, 2078a <bma4_read_regs+0x92>
   20778:	b9d4      	cbnz	r4, 207b0 <bma4_read_regs+0xb8>
                        rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, overflow, dev);
   2077a:	462b      	mov	r3, r5
   2077c:	463a      	mov	r2, r7
   2077e:	eb06 0108 	add.w	r1, r6, r8
   20782:	205e      	movs	r0, #94	; 0x5e
   20784:	f7ff ff0c 	bl	205a0 <read_regs>
   20788:	4604      	mov	r4, r0
                    if (rslt == BMA4_OK)
   2078a:	b98c      	cbnz	r4, 207b0 <bma4_read_regs+0xb8>
                        rslt = set_feature_config_start_addr(dev);
   2078c:	4628      	mov	r0, r5
   2078e:	f7ff ff80 	bl	20692 <set_feature_config_start_addr>
                    rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   20792:	4604      	mov	r4, r0
            if (rslt == BMA4_OK)
   20794:	b960      	cbnz	r0, 207b0 <bma4_read_regs+0xb8>
                if (adv_pwr_save == BMA4_ENABLE)
   20796:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2079a:	2801      	cmp	r0, #1
   2079c:	d108      	bne.n	207b0 <bma4_read_regs+0xb8>
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   2079e:	4629      	mov	r1, r5
   207a0:	f000 f832 	bl	20808 <bma4_set_advance_power_save>
                    dev->delay_us(450, dev->intf_ptr);
   207a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   207a6:	6869      	ldr	r1, [r5, #4]
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   207a8:	4604      	mov	r4, r0
                    dev->delay_us(450, dev->intf_ptr);
   207aa:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   207ae:	4798      	blx	r3
}
   207b0:	4620      	mov	r0, r4
   207b2:	b002      	add	sp, #8
   207b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                        rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, dev->read_write_len, dev);
   207b8:	8aaa      	ldrh	r2, [r5, #20]
   207ba:	462b      	mov	r3, r5
   207bc:	eb06 0108 	add.w	r1, r6, r8
   207c0:	205e      	movs	r0, #94	; 0x5e
   207c2:	f7ff feed 	bl	205a0 <read_regs>
                        if (rslt == BMA4_OK)
   207c6:	4604      	mov	r4, r0
   207c8:	b940      	cbnz	r0, 207dc <bma4_read_regs+0xe4>
                            rslt = increment_feature_config_addr(dev);
   207ca:	4628      	mov	r0, r5
   207cc:	f7ff ff1f 	bl	2060e <increment_feature_config_addr>
                            if (rslt == BMA4_OK)
   207d0:	4604      	mov	r4, r0
   207d2:	b918      	cbnz	r0, 207dc <bma4_read_regs+0xe4>
                                index = index + dev->read_write_len;
   207d4:	8aab      	ldrh	r3, [r5, #20]
   207d6:	4498      	add	r8, r3
   207d8:	fa1f f888 	uxth.w	r8, r8
                    for (idx = 0; idx < loop_count; idx++)
   207dc:	f109 0901 	add.w	r9, r9, #1
   207e0:	e7c5      	b.n	2076e <bma4_read_regs+0x76>
                    rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   207e2:	462b      	mov	r3, r5
   207e4:	4622      	mov	r2, r4
   207e6:	4631      	mov	r1, r6
   207e8:	205e      	movs	r0, #94	; 0x5e
   207ea:	f7ff fed9 	bl	205a0 <read_regs>
   207ee:	e7d0      	b.n	20792 <bma4_read_regs+0x9a>
            rslt = read_regs(addr, data, len, dev);
   207f0:	462b      	mov	r3, r5
   207f2:	4638      	mov	r0, r7
   207f4:	f7ff fed4 	bl	205a0 <read_regs>
   207f8:	4604      	mov	r4, r0
   207fa:	e7d9      	b.n	207b0 <bma4_read_regs+0xb8>
        rslt = BMA4_E_NULL_PTR;
   207fc:	f04f 34ff 	mov.w	r4, #4294967295
   20800:	e7d6      	b.n	207b0 <bma4_read_regs+0xb8>
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
   20802:	f06f 0409 	mvn.w	r4, #9
   20806:	e7d3      	b.n	207b0 <bma4_read_regs+0xb8>

00020808 <bma4_set_advance_power_save>:
{
   20808:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data = 0;
   2080a:	2300      	movs	r3, #0
{
   2080c:	4605      	mov	r5, r0
    rslt = null_pointer_check(dev);
   2080e:	4608      	mov	r0, r1
{
   20810:	460c      	mov	r4, r1
    uint8_t data = 0;
   20812:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   20816:	f7ff fe90 	bl	2053a <null_pointer_check>
    if (rslt == BMA4_OK)
   2081a:	b9b8      	cbnz	r0, 2084c <bma4_set_advance_power_save+0x44>
        rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   2081c:	460b      	mov	r3, r1
   2081e:	2201      	movs	r2, #1
   20820:	f10d 0107 	add.w	r1, sp, #7
   20824:	207c      	movs	r0, #124	; 0x7c
   20826:	f7ff ff67 	bl	206f8 <bma4_read_regs>
        if (rslt == BMA4_OK)
   2082a:	b978      	cbnz	r0, 2084c <bma4_set_advance_power_save+0x44>
            data = BMA4_SET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE, adv_pwr_save);
   2082c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20830:	f005 0001 	and.w	r0, r5, #1
   20834:	f023 0301 	bic.w	r3, r3, #1
   20838:	4318      	orrs	r0, r3
   2083a:	f88d 0007 	strb.w	r0, [sp, #7]
            rslt = bma4_write_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   2083e:	4623      	mov	r3, r4
   20840:	2201      	movs	r2, #1
   20842:	f10d 0107 	add.w	r1, sp, #7
   20846:	207c      	movs	r0, #124	; 0x7c
   20848:	f000 f802 	bl	20850 <bma4_write_regs>
}
   2084c:	b003      	add	sp, #12
   2084e:	bd30      	pop	{r4, r5, pc}

00020850 <bma4_write_regs>:
{
   20850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20854:	461d      	mov	r5, r3
   20856:	4604      	mov	r4, r0
    uint8_t adv_pwr_save = 0;
   20858:	2300      	movs	r3, #0
    rslt = null_pointer_check(dev);
   2085a:	4628      	mov	r0, r5
{
   2085c:	460f      	mov	r7, r1
   2085e:	4616      	mov	r6, r2
    uint8_t adv_pwr_save = 0;
   20860:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   20864:	f7ff fe69 	bl	2053a <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   20868:	2800      	cmp	r0, #0
   2086a:	d173      	bne.n	20954 <bma4_write_regs+0x104>
   2086c:	2900      	cmp	r1, #0
   2086e:	d071      	beq.n	20954 <bma4_write_regs+0x104>
        if (addr == BMA4_FEATURE_CONFIG_ADDR)
   20870:	2c5e      	cmp	r4, #94	; 0x5e
   20872:	d169      	bne.n	20948 <bma4_write_regs+0xf8>
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   20874:	4629      	mov	r1, r5
   20876:	f10d 0007 	add.w	r0, sp, #7
   2087a:	f7ff ff21 	bl	206c0 <bma4_get_advance_power_save>
            if ((adv_pwr_save == BMA4_ENABLE) && (rslt == BMA4_OK))
   2087e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20882:	2b01      	cmp	r3, #1
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   20884:	4604      	mov	r4, r0
            if ((adv_pwr_save == BMA4_ENABLE) && (rslt == BMA4_OK))
   20886:	d109      	bne.n	2089c <bma4_write_regs+0x4c>
   20888:	b940      	cbnz	r0, 2089c <bma4_write_regs+0x4c>
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   2088a:	4629      	mov	r1, r5
   2088c:	f7ff ffbc 	bl	20808 <bma4_set_advance_power_save>
                dev->delay_us(450, dev->intf_ptr);
   20890:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20892:	6869      	ldr	r1, [r5, #4]
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   20894:	4604      	mov	r4, r0
                dev->delay_us(450, dev->intf_ptr);
   20896:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   2089a:	4798      	blx	r3
            if (((len % 2) == 0) && (len <= dev->feature_len) && (rslt == BMA4_OK))
   2089c:	f016 0a01 	ands.w	sl, r6, #1
   208a0:	d15b      	bne.n	2095a <bma4_write_regs+0x10a>
   208a2:	7dab      	ldrb	r3, [r5, #22]
   208a4:	42b3      	cmp	r3, r6
   208a6:	d358      	bcc.n	2095a <bma4_write_regs+0x10a>
   208a8:	2c00      	cmp	r4, #0
   208aa:	d156      	bne.n	2095a <bma4_write_regs+0x10a>
                if (dev->read_write_len < len)
   208ac:	f8b5 b014 	ldrh.w	fp, [r5, #20]
   208b0:	45b3      	cmp	fp, r6
   208b2:	d242      	bcs.n	2093a <bma4_write_regs+0xea>
                    rslt = set_feature_config_start_addr(dev);
   208b4:	4628      	mov	r0, r5
   208b6:	f7ff feec 	bl	20692 <set_feature_config_start_addr>
                    if (rslt == BMA4_OK)
   208ba:	4604      	mov	r4, r0
   208bc:	bb20      	cbnz	r0, 20908 <bma4_write_regs+0xb8>
                    loop_count = len / dev->read_write_len;
   208be:	fbb6 f8fb 	udiv	r8, r6, fp
                    index = 0;
   208c2:	46d1      	mov	r9, sl
                        for (i = 0; i < loop_count; i++)
   208c4:	fa5f f38a 	uxtb.w	r3, sl
   208c8:	4598      	cmp	r8, r3
   208ca:	d821      	bhi.n	20910 <bma4_write_regs+0xc0>
                    overflow = len % dev->read_write_len;
   208cc:	fb0b 6218 	mls	r2, fp, r8, r6
                        if ((overflow) && (rslt == BMA4_OK))
   208d0:	b13a      	cbz	r2, 208e2 <bma4_write_regs+0x92>
   208d2:	b9cc      	cbnz	r4, 20908 <bma4_write_regs+0xb8>
                            rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, overflow, dev);
   208d4:	462b      	mov	r3, r5
   208d6:	eb07 0109 	add.w	r1, r7, r9
   208da:	205e      	movs	r0, #94	; 0x5e
   208dc:	f7ff fe3b 	bl	20556 <write_regs>
   208e0:	4604      	mov	r4, r0
                        if (rslt == BMA4_OK)
   208e2:	b98c      	cbnz	r4, 20908 <bma4_write_regs+0xb8>
                            rslt = set_feature_config_start_addr(dev);
   208e4:	4628      	mov	r0, r5
   208e6:	f7ff fed4 	bl	20692 <set_feature_config_start_addr>
                    rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   208ea:	4604      	mov	r4, r0
            if (rslt == BMA4_OK)
   208ec:	b960      	cbnz	r0, 20908 <bma4_write_regs+0xb8>
                if (adv_pwr_save == BMA4_ENABLE)
   208ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
   208f2:	2801      	cmp	r0, #1
   208f4:	d108      	bne.n	20908 <bma4_write_regs+0xb8>
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   208f6:	4629      	mov	r1, r5
   208f8:	f7ff ff86 	bl	20808 <bma4_set_advance_power_save>
                    dev->delay_us(450, dev->intf_ptr);
   208fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   208fe:	6869      	ldr	r1, [r5, #4]
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   20900:	4604      	mov	r4, r0
                    dev->delay_us(450, dev->intf_ptr);
   20902:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   20906:	4798      	blx	r3
}
   20908:	4620      	mov	r0, r4
   2090a:	b003      	add	sp, #12
   2090c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, dev->read_write_len, dev);
   20910:	8aaa      	ldrh	r2, [r5, #20]
   20912:	462b      	mov	r3, r5
   20914:	eb07 0109 	add.w	r1, r7, r9
   20918:	205e      	movs	r0, #94	; 0x5e
   2091a:	f7ff fe1c 	bl	20556 <write_regs>
                            if (rslt == BMA4_OK)
   2091e:	4604      	mov	r4, r0
   20920:	b940      	cbnz	r0, 20934 <bma4_write_regs+0xe4>
                                rslt = increment_feature_config_addr(dev);
   20922:	4628      	mov	r0, r5
   20924:	f7ff fe73 	bl	2060e <increment_feature_config_addr>
                                if (rslt == BMA4_OK)
   20928:	4604      	mov	r4, r0
   2092a:	b918      	cbnz	r0, 20934 <bma4_write_regs+0xe4>
                                    index = index + dev->read_write_len;
   2092c:	8aab      	ldrh	r3, [r5, #20]
   2092e:	4499      	add	r9, r3
   20930:	fa1f f989 	uxth.w	r9, r9
                        for (i = 0; i < loop_count; i++)
   20934:	f10a 0a01 	add.w	sl, sl, #1
   20938:	e7c4      	b.n	208c4 <bma4_write_regs+0x74>
                    rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   2093a:	462b      	mov	r3, r5
   2093c:	4632      	mov	r2, r6
   2093e:	4639      	mov	r1, r7
   20940:	205e      	movs	r0, #94	; 0x5e
   20942:	f7ff fe08 	bl	20556 <write_regs>
   20946:	e7d0      	b.n	208ea <bma4_write_regs+0x9a>
            rslt = write_regs(addr, data, len, dev);
   20948:	4620      	mov	r0, r4
   2094a:	462b      	mov	r3, r5
   2094c:	f7ff fe03 	bl	20556 <write_regs>
   20950:	4604      	mov	r4, r0
   20952:	e7d9      	b.n	20908 <bma4_write_regs+0xb8>
        rslt = BMA4_E_NULL_PTR;
   20954:	f04f 34ff 	mov.w	r4, #4294967295
   20958:	e7d6      	b.n	20908 <bma4_write_regs+0xb8>
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
   2095a:	f06f 0409 	mvn.w	r4, #9
   2095e:	e7d3      	b.n	20908 <bma4_write_regs+0xb8>

00020960 <bma4_init>:
{
   20960:	b513      	push	{r0, r1, r4, lr}
    uint8_t data = 0;
   20962:	2300      	movs	r3, #0
{
   20964:	4604      	mov	r4, r0
    uint8_t data = 0;
   20966:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t dummy_read = 0;
   2096a:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   2096e:	f7ff fde4 	bl	2053a <null_pointer_check>
    if (rslt == BMA4_OK)
   20972:	4602      	mov	r2, r0
   20974:	b9b0      	cbnz	r0, 209a4 <bma4_init+0x44>
        if (dev->intf == BMA4_SPI_INTF)
   20976:	7a23      	ldrb	r3, [r4, #8]
   20978:	b9bb      	cbnz	r3, 209aa <bma4_init+0x4a>
            dev->dummy_byte = 1;
   2097a:	2201      	movs	r2, #1
   2097c:	72e2      	strb	r2, [r4, #11]
            rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &dummy_read, 1, dev);
   2097e:	4623      	mov	r3, r4
   20980:	f10d 0107 	add.w	r1, sp, #7
   20984:	f7ff feb8 	bl	206f8 <bma4_read_regs>
        if (rslt == BMA4_OK)
   20988:	4602      	mov	r2, r0
   2098a:	b958      	cbnz	r0, 209a4 <bma4_init+0x44>
            rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &data, 1, dev);
   2098c:	2201      	movs	r2, #1
   2098e:	4623      	mov	r3, r4
   20990:	f10d 0106 	add.w	r1, sp, #6
   20994:	2000      	movs	r0, #0
   20996:	f7ff feaf 	bl	206f8 <bma4_read_regs>
            if (rslt == BMA4_OK)
   2099a:	4602      	mov	r2, r0
   2099c:	b910      	cbnz	r0, 209a4 <bma4_init+0x44>
                dev->chip_id = data;
   2099e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   209a2:	7023      	strb	r3, [r4, #0]
}
   209a4:	4610      	mov	r0, r2
   209a6:	b002      	add	sp, #8
   209a8:	bd10      	pop	{r4, pc}
            dev->dummy_byte = 0;
   209aa:	72e0      	strb	r0, [r4, #11]
        if (rslt == BMA4_OK)
   209ac:	e7ee      	b.n	2098c <bma4_init+0x2c>

000209ae <bma4_set_accel_enable>:
{
   209ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data = 0;
   209b0:	2300      	movs	r3, #0
{
   209b2:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   209b4:	4608      	mov	r0, r1
{
   209b6:	460d      	mov	r5, r1
    uint8_t data = 0;
   209b8:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   209bc:	f7ff fdbd 	bl	2053a <null_pointer_check>
    if (rslt == BMA4_OK)
   209c0:	b9c0      	cbnz	r0, 209f4 <bma4_set_accel_enable+0x46>
        rslt = bma4_read_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   209c2:	460b      	mov	r3, r1
   209c4:	2201      	movs	r2, #1
   209c6:	f10d 0107 	add.w	r1, sp, #7
   209ca:	207d      	movs	r0, #125	; 0x7d
   209cc:	f7ff fe94 	bl	206f8 <bma4_read_regs>
        if (rslt == BMA4_OK)
   209d0:	b980      	cbnz	r0, 209f4 <bma4_set_accel_enable+0x46>
            data = BMA4_SET_BITSLICE(data, BMA4_ACCEL_ENABLE, accel_en);
   209d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   209d6:	00a4      	lsls	r4, r4, #2
   209d8:	f022 0204 	bic.w	r2, r2, #4
   209dc:	f004 0404 	and.w	r4, r4, #4
   209e0:	4314      	orrs	r4, r2
            rslt = bma4_write_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   209e2:	462b      	mov	r3, r5
   209e4:	2201      	movs	r2, #1
   209e6:	f10d 0107 	add.w	r1, sp, #7
   209ea:	207d      	movs	r0, #125	; 0x7d
            data = BMA4_SET_BITSLICE(data, BMA4_ACCEL_ENABLE, accel_en);
   209ec:	f88d 4007 	strb.w	r4, [sp, #7]
            rslt = bma4_write_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   209f0:	f7ff ff2e 	bl	20850 <bma4_write_regs>
}
   209f4:	b003      	add	sp, #12
   209f6:	bd30      	pop	{r4, r5, pc}

000209f8 <bma4_set_command_register>:
{
   209f8:	b507      	push	{r0, r1, r2, lr}
   209fa:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = null_pointer_check(dev);
   209fe:	4608      	mov	r0, r1
   20a00:	f7ff fd9b 	bl	2053a <null_pointer_check>
    if (rslt == BMA4_OK)
   20a04:	b930      	cbnz	r0, 20a14 <bma4_set_command_register+0x1c>
        rslt = bma4_write_regs(BMA4_CMD_ADDR, &command_reg, 1, dev);
   20a06:	460b      	mov	r3, r1
   20a08:	2201      	movs	r2, #1
   20a0a:	f10d 0107 	add.w	r1, sp, #7
   20a0e:	207e      	movs	r0, #126	; 0x7e
   20a10:	f7ff ff1e 	bl	20850 <bma4_write_regs>
}
   20a14:	b003      	add	sp, #12
   20a16:	f85d fb04 	ldr.w	pc, [sp], #4

00020a1a <bma456_init>:
{
   20a1a:	b510      	push	{r4, lr}
   20a1c:	4604      	mov	r4, r0
    rslt = bma4_init(dev);
   20a1e:	f7ff ff9f 	bl	20960 <bma4_init>
    if (rslt == BMA4_OK)
   20a22:	b968      	cbnz	r0, 20a40 <bma456_init+0x26>
        if (dev->chip_id == BMA456_CHIP_ID)
   20a24:	7823      	ldrb	r3, [r4, #0]
   20a26:	2b16      	cmp	r3, #22
            dev->feature_len = BMA456_FEATURE_SIZE;
   20a28:	bf01      	itttt	eq
   20a2a:	2346      	moveq	r3, #70	; 0x46
   20a2c:	75a3      	strbeq	r3, [r4, #22]
            dev->resolution = 16;
   20a2e:	f44f 7304 	moveq.w	r3, #528	; 0x210
   20a32:	81a3      	strheq	r3, [r4, #12]
            dev->config_size = sizeof(bma456_config_file);
   20a34:	bf06      	itte	eq
   20a36:	f44f 53c0 	moveq.w	r3, #6144	; 0x1800
   20a3a:	85a3      	strheq	r3, [r4, #44]	; 0x2c
            rslt = BMA4_E_INVALID_SENSOR;
   20a3c:	f06f 0003 	mvnne.w	r0, #3
}
   20a40:	bd10      	pop	{r4, pc}

00020a42 <bma456_map_interrupt>:
/*!
 * @brief This API sets/un-sets the user provided interrupt to either interrupt
 * pin1 or pin2 in the sensor.
 */
int8_t bma456_map_interrupt(uint8_t int_line, uint16_t int_map, uint8_t enable, struct bma4_dev *dev)
{
   20a42:	b430      	push	{r4, r5}
    int8_t rslt = BMA4_OK;

    if (dev != NULL)
   20a44:	b13b      	cbz	r3, 20a56 <bma456_map_interrupt+0x14>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
   20a46:	781c      	ldrb	r4, [r3, #0]
   20a48:	2c16      	cmp	r4, #22
   20a4a:	d108      	bne.n	20a5e <bma456_map_interrupt+0x1c>
        {
            if (int_line <= 1)
   20a4c:	2801      	cmp	r0, #1
   20a4e:	d809      	bhi.n	20a64 <bma456_map_interrupt+0x22>
    {
        rslt = BMA4_E_NULL_PTR;
    }

    return rslt;
}
   20a50:	bc30      	pop	{r4, r5}
                rslt = bma4_map_interrupt(int_line, int_map, enable, dev);
   20a52:	f7e2 bb85 	b.w	3160 <bma4_map_interrupt>
        rslt = BMA4_E_NULL_PTR;
   20a56:	f04f 30ff 	mov.w	r0, #4294967295
}
   20a5a:	bc30      	pop	{r4, r5}
   20a5c:	4770      	bx	lr
            rslt = BMA4_E_INVALID_SENSOR;
   20a5e:	f06f 0003 	mvn.w	r0, #3
   20a62:	e7fa      	b.n	20a5a <bma456_map_interrupt+0x18>
                rslt = BMA4_E_INT_LINE_INVALID;
   20a64:	f06f 0008 	mvn.w	r0, #8
   20a68:	e7f7      	b.n	20a5a <bma456_map_interrupt+0x18>

00020a6a <bma456_feature_enable>:

/*!
 * @brief This API enables/disables the features of the sensor.
 */
int8_t bma456_feature_enable(uint8_t feature, uint8_t enable, struct bma4_dev *dev)
{
   20a6a:	b570      	push	{r4, r5, r6, lr}
   20a6c:	b092      	sub	sp, #72	; 0x48
   20a6e:	4615      	mov	r5, r2
   20a70:	4604      	mov	r4, r0
   20a72:	460e      	mov	r6, r1
    uint8_t feature_config[BMA456_FEATURE_SIZE] = { 0 };
   20a74:	2242      	movs	r2, #66	; 0x42
   20a76:	2100      	movs	r1, #0
   20a78:	a801      	add	r0, sp, #4
   20a7a:	9100      	str	r1, [sp, #0]
   20a7c:	f003 f8a8 	bl	23bd0 <memset>
    int8_t rslt = BMA4_OK;
    uint8_t len = BMA456_FEATURE_SIZE;

    if (dev != NULL)
   20a80:	2d00      	cmp	r5, #0
   20a82:	d063      	beq.n	20b4c <bma456_feature_enable+0xe2>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
   20a84:	782b      	ldrb	r3, [r5, #0]
   20a86:	2b16      	cmp	r3, #22
   20a88:	d163      	bne.n	20b52 <bma456_feature_enable+0xe8>
        {
            /* Read feature configuration data */
            rslt = bma4_read_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, len, dev);
   20a8a:	462b      	mov	r3, r5
   20a8c:	2246      	movs	r2, #70	; 0x46
   20a8e:	4669      	mov	r1, sp
   20a90:	205e      	movs	r0, #94	; 0x5e
   20a92:	f7ff fe31 	bl	206f8 <bma4_read_regs>
            if (rslt == BMA4_OK)
   20a96:	bba0      	cbnz	r0, 20b02 <bma456_feature_enable+0x98>
            {
                if (enable == TRUE)
   20a98:	2e01      	cmp	r6, #1
   20a9a:	f004 0301 	and.w	r3, r4, #1
   20a9e:	f004 0002 	and.w	r0, r4, #2
   20aa2:	f004 0104 	and.w	r1, r4, #4
   20aa6:	f004 0208 	and.w	r2, r4, #8
   20aaa:	f004 0410 	and.w	r4, r4, #16
   20aae:	d12a      	bne.n	20b06 <bma456_feature_enable+0x9c>
    int8_t rslt = BMA4_OK;

    if ((dev != NULL) && (feature_config != NULL))
    {
        /* Enable step counter */
        if ((feature & BMA456_STEP_CNTR) > 0)
   20ab0:	b12b      	cbz	r3, 20abe <bma456_feature_enable+0x54>
        {
            index = BMA456_STEP_CNTR_OFFSET + 1;
            feature_config[index] = feature_config[index] | BMA456_STEP_CNTR_EN_MSK;
   20ab2:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   20ab6:	f043 0310 	orr.w	r3, r3, #16
   20aba:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        }

        /* Enable step activity */
        if ((feature & BMA456_STEP_ACT) > 0)
   20abe:	b128      	cbz	r0, 20acc <bma456_feature_enable+0x62>
        {
            index = BMA456_STEP_CNTR_OFFSET + 1;
            feature_config[index] = feature_config[index] | BMA456_STEP_ACT_EN_MSK;
   20ac0:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   20ac4:	f043 0320 	orr.w	r3, r3, #32
   20ac8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        }

        /* Enable wrist wear wakeup */
        if ((feature & BMA456_WRIST_WEAR) > 0)
   20acc:	b129      	cbz	r1, 20ada <bma456_feature_enable+0x70>
        {
            index = BMA456_WRIST_WEAR_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_WRIST_WEAR_EN_MSK;
   20ace:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   20ad2:	f043 0301 	orr.w	r3, r3, #1
   20ad6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        }

        /* Enable single - tap */
        if ((feature & BMA456_SINGLE_TAP) > 0)
   20ada:	b12a      	cbz	r2, 20ae8 <bma456_feature_enable+0x7e>
        {
            index = BMA456_SINGLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_SINGLE_TAP_EN_MSK;
   20adc:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   20ae0:	f043 0301 	orr.w	r3, r3, #1
   20ae4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        }

        /* Enable  double- tap */
        if ((feature & BMA456_DOUBLE_TAP) > 0)
   20ae8:	b12c      	cbz	r4, 20af6 <bma456_feature_enable+0x8c>
        {
            index = BMA456_DOUBLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_DOUBLE_TAP_EN_MSK;
   20aea:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
   20aee:	f043 0301 	orr.w	r3, r3, #1

        /* Disable double-tap */
        if ((feature & BMA456_DOUBLE_TAP) > 0)
        {
            index = BMA456_DOUBLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] & (~BMA456_DOUBLE_TAP_EN_MSK);
   20af2:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
        }

        /* Write the configured settings in the sensor */
        rslt = bma4_write_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, len, dev);
   20af6:	462b      	mov	r3, r5
   20af8:	2246      	movs	r2, #70	; 0x46
   20afa:	4669      	mov	r1, sp
   20afc:	205e      	movs	r0, #94	; 0x5e
   20afe:	f7ff fea7 	bl	20850 <bma4_write_regs>
}
   20b02:	b012      	add	sp, #72	; 0x48
   20b04:	bd70      	pop	{r4, r5, r6, pc}
        if ((feature & BMA456_STEP_CNTR) > 0)
   20b06:	b12b      	cbz	r3, 20b14 <bma456_feature_enable+0xaa>
            feature_config[index] = feature_config[index] & (~BMA456_STEP_CNTR_EN_MSK);
   20b08:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   20b0c:	f023 0310 	bic.w	r3, r3, #16
   20b10:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        if ((feature & BMA456_STEP_ACT) > 0)
   20b14:	b128      	cbz	r0, 20b22 <bma456_feature_enable+0xb8>
            feature_config[index] = feature_config[index] & (~BMA456_STEP_ACT_EN_MSK);
   20b16:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   20b1a:	f023 0320 	bic.w	r3, r3, #32
   20b1e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        if ((feature & BMA456_WRIST_WEAR) > 0)
   20b22:	b129      	cbz	r1, 20b30 <bma456_feature_enable+0xc6>
            feature_config[index] = feature_config[index] & (~BMA456_WRIST_WEAR_EN_MSK);
   20b24:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   20b28:	f023 0301 	bic.w	r3, r3, #1
   20b2c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        if ((feature & BMA456_SINGLE_TAP) > 0)
   20b30:	b12a      	cbz	r2, 20b3e <bma456_feature_enable+0xd4>
            feature_config[index] = feature_config[index] & (~BMA456_SINGLE_TAP_EN_MSK);
   20b32:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   20b36:	f023 0301 	bic.w	r3, r3, #1
   20b3a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        if ((feature & BMA456_DOUBLE_TAP) > 0)
   20b3e:	2c00      	cmp	r4, #0
   20b40:	d0d9      	beq.n	20af6 <bma456_feature_enable+0x8c>
            feature_config[index] = feature_config[index] & (~BMA456_DOUBLE_TAP_EN_MSK);
   20b42:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
   20b46:	f023 0301 	bic.w	r3, r3, #1
   20b4a:	e7d2      	b.n	20af2 <bma456_feature_enable+0x88>
        rslt = BMA4_E_NULL_PTR;
   20b4c:	f04f 30ff 	mov.w	r0, #4294967295
   20b50:	e7d7      	b.n	20b02 <bma456_feature_enable+0x98>
            rslt = BMA4_E_INVALID_SENSOR;
   20b52:	f06f 0003 	mvn.w	r0, #3
   20b56:	e7d4      	b.n	20b02 <bma456_feature_enable+0x98>

00020b58 <bma456_step_counter_set_watermark>:
{
   20b58:	b530      	push	{r4, r5, lr}
   20b5a:	b093      	sub	sp, #76	; 0x4c
   20b5c:	460c      	mov	r4, r1
   20b5e:	4605      	mov	r5, r0
    uint8_t feature_config[BMA456_FEATURE_SIZE] = { 0 };
   20b60:	2100      	movs	r1, #0
   20b62:	2242      	movs	r2, #66	; 0x42
   20b64:	a801      	add	r0, sp, #4
   20b66:	9100      	str	r1, [sp, #0]
   20b68:	f003 f832 	bl	23bd0 <memset>
    if (dev != NULL)
   20b6c:	b30c      	cbz	r4, 20bb2 <bma456_step_counter_set_watermark+0x5a>
        if (dev->chip_id == BMA456_CHIP_ID)
   20b6e:	7823      	ldrb	r3, [r4, #0]
   20b70:	2b16      	cmp	r3, #22
   20b72:	d121      	bne.n	20bb8 <bma456_step_counter_set_watermark+0x60>
            rslt = bma4_read_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
   20b74:	4623      	mov	r3, r4
   20b76:	2246      	movs	r2, #70	; 0x46
   20b78:	4669      	mov	r1, sp
   20b7a:	205e      	movs	r0, #94	; 0x5e
   20b7c:	f7ff fdbc 	bl	206f8 <bma4_read_regs>
            if (rslt == BMA4_OK)
   20b80:	b9a8      	cbnz	r0, 20bae <bma456_step_counter_set_watermark+0x56>
                data = BMA4_SET_BITS_POS_0(data, BMA456_STEP_CNTR_WM, step_counter_wm);
   20b82:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
   20b86:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   20b8a:	f022 0203 	bic.w	r2, r2, #3
   20b8e:	f3c5 0509 	ubfx	r5, r5, #0, #10
   20b92:	432a      	orrs	r2, r5
   20b94:	b212      	sxth	r2, r2
                feature_config[index] = BMA4_GET_LSB(data);
   20b96:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
                feature_config[index + 1] = BMA4_GET_MSB(data);
   20b9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   20b9e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                rslt = bma4_write_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
   20ba2:	4623      	mov	r3, r4
   20ba4:	2246      	movs	r2, #70	; 0x46
   20ba6:	4669      	mov	r1, sp
   20ba8:	205e      	movs	r0, #94	; 0x5e
   20baa:	f7ff fe51 	bl	20850 <bma4_write_regs>
}
   20bae:	b013      	add	sp, #76	; 0x4c
   20bb0:	bd30      	pop	{r4, r5, pc}
        rslt = BMA4_E_NULL_PTR;
   20bb2:	f04f 30ff 	mov.w	r0, #4294967295
   20bb6:	e7fa      	b.n	20bae <bma456_step_counter_set_watermark+0x56>
            rslt = BMA4_E_INVALID_SENSOR;
   20bb8:	f06f 0003 	mvn.w	r0, #3
   20bbc:	e7f7      	b.n	20bae <bma456_step_counter_set_watermark+0x56>

00020bbe <bma456_step_counter_output>:
{
   20bbe:	b513      	push	{r0, r1, r4, lr}
    uint8_t data[BMA456_STEP_CNTR_DATA_SIZE] = { 0 };
   20bc0:	2300      	movs	r3, #0
   20bc2:	9301      	str	r3, [sp, #4]
{
   20bc4:	4604      	mov	r4, r0
    if ((dev != NULL) && (step_count != NULL))
   20bc6:	460b      	mov	r3, r1
   20bc8:	b171      	cbz	r1, 20be8 <bma456_step_counter_output+0x2a>
   20bca:	b168      	cbz	r0, 20be8 <bma456_step_counter_output+0x2a>
        if (dev->chip_id == BMA456_CHIP_ID)
   20bcc:	780a      	ldrb	r2, [r1, #0]
   20bce:	2a16      	cmp	r2, #22
   20bd0:	d10d      	bne.n	20bee <bma456_step_counter_output+0x30>
            rslt = bma4_read_regs(BMA4_STEP_CNT_OUT_0_ADDR, data, BMA456_STEP_CNTR_DATA_SIZE, dev);
   20bd2:	2204      	movs	r2, #4
   20bd4:	eb0d 0102 	add.w	r1, sp, r2
   20bd8:	201e      	movs	r0, #30
   20bda:	f7ff fd8d 	bl	206f8 <bma4_read_regs>
            if (rslt == BMA4_OK)
   20bde:	b908      	cbnz	r0, 20be4 <bma456_step_counter_output+0x26>
                *step_count = step_count_0 | step_count_1 | step_count_2 | step_count_3;
   20be0:	9b01      	ldr	r3, [sp, #4]
   20be2:	6023      	str	r3, [r4, #0]
}
   20be4:	b002      	add	sp, #8
   20be6:	bd10      	pop	{r4, pc}
        rslt = BMA4_E_NULL_PTR;
   20be8:	f04f 30ff 	mov.w	r0, #4294967295
   20bec:	e7fa      	b.n	20be4 <bma456_step_counter_output+0x26>
            rslt = BMA4_E_INVALID_SENSOR;
   20bee:	f06f 0003 	mvn.w	r0, #3
   20bf2:	e7f7      	b.n	20be4 <bma456_step_counter_output+0x26>

00020bf4 <set_max30102_for_reading_data>:
{
   20bf4:	b510      	push	{r4, lr}
    rslt |= max30102_i2c_write(MAX30102_INT1_ENABLE, 0x40, 1);
   20bf6:	2140      	movs	r1, #64	; 0x40
   20bf8:	2002      	movs	r0, #2
   20bfa:	f7e2 fb19 	bl	3230 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   20bfe:	2100      	movs	r1, #0
    rslt |= max30102_i2c_write(MAX30102_INT1_ENABLE, 0x40, 1);
   20c00:	4604      	mov	r4, r0
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   20c02:	2003      	movs	r0, #3
   20c04:	f7e2 fb14 	bl	3230 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   20c08:	2100      	movs	r1, #0
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   20c0a:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   20c0c:	2004      	movs	r0, #4
   20c0e:	f7e2 fb0f 	bl	3230 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   20c12:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   20c14:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   20c16:	2100      	movs	r1, #0
   20c18:	2005      	movs	r0, #5
   20c1a:	f7e2 fb09 	bl	3230 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   20c1e:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   20c20:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   20c22:	2100      	movs	r1, #0
   20c24:	2006      	movs	r0, #6
   20c26:	f7e2 fb03 	bl	3230 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   20c2a:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   20c2c:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   20c2e:	210f      	movs	r1, #15
   20c30:	2008      	movs	r0, #8
   20c32:	f7e2 fafd 	bl	3230 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   20c36:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   20c38:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   20c3a:	2103      	movs	r1, #3
   20c3c:	2009      	movs	r0, #9
   20c3e:	f7e2 faf7 	bl	3230 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   20c42:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   20c44:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   20c46:	2127      	movs	r1, #39	; 0x27
   20c48:	200a      	movs	r0, #10
   20c4a:	f7e2 faf1 	bl	3230 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   20c4e:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   20c50:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   20c52:	2124      	movs	r1, #36	; 0x24
   20c54:	200c      	movs	r0, #12
   20c56:	f7e2 faeb 	bl	3230 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   20c5a:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   20c5c:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   20c5e:	2124      	movs	r1, #36	; 0x24
   20c60:	200d      	movs	r0, #13
   20c62:	f7e2 fae5 	bl	3230 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   20c66:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   20c68:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
   20c6a:	217f      	movs	r1, #127	; 0x7f
   20c6c:	2010      	movs	r0, #16
   20c6e:	f7e2 fadf 	bl	3230 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   20c72:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
   20c74:	4320      	orrs	r0, r4
}
   20c76:	b280      	uxth	r0, r0
   20c78:	bd10      	pop	{r4, pc}

00020c7a <gpio_pin_configure>:
{
   20c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_driver_data *data =
   20c7c:	68c5      	ldr	r5, [r0, #12]
{
   20c7e:	460f      	mov	r7, r1
   20c80:	4616      	mov	r6, r2
	return api->pin_configure(port, pin, flags);
   20c82:	6883      	ldr	r3, [r0, #8]
   20c84:	681b      	ldr	r3, [r3, #0]
   20c86:	4798      	blx	r3
	if (ret != 0) {
   20c88:	b948      	cbnz	r0, 20c9e <gpio_pin_configure+0x24>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   20c8a:	682c      	ldr	r4, [r5, #0]
   20c8c:	2301      	movs	r3, #1
   20c8e:	fa03 f107 	lsl.w	r1, r3, r7
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   20c92:	07f3      	lsls	r3, r6, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   20c94:	bf4c      	ite	mi
   20c96:	4321      	orrmi	r1, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   20c98:	ea24 0101 	bicpl.w	r1, r4, r1
   20c9c:	6029      	str	r1, [r5, #0]
}
   20c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020ca0 <match_led_to_button>:

    return led;
}

bool match_led_to_button(struct device *button, struct device *led)
{
   20ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
   20ca2:	68c5      	ldr	r5, [r0, #12]
   20ca4:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
   20ca6:	6883      	ldr	r3, [r0, #8]
   20ca8:	a901      	add	r1, sp, #4
   20caa:	685b      	ldr	r3, [r3, #4]
   20cac:	4798      	blx	r3
	if (ret == 0) {
   20cae:	b920      	cbnz	r0, 20cba <match_led_to_button+0x1a>
		*value ^= data->invert;
   20cb0:	6828      	ldr	r0, [r5, #0]
   20cb2:	9b01      	ldr	r3, [sp, #4]
   20cb4:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   20cb6:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   20cba:	68e3      	ldr	r3, [r4, #12]
   20cbc:	681b      	ldr	r3, [r3, #0]
    bool val;
    val = gpio_pin_get(button, SW0_GPIO_PIN);
   20cbe:	1e05      	subs	r5, r0, #0
   20cc0:	bf18      	it	ne
   20cc2:	2501      	movne	r5, #1
   20cc4:	055b      	lsls	r3, r3, #21
   20cc6:	d509      	bpl.n	20cdc <match_led_to_button+0x3c>
	if (value != 0)	{
   20cc8:	b150      	cbz	r0, 20ce0 <match_led_to_button+0x40>
	return api->port_set_bits_raw(port, pins);
   20cca:	68a3      	ldr	r3, [r4, #8]
   20ccc:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   20cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
   20cd2:	4620      	mov	r0, r4
   20cd4:	4798      	blx	r3
    gpio_pin_set(led, LED0_GPIO_PIN, !val);
    return val;
}
   20cd6:	4628      	mov	r0, r5
   20cd8:	b003      	add	sp, #12
   20cda:	bd30      	pop	{r4, r5, pc}
	if (value != 0)	{
   20cdc:	2800      	cmp	r0, #0
   20cde:	d0f4      	beq.n	20cca <match_led_to_button+0x2a>
	return api->port_clear_bits_raw(port, pins);
   20ce0:	68a3      	ldr	r3, [r4, #8]
   20ce2:	691b      	ldr	r3, [r3, #16]
   20ce4:	e7f3      	b.n	20cce <match_led_to_button+0x2e>

00020ce6 <z_impl_i2c_transfer>:
{
   20ce6:	b410      	push	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
   20ce8:	6884      	ldr	r4, [r0, #8]
   20cea:	6864      	ldr	r4, [r4, #4]
   20cec:	46a4      	mov	ip, r4
}
   20cee:	bc10      	pop	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
   20cf0:	4760      	bx	ip

00020cf2 <max30208_read_fifo>:
{
   20cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    *data = 0;
   20cf4:	2300      	movs	r3, #0
   20cf6:	6003      	str	r3, [r0, #0]
{
   20cf8:	4605      	mov	r5, r0
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
   20cfa:	21c1      	movs	r1, #193	; 0xc1
   20cfc:	2014      	movs	r0, #20
   20cfe:	f7e2 fce1 	bl	36c4 <max30208_i2c_write.constprop.0>
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   20d02:	f10d 0107 	add.w	r1, sp, #7
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
   20d06:	4604      	mov	r4, r0
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   20d08:	2008      	movs	r0, #8
   20d0a:	f7e2 fcf7 	bl	36fc <max30208_i2c_read.constprop.0>
   20d0e:	f10d 0107 	add.w	r1, sp, #7
   20d12:	2008      	movs	r0, #8
            temp_dat[i] = temp;
   20d14:	f89d 7007 	ldrb.w	r7, [sp, #7]
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   20d18:	f7e2 fcf0 	bl	36fc <max30208_i2c_read.constprop.0>
            temp_dat[i] = temp;
   20d1c:	f89d 6007 	ldrb.w	r6, [sp, #7]
        sum = sum + (temp_dat[0] << 8) + temp_dat[1];
   20d20:	eb06 2607 	add.w	r6, r6, r7, lsl #8
    *data = sum / samples;
   20d24:	602e      	str	r6, [r5, #0]
    max30208_i2c_read(MAX30208_FIFO_R_POINTER, &temp, 1);
   20d26:	f10d 0107 	add.w	r1, sp, #7
   20d2a:	2005      	movs	r0, #5
   20d2c:	f7e2 fce6 	bl	36fc <max30208_i2c_read.constprop.0>
}
   20d30:	4620      	mov	r0, r4
    *data = (temp_dat[0] << 8) + temp_dat[1];
   20d32:	602e      	str	r6, [r5, #0]
}
   20d34:	b003      	add	sp, #12
   20d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020d38 <mpu6050_read_Acc>:

u16_t mpu6050_read_Acc(uint16_t *value)
{
   20d38:	4601      	mov	r1, r0
    return mpu6050_i2c_read(0x3B, value, 2);
   20d3a:	203b      	movs	r0, #59	; 0x3b
   20d3c:	f7e2 bd18 	b.w	3770 <mpu6050_i2c_read.constprop.0>

00020d40 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   20d40:	4684      	mov	ip, r0
    int32_t i = 1, n_width;
    *pn_npks = 0;
   20d42:	2000      	movs	r0, #0
{
   20d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    *pn_npks = 0;
   20d46:	6008      	str	r0, [r1, #0]
    int32_t i = 1, n_width;
   20d48:	2501      	movs	r5, #1

    while (i < n_size - 1)
   20d4a:	f103 3eff 	add.w	lr, r3, #4294967295
   20d4e:	45ae      	cmp	lr, r5
   20d50:	dc00      	bgt.n	20d54 <maxim_peaks_above_min_height+0x14>
                i += n_width;
        }
        else
            i++;
    }
}
   20d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i - 1])
   20d54:	9c05      	ldr	r4, [sp, #20]
   20d56:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
   20d5a:	42a0      	cmp	r0, r4
   20d5c:	ea4f 0685 	mov.w	r6, r5, lsl #2
   20d60:	f105 0401 	add.w	r4, r5, #1
   20d64:	dd18      	ble.n	20d98 <maxim_peaks_above_min_height+0x58>
   20d66:	4416      	add	r6, r2
   20d68:	f856 6c04 	ldr.w	r6, [r6, #-4]
   20d6c:	42b0      	cmp	r0, r6
   20d6e:	dd13      	ble.n	20d98 <maxim_peaks_above_min_height+0x58>
   20d70:	4626      	mov	r6, r4
            while (i + n_width < n_size && pn_x[i] == pn_x[i + n_width]) // find flat peaks
   20d72:	429e      	cmp	r6, r3
   20d74:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   20d78:	4634      	mov	r4, r6
   20d7a:	da03      	bge.n	20d84 <maxim_peaks_above_min_height+0x44>
   20d7c:	42b8      	cmp	r0, r7
   20d7e:	f106 0601 	add.w	r6, r6, #1
   20d82:	d0f6      	beq.n	20d72 <maxim_peaks_above_min_height+0x32>
            if (pn_x[i] > pn_x[i + n_width] && (*pn_npks) < 15)
   20d84:	42b8      	cmp	r0, r7
   20d86:	dd07      	ble.n	20d98 <maxim_peaks_above_min_height+0x58>
   20d88:	6808      	ldr	r0, [r1, #0]
   20d8a:	280e      	cmp	r0, #14
                pn_locs[(*pn_npks)++] = i;
   20d8c:	bfdf      	itttt	le
   20d8e:	1c46      	addle	r6, r0, #1
   20d90:	600e      	strle	r6, [r1, #0]
   20d92:	f84c 5020 	strle.w	r5, [ip, r0, lsl #2]
                i += n_width + 1;
   20d96:	3401      	addle	r4, #1
{
   20d98:	4625      	mov	r5, r4
   20d9a:	e7d8      	b.n	20d4e <maxim_peaks_above_min_height+0xe>

00020d9c <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   20d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++)
   20d9e:	2301      	movs	r3, #1
   20da0:	4604      	mov	r4, r0
   20da2:	428b      	cmp	r3, r1
   20da4:	db00      	blt.n	20da8 <maxim_sort_ascend+0xc>
        n_temp = pn_x[i];
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
            pn_x[j] = pn_x[j - 1];
        pn_x[j] = n_temp;
    }
}
   20da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        n_temp = pn_x[i];
   20da8:	f854 6f04 	ldr.w	r6, [r4, #4]!
   20dac:	461a      	mov	r2, r3
   20dae:	4625      	mov	r5, r4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
   20db0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   20db4:	42b7      	cmp	r7, r6
   20db6:	dd03      	ble.n	20dc0 <maxim_sort_ascend+0x24>
   20db8:	3a01      	subs	r2, #1
            pn_x[j] = pn_x[j - 1];
   20dba:	f845 7904 	str.w	r7, [r5], #-4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
   20dbe:	d1f7      	bne.n	20db0 <maxim_sort_ascend+0x14>
        pn_x[j] = n_temp;
   20dc0:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
    for (i = 1; i < n_size; i++)
   20dc4:	3301      	adds	r3, #1
   20dc6:	e7ec      	b.n	20da2 <maxim_sort_ascend+0x6>

00020dc8 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
   20dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++)
   20dcc:	2301      	movs	r3, #1
   20dce:	460d      	mov	r5, r1
   20dd0:	4293      	cmp	r3, r2
   20dd2:	db01      	blt.n	20dd8 <maxim_sort_indices_descend+0x10>
        n_temp = pn_indx[i];
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
            pn_indx[j] = pn_indx[j - 1];
        pn_indx[j] = n_temp;
    }
}
   20dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        n_temp = pn_indx[i];
   20dd8:	f855 6f04 	ldr.w	r6, [r5, #4]!
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
   20ddc:	461c      	mov	r4, r3
   20dde:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   20de2:	46ac      	mov	ip, r5
   20de4:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   20de8:	f8d9 e000 	ldr.w	lr, [r9]
   20dec:	f850 8027 	ldr.w	r8, [r0, r7, lsl #2]
   20df0:	45c6      	cmp	lr, r8
   20df2:	dd03      	ble.n	20dfc <maxim_sort_indices_descend+0x34>
   20df4:	3c01      	subs	r4, #1
            pn_indx[j] = pn_indx[j - 1];
   20df6:	f84c 7904 	str.w	r7, [ip], #-4
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
   20dfa:	d1f3      	bne.n	20de4 <maxim_sort_indices_descend+0x1c>
        pn_indx[j] = n_temp;
   20dfc:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
    for (i = 1; i < n_size; i++)
   20e00:	3301      	adds	r3, #1
   20e02:	e7e5      	b.n	20dd0 <maxim_sort_indices_descend+0x8>

00020e04 <maxim_remove_close_peaks>:
{
   20e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20e06:	4604      	mov	r4, r0
   20e08:	461e      	mov	r6, r3
   20e0a:	4610      	mov	r0, r2
   20e0c:	460d      	mov	r5, r1
    maxim_sort_indices_descend(pn_x, pn_locs, *pn_npks);
   20e0e:	680a      	ldr	r2, [r1, #0]
   20e10:	4621      	mov	r1, r4
   20e12:	f7ff ffd9 	bl	20dc8 <maxim_sort_indices_descend>
    for (i = -1; i < *pn_npks; i++)
   20e16:	f04f 32ff 	mov.w	r2, #4294967295
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
   20e1a:	f1c6 0e00 	rsb	lr, r6, #0
    for (i = -1; i < *pn_npks; i++)
   20e1e:	6829      	ldr	r1, [r5, #0]
   20e20:	4291      	cmp	r1, r2
   20e22:	dc04      	bgt.n	20e2e <maxim_remove_close_peaks+0x2a>
    maxim_sort_ascend(pn_locs, *pn_npks);
   20e24:	4620      	mov	r0, r4
}
   20e26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    maxim_sort_ascend(pn_locs, *pn_npks);
   20e2a:	f7ff bfb7 	b.w	20d9c <maxim_sort_ascend>
        *pn_npks = i + 1;
   20e2e:	1c57      	adds	r7, r2, #1
   20e30:	4638      	mov	r0, r7
   20e32:	602f      	str	r7, [r5, #0]
        for (j = i + 1; j < n_old_npks; j++)
   20e34:	4281      	cmp	r1, r0
   20e36:	d101      	bne.n	20e3c <maxim_remove_close_peaks+0x38>
   20e38:	463a      	mov	r2, r7
   20e3a:	e7f0      	b.n	20e1e <maxim_remove_close_peaks+0x1a>
            n_dist = pn_locs[j] - (i == -1 ? -1 : pn_locs[i]); // lag-zero peak of autocorr is at index -1
   20e3c:	f1b2 3fff 	cmp.w	r2, #4294967295
   20e40:	bf18      	it	ne
   20e42:	f854 c022 	ldrne.w	ip, [r4, r2, lsl #2]
   20e46:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   20e4a:	bf08      	it	eq
   20e4c:	4694      	moveq	ip, r2
   20e4e:	eba3 030c 	sub.w	r3, r3, ip
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
   20e52:	42b3      	cmp	r3, r6
   20e54:	dc01      	bgt.n	20e5a <maxim_remove_close_peaks+0x56>
   20e56:	459e      	cmp	lr, r3
   20e58:	dd08      	ble.n	20e6c <maxim_remove_close_peaks+0x68>
                pn_locs[(*pn_npks)++] = pn_locs[j];
   20e5a:	f8d5 c000 	ldr.w	ip, [r5]
   20e5e:	f10c 0301 	add.w	r3, ip, #1
   20e62:	602b      	str	r3, [r5, #0]
   20e64:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   20e68:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
        for (j = i + 1; j < n_old_npks; j++)
   20e6c:	3001      	adds	r0, #1
   20e6e:	e7e1      	b.n	20e34 <maxim_remove_close_peaks+0x30>

00020e70 <maxim_find_peaks>:
{
   20e70:	b573      	push	{r0, r1, r4, r5, r6, lr}
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
   20e72:	9e06      	ldr	r6, [sp, #24]
   20e74:	9600      	str	r6, [sp, #0]
{
   20e76:	4605      	mov	r5, r0
   20e78:	460c      	mov	r4, r1
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
   20e7a:	f7ff ff61 	bl	20d40 <maxim_peaks_above_min_height>
    maxim_remove_close_peaks(pn_locs, pn_npks, pn_x, n_min_distance);
   20e7e:	9b07      	ldr	r3, [sp, #28]
   20e80:	4628      	mov	r0, r5
   20e82:	f7ff ffbf 	bl	20e04 <maxim_remove_close_peaks>
    *pn_npks = min(*pn_npks, n_max_num);
   20e86:	6822      	ldr	r2, [r4, #0]
   20e88:	9b08      	ldr	r3, [sp, #32]
   20e8a:	429a      	cmp	r2, r3
   20e8c:	bfd4      	ite	le
   20e8e:	6022      	strle	r2, [r4, #0]
   20e90:	6023      	strgt	r3, [r4, #0]
}
   20e92:	b002      	add	sp, #8
   20e94:	bd70      	pop	{r4, r5, r6, pc}

00020e96 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   20e96:	2301      	movs	r3, #1
   20e98:	fa03 f101 	lsl.w	r1, r3, r1
   20e9c:	68c3      	ldr	r3, [r0, #12]
   20e9e:	681b      	ldr	r3, [r3, #0]
   20ea0:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   20ea2:	bf18      	it	ne
   20ea4:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   20ea8:	b112      	cbz	r2, 20eb0 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   20eaa:	6883      	ldr	r3, [r0, #8]
   20eac:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   20eae:	4718      	bx	r3
   20eb0:	6883      	ldr	r3, [r0, #8]
   20eb2:	691b      	ldr	r3, [r3, #16]
   20eb4:	e7fb      	b.n	20eae <gpio_pin_set+0x18>

00020eb6 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   20eb6:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   20eb8:	68c5      	ldr	r5, [r0, #12]
static inline int gpio_pin_configure(const struct device *port,
   20eba:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   20ebc:	6883      	ldr	r3, [r0, #8]
   20ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
   20ec2:	681b      	ldr	r3, [r3, #0]
   20ec4:	4798      	blx	r3
	if (ret != 0) {
   20ec6:	b930      	cbnz	r0, 20ed6 <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   20ec8:	2301      	movs	r3, #1
   20eca:	fa03 f104 	lsl.w	r1, r3, r4
   20ece:	682b      	ldr	r3, [r5, #0]
   20ed0:	ea23 0301 	bic.w	r3, r3, r1
   20ed4:	602b      	str	r3, [r5, #0]
}
   20ed6:	bd38      	pop	{r3, r4, r5, pc}

00020ed8 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   20ed8:	4601      	mov	r1, r0
   20eda:	f240 30e7 	movw	r0, #999	; 0x3e7
   20ede:	b508      	push	{r3, lr}
   20ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20ee4:	2300      	movs	r3, #0
   20ee6:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   20eea:	1449      	asrs	r1, r1, #17
   20eec:	f7df ffac 	bl	e48 <__aeabi_uldivmod>
}
   20ef0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   20ef4:	f7fe be4e 	b.w	1fb94 <z_impl_k_sleep>

00020ef8 <SetBrightness>:
{
   20ef8:	b510      	push	{r4, lr}
   20efa:	4604      	mov	r4, r0
	WriteComm(0x51);
   20efc:	2051      	movs	r0, #81	; 0x51
   20efe:	f7e2 ff53 	bl	3da8 <WriteComm>
	WriteData(value);
   20f02:	b2e0      	uxtb	r0, r4
}
   20f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	WriteData(value);
   20f08:	f7e2 bf86 	b.w	3e18 <WriteData>

00020f0c <BlockWrite>:
{
   20f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f0e:	4607      	mov	r7, r0
	WriteComm(0x2A);
   20f10:	202a      	movs	r0, #42	; 0x2a
{
   20f12:	460e      	mov	r6, r1
   20f14:	4615      	mov	r5, r2
   20f16:	461c      	mov	r4, r3
	WriteComm(0x2A);
   20f18:	f7e2 ff46 	bl	3da8 <WriteComm>
	WriteData(Xstart >> 8);
   20f1c:	f3c7 2007 	ubfx	r0, r7, #8, #8
   20f20:	f7e2 ff7a 	bl	3e18 <WriteData>
	WriteData(Xstart);
   20f24:	b2f8      	uxtb	r0, r7
   20f26:	f7e2 ff77 	bl	3e18 <WriteData>
	WriteData(Xend >> 8);
   20f2a:	f3c6 2007 	ubfx	r0, r6, #8, #8
   20f2e:	f7e2 ff73 	bl	3e18 <WriteData>
	WriteData(Xend);
   20f32:	b2f0      	uxtb	r0, r6
   20f34:	f7e2 ff70 	bl	3e18 <WriteData>
	WriteComm(0x2B);
   20f38:	202b      	movs	r0, #43	; 0x2b
   20f3a:	f7e2 ff35 	bl	3da8 <WriteComm>
	WriteData(Ystart >> 8);
   20f3e:	f3c5 2007 	ubfx	r0, r5, #8, #8
   20f42:	f7e2 ff69 	bl	3e18 <WriteData>
	WriteData(Ystart);
   20f46:	b2e8      	uxtb	r0, r5
   20f48:	f7e2 ff66 	bl	3e18 <WriteData>
	WriteData(Yend >> 8);
   20f4c:	f3c4 2007 	ubfx	r0, r4, #8, #8
   20f50:	f7e2 ff62 	bl	3e18 <WriteData>
	WriteData(Yend);
   20f54:	b2e0      	uxtb	r0, r4
   20f56:	f7e2 ff5f 	bl	3e18 <WriteData>
}
   20f5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	WriteComm(0x2c);
   20f5e:	202c      	movs	r0, #44	; 0x2c
   20f60:	f7e2 bf22 	b.w	3da8 <WriteComm>

00020f64 <resetDisplay>:
	WriteComm(0x01);
   20f64:	2001      	movs	r0, #1
   20f66:	f7e2 bf1f 	b.w	3da8 <WriteComm>

00020f6a <setDisplay>:
{
   20f6a:	b508      	push	{r3, lr}
	WriteComm(0xFE);
   20f6c:	20fe      	movs	r0, #254	; 0xfe
   20f6e:	f7e2 ff1b 	bl	3da8 <WriteComm>
	WriteData(0x01);
   20f72:	2001      	movs	r0, #1
   20f74:	f7e2 ff50 	bl	3e18 <WriteData>
	WriteComm(0x04);
   20f78:	2004      	movs	r0, #4
   20f7a:	f7e2 ff15 	bl	3da8 <WriteComm>
	WriteData(0xA0);
   20f7e:	20a0      	movs	r0, #160	; 0xa0
   20f80:	f7e2 ff4a 	bl	3e18 <WriteData>
	WriteComm(0x70);
   20f84:	2070      	movs	r0, #112	; 0x70
   20f86:	f7e2 ff0f 	bl	3da8 <WriteComm>
	WriteData(0x55);
   20f8a:	2055      	movs	r0, #85	; 0x55
   20f8c:	f7e2 ff44 	bl	3e18 <WriteData>
	WriteComm(0xFE);
   20f90:	20fe      	movs	r0, #254	; 0xfe
   20f92:	f7e2 ff09 	bl	3da8 <WriteComm>
	WriteData(0x0A);
   20f96:	200a      	movs	r0, #10
   20f98:	f7e2 ff3e 	bl	3e18 <WriteData>
	WriteComm(0x29);
   20f9c:	2029      	movs	r0, #41	; 0x29
   20f9e:	f7e2 ff03 	bl	3da8 <WriteComm>
	WriteData(0x10);
   20fa2:	2010      	movs	r0, #16
   20fa4:	f7e2 ff38 	bl	3e18 <WriteData>
	WriteComm(0xFE);
   20fa8:	20fe      	movs	r0, #254	; 0xfe
   20faa:	f7e2 fefd 	bl	3da8 <WriteComm>
	WriteData(0x05);
   20fae:	2005      	movs	r0, #5
   20fb0:	f7e2 ff32 	bl	3e18 <WriteData>
	WriteComm(0x05);
   20fb4:	2005      	movs	r0, #5
   20fb6:	f7e2 fef7 	bl	3da8 <WriteComm>
	WriteData(0x00);
   20fba:	2000      	movs	r0, #0
   20fbc:	f7e2 ff2c 	bl	3e18 <WriteData>
	WriteComm(0xFE);
   20fc0:	20fe      	movs	r0, #254	; 0xfe
   20fc2:	f7e2 fef1 	bl	3da8 <WriteComm>
	WriteData(0x00);
   20fc6:	2000      	movs	r0, #0
   20fc8:	f7e2 ff26 	bl	3e18 <WriteData>
	WriteComm(0x51);
   20fcc:	2051      	movs	r0, #81	; 0x51
   20fce:	f7e2 feeb 	bl	3da8 <WriteComm>
	WriteData(0xaf);
   20fd2:	20af      	movs	r0, #175	; 0xaf
   20fd4:	f7e2 ff20 	bl	3e18 <WriteData>
	WriteComm(0x53);
   20fd8:	2053      	movs	r0, #83	; 0x53
   20fda:	f7e2 fee5 	bl	3da8 <WriteComm>
	WriteData(0x10);
   20fde:	2010      	movs	r0, #16
   20fe0:	f7e2 ff1a 	bl	3e18 <WriteData>
	WriteComm(0x53);
   20fe4:	2053      	movs	r0, #83	; 0x53
   20fe6:	f7e2 fedf 	bl	3da8 <WriteComm>
	WriteData(0x20);
   20fea:	2020      	movs	r0, #32
   20fec:	f7e2 ff14 	bl	3e18 <WriteData>
	WriteComm(0x35);
   20ff0:	2035      	movs	r0, #53	; 0x35
   20ff2:	f7e2 fed9 	bl	3da8 <WriteComm>
	WriteData(0x00);
   20ff6:	2000      	movs	r0, #0
   20ff8:	f7e2 ff0e 	bl	3e18 <WriteData>
	WriteComm(0x3A);
   20ffc:	203a      	movs	r0, #58	; 0x3a
   20ffe:	f7e2 fed3 	bl	3da8 <WriteComm>
	WriteData(0x55); //RGB565
   21002:	2055      	movs	r0, #85	; 0x55
   21004:	f7e2 ff08 	bl	3e18 <WriteData>
	WriteComm(0x2A);
   21008:	202a      	movs	r0, #42	; 0x2a
   2100a:	f7e2 fecd 	bl	3da8 <WriteComm>
	WriteData(0x00);
   2100e:	2000      	movs	r0, #0
   21010:	f7e2 ff02 	bl	3e18 <WriteData>
	WriteData(0x10);
   21014:	2010      	movs	r0, #16
   21016:	f7e2 feff 	bl	3e18 <WriteData>
	WriteData(0x01);
   2101a:	2001      	movs	r0, #1
   2101c:	f7e2 fefc 	bl	3e18 <WriteData>
	WriteData(0x7F);
   21020:	207f      	movs	r0, #127	; 0x7f
   21022:	f7e2 fef9 	bl	3e18 <WriteData>
	WriteComm(0x2B);
   21026:	202b      	movs	r0, #43	; 0x2b
   21028:	f7e2 febe 	bl	3da8 <WriteComm>
	WriteData(0x00);
   2102c:	2000      	movs	r0, #0
   2102e:	f7e2 fef3 	bl	3e18 <WriteData>
	WriteData(0x00);
   21032:	2000      	movs	r0, #0
   21034:	f7e2 fef0 	bl	3e18 <WriteData>
	WriteData(0x01);
   21038:	2001      	movs	r0, #1
   2103a:	f7e2 feed 	bl	3e18 <WriteData>
	WriteData(0xBF);
   2103e:	20bf      	movs	r0, #191	; 0xbf
   21040:	f7e2 feea 	bl	3e18 <WriteData>
	WriteComm(0x11);
   21044:	2011      	movs	r0, #17
   21046:	f7e2 feaf 	bl	3da8 <WriteComm>
	k_msleep(480);
   2104a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   2104e:	f7ff ff43 	bl	20ed8 <k_msleep.isra.0>
	WriteComm(0x29);
   21052:	2029      	movs	r0, #41	; 0x29
   21054:	f7e2 fea8 	bl	3da8 <WriteComm>
}
   21058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_msleep(80);
   2105c:	2050      	movs	r0, #80	; 0x50
   2105e:	f7ff bf3b 	b.w	20ed8 <k_msleep.isra.0>

00021062 <ToOrd>:

//ascii 32~90(!~Z), (32~47)�ո�~/,(48~57)0~9,(58~64):~@,(65~126)A~~
//ord 0~95, (48~57)0~9,(65~126)A~z,(33~47)!~/,(58~64):~@
unsigned char ToOrd(unsigned char ch)
{
	if (ch < 32) {
   21062:	281f      	cmp	r0, #31
{
   21064:	4603      	mov	r3, r0
	if (ch < 32) {
   21066:	d916      	bls.n	21096 <ToOrd+0x34>
		ch = 95;
	} else if ((ch >= 32) && (ch <= 47)) //(32~47)�ո�~/
   21068:	f1a0 0220 	sub.w	r2, r0, #32
   2106c:	2a0f      	cmp	r2, #15
   2106e:	d802      	bhi.n	21076 <ToOrd+0x14>
	{
		ch = (ch - 32) + 10 + 62;
   21070:	3328      	adds	r3, #40	; 0x28
	} else if ((ch >= 48) && (ch <= 57)) //(48~57)0~9
	{
		ch = ch - 48;
	} else if ((ch >= 58) && (ch <= 64)) //(58~64):~@
	{
		ch = (ch - 58) + 10 + 62 + 16;
   21072:	b2d8      	uxtb	r0, r3
   21074:	4770      	bx	lr
	} else if ((ch >= 48) && (ch <= 57)) //(48~57)0~9
   21076:	3830      	subs	r0, #48	; 0x30
   21078:	b2c0      	uxtb	r0, r0
   2107a:	2809      	cmp	r0, #9
   2107c:	d90c      	bls.n	21098 <ToOrd+0x36>
	} else if ((ch >= 58) && (ch <= 64)) //(58~64):~@
   2107e:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
   21082:	2a06      	cmp	r2, #6
   21084:	d801      	bhi.n	2108a <ToOrd+0x28>
		ch = (ch - 58) + 10 + 62 + 16;
   21086:	331e      	adds	r3, #30
   21088:	e7f3      	b.n	21072 <ToOrd+0x10>
	} else if ((ch >= 65) && (ch <= 126)) //(65~126)A~~
   2108a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   2108e:	2a3d      	cmp	r2, #61	; 0x3d
   21090:	d801      	bhi.n	21096 <ToOrd+0x34>
	{
		ch = (ch - 65) + 10;
   21092:	3b37      	subs	r3, #55	; 0x37
   21094:	e7ed      	b.n	21072 <ToOrd+0x10>
		ch = 95;
   21096:	205f      	movs	r0, #95	; 0x5f
	} else if (ch > 126) {
		ch = 95;
	}
	return ch;
}
   21098:	4770      	bx	lr

0002109a <DispStr>:
{
   2109a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2109e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   210a2:	460d      	mov	r5, r1
   210a4:	4614      	mov	r4, r2
   210a6:	461f      	mov	r7, r3
   210a8:	1e46      	subs	r6, r0, #1
	while (!(*str == '\0')) {
   210aa:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   210ae:	b94a      	cbnz	r2, 210c4 <DispStr+0x2a>
	BlockWrite(0, COL - 1, 0, ROW - 1);
   210b0:	f240 13bf 	movw	r3, #447	; 0x1bf
   210b4:	f240 116f 	movw	r1, #367	; 0x16f
   210b8:	4610      	mov	r0, r2
}
   210ba:	b002      	add	sp, #8
   210bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	BlockWrite(0, COL - 1, 0, ROW - 1);
   210c0:	f7ff bf24 	b.w	20f0c <BlockWrite>
		DispOneChar(ToOrd(*str++), Xstart, Ystart, TextColor,
   210c4:	4610      	mov	r0, r2
   210c6:	f7ff ffcc 	bl	21062 <ToOrd>
   210ca:	4629      	mov	r1, r5
   210cc:	4622      	mov	r2, r4
   210ce:	f8cd 8000 	str.w	r8, [sp]
   210d2:	463b      	mov	r3, r7
   210d4:	f7e3 f824 	bl	4120 <DispOneChar>
		if (Xstart > ((COL - 1) - FONT_W)) {
   210d8:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
			Ystart = Ystart + FONT_H;
   210dc:	bf26      	itte	cs
   210de:	3415      	addcs	r4, #21
			Xstart = 0;
   210e0:	2500      	movcs	r5, #0
			Xstart = Xstart + FONT_W;
   210e2:	3510      	addcc	r5, #16
			Ystart = 0;
   210e4:	f5b4 7fd5 	cmp.w	r4, #426	; 0x1aa
   210e8:	bf88      	it	hi
   210ea:	2400      	movhi	r4, #0
   210ec:	e7dd      	b.n	210aa <DispStr+0x10>

000210ee <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   210ee:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   210f0:	68c5      	ldr	r5, [r0, #12]
static inline int gpio_pin_configure(const struct device *port,
   210f2:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   210f4:	6883      	ldr	r3, [r0, #8]
   210f6:	f240 2201 	movw	r2, #513	; 0x201
   210fa:	681b      	ldr	r3, [r3, #0]
   210fc:	4798      	blx	r3
	if (ret != 0) {
   210fe:	b928      	cbnz	r0, 2110c <gpio_pin_configure.constprop.0+0x1e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21100:	2301      	movs	r3, #1
   21102:	fa03 f104 	lsl.w	r1, r3, r4
   21106:	682b      	ldr	r3, [r5, #0]
   21108:	430b      	orrs	r3, r1
   2110a:	602b      	str	r3, [r5, #0]
}
   2110c:	bd38      	pop	{r3, r4, r5, pc}

0002110e <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2110e:	2301      	movs	r3, #1
   21110:	fa03 f101 	lsl.w	r1, r3, r1
   21114:	68c3      	ldr	r3, [r0, #12]
   21116:	681b      	ldr	r3, [r3, #0]
   21118:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2111a:	bf18      	it	ne
   2111c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   21120:	b112      	cbz	r2, 21128 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   21122:	6883      	ldr	r3, [r0, #8]
   21124:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   21126:	4718      	bx	r3
   21128:	6883      	ldr	r3, [r0, #8]
   2112a:	691b      	ldr	r3, [r3, #16]
   2112c:	e7fb      	b.n	21126 <gpio_pin_set.isra.0+0x18>

0002112e <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2112e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   21130:	2364      	movs	r3, #100	; 0x64
{
   21132:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   21134:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   21136:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   21138:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   2113c:	b111      	cbz	r1, 21144 <u8_to_dec+0x16>
   2113e:	3d01      	subs	r5, #1
   21140:	d101      	bne.n	21146 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   21142:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   21144:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   21146:	429a      	cmp	r2, r3
		digit = value / divisor;
   21148:	fbb2 f7f3 	udiv	r7, r2, r3
   2114c:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2114e:	d202      	bcs.n	21156 <u8_to_dec+0x28>
   21150:	2b01      	cmp	r3, #1
   21152:	d000      	beq.n	21156 <u8_to_dec+0x28>
   21154:	b130      	cbz	r0, 21164 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   21156:	3630      	adds	r6, #48	; 0x30
			buflen--;
   21158:	3901      	subs	r1, #1
			num_digits++;
   2115a:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   2115c:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   21160:	b2c9      	uxtb	r1, r1
			num_digits++;
   21162:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   21164:	fb03 2217 	mls	r2, r3, r7, r2
   21168:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   2116a:	fbb3 f3fc 	udiv	r3, r3, ip
   2116e:	e7e5      	b.n	2113c <u8_to_dec+0xe>

00021170 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   21170:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   21174:	b2db      	uxtb	r3, r3
   21176:	2b09      	cmp	r3, #9
   21178:	d802      	bhi.n	21180 <char2hex+0x10>
		*x = c - '0';
   2117a:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2117c:	2000      	movs	r0, #0
   2117e:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   21180:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   21184:	2b05      	cmp	r3, #5
   21186:	d802      	bhi.n	2118e <char2hex+0x1e>
		*x = c - 'a' + 10;
   21188:	3857      	subs	r0, #87	; 0x57
   2118a:	7008      	strb	r0, [r1, #0]
   2118c:	e7f6      	b.n	2117c <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   2118e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   21192:	2b05      	cmp	r3, #5
   21194:	d801      	bhi.n	2119a <char2hex+0x2a>
		*x = c - 'A' + 10;
   21196:	3837      	subs	r0, #55	; 0x37
   21198:	e7f7      	b.n	2118a <char2hex+0x1a>
		return -EINVAL;
   2119a:	f06f 0015 	mvn.w	r0, #21
}
   2119e:	4770      	bx	lr

000211a0 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   211a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   211a2:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   211a4:	f001 0001 	and.w	r0, r1, #1
   211a8:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   211ac:	429d      	cmp	r5, r3
   211ae:	ea4f 0651 	mov.w	r6, r1, lsr #1
   211b2:	d903      	bls.n	211bc <hex2bin+0x1c>
		return 0;
   211b4:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   211b6:	4628      	mov	r0, r5
   211b8:	b003      	add	sp, #12
   211ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   211bc:	b158      	cbz	r0, 211d6 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   211be:	7820      	ldrb	r0, [r4, #0]
   211c0:	f10d 0107 	add.w	r1, sp, #7
   211c4:	f7ff ffd4 	bl	21170 <char2hex>
   211c8:	2800      	cmp	r0, #0
   211ca:	dbf3      	blt.n	211b4 <hex2bin+0x14>
		buf[0] = dec;
   211cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   211d0:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   211d4:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   211d6:	3401      	adds	r4, #1
   211d8:	4416      	add	r6, r2
   211da:	42b2      	cmp	r2, r6
   211dc:	d0eb      	beq.n	211b6 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   211de:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   211e2:	f10d 0107 	add.w	r1, sp, #7
   211e6:	f7ff ffc3 	bl	21170 <char2hex>
   211ea:	2800      	cmp	r0, #0
   211ec:	dbe2      	blt.n	211b4 <hex2bin+0x14>
		buf[i] = dec << 4;
   211ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   211f2:	011b      	lsls	r3, r3, #4
   211f4:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   211f6:	f814 0b02 	ldrb.w	r0, [r4], #2
   211fa:	f7ff ffb9 	bl	21170 <char2hex>
   211fe:	2800      	cmp	r0, #0
   21200:	dbd8      	blt.n	211b4 <hex2bin+0x14>
		buf[i] += dec;
   21202:	7813      	ldrb	r3, [r2, #0]
   21204:	f89d 1007 	ldrb.w	r1, [sp, #7]
   21208:	440b      	add	r3, r1
   2120a:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2120e:	e7e4      	b.n	211da <hex2bin+0x3a>

00021210 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   21210:	4603      	mov	r3, r0
   21212:	b140      	cbz	r0, 21226 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21214:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21216:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2121a:	2a02      	cmp	r2, #2
   2121c:	d006      	beq.n	2122c <sys_notify_validate+0x1c>
   2121e:	2a03      	cmp	r2, #3
   21220:	d004      	beq.n	2122c <sys_notify_validate+0x1c>
   21222:	2a01      	cmp	r2, #1
   21224:	d005      	beq.n	21232 <sys_notify_validate+0x22>
		return -EINVAL;
   21226:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2122a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2122c:	681a      	ldr	r2, [r3, #0]
   2122e:	2a00      	cmp	r2, #0
   21230:	d0f9      	beq.n	21226 <sys_notify_validate+0x16>
		notify->result = 0;
   21232:	2000      	movs	r0, #0
   21234:	6098      	str	r0, [r3, #8]
   21236:	4770      	bx	lr

00021238 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21238:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2123a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2123e:	2a02      	cmp	r2, #2
{
   21240:	b510      	push	{r4, lr}
   21242:	4603      	mov	r3, r0
	notify->result = res;
   21244:	6081      	str	r1, [r0, #8]
	switch (method) {
   21246:	d00a      	beq.n	2125e <sys_notify_finalize+0x26>
   21248:	2a03      	cmp	r2, #3
   2124a:	d10b      	bne.n	21264 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2124c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   2124e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   21250:	2200      	movs	r2, #0
   21252:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   21254:	b108      	cbz	r0, 2125a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   21256:	f7ff f88b 	bl	20370 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2125a:	4620      	mov	r0, r4
   2125c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2125e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   21260:	2400      	movs	r4, #0
		break;
   21262:	e7f5      	b.n	21250 <sys_notify_finalize+0x18>
	switch (method) {
   21264:	2400      	movs	r4, #0
   21266:	4620      	mov	r0, r4
   21268:	e7f2      	b.n	21250 <sys_notify_finalize+0x18>

0002126a <arch_printk_char_out>:
}
   2126a:	2000      	movs	r0, #0
   2126c:	4770      	bx	lr

0002126e <str_out>:
{
   2126e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21270:	688a      	ldr	r2, [r1, #8]
   21272:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   21274:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21276:	b114      	cbz	r4, 2127e <str_out+0x10>
   21278:	684b      	ldr	r3, [r1, #4]
   2127a:	4293      	cmp	r3, r2
   2127c:	dc01      	bgt.n	21282 <str_out+0x14>
		ctx->count++;
   2127e:	608d      	str	r5, [r1, #8]
}
   21280:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   21282:	3b01      	subs	r3, #1
   21284:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   21286:	bf08      	it	eq
   21288:	2200      	moveq	r2, #0
   2128a:	608d      	str	r5, [r1, #8]
   2128c:	bf0c      	ite	eq
   2128e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   21290:	54a0      	strbne	r0, [r4, r2]
   21292:	e7f5      	b.n	21280 <str_out+0x12>

00021294 <printk>:
{
   21294:	b40f      	push	{r0, r1, r2, r3}
   21296:	b507      	push	{r0, r1, r2, lr}
   21298:	a904      	add	r1, sp, #16
   2129a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2129e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   212a0:	f7e2 fff8 	bl	4294 <vprintk>
}
   212a4:	b003      	add	sp, #12
   212a6:	f85d eb04 	ldr.w	lr, [sp], #4
   212aa:	b004      	add	sp, #16
   212ac:	4770      	bx	lr

000212ae <snprintk>:
{
   212ae:	b40c      	push	{r2, r3}
   212b0:	b507      	push	{r0, r1, r2, lr}
   212b2:	ab04      	add	r3, sp, #16
   212b4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   212b8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   212ba:	f7e2 fff9 	bl	42b0 <vsnprintk>
}
   212be:	b003      	add	sp, #12
   212c0:	f85d eb04 	ldr.w	lr, [sp], #4
   212c4:	b002      	add	sp, #8
   212c6:	4770      	bx	lr

000212c8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   212c8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   212ca:	f013 0307 	ands.w	r3, r3, #7
   212ce:	d105      	bne.n	212dc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   212d0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   212d2:	2b00      	cmp	r3, #0
   212d4:	bf0c      	ite	eq
   212d6:	2000      	moveq	r0, #0
   212d8:	2003      	movne	r0, #3
   212da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   212dc:	2b02      	cmp	r3, #2
   212de:	d105      	bne.n	212ec <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   212e0:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   212e2:	2b00      	cmp	r3, #0
   212e4:	bf14      	ite	ne
   212e6:	2000      	movne	r0, #0
   212e8:	2004      	moveq	r0, #4
   212ea:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   212ec:	2b01      	cmp	r3, #1
   212ee:	d105      	bne.n	212fc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   212f0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   212f2:	2b00      	cmp	r3, #0
   212f4:	bf0c      	ite	eq
   212f6:	2000      	moveq	r0, #0
   212f8:	2005      	movne	r0, #5
   212fa:	4770      	bx	lr
	int evt = EVT_NOP;
   212fc:	2000      	movs	r0, #0
}
   212fe:	4770      	bx	lr

00021300 <notify_one>:
{
   21300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21304:	460d      	mov	r5, r1
   21306:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21308:	4619      	mov	r1, r3
   2130a:	1d28      	adds	r0, r5, #4
{
   2130c:	4690      	mov	r8, r2
   2130e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21310:	f7ff ff92 	bl	21238 <sys_notify_finalize>
	if (cb) {
   21314:	4604      	mov	r4, r0
   21316:	b138      	cbz	r0, 21328 <notify_one+0x28>
		cb(mgr, cli, state, res);
   21318:	4633      	mov	r3, r6
   2131a:	4642      	mov	r2, r8
   2131c:	4629      	mov	r1, r5
   2131e:	4638      	mov	r0, r7
   21320:	46a4      	mov	ip, r4
}
   21322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   21326:	4760      	bx	ip
}
   21328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002132c <transition_complete>:
{
   2132c:	b410      	push	{r4}
	__asm__ volatile(
   2132e:	f04f 0420 	mov.w	r4, #32
   21332:	f3ef 8211 	mrs	r2, BASEPRI
   21336:	f384 8811 	msr	BASEPRI, r4
   2133a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2133e:	6141      	str	r1, [r0, #20]
}
   21340:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   21342:	2101      	movs	r1, #1
   21344:	f7e2 bfc8 	b.w	42d8 <process_event>

00021348 <validate_args>:
{
   21348:	b510      	push	{r4, lr}
   2134a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2134c:	b140      	cbz	r0, 21360 <validate_args+0x18>
   2134e:	b139      	cbz	r1, 21360 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   21350:	1d08      	adds	r0, r1, #4
   21352:	f7ff ff5d 	bl	21210 <sys_notify_validate>
	if ((rv == 0)
   21356:	b928      	cbnz	r0, 21364 <validate_args+0x1c>
	    && ((cli->notify.flags
   21358:	68a3      	ldr	r3, [r4, #8]
   2135a:	f033 0303 	bics.w	r3, r3, #3
   2135e:	d001      	beq.n	21364 <validate_args+0x1c>
		rv = -EINVAL;
   21360:	f06f 0015 	mvn.w	r0, #21
}
   21364:	bd10      	pop	{r4, pc}

00021366 <onoff_manager_init>:
{
   21366:	b538      	push	{r3, r4, r5, lr}
   21368:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2136a:	4605      	mov	r5, r0
   2136c:	b158      	cbz	r0, 21386 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2136e:	b151      	cbz	r1, 21386 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   21370:	680b      	ldr	r3, [r1, #0]
   21372:	b143      	cbz	r3, 21386 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   21374:	684b      	ldr	r3, [r1, #4]
   21376:	b133      	cbz	r3, 21386 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   21378:	221c      	movs	r2, #28
   2137a:	2100      	movs	r1, #0
   2137c:	f002 fc28 	bl	23bd0 <memset>
   21380:	612c      	str	r4, [r5, #16]
	return 0;
   21382:	2000      	movs	r0, #0
}
   21384:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   21386:	f06f 0015 	mvn.w	r0, #21
   2138a:	e7fb      	b.n	21384 <onoff_manager_init+0x1e>

0002138c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2138c:	b570      	push	{r4, r5, r6, lr}
   2138e:	4604      	mov	r4, r0
   21390:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   21392:	f7ff ffd9 	bl	21348 <validate_args>

	if (rv < 0) {
   21396:	1e05      	subs	r5, r0, #0
   21398:	db31      	blt.n	213fe <onoff_request+0x72>
   2139a:	f04f 0320 	mov.w	r3, #32
   2139e:	f3ef 8111 	mrs	r1, BASEPRI
   213a2:	f383 8811 	msr	BASEPRI, r3
   213a6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   213aa:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   213ac:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   213ae:	f64f 75ff 	movw	r5, #65535	; 0xffff
   213b2:	42ab      	cmp	r3, r5
   213b4:	f000 0207 	and.w	r2, r0, #7
   213b8:	d02e      	beq.n	21418 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   213ba:	2a02      	cmp	r2, #2
   213bc:	d10e      	bne.n	213dc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   213be:	3301      	adds	r3, #1
   213c0:	8363      	strh	r3, [r4, #26]
	rv = state;
   213c2:	4615      	mov	r5, r2
		notify = true;
   213c4:	2301      	movs	r3, #1
	__asm__ volatile(
   213c6:	f381 8811 	msr	BASEPRI, r1
   213ca:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   213ce:	b1b3      	cbz	r3, 213fe <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   213d0:	2300      	movs	r3, #0
   213d2:	4631      	mov	r1, r6
   213d4:	4620      	mov	r0, r4
   213d6:	f7ff ff93 	bl	21300 <notify_one>
   213da:	e010      	b.n	213fe <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   213dc:	0783      	lsls	r3, r0, #30
   213de:	d001      	beq.n	213e4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   213e0:	2a06      	cmp	r2, #6
   213e2:	d10e      	bne.n	21402 <onoff_request+0x76>
	parent->next = child;
   213e4:	2300      	movs	r3, #0
   213e6:	6033      	str	r3, [r6, #0]
	return list->tail;
   213e8:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   213ea:	b993      	cbnz	r3, 21412 <onoff_request+0x86>
	list->head = node;
   213ec:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   213f0:	4615      	mov	r5, r2
   213f2:	b962      	cbnz	r2, 2140e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   213f4:	460a      	mov	r2, r1
   213f6:	4620      	mov	r0, r4
   213f8:	2102      	movs	r1, #2
   213fa:	f7e2 ff6d 	bl	42d8 <process_event>
		}
	}

	return rv;
}
   213fe:	4628      	mov	r0, r5
   21400:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   21402:	2a05      	cmp	r2, #5
   21404:	bf0c      	ite	eq
   21406:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   2140a:	f06f 0504 	mvnne.w	r5, #4
   2140e:	2300      	movs	r3, #0
   21410:	e7d9      	b.n	213c6 <onoff_request+0x3a>
	parent->next = child;
   21412:	601e      	str	r6, [r3, #0]
	list->tail = node;
   21414:	6066      	str	r6, [r4, #4]
}
   21416:	e7eb      	b.n	213f0 <onoff_request+0x64>
		rv = -EAGAIN;
   21418:	f06f 050a 	mvn.w	r5, #10
   2141c:	e7f7      	b.n	2140e <onoff_request+0x82>

0002141e <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   2141e:	b510      	push	{r4, lr}
	__asm__ volatile(
   21420:	f04f 0320 	mov.w	r3, #32
   21424:	f3ef 8211 	mrs	r2, BASEPRI
   21428:	f383 8811 	msr	BASEPRI, r3
   2142c:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21430:	8b04      	ldrh	r4, [r0, #24]
   21432:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   21436:	2c02      	cmp	r4, #2
   21438:	d00a      	beq.n	21450 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2143a:	2c01      	cmp	r4, #1
   2143c:	bf0c      	ite	eq
   2143e:	f06f 0004 	mvneq.w	r0, #4
   21442:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	__asm__ volatile(
   21446:	f382 8811 	msr	BASEPRI, r2
   2144a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   2144e:	e008      	b.n	21462 <onoff_release+0x44>
	mgr->refs -= 1U;
   21450:	8b43      	ldrh	r3, [r0, #26]
   21452:	3b01      	subs	r3, #1
   21454:	b29b      	uxth	r3, r3
   21456:	8343      	strh	r3, [r0, #26]
	if (stop) {
   21458:	b923      	cbnz	r3, 21464 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   2145a:	4621      	mov	r1, r4
   2145c:	f7e2 ff3c 	bl	42d8 <process_event>
	int rv = state;
   21460:	4620      	mov	r0, r4
}
   21462:	bd10      	pop	{r4, pc}
	int rv = state;
   21464:	4620      	mov	r0, r4
   21466:	e7ee      	b.n	21446 <onoff_release+0x28>

00021468 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   21468:	4604      	mov	r4, r0
   2146a:	b508      	push	{r3, lr}
   2146c:	4608      	mov	r0, r1
   2146e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   21470:	461a      	mov	r2, r3
   21472:	47a0      	blx	r4
	return z_impl_k_current_get();
   21474:	f7fe fba8 	bl	1fbc8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   21478:	f7e6 f8ba 	bl	75f0 <z_impl_k_thread_abort>

0002147c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   2147c:	b510      	push	{r4, lr}
   2147e:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   21480:	f04f 33ff 	mov.w	r3, #4294967295
   21484:	f04f 32ff 	mov.w	r2, #4294967295
   21488:	4620      	mov	r0, r4
   2148a:	f7fd ffe7 	bl	1f45c <z_impl_k_queue_get>
   2148e:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   21490:	2800      	cmp	r0, #0
   21492:	d0f5      	beq.n	21480 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21494:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   21496:	6842      	ldr	r2, [r0, #4]
   21498:	f3bf 8f5b 	dmb	ish
   2149c:	e853 1f00 	ldrex	r1, [r3]
   214a0:	f021 0c01 	bic.w	ip, r1, #1
   214a4:	e843 ce00 	strex	lr, ip, [r3]
   214a8:	f1be 0f00 	cmp.w	lr, #0
   214ac:	d1f6      	bne.n	2149c <z_work_q_main+0x20>
   214ae:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   214b2:	07cb      	lsls	r3, r1, #31
   214b4:	d500      	bpl.n	214b8 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   214b6:	4790      	blx	r2
	z_impl_k_yield();
   214b8:	f7fe fae4 	bl	1fa84 <z_impl_k_yield>
   214bc:	e7e0      	b.n	21480 <z_work_q_main+0x4>

000214be <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   214be:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   214c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   214c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   214c8:	bf2c      	ite	cs
   214ca:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   214ce:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   214d2:	4770      	bx	lr

000214d4 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   214d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   214d8:	6880      	ldr	r0, [r0, #8]
   214da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   214de:	bf2c      	ite	cs
   214e0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   214e4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   214e8:	4770      	bx	lr

000214ea <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   214ea:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   214ec:	2201      	movs	r2, #1
   214ee:	f7ff ffe6 	bl	214be <chunk_field>
}
   214f2:	40d0      	lsrs	r0, r2
   214f4:	bd08      	pop	{r3, pc}

000214f6 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   214f6:	6883      	ldr	r3, [r0, #8]
   214f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   214fc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   21500:	d308      	bcc.n	21514 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21502:	684b      	ldr	r3, [r1, #4]
		if (used) {
   21504:	b11a      	cbz	r2, 2150e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21506:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2150a:	604b      	str	r3, [r1, #4]
   2150c:	4770      	bx	lr
   2150e:	f023 0301 	bic.w	r3, r3, #1
   21512:	e7fa      	b.n	2150a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21514:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   21516:	b11a      	cbz	r2, 21520 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21518:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2151c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   2151e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21520:	f023 0301 	bic.w	r3, r3, #1
   21524:	e7fa      	b.n	2151c <set_chunk_used+0x26>

00021526 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21526:	0053      	lsls	r3, r2, #1
   21528:	2201      	movs	r2, #1
   2152a:	f7ff bfd3 	b.w	214d4 <chunk_set>

0002152e <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   2152e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   21532:	bf2c      	ite	cs
   21534:	2008      	movcs	r0, #8
   21536:	2004      	movcc	r0, #4
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   21538:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2153a:	3008      	adds	r0, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   2153c:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   21540:	fab0 f080 	clz	r0, r0
}
   21544:	f1c0 001f 	rsb	r0, r0, #31
   21548:	4770      	bx	lr

0002154a <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   2154a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2154e:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   21550:	2203      	movs	r2, #3
   21552:	460e      	mov	r6, r1
   21554:	4604      	mov	r4, r0
   21556:	f7ff ffb2 	bl	214be <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   2155a:	4286      	cmp	r6, r0
   2155c:	4605      	mov	r5, r0
   2155e:	f107 0804 	add.w	r8, r7, #4
   21562:	d10b      	bne.n	2157c <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   21564:	2301      	movs	r3, #1
   21566:	fa03 f707 	lsl.w	r7, r3, r7
   2156a:	68e3      	ldr	r3, [r4, #12]
   2156c:	ea23 0307 	bic.w	r3, r3, r7
   21570:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   21572:	2300      	movs	r3, #0
   21574:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   21578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2157c:	4631      	mov	r1, r6
   2157e:	2202      	movs	r2, #2
   21580:	4620      	mov	r0, r4
   21582:	f7ff ff9c 	bl	214be <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   21586:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   21588:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   2158a:	4601      	mov	r1, r0
		b->next = second;
   2158c:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   21590:	4620      	mov	r0, r4
   21592:	2203      	movs	r2, #3
   21594:	f7ff ff9e 	bl	214d4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   21598:	4633      	mov	r3, r6
   2159a:	4629      	mov	r1, r5
   2159c:	4620      	mov	r0, r4
   2159e:	2202      	movs	r2, #2
}
   215a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   215a4:	f7ff bf96 	b.w	214d4 <chunk_set>

000215a8 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   215a8:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->len);
   215aa:	6886      	ldr	r6, [r0, #8]
   215ac:	460d      	mov	r5, r1
   215ae:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   215b0:	f7ff ff9b 	bl	214ea <chunk_size>
   215b4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   215b8:	4601      	mov	r1, r0
   215ba:	d301      	bcc.n	215c0 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   215bc:	2801      	cmp	r0, #1
   215be:	d009      	beq.n	215d4 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   215c0:	4630      	mov	r0, r6
   215c2:	f7ff ffb4 	bl	2152e <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   215c6:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   215c8:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   215ca:	4620      	mov	r0, r4
	}
}
   215cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   215d0:	f7ff bfbb 	b.w	2154a <free_list_remove_bidx>
}
   215d4:	bd70      	pop	{r4, r5, r6, pc}

000215d6 <alloc_chunk>:
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
	int bi = bucket_idx(h, sz);
   215d6:	6883      	ldr	r3, [r0, #8]
{
   215d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   215dc:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   215de:	4618      	mov	r0, r3
{
   215e0:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   215e2:	f7ff ffa4 	bl	2152e <bucket_idx.isra.0>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   215e6:	4619      	mov	r1, r3
	int bi = bucket_idx(h, sz);
   215e8:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   215ea:	4618      	mov	r0, r3
   215ec:	f7ff ff9f 	bl	2152e <bucket_idx.isra.0>
   215f0:	42a8      	cmp	r0, r5
   215f2:	da03      	bge.n	215fc <alloc_chunk+0x26>
		return 0;
   215f4:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   215f6:	4630      	mov	r0, r6
   215f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   215fc:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   21600:	f8da 9010 	ldr.w	r9, [sl, #16]
   21604:	f1b9 0f00 	cmp.w	r9, #0
   21608:	d019      	beq.n	2163e <alloc_chunk+0x68>
   2160a:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   2160c:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   21610:	4620      	mov	r0, r4
   21612:	4631      	mov	r1, r6
   21614:	f7ff ff69 	bl	214ea <chunk_size>
   21618:	4540      	cmp	r0, r8
   2161a:	d305      	bcc.n	21628 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   2161c:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   2161e:	4631      	mov	r1, r6
   21620:	4620      	mov	r0, r4
   21622:	f7ff ff92 	bl	2154a <free_list_remove_bidx>
		return c;
   21626:	e7e6      	b.n	215f6 <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   21628:	2203      	movs	r2, #3
   2162a:	4631      	mov	r1, r6
   2162c:	4620      	mov	r0, r4
   2162e:	f7ff ff46 	bl	214be <chunk_field>
		} while (--i && b->next != first);
   21632:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   21634:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   21638:	d001      	beq.n	2163e <alloc_chunk+0x68>
   2163a:	4581      	cmp	r9, r0
   2163c:	d1e6      	bne.n	2160c <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2163e:	68e3      	ldr	r3, [r4, #12]
   21640:	3501      	adds	r5, #1
   21642:	f04f 32ff 	mov.w	r2, #4294967295
   21646:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   21648:	401a      	ands	r2, r3
   2164a:	d0d3      	beq.n	215f4 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   2164c:	fa92 f2a2 	rbit	r2, r2
   21650:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   21654:	1d13      	adds	r3, r2, #4
   21656:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   2165a:	e7e0      	b.n	2161e <alloc_chunk+0x48>

0002165c <split_chunks>:
{
   2165c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21660:	4614      	mov	r4, r2
   21662:	4605      	mov	r5, r0
   21664:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   21666:	f7ff ff40 	bl	214ea <chunk_size>
	size_t lsz = rc - lc;
   2166a:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   2166e:	1b37      	subs	r7, r6, r4
   21670:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   21672:	4642      	mov	r2, r8
   21674:	4631      	mov	r1, r6
   21676:	4628      	mov	r0, r5
   21678:	f7ff ff55 	bl	21526 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   2167c:	463a      	mov	r2, r7
   2167e:	4621      	mov	r1, r4
   21680:	4628      	mov	r0, r5
   21682:	f7ff ff50 	bl	21526 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21686:	4643      	mov	r3, r8
   21688:	2200      	movs	r2, #0
   2168a:	4621      	mov	r1, r4
   2168c:	4628      	mov	r0, r5
   2168e:	f7ff ff21 	bl	214d4 <chunk_set>
	return c + chunk_size(h, c);
   21692:	4621      	mov	r1, r4
   21694:	4628      	mov	r0, r5
   21696:	f7ff ff28 	bl	214ea <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2169a:	463b      	mov	r3, r7
   2169c:	1821      	adds	r1, r4, r0
   2169e:	2200      	movs	r2, #0
   216a0:	4628      	mov	r0, r5
}
   216a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   216a6:	f7ff bf15 	b.w	214d4 <chunk_set>

000216aa <merge_chunks>:
{
   216aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   216ae:	4616      	mov	r6, r2
   216b0:	4604      	mov	r4, r0
   216b2:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   216b4:	f7ff ff19 	bl	214ea <chunk_size>
   216b8:	4631      	mov	r1, r6
   216ba:	4605      	mov	r5, r0
   216bc:	4620      	mov	r0, r4
   216be:	f7ff ff14 	bl	214ea <chunk_size>
   216c2:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   216c4:	462a      	mov	r2, r5
   216c6:	4639      	mov	r1, r7
   216c8:	4620      	mov	r0, r4
   216ca:	f7ff ff2c 	bl	21526 <set_chunk_size>
	return c + chunk_size(h, c);
   216ce:	4631      	mov	r1, r6
   216d0:	4620      	mov	r0, r4
   216d2:	f7ff ff0a 	bl	214ea <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   216d6:	462b      	mov	r3, r5
   216d8:	1831      	adds	r1, r6, r0
   216da:	2200      	movs	r2, #0
   216dc:	4620      	mov	r0, r4
}
   216de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   216e2:	f7ff bef7 	b.w	214d4 <chunk_set>

000216e6 <free_list_add>:
{
   216e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->len);
   216ea:	6886      	ldr	r6, [r0, #8]
   216ec:	460d      	mov	r5, r1
   216ee:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   216f0:	f7ff fefb 	bl	214ea <chunk_size>
   216f4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   216f8:	4601      	mov	r1, r0
   216fa:	d301      	bcc.n	21700 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   216fc:	2801      	cmp	r0, #1
   216fe:	d033      	beq.n	21768 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   21700:	4630      	mov	r0, r6
   21702:	f7ff ff14 	bl	2152e <bucket_idx.isra.0>
	if (b->next == 0U) {
   21706:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2170a:	6916      	ldr	r6, [r2, #16]
   2170c:	b99e      	cbnz	r6, 21736 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   2170e:	2301      	movs	r3, #1
   21710:	fa03 f000 	lsl.w	r0, r3, r0
   21714:	68e3      	ldr	r3, [r4, #12]
   21716:	4303      	orrs	r3, r0
   21718:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   2171a:	4629      	mov	r1, r5
		b->next = c;
   2171c:	6115      	str	r5, [r2, #16]
   2171e:	462b      	mov	r3, r5
   21720:	2202      	movs	r2, #2
   21722:	4620      	mov	r0, r4
   21724:	f7ff fed6 	bl	214d4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   21728:	2203      	movs	r2, #3
   2172a:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2172c:	4620      	mov	r0, r4
}
   2172e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21732:	f7ff becf 	b.w	214d4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   21736:	2202      	movs	r2, #2
   21738:	4631      	mov	r1, r6
   2173a:	4620      	mov	r0, r4
   2173c:	f7ff febf 	bl	214be <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   21740:	4629      	mov	r1, r5
   21742:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   21744:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   21746:	4620      	mov	r0, r4
   21748:	f7ff fec4 	bl	214d4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2174c:	2203      	movs	r2, #3
   2174e:	4633      	mov	r3, r6
   21750:	4629      	mov	r1, r5
   21752:	4620      	mov	r0, r4
   21754:	f7ff febe 	bl	214d4 <chunk_set>
   21758:	4639      	mov	r1, r7
   2175a:	462b      	mov	r3, r5
   2175c:	4620      	mov	r0, r4
   2175e:	f7ff feb9 	bl	214d4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   21762:	2202      	movs	r2, #2
   21764:	4631      	mov	r1, r6
   21766:	e7e1      	b.n	2172c <free_list_add+0x46>
   21768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002176c <free_chunk>:
{
   2176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2176e:	460c      	mov	r4, r1
   21770:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   21772:	f7ff feba 	bl	214ea <chunk_size>
   21776:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   21778:	2201      	movs	r2, #1
   2177a:	4631      	mov	r1, r6
   2177c:	4628      	mov	r0, r5
   2177e:	f7ff fe9e 	bl	214be <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   21782:	07c3      	lsls	r3, r0, #31
   21784:	d40c      	bmi.n	217a0 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   21786:	4631      	mov	r1, r6
   21788:	4628      	mov	r0, r5
   2178a:	f7ff ff0d 	bl	215a8 <free_list_remove>
	return c + chunk_size(h, c);
   2178e:	4621      	mov	r1, r4
   21790:	4628      	mov	r0, r5
   21792:	f7ff feaa 	bl	214ea <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   21796:	4621      	mov	r1, r4
   21798:	1822      	adds	r2, r4, r0
   2179a:	4628      	mov	r0, r5
   2179c:	f7ff ff85 	bl	216aa <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   217a0:	2200      	movs	r2, #0
   217a2:	4621      	mov	r1, r4
   217a4:	4628      	mov	r0, r5
   217a6:	f7ff fe8a 	bl	214be <chunk_field>
   217aa:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   217ac:	2201      	movs	r2, #1
   217ae:	4639      	mov	r1, r7
   217b0:	4628      	mov	r0, r5
   217b2:	f7ff fe84 	bl	214be <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   217b6:	ea10 0602 	ands.w	r6, r0, r2
   217ba:	d113      	bne.n	217e4 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   217bc:	4639      	mov	r1, r7
   217be:	4628      	mov	r0, r5
   217c0:	f7ff fef2 	bl	215a8 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   217c4:	4621      	mov	r1, r4
   217c6:	4632      	mov	r2, r6
   217c8:	4628      	mov	r0, r5
   217ca:	f7ff fe78 	bl	214be <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   217ce:	4622      	mov	r2, r4
   217d0:	1a21      	subs	r1, r4, r0
   217d2:	4628      	mov	r0, r5
   217d4:	f7ff ff69 	bl	216aa <merge_chunks>
   217d8:	4621      	mov	r1, r4
   217da:	4632      	mov	r2, r6
   217dc:	4628      	mov	r0, r5
   217de:	f7ff fe6e 	bl	214be <chunk_field>
   217e2:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   217e4:	4621      	mov	r1, r4
   217e6:	4628      	mov	r0, r5
}
   217e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   217ec:	f7ff bf7b 	b.w	216e6 <free_list_add>

000217f0 <sys_heap_free>:
{
   217f0:	b510      	push	{r4, lr}
	if (mem == NULL) {
   217f2:	b191      	cbz	r1, 2181a <sys_heap_free+0x2a>
   217f4:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   217f6:	6883      	ldr	r3, [r0, #8]
   217f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   217fc:	bf2c      	ite	cs
   217fe:	2408      	movcs	r4, #8
   21800:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21802:	1b0c      	subs	r4, r1, r4
   21804:	1a24      	subs	r4, r4, r0
   21806:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   21808:	4621      	mov	r1, r4
   2180a:	2200      	movs	r2, #0
   2180c:	f7ff fe73 	bl	214f6 <set_chunk_used>
	free_chunk(h, c);
   21810:	4621      	mov	r1, r4
}
   21812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   21816:	f7ff bfa9 	b.w	2176c <free_chunk>
}
   2181a:	bd10      	pop	{r4, pc}

0002181c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2181c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2181e:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   21820:	b909      	cbnz	r1, 21826 <sys_heap_alloc+0xa>
		return NULL;
   21822:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   21824:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   21826:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   21828:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2182c:	d9f9      	bls.n	21822 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   2182e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21832:	bf2c      	ite	cs
   21834:	2208      	movcs	r2, #8
   21836:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21838:	1dcc      	adds	r4, r1, #7
   2183a:	4414      	add	r4, r2
   2183c:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2183e:	4621      	mov	r1, r4
   21840:	4630      	mov	r0, r6
   21842:	f7ff fec8 	bl	215d6 <alloc_chunk>
	if (c == 0U) {
   21846:	4605      	mov	r5, r0
   21848:	2800      	cmp	r0, #0
   2184a:	d0ea      	beq.n	21822 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2184c:	4601      	mov	r1, r0
   2184e:	4630      	mov	r0, r6
   21850:	f7ff fe4b 	bl	214ea <chunk_size>
   21854:	42a0      	cmp	r0, r4
   21856:	d909      	bls.n	2186c <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   21858:	442c      	add	r4, r5
   2185a:	4629      	mov	r1, r5
   2185c:	4630      	mov	r0, r6
   2185e:	4622      	mov	r2, r4
   21860:	f7ff fefc 	bl	2165c <split_chunks>
		free_list_add(h, c + chunk_sz);
   21864:	4621      	mov	r1, r4
   21866:	4630      	mov	r0, r6
   21868:	f7ff ff3d 	bl	216e6 <free_list_add>
	set_chunk_used(h, c, true);
   2186c:	4629      	mov	r1, r5
   2186e:	4630      	mov	r0, r6
   21870:	2201      	movs	r2, #1
   21872:	f7ff fe40 	bl	214f6 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   21876:	68b3      	ldr	r3, [r6, #8]
   21878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2187c:	bf2c      	ite	cs
   2187e:	2308      	movcs	r3, #8
   21880:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   21882:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   21886:	4428      	add	r0, r5
	return chunk_mem(h, c);
   21888:	e7cc      	b.n	21824 <sys_heap_alloc+0x8>

0002188a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2188a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   2188e:	6806      	ldr	r6, [r0, #0]
{
   21890:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rewind = align & -align;
   21892:	424a      	negs	r2, r1
   21894:	ea02 0701 	and.w	r7, r2, r1
	if (align != rewind) {
   21898:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->len);
   2189c:	68b5      	ldr	r5, [r6, #8]
{
   2189e:	460b      	mov	r3, r1
	if (align != rewind) {
   218a0:	d00f      	beq.n	218c2 <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
   218a2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   218a6:	bf34      	ite	cc
   218a8:	2104      	movcc	r1, #4
   218aa:	2108      	movcs	r1, #8
   218ac:	42b9      	cmp	r1, r7
   218ae:	460a      	mov	r2, r1
   218b0:	46b9      	mov	r9, r7
   218b2:	bf28      	it	cs
   218b4:	463a      	movcs	r2, r7
		align -= rewind;
   218b6:	1bdf      	subs	r7, r3, r7
		rewind = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   218b8:	b994      	cbnz	r4, 218e0 <sys_heap_aligned_alloc+0x56>
		return NULL;
   218ba:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   218bc:	4628      	mov	r0, r5
   218be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   218c2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   218c6:	bf34      	ite	cc
   218c8:	2204      	movcc	r2, #4
   218ca:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   218cc:	4291      	cmp	r1, r2
   218ce:	d804      	bhi.n	218da <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   218d0:	4621      	mov	r1, r4
}
   218d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   218d6:	f7ff bfa1 	b.w	2181c <sys_heap_alloc>
		rewind = 0;
   218da:	f04f 0900 	mov.w	r9, #0
   218de:	e7eb      	b.n	218b8 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   218e0:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   218e4:	d9e9      	bls.n	218ba <sys_heap_aligned_alloc+0x30>
	padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   218e6:	1de1      	adds	r1, r4, #7
   218e8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   218ec:	4439      	add	r1, r7
   218ee:	bf2c      	ite	cs
   218f0:	2308      	movcs	r3, #8
   218f2:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   218f4:	1a89      	subs	r1, r1, r2
   218f6:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   218f8:	08c9      	lsrs	r1, r1, #3
   218fa:	4630      	mov	r0, r6
   218fc:	f7ff fe6b 	bl	215d6 <alloc_chunk>
	if (c0 == 0) {
   21900:	4680      	mov	r8, r0
   21902:	2800      	cmp	r0, #0
   21904:	d0d9      	beq.n	218ba <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   21906:	68b3      	ldr	r3, [r6, #8]
   21908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2190c:	bf2c      	ite	cs
   2190e:	2308      	movcs	r3, #8
   21910:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rewind, align) - rewind;
   21912:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   21916:	441d      	add	r5, r3
   21918:	1e7a      	subs	r2, r7, #1
   2191a:	4435      	add	r5, r6
   2191c:	427f      	negs	r7, r7
   2191e:	4415      	add	r5, r2
   21920:	403d      	ands	r5, r7
   21922:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21926:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21928:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2192a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2192c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2192e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   21932:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   21934:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21938:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2193c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   21940:	d208      	bcs.n	21954 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   21942:	4601      	mov	r1, r0
   21944:	463a      	mov	r2, r7
   21946:	4630      	mov	r0, r6
   21948:	f7ff fe88 	bl	2165c <split_chunks>
		free_list_add(h, c0);
   2194c:	4641      	mov	r1, r8
   2194e:	4630      	mov	r0, r6
   21950:	f7ff fec9 	bl	216e6 <free_list_add>
	return c + chunk_size(h, c);
   21954:	4639      	mov	r1, r7
   21956:	4630      	mov	r0, r6
   21958:	f7ff fdc7 	bl	214ea <chunk_size>
   2195c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2195e:	4284      	cmp	r4, r0
   21960:	d208      	bcs.n	21974 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   21962:	4639      	mov	r1, r7
   21964:	4630      	mov	r0, r6
   21966:	4622      	mov	r2, r4
   21968:	f7ff fe78 	bl	2165c <split_chunks>
		free_list_add(h, c_end);
   2196c:	4621      	mov	r1, r4
   2196e:	4630      	mov	r0, r6
   21970:	f7ff feb9 	bl	216e6 <free_list_add>
	set_chunk_used(h, c, true);
   21974:	2201      	movs	r2, #1
   21976:	4639      	mov	r1, r7
   21978:	4630      	mov	r0, r6
   2197a:	f7ff fdbc 	bl	214f6 <set_chunk_used>
	return mem;
   2197e:	e79d      	b.n	218bc <sys_heap_aligned_alloc+0x32>

00021980 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   21980:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   21984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21986:	bf2c      	ite	cs
   21988:	2408      	movcs	r4, #8
   2198a:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2198c:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2198e:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21990:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21992:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21996:	f024 0407 	bic.w	r4, r4, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   2199a:	2200      	movs	r2, #0
   2199c:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   2199e:	1ba4      	subs	r4, r4, r6
	heap->heap = h;
   219a0:	6006      	str	r6, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   219a2:	08e4      	lsrs	r4, r4, #3
	h->chunk0_hdr_area = 0;
   219a4:	e9c6 2300 	strd	r2, r3, [r6]
	h->len = buf_sz;
	h->avail_buckets = 0;
   219a8:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   219aa:	4621      	mov	r1, r4
	h->len = buf_sz;
   219ac:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   219ae:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   219b0:	4620      	mov	r0, r4
   219b2:	f7ff fdbc 	bl	2152e <bucket_idx.isra.0>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   219b6:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   219b8:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   219ba:	1c41      	adds	r1, r0, #1
   219bc:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   219be:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   219c2:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   219c4:	428b      	cmp	r3, r1
   219c6:	db28      	blt.n	21a1a <sys_heap_init+0x9a>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   219c8:	462a      	mov	r2, r5
   219ca:	4630      	mov	r0, r6
   219cc:	2100      	movs	r1, #0
   219ce:	f7ff fdaa 	bl	21526 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   219d2:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   219d4:	4630      	mov	r0, r6
   219d6:	2201      	movs	r2, #1
   219d8:	2100      	movs	r1, #0
   219da:	f7ff fd8c 	bl	214f6 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   219de:	463a      	mov	r2, r7
   219e0:	4629      	mov	r1, r5
   219e2:	f7ff fda0 	bl	21526 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   219e6:	462b      	mov	r3, r5
   219e8:	2200      	movs	r2, #0
   219ea:	4629      	mov	r1, r5
   219ec:	4630      	mov	r0, r6
   219ee:	f7ff fd71 	bl	214d4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   219f2:	4621      	mov	r1, r4
   219f4:	4630      	mov	r0, r6
   219f6:	f7ff fd96 	bl	21526 <set_chunk_size>
   219fa:	463b      	mov	r3, r7
   219fc:	4621      	mov	r1, r4
   219fe:	4630      	mov	r0, r6
   21a00:	2200      	movs	r2, #0
   21a02:	f7ff fd67 	bl	214d4 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   21a06:	4621      	mov	r1, r4
   21a08:	4630      	mov	r0, r6
   21a0a:	2201      	movs	r2, #1
   21a0c:	f7ff fd73 	bl	214f6 <set_chunk_used>

	free_list_add(h, chunk0_size);
   21a10:	4629      	mov	r1, r5
}
   21a12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   21a16:	f7ff be66 	b.w	216e6 <free_list_add>
		h->buckets[i].next = 0;
   21a1a:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   21a1e:	3301      	adds	r3, #1
   21a20:	e7d0      	b.n	219c4 <sys_heap_init+0x44>

00021a22 <encode_uint>:
{
   21a22:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a26:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   21a28:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   21a2a:	2b6f      	cmp	r3, #111	; 0x6f
{
   21a2c:	4680      	mov	r8, r0
   21a2e:	460f      	mov	r7, r1
   21a30:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   21a32:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   21a36:	d029      	beq.n	21a8c <encode_uint+0x6a>
   21a38:	d824      	bhi.n	21a84 <encode_uint+0x62>
		return 16;
   21a3a:	2b58      	cmp	r3, #88	; 0x58
   21a3c:	bf14      	ite	ne
   21a3e:	260a      	movne	r6, #10
   21a40:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   21a42:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   21a46:	4632      	mov	r2, r6
   21a48:	2300      	movs	r3, #0
   21a4a:	4640      	mov	r0, r8
   21a4c:	4639      	mov	r1, r7
   21a4e:	f7df f9fb 	bl	e48 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21a52:	2a09      	cmp	r2, #9
   21a54:	b2d4      	uxtb	r4, r2
   21a56:	d81e      	bhi.n	21a96 <encode_uint+0x74>
   21a58:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   21a5a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21a5c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   21a5e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21a62:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   21a66:	d301      	bcc.n	21a6c <encode_uint+0x4a>
   21a68:	45d1      	cmp	r9, sl
   21a6a:	d811      	bhi.n	21a90 <encode_uint+0x6e>
	if (conv->flag_hash) {
   21a6c:	782b      	ldrb	r3, [r5, #0]
   21a6e:	069b      	lsls	r3, r3, #26
   21a70:	d505      	bpl.n	21a7e <encode_uint+0x5c>
		if (radix == 8) {
   21a72:	2e08      	cmp	r6, #8
   21a74:	d115      	bne.n	21aa2 <encode_uint+0x80>
			conv->altform_0 = true;
   21a76:	78ab      	ldrb	r3, [r5, #2]
   21a78:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   21a7c:	70ab      	strb	r3, [r5, #2]
}
   21a7e:	4648      	mov	r0, r9
   21a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   21a84:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   21a88:	2b70      	cmp	r3, #112	; 0x70
   21a8a:	e7d7      	b.n	21a3c <encode_uint+0x1a>
	switch (specifier) {
   21a8c:	2608      	movs	r6, #8
   21a8e:	e7d8      	b.n	21a42 <encode_uint+0x20>
		value /= radix;
   21a90:	4680      	mov	r8, r0
   21a92:	460f      	mov	r7, r1
   21a94:	e7d7      	b.n	21a46 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21a96:	f1bb 0f19 	cmp.w	fp, #25
   21a9a:	bf94      	ite	ls
   21a9c:	3437      	addls	r4, #55	; 0x37
   21a9e:	3457      	addhi	r4, #87	; 0x57
   21aa0:	e7db      	b.n	21a5a <encode_uint+0x38>
		} else if (radix == 16) {
   21aa2:	2e10      	cmp	r6, #16
   21aa4:	d1eb      	bne.n	21a7e <encode_uint+0x5c>
			conv->altform_0c = true;
   21aa6:	78ab      	ldrb	r3, [r5, #2]
   21aa8:	f043 0310 	orr.w	r3, r3, #16
   21aac:	e7e6      	b.n	21a7c <encode_uint+0x5a>

00021aae <outs>:
{
   21aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ab2:	4607      	mov	r7, r0
   21ab4:	4688      	mov	r8, r1
   21ab6:	4615      	mov	r5, r2
   21ab8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   21aba:	4614      	mov	r4, r2
   21abc:	42b4      	cmp	r4, r6
   21abe:	eba4 0005 	sub.w	r0, r4, r5
   21ac2:	d302      	bcc.n	21aca <outs+0x1c>
   21ac4:	b93e      	cbnz	r6, 21ad6 <outs+0x28>
   21ac6:	7823      	ldrb	r3, [r4, #0]
   21ac8:	b12b      	cbz	r3, 21ad6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   21aca:	f814 0b01 	ldrb.w	r0, [r4], #1
   21ace:	4641      	mov	r1, r8
   21ad0:	47b8      	blx	r7
		if (rc < 0) {
   21ad2:	2800      	cmp	r0, #0
   21ad4:	daf2      	bge.n	21abc <outs+0xe>
}
   21ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021ada <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_DEPRECATED_ZEPHYR_INT_TYPES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   21ada:	4770      	bx	lr

00021adc <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   21adc:	2300      	movs	r3, #0
	list->head = NULL;
   21ade:	e9c0 3300 	strd	r3, r3, [r0]
}
   21ae2:	4770      	bx	lr

00021ae4 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   21ae4:	6803      	ldr	r3, [r0, #0]
   21ae6:	b923      	cbnz	r3, 21af2 <log_list_add_tail+0xe>
		list->head = msg;
   21ae8:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   21aea:	2300      	movs	r3, #0
	list->tail = msg;
   21aec:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   21aee:	600b      	str	r3, [r1, #0]
}
   21af0:	4770      	bx	lr
		list->tail->next = msg;
   21af2:	6843      	ldr	r3, [r0, #4]
   21af4:	6019      	str	r1, [r3, #0]
   21af6:	e7f8      	b.n	21aea <log_list_add_tail+0x6>

00021af8 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   21af8:	6800      	ldr	r0, [r0, #0]
   21afa:	4770      	bx	lr

00021afc <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   21afc:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   21afe:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   21b00:	b108      	cbz	r0, 21b06 <log_list_head_get+0xa>
		list->head = list->head->next;
   21b02:	6802      	ldr	r2, [r0, #0]
   21b04:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   21b06:	4770      	bx	lr

00021b08 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   21b08:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   21b0a:	f7e3 fb47 	bl	519c <log_msg_chunk_alloc>

	if (msg != NULL) {
   21b0e:	b118      	cbz	r0, 21b18 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   21b10:	2301      	movs	r3, #1
   21b12:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   21b14:	2300      	movs	r3, #0
   21b16:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   21b18:	bd08      	pop	{r3, pc}

00021b1a <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   21b1a:	f7e4 bfb1 	b.w	6a80 <z_timer_cycle_get_32>

00021b1e <dummy_timestamp>:
   21b1e:	2000      	movs	r0, #0
   21b20:	4770      	bx	lr

00021b22 <z_log_get_s_mask>:
{
   21b22:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b24:	4605      	mov	r5, r0
	uint32_t mask = 0;
   21b26:	2000      	movs	r0, #0
	uint32_t arg = 0;
   21b28:	4603      	mov	r3, r0
	bool arm = false;
   21b2a:	4602      	mov	r2, r0
				mask |= BIT(arg);
   21b2c:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   21b2e:	f815 4b01 	ldrb.w	r4, [r5], #1
   21b32:	b10c      	cbz	r4, 21b38 <z_log_get_s_mask+0x16>
   21b34:	428b      	cmp	r3, r1
   21b36:	d300      	bcc.n	21b3a <z_log_get_s_mask+0x18>
}
   21b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   21b3a:	2c25      	cmp	r4, #37	; 0x25
   21b3c:	d102      	bne.n	21b44 <z_log_get_s_mask+0x22>
			arm = !arm;
   21b3e:	f082 0201 	eor.w	r2, r2, #1
   21b42:	e7f4      	b.n	21b2e <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   21b44:	2a00      	cmp	r2, #0
   21b46:	d0f2      	beq.n	21b2e <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   21b48:	f044 0620 	orr.w	r6, r4, #32
   21b4c:	3e61      	subs	r6, #97	; 0x61
   21b4e:	2e19      	cmp	r6, #25
   21b50:	d8ed      	bhi.n	21b2e <z_log_get_s_mask+0xc>
			if (curr == 's') {
   21b52:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   21b54:	bf04      	itt	eq
   21b56:	fa07 f203 	lsleq.w	r2, r7, r3
   21b5a:	4310      	orreq	r0, r2
			arg++;
   21b5c:	3301      	adds	r3, #1
			arm = false;
   21b5e:	2200      	movs	r2, #0
   21b60:	e7e5      	b.n	21b2e <z_log_get_s_mask+0xc>

00021b62 <log_0>:
{
   21b62:	b538      	push	{r3, r4, r5, lr}
   21b64:	4605      	mov	r5, r0
   21b66:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   21b68:	f7ff ffce 	bl	21b08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   21b6c:	b128      	cbz	r0, 21b7a <log_0+0x18>
		msg->str = str;
   21b6e:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   21b70:	4621      	mov	r1, r4
}
   21b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   21b76:	f7e3 ba4f 	b.w	5018 <msg_finalize>
}
   21b7a:	bd38      	pop	{r3, r4, r5, pc}

00021b7c <log_1>:
{
   21b7c:	b570      	push	{r4, r5, r6, lr}
   21b7e:	4606      	mov	r6, r0
   21b80:	460d      	mov	r5, r1
   21b82:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   21b84:	f7ff ffc0 	bl	21b08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   21b88:	b158      	cbz	r0, 21ba2 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   21b8a:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   21b8c:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   21b8e:	2101      	movs	r1, #1
   21b90:	f361 1207 	bfi	r2, r1, #4, #4
   21b94:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   21b96:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   21b98:	4621      	mov	r1, r4
}
   21b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   21b9e:	f7e3 ba3b 	b.w	5018 <msg_finalize>
}
   21ba2:	bd70      	pop	{r4, r5, r6, pc}

00021ba4 <log_2>:
{
   21ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ba8:	4680      	mov	r8, r0
   21baa:	460f      	mov	r7, r1
   21bac:	4616      	mov	r6, r2
   21bae:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   21bb0:	f7ff ffaa 	bl	21b08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   21bb4:	b168      	cbz	r0, 21bd2 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   21bb6:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   21bb8:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   21bbc:	2202      	movs	r2, #2
   21bbe:	f362 1307 	bfi	r3, r2, #4, #4
   21bc2:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   21bc4:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   21bc8:	4629      	mov	r1, r5
}
   21bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   21bce:	f7e3 ba23 	b.w	5018 <msg_finalize>
}
   21bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021bd6 <log_3>:
{
   21bd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21bda:	4680      	mov	r8, r0
   21bdc:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   21be0:	460f      	mov	r7, r1
   21be2:	4616      	mov	r6, r2
   21be4:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   21be6:	f7ff ff8f 	bl	21b08 <z_log_msg_std_alloc>

	if (msg != NULL) {
   21bea:	b170      	cbz	r0, 21c0a <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   21bec:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   21bee:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   21bf2:	2203      	movs	r2, #3
   21bf4:	f362 1307 	bfi	r3, r2, #4, #4
   21bf8:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   21bfa:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   21bfe:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   21c00:	4649      	mov	r1, r9
}
   21c02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   21c06:	f7e3 ba07 	b.w	5018 <msg_finalize>
}
   21c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021c0e <log_n>:
{
   21c0e:	b510      	push	{r4, lr}
   21c10:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   21c12:	f000 f8a1 	bl	21d58 <log_msg_create_n>
		if (msg == NULL) {
   21c16:	b120      	cbz	r0, 21c22 <log_n+0x14>
		msg_finalize(msg, src_level);
   21c18:	4621      	mov	r1, r4
}
   21c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   21c1e:	f7e3 b9fb 	b.w	5018 <msg_finalize>
}
   21c22:	bd10      	pop	{r4, pc}

00021c24 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   21c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21c28:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   21c2a:	8903      	ldrh	r3, [r0, #8]
{
   21c2c:	f89d 7020 	ldrb.w	r7, [sp, #32]
   21c30:	460e      	mov	r6, r1
   21c32:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   21c34:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   21c38:	42a2      	cmp	r2, r4
   21c3a:	d803      	bhi.n	21c44 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   21c3c:	2300      	movs	r3, #0
   21c3e:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   21c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   21c44:	680b      	ldr	r3, [r1, #0]
   21c46:	4423      	add	r3, r4
   21c48:	4293      	cmp	r3, r2
		*length = available_len - offset;
   21c4a:	bf84      	itt	hi
   21c4c:	1b13      	subhi	r3, r2, r4
   21c4e:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21c50:	2a0c      	cmp	r2, #12
	req_len = *length;
   21c52:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21c56:	d92a      	bls.n	21cae <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   21c58:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   21c5a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   21c5e:	d82d      	bhi.n	21cbc <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   21c60:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   21c62:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   21c64:	454a      	cmp	r2, r9
   21c66:	bf28      	it	cs
   21c68:	464a      	movcs	r2, r9
   21c6a:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
   21c6c:	4420      	add	r0, r4
		if (put_op) {
   21c6e:	b317      	cbz	r7, 21cb6 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   21c70:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   21c72:	f001 ff82 	bl	23b7a <memcpy>
		req_len -= cpy_len;
   21c76:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   21c7a:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   21c7c:	f1b9 0f00 	cmp.w	r9, #0
   21c80:	d0de      	beq.n	21c40 <log_msg_hexdump_data_op+0x1c>
   21c82:	f1b8 0f00 	cmp.w	r8, #0
   21c86:	d0db      	beq.n	21c40 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   21c88:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   21c8c:	454d      	cmp	r5, r9
   21c8e:	bf28      	it	cs
   21c90:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   21c92:	1d20      	adds	r0, r4, #4
   21c94:	4440      	add	r0, r8
   21c96:	462a      	mov	r2, r5
		if (put_op) {
   21c98:	b1bf      	cbz	r7, 21cca <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   21c9a:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   21c9c:	f001 ff6d 	bl	23b7a <memcpy>
		req_len -= cpy_len;
   21ca0:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   21ca4:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   21ca8:	442e      	add	r6, r5
		offset = 0;
   21caa:	2400      	movs	r4, #0
   21cac:	e7e6      	b.n	21c7c <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   21cae:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   21cb0:	f04f 0800 	mov.w	r8, #0
   21cb4:	e7d6      	b.n	21c64 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   21cb6:	4601      	mov	r1, r0
   21cb8:	4630      	mov	r0, r6
   21cba:	e7da      	b.n	21c72 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   21cbc:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   21cbe:	2c1b      	cmp	r4, #27
   21cc0:	d9dc      	bls.n	21c7c <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   21cc2:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   21cc6:	3c1c      	subs	r4, #28
   21cc8:	e7f9      	b.n	21cbe <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   21cca:	4601      	mov	r1, r0
   21ccc:	4630      	mov	r0, r6
   21cce:	e7e5      	b.n	21c9c <log_msg_hexdump_data_op+0x78>

00021cd0 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   21cd0:	3004      	adds	r0, #4
   21cd2:	f3bf 8f5b 	dmb	ish
   21cd6:	e850 3f00 	ldrex	r3, [r0]
   21cda:	3301      	adds	r3, #1
   21cdc:	e840 3200 	strex	r2, r3, [r0]
   21ce0:	2a00      	cmp	r2, #0
   21ce2:	d1f8      	bne.n	21cd6 <log_msg_get+0x6>
   21ce4:	f3bf 8f5b 	dmb	ish
}
   21ce8:	4770      	bx	lr

00021cea <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   21cea:	7a40      	ldrb	r0, [r0, #9]
}
   21cec:	0900      	lsrs	r0, r0, #4
   21cee:	4770      	bx	lr

00021cf0 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   21cf0:	7a43      	ldrb	r3, [r0, #9]
   21cf2:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   21cf6:	ea4f 1213 	mov.w	r2, r3, lsr #4
   21cfa:	d216      	bcs.n	21d2a <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   21cfc:	2a03      	cmp	r2, #3
   21cfe:	d803      	bhi.n	21d08 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   21d00:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   21d04:	6940      	ldr	r0, [r0, #20]
   21d06:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   21d08:	2901      	cmp	r1, #1
   21d0a:	d803      	bhi.n	21d14 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   21d0c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   21d10:	6980      	ldr	r0, [r0, #24]
   21d12:	4770      	bx	lr
	cont = msg->payload.ext.next;
   21d14:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   21d16:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   21d18:	2906      	cmp	r1, #6
   21d1a:	d803      	bhi.n	21d24 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   21d1c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   21d20:	6848      	ldr	r0, [r1, #4]
   21d22:	4770      	bx	lr
		cont = cont->next;
   21d24:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   21d26:	3907      	subs	r1, #7
		cont = cont->next;
   21d28:	e7f6      	b.n	21d18 <log_msg_arg_get+0x28>
		return 0;
   21d2a:	2000      	movs	r0, #0
}
   21d2c:	4770      	bx	lr

00021d2e <log_msg_put>:
{
   21d2e:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   21d30:	1d02      	adds	r2, r0, #4
   21d32:	f3bf 8f5b 	dmb	ish
   21d36:	e852 1f00 	ldrex	r1, [r2]
   21d3a:	3901      	subs	r1, #1
   21d3c:	e842 1c00 	strex	ip, r1, [r2]
   21d40:	f1bc 0f00 	cmp.w	ip, #0
   21d44:	d1f7      	bne.n	21d36 <log_msg_put+0x8>
   21d46:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   21d4a:	685b      	ldr	r3, [r3, #4]
   21d4c:	b90b      	cbnz	r3, 21d52 <log_msg_put+0x24>
		msg_free(msg);
   21d4e:	f7e3 ba39 	b.w	51c4 <msg_free>
}
   21d52:	4770      	bx	lr

00021d54 <log_msg_str_get>:
}
   21d54:	6900      	ldr	r0, [r0, #16]
   21d56:	4770      	bx	lr

00021d58 <log_msg_create_n>:
{
   21d58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d5c:	4680      	mov	r8, r0
   21d5e:	460f      	mov	r7, r1
   21d60:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   21d62:	f7e3 fa1b 	bl	519c <log_msg_chunk_alloc>
	if (msg != NULL) {
   21d66:	4604      	mov	r4, r0
   21d68:	b358      	cbz	r0, 21dc2 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   21d6a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   21d6c:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   21d70:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   21d72:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   21d74:	f8a0 a008 	strh.w	sl, [r0, #8]
   21d78:	d90c      	bls.n	21d94 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   21d7a:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   21d7c:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   21d80:	f043 0302 	orr.w	r3, r3, #2
   21d84:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   21d86:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   21d8a:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   21d8e:	f1b9 0f00 	cmp.w	r9, #0
   21d92:	dc0e      	bgt.n	21db2 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
   21d94:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   21d96:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   21d9a:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   21d9e:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   21da0:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   21da2:	d819      	bhi.n	21dd8 <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   21da4:	00aa      	lsls	r2, r5, #2
   21da6:	4639      	mov	r1, r7
   21da8:	f104 0014 	add.w	r0, r4, #20
   21dac:	f001 fee5 	bl	23b7a <memcpy>
	while (nargs != 0U) {
   21db0:	e007      	b.n	21dc2 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   21db2:	f7e3 f9f3 	bl	519c <log_msg_chunk_alloc>
		if (cont == NULL) {
   21db6:	4606      	mov	r6, r0
   21db8:	b930      	cbnz	r0, 21dc8 <log_msg_create_n+0x70>
			msg_free(msg);
   21dba:	4620      	mov	r0, r4
   21dbc:	f7e3 fa02 	bl	51c4 <msg_free>
			return NULL;
   21dc0:	4634      	mov	r4, r6
}
   21dc2:	4620      	mov	r0, r4
   21dc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   21dc8:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   21dcc:	f1a9 0907 	sub.w	r9, r9, #7
   21dd0:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   21dd4:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   21dd6:	e7da      	b.n	21d8e <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
   21dd8:	4639      	mov	r1, r7
   21dda:	2208      	movs	r2, #8
   21ddc:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   21de0:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   21de4:	f001 fec9 	bl	23b7a <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   21de8:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   21dea:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   21dec:	2d07      	cmp	r5, #7
   21dee:	462e      	mov	r6, r5
   21df0:	bf28      	it	cs
   21df2:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   21df4:	ea4f 0986 	mov.w	r9, r6, lsl #2
   21df8:	4639      	mov	r1, r7
   21dfa:	f108 0004 	add.w	r0, r8, #4
   21dfe:	464a      	mov	r2, r9
   21e00:	f001 febb 	bl	23b7a <memcpy>
	while (nargs != 0U) {
   21e04:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   21e06:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   21e0a:	444f      	add	r7, r9
	while (nargs != 0U) {
   21e0c:	d1ee      	bne.n	21dec <log_msg_create_n+0x94>
   21e0e:	e7d8      	b.n	21dc2 <log_msg_create_n+0x6a>

00021e10 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   21e10:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   21e12:	2400      	movs	r4, #0
   21e14:	9400      	str	r4, [sp, #0]
   21e16:	f7ff ff05 	bl	21c24 <log_msg_hexdump_data_op>
}
   21e1a:	b002      	add	sp, #8
   21e1c:	bd10      	pop	{r4, pc}

00021e1e <buffer_write>:
{
   21e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e20:	4606      	mov	r6, r0
   21e22:	460d      	mov	r5, r1
   21e24:	4614      	mov	r4, r2
   21e26:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   21e28:	4621      	mov	r1, r4
   21e2a:	4628      	mov	r0, r5
   21e2c:	463a      	mov	r2, r7
   21e2e:	47b0      	blx	r6
	} while (len != 0);
   21e30:	1a24      	subs	r4, r4, r0
		buf += processed;
   21e32:	4405      	add	r5, r0
	} while (len != 0);
   21e34:	d1f8      	bne.n	21e28 <buffer_write+0xa>
}
   21e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021e38 <std_print>:
{
   21e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21e3c:	b08e      	sub	sp, #56	; 0x38
   21e3e:	af0e      	add	r7, sp, #56	; 0x38
   21e40:	4680      	mov	r8, r0
   21e42:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   21e44:	f7ff ff86 	bl	21d54 <log_msg_str_get>
   21e48:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   21e4a:	4640      	mov	r0, r8
   21e4c:	f7ff ff4d 	bl	21cea <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   21e50:	0083      	lsls	r3, r0, #2
   21e52:	3307      	adds	r3, #7
   21e54:	f023 0307 	bic.w	r3, r3, #7
   21e58:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   21e5c:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   21e5e:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   21e60:	f04f 0900 	mov.w	r9, #0
   21e64:	45d1      	cmp	r9, sl
   21e66:	d116      	bne.n	21e96 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   21e68:	4640      	mov	r0, r8
   21e6a:	f7ff ff3e 	bl	21cea <log_msg_nargs_get>
   21e6e:	280f      	cmp	r0, #15
   21e70:	d81e      	bhi.n	21eb0 <std_print+0x78>
   21e72:	e8df f010 	tbh	[pc, r0, lsl #1]
   21e76:	0019      	.short	0x0019
   21e78:	00260020 	.word	0x00260020
   21e7c:	0036002d 	.word	0x0036002d
   21e80:	004e0041 	.word	0x004e0041
   21e84:	006e005d 	.word	0x006e005d
   21e88:	00960081 	.word	0x00960081
   21e8c:	00c600ad 	.word	0x00c600ad
   21e90:	00fe00e1 	.word	0x00fe00e1
   21e94:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   21e96:	4649      	mov	r1, r9
   21e98:	4640      	mov	r0, r8
   21e9a:	f7ff ff29 	bl	21cf0 <log_msg_arg_get>
   21e9e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   21ea2:	f109 0901 	add.w	r9, r9, #1
   21ea6:	e7dd      	b.n	21e64 <std_print+0x2c>
		print_formatted(log_output, str);
   21ea8:	4631      	mov	r1, r6
   21eaa:	4628      	mov	r0, r5
   21eac:	f7e3 f9c8 	bl	5240 <print_formatted>
}
   21eb0:	46bd      	mov	sp, r7
   21eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   21eb6:	6822      	ldr	r2, [r4, #0]
   21eb8:	4631      	mov	r1, r6
   21eba:	4628      	mov	r0, r5
   21ebc:	f7e3 f9c0 	bl	5240 <print_formatted>
		break;
   21ec0:	e7f6      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   21ec2:	e9d4 2300 	ldrd	r2, r3, [r4]
   21ec6:	4631      	mov	r1, r6
   21ec8:	4628      	mov	r0, r5
   21eca:	f7e3 f9b9 	bl	5240 <print_formatted>
		break;
   21ece:	e7ef      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   21ed0:	68a3      	ldr	r3, [r4, #8]
   21ed2:	9300      	str	r3, [sp, #0]
   21ed4:	e9d4 2300 	ldrd	r2, r3, [r4]
   21ed8:	4631      	mov	r1, r6
   21eda:	4628      	mov	r0, r5
   21edc:	f7e3 f9b0 	bl	5240 <print_formatted>
		break;
   21ee0:	e7e6      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21ee2:	68e3      	ldr	r3, [r4, #12]
   21ee4:	9301      	str	r3, [sp, #4]
   21ee6:	68a3      	ldr	r3, [r4, #8]
   21ee8:	9300      	str	r3, [sp, #0]
   21eea:	e9d4 2300 	ldrd	r2, r3, [r4]
   21eee:	4631      	mov	r1, r6
   21ef0:	4628      	mov	r0, r5
   21ef2:	f7e3 f9a5 	bl	5240 <print_formatted>
		break;
   21ef6:	e7db      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21ef8:	6923      	ldr	r3, [r4, #16]
   21efa:	9302      	str	r3, [sp, #8]
   21efc:	68e3      	ldr	r3, [r4, #12]
   21efe:	9301      	str	r3, [sp, #4]
   21f00:	68a3      	ldr	r3, [r4, #8]
   21f02:	9300      	str	r3, [sp, #0]
   21f04:	e9d4 2300 	ldrd	r2, r3, [r4]
   21f08:	4631      	mov	r1, r6
   21f0a:	4628      	mov	r0, r5
   21f0c:	f7e3 f998 	bl	5240 <print_formatted>
		break;
   21f10:	e7ce      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21f12:	6963      	ldr	r3, [r4, #20]
   21f14:	9303      	str	r3, [sp, #12]
   21f16:	6923      	ldr	r3, [r4, #16]
   21f18:	9302      	str	r3, [sp, #8]
   21f1a:	68e3      	ldr	r3, [r4, #12]
   21f1c:	9301      	str	r3, [sp, #4]
   21f1e:	68a3      	ldr	r3, [r4, #8]
   21f20:	9300      	str	r3, [sp, #0]
   21f22:	e9d4 2300 	ldrd	r2, r3, [r4]
   21f26:	4631      	mov	r1, r6
   21f28:	4628      	mov	r0, r5
   21f2a:	f7e3 f989 	bl	5240 <print_formatted>
		break;
   21f2e:	e7bf      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21f30:	69a3      	ldr	r3, [r4, #24]
   21f32:	9304      	str	r3, [sp, #16]
   21f34:	6963      	ldr	r3, [r4, #20]
   21f36:	9303      	str	r3, [sp, #12]
   21f38:	6923      	ldr	r3, [r4, #16]
   21f3a:	9302      	str	r3, [sp, #8]
   21f3c:	68e3      	ldr	r3, [r4, #12]
   21f3e:	9301      	str	r3, [sp, #4]
   21f40:	68a3      	ldr	r3, [r4, #8]
   21f42:	9300      	str	r3, [sp, #0]
   21f44:	e9d4 2300 	ldrd	r2, r3, [r4]
   21f48:	4631      	mov	r1, r6
   21f4a:	4628      	mov	r0, r5
   21f4c:	f7e3 f978 	bl	5240 <print_formatted>
		break;
   21f50:	e7ae      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21f52:	69e3      	ldr	r3, [r4, #28]
   21f54:	9305      	str	r3, [sp, #20]
   21f56:	69a3      	ldr	r3, [r4, #24]
   21f58:	9304      	str	r3, [sp, #16]
   21f5a:	6963      	ldr	r3, [r4, #20]
   21f5c:	9303      	str	r3, [sp, #12]
   21f5e:	6923      	ldr	r3, [r4, #16]
   21f60:	9302      	str	r3, [sp, #8]
   21f62:	68e3      	ldr	r3, [r4, #12]
   21f64:	9301      	str	r3, [sp, #4]
   21f66:	68a3      	ldr	r3, [r4, #8]
   21f68:	9300      	str	r3, [sp, #0]
   21f6a:	e9d4 2300 	ldrd	r2, r3, [r4]
   21f6e:	4631      	mov	r1, r6
   21f70:	4628      	mov	r0, r5
   21f72:	f7e3 f965 	bl	5240 <print_formatted>
		break;
   21f76:	e79b      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21f78:	6a23      	ldr	r3, [r4, #32]
   21f7a:	9306      	str	r3, [sp, #24]
   21f7c:	69e3      	ldr	r3, [r4, #28]
   21f7e:	9305      	str	r3, [sp, #20]
   21f80:	69a3      	ldr	r3, [r4, #24]
   21f82:	9304      	str	r3, [sp, #16]
   21f84:	6963      	ldr	r3, [r4, #20]
   21f86:	9303      	str	r3, [sp, #12]
   21f88:	6923      	ldr	r3, [r4, #16]
   21f8a:	9302      	str	r3, [sp, #8]
   21f8c:	68e3      	ldr	r3, [r4, #12]
   21f8e:	9301      	str	r3, [sp, #4]
   21f90:	68a3      	ldr	r3, [r4, #8]
   21f92:	9300      	str	r3, [sp, #0]
   21f94:	e9d4 2300 	ldrd	r2, r3, [r4]
   21f98:	4631      	mov	r1, r6
   21f9a:	4628      	mov	r0, r5
   21f9c:	f7e3 f950 	bl	5240 <print_formatted>
		break;
   21fa0:	e786      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21fa4:	9307      	str	r3, [sp, #28]
   21fa6:	6a23      	ldr	r3, [r4, #32]
   21fa8:	9306      	str	r3, [sp, #24]
   21faa:	69e3      	ldr	r3, [r4, #28]
   21fac:	9305      	str	r3, [sp, #20]
   21fae:	69a3      	ldr	r3, [r4, #24]
   21fb0:	9304      	str	r3, [sp, #16]
   21fb2:	6963      	ldr	r3, [r4, #20]
   21fb4:	9303      	str	r3, [sp, #12]
   21fb6:	6923      	ldr	r3, [r4, #16]
   21fb8:	9302      	str	r3, [sp, #8]
   21fba:	68e3      	ldr	r3, [r4, #12]
   21fbc:	9301      	str	r3, [sp, #4]
   21fbe:	68a3      	ldr	r3, [r4, #8]
   21fc0:	9300      	str	r3, [sp, #0]
   21fc2:	e9d4 2300 	ldrd	r2, r3, [r4]
   21fc6:	4631      	mov	r1, r6
   21fc8:	4628      	mov	r0, r5
   21fca:	f7e3 f939 	bl	5240 <print_formatted>
		break;
   21fce:	e76f      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21fd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21fd2:	9308      	str	r3, [sp, #32]
   21fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21fd6:	9307      	str	r3, [sp, #28]
   21fd8:	6a23      	ldr	r3, [r4, #32]
   21fda:	9306      	str	r3, [sp, #24]
   21fdc:	69e3      	ldr	r3, [r4, #28]
   21fde:	9305      	str	r3, [sp, #20]
   21fe0:	69a3      	ldr	r3, [r4, #24]
   21fe2:	9304      	str	r3, [sp, #16]
   21fe4:	6963      	ldr	r3, [r4, #20]
   21fe6:	9303      	str	r3, [sp, #12]
   21fe8:	6923      	ldr	r3, [r4, #16]
   21fea:	9302      	str	r3, [sp, #8]
   21fec:	68e3      	ldr	r3, [r4, #12]
   21fee:	9301      	str	r3, [sp, #4]
   21ff0:	68a3      	ldr	r3, [r4, #8]
   21ff2:	9300      	str	r3, [sp, #0]
   21ff4:	e9d4 2300 	ldrd	r2, r3, [r4]
   21ff8:	4631      	mov	r1, r6
   21ffa:	4628      	mov	r0, r5
   21ffc:	f7e3 f920 	bl	5240 <print_formatted>
		break;
   22000:	e756      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22002:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22004:	9309      	str	r3, [sp, #36]	; 0x24
   22006:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22008:	9308      	str	r3, [sp, #32]
   2200a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2200c:	9307      	str	r3, [sp, #28]
   2200e:	6a23      	ldr	r3, [r4, #32]
   22010:	9306      	str	r3, [sp, #24]
   22012:	69e3      	ldr	r3, [r4, #28]
   22014:	9305      	str	r3, [sp, #20]
   22016:	69a3      	ldr	r3, [r4, #24]
   22018:	9304      	str	r3, [sp, #16]
   2201a:	6963      	ldr	r3, [r4, #20]
   2201c:	9303      	str	r3, [sp, #12]
   2201e:	6923      	ldr	r3, [r4, #16]
   22020:	9302      	str	r3, [sp, #8]
   22022:	68e3      	ldr	r3, [r4, #12]
   22024:	9301      	str	r3, [sp, #4]
   22026:	68a3      	ldr	r3, [r4, #8]
   22028:	9300      	str	r3, [sp, #0]
   2202a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2202e:	4631      	mov	r1, r6
   22030:	4628      	mov	r0, r5
   22032:	f7e3 f905 	bl	5240 <print_formatted>
		break;
   22036:	e73b      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22038:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2203a:	930a      	str	r3, [sp, #40]	; 0x28
   2203c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2203e:	9309      	str	r3, [sp, #36]	; 0x24
   22040:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22042:	9308      	str	r3, [sp, #32]
   22044:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22046:	9307      	str	r3, [sp, #28]
   22048:	6a23      	ldr	r3, [r4, #32]
   2204a:	9306      	str	r3, [sp, #24]
   2204c:	69e3      	ldr	r3, [r4, #28]
   2204e:	9305      	str	r3, [sp, #20]
   22050:	69a3      	ldr	r3, [r4, #24]
   22052:	9304      	str	r3, [sp, #16]
   22054:	6963      	ldr	r3, [r4, #20]
   22056:	9303      	str	r3, [sp, #12]
   22058:	6923      	ldr	r3, [r4, #16]
   2205a:	9302      	str	r3, [sp, #8]
   2205c:	68e3      	ldr	r3, [r4, #12]
   2205e:	9301      	str	r3, [sp, #4]
   22060:	68a3      	ldr	r3, [r4, #8]
   22062:	9300      	str	r3, [sp, #0]
   22064:	e9d4 2300 	ldrd	r2, r3, [r4]
   22068:	4631      	mov	r1, r6
   2206a:	4628      	mov	r0, r5
   2206c:	f7e3 f8e8 	bl	5240 <print_formatted>
		break;
   22070:	e71e      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22072:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22074:	930b      	str	r3, [sp, #44]	; 0x2c
   22076:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22078:	930a      	str	r3, [sp, #40]	; 0x28
   2207a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2207c:	9309      	str	r3, [sp, #36]	; 0x24
   2207e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22080:	9308      	str	r3, [sp, #32]
   22082:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22084:	9307      	str	r3, [sp, #28]
   22086:	6a23      	ldr	r3, [r4, #32]
   22088:	9306      	str	r3, [sp, #24]
   2208a:	69e3      	ldr	r3, [r4, #28]
   2208c:	9305      	str	r3, [sp, #20]
   2208e:	69a3      	ldr	r3, [r4, #24]
   22090:	9304      	str	r3, [sp, #16]
   22092:	6963      	ldr	r3, [r4, #20]
   22094:	9303      	str	r3, [sp, #12]
   22096:	6923      	ldr	r3, [r4, #16]
   22098:	9302      	str	r3, [sp, #8]
   2209a:	68e3      	ldr	r3, [r4, #12]
   2209c:	9301      	str	r3, [sp, #4]
   2209e:	68a3      	ldr	r3, [r4, #8]
   220a0:	9300      	str	r3, [sp, #0]
   220a2:	e9d4 2300 	ldrd	r2, r3, [r4]
   220a6:	4631      	mov	r1, r6
   220a8:	4628      	mov	r0, r5
   220aa:	f7e3 f8c9 	bl	5240 <print_formatted>
		break;
   220ae:	e6ff      	b.n	21eb0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   220b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   220b2:	930c      	str	r3, [sp, #48]	; 0x30
   220b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   220b6:	930b      	str	r3, [sp, #44]	; 0x2c
   220b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   220ba:	930a      	str	r3, [sp, #40]	; 0x28
   220bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   220be:	9309      	str	r3, [sp, #36]	; 0x24
   220c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   220c2:	9308      	str	r3, [sp, #32]
   220c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   220c6:	9307      	str	r3, [sp, #28]
   220c8:	6a23      	ldr	r3, [r4, #32]
   220ca:	9306      	str	r3, [sp, #24]
   220cc:	69e3      	ldr	r3, [r4, #28]
   220ce:	9305      	str	r3, [sp, #20]
   220d0:	69a3      	ldr	r3, [r4, #24]
   220d2:	9304      	str	r3, [sp, #16]
   220d4:	6963      	ldr	r3, [r4, #20]
   220d6:	9303      	str	r3, [sp, #12]
   220d8:	6923      	ldr	r3, [r4, #16]
   220da:	9302      	str	r3, [sp, #8]
   220dc:	68e3      	ldr	r3, [r4, #12]
   220de:	9301      	str	r3, [sp, #4]
   220e0:	68a3      	ldr	r3, [r4, #8]
   220e2:	9300      	str	r3, [sp, #0]
   220e4:	e9d4 2300 	ldrd	r2, r3, [r4]
   220e8:	4631      	mov	r1, r6
   220ea:	4628      	mov	r0, r5
   220ec:	f7e3 f8a8 	bl	5240 <print_formatted>
}
   220f0:	e6de      	b.n	21eb0 <std_print+0x78>

000220f2 <log_output_flush>:
		     log_output->control_block->offset,
   220f2:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   220f4:	6881      	ldr	r1, [r0, #8]
{
   220f6:	b510      	push	{r4, lr}
   220f8:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   220fa:	e9d2 2300 	ldrd	r2, r3, [r2]
   220fe:	6800      	ldr	r0, [r0, #0]
   22100:	f7ff fe8d 	bl	21e1e <buffer_write>
	log_output->control_block->offset = 0;
   22104:	6863      	ldr	r3, [r4, #4]
   22106:	2200      	movs	r2, #0
   22108:	601a      	str	r2, [r3, #0]
}
   2210a:	bd10      	pop	{r4, pc}

0002210c <out_func>:
{
   2210c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   2210e:	684b      	ldr	r3, [r1, #4]
   22110:	681a      	ldr	r2, [r3, #0]
   22112:	68cb      	ldr	r3, [r1, #12]
   22114:	429a      	cmp	r2, r3
{
   22116:	4605      	mov	r5, r0
   22118:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2211a:	d102      	bne.n	22122 <out_func+0x16>
		log_output_flush(out_ctx);
   2211c:	4608      	mov	r0, r1
   2211e:	f7ff ffe8 	bl	220f2 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22122:	6863      	ldr	r3, [r4, #4]
   22124:	f3bf 8f5b 	dmb	ish
   22128:	e853 2f00 	ldrex	r2, [r3]
   2212c:	1c51      	adds	r1, r2, #1
   2212e:	e843 1000 	strex	r0, r1, [r3]
   22132:	2800      	cmp	r0, #0
   22134:	d1f8      	bne.n	22128 <out_func+0x1c>
   22136:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2213a:	68a3      	ldr	r3, [r4, #8]
   2213c:	549d      	strb	r5, [r3, r2]
}
   2213e:	2000      	movs	r0, #0
   22140:	bd38      	pop	{r3, r4, r5, pc}

00022142 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   22142:	6883      	ldr	r3, [r0, #8]
   22144:	68db      	ldr	r3, [r3, #12]
   22146:	4718      	bx	r3

00022148 <nvs_flash_rd>:
{
   22148:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2214a:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2214c:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   2214e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22150:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   22152:	fa16 f181 	uxtah	r1, r6, r1
   22156:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   2215a:	6884      	ldr	r4, [r0, #8]
   2215c:	6824      	ldr	r4, [r4, #0]
   2215e:	46a4      	mov	ip, r4
}
   22160:	bc70      	pop	{r4, r5, r6}
   22162:	4760      	bx	ip

00022164 <nvs_flash_block_cmp>:
{
   22164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22168:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2216a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2216c:	681d      	ldr	r5, [r3, #0]
   2216e:	426d      	negs	r5, r5
{
   22170:	b089      	sub	sp, #36	; 0x24
   22172:	4681      	mov	r9, r0
   22174:	460e      	mov	r6, r1
   22176:	4617      	mov	r7, r2
	block_size =
   22178:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2217c:	b91c      	cbnz	r4, 22186 <nvs_flash_block_cmp+0x22>
	return 0;
   2217e:	4620      	mov	r0, r4
}
   22180:	b009      	add	sp, #36	; 0x24
   22182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   22186:	42ac      	cmp	r4, r5
   22188:	46a0      	mov	r8, r4
   2218a:	bf28      	it	cs
   2218c:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2218e:	4643      	mov	r3, r8
   22190:	466a      	mov	r2, sp
   22192:	4631      	mov	r1, r6
   22194:	4648      	mov	r0, r9
   22196:	f7ff ffd7 	bl	22148 <nvs_flash_rd>
		if (rc) {
   2219a:	2800      	cmp	r0, #0
   2219c:	d1f0      	bne.n	22180 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2219e:	4642      	mov	r2, r8
   221a0:	4669      	mov	r1, sp
   221a2:	4638      	mov	r0, r7
   221a4:	f001 fcd8 	bl	23b58 <memcmp>
		if (rc) {
   221a8:	b920      	cbnz	r0, 221b4 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   221aa:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   221ae:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   221b0:	4447      	add	r7, r8
   221b2:	e7e3      	b.n	2217c <nvs_flash_block_cmp+0x18>
			return 1;
   221b4:	2001      	movs	r0, #1
   221b6:	e7e3      	b.n	22180 <nvs_flash_block_cmp+0x1c>

000221b8 <nvs_flash_cmp_const>:
{
   221b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221bc:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   221be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   221c0:	681d      	ldr	r5, [r3, #0]
   221c2:	426d      	negs	r5, r5
{
   221c4:	b088      	sub	sp, #32
	block_size =
   221c6:	f005 0520 	and.w	r5, r5, #32
{
   221ca:	4607      	mov	r7, r0
   221cc:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   221ce:	4668      	mov	r0, sp
{
   221d0:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   221d2:	462a      	mov	r2, r5
   221d4:	f001 fcfc 	bl	23bd0 <memset>
	while (len) {
   221d8:	b91c      	cbnz	r4, 221e2 <nvs_flash_cmp_const+0x2a>
	return 0;
   221da:	4620      	mov	r0, r4
}
   221dc:	b008      	add	sp, #32
   221de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   221e2:	42ac      	cmp	r4, r5
   221e4:	46a0      	mov	r8, r4
   221e6:	bf28      	it	cs
   221e8:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   221ea:	4643      	mov	r3, r8
   221ec:	466a      	mov	r2, sp
   221ee:	4631      	mov	r1, r6
   221f0:	4638      	mov	r0, r7
   221f2:	f7ff ffb7 	bl	22164 <nvs_flash_block_cmp>
		if (rc) {
   221f6:	2800      	cmp	r0, #0
   221f8:	d1f0      	bne.n	221dc <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   221fa:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   221fe:	4446      	add	r6, r8
   22200:	e7ea      	b.n	221d8 <nvs_flash_cmp_const+0x20>

00022202 <nvs_flash_erase_sector>:
{
   22202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   22206:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   22208:	8983      	ldrh	r3, [r0, #12]
   2220a:	7912      	ldrb	r2, [r2, #4]
	addr &= ADDR_SECT_MASK;
   2220c:	0c0e      	lsrs	r6, r1, #16
   2220e:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   22210:	4631      	mov	r1, r6
{
   22212:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   22214:	f7ff ffd0 	bl	221b8 <nvs_flash_cmp_const>
	if (rc <= 0) {
   22218:	1e04      	subs	r4, r0, #0
   2221a:	dd16      	ble.n	2224a <nvs_flash_erase_sector+0x48>
	rc = flash_write_protection_set(fs->flash_device, false);
   2221c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   2221e:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22220:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   22224:	2100      	movs	r1, #0
   22226:	f7ff ff8c 	bl	22142 <flash_write_protection_set>
	if (rc) {
   2222a:	4604      	mov	r4, r0
   2222c:	b968      	cbnz	r0, 2224a <nvs_flash_erase_sector+0x48>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2222e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   22230:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   22232:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22234:	0c31      	lsrs	r1, r6, #16
   22236:	689b      	ldr	r3, [r3, #8]
   22238:	fb08 7101 	mla	r1, r8, r1, r7
   2223c:	4798      	blx	r3
	if (rc) {
   2223e:	4604      	mov	r4, r0
   22240:	b918      	cbnz	r0, 2224a <nvs_flash_erase_sector+0x48>
	(void) flash_write_protection_set(fs->flash_device, true);
   22242:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   22244:	2101      	movs	r1, #1
   22246:	f7ff ff7c 	bl	22142 <flash_write_protection_set>
}
   2224a:	4620      	mov	r0, r4
   2224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022250 <nvs_ate_crc8_check>:
{
   22250:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   22252:	4601      	mov	r1, r0
{
   22254:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   22256:	2207      	movs	r2, #7
   22258:	20ff      	movs	r0, #255	; 0xff
   2225a:	f7e1 fff5 	bl	4248 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2225e:	79e3      	ldrb	r3, [r4, #7]
}
   22260:	1a18      	subs	r0, r3, r0
   22262:	bf18      	it	ne
   22264:	2001      	movne	r0, #1
   22266:	bd10      	pop	{r4, pc}

00022268 <nvs_ate_crc8_update>:
{
   22268:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2226a:	4601      	mov	r1, r0
{
   2226c:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2226e:	2207      	movs	r2, #7
   22270:	20ff      	movs	r0, #255	; 0xff
   22272:	f7e1 ffe9 	bl	4248 <crc8_ccitt>
	entry->crc8 = crc8;
   22276:	71e0      	strb	r0, [r4, #7]
}
   22278:	bd10      	pop	{r4, pc}

0002227a <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2227a:	680b      	ldr	r3, [r1, #0]
   2227c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   22280:	0c1a      	lsrs	r2, r3, #16
   22282:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   22286:	bf08      	it	eq
   22288:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2228c:	600b      	str	r3, [r1, #0]
}
   2228e:	4770      	bx	lr

00022290 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   22290:	7803      	ldrb	r3, [r0, #0]
   22292:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22294:	bf81      	itttt	hi
   22296:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2229a:	18c9      	addhi	r1, r1, r3
   2229c:	425b      	neghi	r3, r3
   2229e:	4019      	andhi	r1, r3
}
   222a0:	4608      	mov	r0, r1
   222a2:	4770      	bx	lr

000222a4 <nvs_prev_ate>:
{
   222a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   222a6:	4604      	mov	r4, r0
   222a8:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   222aa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   222ac:	2108      	movs	r1, #8
   222ae:	f7ff ffef 	bl	22290 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   222b2:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   222b4:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   222b6:	2308      	movs	r3, #8
   222b8:	4620      	mov	r0, r4
   222ba:	f7ff ff45 	bl	22148 <nvs_flash_rd>
	if (rc) {
   222be:	2800      	cmp	r0, #0
   222c0:	d13e      	bne.n	22340 <nvs_prev_ate+0x9c>
	*addr += ate_size;
   222c2:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   222c4:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   222c6:	4433      	add	r3, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   222c8:	b299      	uxth	r1, r3
   222ca:	1b92      	subs	r2, r2, r6
   222cc:	4291      	cmp	r1, r2
	*addr += ate_size;
   222ce:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   222d0:	d136      	bne.n	22340 <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   222d2:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   222d4:	bf03      	ittte	eq
   222d6:	89e1      	ldrheq	r1, [r4, #14]
   222d8:	f101 31ff 	addeq.w	r1, r1, #4294967295
   222dc:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   222e0:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   222e4:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   222e6:	2308      	movs	r3, #8
   222e8:	466a      	mov	r2, sp
   222ea:	4620      	mov	r0, r4
   222ec:	f7ff ff2c 	bl	22148 <nvs_flash_rd>
	if (rc) {
   222f0:	bb30      	cbnz	r0, 22340 <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   222f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   222f4:	466a      	mov	r2, sp
   222f6:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   222f8:	4603      	mov	r3, r0
		if (data8[i] != value) {
   222fa:	f812 7b01 	ldrb.w	r7, [r2], #1
   222fe:	42b9      	cmp	r1, r7
   22300:	d115      	bne.n	2232e <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   22302:	3301      	adds	r3, #1
   22304:	2b08      	cmp	r3, #8
   22306:	d1f8      	bne.n	222fa <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   22308:	6863      	ldr	r3, [r4, #4]
   2230a:	e00e      	b.n	2232a <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   2230c:	89a3      	ldrh	r3, [r4, #12]
   2230e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   22312:	1b9b      	subs	r3, r3, r6
   22314:	429a      	cmp	r2, r3
   22316:	d20f      	bcs.n	22338 <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   22318:	fbb2 f3f6 	udiv	r3, r2, r6
   2231c:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   22320:	b956      	cbnz	r6, 22338 <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   22322:	682b      	ldr	r3, [r5, #0]
   22324:	0c1b      	lsrs	r3, r3, #16
   22326:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   22328:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2232a:	602b      	str	r3, [r5, #0]
		return 0;
   2232c:	e008      	b.n	22340 <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   2232e:	4668      	mov	r0, sp
   22330:	f7ff ff8e 	bl	22250 <nvs_ate_crc8_check>
   22334:	2800      	cmp	r0, #0
   22336:	d0e9      	beq.n	2230c <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   22338:	4629      	mov	r1, r5
   2233a:	4620      	mov	r0, r4
   2233c:	f7e3 fa7c 	bl	5838 <nvs_recover_last_ate>
}
   22340:	b003      	add	sp, #12
   22342:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022344 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   22344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset = fs->offset;
   22348:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2234c:	f8b0 900c 	ldrh.w	r9, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   22350:	b088      	sub	sp, #32
   22352:	4605      	mov	r5, r0
   22354:	460c      	mov	r4, r1
	rc = flash_write_protection_set(fs->flash_device, false);
   22356:	6a80      	ldr	r0, [r0, #40]	; 0x28
   22358:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   2235a:	4690      	mov	r8, r2
   2235c:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   2235e:	f7ff fef0 	bl	22142 <flash_write_protection_set>
	if (rc) {
   22362:	2800      	cmp	r0, #0
   22364:	d134      	bne.n	223d0 <nvs_flash_al_wrt.part.0+0x8c>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   22366:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22368:	681b      	ldr	r3, [r3, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2236a:	0c27      	lsrs	r7, r4, #16
	offset += addr & ADDR_OFFS_MASK;
   2236c:	fa1a f484 	uxtah	r4, sl, r4
   22370:	fb09 4707 	mla	r7, r9, r7, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   22374:	f1c3 0900 	rsb	r9, r3, #0
	if (blen > 0) {
   22378:	ea19 0906 	ands.w	r9, r9, r6
   2237c:	d00c      	beq.n	22398 <nvs_flash_al_wrt.part.0+0x54>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2237e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   22380:	6883      	ldr	r3, [r0, #8]
   22382:	4642      	mov	r2, r8
   22384:	685c      	ldr	r4, [r3, #4]
   22386:	4639      	mov	r1, r7
   22388:	464b      	mov	r3, r9
   2238a:	47a0      	blx	r4
		if (rc) {
   2238c:	4604      	mov	r4, r0
   2238e:	b9d0      	cbnz	r0, 223c6 <nvs_flash_al_wrt.part.0+0x82>
		len -= blen;
   22390:	eba6 0609 	sub.w	r6, r6, r9
		offset += blen;
   22394:	444f      	add	r7, r9
		data8 += blen;
   22396:	44c8      	add	r8, r9
	if (len) {
   22398:	b1ee      	cbz	r6, 223d6 <nvs_flash_al_wrt.part.0+0x92>
		memcpy(buf, data8, len);
   2239a:	4632      	mov	r2, r6
   2239c:	4641      	mov	r1, r8
   2239e:	4668      	mov	r0, sp
   223a0:	f001 fbeb 	bl	23b7a <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   223a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   223a6:	681a      	ldr	r2, [r3, #0]
   223a8:	7919      	ldrb	r1, [r3, #4]
   223aa:	1b92      	subs	r2, r2, r6
   223ac:	eb0d 0006 	add.w	r0, sp, r6
   223b0:	f001 fc0e 	bl	23bd0 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   223b4:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   223b8:	681b      	ldr	r3, [r3, #0]
   223ba:	6882      	ldr	r2, [r0, #8]
   223bc:	4639      	mov	r1, r7
   223be:	6854      	ldr	r4, [r2, #4]
   223c0:	466a      	mov	r2, sp
   223c2:	47a0      	blx	r4
   223c4:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   223c6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   223c8:	2101      	movs	r1, #1
   223ca:	f7ff feba 	bl	22142 <flash_write_protection_set>
	return rc;
   223ce:	4620      	mov	r0, r4
}
   223d0:	b008      	add	sp, #32
   223d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   223d6:	4634      	mov	r4, r6
   223d8:	e7f5      	b.n	223c6 <nvs_flash_al_wrt.part.0+0x82>

000223da <nvs_flash_data_wrt>:
{
   223da:	b538      	push	{r3, r4, r5, lr}
   223dc:	4604      	mov	r4, r0
	if (!len) {
   223de:	4615      	mov	r5, r2
   223e0:	b12a      	cbz	r2, 223ee <nvs_flash_data_wrt+0x14>
   223e2:	4613      	mov	r3, r2
   223e4:	460a      	mov	r2, r1
   223e6:	6881      	ldr	r1, [r0, #8]
   223e8:	f7ff ffac 	bl	22344 <nvs_flash_al_wrt.part.0>
   223ec:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   223ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   223f0:	4629      	mov	r1, r5
   223f2:	f7ff ff4d 	bl	22290 <nvs_al_size.isra.0>
   223f6:	68a3      	ldr	r3, [r4, #8]
   223f8:	4403      	add	r3, r0
   223fa:	60a3      	str	r3, [r4, #8]
}
   223fc:	4610      	mov	r0, r2
   223fe:	bd38      	pop	{r3, r4, r5, pc}

00022400 <nvs_flash_ate_wrt>:
{
   22400:	b510      	push	{r4, lr}
   22402:	460a      	mov	r2, r1
	if (!len) {
   22404:	2308      	movs	r3, #8
   22406:	6841      	ldr	r1, [r0, #4]
{
   22408:	4604      	mov	r4, r0
   2240a:	f7ff ff9b 	bl	22344 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2240e:	2108      	movs	r1, #8
   22410:	4602      	mov	r2, r0
   22412:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   22414:	f7ff ff3c 	bl	22290 <nvs_al_size.isra.0>
   22418:	6863      	ldr	r3, [r4, #4]
   2241a:	1a1b      	subs	r3, r3, r0
   2241c:	6063      	str	r3, [r4, #4]
}
   2241e:	4610      	mov	r0, r2
   22420:	bd10      	pop	{r4, pc}

00022422 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   22422:	2300      	movs	r3, #0
   22424:	461a      	mov	r2, r3
   22426:	f7e3 bc4b 	b.w	5cc0 <nvs_write>

0002242a <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2242a:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2242c:	2400      	movs	r4, #0
   2242e:	9400      	str	r4, [sp, #0]
   22430:	f7e3 fd1a 	bl	5e68 <nvs_read_hist>
	return rc;
}
   22434:	b002      	add	sp, #8
   22436:	bd10      	pop	{r4, pc}

00022438 <device_get_binding>:
   22438:	f7fc bd36 	b.w	1eea8 <z_impl_device_get_binding>

0002243c <get_sectors_cb>:
{
   2243c:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2243e:	6802      	ldr	r2, [r0, #0]
   22440:	684c      	ldr	r4, [r1, #4]
   22442:	42a2      	cmp	r2, r4
   22444:	d316      	bcc.n	22474 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   22446:	688b      	ldr	r3, [r1, #8]
   22448:	4423      	add	r3, r4
   2244a:	429a      	cmp	r2, r3
   2244c:	d206      	bcs.n	2245c <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   2244e:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   22452:	42ab      	cmp	r3, r5
   22454:	d304      	bcc.n	22460 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   22456:	f06f 030b 	mvn.w	r3, #11
   2245a:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   2245c:	2000      	movs	r0, #0
   2245e:	e00a      	b.n	22476 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   22460:	68cd      	ldr	r5, [r1, #12]
   22462:	1b12      	subs	r2, r2, r4
   22464:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   22468:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2246c:	6842      	ldr	r2, [r0, #4]
   2246e:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   22470:	3301      	adds	r3, #1
   22472:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   22474:	2001      	movs	r0, #1
}
   22476:	bd70      	pop	{r4, r5, r6, pc}

00022478 <settings_load>:
	return settings_load_subtree(NULL);
   22478:	2000      	movs	r0, #0
   2247a:	f7e3 bde9 	b.w	6050 <settings_load_subtree>

0002247e <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2247e:	2200      	movs	r2, #0
   22480:	4611      	mov	r1, r2
   22482:	f7e3 bdab 	b.w	5fdc <settings_save_one>

00022486 <settings_name_steq>:
{
   22486:	4603      	mov	r3, r0
   22488:	b530      	push	{r4, r5, lr}
   2248a:	4608      	mov	r0, r1
	if (next) {
   2248c:	b10a      	cbz	r2, 22492 <settings_name_steq+0xc>
		*next = NULL;
   2248e:	2100      	movs	r1, #0
   22490:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   22492:	b163      	cbz	r3, 224ae <settings_name_steq+0x28>
   22494:	b190      	cbz	r0, 224bc <settings_name_steq+0x36>
   22496:	1e41      	subs	r1, r0, #1
   22498:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   2249a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   2249e:	4604      	mov	r4, r0
   224a0:	f810 3b01 	ldrb.w	r3, [r0], #1
   224a4:	b15d      	cbz	r5, 224be <settings_name_steq+0x38>
   224a6:	429d      	cmp	r5, r3
   224a8:	d101      	bne.n	224ae <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   224aa:	2d3d      	cmp	r5, #61	; 0x3d
   224ac:	d1f5      	bne.n	2249a <settings_name_steq+0x14>
	return 0;
   224ae:	2000      	movs	r0, #0
   224b0:	e004      	b.n	224bc <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   224b2:	2b3d      	cmp	r3, #61	; 0x3d
   224b4:	d008      	beq.n	224c8 <settings_name_steq+0x42>
   224b6:	fab3 f083 	clz	r0, r3
   224ba:	0940      	lsrs	r0, r0, #5
}
   224bc:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   224be:	2b2f      	cmp	r3, #47	; 0x2f
   224c0:	d1f7      	bne.n	224b2 <settings_name_steq+0x2c>
		if (next) {
   224c2:	b10a      	cbz	r2, 224c8 <settings_name_steq+0x42>
			*next = name + 1;
   224c4:	3401      	adds	r4, #1
   224c6:	6014      	str	r4, [r2, #0]
		return 1;
   224c8:	2001      	movs	r0, #1
   224ca:	e7f7      	b.n	224bc <settings_name_steq+0x36>

000224cc <settings_name_next>:
{
   224cc:	b530      	push	{r4, r5, lr}
   224ce:	4603      	mov	r3, r0
	if (next) {
   224d0:	b109      	cbz	r1, 224d6 <settings_name_next+0xa>
		*next = NULL;
   224d2:	2200      	movs	r2, #0
   224d4:	600a      	str	r2, [r1, #0]
	if (!name) {
   224d6:	b16b      	cbz	r3, 224f4 <settings_name_next+0x28>
   224d8:	461a      	mov	r2, r3
   224da:	4614      	mov	r4, r2
   224dc:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   224de:	f812 5b01 	ldrb.w	r5, [r2], #1
   224e2:	b135      	cbz	r5, 224f2 <settings_name_next+0x26>
   224e4:	2d3d      	cmp	r5, #61	; 0x3d
   224e6:	d004      	beq.n	224f2 <settings_name_next+0x26>
   224e8:	2d2f      	cmp	r5, #47	; 0x2f
   224ea:	d1f6      	bne.n	224da <settings_name_next+0xe>
		if (next) {
   224ec:	b109      	cbz	r1, 224f2 <settings_name_next+0x26>
			*next = name + 1;
   224ee:	3401      	adds	r4, #1
   224f0:	600c      	str	r4, [r1, #0]
}
   224f2:	bd30      	pop	{r4, r5, pc}
		return 0;
   224f4:	4618      	mov	r0, r3
   224f6:	e7fc      	b.n	224f2 <settings_name_next+0x26>

000224f8 <settings_nvs_read_fn>:
{
   224f8:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   224fa:	4613      	mov	r3, r2
{
   224fc:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   224fe:	460a      	mov	r2, r1
   22500:	8881      	ldrh	r1, [r0, #4]
   22502:	6800      	ldr	r0, [r0, #0]
   22504:	f7ff ff91 	bl	2242a <nvs_read>
}
   22508:	42a0      	cmp	r0, r4
   2250a:	bfa8      	it	ge
   2250c:	4620      	movge	r0, r4
   2250e:	bd10      	pop	{r4, pc}

00022510 <settings_nvs_save>:
{
   22510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22514:	b097      	sub	sp, #92	; 0x5c
   22516:	4604      	mov	r4, r0
   22518:	9201      	str	r2, [sp, #4]
   2251a:	469b      	mov	fp, r3
	if (!name) {
   2251c:	4689      	mov	r9, r1
   2251e:	2900      	cmp	r1, #0
   22520:	d069      	beq.n	225f6 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   22522:	b1da      	cbz	r2, 2255c <settings_nvs_save+0x4c>
   22524:	fabb f78b 	clz	r7, fp
   22528:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2252a:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   2252c:	3501      	adds	r5, #1
   2252e:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   22530:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   22532:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   22536:	1e6e      	subs	r6, r5, #1
   22538:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2253a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2253e:	d02e      	beq.n	2259e <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   22540:	234a      	movs	r3, #74	; 0x4a
   22542:	aa03      	add	r2, sp, #12
   22544:	4631      	mov	r1, r6
   22546:	4650      	mov	r0, sl
   22548:	f7ff ff6f 	bl	2242a <nvs_read>
		if (rc < 0) {
   2254c:	2800      	cmp	r0, #0
   2254e:	da07      	bge.n	22560 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   22550:	f110 0f02 	cmn.w	r0, #2
   22554:	bf08      	it	eq
   22556:	46b0      	moveq	r8, r6
   22558:	4635      	mov	r5, r6
   2255a:	e7ec      	b.n	22536 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   2255c:	2701      	movs	r7, #1
   2255e:	e7e4      	b.n	2252a <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   22560:	ab16      	add	r3, sp, #88	; 0x58
   22562:	4418      	add	r0, r3
   22564:	2300      	movs	r3, #0
   22566:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2256a:	a903      	add	r1, sp, #12
   2256c:	4648      	mov	r0, r9
   2256e:	f001 fad6 	bl	23b1e <strcmp>
   22572:	2800      	cmp	r0, #0
   22574:	d1f0      	bne.n	22558 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   22576:	2f00      	cmp	r7, #0
   22578:	d03b      	beq.n	225f2 <settings_nvs_save+0xe2>
   2257a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2257c:	42b3      	cmp	r3, r6
   2257e:	d142      	bne.n	22606 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   22580:	4622      	mov	r2, r4
   22582:	1e73      	subs	r3, r6, #1
   22584:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   22588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2258c:	2302      	movs	r3, #2
   2258e:	4650      	mov	r0, sl
   22590:	f7e3 fb96 	bl	5cc0 <nvs_write>
			if (rc < 0) {
   22594:	2800      	cmp	r0, #0
   22596:	da36      	bge.n	22606 <settings_nvs_save+0xf6>
}
   22598:	b017      	add	sp, #92	; 0x5c
   2259a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2259e:	bb6f      	cbnz	r7, 225fc <settings_nvs_save+0xec>
	write_name = true;
   225a0:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   225a2:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   225a6:	d02b      	beq.n	22600 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   225a8:	f104 0508 	add.w	r5, r4, #8
   225ac:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   225b0:	9a01      	ldr	r2, [sp, #4]
   225b2:	465b      	mov	r3, fp
   225b4:	b289      	uxth	r1, r1
   225b6:	4628      	mov	r0, r5
   225b8:	f7e3 fb82 	bl	5cc0 <nvs_write>
	if (rc < 0) {
   225bc:	2800      	cmp	r0, #0
   225be:	dbeb      	blt.n	22598 <settings_nvs_save+0x88>
	if (write_name) {
   225c0:	b157      	cbz	r7, 225d8 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   225c2:	4648      	mov	r0, r9
   225c4:	f001 fa9b 	bl	23afe <strlen>
   225c8:	464a      	mov	r2, r9
   225ca:	4603      	mov	r3, r0
   225cc:	4641      	mov	r1, r8
   225ce:	4628      	mov	r0, r5
   225d0:	f7e3 fb76 	bl	5cc0 <nvs_write>
		if (rc < 0) {
   225d4:	2800      	cmp	r0, #0
   225d6:	dbdf      	blt.n	22598 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   225d8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   225da:	4543      	cmp	r3, r8
   225dc:	d220      	bcs.n	22620 <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   225de:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   225e0:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   225e2:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   225e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   225ea:	4628      	mov	r0, r5
   225ec:	f7e3 fb68 	bl	5cc0 <nvs_write>
   225f0:	e016      	b.n	22620 <settings_nvs_save+0x110>
   225f2:	46b0      	mov	r8, r6
   225f4:	e7d5      	b.n	225a2 <settings_nvs_save+0x92>
		return -EINVAL;
   225f6:	f06f 0015 	mvn.w	r0, #21
   225fa:	e7cd      	b.n	22598 <settings_nvs_save+0x88>
		return 0;
   225fc:	2000      	movs	r0, #0
   225fe:	e7cb      	b.n	22598 <settings_nvs_save+0x88>
		return -ENOMEM;
   22600:	f06f 000b 	mvn.w	r0, #11
   22604:	e7c8      	b.n	22598 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   22606:	4631      	mov	r1, r6
   22608:	4650      	mov	r0, sl
   2260a:	f7ff ff0a 	bl	22422 <nvs_delete>
			if (rc >= 0) {
   2260e:	2800      	cmp	r0, #0
   22610:	dbc2      	blt.n	22598 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   22612:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   22616:	313f      	adds	r1, #63	; 0x3f
   22618:	b289      	uxth	r1, r1
   2261a:	4650      	mov	r0, sl
   2261c:	f7ff ff01 	bl	22422 <nvs_delete>
	if (rc < 0) {
   22620:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   22624:	e7b8      	b.n	22598 <settings_nvs_save+0x88>

00022626 <settings_nvs_backend_init>:
{
   22626:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   22628:	f100 0608 	add.w	r6, r0, #8
   2262c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   2262e:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   22630:	4630      	mov	r0, r6
   22632:	f7e3 f9d9 	bl	59e8 <nvs_init>
	if (rc) {
   22636:	4605      	mov	r5, r0
   22638:	b970      	cbnz	r0, 22658 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2263a:	2302      	movs	r3, #2
   2263c:	f10d 0206 	add.w	r2, sp, #6
   22640:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   22644:	4630      	mov	r0, r6
   22646:	f7ff fef0 	bl	2242a <nvs_read>
	if (rc < 0) {
   2264a:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2264c:	bfac      	ite	ge
   2264e:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   22652:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   22656:	8723      	strh	r3, [r4, #56]	; 0x38
}
   22658:	4628      	mov	r0, r5
   2265a:	b002      	add	sp, #8
   2265c:	bd70      	pop	{r4, r5, r6, pc}

0002265e <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   2265e:	2200      	movs	r2, #0
   22660:	8002      	strh	r2, [r0, #0]
   22662:	6042      	str	r2, [r0, #4]
}
   22664:	4770      	bx	lr

00022666 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   22666:	68c3      	ldr	r3, [r0, #12]
   22668:	b2c9      	uxtb	r1, r1
   2266a:	220c      	movs	r2, #12
   2266c:	fb01 3302 	mla	r3, r1, r2, r3
   22670:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   22672:	f000 0007 	and.w	r0, r0, #7
   22676:	4770      	bx	lr

00022678 <set_on_state>:
	__asm__ volatile(
   22678:	f04f 0320 	mov.w	r3, #32
   2267c:	f3ef 8211 	mrs	r2, BASEPRI
   22680:	f383 8811 	msr	BASEPRI, r3
   22684:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   22688:	6803      	ldr	r3, [r0, #0]
   2268a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2268e:	f043 0302 	orr.w	r3, r3, #2
   22692:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   22694:	f382 8811 	msr	BASEPRI, r2
   22698:	f3bf 8f6f 	isb	sy
}
   2269c:	4770      	bx	lr

0002269e <stop>:
{
   2269e:	4603      	mov	r3, r0
   226a0:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   226a2:	68c0      	ldr	r0, [r0, #12]
	return &data->subsys[type];
   226a4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   226a6:	f04f 0420 	mov.w	r4, #32
   226aa:	f3ef 8611 	mrs	r6, BASEPRI
   226ae:	f384 8811 	msr	BASEPRI, r4
   226b2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   226b6:	250c      	movs	r5, #12
   226b8:	fb05 0401 	mla	r4, r5, r1, r0
   226bc:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   226be:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   226c2:	d001      	beq.n	226c8 <stop+0x2a>
   226c4:	42a2      	cmp	r2, r4
   226c6:	d111      	bne.n	226ec <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   226c8:	fb05 0001 	mla	r0, r5, r1, r0
   226cc:	2201      	movs	r2, #1
   226ce:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   226d0:	2000      	movs	r0, #0
	__asm__ volatile(
   226d2:	f386 8811 	msr	BASEPRI, r6
   226d6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   226da:	b930      	cbnz	r0, 226ea <stop+0x4c>
	get_sub_config(dev, type)->stop();
   226dc:	685b      	ldr	r3, [r3, #4]
   226de:	220c      	movs	r2, #12
   226e0:	fb02 3101 	mla	r1, r2, r1, r3
   226e4:	684b      	ldr	r3, [r1, #4]
   226e6:	4798      	blx	r3
	return 0;
   226e8:	2000      	movs	r0, #0
}
   226ea:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   226ec:	f04f 30ff 	mov.w	r0, #4294967295
   226f0:	e7ef      	b.n	226d2 <stop+0x34>

000226f2 <api_stop>:
	return stop(dev, subsys, CTX_API);
   226f2:	2280      	movs	r2, #128	; 0x80
   226f4:	f7ff bfd3 	b.w	2269e <stop>

000226f8 <async_start>:
{
   226f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   226fa:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   226fc:	68c4      	ldr	r4, [r0, #12]
{
   226fe:	4605      	mov	r5, r0
   22700:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   22702:	f04f 0020 	mov.w	r0, #32
   22706:	f3ef 8c11 	mrs	ip, BASEPRI
   2270a:	f380 8811 	msr	BASEPRI, r0
   2270e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22712:	260c      	movs	r6, #12
   22714:	fb06 4601 	mla	r6, r6, r1, r4
   22718:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2271a:	f000 0e07 	and.w	lr, r0, #7
   2271e:	f1be 0f01 	cmp.w	lr, #1
   22722:	d110      	bne.n	22746 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   22724:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   22726:	2600      	movs	r6, #0
	__asm__ volatile(
   22728:	f38c 8811 	msr	BASEPRI, ip
   2272c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   22730:	b93e      	cbnz	r6, 22742 <async_start+0x4a>
	subdata->cb = cb;
   22732:	200c      	movs	r0, #12
   22734:	4341      	muls	r1, r0
   22736:	440c      	add	r4, r1
	subdata->user_data = user_data;
   22738:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2273c:	686b      	ldr	r3, [r5, #4]
   2273e:	585b      	ldr	r3, [r3, r1]
   22740:	4798      	blx	r3
}
   22742:	4630      	mov	r0, r6
   22744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   22746:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2274a:	4287      	cmp	r7, r0
   2274c:	bf14      	ite	ne
   2274e:	f04f 36ff 	movne.w	r6, #4294967295
   22752:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   22756:	e7e7      	b.n	22728 <async_start+0x30>

00022758 <api_start>:
{
   22758:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2275a:	2480      	movs	r4, #128	; 0x80
   2275c:	9400      	str	r4, [sp, #0]
   2275e:	f7ff ffcb 	bl	226f8 <async_start>
}
   22762:	b002      	add	sp, #8
   22764:	bd10      	pop	{r4, pc}

00022766 <onoff_started_callback>:
	return &data->mgr[type];
   22766:	68c0      	ldr	r0, [r0, #12]
{
   22768:	b410      	push	{r4}
	return &data->mgr[type];
   2276a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2276c:	241c      	movs	r4, #28
   2276e:	fb03 0004 	mla	r0, r3, r4, r0
   22772:	2100      	movs	r1, #0
}
   22774:	bc10      	pop	{r4}
	notify(mgr, 0);
   22776:	4710      	bx	r2

00022778 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   22778:	2000      	movs	r0, #0
   2277a:	f003 bca7 	b.w	260cc <nrfx_clock_start>

0002277e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2277e:	2000      	movs	r0, #0
   22780:	f7fb be9c 	b.w	1e4bc <nrfx_clock_stop>

00022784 <blocking_start_callback>:
{
   22784:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   22786:	f7fd ba25 	b.w	1fbd4 <z_impl_k_sem_give>

0002278a <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   2278a:	4770      	bx	lr

0002278c <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2278c:	4770      	bx	lr

0002278e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2278e:	f7e4 b991 	b.w	6ab4 <_DoInit>

00022792 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   22792:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   22794:	f7ff fffb 	bl	2278e <SEGGER_RTT_Init>

	return 0;
}
   22798:	2000      	movs	r0, #0
   2279a:	bd08      	pop	{r3, pc}

0002279c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2279c:	b538      	push	{r3, r4, r5, lr}
   2279e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   227a0:	42ab      	cmp	r3, r5
{
   227a2:	4611      	mov	r1, r2
   227a4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   227a6:	d804      	bhi.n	227b2 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   227a8:	461a      	mov	r2, r3
   227aa:	f001 f9e6 	bl	23b7a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   227ae:	4620      	mov	r0, r4
   227b0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   227b2:	2400      	movs	r4, #0
   227b4:	e7fb      	b.n	227ae <_copy+0x12>

000227b6 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   227b6:	f001 ba0b 	b.w	23bd0 <memset>

000227ba <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   227ba:	09c3      	lsrs	r3, r0, #7
   227bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   227c0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   227c4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   227c8:	b2c0      	uxtb	r0, r0
   227ca:	4770      	bx	lr

000227cc <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   227cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   227d0:	4606      	mov	r6, r0
   227d2:	b0a9      	sub	sp, #164	; 0xa4
   227d4:	4688      	mov	r8, r1
   227d6:	4614      	mov	r4, r2
   227d8:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   227da:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   227de:	f7e4 f9ef 	bl	6bc0 <uECC_get_rng>
		if (!rng_function ||
   227e2:	4603      	mov	r3, r0
   227e4:	2800      	cmp	r0, #0
   227e6:	d03e      	beq.n	22866 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   227e8:	2140      	movs	r1, #64	; 0x40
   227ea:	a808      	add	r0, sp, #32
   227ec:	4798      	blx	r3
		if (!rng_function ||
   227ee:	b3d0      	cbz	r0, 22866 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   227f0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   227f4:	f112 031f 	adds.w	r3, r2, #31
   227f8:	bf48      	it	mi
   227fa:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   227fe:	466d      	mov	r5, sp
   22800:	464a      	mov	r2, r9
   22802:	a908      	add	r1, sp, #32
   22804:	4628      	mov	r0, r5
   22806:	f343 1347 	sbfx	r3, r3, #5, #8
   2280a:	f000 f9fa 	bl	22c02 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   2280e:	4622      	mov	r2, r4
   22810:	4629      	mov	r1, r5
   22812:	a818      	add	r0, sp, #96	; 0x60
   22814:	f000 fe0f 	bl	23436 <EccPoint_compute_public_key>
   22818:	b318      	cbz	r0, 22862 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   2281a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   2281e:	1dd9      	adds	r1, r3, #7
   22820:	bf48      	it	mi
   22822:	f103 010e 	addmi.w	r1, r3, #14
   22826:	462a      	mov	r2, r5
   22828:	4640      	mov	r0, r8
   2282a:	10c9      	asrs	r1, r1, #3
   2282c:	f000 fe2b 	bl	23486 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   22830:	f994 1001 	ldrsb.w	r1, [r4, #1]
   22834:	aa18      	add	r2, sp, #96	; 0x60
   22836:	4630      	mov	r0, r6
   22838:	f000 fe25 	bl	23486 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2283c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   22840:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   22844:	ab18      	add	r3, sp, #96	; 0x60
   22846:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2284a:	1870      	adds	r0, r6, r1
   2284c:	f000 fe1b 	bl	23486 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   22850:	2220      	movs	r2, #32
   22852:	2100      	movs	r1, #0
   22854:	4628      	mov	r0, r5
   22856:	f001 f9bb 	bl	23bd0 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   2285a:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   2285c:	b029      	add	sp, #164	; 0xa4
   2285e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   22862:	3f01      	subs	r7, #1
   22864:	d1bb      	bne.n	227de <uECC_make_key+0x12>
        		return 0;
   22866:	2000      	movs	r0, #0
   22868:	e7f8      	b.n	2285c <uECC_make_key+0x90>

0002286a <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   2286a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2286e:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   22870:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   22874:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   22878:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   2287c:	b0a4      	sub	sp, #144	; 0x90
   2287e:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   22880:	1dda      	adds	r2, r3, #7
   22882:	bf48      	it	mi
   22884:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   22888:	ad04      	add	r5, sp, #16
{
   2288a:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   2288c:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   2288e:	4628      	mov	r0, r5
   22890:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   22892:	9502      	str	r5, [sp, #8]
   22894:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   22896:	f000 fe0a 	bl	234ae <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   2289a:	463a      	mov	r2, r7
   2289c:	4649      	mov	r1, r9
   2289e:	a814      	add	r0, sp, #80	; 0x50
   228a0:	f000 fe05 	bl	234ae <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   228a4:	ab14      	add	r3, sp, #80	; 0x50
   228a6:	eb09 0107 	add.w	r1, r9, r7
   228aa:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   228ae:	463a      	mov	r2, r7
   228b0:	f000 fdfd 	bl	234ae <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   228b4:	4623      	mov	r3, r4
   228b6:	4632      	mov	r2, r6
   228b8:	4629      	mov	r1, r5
   228ba:	4628      	mov	r0, r5
   228bc:	f000 fd8f 	bl	233de <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   228c0:	fab0 f380 	clz	r3, r0
   228c4:	9401      	str	r4, [sp, #4]
   228c6:	aa24      	add	r2, sp, #144	; 0x90
   228c8:	095b      	lsrs	r3, r3, #5
   228ca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   228ce:	8863      	ldrh	r3, [r4, #2]
   228d0:	3301      	adds	r3, #1
   228d2:	b21b      	sxth	r3, r3
   228d4:	9300      	str	r3, [sp, #0]
   228d6:	f851 2c88 	ldr.w	r2, [r1, #-136]
   228da:	a914      	add	r1, sp, #80	; 0x50
   228dc:	2300      	movs	r3, #0
   228de:	4608      	mov	r0, r1
   228e0:	f000 fcb0 	bl	23244 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   228e4:	aa14      	add	r2, sp, #80	; 0x50
   228e6:	4639      	mov	r1, r7
   228e8:	4640      	mov	r0, r8
   228ea:	f000 fdcc 	bl	23486 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   228ee:	4621      	mov	r1, r4
   228f0:	a814      	add	r0, sp, #80	; 0x50
   228f2:	f000 fc1c 	bl	2312e <EccPoint_isZero>
   228f6:	af02      	add	r7, sp, #8
   228f8:	4604      	mov	r4, r0
   228fa:	2208      	movs	r2, #8
   228fc:	2100      	movs	r1, #0
   228fe:	4638      	mov	r0, r7
   22900:	f001 f966 	bl	23bd0 <memset>
   22904:	2220      	movs	r2, #32
   22906:	2100      	movs	r1, #0
   22908:	4630      	mov	r0, r6
   2290a:	f001 f961 	bl	23bd0 <memset>
   2290e:	2220      	movs	r2, #32
   22910:	2100      	movs	r1, #0
   22912:	4628      	mov	r0, r5
   22914:	f001 f95c 	bl	23bd0 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   22918:	fab4 f084 	clz	r0, r4
   2291c:	0940      	lsrs	r0, r0, #5
   2291e:	b024      	add	sp, #144	; 0x90
   22920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022924 <uECC_vli_add>:
{
   22924:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   22926:	2400      	movs	r4, #0
{
   22928:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   2292a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2292c:	b265      	sxtb	r5, r4
   2292e:	42ab      	cmp	r3, r5
   22930:	dc00      	bgt.n	22934 <uECC_vli_add+0x10>
}
   22932:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   22934:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   22938:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   2293c:	443d      	add	r5, r7
   2293e:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   22940:	42af      	cmp	r7, r5
   22942:	f000 0001 	and.w	r0, r0, #1
   22946:	bf18      	it	ne
   22948:	2000      	movne	r0, #0
		result[i] = sum;
   2294a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2294e:	bf88      	it	hi
   22950:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   22954:	3401      	adds	r4, #1
   22956:	e7e9      	b.n	2292c <uECC_vli_add+0x8>

00022958 <uECC_vli_rshift1>:
	vli += num_words;
   22958:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   2295c:	2300      	movs	r3, #0
	while (vli-- > end) {
   2295e:	4288      	cmp	r0, r1
   22960:	d300      	bcc.n	22964 <uECC_vli_rshift1+0xc>
}
   22962:	4770      	bx	lr
		uECC_word_t temp = *vli;
   22964:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   22968:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   2296c:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   2296e:	07d3      	lsls	r3, r2, #31
   22970:	e7f5      	b.n	2295e <uECC_vli_rshift1+0x6>

00022972 <vli_modInv_update>:
	if (!EVEN(uv)) {
   22972:	6803      	ldr	r3, [r0, #0]
{
   22974:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   22976:	f013 0601 	ands.w	r6, r3, #1
{
   2297a:	4605      	mov	r5, r0
   2297c:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   2297e:	d005      	beq.n	2298c <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   22980:	4613      	mov	r3, r2
   22982:	460a      	mov	r2, r1
   22984:	4601      	mov	r1, r0
   22986:	f7ff ffcd 	bl	22924 <uECC_vli_add>
   2298a:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   2298c:	4621      	mov	r1, r4
   2298e:	4628      	mov	r0, r5
   22990:	f7ff ffe2 	bl	22958 <uECC_vli_rshift1>
	if (carry) {
   22994:	b146      	cbz	r6, 229a8 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   22996:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2299a:	3a01      	subs	r2, #1
   2299c:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   229a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   229a4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   229a8:	bd70      	pop	{r4, r5, r6, pc}

000229aa <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   229aa:	f04f 0c00 	mov.w	ip, #0
{
   229ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   229b2:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   229b4:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   229b6:	fa4f f98c 	sxtb.w	r9, ip
   229ba:	454b      	cmp	r3, r9
   229bc:	dc16      	bgt.n	229ec <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   229be:	f04f 36ff 	mov.w	r6, #4294967295
   229c2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   229c6:	9600      	str	r6, [sp, #0]
   229c8:	f04f 0800 	mov.w	r8, #0
   229cc:	9f00      	ldr	r7, [sp, #0]
   229ce:	fa53 fe88 	uxtab	lr, r3, r8
   229d2:	fa4f fe8e 	sxtb.w	lr, lr
   229d6:	45be      	cmp	lr, r7
   229d8:	fa5f f688 	uxtb.w	r6, r8
   229dc:	db26      	blt.n	22a2c <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   229de:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   229e2:	f840 4c04 	str.w	r4, [r0, #-4]
}
   229e6:	b003      	add	sp, #12
   229e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   229ec:	f04f 0e00 	mov.w	lr, #0
   229f0:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   229f4:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   229f6:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   229fa:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   229fe:	fba6 6707 	umull	r6, r7, r6, r7
   22a02:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   22a04:	f10e 0e01 	add.w	lr, lr, #1
   22a08:	417d      	adcs	r5, r7
   22a0a:	fa4f f68e 	sxtb.w	r6, lr
   22a0e:	f04f 0b00 	mov.w	fp, #0
   22a12:	bf28      	it	cs
   22a14:	f04f 0b01 	movcs.w	fp, #1
   22a18:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   22a1a:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   22a1c:	ddeb      	ble.n	229f6 <uECC_vli_mult+0x4c>
		result[k] = r0;
   22a1e:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   22a22:	462c      	mov	r4, r5
   22a24:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   22a28:	4645      	mov	r5, r8
   22a2a:	e7c4      	b.n	229b6 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   22a2c:	3601      	adds	r6, #1
   22a2e:	fa4f fc86 	sxtb.w	ip, r6
   22a32:	ebae 0a0c 	sub.w	sl, lr, ip
   22a36:	46a9      	mov	r9, r5
   22a38:	eb01 068c 	add.w	r6, r1, ip, lsl #2
   22a3c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   22a40:	2500      	movs	r5, #0
   22a42:	459c      	cmp	ip, r3
   22a44:	db05      	blt.n	22a52 <uECC_vli_mult+0xa8>
		result[k] = r0;
   22a46:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   22a4a:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   22a4e:	464c      	mov	r4, r9
   22a50:	e7bc      	b.n	229cc <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   22a52:	f856 bb04 	ldr.w	fp, [r6], #4
   22a56:	f85a 7904 	ldr.w	r7, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   22a5a:	fbab 7b07 	umull	r7, fp, fp, r7
   22a5e:	f8cd b004 	str.w	fp, [sp, #4]
   22a62:	193c      	adds	r4, r7, r4
   22a64:	9f01      	ldr	r7, [sp, #4]
   22a66:	eb57 0909 	adcs.w	r9, r7, r9
   22a6a:	f04f 0b00 	mov.w	fp, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   22a6e:	f10c 0c01 	add.w	ip, ip, #1
   22a72:	bf28      	it	cs
   22a74:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   22a78:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   22a7a:	fa4f fc8c 	sxtb.w	ip, ip
   22a7e:	e7e0      	b.n	22a42 <uECC_vli_mult+0x98>

00022a80 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   22a80:	2300      	movs	r3, #0
{
   22a82:	b510      	push	{r4, lr}
		 vli[i] = 0;
   22a84:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   22a86:	b25a      	sxtb	r2, r3
   22a88:	4291      	cmp	r1, r2
   22a8a:	dc00      	bgt.n	22a8e <uECC_vli_clear+0xe>
}
   22a8c:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   22a8e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   22a92:	3301      	adds	r3, #1
   22a94:	e7f7      	b.n	22a86 <uECC_vli_clear+0x6>

00022a96 <uECC_vli_isZero>:
{
   22a96:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   22a98:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   22a9a:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   22a9c:	b25c      	sxtb	r4, r3
   22a9e:	42a1      	cmp	r1, r4
   22aa0:	dc03      	bgt.n	22aaa <uECC_vli_isZero+0x14>
}
   22aa2:	fab2 f082 	clz	r0, r2
   22aa6:	0940      	lsrs	r0, r0, #5
   22aa8:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   22aaa:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   22aae:	3301      	adds	r3, #1
   22ab0:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   22ab2:	e7f3      	b.n	22a9c <uECC_vli_isZero+0x6>

00022ab4 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   22ab4:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   22ab6:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   22ab8:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   22abc:	f001 011f 	and.w	r1, r1, #31
   22ac0:	fa03 f101 	lsl.w	r1, r3, r1
}
   22ac4:	4008      	ands	r0, r1
   22ac6:	4770      	bx	lr

00022ac8 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   22ac8:	3901      	subs	r1, #1
   22aca:	b24b      	sxtb	r3, r1
{
   22acc:	4602      	mov	r2, r0
   22ace:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   22ad2:	2b00      	cmp	r3, #0
   22ad4:	da03      	bge.n	22ade <uECC_vli_numBits+0x16>
	return (i + 1);
   22ad6:	3301      	adds	r3, #1
   22ad8:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   22ada:	b938      	cbnz	r0, 22aec <uECC_vli_numBits+0x24>
   22adc:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   22ade:	f851 0904 	ldr.w	r0, [r1], #-4
   22ae2:	2800      	cmp	r0, #0
   22ae4:	d1f7      	bne.n	22ad6 <uECC_vli_numBits+0xe>
   22ae6:	3b01      	subs	r3, #1
   22ae8:	b25b      	sxtb	r3, r3
   22aea:	e7f2      	b.n	22ad2 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   22aec:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   22af0:	3b01      	subs	r3, #1
   22af2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   22af6:	2300      	movs	r3, #0
   22af8:	b922      	cbnz	r2, 22b04 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   22afa:	3801      	subs	r0, #1
   22afc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   22b00:	b200      	sxth	r0, r0
}
   22b02:	4770      	bx	lr
		digit >>= 1;
   22b04:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   22b06:	3301      	adds	r3, #1
   22b08:	e7f6      	b.n	22af8 <uECC_vli_numBits+0x30>

00022b0a <uECC_vli_set>:
{
   22b0a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   22b0c:	2300      	movs	r3, #0
   22b0e:	b25c      	sxtb	r4, r3
   22b10:	42a2      	cmp	r2, r4
   22b12:	dc00      	bgt.n	22b16 <uECC_vli_set+0xc>
}
   22b14:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   22b16:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   22b1a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   22b1e:	3301      	adds	r3, #1
   22b20:	e7f5      	b.n	22b0e <uECC_vli_set+0x4>

00022b22 <uECC_vli_cmp_unsafe>:
{
   22b22:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   22b24:	3a01      	subs	r2, #1
   22b26:	b253      	sxtb	r3, r2
   22b28:	009a      	lsls	r2, r3, #2
   22b2a:	2b00      	cmp	r3, #0
   22b2c:	da01      	bge.n	22b32 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   22b2e:	2000      	movs	r0, #0
}
   22b30:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   22b32:	5885      	ldr	r5, [r0, r2]
   22b34:	588c      	ldr	r4, [r1, r2]
   22b36:	42a5      	cmp	r5, r4
   22b38:	d805      	bhi.n	22b46 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   22b3a:	f1a2 0204 	sub.w	r2, r2, #4
   22b3e:	d304      	bcc.n	22b4a <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   22b40:	3b01      	subs	r3, #1
   22b42:	b25b      	sxtb	r3, r3
   22b44:	e7f1      	b.n	22b2a <uECC_vli_cmp_unsafe+0x8>
			return 1;
   22b46:	2001      	movs	r0, #1
   22b48:	e7f2      	b.n	22b30 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   22b4a:	f04f 30ff 	mov.w	r0, #4294967295
   22b4e:	e7ef      	b.n	22b30 <uECC_vli_cmp_unsafe+0xe>

00022b50 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   22b50:	3a01      	subs	r2, #1
   22b52:	b253      	sxtb	r3, r2
{
   22b54:	b570      	push	{r4, r5, r6, lr}
   22b56:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   22b58:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   22b5a:	2b00      	cmp	r3, #0
   22b5c:	da03      	bge.n	22b66 <uECC_vli_equal+0x16>
}
   22b5e:	1e20      	subs	r0, r4, #0
   22b60:	bf18      	it	ne
   22b62:	2001      	movne	r0, #1
   22b64:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   22b66:	5885      	ldr	r5, [r0, r2]
   22b68:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   22b6a:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   22b6c:	4075      	eors	r5, r6
   22b6e:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   22b70:	b25b      	sxtb	r3, r3
   22b72:	3a04      	subs	r2, #4
   22b74:	e7f1      	b.n	22b5a <uECC_vli_equal+0xa>

00022b76 <uECC_vli_sub>:
{
   22b76:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   22b78:	2400      	movs	r4, #0
{
   22b7a:	4606      	mov	r6, r0
   22b7c:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   22b7e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   22b80:	b265      	sxtb	r5, r4
   22b82:	4565      	cmp	r5, ip
   22b84:	db00      	blt.n	22b88 <uECC_vli_sub+0x12>
}
   22b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   22b88:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   22b8c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   22b90:	1a3d      	subs	r5, r7, r0
   22b92:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   22b94:	42af      	cmp	r7, r5
   22b96:	f000 0001 	and.w	r0, r0, #1
   22b9a:	bf18      	it	ne
   22b9c:	2000      	movne	r0, #0
		result[i] = diff;
   22b9e:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   22ba2:	bf38      	it	cc
   22ba4:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   22ba8:	3401      	adds	r4, #1
   22baa:	e7e9      	b.n	22b80 <uECC_vli_sub+0xa>

00022bac <uECC_vli_modAdd>:
{
   22bac:	b570      	push	{r4, r5, r6, lr}
   22bae:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   22bb2:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   22bb4:	4633      	mov	r3, r6
{
   22bb6:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   22bb8:	f7ff feb4 	bl	22924 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   22bbc:	b930      	cbnz	r0, 22bcc <uECC_vli_modAdd+0x20>
   22bbe:	4632      	mov	r2, r6
   22bc0:	4621      	mov	r1, r4
   22bc2:	4628      	mov	r0, r5
   22bc4:	f7ff ffad 	bl	22b22 <uECC_vli_cmp_unsafe>
   22bc8:	2801      	cmp	r0, #1
   22bca:	d007      	beq.n	22bdc <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   22bcc:	4633      	mov	r3, r6
   22bce:	462a      	mov	r2, r5
   22bd0:	4621      	mov	r1, r4
   22bd2:	4620      	mov	r0, r4
}
   22bd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   22bd8:	f7ff bfcd 	b.w	22b76 <uECC_vli_sub>
}
   22bdc:	bd70      	pop	{r4, r5, r6, pc}

00022bde <uECC_vli_modSub>:
{
   22bde:	b570      	push	{r4, r5, r6, lr}
   22be0:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   22be4:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   22be6:	4633      	mov	r3, r6
{
   22be8:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   22bea:	f7ff ffc4 	bl	22b76 <uECC_vli_sub>
	if (l_borrow) {
   22bee:	b138      	cbz	r0, 22c00 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   22bf0:	4633      	mov	r3, r6
   22bf2:	462a      	mov	r2, r5
   22bf4:	4621      	mov	r1, r4
   22bf6:	4620      	mov	r0, r4
}
   22bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   22bfc:	f7ff be92 	b.w	22924 <uECC_vli_add>
}
   22c00:	bd70      	pop	{r4, r5, r6, pc}

00022c02 <uECC_vli_mmod>:
{
   22c02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c06:	b0a5      	sub	sp, #148	; 0x94
   22c08:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   22c0a:	ab14      	add	r3, sp, #80	; 0x50
   22c0c:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   22c10:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   22c12:	4629      	mov	r1, r5
   22c14:	4610      	mov	r0, r2
{
   22c16:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   22c18:	f7ff ff56 	bl	22ac8 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   22c1c:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   22c20:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   22c22:	2c00      	cmp	r4, #0
   22c24:	4621      	mov	r1, r4
   22c26:	bfb8      	it	lt
   22c28:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   22c2c:	4263      	negs	r3, r4
   22c2e:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   22c32:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   22c36:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   22c3a:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   22c3c:	bf58      	it	pl
   22c3e:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   22c40:	f7ff ff1e 	bl	22a80 <uECC_vli_clear>
	if (bit_shift > 0) {
   22c44:	2e00      	cmp	r6, #0
   22c46:	b208      	sxth	r0, r1
   22c48:	dd2b      	ble.n	22ca2 <uECC_vli_mmod+0xa0>
   22c4a:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   22c4c:	2200      	movs	r2, #0
   22c4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   22c52:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   22c56:	4613      	mov	r3, r2
   22c58:	429d      	cmp	r5, r3
   22c5a:	d817      	bhi.n	22c8c <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   22c5c:	006b      	lsls	r3, r5, #1
   22c5e:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22c60:	ab04      	add	r3, sp, #16
   22c62:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22c66:	1e6f      	subs	r7, r5, #1
   22c68:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22c6a:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22c6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   22c70:	2c00      	cmp	r4, #0
   22c72:	da54      	bge.n	22d1e <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   22c74:	ab24      	add	r3, sp, #144	; 0x90
   22c76:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   22c7a:	462a      	mov	r2, r5
   22c7c:	f856 1c88 	ldr.w	r1, [r6, #-136]
   22c80:	4640      	mov	r0, r8
   22c82:	f7ff ff42 	bl	22b0a <uECC_vli_set>
}
   22c86:	b025      	add	sp, #148	; 0x94
   22c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   22c8c:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   22c90:	fa0c f106 	lsl.w	r1, ip, r6
   22c94:	430a      	orrs	r2, r1
   22c96:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   22c9a:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   22c9c:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   22ca0:	e7da      	b.n	22c58 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   22ca2:	ab04      	add	r3, sp, #16
   22ca4:	462a      	mov	r2, r5
   22ca6:	4639      	mov	r1, r7
   22ca8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   22cac:	f7ff ff2d 	bl	22b0a <uECC_vli_set>
   22cb0:	e7d4      	b.n	22c5c <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   22cb2:	fa0f fe82 	sxth.w	lr, r2
   22cb6:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   22cba:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   22cbe:	ab24      	add	r3, sp, #144	; 0x90
   22cc0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   22cc4:	3001      	adds	r0, #1
   22cc6:	f852 3c80 	ldr.w	r3, [r2, #-128]
   22cca:	440b      	add	r3, r1
   22ccc:	ebbb 0303 	subs.w	r3, fp, r3
   22cd0:	bf34      	ite	cc
   22cd2:	2201      	movcc	r2, #1
   22cd4:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   22cd6:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   22cd8:	bf18      	it	ne
   22cda:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   22cdc:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   22ce0:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   22ce4:	9b01      	ldr	r3, [sp, #4]
   22ce6:	b242      	sxtb	r2, r0
   22ce8:	429a      	cmp	r2, r3
   22cea:	dbe2      	blt.n	22cb2 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   22cec:	1a73      	subs	r3, r6, r1
   22cee:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   22cf0:	4629      	mov	r1, r5
   22cf2:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   22cf4:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   22cf6:	f7ff fe2f 	bl	22958 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22cfa:	ab24      	add	r3, sp, #144	; 0x90
   22cfc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22d00:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   22d02:	f853 2c80 	ldr.w	r2, [r3, #-128]
   22d06:	f857 3c80 	ldr.w	r3, [r7, #-128]
   22d0a:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   22d0e:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22d12:	4648      	mov	r0, r9
	for (index = 1; shift >= 0; --shift) {
   22d14:	3c01      	subs	r4, #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   22d16:	f7ff fe1f 	bl	22958 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   22d1a:	b224      	sxth	r4, r4
   22d1c:	e7a8      	b.n	22c70 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   22d1e:	ab24      	add	r3, sp, #144	; 0x90
   22d20:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   22d22:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   22d26:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   22d28:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   22d2c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   22d30:	e7d8      	b.n	22ce4 <uECC_vli_mmod+0xe2>

00022d32 <uECC_vli_modMult_fast>:
{
   22d32:	b530      	push	{r4, r5, lr}
   22d34:	461c      	mov	r4, r3
   22d36:	b091      	sub	sp, #68	; 0x44
   22d38:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   22d3a:	f993 3000 	ldrsb.w	r3, [r3]
   22d3e:	4668      	mov	r0, sp
   22d40:	f7ff fe33 	bl	229aa <uECC_vli_mult>
	curve->mmod_fast(result, product);
   22d44:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   22d48:	4669      	mov	r1, sp
   22d4a:	4628      	mov	r0, r5
   22d4c:	4798      	blx	r3
}
   22d4e:	b011      	add	sp, #68	; 0x44
   22d50:	bd30      	pop	{r4, r5, pc}

00022d52 <uECC_vli_modSquare_fast>:
{
   22d52:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   22d54:	460a      	mov	r2, r1
   22d56:	f7ff bfec 	b.w	22d32 <uECC_vli_modMult_fast>

00022d5a <double_jacobian_default>:
{
   22d5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   22d5e:	f993 6000 	ldrsb.w	r6, [r3]
{
   22d62:	b092      	sub	sp, #72	; 0x48
   22d64:	4604      	mov	r4, r0
   22d66:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   22d68:	4610      	mov	r0, r2
   22d6a:	4631      	mov	r1, r6
{
   22d6c:	4615      	mov	r5, r2
   22d6e:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   22d70:	f7ff fe91 	bl	22a96 <uECC_vli_isZero>
   22d74:	2800      	cmp	r0, #0
   22d76:	f040 8091 	bne.w	22e9c <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   22d7a:	463a      	mov	r2, r7
   22d7c:	4649      	mov	r1, r9
   22d7e:	a802      	add	r0, sp, #8
   22d80:	f7ff ffe7 	bl	22d52 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   22d84:	463b      	mov	r3, r7
   22d86:	aa02      	add	r2, sp, #8
   22d88:	4621      	mov	r1, r4
   22d8a:	a80a      	add	r0, sp, #40	; 0x28
   22d8c:	f7ff ffd1 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   22d90:	a902      	add	r1, sp, #8
   22d92:	4608      	mov	r0, r1
   22d94:	463a      	mov	r2, r7
   22d96:	f7ff ffdc 	bl	22d52 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   22d9a:	463b      	mov	r3, r7
   22d9c:	462a      	mov	r2, r5
   22d9e:	4649      	mov	r1, r9
   22da0:	4648      	mov	r0, r9
   22da2:	f7ff ffc6 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   22da6:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   22daa:	463a      	mov	r2, r7
   22dac:	4629      	mov	r1, r5
   22dae:	4628      	mov	r0, r5
   22db0:	f7ff ffcf 	bl	22d52 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   22db4:	4643      	mov	r3, r8
   22db6:	462a      	mov	r2, r5
   22db8:	4621      	mov	r1, r4
   22dba:	4620      	mov	r0, r4
   22dbc:	9600      	str	r6, [sp, #0]
   22dbe:	f7ff fef5 	bl	22bac <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   22dc2:	4643      	mov	r3, r8
   22dc4:	462a      	mov	r2, r5
   22dc6:	4629      	mov	r1, r5
   22dc8:	4628      	mov	r0, r5
   22dca:	9600      	str	r6, [sp, #0]
   22dcc:	f7ff feee 	bl	22bac <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   22dd0:	4643      	mov	r3, r8
   22dd2:	462a      	mov	r2, r5
   22dd4:	4621      	mov	r1, r4
   22dd6:	4628      	mov	r0, r5
   22dd8:	9600      	str	r6, [sp, #0]
   22dda:	f7ff ff00 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   22dde:	463b      	mov	r3, r7
   22de0:	462a      	mov	r2, r5
   22de2:	4621      	mov	r1, r4
   22de4:	4620      	mov	r0, r4
   22de6:	f7ff ffa4 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   22dea:	4643      	mov	r3, r8
   22dec:	4622      	mov	r2, r4
   22dee:	4621      	mov	r1, r4
   22df0:	4628      	mov	r0, r5
   22df2:	9600      	str	r6, [sp, #0]
   22df4:	f7ff feda 	bl	22bac <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   22df8:	4643      	mov	r3, r8
   22dfa:	9600      	str	r6, [sp, #0]
   22dfc:	462a      	mov	r2, r5
   22dfe:	4621      	mov	r1, r4
   22e00:	4620      	mov	r0, r4
   22e02:	f7ff fed3 	bl	22bac <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   22e06:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   22e08:	07db      	lsls	r3, r3, #31
   22e0a:	d54a      	bpl.n	22ea2 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   22e0c:	4633      	mov	r3, r6
   22e0e:	4642      	mov	r2, r8
   22e10:	4621      	mov	r1, r4
   22e12:	4620      	mov	r0, r4
   22e14:	f7ff fd86 	bl	22924 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   22e18:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   22e1a:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   22e1c:	4620      	mov	r0, r4
   22e1e:	f7ff fd9b 	bl	22958 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   22e22:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   22e26:	3b01      	subs	r3, #1
   22e28:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   22e2c:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   22e30:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   22e34:	463a      	mov	r2, r7
   22e36:	4621      	mov	r1, r4
   22e38:	4628      	mov	r0, r5
   22e3a:	f7ff ff8a 	bl	22d52 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   22e3e:	4643      	mov	r3, r8
   22e40:	aa0a      	add	r2, sp, #40	; 0x28
   22e42:	4629      	mov	r1, r5
   22e44:	4628      	mov	r0, r5
   22e46:	9600      	str	r6, [sp, #0]
   22e48:	f7ff fec9 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   22e4c:	4643      	mov	r3, r8
   22e4e:	aa0a      	add	r2, sp, #40	; 0x28
   22e50:	4629      	mov	r1, r5
   22e52:	4628      	mov	r0, r5
   22e54:	9600      	str	r6, [sp, #0]
   22e56:	f7ff fec2 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   22e5a:	a90a      	add	r1, sp, #40	; 0x28
   22e5c:	4608      	mov	r0, r1
   22e5e:	4643      	mov	r3, r8
   22e60:	462a      	mov	r2, r5
   22e62:	9600      	str	r6, [sp, #0]
   22e64:	f7ff febb 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   22e68:	463b      	mov	r3, r7
   22e6a:	aa0a      	add	r2, sp, #40	; 0x28
   22e6c:	4621      	mov	r1, r4
   22e6e:	4620      	mov	r0, r4
   22e70:	f7ff ff5f 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   22e74:	aa02      	add	r2, sp, #8
   22e76:	4643      	mov	r3, r8
   22e78:	4610      	mov	r0, r2
   22e7a:	4621      	mov	r1, r4
   22e7c:	9600      	str	r6, [sp, #0]
   22e7e:	f7ff feae 	bl	22bde <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   22e82:	4632      	mov	r2, r6
   22e84:	4629      	mov	r1, r5
   22e86:	4620      	mov	r0, r4
   22e88:	f7ff fe3f 	bl	22b0a <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   22e8c:	4649      	mov	r1, r9
   22e8e:	4628      	mov	r0, r5
   22e90:	f7ff fe3b 	bl	22b0a <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   22e94:	a902      	add	r1, sp, #8
   22e96:	4648      	mov	r0, r9
   22e98:	f7ff fe37 	bl	22b0a <uECC_vli_set>
}
   22e9c:	b012      	add	sp, #72	; 0x48
   22e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   22ea2:	4631      	mov	r1, r6
   22ea4:	4620      	mov	r0, r4
   22ea6:	f7ff fd57 	bl	22958 <uECC_vli_rshift1>
   22eaa:	e7c3      	b.n	22e34 <double_jacobian_default+0xda>

00022eac <x_side_default>:
{
   22eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22eb0:	4615      	mov	r5, r2
   22eb2:	b08a      	sub	sp, #40	; 0x28
   22eb4:	4604      	mov	r4, r0
   22eb6:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   22eb8:	221c      	movs	r2, #28
   22eba:	2100      	movs	r1, #0
   22ebc:	a803      	add	r0, sp, #12
   22ebe:	f000 fe87 	bl	23bd0 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   22ec2:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   22ec4:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   22ec8:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   22eca:	462a      	mov	r2, r5
   22ecc:	4631      	mov	r1, r6
   22ece:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   22ed0:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   22ed2:	f7ff ff3e 	bl	22d52 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   22ed6:	463b      	mov	r3, r7
   22ed8:	aa02      	add	r2, sp, #8
   22eda:	4621      	mov	r1, r4
   22edc:	4620      	mov	r0, r4
   22ede:	f8cd 8000 	str.w	r8, [sp]
   22ee2:	f7ff fe7c 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   22ee6:	462b      	mov	r3, r5
   22ee8:	4632      	mov	r2, r6
   22eea:	4621      	mov	r1, r4
   22eec:	4620      	mov	r0, r4
   22eee:	f7ff ff20 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   22ef2:	f8cd 8000 	str.w	r8, [sp]
   22ef6:	463b      	mov	r3, r7
   22ef8:	f105 0284 	add.w	r2, r5, #132	; 0x84
   22efc:	4621      	mov	r1, r4
   22efe:	4620      	mov	r0, r4
   22f00:	f7ff fe54 	bl	22bac <uECC_vli_modAdd>
}
   22f04:	b00a      	add	sp, #40	; 0x28
   22f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022f0a <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   22f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22f0e:	b09a      	sub	sp, #104	; 0x68
   22f10:	4616      	mov	r6, r2
   22f12:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   22f16:	4644      	mov	r4, r8
{
   22f18:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   22f1a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   22f1e:	9500      	str	r5, [sp, #0]
{
   22f20:	4607      	mov	r7, r0
   22f22:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   22f24:	4623      	mov	r3, r4
   22f26:	4602      	mov	r2, r0
   22f28:	4631      	mov	r1, r6
   22f2a:	a802      	add	r0, sp, #8
   22f2c:	f7ff fe57 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   22f30:	a902      	add	r1, sp, #8
   22f32:	4642      	mov	r2, r8
   22f34:	4608      	mov	r0, r1
   22f36:	f7ff ff0c 	bl	22d52 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   22f3a:	4643      	mov	r3, r8
   22f3c:	aa02      	add	r2, sp, #8
   22f3e:	4639      	mov	r1, r7
   22f40:	4638      	mov	r0, r7
   22f42:	f7ff fef6 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   22f46:	4643      	mov	r3, r8
   22f48:	aa02      	add	r2, sp, #8
   22f4a:	4631      	mov	r1, r6
   22f4c:	4630      	mov	r0, r6
   22f4e:	f7ff fef0 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   22f52:	4623      	mov	r3, r4
   22f54:	4652      	mov	r2, sl
   22f56:	4649      	mov	r1, r9
   22f58:	a802      	add	r0, sp, #8
   22f5a:	9500      	str	r5, [sp, #0]
   22f5c:	f7ff fe26 	bl	22bac <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   22f60:	4623      	mov	r3, r4
   22f62:	4652      	mov	r2, sl
   22f64:	4649      	mov	r1, r9
   22f66:	4648      	mov	r0, r9
   22f68:	9500      	str	r5, [sp, #0]
   22f6a:	f7ff fe38 	bl	22bde <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   22f6e:	4623      	mov	r3, r4
   22f70:	463a      	mov	r2, r7
   22f72:	4631      	mov	r1, r6
   22f74:	a80a      	add	r0, sp, #40	; 0x28
   22f76:	9500      	str	r5, [sp, #0]
   22f78:	f7ff fe31 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   22f7c:	4643      	mov	r3, r8
   22f7e:	aa0a      	add	r2, sp, #40	; 0x28
   22f80:	4651      	mov	r1, sl
   22f82:	4650      	mov	r0, sl
   22f84:	f7ff fed5 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   22f88:	4623      	mov	r3, r4
   22f8a:	4632      	mov	r2, r6
   22f8c:	4639      	mov	r1, r7
   22f8e:	a80a      	add	r0, sp, #40	; 0x28
   22f90:	9500      	str	r5, [sp, #0]
   22f92:	f7ff fe0b 	bl	22bac <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   22f96:	4642      	mov	r2, r8
   22f98:	4649      	mov	r1, r9
   22f9a:	4630      	mov	r0, r6
   22f9c:	f7ff fed9 	bl	22d52 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   22fa0:	4623      	mov	r3, r4
   22fa2:	aa0a      	add	r2, sp, #40	; 0x28
   22fa4:	4631      	mov	r1, r6
   22fa6:	4630      	mov	r0, r6
   22fa8:	9500      	str	r5, [sp, #0]
   22faa:	f7ff fe18 	bl	22bde <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   22fae:	4623      	mov	r3, r4
   22fb0:	4632      	mov	r2, r6
   22fb2:	4639      	mov	r1, r7
   22fb4:	a812      	add	r0, sp, #72	; 0x48
   22fb6:	9500      	str	r5, [sp, #0]
   22fb8:	f7ff fe11 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   22fbc:	4643      	mov	r3, r8
   22fbe:	aa12      	add	r2, sp, #72	; 0x48
   22fc0:	4649      	mov	r1, r9
   22fc2:	4648      	mov	r0, r9
   22fc4:	f7ff feb5 	bl	22d32 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   22fc8:	4623      	mov	r3, r4
   22fca:	4652      	mov	r2, sl
   22fcc:	4649      	mov	r1, r9
   22fce:	4648      	mov	r0, r9
   22fd0:	9500      	str	r5, [sp, #0]
   22fd2:	f7ff fe04 	bl	22bde <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   22fd6:	4642      	mov	r2, r8
   22fd8:	a902      	add	r1, sp, #8
   22fda:	a812      	add	r0, sp, #72	; 0x48
   22fdc:	f7ff feb9 	bl	22d52 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   22fe0:	a912      	add	r1, sp, #72	; 0x48
   22fe2:	4623      	mov	r3, r4
   22fe4:	aa0a      	add	r2, sp, #40	; 0x28
   22fe6:	4608      	mov	r0, r1
   22fe8:	9500      	str	r5, [sp, #0]
   22fea:	f7ff fdf8 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   22fee:	4623      	mov	r3, r4
   22ff0:	463a      	mov	r2, r7
   22ff2:	a912      	add	r1, sp, #72	; 0x48
   22ff4:	a80a      	add	r0, sp, #40	; 0x28
   22ff6:	9500      	str	r5, [sp, #0]
   22ff8:	f7ff fdf1 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   22ffc:	a90a      	add	r1, sp, #40	; 0x28
   22ffe:	4643      	mov	r3, r8
   23000:	aa02      	add	r2, sp, #8
   23002:	4608      	mov	r0, r1
   23004:	f7ff fe95 	bl	22d32 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   23008:	4623      	mov	r3, r4
   2300a:	4652      	mov	r2, sl
   2300c:	a90a      	add	r1, sp, #40	; 0x28
   2300e:	4650      	mov	r0, sl
   23010:	9500      	str	r5, [sp, #0]
   23012:	f7ff fde4 	bl	22bde <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   23016:	462a      	mov	r2, r5
   23018:	a912      	add	r1, sp, #72	; 0x48
   2301a:	4638      	mov	r0, r7
   2301c:	f7ff fd75 	bl	22b0a <uECC_vli_set>
}
   23020:	b01a      	add	sp, #104	; 0x68
   23022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023026 <uECC_vli_modInv>:
{
   23026:	b5f0      	push	{r4, r5, r6, r7, lr}
   23028:	460f      	mov	r7, r1
   2302a:	b0a1      	sub	sp, #132	; 0x84
   2302c:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   2302e:	4619      	mov	r1, r3
   23030:	4638      	mov	r0, r7
{
   23032:	4615      	mov	r5, r2
   23034:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   23036:	f7ff fd2e 	bl	22a96 <uECC_vli_isZero>
   2303a:	b128      	cbz	r0, 23048 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   2303c:	4630      	mov	r0, r6
}
   2303e:	b021      	add	sp, #132	; 0x84
   23040:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   23044:	f7ff bd1c 	b.w	22a80 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   23048:	4622      	mov	r2, r4
   2304a:	4639      	mov	r1, r7
   2304c:	4668      	mov	r0, sp
   2304e:	f7ff fd5c 	bl	22b0a <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   23052:	4629      	mov	r1, r5
   23054:	a808      	add	r0, sp, #32
   23056:	f7ff fd58 	bl	22b0a <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2305a:	a810      	add	r0, sp, #64	; 0x40
   2305c:	4621      	mov	r1, r4
   2305e:	f7ff fd0f 	bl	22a80 <uECC_vli_clear>
	u[0] = 1;
   23062:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   23064:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   23066:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   23068:	f7ff fd0a 	bl	22a80 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2306c:	4622      	mov	r2, r4
   2306e:	a908      	add	r1, sp, #32
   23070:	4668      	mov	r0, sp
   23072:	f7ff fd56 	bl	22b22 <uECC_vli_cmp_unsafe>
   23076:	b930      	cbnz	r0, 23086 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   23078:	4622      	mov	r2, r4
   2307a:	a910      	add	r1, sp, #64	; 0x40
   2307c:	4630      	mov	r0, r6
   2307e:	f7ff fd44 	bl	22b0a <uECC_vli_set>
}
   23082:	b021      	add	sp, #132	; 0x84
   23084:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   23086:	9b00      	ldr	r3, [sp, #0]
   23088:	07da      	lsls	r2, r3, #31
   2308a:	d409      	bmi.n	230a0 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   2308c:	4621      	mov	r1, r4
   2308e:	4668      	mov	r0, sp
   23090:	f7ff fc62 	bl	22958 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   23094:	4622      	mov	r2, r4
   23096:	4629      	mov	r1, r5
   23098:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   2309a:	f7ff fc6a 	bl	22972 <vli_modInv_update>
   2309e:	e7e5      	b.n	2306c <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   230a0:	9b08      	ldr	r3, [sp, #32]
   230a2:	07db      	lsls	r3, r3, #31
   230a4:	d407      	bmi.n	230b6 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   230a6:	4621      	mov	r1, r4
   230a8:	a808      	add	r0, sp, #32
   230aa:	f7ff fc55 	bl	22958 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   230ae:	4622      	mov	r2, r4
   230b0:	4629      	mov	r1, r5
   230b2:	a818      	add	r0, sp, #96	; 0x60
   230b4:	e7f1      	b.n	2309a <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   230b6:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   230b8:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   230ba:	dd1c      	ble.n	230f6 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   230bc:	aa08      	add	r2, sp, #32
   230be:	4669      	mov	r1, sp
   230c0:	4668      	mov	r0, sp
   230c2:	f7ff fd58 	bl	22b76 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   230c6:	4621      	mov	r1, r4
   230c8:	4668      	mov	r0, sp
   230ca:	f7ff fc45 	bl	22958 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   230ce:	4622      	mov	r2, r4
   230d0:	a918      	add	r1, sp, #96	; 0x60
   230d2:	a810      	add	r0, sp, #64	; 0x40
   230d4:	f7ff fd25 	bl	22b22 <uECC_vli_cmp_unsafe>
   230d8:	2800      	cmp	r0, #0
   230da:	da05      	bge.n	230e8 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   230dc:	a910      	add	r1, sp, #64	; 0x40
   230de:	4623      	mov	r3, r4
   230e0:	462a      	mov	r2, r5
   230e2:	4608      	mov	r0, r1
   230e4:	f7ff fc1e 	bl	22924 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   230e8:	a910      	add	r1, sp, #64	; 0x40
   230ea:	4623      	mov	r3, r4
   230ec:	aa18      	add	r2, sp, #96	; 0x60
   230ee:	4608      	mov	r0, r1
   230f0:	f7ff fd41 	bl	22b76 <uECC_vli_sub>
   230f4:	e7ce      	b.n	23094 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   230f6:	466a      	mov	r2, sp
   230f8:	a808      	add	r0, sp, #32
   230fa:	f7ff fd3c 	bl	22b76 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   230fe:	4621      	mov	r1, r4
   23100:	a808      	add	r0, sp, #32
   23102:	f7ff fc29 	bl	22958 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   23106:	4622      	mov	r2, r4
   23108:	a910      	add	r1, sp, #64	; 0x40
   2310a:	a818      	add	r0, sp, #96	; 0x60
   2310c:	f7ff fd09 	bl	22b22 <uECC_vli_cmp_unsafe>
   23110:	2800      	cmp	r0, #0
   23112:	da05      	bge.n	23120 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   23114:	a918      	add	r1, sp, #96	; 0x60
   23116:	4623      	mov	r3, r4
   23118:	462a      	mov	r2, r5
   2311a:	4608      	mov	r0, r1
   2311c:	f7ff fc02 	bl	22924 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   23120:	a918      	add	r1, sp, #96	; 0x60
   23122:	4623      	mov	r3, r4
   23124:	aa10      	add	r2, sp, #64	; 0x40
   23126:	4608      	mov	r0, r1
   23128:	f7ff fd25 	bl	22b76 <uECC_vli_sub>
   2312c:	e7bf      	b.n	230ae <uECC_vli_modInv+0x88>

0002312e <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   2312e:	7809      	ldrb	r1, [r1, #0]
   23130:	0049      	lsls	r1, r1, #1
   23132:	b249      	sxtb	r1, r1
   23134:	f7ff bcaf 	b.w	22a96 <uECC_vli_isZero>

00023138 <apply_z>:
{
   23138:	b5f0      	push	{r4, r5, r6, r7, lr}
   2313a:	4615      	mov	r5, r2
   2313c:	b089      	sub	sp, #36	; 0x24
   2313e:	461c      	mov	r4, r3
   23140:	4607      	mov	r7, r0
   23142:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   23144:	461a      	mov	r2, r3
   23146:	4629      	mov	r1, r5
   23148:	4668      	mov	r0, sp
   2314a:	f7ff fe02 	bl	22d52 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2314e:	4623      	mov	r3, r4
   23150:	466a      	mov	r2, sp
   23152:	4639      	mov	r1, r7
   23154:	4638      	mov	r0, r7
   23156:	f7ff fdec 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2315a:	4623      	mov	r3, r4
   2315c:	462a      	mov	r2, r5
   2315e:	4669      	mov	r1, sp
   23160:	4668      	mov	r0, sp
   23162:	f7ff fde6 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   23166:	4623      	mov	r3, r4
   23168:	466a      	mov	r2, sp
   2316a:	4631      	mov	r1, r6
   2316c:	4630      	mov	r0, r6
   2316e:	f7ff fde0 	bl	22d32 <uECC_vli_modMult_fast>
}
   23172:	b009      	add	sp, #36	; 0x24
   23174:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023176 <XYcZ_add>:
{
   23176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2317a:	b08a      	sub	sp, #40	; 0x28
   2317c:	4614      	mov	r4, r2
   2317e:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   23182:	4655      	mov	r5, sl
{
   23184:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   23186:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2318a:	9600      	str	r6, [sp, #0]
{
   2318c:	4680      	mov	r8, r0
   2318e:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23190:	462b      	mov	r3, r5
   23192:	4602      	mov	r2, r0
   23194:	4621      	mov	r1, r4
   23196:	a802      	add	r0, sp, #8
   23198:	f7ff fd21 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2319c:	a902      	add	r1, sp, #8
   2319e:	4652      	mov	r2, sl
   231a0:	4608      	mov	r0, r1
   231a2:	f7ff fdd6 	bl	22d52 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   231a6:	4653      	mov	r3, sl
   231a8:	aa02      	add	r2, sp, #8
   231aa:	4641      	mov	r1, r8
   231ac:	4640      	mov	r0, r8
   231ae:	f7ff fdc0 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   231b2:	4653      	mov	r3, sl
   231b4:	aa02      	add	r2, sp, #8
   231b6:	4621      	mov	r1, r4
   231b8:	4620      	mov	r0, r4
   231ba:	f7ff fdba 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   231be:	462b      	mov	r3, r5
   231c0:	464a      	mov	r2, r9
   231c2:	4639      	mov	r1, r7
   231c4:	4638      	mov	r0, r7
   231c6:	9600      	str	r6, [sp, #0]
   231c8:	f7ff fd09 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   231cc:	4652      	mov	r2, sl
   231ce:	4639      	mov	r1, r7
   231d0:	a802      	add	r0, sp, #8
   231d2:	f7ff fdbe 	bl	22d52 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   231d6:	a902      	add	r1, sp, #8
   231d8:	462b      	mov	r3, r5
   231da:	4642      	mov	r2, r8
   231dc:	4608      	mov	r0, r1
   231de:	9600      	str	r6, [sp, #0]
   231e0:	f7ff fcfd 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   231e4:	a902      	add	r1, sp, #8
   231e6:	462b      	mov	r3, r5
   231e8:	4622      	mov	r2, r4
   231ea:	4608      	mov	r0, r1
   231ec:	9600      	str	r6, [sp, #0]
   231ee:	f7ff fcf6 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   231f2:	462b      	mov	r3, r5
   231f4:	4642      	mov	r2, r8
   231f6:	4621      	mov	r1, r4
   231f8:	4620      	mov	r0, r4
   231fa:	9600      	str	r6, [sp, #0]
   231fc:	f7ff fcef 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   23200:	4653      	mov	r3, sl
   23202:	4622      	mov	r2, r4
   23204:	4649      	mov	r1, r9
   23206:	4648      	mov	r0, r9
   23208:	f7ff fd93 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2320c:	462b      	mov	r3, r5
   2320e:	aa02      	add	r2, sp, #8
   23210:	4641      	mov	r1, r8
   23212:	4620      	mov	r0, r4
   23214:	9600      	str	r6, [sp, #0]
   23216:	f7ff fce2 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   2321a:	4653      	mov	r3, sl
   2321c:	4622      	mov	r2, r4
   2321e:	4639      	mov	r1, r7
   23220:	4638      	mov	r0, r7
   23222:	f7ff fd86 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   23226:	462b      	mov	r3, r5
   23228:	464a      	mov	r2, r9
   2322a:	4639      	mov	r1, r7
   2322c:	4638      	mov	r0, r7
   2322e:	9600      	str	r6, [sp, #0]
   23230:	f7ff fcd5 	bl	22bde <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   23234:	4632      	mov	r2, r6
   23236:	a902      	add	r1, sp, #8
   23238:	4620      	mov	r0, r4
   2323a:	f7ff fc66 	bl	22b0a <uECC_vli_set>
}
   2323e:	b00a      	add	sp, #40	; 0x28
   23240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023244 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   23244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23248:	b0b1      	sub	sp, #196	; 0xc4
   2324a:	e9cd 0103 	strd	r0, r1, [sp, #12]
   2324e:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   23250:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   23254:	a818      	add	r0, sp, #96	; 0x60
{
   23256:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   23258:	463a      	mov	r2, r7
{
   2325a:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   2325c:	f7ff fc55 	bl	22b0a <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   23260:	00bb      	lsls	r3, r7, #2
   23262:	9305      	str	r3, [sp, #20]
   23264:	9b04      	ldr	r3, [sp, #16]
   23266:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   2326a:	4619      	mov	r1, r3
   2326c:	a828      	add	r0, sp, #160	; 0xa0
   2326e:	9302      	str	r3, [sp, #8]
   23270:	f7ff fc4b 	bl	22b0a <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   23274:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   23278:	2d00      	cmp	r5, #0
   2327a:	f000 8086 	beq.w	2338a <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   2327e:	4632      	mov	r2, r6
   23280:	4629      	mov	r1, r5
   23282:	a808      	add	r0, sp, #32
   23284:	f7ff fc41 	bl	22b0a <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   23288:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2328c:	4632      	mov	r2, r6
   2328e:	a918      	add	r1, sp, #96	; 0x60
   23290:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   23292:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   23296:	f7ff fc38 	bl	22b0a <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   2329a:	a928      	add	r1, sp, #160	; 0xa0
   2329c:	4648      	mov	r0, r9
   2329e:	f7ff fc34 	bl	22b0a <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   232a2:	4623      	mov	r3, r4
   232a4:	aa08      	add	r2, sp, #32
   232a6:	a818      	add	r0, sp, #96	; 0x60
   232a8:	f7ff ff46 	bl	23138 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   232ac:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   232b0:	4623      	mov	r3, r4
   232b2:	aa08      	add	r2, sp, #32
   232b4:	a928      	add	r1, sp, #160	; 0xa0
   232b6:	a818      	add	r0, sp, #96	; 0x60
   232b8:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   232ba:	4623      	mov	r3, r4
   232bc:	aa08      	add	r2, sp, #32
   232be:	4649      	mov	r1, r9
   232c0:	4640      	mov	r0, r8
   232c2:	f7ff ff39 	bl	23138 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   232c6:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   232ca:	3d02      	subs	r5, #2
   232cc:	b22d      	sxth	r5, r5
   232ce:	2d00      	cmp	r5, #0
   232d0:	dc62      	bgt.n	23398 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   232d2:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   232d6:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   232d8:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   232dc:	ab10      	add	r3, sp, #64	; 0x40
   232de:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   232e2:	43ed      	mvns	r5, r5
   232e4:	ab20      	add	r3, sp, #128	; 0x80
   232e6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   232ea:	f005 0501 	and.w	r5, r5, #1
   232ee:	ab10      	add	r3, sp, #64	; 0x40
   232f0:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   232f4:	ab20      	add	r3, sp, #128	; 0x80
   232f6:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   232fa:	462b      	mov	r3, r5
   232fc:	464a      	mov	r2, r9
   232fe:	4631      	mov	r1, r6
   23300:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   23302:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23306:	f7ff fe00 	bl	22f0a <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2330a:	4653      	mov	r3, sl
   2330c:	aa10      	add	r2, sp, #64	; 0x40
   2330e:	a918      	add	r1, sp, #96	; 0x60
   23310:	a808      	add	r0, sp, #32
   23312:	9700      	str	r7, [sp, #0]
   23314:	f7ff fc63 	bl	22bde <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   23318:	a908      	add	r1, sp, #32
   2331a:	4623      	mov	r3, r4
   2331c:	4632      	mov	r2, r6
   2331e:	4608      	mov	r0, r1
   23320:	f7ff fd07 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   23324:	a908      	add	r1, sp, #32
   23326:	9a04      	ldr	r2, [sp, #16]
   23328:	4623      	mov	r3, r4
   2332a:	4608      	mov	r0, r1
   2332c:	f7ff fd01 	bl	22d32 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   23330:	a908      	add	r1, sp, #32
   23332:	463b      	mov	r3, r7
   23334:	4652      	mov	r2, sl
   23336:	4608      	mov	r0, r1
   23338:	f7ff fe75 	bl	23026 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2333c:	a908      	add	r1, sp, #32
   2333e:	9a02      	ldr	r2, [sp, #8]
   23340:	4623      	mov	r3, r4
   23342:	4608      	mov	r0, r1
   23344:	f7ff fcf5 	bl	22d32 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   23348:	a908      	add	r1, sp, #32
   2334a:	4623      	mov	r3, r4
   2334c:	4642      	mov	r2, r8
   2334e:	4608      	mov	r0, r1
   23350:	f7ff fcef 	bl	22d32 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   23354:	4633      	mov	r3, r6
   23356:	4642      	mov	r2, r8
   23358:	4629      	mov	r1, r5
   2335a:	4648      	mov	r0, r9
   2335c:	9400      	str	r4, [sp, #0]
   2335e:	f7ff ff0a 	bl	23176 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   23362:	4623      	mov	r3, r4
   23364:	aa08      	add	r2, sp, #32
   23366:	a920      	add	r1, sp, #128	; 0x80
   23368:	a810      	add	r0, sp, #64	; 0x40
   2336a:	f7ff fee5 	bl	23138 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2336e:	9803      	ldr	r0, [sp, #12]
   23370:	463a      	mov	r2, r7
   23372:	a910      	add	r1, sp, #64	; 0x40
   23374:	f7ff fbc9 	bl	22b0a <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   23378:	9803      	ldr	r0, [sp, #12]
   2337a:	9b05      	ldr	r3, [sp, #20]
   2337c:	a920      	add	r1, sp, #128	; 0x80
   2337e:	4418      	add	r0, r3
   23380:	f7ff fbc3 	bl	22b0a <uECC_vli_set>
}
   23384:	b031      	add	sp, #196	; 0xc4
   23386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   2338a:	4631      	mov	r1, r6
   2338c:	a808      	add	r0, sp, #32
   2338e:	f7ff fb77 	bl	22a80 <uECC_vli_clear>
		z[0] = 1;
   23392:	2301      	movs	r3, #1
   23394:	9308      	str	r3, [sp, #32]
   23396:	e777      	b.n	23288 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   23398:	4629      	mov	r1, r5
   2339a:	4650      	mov	r0, sl
   2339c:	f7ff fb8a 	bl	22ab4 <uECC_vli_testBit>
   233a0:	fab0 f680 	clz	r6, r0
   233a4:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   233a6:	f1c6 0101 	rsb	r1, r6, #1
   233aa:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   233ae:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   233b2:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   233b6:	4633      	mov	r3, r6
   233b8:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   233bc:	465a      	mov	r2, fp
   233be:	9400      	str	r4, [sp, #0]
   233c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   233c4:	f7ff fda1 	bl	22f0a <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   233c8:	9907      	ldr	r1, [sp, #28]
   233ca:	9806      	ldr	r0, [sp, #24]
   233cc:	9400      	str	r4, [sp, #0]
   233ce:	460b      	mov	r3, r1
   233d0:	4602      	mov	r2, r0
   233d2:	4631      	mov	r1, r6
   233d4:	4658      	mov	r0, fp
   233d6:	f7ff fece 	bl	23176 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   233da:	3d01      	subs	r5, #1
   233dc:	e776      	b.n	232cc <EccPoint_mult+0x88>

000233de <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   233de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   233e2:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   233e6:	f119 081f 	adds.w	r8, r9, #31
{
   233ea:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   233ec:	bf48      	it	mi
   233ee:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   233f2:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   233f4:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   233f8:	3524      	adds	r5, #36	; 0x24
   233fa:	4601      	mov	r1, r0
{
   233fc:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   233fe:	4643      	mov	r3, r8
   23400:	462a      	mov	r2, r5
   23402:	4630      	mov	r0, r6
   23404:	f7ff fa8e 	bl	22924 <uECC_vli_add>
   23408:	4604      	mov	r4, r0
   2340a:	b990      	cbnz	r0, 23432 <regularize_k+0x54>
   2340c:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   23410:	da06      	bge.n	23420 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   23412:	4649      	mov	r1, r9
   23414:	4630      	mov	r0, r6
   23416:	f7ff fb4d 	bl	22ab4 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   2341a:	1e04      	subs	r4, r0, #0
   2341c:	bf18      	it	ne
   2341e:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   23420:	4643      	mov	r3, r8
   23422:	462a      	mov	r2, r5
   23424:	4631      	mov	r1, r6
   23426:	4638      	mov	r0, r7
   23428:	f7ff fa7c 	bl	22924 <uECC_vli_add>

	return carry;
}
   2342c:	4620      	mov	r0, r4
   2342e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   23432:	2401      	movs	r4, #1
   23434:	e7f4      	b.n	23420 <regularize_k+0x42>

00023436 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   23436:	b530      	push	{r4, r5, lr}
   23438:	4614      	mov	r4, r2
   2343a:	b095      	sub	sp, #84	; 0x54
   2343c:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2343e:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   23440:	4623      	mov	r3, r4
{
   23442:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   23444:	a904      	add	r1, sp, #16
   23446:	9102      	str	r1, [sp, #8]
   23448:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2344a:	f7ff ffc8 	bl	233de <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2344e:	fab0 f380 	clz	r3, r0
   23452:	095b      	lsrs	r3, r3, #5
   23454:	aa14      	add	r2, sp, #80	; 0x50
   23456:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2345a:	8863      	ldrh	r3, [r4, #2]
   2345c:	9401      	str	r4, [sp, #4]
   2345e:	3301      	adds	r3, #1
   23460:	b21b      	sxth	r3, r3
   23462:	9300      	str	r3, [sp, #0]
   23464:	f852 2c48 	ldr.w	r2, [r2, #-72]
   23468:	2300      	movs	r3, #0
   2346a:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2346e:	4628      	mov	r0, r5
   23470:	f7ff fee8 	bl	23244 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   23474:	4621      	mov	r1, r4
   23476:	4628      	mov	r0, r5
   23478:	f7ff fe59 	bl	2312e <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   2347c:	fab0 f080 	clz	r0, r0
   23480:	0940      	lsrs	r0, r0, #5
   23482:	b015      	add	sp, #84	; 0x54
   23484:	bd30      	pop	{r4, r5, pc}

00023486 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   23486:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   23488:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2348a:	1e4f      	subs	r7, r1, #1
   2348c:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   2348e:	428c      	cmp	r4, r1
   23490:	f105 0501 	add.w	r5, r5, #1
   23494:	db00      	blt.n	23498 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   23496:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   23498:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2349a:	f023 0603 	bic.w	r6, r3, #3
   2349e:	f003 0303 	and.w	r3, r3, #3
   234a2:	5996      	ldr	r6, [r2, r6]
   234a4:	00db      	lsls	r3, r3, #3
   234a6:	fa26 f303 	lsr.w	r3, r6, r3
   234aa:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   234ac:	e7ee      	b.n	2348c <uECC_vli_nativeToBytes+0x6>

000234ae <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   234ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   234b0:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   234b2:	1cd1      	adds	r1, r2, #3
   234b4:	bf48      	it	mi
   234b6:	1d91      	addmi	r1, r2, #6
   234b8:	f341 0187 	sbfx	r1, r1, #2, #8
{
   234bc:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   234be:	f7ff fadf 	bl	22a80 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   234c2:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   234c4:	1e67      	subs	r7, r4, #1
   234c6:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   234c8:	42a2      	cmp	r2, r4
   234ca:	f105 0501 	add.w	r5, r5, #1
   234ce:	db00      	blt.n	234d2 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   234d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   234d2:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   234d4:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   234d8:	5cb2      	ldrb	r2, [r6, r2]
   234da:	f003 0303 	and.w	r3, r3, #3
   234de:	00db      	lsls	r3, r3, #3
   234e0:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   234e4:	5842      	ldr	r2, [r0, r1]
   234e6:	431a      	orrs	r2, r3
   234e8:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   234ea:	e7ec      	b.n	234c6 <uECC_vli_bytesToNative+0x18>

000234ec <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   234ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   234ee:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   234f0:	f991 6000 	ldrsb.w	r6, [r1]
{
   234f4:	4605      	mov	r5, r0
   234f6:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   234f8:	f7ff fe19 	bl	2312e <EccPoint_isZero>
   234fc:	bb28      	cbnz	r0, 2354a <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   234fe:	1d27      	adds	r7, r4, #4
   23500:	4632      	mov	r2, r6
   23502:	4629      	mov	r1, r5
   23504:	4638      	mov	r0, r7
   23506:	f7ff fb0c 	bl	22b22 <uECC_vli_cmp_unsafe>
   2350a:	2801      	cmp	r0, #1
   2350c:	d120      	bne.n	23550 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   2350e:	4632      	mov	r2, r6
   23510:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   23514:	4638      	mov	r0, r7
   23516:	f7ff fb04 	bl	22b22 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2351a:	2801      	cmp	r0, #1
   2351c:	d118      	bne.n	23550 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2351e:	4622      	mov	r2, r4
   23520:	4668      	mov	r0, sp
   23522:	f7ff fc16 	bl	22d52 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   23526:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2352a:	4622      	mov	r2, r4
   2352c:	4629      	mov	r1, r5
   2352e:	a808      	add	r0, sp, #32
   23530:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   23532:	4632      	mov	r2, r6
   23534:	a908      	add	r1, sp, #32
   23536:	4668      	mov	r0, sp
   23538:	f7ff fb0a 	bl	22b50 <uECC_vli_equal>
		return -3;
   2353c:	2800      	cmp	r0, #0
   2353e:	bf0c      	ite	eq
   23540:	2000      	moveq	r0, #0
   23542:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   23546:	b011      	add	sp, #68	; 0x44
   23548:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   2354a:	f04f 30ff 	mov.w	r0, #4294967295
   2354e:	e7fa      	b.n	23546 <uECC_valid_point+0x5a>
		return -2;
   23550:	f06f 0001 	mvn.w	r0, #1
   23554:	e7f7      	b.n	23546 <uECC_valid_point+0x5a>

00023556 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   23556:	b570      	push	{r4, r5, r6, lr}
   23558:	460c      	mov	r4, r1
   2355a:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   2355c:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2355e:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   23562:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   23564:	4601      	mov	r1, r0
   23566:	4668      	mov	r0, sp
   23568:	f7ff ffa1 	bl	234ae <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   2356c:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   23570:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   23574:	18a9      	adds	r1, r5, r2
   23576:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   2357a:	f7ff ff98 	bl	234ae <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2357e:	2210      	movs	r2, #16
   23580:	4631      	mov	r1, r6
   23582:	4668      	mov	r0, sp
   23584:	f7ff facd 	bl	22b22 <uECC_vli_cmp_unsafe>
   23588:	b128      	cbz	r0, 23596 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   2358a:	4621      	mov	r1, r4
   2358c:	4668      	mov	r0, sp
   2358e:	f7ff ffad 	bl	234ec <uECC_valid_point>
}
   23592:	b010      	add	sp, #64	; 0x40
   23594:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   23596:	f06f 0003 	mvn.w	r0, #3
   2359a:	e7fa      	b.n	23592 <uECC_valid_public_key+0x3c>

0002359c <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2359c:	78cb      	ldrb	r3, [r1, #3]
   2359e:	7802      	ldrb	r2, [r0, #0]
   235a0:	4053      	eors	r3, r2
   235a2:	7003      	strb	r3, [r0, #0]
   235a4:	884b      	ldrh	r3, [r1, #2]
   235a6:	7842      	ldrb	r2, [r0, #1]
   235a8:	4053      	eors	r3, r2
   235aa:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   235ac:	680a      	ldr	r2, [r1, #0]
   235ae:	7883      	ldrb	r3, [r0, #2]
   235b0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   235b4:	7083      	strb	r3, [r0, #2]
   235b6:	680a      	ldr	r2, [r1, #0]
   235b8:	78c3      	ldrb	r3, [r0, #3]
   235ba:	4053      	eors	r3, r2
   235bc:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   235be:	79cb      	ldrb	r3, [r1, #7]
   235c0:	7902      	ldrb	r2, [r0, #4]
   235c2:	4053      	eors	r3, r2
   235c4:	7103      	strb	r3, [r0, #4]
   235c6:	88cb      	ldrh	r3, [r1, #6]
   235c8:	7942      	ldrb	r2, [r0, #5]
   235ca:	4053      	eors	r3, r2
   235cc:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   235ce:	684a      	ldr	r2, [r1, #4]
   235d0:	7983      	ldrb	r3, [r0, #6]
   235d2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   235d6:	7183      	strb	r3, [r0, #6]
   235d8:	684a      	ldr	r2, [r1, #4]
   235da:	79c3      	ldrb	r3, [r0, #7]
   235dc:	4053      	eors	r3, r2
   235de:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   235e0:	7acb      	ldrb	r3, [r1, #11]
   235e2:	7a02      	ldrb	r2, [r0, #8]
   235e4:	4053      	eors	r3, r2
   235e6:	7203      	strb	r3, [r0, #8]
   235e8:	7a42      	ldrb	r2, [r0, #9]
   235ea:	894b      	ldrh	r3, [r1, #10]
   235ec:	4053      	eors	r3, r2
   235ee:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   235f0:	688a      	ldr	r2, [r1, #8]
   235f2:	7a83      	ldrb	r3, [r0, #10]
   235f4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   235f8:	7283      	strb	r3, [r0, #10]
   235fa:	688a      	ldr	r2, [r1, #8]
   235fc:	7ac3      	ldrb	r3, [r0, #11]
   235fe:	4053      	eors	r3, r2
   23600:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   23602:	7bcb      	ldrb	r3, [r1, #15]
   23604:	7b02      	ldrb	r2, [r0, #12]
   23606:	4053      	eors	r3, r2
   23608:	7303      	strb	r3, [r0, #12]
   2360a:	89cb      	ldrh	r3, [r1, #14]
   2360c:	7b42      	ldrb	r2, [r0, #13]
   2360e:	4053      	eors	r3, r2
   23610:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   23612:	68ca      	ldr	r2, [r1, #12]
   23614:	7b83      	ldrb	r3, [r0, #14]
   23616:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2361a:	7383      	strb	r3, [r0, #14]
   2361c:	68ca      	ldr	r2, [r1, #12]
   2361e:	7bc3      	ldrb	r3, [r0, #15]
   23620:	4053      	eors	r3, r2
   23622:	73c3      	strb	r3, [r0, #15]
}
   23624:	4770      	bx	lr

00023626 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   23626:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   23628:	7802      	ldrb	r2, [r0, #0]
   2362a:	f88d 2000 	strb.w	r2, [sp]
   2362e:	7942      	ldrb	r2, [r0, #5]
   23630:	f88d 2001 	strb.w	r2, [sp, #1]
   23634:	7a82      	ldrb	r2, [r0, #10]
   23636:	f88d 2002 	strb.w	r2, [sp, #2]
   2363a:	7bc2      	ldrb	r2, [r0, #15]
   2363c:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   23640:	7902      	ldrb	r2, [r0, #4]
   23642:	f88d 2004 	strb.w	r2, [sp, #4]
   23646:	7a42      	ldrb	r2, [r0, #9]
   23648:	f88d 2005 	strb.w	r2, [sp, #5]
   2364c:	7b82      	ldrb	r2, [r0, #14]
   2364e:	f88d 2006 	strb.w	r2, [sp, #6]
   23652:	78c2      	ldrb	r2, [r0, #3]
   23654:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   23658:	7a02      	ldrb	r2, [r0, #8]
   2365a:	f88d 2008 	strb.w	r2, [sp, #8]
   2365e:	7b42      	ldrb	r2, [r0, #13]
   23660:	f88d 2009 	strb.w	r2, [sp, #9]
   23664:	7882      	ldrb	r2, [r0, #2]
   23666:	f88d 200a 	strb.w	r2, [sp, #10]
   2366a:	79c2      	ldrb	r2, [r0, #7]
   2366c:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   23670:	7b02      	ldrb	r2, [r0, #12]
   23672:	f88d 200c 	strb.w	r2, [sp, #12]
   23676:	7842      	ldrb	r2, [r0, #1]
   23678:	7ac3      	ldrb	r3, [r0, #11]
   2367a:	f88d 200d 	strb.w	r2, [sp, #13]
   2367e:	7982      	ldrb	r2, [r0, #6]
   23680:	f88d 200e 	strb.w	r2, [sp, #14]
   23684:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   23688:	2310      	movs	r3, #16
   2368a:	466a      	mov	r2, sp
   2368c:	4619      	mov	r1, r3
   2368e:	f7ff f885 	bl	2279c <_copy>
}
   23692:	b005      	add	sp, #20
   23694:	f85d fb04 	ldr.w	pc, [sp], #4

00023698 <mult_row_column>:
{
   23698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2369a:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2369c:	7808      	ldrb	r0, [r1, #0]
{
   2369e:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   236a0:	f7ff f88b 	bl	227ba <_double_byte>
   236a4:	4605      	mov	r5, r0
   236a6:	7860      	ldrb	r0, [r4, #1]
   236a8:	f7ff f887 	bl	227ba <_double_byte>
   236ac:	78a2      	ldrb	r2, [r4, #2]
   236ae:	7863      	ldrb	r3, [r4, #1]
   236b0:	4053      	eors	r3, r2
   236b2:	78e2      	ldrb	r2, [r4, #3]
   236b4:	4053      	eors	r3, r2
   236b6:	405d      	eors	r5, r3
   236b8:	4045      	eors	r5, r0
   236ba:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   236bc:	7860      	ldrb	r0, [r4, #1]
   236be:	7827      	ldrb	r7, [r4, #0]
   236c0:	f7ff f87b 	bl	227ba <_double_byte>
   236c4:	4605      	mov	r5, r0
   236c6:	78a0      	ldrb	r0, [r4, #2]
   236c8:	f7ff f877 	bl	227ba <_double_byte>
   236cc:	78a3      	ldrb	r3, [r4, #2]
   236ce:	405f      	eors	r7, r3
   236d0:	78e3      	ldrb	r3, [r4, #3]
   236d2:	405f      	eors	r7, r3
   236d4:	407d      	eors	r5, r7
   236d6:	4045      	eors	r5, r0
   236d8:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   236da:	78a0      	ldrb	r0, [r4, #2]
   236dc:	7865      	ldrb	r5, [r4, #1]
   236de:	7827      	ldrb	r7, [r4, #0]
   236e0:	f7ff f86b 	bl	227ba <_double_byte>
   236e4:	406f      	eors	r7, r5
   236e6:	4605      	mov	r5, r0
   236e8:	78e0      	ldrb	r0, [r4, #3]
   236ea:	f7ff f866 	bl	227ba <_double_byte>
   236ee:	78e3      	ldrb	r3, [r4, #3]
   236f0:	405f      	eors	r7, r3
   236f2:	407d      	eors	r5, r7
   236f4:	4045      	eors	r5, r0
   236f6:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   236f8:	7820      	ldrb	r0, [r4, #0]
   236fa:	f7ff f85e 	bl	227ba <_double_byte>
   236fe:	7863      	ldrb	r3, [r4, #1]
   23700:	7825      	ldrb	r5, [r4, #0]
   23702:	405d      	eors	r5, r3
   23704:	78a3      	ldrb	r3, [r4, #2]
   23706:	405d      	eors	r5, r3
   23708:	4045      	eors	r5, r0
   2370a:	78e0      	ldrb	r0, [r4, #3]
   2370c:	f7ff f855 	bl	227ba <_double_byte>
   23710:	b2ed      	uxtb	r5, r5
   23712:	4045      	eors	r5, r0
   23714:	70f5      	strb	r5, [r6, #3]
}
   23716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023718 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   23718:	b570      	push	{r4, r5, r6, lr}
   2371a:	4614      	mov	r4, r2
   2371c:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2371e:	4605      	mov	r5, r0
   23720:	2800      	cmp	r0, #0
   23722:	d049      	beq.n	237b8 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   23724:	2900      	cmp	r1, #0
   23726:	d049      	beq.n	237bc <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   23728:	2a00      	cmp	r2, #0
   2372a:	d049      	beq.n	237c0 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2372c:	2310      	movs	r3, #16
   2372e:	460a      	mov	r2, r1
   23730:	4668      	mov	r0, sp
   23732:	4619      	mov	r1, r3
   23734:	f7ff f832 	bl	2279c <_copy>
	add_round_key(state, s->words);
   23738:	4621      	mov	r1, r4
   2373a:	4668      	mov	r0, sp
   2373c:	f7ff ff2e 	bl	2359c <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   23740:	3410      	adds	r4, #16
   23742:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   23746:	4668      	mov	r0, sp
   23748:	f7e3 fb04 	bl	6d54 <sub_bytes>
		shift_rows(state);
   2374c:	4668      	mov	r0, sp
   2374e:	f7ff ff6a 	bl	23626 <shift_rows>
	mult_row_column(t, s);
   23752:	4669      	mov	r1, sp
   23754:	a804      	add	r0, sp, #16
   23756:	f7ff ff9f 	bl	23698 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2375a:	a901      	add	r1, sp, #4
   2375c:	a805      	add	r0, sp, #20
   2375e:	f7ff ff9b 	bl	23698 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   23762:	a902      	add	r1, sp, #8
   23764:	a806      	add	r0, sp, #24
   23766:	f7ff ff97 	bl	23698 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2376a:	a903      	add	r1, sp, #12
   2376c:	a807      	add	r0, sp, #28
   2376e:	f7ff ff93 	bl	23698 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   23772:	2310      	movs	r3, #16
   23774:	4619      	mov	r1, r3
   23776:	eb0d 0203 	add.w	r2, sp, r3
   2377a:	4668      	mov	r0, sp
   2377c:	f7ff f80e 	bl	2279c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   23780:	4621      	mov	r1, r4
   23782:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   23784:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   23786:	f7ff ff09 	bl	2359c <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2378a:	42a6      	cmp	r6, r4
   2378c:	d1db      	bne.n	23746 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2378e:	f7e3 fae1 	bl	6d54 <sub_bytes>
	shift_rows(state);
   23792:	4668      	mov	r0, sp
   23794:	f7ff ff47 	bl	23626 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   23798:	4631      	mov	r1, r6
   2379a:	4668      	mov	r0, sp
   2379c:	f7ff fefe 	bl	2359c <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   237a0:	2310      	movs	r3, #16
   237a2:	4619      	mov	r1, r3
   237a4:	466a      	mov	r2, sp
   237a6:	4628      	mov	r0, r5
   237a8:	f7fe fff8 	bl	2279c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   237ac:	4668      	mov	r0, sp
   237ae:	2210      	movs	r2, #16
   237b0:	2100      	movs	r1, #0
   237b2:	f7ff f800 	bl	227b6 <_set>

	return TC_CRYPTO_SUCCESS;
   237b6:	2001      	movs	r0, #1
}
   237b8:	b008      	add	sp, #32
   237ba:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   237bc:	4608      	mov	r0, r1
   237be:	e7fb      	b.n	237b8 <tc_aes_encrypt+0xa0>
   237c0:	4610      	mov	r0, r2
   237c2:	e7f9      	b.n	237b8 <tc_aes_encrypt+0xa0>

000237c4 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   237c4:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   237c6:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   237c8:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   237ca:	f912 3b10 	ldrsb.w	r3, [r2], #16
   237ce:	2b00      	cmp	r3, #0
   237d0:	bfb4      	ite	lt
   237d2:	2387      	movlt	r3, #135	; 0x87
   237d4:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   237d6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   237da:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   237de:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   237e0:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   237e4:	d002      	beq.n	237ec <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   237e6:	7813      	ldrb	r3, [r2, #0]
   237e8:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   237ea:	e7f4      	b.n	237d6 <gf_double+0x12>
	}
}
   237ec:	bd10      	pop	{r4, pc}

000237ee <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   237ee:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   237f0:	b120      	cbz	r0, 237fc <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   237f2:	2258      	movs	r2, #88	; 0x58
   237f4:	2100      	movs	r1, #0
   237f6:	f7fe ffde 	bl	227b6 <_set>
   237fa:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   237fc:	bd08      	pop	{r3, pc}

000237fe <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   237fe:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   23800:	4604      	mov	r4, r0
   23802:	b188      	cbz	r0, 23828 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23804:	2210      	movs	r2, #16
   23806:	2100      	movs	r1, #0
   23808:	f7fe ffd5 	bl	227b6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2380c:	2210      	movs	r2, #16
   2380e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   23812:	2100      	movs	r1, #0
   23814:	f7fe ffcf 	bl	227b6 <_set>
	s->leftover_offset = 0;
   23818:	2300      	movs	r3, #0
   2381a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2381c:	2200      	movs	r2, #0
   2381e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   23822:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   23826:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23828:	bd10      	pop	{r4, pc}

0002382a <tc_cmac_setup>:
{
   2382a:	b570      	push	{r4, r5, r6, lr}
   2382c:	460d      	mov	r5, r1
   2382e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   23830:	4604      	mov	r4, r0
   23832:	b310      	cbz	r0, 2387a <tc_cmac_setup+0x50>
   23834:	b311      	cbz	r1, 2387c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   23836:	2258      	movs	r2, #88	; 0x58
   23838:	2100      	movs	r1, #0
   2383a:	f7fe ffbc 	bl	227b6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2383e:	4629      	mov	r1, r5
	s->sched = sched;
   23840:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   23842:	4630      	mov	r0, r6
   23844:	f7e3 fa92 	bl	6d6c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23848:	2210      	movs	r2, #16
   2384a:	2100      	movs	r1, #0
   2384c:	4620      	mov	r0, r4
   2384e:	f7fe ffb2 	bl	227b6 <_set>
	gf_double (s->K1, s->iv);
   23852:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   23856:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23858:	4621      	mov	r1, r4
   2385a:	4620      	mov	r0, r4
   2385c:	f7ff ff5c 	bl	23718 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   23860:	4621      	mov	r1, r4
   23862:	4628      	mov	r0, r5
   23864:	f7ff ffae 	bl	237c4 <gf_double>
	gf_double (s->K2, s->K1);
   23868:	4629      	mov	r1, r5
   2386a:	f104 0020 	add.w	r0, r4, #32
   2386e:	f7ff ffa9 	bl	237c4 <gf_double>
	tc_cmac_init(s);
   23872:	4620      	mov	r0, r4
   23874:	f7ff ffc3 	bl	237fe <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   23878:	2001      	movs	r0, #1
}
   2387a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2387c:	4608      	mov	r0, r1
   2387e:	e7fc      	b.n	2387a <tc_cmac_setup+0x50>

00023880 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   23880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23884:	460d      	mov	r5, r1
   23886:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   23888:	4604      	mov	r4, r0
   2388a:	2800      	cmp	r0, #0
   2388c:	d061      	beq.n	23952 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2388e:	b912      	cbnz	r2, 23896 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   23890:	2001      	movs	r0, #1
}
   23892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   23896:	2900      	cmp	r1, #0
   23898:	d05b      	beq.n	23952 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   2389a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2389e:	ea53 0102 	orrs.w	r1, r3, r2
   238a2:	d056      	beq.n	23952 <tc_cmac_update+0xd2>
	s->countdown--;
   238a4:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   238a6:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   238aa:	f142 32ff 	adc.w	r2, r2, #4294967295
   238ae:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   238b2:	f1b8 0f00 	cmp.w	r8, #0
   238b6:	d02a      	beq.n	2390e <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   238b8:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   238bc:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   238c0:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   238c2:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   238c4:	d208      	bcs.n	238d8 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   238c6:	462a      	mov	r2, r5
   238c8:	4633      	mov	r3, r6
   238ca:	4631      	mov	r1, r6
   238cc:	f7fe ff66 	bl	2279c <_copy>
			s->leftover_offset += data_length;
   238d0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   238d2:	4432      	add	r2, r6
   238d4:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   238d6:	e7db      	b.n	23890 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   238d8:	463b      	mov	r3, r7
   238da:	462a      	mov	r2, r5
   238dc:	4639      	mov	r1, r7
   238de:	f7fe ff5d 	bl	2279c <_copy>
		data_length -= remaining_space;
   238e2:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   238e4:	2300      	movs	r3, #0
   238e6:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   238e8:	4446      	add	r6, r8
		data += remaining_space;
   238ea:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   238ec:	1e63      	subs	r3, r4, #1
   238ee:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   238f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   238f6:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   238fa:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   238fc:	ea82 0200 	eor.w	r2, r2, r0
   23900:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23902:	d1f6      	bne.n	238f2 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   23904:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23906:	4621      	mov	r1, r4
   23908:	4620      	mov	r0, r4
   2390a:	f7ff ff05 	bl	23718 <tc_aes_encrypt>
   2390e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   23912:	2e10      	cmp	r6, #16
   23914:	d80a      	bhi.n	2392c <tc_cmac_update+0xac>
	if (data_length > 0) {
   23916:	2e00      	cmp	r6, #0
   23918:	d0ba      	beq.n	23890 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   2391a:	4633      	mov	r3, r6
   2391c:	462a      	mov	r2, r5
   2391e:	4631      	mov	r1, r6
   23920:	f104 0030 	add.w	r0, r4, #48	; 0x30
   23924:	f7fe ff3a 	bl	2279c <_copy>
		s->leftover_offset = data_length;
   23928:	6466      	str	r6, [r4, #68]	; 0x44
   2392a:	e7b1      	b.n	23890 <tc_cmac_update+0x10>
   2392c:	1e63      	subs	r3, r4, #1
   2392e:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   23930:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23934:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23938:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2393a:	ea82 0200 	eor.w	r2, r2, r0
   2393e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23940:	d1f6      	bne.n	23930 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   23942:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23944:	4621      	mov	r1, r4
   23946:	4620      	mov	r0, r4
   23948:	f7ff fee6 	bl	23718 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2394c:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2394e:	3e10      	subs	r6, #16
   23950:	e7df      	b.n	23912 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   23952:	2000      	movs	r0, #0
   23954:	e79d      	b.n	23892 <tc_cmac_update+0x12>

00023956 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   23956:	b570      	push	{r4, r5, r6, lr}
   23958:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2395a:	4605      	mov	r5, r0
   2395c:	b1e8      	cbz	r0, 2399a <tc_cmac_final+0x44>
   2395e:	b369      	cbz	r1, 239bc <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   23960:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   23962:	2a10      	cmp	r2, #16
   23964:	d11a      	bne.n	2399c <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   23966:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23968:	1e63      	subs	r3, r4, #1
   2396a:	3901      	subs	r1, #1
   2396c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   23970:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23974:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   23978:	4072      	eors	r2, r6
   2397a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2397e:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   23980:	ea82 0206 	eor.w	r2, r2, r6
   23984:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   23986:	d1f3      	bne.n	23970 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   23988:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2398a:	4621      	mov	r1, r4
   2398c:	4628      	mov	r0, r5
   2398e:	f7ff fec3 	bl	23718 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   23992:	4620      	mov	r0, r4
   23994:	f7ff ff2b 	bl	237ee <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   23998:	2001      	movs	r0, #1
}
   2399a:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2399c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   239a0:	2100      	movs	r1, #0
   239a2:	f1c2 0210 	rsb	r2, r2, #16
   239a6:	4420      	add	r0, r4
   239a8:	f7fe ff05 	bl	227b6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   239ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
   239ae:	4423      	add	r3, r4
   239b0:	2280      	movs	r2, #128	; 0x80
   239b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   239b6:	f104 0120 	add.w	r1, r4, #32
   239ba:	e7d5      	b.n	23968 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   239bc:	4608      	mov	r0, r1
   239be:	e7ec      	b.n	2399a <tc_cmac_final+0x44>

000239c0 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   239c0:	2100      	movs	r1, #0
   239c2:	2001      	movs	r0, #1
   239c4:	f7e3 bb3c 	b.w	7040 <z_arm_fatal_error>

000239c8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   239c8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   239ca:	6800      	ldr	r0, [r0, #0]
   239cc:	f7e3 bb38 	b.w	7040 <z_arm_fatal_error>

000239d0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   239d0:	b508      	push	{r3, lr}
	handler();
   239d2:	f7e3 fb6d 	bl	70b0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   239d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   239da:	f7e3 bdef 	b.w	75bc <z_arm_exc_exit>

000239de <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   239de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   239e2:	4684      	mov	ip, r0
   239e4:	4688      	mov	r8, r1
	register const char *s = nptr;
   239e6:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   239e8:	4621      	mov	r1, r4
   239ea:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   239ee:	2b20      	cmp	r3, #32
   239f0:	d0fa      	beq.n	239e8 <strtol+0xa>
   239f2:	f1a3 0009 	sub.w	r0, r3, #9
   239f6:	2804      	cmp	r0, #4
   239f8:	d9f6      	bls.n	239e8 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   239fa:	2b2d      	cmp	r3, #45	; 0x2d
   239fc:	d12d      	bne.n	23a5a <strtol+0x7c>
		neg = 1;
		c = *s++;
   239fe:	784b      	ldrb	r3, [r1, #1]
   23a00:	1c8c      	adds	r4, r1, #2
		neg = 1;
   23a02:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   23a04:	2a00      	cmp	r2, #0
   23a06:	d05a      	beq.n	23abe <strtol+0xe0>
   23a08:	2a10      	cmp	r2, #16
   23a0a:	d109      	bne.n	23a20 <strtol+0x42>
   23a0c:	2b30      	cmp	r3, #48	; 0x30
   23a0e:	d107      	bne.n	23a20 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   23a10:	7823      	ldrb	r3, [r4, #0]
   23a12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   23a16:	2b58      	cmp	r3, #88	; 0x58
   23a18:	d14c      	bne.n	23ab4 <strtol+0xd6>
		c = s[1];
   23a1a:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   23a1c:	2210      	movs	r2, #16
		s += 2;
   23a1e:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   23a20:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   23a24:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   23a26:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   23a28:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   23a2c:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   23a2e:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   23a32:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   23a36:	2d09      	cmp	r5, #9
   23a38:	d815      	bhi.n	23a66 <strtol+0x88>
			c -= '0';
   23a3a:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   23a3c:	429a      	cmp	r2, r3
   23a3e:	dd22      	ble.n	23a86 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   23a40:	1c75      	adds	r5, r6, #1
   23a42:	d007      	beq.n	23a54 <strtol+0x76>
   23a44:	4570      	cmp	r0, lr
   23a46:	d81b      	bhi.n	23a80 <strtol+0xa2>
   23a48:	d101      	bne.n	23a4e <strtol+0x70>
   23a4a:	454b      	cmp	r3, r9
   23a4c:	dc18      	bgt.n	23a80 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   23a4e:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   23a52:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   23a54:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   23a58:	e7eb      	b.n	23a32 <strtol+0x54>
	} else if (c == '+') {
   23a5a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   23a5c:	bf04      	itt	eq
   23a5e:	784b      	ldrbeq	r3, [r1, #1]
   23a60:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   23a62:	2100      	movs	r1, #0
   23a64:	e7ce      	b.n	23a04 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   23a66:	f043 0520 	orr.w	r5, r3, #32
   23a6a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   23a6c:	2d19      	cmp	r5, #25
   23a6e:	d80a      	bhi.n	23a86 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   23a70:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   23a74:	2d1a      	cmp	r5, #26
   23a76:	bf34      	ite	cc
   23a78:	2537      	movcc	r5, #55	; 0x37
   23a7a:	2557      	movcs	r5, #87	; 0x57
   23a7c:	1b5b      	subs	r3, r3, r5
   23a7e:	e7dd      	b.n	23a3c <strtol+0x5e>
			any = -1;
   23a80:	f04f 36ff 	mov.w	r6, #4294967295
   23a84:	e7e6      	b.n	23a54 <strtol+0x76>
		}
	}

	if (any < 0) {
   23a86:	1c73      	adds	r3, r6, #1
   23a88:	d109      	bne.n	23a9e <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   23a8a:	f7fb fa33 	bl	1eef4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   23a8e:	2326      	movs	r3, #38	; 0x26
   23a90:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   23a92:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   23a94:	f1b8 0f00 	cmp.w	r8, #0
   23a98:	d107      	bne.n	23aaa <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   23a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   23a9e:	b101      	cbz	r1, 23aa2 <strtol+0xc4>
		acc = -acc;
   23aa0:	4240      	negs	r0, r0
	if (endptr != NULL) {
   23aa2:	f1b8 0f00 	cmp.w	r8, #0
   23aa6:	d0f8      	beq.n	23a9a <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   23aa8:	b10e      	cbz	r6, 23aae <strtol+0xd0>
   23aaa:	f104 3cff 	add.w	ip, r4, #4294967295
   23aae:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   23ab2:	e7f2      	b.n	23a9a <strtol+0xbc>
	if (base == 0) {
   23ab4:	2330      	movs	r3, #48	; 0x30
   23ab6:	2a00      	cmp	r2, #0
   23ab8:	d1b2      	bne.n	23a20 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   23aba:	2208      	movs	r2, #8
   23abc:	e7b0      	b.n	23a20 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   23abe:	2b30      	cmp	r3, #48	; 0x30
   23ac0:	d0a6      	beq.n	23a10 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   23ac2:	220a      	movs	r2, #10
   23ac4:	e7ac      	b.n	23a20 <strtol+0x42>

00023ac6 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   23ac6:	3901      	subs	r1, #1
   23ac8:	4603      	mov	r3, r0
   23aca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   23ace:	b90a      	cbnz	r2, 23ad4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   23ad0:	701a      	strb	r2, [r3, #0]

	return dest;
}
   23ad2:	4770      	bx	lr
		*d = *s;
   23ad4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   23ad8:	e7f7      	b.n	23aca <strcpy+0x4>

00023ada <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   23ada:	b570      	push	{r4, r5, r6, lr}
   23adc:	4605      	mov	r5, r0
   23ade:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   23ae0:	b142      	cbz	r2, 23af4 <strncpy+0x1a>
   23ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   23ae6:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   23ae8:	b92c      	cbnz	r4, 23af6 <strncpy+0x1c>
   23aea:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   23aec:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   23af0:	429a      	cmp	r2, r3
   23af2:	d1fb      	bne.n	23aec <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   23af4:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   23af6:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   23afa:	4632      	mov	r2, r6
   23afc:	e7ef      	b.n	23ade <strncpy+0x4>

00023afe <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   23afe:	4603      	mov	r3, r0
	size_t n = 0;
   23b00:	2000      	movs	r0, #0

	while (*s != '\0') {
   23b02:	5c1a      	ldrb	r2, [r3, r0]
   23b04:	b902      	cbnz	r2, 23b08 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   23b06:	4770      	bx	lr
		n++;
   23b08:	3001      	adds	r0, #1
   23b0a:	e7fa      	b.n	23b02 <strlen+0x4>

00023b0c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   23b0c:	4603      	mov	r3, r0
	size_t n = 0;
   23b0e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   23b10:	5c1a      	ldrb	r2, [r3, r0]
   23b12:	b10a      	cbz	r2, 23b18 <strnlen+0xc>
   23b14:	4288      	cmp	r0, r1
   23b16:	d100      	bne.n	23b1a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   23b18:	4770      	bx	lr
		n++;
   23b1a:	3001      	adds	r0, #1
   23b1c:	e7f8      	b.n	23b10 <strnlen+0x4>

00023b1e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   23b1e:	1e43      	subs	r3, r0, #1
   23b20:	3901      	subs	r1, #1
   23b22:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23b26:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   23b2a:	4282      	cmp	r2, r0
   23b2c:	d101      	bne.n	23b32 <strcmp+0x14>
   23b2e:	2a00      	cmp	r2, #0
   23b30:	d1f7      	bne.n	23b22 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   23b32:	1a10      	subs	r0, r2, r0
   23b34:	4770      	bx	lr

00023b36 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   23b36:	b510      	push	{r4, lr}
   23b38:	3901      	subs	r1, #1
   23b3a:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   23b3c:	4282      	cmp	r2, r0
   23b3e:	d009      	beq.n	23b54 <strncmp+0x1e>
   23b40:	7803      	ldrb	r3, [r0, #0]
   23b42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   23b46:	42a3      	cmp	r3, r4
   23b48:	d100      	bne.n	23b4c <strncmp+0x16>
   23b4a:	b90b      	cbnz	r3, 23b50 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   23b4c:	1b18      	subs	r0, r3, r4
   23b4e:	e002      	b.n	23b56 <strncmp+0x20>
		s1++;
   23b50:	3001      	adds	r0, #1
		n--;
   23b52:	e7f3      	b.n	23b3c <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   23b54:	2000      	movs	r0, #0
}
   23b56:	bd10      	pop	{r4, pc}

00023b58 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   23b58:	b510      	push	{r4, lr}
   23b5a:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   23b5c:	b15a      	cbz	r2, 23b76 <memcmp+0x1e>
   23b5e:	3901      	subs	r1, #1
   23b60:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   23b62:	f813 0b01 	ldrb.w	r0, [r3], #1
   23b66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   23b6a:	42a3      	cmp	r3, r4
   23b6c:	d001      	beq.n	23b72 <memcmp+0x1a>
   23b6e:	4290      	cmp	r0, r2
   23b70:	d0f7      	beq.n	23b62 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   23b72:	1a80      	subs	r0, r0, r2
}
   23b74:	bd10      	pop	{r4, pc}
		return 0;
   23b76:	4610      	mov	r0, r2
   23b78:	e7fc      	b.n	23b74 <memcmp+0x1c>

00023b7a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   23b7a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   23b7c:	ea81 0400 	eor.w	r4, r1, r0
   23b80:	07a5      	lsls	r5, r4, #30
   23b82:	4603      	mov	r3, r0
   23b84:	d00b      	beq.n	23b9e <memcpy+0x24>
   23b86:	3b01      	subs	r3, #1
   23b88:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   23b8a:	4291      	cmp	r1, r2
   23b8c:	d11b      	bne.n	23bc6 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   23b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   23b90:	2a00      	cmp	r2, #0
   23b92:	d0fc      	beq.n	23b8e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   23b94:	f811 4b01 	ldrb.w	r4, [r1], #1
   23b98:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   23b9c:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   23b9e:	079c      	lsls	r4, r3, #30
   23ba0:	d1f6      	bne.n	23b90 <memcpy+0x16>
   23ba2:	f022 0403 	bic.w	r4, r2, #3
   23ba6:	1f1d      	subs	r5, r3, #4
   23ba8:	0896      	lsrs	r6, r2, #2
   23baa:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   23bac:	42b9      	cmp	r1, r7
   23bae:	d105      	bne.n	23bbc <memcpy+0x42>
   23bb0:	f06f 0503 	mvn.w	r5, #3
   23bb4:	fb05 2206 	mla	r2, r5, r6, r2
		d_byte = (unsigned char *)d_word;
   23bb8:	4423      	add	r3, r4
   23bba:	e7e4      	b.n	23b86 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   23bbc:	f851 cb04 	ldr.w	ip, [r1], #4
   23bc0:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   23bc4:	e7f2      	b.n	23bac <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   23bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
   23bca:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   23bce:	e7dc      	b.n	23b8a <memcpy+0x10>

00023bd0 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   23bd0:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   23bd2:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   23bd4:	4604      	mov	r4, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   23bd6:	07a3      	lsls	r3, r4, #30
   23bd8:	d111      	bne.n	23bfe <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   23bda:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   23bde:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   23be2:	f022 0303 	bic.w	r3, r2, #3
   23be6:	0896      	lsrs	r6, r2, #2
   23be8:	4423      	add	r3, r4
   23bea:	429c      	cmp	r4, r3
   23bec:	d10d      	bne.n	23c0a <memset+0x3a>
   23bee:	f06f 0403 	mvn.w	r4, #3
   23bf2:	fb04 2206 	mla	r2, r4, r6, r2
   23bf6:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   23bf8:	4293      	cmp	r3, r2
   23bfa:	d109      	bne.n	23c10 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   23bfc:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   23bfe:	2a00      	cmp	r2, #0
   23c00:	d0fc      	beq.n	23bfc <memset+0x2c>
		*(d_byte++) = c_byte;
   23c02:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   23c06:	3a01      	subs	r2, #1
   23c08:	e7e5      	b.n	23bd6 <memset+0x6>
		*(d_word++) = c_word;
   23c0a:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   23c0e:	e7ec      	b.n	23bea <memset+0x1a>
		*(d_byte++) = c_byte;
   23c10:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   23c14:	e7f0      	b.n	23bf8 <memset+0x28>

00023c16 <_stdout_hook_default>:
}
   23c16:	f04f 30ff 	mov.w	r0, #4294967295
   23c1a:	4770      	bx	lr

00023c1c <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   23c1c:	f7e3 bdf4 	b.w	7808 <z_impl_zephyr_fputc>

00023c20 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   23c20:	684b      	ldr	r3, [r1, #4]
   23c22:	2b01      	cmp	r3, #1
   23c24:	dd07      	ble.n	23c36 <sprintf_out+0x16>
		*(p->ptr) = c;
   23c26:	680b      	ldr	r3, [r1, #0]
   23c28:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   23c2a:	680b      	ldr	r3, [r1, #0]
   23c2c:	3301      	adds	r3, #1
   23c2e:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   23c30:	684b      	ldr	r3, [r1, #4]
   23c32:	3b01      	subs	r3, #1
   23c34:	604b      	str	r3, [r1, #4]
}
   23c36:	2000      	movs	r0, #0
   23c38:	4770      	bx	lr

00023c3a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   23c3a:	f7fa bb5d 	b.w	1e2f8 <SystemInit>

00023c3e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   23c3e:	b082      	sub	sp, #8
   23c40:	ab02      	add	r3, sp, #8
   23c42:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   23c46:	f89d 3000 	ldrb.w	r3, [sp]
   23c4a:	2b06      	cmp	r3, #6
   23c4c:	d108      	bne.n	23c60 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   23c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23c52:	2201      	movs	r2, #1
   23c54:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   23c58:	f3bf 8f4f 	dsb	sy
        __WFE();
   23c5c:	bf20      	wfe
    while (true)
   23c5e:	e7fd      	b.n	23c5c <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   23c60:	b002      	add	sp, #8
   23c62:	4770      	bx	lr

00023c64 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   23c64:	b082      	sub	sp, #8
   23c66:	ab02      	add	r3, sp, #8
   23c68:	e903 0003 	stmdb	r3, {r0, r1}
   23c6c:	2300      	movs	r3, #0
   23c6e:	f383 8811 	msr	BASEPRI, r3
   23c72:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   23c76:	b002      	add	sp, #8
   23c78:	4770      	bx	lr

00023c7a <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   23c7a:	b530      	push	{r4, r5, lr}
   23c7c:	b085      	sub	sp, #20
   23c7e:	4604      	mov	r4, r0
   23c80:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   23c82:	4668      	mov	r0, sp
   23c84:	2203      	movs	r2, #3
   23c86:	f7ff ff78 	bl	23b7a <memcpy>
	(void)memset(res + 3, 0, 13);
   23c8a:	220d      	movs	r2, #13
   23c8c:	2100      	movs	r1, #0
   23c8e:	f10d 0003 	add.w	r0, sp, #3
   23c92:	f7ff ff9d 	bl	23bd0 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   23c96:	4620      	mov	r0, r4
   23c98:	466a      	mov	r2, sp
   23c9a:	4669      	mov	r1, sp
   23c9c:	f7ee fff4 	bl	12c88 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   23ca0:	4604      	mov	r4, r0
   23ca2:	b920      	cbnz	r0, 23cae <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   23ca4:	2203      	movs	r2, #3
   23ca6:	4669      	mov	r1, sp
   23ca8:	4628      	mov	r0, r5
   23caa:	f7ff ff66 	bl	23b7a <memcpy>

	return 0;
}
   23cae:	4620      	mov	r0, r4
   23cb0:	b005      	add	sp, #20
   23cb2:	bd30      	pop	{r4, r5, pc}

00023cb4 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   23cb4:	b513      	push	{r0, r1, r4, lr}
   23cb6:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   23cb8:	aa01      	add	r2, sp, #4
   23cba:	3103      	adds	r1, #3
   23cbc:	f7ff ffdd 	bl	23c7a <ah>
	if (err) {
   23cc0:	b948      	cbnz	r0, 23cd6 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   23cc2:	2203      	movs	r2, #3
   23cc4:	a901      	add	r1, sp, #4
   23cc6:	4620      	mov	r0, r4
   23cc8:	f7ff ff46 	bl	23b58 <memcmp>
   23ccc:	fab0 f080 	clz	r0, r0
   23cd0:	0940      	lsrs	r0, r0, #5
}
   23cd2:	b002      	add	sp, #8
   23cd4:	bd10      	pop	{r4, pc}
		return false;
   23cd6:	2000      	movs	r0, #0
   23cd8:	e7fb      	b.n	23cd2 <bt_rpa_irk_matches+0x1e>

00023cda <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   23cda:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   23cdc:	1cce      	adds	r6, r1, #3
{
   23cde:	4605      	mov	r5, r0
   23ce0:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   23ce2:	4630      	mov	r0, r6
   23ce4:	2103      	movs	r1, #3
   23ce6:	f7ee ffcd 	bl	12c84 <bt_rand>
	if (err) {
   23cea:	b960      	cbnz	r0, 23d06 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   23cec:	7963      	ldrb	r3, [r4, #5]
   23cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23cf6:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   23cf8:	4622      	mov	r2, r4
   23cfa:	4631      	mov	r1, r6
   23cfc:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   23cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   23d02:	f7ff bfba 	b.w	23c7a <ah>
}
   23d06:	bd70      	pop	{r4, r5, r6, pc}

00023d08 <send_cmd_status>:
{
   23d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   23d0c:	f04f 32ff 	mov.w	r2, #4294967295
{
   23d10:	4606      	mov	r6, r0
   23d12:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   23d14:	f04f 33ff 	mov.w	r3, #4294967295
   23d18:	2100      	movs	r1, #0
   23d1a:	200f      	movs	r0, #15
   23d1c:	f7e4 f9b0 	bl	8080 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   23d20:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   23d22:	f100 0808 	add.w	r8, r0, #8
   23d26:	4604      	mov	r4, r0
   23d28:	7507      	strb	r7, [r0, #20]
   23d2a:	2102      	movs	r1, #2
   23d2c:	4640      	mov	r0, r8
   23d2e:	f001 ff78 	bl	25c22 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23d32:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   23d34:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23d36:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   23d38:	7041      	strb	r1, [r0, #1]
   23d3a:	4640      	mov	r0, r8
   23d3c:	f001 ff71 	bl	25c22 <net_buf_simple_add>
	evt->ncmd = 1U;
   23d40:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   23d42:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   23d44:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   23d46:	4620      	mov	r0, r4
}
   23d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   23d4c:	f7e5 bf74 	b.w	9c38 <bt_recv_prio>

00023d50 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   23d50:	f101 0320 	add.w	r3, r1, #32
   23d54:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   23d56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   23d5a:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   23d5e:	428b      	cmp	r3, r1
   23d60:	d1f9      	bne.n	23d56 <sys_memcpy_swap.constprop.0+0x6>
}
   23d62:	4770      	bx	lr

00023d64 <default_CSPRNG>:
{
   23d64:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   23d66:	f7ee ff8d 	bl	12c84 <bt_rand>
}
   23d6a:	fab0 f080 	clz	r0, r0
   23d6e:	0940      	lsrs	r0, r0, #5
   23d70:	bd08      	pop	{r3, pc}

00023d72 <bt_settings_decode_key>:
{
   23d72:	b570      	push	{r4, r5, r6, lr}
   23d74:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   23d76:	2100      	movs	r1, #0
{
   23d78:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   23d7a:	f7fe fba7 	bl	224cc <settings_name_next>
   23d7e:	280d      	cmp	r0, #13
   23d80:	d118      	bne.n	23db4 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   23d82:	7b23      	ldrb	r3, [r4, #12]
   23d84:	2b30      	cmp	r3, #48	; 0x30
   23d86:	d111      	bne.n	23dac <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   23d88:	2300      	movs	r3, #0
   23d8a:	702b      	strb	r3, [r5, #0]
   23d8c:	f104 060c 	add.w	r6, r4, #12
   23d90:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   23d92:	462a      	mov	r2, r5
   23d94:	4620      	mov	r0, r4
   23d96:	2301      	movs	r3, #1
   23d98:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   23d9a:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   23d9c:	f7fd fa00 	bl	211a0 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   23da0:	42b4      	cmp	r4, r6
   23da2:	f105 35ff 	add.w	r5, r5, #4294967295
   23da6:	d1f4      	bne.n	23d92 <bt_settings_decode_key+0x20>
	return 0;
   23da8:	2000      	movs	r0, #0
}
   23daa:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   23dac:	2b31      	cmp	r3, #49	; 0x31
   23dae:	d101      	bne.n	23db4 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   23db0:	2301      	movs	r3, #1
   23db2:	e7ea      	b.n	23d8a <bt_settings_decode_key+0x18>
		return -EINVAL;
   23db4:	f06f 0015 	mvn.w	r0, #21
   23db8:	e7f7      	b.n	23daa <bt_settings_decode_key+0x38>

00023dba <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   23dba:	b510      	push	{r4, lr}
   23dbc:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   23dbe:	7801      	ldrb	r1, [r0, #0]
   23dc0:	7822      	ldrb	r2, [r4, #0]
   23dc2:	428a      	cmp	r2, r1
{
   23dc4:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   23dc6:	d00f      	beq.n	23de8 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   23dc8:	4669      	mov	r1, sp
   23dca:	f7e4 f8ed 	bl	7fa8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   23dce:	a905      	add	r1, sp, #20
   23dd0:	4620      	mov	r0, r4
   23dd2:	f7e4 f8e9 	bl	7fa8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   23dd6:	2210      	movs	r2, #16
   23dd8:	f10d 0115 	add.w	r1, sp, #21
   23ddc:	f10d 0001 	add.w	r0, sp, #1
   23de0:	f7ff feba 	bl	23b58 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   23de4:	b00a      	add	sp, #40	; 0x28
   23de6:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   23de8:	2a01      	cmp	r2, #1
   23dea:	d006      	beq.n	23dfa <bt_uuid_cmp+0x40>
   23dec:	2a02      	cmp	r2, #2
   23dee:	d007      	beq.n	23e00 <bt_uuid_cmp+0x46>
   23df0:	b972      	cbnz	r2, 23e10 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   23df2:	8840      	ldrh	r0, [r0, #2]
   23df4:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   23df6:	1ac0      	subs	r0, r0, r3
   23df8:	e7f4      	b.n	23de4 <bt_uuid_cmp+0x2a>
   23dfa:	6840      	ldr	r0, [r0, #4]
   23dfc:	6863      	ldr	r3, [r4, #4]
   23dfe:	e7fa      	b.n	23df6 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   23e00:	2210      	movs	r2, #16
   23e02:	1c61      	adds	r1, r4, #1
   23e04:	3001      	adds	r0, #1
}
   23e06:	b00a      	add	sp, #40	; 0x28
   23e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   23e0c:	f7ff bea4 	b.w	23b58 <memcmp>
	switch (u1->type) {
   23e10:	f06f 0015 	mvn.w	r0, #21
   23e14:	e7e6      	b.n	23de4 <bt_uuid_cmp+0x2a>

00023e16 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   23e16:	2a04      	cmp	r2, #4
{
   23e18:	b510      	push	{r4, lr}
	switch (data_len) {
   23e1a:	d00a      	beq.n	23e32 <bt_uuid_create+0x1c>
   23e1c:	2a10      	cmp	r2, #16
   23e1e:	d00d      	beq.n	23e3c <bt_uuid_create+0x26>
   23e20:	2a02      	cmp	r2, #2
   23e22:	f04f 0300 	mov.w	r3, #0
   23e26:	d10f      	bne.n	23e48 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   23e28:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   23e2a:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   23e2c:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   23e2e:	2001      	movs	r0, #1
}
   23e30:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   23e32:	2301      	movs	r3, #1
   23e34:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   23e36:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   23e38:	6042      	str	r2, [r0, #4]
		break;
   23e3a:	e7f8      	b.n	23e2e <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   23e3c:	2302      	movs	r3, #2
   23e3e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   23e42:	f7ff fe9a 	bl	23b7a <memcpy>
		break;
   23e46:	e7f2      	b.n	23e2e <bt_uuid_create+0x18>
	switch (data_len) {
   23e48:	4618      	mov	r0, r3
   23e4a:	e7f1      	b.n	23e30 <bt_uuid_create+0x1a>

00023e4c <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   23e4c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   23e4e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   23e50:	2106      	movs	r1, #6
{
   23e52:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   23e54:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   23e58:	f7ee ff14 	bl	12c84 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   23e5c:	b918      	cbnz	r0, 23e66 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   23e5e:	79a3      	ldrb	r3, [r4, #6]
   23e60:	f063 033f 	orn	r3, r3, #63	; 0x3f
   23e64:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   23e66:	bd10      	pop	{r4, pc}

00023e68 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   23e68:	280f      	cmp	r0, #15
   23e6a:	d806      	bhi.n	23e7a <bt_hci_evt_get_flags+0x12>
   23e6c:	280d      	cmp	r0, #13
   23e6e:	d80b      	bhi.n	23e88 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   23e70:	2805      	cmp	r0, #5
   23e72:	bf14      	ite	ne
   23e74:	2002      	movne	r0, #2
   23e76:	2003      	moveq	r0, #3
   23e78:	4770      	bx	lr
	switch (evt) {
   23e7a:	2813      	cmp	r0, #19
   23e7c:	d004      	beq.n	23e88 <bt_hci_evt_get_flags+0x20>
   23e7e:	281a      	cmp	r0, #26
   23e80:	bf14      	ite	ne
   23e82:	2002      	movne	r0, #2
   23e84:	2001      	moveq	r0, #1
   23e86:	4770      	bx	lr
   23e88:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   23e8a:	4770      	bx	lr

00023e8c <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   23e8c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   23e90:	b193      	cbz	r3, 23eb8 <update_sec_level+0x2c>
   23e92:	7b5a      	ldrb	r2, [r3, #13]
   23e94:	07d1      	lsls	r1, r2, #31
   23e96:	d50f      	bpl.n	23eb8 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   23e98:	06d2      	lsls	r2, r2, #27
   23e9a:	d50b      	bpl.n	23eb4 <update_sec_level+0x28>
   23e9c:	7b1b      	ldrb	r3, [r3, #12]
   23e9e:	2b10      	cmp	r3, #16
   23ea0:	d108      	bne.n	23eb4 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   23ea2:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   23ea4:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   23ea6:	7a82      	ldrb	r2, [r0, #10]
   23ea8:	7a40      	ldrb	r0, [r0, #9]
}
   23eaa:	4282      	cmp	r2, r0
   23eac:	bf8c      	ite	hi
   23eae:	2000      	movhi	r0, #0
   23eb0:	2001      	movls	r0, #1
   23eb2:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   23eb4:	2303      	movs	r3, #3
   23eb6:	e7f5      	b.n	23ea4 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   23eb8:	2302      	movs	r3, #2
   23eba:	e7f3      	b.n	23ea4 <update_sec_level+0x18>

00023ebc <get_adv_channel_map>:
{
   23ebc:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   23ebe:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   23ec2:	bf0c      	ite	eq
   23ec4:	2007      	moveq	r0, #7
   23ec6:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   23ec8:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   23eca:	bf48      	it	mi
   23ecc:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   23ed0:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   23ed2:	bf48      	it	mi
   23ed4:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   23ed8:	4770      	bx	lr

00023eda <atomic_and>:
{
   23eda:	4603      	mov	r3, r0
}
   23edc:	f3bf 8f5b 	dmb	ish
   23ee0:	e853 0f00 	ldrex	r0, [r3]
   23ee4:	ea00 0201 	and.w	r2, r0, r1
   23ee8:	e843 2c00 	strex	ip, r2, [r3]
   23eec:	f1bc 0f00 	cmp.w	ip, #0
   23ef0:	d1f6      	bne.n	23ee0 <atomic_and+0x6>
   23ef2:	f3bf 8f5b 	dmb	ish
   23ef6:	4770      	bx	lr

00023ef8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23ef8:	f3bf 8f5b 	dmb	ish
   23efc:	6800      	ldr	r0, [r0, #0]
   23efe:	f3bf 8f5b 	dmb	ish
}
   23f02:	4770      	bx	lr

00023f04 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   23f04:	2207      	movs	r2, #7
   23f06:	f7ff be27 	b.w	23b58 <memcmp>

00023f0a <bt_addr_copy>:
	memcpy(dst, src, sizeof(*dst));
   23f0a:	2206      	movs	r2, #6
   23f0c:	f7ff be35 	b.w	23b7a <memcpy>

00023f10 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   23f10:	2207      	movs	r2, #7
   23f12:	f7ff be32 	b.w	23b7a <memcpy>

00023f16 <atomic_or>:
{
   23f16:	4603      	mov	r3, r0
}
   23f18:	f3bf 8f5b 	dmb	ish
   23f1c:	e853 0f00 	ldrex	r0, [r3]
   23f20:	ea40 0201 	orr.w	r2, r0, r1
   23f24:	e843 2c00 	strex	ip, r2, [r3]
   23f28:	f1bc 0f00 	cmp.w	ip, #0
   23f2c:	d1f6      	bne.n	23f1c <atomic_or+0x6>
   23f2e:	f3bf 8f5b 	dmb	ish
   23f32:	4770      	bx	lr

00023f34 <atomic_test_and_set_bit>:
{
   23f34:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   23f36:	2301      	movs	r3, #1
   23f38:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   23f3c:	f7ff ffeb 	bl	23f16 <atomic_or>
	return (old & mask) != 0;
   23f40:	4201      	tst	r1, r0
}
   23f42:	bf14      	ite	ne
   23f44:	2001      	movne	r0, #1
   23f46:	2000      	moveq	r0, #0
   23f48:	bd08      	pop	{r3, pc}

00023f4a <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   23f4a:	460b      	mov	r3, r1
   23f4c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   23f4e:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   23f50:	f001 041f 	and.w	r4, r1, #31
   23f54:	2101      	movs	r1, #1
   23f56:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   23f58:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   23f5c:	b112      	cbz	r2, 23f64 <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   23f5e:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   23f60:	f7ff bfd9 	b.w	23f16 <atomic_or>
}
   23f64:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   23f66:	43c9      	mvns	r1, r1
   23f68:	f7ff bfb7 	b.w	23eda <atomic_and>

00023f6c <unpair_remote>:
{
   23f6c:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   23f6e:	4601      	mov	r1, r0
   23f70:	7818      	ldrb	r0, [r3, #0]
   23f72:	f7e4 b98f 	b.w	8294 <unpair>

00023f76 <sys_put_le64>:
	dst[1] = val >> 8;
   23f76:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   23f7a:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   23f7c:	0e00      	lsrs	r0, r0, #24
   23f7e:	7053      	strb	r3, [r2, #1]
   23f80:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   23f82:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   23f84:	f3c1 2007 	ubfx	r0, r1, #8, #8
   23f88:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   23f8a:	7093      	strb	r3, [r2, #2]
   23f8c:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   23f8e:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   23f90:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   23f92:	71d1      	strb	r1, [r2, #7]
}
   23f94:	4770      	bx	lr

00023f96 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   23f96:	f100 0210 	add.w	r2, r0, #16
{
   23f9a:	b508      	push	{r3, lr}
   23f9c:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   23f9e:	4610      	mov	r0, r2
   23fa0:	f7ff ffaa 	bl	23ef8 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   23fa4:	0640      	lsls	r0, r0, #25
   23fa6:	d50a      	bpl.n	23fbe <adv_id_check_connectable_func+0x28>
   23fa8:	4610      	mov	r0, r2
   23faa:	f7ff ffa5 	bl	23ef8 <atomic_get>
   23fae:	05c2      	lsls	r2, r0, #23
   23fb0:	d505      	bpl.n	23fbe <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   23fb2:	781a      	ldrb	r2, [r3, #0]
   23fb4:	780b      	ldrb	r3, [r1, #0]
   23fb6:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   23fb8:	bf1c      	itt	ne
   23fba:	2301      	movne	r3, #1
   23fbc:	704b      	strbne	r3, [r1, #1]
}
   23fbe:	bd08      	pop	{r3, pc}

00023fc0 <adv_rpa_invalidate>:
{
   23fc0:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   23fc2:	f100 0310 	add.w	r3, r0, #16
   23fc6:	4618      	mov	r0, r3
   23fc8:	f7ff ff96 	bl	23ef8 <atomic_get>
   23fcc:	0682      	lsls	r2, r0, #26
   23fce:	d406      	bmi.n	23fde <adv_rpa_invalidate+0x1e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   23fd0:	4618      	mov	r0, r3
   23fd2:	f06f 0110 	mvn.w	r1, #16
}
   23fd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23fda:	f7ff bf7e 	b.w	23eda <atomic_and>
   23fde:	bd08      	pop	{r3, pc}

00023fe0 <adv_is_private_enabled>:
{
   23fe0:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   23fe2:	f100 0310 	add.w	r3, r0, #16
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   23fe6:	4618      	mov	r0, r3
   23fe8:	f7ff ff86 	bl	23ef8 <atomic_get>
   23fec:	0642      	lsls	r2, r0, #25
   23fee:	d506      	bpl.n	23ffe <adv_is_private_enabled+0x1e>
   23ff0:	4618      	mov	r0, r3
   23ff2:	f7ff ff81 	bl	23ef8 <atomic_get>
   23ff6:	0503      	lsls	r3, r0, #20
		*adv_enabled = true;
   23ff8:	bf5c      	itt	pl
   23ffa:	2301      	movpl	r3, #1
   23ffc:	700b      	strbpl	r3, [r1, #0]
}
   23ffe:	bd08      	pop	{r3, pc}

00024000 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   24000:	f100 0310 	add.w	r3, r0, #16
{
   24004:	b510      	push	{r4, lr}
   24006:	4604      	mov	r4, r0
   24008:	4618      	mov	r0, r3
   2400a:	f7ff ff75 	bl	23ef8 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2400e:	0642      	lsls	r2, r0, #25
   24010:	d50a      	bpl.n	24028 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   24012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   24016:	4618      	mov	r0, r3
   24018:	f7ff ff7d 	bl	23f16 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   2401c:	4620      	mov	r0, r4
   2401e:	2100      	movs	r1, #0
}
   24020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   24024:	f7e5 b820 	b.w	9068 <set_le_adv_enable_legacy>
}
   24028:	bd10      	pop	{r4, pc}

0002402a <adv_unpause_enabled>:
{
   2402a:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2402c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   24030:	4604      	mov	r4, r0
   24032:	3010      	adds	r0, #16
   24034:	f7ff ff51 	bl	23eda <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   24038:	0483      	lsls	r3, r0, #18
   2403a:	d505      	bpl.n	24048 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   2403c:	4620      	mov	r0, r4
   2403e:	2101      	movs	r1, #1
}
   24040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   24044:	f7e5 b810 	b.w	9068 <set_le_adv_enable_legacy>
}
   24048:	bd10      	pop	{r4, pc}

0002404a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2404a:	7a03      	ldrb	r3, [r0, #8]
   2404c:	075b      	lsls	r3, r3, #29
{
   2404e:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   24050:	d505      	bpl.n	2405e <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   24052:	4601      	mov	r1, r0
   24054:	322a      	adds	r2, #42	; 0x2a
   24056:	f811 0b01 	ldrb.w	r0, [r1], #1
   2405a:	f7e5 b8c1 	b.w	91e0 <hci_id_add>
}
   2405e:	4770      	bx	lr

00024060 <addr_res_enable>:
{
   24060:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24062:	2101      	movs	r1, #1
{
   24064:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24066:	f242 002d 	movw	r0, #8237	; 0x202d
   2406a:	f7e4 fd5f 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
   2406e:	4604      	mov	r4, r0
   24070:	b158      	cbz	r0, 2408a <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   24072:	4629      	mov	r1, r5
   24074:	3008      	adds	r0, #8
   24076:	f001 fde3 	bl	25c40 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2407a:	4621      	mov	r1, r4
   2407c:	2200      	movs	r2, #0
}
   2407e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24082:	f242 002d 	movw	r0, #8237	; 0x202d
   24086:	f7e4 beb1 	b.w	8dec <bt_hci_cmd_send_sync>
}
   2408a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2408e:	bd38      	pop	{r3, r4, r5, pc}

00024090 <bt_lookup_id_addr>:
{
   24090:	b510      	push	{r4, lr}
   24092:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   24094:	f7eb fd52 	bl	fb3c <bt_keys_find_irk>
		if (keys) {
   24098:	b100      	cbz	r0, 2409c <bt_lookup_id_addr+0xc>
			return &keys->addr;
   2409a:	1c44      	adds	r4, r0, #1
}
   2409c:	4620      	mov	r0, r4
   2409e:	bd10      	pop	{r4, pc}

000240a0 <bt_hci_disconnect>:
{
   240a0:	b570      	push	{r4, r5, r6, lr}
   240a2:	4606      	mov	r6, r0
   240a4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   240a6:	f240 4006 	movw	r0, #1030	; 0x406
   240aa:	2103      	movs	r1, #3
   240ac:	f7e4 fd3e 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
   240b0:	4604      	mov	r4, r0
   240b2:	b168      	cbz	r0, 240d0 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   240b4:	2103      	movs	r1, #3
   240b6:	3008      	adds	r0, #8
   240b8:	f001 fdb3 	bl	25c22 <net_buf_simple_add>
	disconn->reason = reason;
   240bc:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   240be:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   240c0:	4621      	mov	r1, r4
   240c2:	2200      	movs	r2, #0
}
   240c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   240c8:	f240 4006 	movw	r0, #1030	; 0x406
   240cc:	f7e4 be8e 	b.w	8dec <bt_hci_cmd_send_sync>
}
   240d0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   240d4:	bd70      	pop	{r4, r5, r6, pc}

000240d6 <bt_le_set_data_len>:
{
   240d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   240d8:	4607      	mov	r7, r0
   240da:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   240dc:	f242 0022 	movw	r0, #8226	; 0x2022
   240e0:	2106      	movs	r1, #6
{
   240e2:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   240e4:	f7e4 fd22 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
   240e8:	4604      	mov	r4, r0
   240ea:	b170      	cbz	r0, 2410a <bt_le_set_data_len+0x34>
   240ec:	2106      	movs	r1, #6
   240ee:	3008      	adds	r0, #8
   240f0:	f001 fd97 	bl	25c22 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   240f4:	883b      	ldrh	r3, [r7, #0]
   240f6:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   240f8:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   240fa:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   240fc:	4621      	mov	r1, r4
   240fe:	f242 0022 	movw	r0, #8226	; 0x2022
}
   24102:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   24106:	f7e4 bd4b 	b.w	8ba0 <bt_hci_cmd_send>
}
   2410a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2410e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024110 <bt_le_set_phy>:
{
   24110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24114:	4680      	mov	r8, r0
   24116:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24118:	f242 0032 	movw	r0, #8242	; 0x2032
   2411c:	2107      	movs	r1, #7
{
   2411e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   24122:	4616      	mov	r6, r2
   24124:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24126:	f7e4 fd01 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
   2412a:	4604      	mov	r4, r0
   2412c:	b190      	cbz	r0, 24154 <bt_le_set_phy+0x44>
   2412e:	2107      	movs	r1, #7
   24130:	3008      	adds	r0, #8
   24132:	f001 fd76 	bl	25c22 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24136:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2413a:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2413c:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2413e:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   24140:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   24142:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   24146:	4621      	mov	r1, r4
   24148:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2414c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   24150:	f7e4 bd26 	b.w	8ba0 <bt_hci_cmd_send>
}
   24154:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002415c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2415c:	8803      	ldrh	r3, [r0, #0]
   2415e:	8842      	ldrh	r2, [r0, #2]
   24160:	4293      	cmp	r3, r2
{
   24162:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   24164:	d819      	bhi.n	2419a <bt_le_conn_params_valid+0x3e>
   24166:	2b05      	cmp	r3, #5
   24168:	d917      	bls.n	2419a <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2416a:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2416e:	d814      	bhi.n	2419a <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   24170:	8883      	ldrh	r3, [r0, #4]
   24172:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   24176:	d210      	bcs.n	2419a <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   24178:	88c0      	ldrh	r0, [r0, #6]
   2417a:	f1a0 010a 	sub.w	r1, r0, #10
   2417e:	b289      	uxth	r1, r1
   24180:	f640 4476 	movw	r4, #3190	; 0xc76
   24184:	42a1      	cmp	r1, r4
   24186:	d808      	bhi.n	2419a <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   24188:	3301      	adds	r3, #1
   2418a:	b29b      	uxth	r3, r3
   2418c:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2418e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   24192:	bf34      	ite	cc
   24194:	2001      	movcc	r0, #1
   24196:	2000      	movcs	r0, #0
}
   24198:	bd10      	pop	{r4, pc}
		return false;
   2419a:	2000      	movs	r0, #0
   2419c:	e7fc      	b.n	24198 <bt_le_conn_params_valid+0x3c>

0002419e <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2419e:	7a03      	ldrb	r3, [r0, #8]
   241a0:	07d9      	lsls	r1, r3, #31
   241a2:	d504      	bpl.n	241ae <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   241a4:	f023 0301 	bic.w	r3, r3, #1
   241a8:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   241aa:	f7e5 bae1 	b.w	9770 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   241ae:	0799      	lsls	r1, r3, #30
   241b0:	d504      	bpl.n	241bc <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   241b2:	f023 0302 	bic.w	r3, r3, #2
   241b6:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   241b8:	f7e5 bbac 	b.w	9914 <bt_id_del>
}
   241bc:	4770      	bx	lr

000241be <bt_send>:
		return bt_hci_ecc_send(buf);
   241be:	f7e3 bcbb 	b.w	7b38 <bt_hci_ecc_send>

000241c2 <bt_addr_le_is_bonded>:
{
   241c2:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   241c4:	f7eb fcf2 	bl	fbac <bt_keys_find_addr>
		return keys && keys->keys;
   241c8:	b118      	cbz	r0, 241d2 <bt_addr_le_is_bonded+0x10>
   241ca:	89c0      	ldrh	r0, [r0, #14]
   241cc:	3800      	subs	r0, #0
   241ce:	bf18      	it	ne
   241d0:	2001      	movne	r0, #1
}
   241d2:	bd08      	pop	{r3, pc}

000241d4 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   241d4:	6880      	ldr	r0, [r0, #8]
   241d6:	f7e6 b9af 	b.w	a538 <enh_conn_complete>

000241da <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   241da:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   241dc:	f04f 32ff 	mov.w	r2, #4294967295
{
   241e0:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   241e2:	f04f 33ff 	mov.w	r3, #4294967295
   241e6:	2100      	movs	r1, #0
{
   241e8:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   241ea:	f7e3 ff49 	bl	8080 <bt_buf_get_evt>
   241ee:	2102      	movs	r1, #2
   241f0:	4604      	mov	r4, r0
   241f2:	3008      	adds	r0, #8
   241f4:	f001 fd15 	bl	25c22 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   241f8:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   241fa:	7045      	strb	r5, [r0, #1]

	return buf;
}
   241fc:	4620      	mov	r0, r4
   241fe:	bd70      	pop	{r4, r5, r6, pc}

00024200 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24200:	3103      	adds	r1, #3
{
   24202:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24204:	b2c9      	uxtb	r1, r1
{
   24206:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24208:	200e      	movs	r0, #14
   2420a:	f7ff ffe6 	bl	241da <bt_hci_evt_create>
   2420e:	2103      	movs	r1, #3
   24210:	4604      	mov	r4, r0
   24212:	3008      	adds	r0, #8
   24214:	f001 fd05 	bl	25c22 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   24218:	2301      	movs	r3, #1
   2421a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   2421c:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   24220:	4620      	mov	r0, r4
   24222:	bd38      	pop	{r3, r4, r5, pc}

00024224 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   24224:	b570      	push	{r4, r5, r6, lr}
   24226:	4605      	mov	r5, r0
   24228:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   2422a:	200f      	movs	r0, #15
   2422c:	2104      	movs	r1, #4
   2422e:	f7ff ffd4 	bl	241da <bt_hci_evt_create>
   24232:	2104      	movs	r1, #4
   24234:	4604      	mov	r4, r0
   24236:	3008      	adds	r0, #8
   24238:	f001 fcf3 	bl	25c22 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   2423c:	2201      	movs	r2, #1
	cs->status = status;
   2423e:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   24240:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   24242:	8045      	strh	r5, [r0, #2]

	return buf;
}
   24244:	4620      	mov	r0, r4
   24246:	bd70      	pop	{r4, r5, r6, pc}

00024248 <atomic_and>:
{
   24248:	4603      	mov	r3, r0
}
   2424a:	f3bf 8f5b 	dmb	ish
   2424e:	e853 0f00 	ldrex	r0, [r3]
   24252:	ea00 0201 	and.w	r2, r0, r1
   24256:	e843 2c00 	strex	ip, r2, [r3]
   2425a:	f1bc 0f00 	cmp.w	ip, #0
   2425e:	d1f6      	bne.n	2424e <atomic_and+0x6>
   24260:	f3bf 8f5b 	dmb	ish
   24264:	4770      	bx	lr

00024266 <tx_notify>:
{
   24266:	b570      	push	{r4, r5, r6, lr}
   24268:	4604      	mov	r4, r0
	__asm__ volatile(
   2426a:	f04f 0220 	mov.w	r2, #32
   2426e:	f3ef 8311 	mrs	r3, BASEPRI
   24272:	f382 8811 	msr	BASEPRI, r2
   24276:	f3bf 8f6f 	isb	sy
	return list->head;
   2427a:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2427c:	b920      	cbnz	r0, 24288 <tx_notify+0x22>
	__asm__ volatile(
   2427e:	f383 8811 	msr	BASEPRI, r3
   24282:	f3bf 8f6f 	isb	sy
}
   24286:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24288:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   2428a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2428c:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2428e:	4288      	cmp	r0, r1
	list->tail = node;
   24290:	bf08      	it	eq
   24292:	6262      	streq	r2, [r4, #36]	; 0x24
   24294:	f383 8811 	msr	BASEPRI, r3
   24298:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2429c:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   242a0:	f7e6 fb24 	bl	a8ec <tx_free>
		cb(conn, user_data);
   242a4:	4631      	mov	r1, r6
   242a6:	4620      	mov	r0, r4
   242a8:	47a8      	blx	r5
	while (1) {
   242aa:	e7de      	b.n	2426a <tx_notify+0x4>

000242ac <tx_complete_work>:
	tx_notify(conn);
   242ac:	3828      	subs	r0, #40	; 0x28
   242ae:	f7ff bfda 	b.w	24266 <tx_notify>

000242b2 <bt_conn_new>:
{
   242b2:	b538      	push	{r3, r4, r5, lr}
   242b4:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   242b6:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   242b8:	2501      	movs	r5, #1
   242ba:	428b      	cmp	r3, r1
   242bc:	d102      	bne.n	242c4 <bt_conn_new+0x12>
		return NULL;
   242be:	2400      	movs	r4, #0
}
   242c0:	4620      	mov	r0, r4
   242c2:	bd38      	pop	{r3, r4, r5, pc}
   242c4:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   242c8:	f3bf 8f5b 	dmb	ish
   242cc:	e852 0f00 	ldrex	r0, [r2]
   242d0:	2800      	cmp	r0, #0
   242d2:	d104      	bne.n	242de <bt_conn_new+0x2c>
   242d4:	e842 5c00 	strex	ip, r5, [r2]
   242d8:	f1bc 0f00 	cmp.w	ip, #0
   242dc:	d1f6      	bne.n	242cc <bt_conn_new+0x1a>
   242de:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   242e2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   242e6:	d002      	beq.n	242ee <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   242e8:	3301      	adds	r3, #1
   242ea:	4604      	mov	r4, r0
   242ec:	e7e5      	b.n	242ba <bt_conn_new+0x8>
	if (!conn) {
   242ee:	2c00      	cmp	r4, #0
   242f0:	d0e6      	beq.n	242c0 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   242f2:	22b8      	movs	r2, #184	; 0xb8
   242f4:	2100      	movs	r1, #0
   242f6:	4620      	mov	r0, r4
   242f8:	f7ff fc6a 	bl	23bd0 <memset>
	return conn;
   242fc:	e7e0      	b.n	242c0 <bt_conn_new+0xe>

000242fe <bt_conn_set_security>:
{
   242fe:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   24300:	7b43      	ldrb	r3, [r0, #13]
   24302:	2b07      	cmp	r3, #7
{
   24304:	4604      	mov	r4, r0
   24306:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   24308:	d124      	bne.n	24354 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2430a:	7a43      	ldrb	r3, [r0, #9]
   2430c:	428b      	cmp	r3, r1
   2430e:	d224      	bcs.n	2435a <bt_conn_set_security+0x5c>
   24310:	7a83      	ldrb	r3, [r0, #10]
   24312:	428b      	cmp	r3, r1
   24314:	d221      	bcs.n	2435a <bt_conn_set_security+0x5c>
	if (val) {
   24316:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   24318:	f100 0004 	add.w	r0, r0, #4
   2431c:	d515      	bpl.n	2434a <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2431e:	f3bf 8f5b 	dmb	ish
   24322:	e850 3f00 	ldrex	r3, [r0]
   24326:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2432a:	e840 3200 	strex	r2, r3, [r0]
   2432e:	2a00      	cmp	r2, #0
   24330:	d1f7      	bne.n	24322 <bt_conn_set_security+0x24>
   24332:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   24336:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2433a:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2433c:	4620      	mov	r0, r4
   2433e:	f7ea fdc7 	bl	eed0 <bt_smp_start_security>
	if (err) {
   24342:	b108      	cbz	r0, 24348 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   24344:	7a63      	ldrb	r3, [r4, #9]
   24346:	72a3      	strb	r3, [r4, #10]
}
   24348:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2434a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2434e:	f7ff ff7b 	bl	24248 <atomic_and>
   24352:	e7f0      	b.n	24336 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   24354:	f06f 0038 	mvn.w	r0, #56	; 0x38
   24358:	e7f6      	b.n	24348 <bt_conn_set_security+0x4a>
		return 0;
   2435a:	2000      	movs	r0, #0
   2435c:	e7f4      	b.n	24348 <bt_conn_set_security+0x4a>

0002435e <bt_conn_get_security>:
}
   2435e:	7a40      	ldrb	r0, [r0, #9]
   24360:	4770      	bx	lr

00024362 <bt_conn_reset_rx_state>:
{
   24362:	b510      	push	{r4, lr}
   24364:	4604      	mov	r4, r0
	if (!conn->rx) {
   24366:	6900      	ldr	r0, [r0, #16]
   24368:	b118      	cbz	r0, 24372 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2436a:	f7f8 fd57 	bl	1ce1c <net_buf_unref>
	conn->rx = NULL;
   2436e:	2300      	movs	r3, #0
   24370:	6123      	str	r3, [r4, #16]
}
   24372:	bd10      	pop	{r4, pc}

00024374 <bt_conn_is_peer_addr_le>:
{
   24374:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   24376:	7a03      	ldrb	r3, [r0, #8]
   24378:	428b      	cmp	r3, r1
{
   2437a:	4604      	mov	r4, r0
   2437c:	4615      	mov	r5, r2
	if (id != conn->id) {
   2437e:	d115      	bne.n	243ac <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   24380:	f100 0188 	add.w	r1, r0, #136	; 0x88
   24384:	2207      	movs	r2, #7
   24386:	4628      	mov	r0, r5
   24388:	f7ff fbe6 	bl	23b58 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2438c:	b180      	cbz	r0, 243b0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   2438e:	78e3      	ldrb	r3, [r4, #3]
   24390:	2207      	movs	r2, #7
   24392:	b943      	cbnz	r3, 243a6 <bt_conn_is_peer_addr_le+0x32>
   24394:	f104 0196 	add.w	r1, r4, #150	; 0x96
   24398:	4628      	mov	r0, r5
   2439a:	f7ff fbdd 	bl	23b58 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2439e:	fab0 f080 	clz	r0, r0
   243a2:	0940      	lsrs	r0, r0, #5
}
   243a4:	bd38      	pop	{r3, r4, r5, pc}
   243a6:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   243aa:	e7f5      	b.n	24398 <bt_conn_is_peer_addr_le+0x24>
		return false;
   243ac:	2000      	movs	r0, #0
   243ae:	e7f9      	b.n	243a4 <bt_conn_is_peer_addr_le+0x30>
		return true;
   243b0:	2001      	movs	r0, #1
   243b2:	e7f7      	b.n	243a4 <bt_conn_is_peer_addr_le+0x30>

000243b4 <bt_conn_ref>:
{
   243b4:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   243b6:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   243ba:	f3bf 8f5b 	dmb	ish
   243be:	6813      	ldr	r3, [r2, #0]
   243c0:	f3bf 8f5b 	dmb	ish
		if (!old) {
   243c4:	b17b      	cbz	r3, 243e6 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   243c6:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   243ca:	1c59      	adds	r1, r3, #1
   243cc:	e852 4f00 	ldrex	r4, [r2]
   243d0:	429c      	cmp	r4, r3
   243d2:	d104      	bne.n	243de <bt_conn_ref+0x2a>
   243d4:	e842 1c00 	strex	ip, r1, [r2]
   243d8:	f1bc 0f00 	cmp.w	ip, #0
   243dc:	d1f6      	bne.n	243cc <bt_conn_ref+0x18>
   243de:	f3bf 8f5b 	dmb	ish
   243e2:	d1ea      	bne.n	243ba <bt_conn_ref+0x6>
}
   243e4:	bd10      	pop	{r4, pc}
			return NULL;
   243e6:	4618      	mov	r0, r3
   243e8:	e7fc      	b.n	243e4 <bt_conn_ref+0x30>

000243ea <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   243ea:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   243ee:	f3bf 8f5b 	dmb	ish
   243f2:	e853 2f00 	ldrex	r2, [r3]
   243f6:	3a01      	subs	r2, #1
   243f8:	e843 2100 	strex	r1, r2, [r3]
   243fc:	2900      	cmp	r1, #0
   243fe:	d1f8      	bne.n	243f2 <bt_conn_unref+0x8>
   24400:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24404:	f3bf 8f5b 	dmb	ish
   24408:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   2440c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   24410:	b90b      	cbnz	r3, 24416 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   24412:	f7e6 b84b 	b.w	a4ac <bt_le_adv_resume>
}
   24416:	4770      	bx	lr

00024418 <conn_lookup_handle>:
{
   24418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2441c:	4607      	mov	r7, r0
   2441e:	460e      	mov	r6, r1
   24420:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   24422:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24424:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   24428:	42b4      	cmp	r4, r6
   2442a:	d103      	bne.n	24434 <conn_lookup_handle+0x1c>
	return NULL;
   2442c:	2300      	movs	r3, #0
}
   2442e:	4618      	mov	r0, r3
   24430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24434:	fb09 7004 	mla	r0, r9, r4, r7
   24438:	f7ff ffbc 	bl	243b4 <bt_conn_ref>
   2443c:	4603      	mov	r3, r0
		if (!conn) {
   2443e:	b158      	cbz	r0, 24458 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   24440:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24442:	2d01      	cmp	r5, #1
   24444:	d002      	beq.n	2444c <conn_lookup_handle+0x34>
   24446:	3d07      	subs	r5, #7
   24448:	2d01      	cmp	r5, #1
   2444a:	d803      	bhi.n	24454 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2444c:	881a      	ldrh	r2, [r3, #0]
   2444e:	4542      	cmp	r2, r8
   24450:	d0ed      	beq.n	2442e <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   24452:	4618      	mov	r0, r3
   24454:	f7ff ffc9 	bl	243ea <bt_conn_unref>
	for (i = 0; i < size; i++) {
   24458:	3401      	adds	r4, #1
   2445a:	e7e5      	b.n	24428 <conn_lookup_handle+0x10>

0002445c <bt_conn_get_dst>:
}
   2445c:	3088      	adds	r0, #136	; 0x88
   2445e:	4770      	bx	lr

00024460 <bt_conn_disconnect>:
{
   24460:	b538      	push	{r3, r4, r5, lr}
   24462:	7b43      	ldrb	r3, [r0, #13]
   24464:	3b02      	subs	r3, #2
   24466:	4605      	mov	r5, r0
   24468:	2b06      	cmp	r3, #6
   2446a:	d805      	bhi.n	24478 <bt_conn_disconnect+0x18>
   2446c:	e8df f003 	tbb	[pc, r3]
   24470:	04040408 	.word	0x04040408
   24474:	0e0c      	.short	0x0e0c
   24476:	0c          	.byte	0x0c
   24477:	00          	.byte	0x00
	switch (conn->state) {
   24478:	f06f 0438 	mvn.w	r4, #56	; 0x38
}
   2447c:	4620      	mov	r0, r4
   2447e:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   24480:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   24482:	2100      	movs	r1, #0
   24484:	f7e6 fd06 	bl	ae94 <bt_conn_set_state>
		return 0;
   24488:	2400      	movs	r4, #0
   2448a:	e7f7      	b.n	2447c <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   2448c:	8800      	ldrh	r0, [r0, #0]
   2448e:	f7ff fe07 	bl	240a0 <bt_hci_disconnect>
	if (err) {
   24492:	4604      	mov	r4, r0
   24494:	2800      	cmp	r0, #0
   24496:	d1f1      	bne.n	2447c <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   24498:	2108      	movs	r1, #8
   2449a:	4628      	mov	r0, r5
   2449c:	f7e6 fcfa 	bl	ae94 <bt_conn_set_state>
	return 0;
   244a0:	e7ec      	b.n	2447c <bt_conn_disconnect+0x1c>

000244a2 <bt_conn_le_conn_update>:
{
   244a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   244a4:	4607      	mov	r7, r0
   244a6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   244a8:	f242 0013 	movw	r0, #8211	; 0x2013
   244ac:	210e      	movs	r1, #14
   244ae:	f7e4 fb3d 	bl	8b2c <bt_hci_cmd_create>
	if (!buf) {
   244b2:	4606      	mov	r6, r0
   244b4:	b1d0      	cbz	r0, 244ec <bt_conn_le_conn_update+0x4a>
   244b6:	210e      	movs	r1, #14
   244b8:	3008      	adds	r0, #8
   244ba:	f001 fbb2 	bl	25c22 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   244be:	220e      	movs	r2, #14
   244c0:	4604      	mov	r4, r0
   244c2:	2100      	movs	r1, #0
   244c4:	f7ff fb84 	bl	23bd0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   244c8:	883b      	ldrh	r3, [r7, #0]
   244ca:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   244cc:	882b      	ldrh	r3, [r5, #0]
   244ce:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   244d0:	886b      	ldrh	r3, [r5, #2]
   244d2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   244d4:	88ab      	ldrh	r3, [r5, #4]
   244d6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   244d8:	88eb      	ldrh	r3, [r5, #6]
   244da:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   244dc:	4631      	mov	r1, r6
   244de:	2200      	movs	r2, #0
}
   244e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   244e4:	f242 0013 	movw	r0, #8211	; 0x2013
   244e8:	f7e4 bc80 	b.w	8dec <bt_hci_cmd_send_sync>
}
   244ec:	f06f 0036 	mvn.w	r0, #54	; 0x36
   244f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000244f2 <l2cap_connected>:
}
   244f2:	4770      	bx	lr

000244f4 <l2cap_disconnected>:
   244f4:	4770      	bx	lr

000244f6 <bt_l2cap_chan_remove>:
	return list->head;
   244f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   244f8:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   244fa:	b17b      	cbz	r3, 2451c <bt_l2cap_chan_remove+0x26>
   244fc:	3b08      	subs	r3, #8
   244fe:	2200      	movs	r2, #0
   24500:	b163      	cbz	r3, 2451c <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   24502:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   24504:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   24508:	d10e      	bne.n	24528 <bt_l2cap_chan_remove+0x32>
	return node->next;
   2450a:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   2450c:	6d05      	ldr	r5, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   2450e:	b932      	cbnz	r2, 2451e <bt_l2cap_chan_remove+0x28>
   24510:	42ac      	cmp	r4, r5
	list->head = node;
   24512:	64c1      	str	r1, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   24514:	d100      	bne.n	24518 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   24516:	6501      	str	r1, [r0, #80]	; 0x50
	parent->next = child;
   24518:	2200      	movs	r2, #0
   2451a:	609a      	str	r2, [r3, #8]
}
   2451c:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   2451e:	42ac      	cmp	r4, r5
	parent->next = child;
   24520:	6011      	str	r1, [r2, #0]
	list->tail = node;
   24522:	bf08      	it	eq
   24524:	6502      	streq	r2, [r0, #80]	; 0x50
}
   24526:	e7f7      	b.n	24518 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24528:	2c00      	cmp	r4, #0
   2452a:	d0f7      	beq.n	2451c <bt_l2cap_chan_remove+0x26>
	return node->next;
   2452c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2452e:	2b00      	cmp	r3, #0
   24530:	d0f4      	beq.n	2451c <bt_l2cap_chan_remove+0x26>
   24532:	3b08      	subs	r3, #8
   24534:	4622      	mov	r2, r4
   24536:	e7e3      	b.n	24500 <bt_l2cap_chan_remove+0xa>

00024538 <bt_l2cap_chan_del>:
{
   24538:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2453a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2453e:	4604      	mov	r4, r0
	if (!chan->conn) {
   24540:	b123      	cbz	r3, 2454c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   24542:	686b      	ldr	r3, [r5, #4]
   24544:	b103      	cbz	r3, 24548 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   24546:	4798      	blx	r3
	chan->conn = NULL;
   24548:	2300      	movs	r3, #0
   2454a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2454c:	68e3      	ldr	r3, [r4, #12]
   2454e:	b10b      	cbz	r3, 24554 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   24550:	4620      	mov	r0, r4
   24552:	4798      	blx	r3
	if (ops->released) {
   24554:	69eb      	ldr	r3, [r5, #28]
   24556:	b11b      	cbz	r3, 24560 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   24558:	4620      	mov	r0, r4
}
   2455a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2455e:	4718      	bx	r3
}
   24560:	bd70      	pop	{r4, r5, r6, pc}

00024562 <bt_l2cap_disconnected>:
	return list->head;
   24562:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   24564:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24566:	b18b      	cbz	r3, 2458c <bt_l2cap_disconnected+0x2a>
   24568:	f1b3 0008 	subs.w	r0, r3, #8
   2456c:	d00e      	beq.n	2458c <bt_l2cap_disconnected+0x2a>
	return node->next;
   2456e:	681c      	ldr	r4, [r3, #0]
   24570:	b104      	cbz	r4, 24574 <bt_l2cap_disconnected+0x12>
   24572:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   24574:	f7ff ffe0 	bl	24538 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24578:	b144      	cbz	r4, 2458c <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2457a:	f114 0308 	adds.w	r3, r4, #8
   2457e:	d002      	beq.n	24586 <bt_l2cap_disconnected+0x24>
	return node->next;
   24580:	68a3      	ldr	r3, [r4, #8]
   24582:	b103      	cbz	r3, 24586 <bt_l2cap_disconnected+0x24>
   24584:	3b08      	subs	r3, #8
{
   24586:	4620      	mov	r0, r4
   24588:	461c      	mov	r4, r3
   2458a:	e7f3      	b.n	24574 <bt_l2cap_disconnected+0x12>
}
   2458c:	bd10      	pop	{r4, pc}

0002458e <bt_l2cap_security_changed>:
{
   2458e:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   24590:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   24592:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24594:	b1a3      	cbz	r3, 245c0 <bt_l2cap_security_changed+0x32>
   24596:	f1b3 0008 	subs.w	r0, r3, #8
   2459a:	d011      	beq.n	245c0 <bt_l2cap_security_changed+0x32>
	return node->next;
   2459c:	681c      	ldr	r4, [r3, #0]
   2459e:	b104      	cbz	r4, 245a2 <bt_l2cap_security_changed+0x14>
   245a0:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   245a2:	6843      	ldr	r3, [r0, #4]
   245a4:	689b      	ldr	r3, [r3, #8]
   245a6:	b10b      	cbz	r3, 245ac <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   245a8:	4629      	mov	r1, r5
   245aa:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   245ac:	b144      	cbz	r4, 245c0 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   245ae:	f114 0308 	adds.w	r3, r4, #8
   245b2:	d002      	beq.n	245ba <bt_l2cap_security_changed+0x2c>
	return node->next;
   245b4:	68a3      	ldr	r3, [r4, #8]
   245b6:	b103      	cbz	r3, 245ba <bt_l2cap_security_changed+0x2c>
   245b8:	3b08      	subs	r3, #8
{
   245ba:	4620      	mov	r0, r4
   245bc:	461c      	mov	r4, r3
   245be:	e7f0      	b.n	245a2 <bt_l2cap_security_changed+0x14>
}
   245c0:	bd38      	pop	{r3, r4, r5, pc}

000245c2 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   245c2:	3104      	adds	r1, #4
   245c4:	f7e6 be3e 	b.w	b244 <bt_conn_create_pdu_timeout>

000245c8 <bt_l2cap_send_cb>:
{
   245c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   245cc:	4614      	mov	r4, r2
   245ce:	4605      	mov	r5, r0
   245d0:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   245d2:	f102 0008 	add.w	r0, r2, #8
   245d6:	2104      	movs	r1, #4
   245d8:	461e      	mov	r6, r3
   245da:	f8dd 8018 	ldr.w	r8, [sp, #24]
   245de:	f001 fb37 	bl	25c50 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   245e2:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   245e4:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   245e6:	3a04      	subs	r2, #4
   245e8:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   245ea:	4643      	mov	r3, r8
   245ec:	4632      	mov	r2, r6
   245ee:	4621      	mov	r1, r4
   245f0:	4628      	mov	r0, r5
}
   245f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   245f6:	f7e6 bb75 	b.w	ace4 <bt_conn_send_cb>

000245fa <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   245fa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   245fc:	b160      	cbz	r0, 24618 <bt_l2cap_le_lookup_tx_cid+0x1e>
   245fe:	3808      	subs	r0, #8
   24600:	b900      	cbnz	r0, 24604 <bt_l2cap_le_lookup_tx_cid+0xa>
   24602:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   24604:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   24608:	428b      	cmp	r3, r1
   2460a:	d005      	beq.n	24618 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2460c:	f110 0308 	adds.w	r3, r0, #8
   24610:	d001      	beq.n	24616 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   24612:	6880      	ldr	r0, [r0, #8]
   24614:	e7f2      	b.n	245fc <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   24616:	4618      	mov	r0, r3
}
   24618:	4770      	bx	lr

0002461a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2461a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2461c:	b160      	cbz	r0, 24638 <bt_l2cap_le_lookup_rx_cid+0x1e>
   2461e:	3808      	subs	r0, #8
   24620:	b900      	cbnz	r0, 24624 <bt_l2cap_le_lookup_rx_cid+0xa>
   24622:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   24624:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   24628:	428b      	cmp	r3, r1
   2462a:	d005      	beq.n	24638 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2462c:	f110 0308 	adds.w	r3, r0, #8
   24630:	d001      	beq.n	24636 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   24632:	6880      	ldr	r0, [r0, #8]
   24634:	e7f2      	b.n	2461c <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   24636:	4618      	mov	r0, r3
}
   24638:	4770      	bx	lr

0002463a <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2463a:	4770      	bx	lr

0002463c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2463c:	4603      	mov	r3, r0
	return list->head;
   2463e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   24640:	b128      	cbz	r0, 2464e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24642:	6859      	ldr	r1, [r3, #4]
	return node->next;
   24644:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24646:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24648:	4288      	cmp	r0, r1
	list->tail = node;
   2464a:	bf08      	it	eq
   2464c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2464e:	4770      	bx	lr

00024650 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   24650:	4603      	mov	r3, r0
	size_t bytes = 0;
   24652:	2000      	movs	r0, #0

	while (buf) {
   24654:	b903      	cbnz	r3, 24658 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   24656:	4770      	bx	lr
		bytes += buf->len;
   24658:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2465a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2465c:	4410      	add	r0, r2
		buf = buf->frags;
   2465e:	e7f9      	b.n	24654 <net_buf_frags_len+0x4>

00024660 <att_sent>:
	if (chan->ops->sent) {
   24660:	684b      	ldr	r3, [r1, #4]
   24662:	695b      	ldr	r3, [r3, #20]
{
   24664:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   24666:	b103      	cbz	r3, 2466a <att_sent+0xa>
		chan->ops->sent(chan);
   24668:	4718      	bx	r3
}
   2466a:	4770      	bx	lr

0002466c <attr_read_type_cb>:
{
   2466c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2466e:	68d4      	ldr	r4, [r2, #12]
   24670:	7823      	ldrb	r3, [r4, #0]
   24672:	3102      	adds	r1, #2
   24674:	b913      	cbnz	r3, 2467c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   24676:	7021      	strb	r1, [r4, #0]
	return true;
   24678:	2001      	movs	r0, #1
   2467a:	e006      	b.n	2468a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2467c:	428b      	cmp	r3, r1
   2467e:	d0fb      	beq.n	24678 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   24680:	8983      	ldrh	r3, [r0, #12]
   24682:	3b02      	subs	r3, #2
   24684:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   24686:	2000      	movs	r0, #0
   24688:	6110      	str	r0, [r2, #16]
}
   2468a:	bd10      	pop	{r4, pc}

0002468c <att_op_get_type>:
	switch (op) {
   2468c:	281e      	cmp	r0, #30
   2468e:	d816      	bhi.n	246be <att_op_get_type+0x32>
   24690:	b308      	cbz	r0, 246d6 <att_op_get_type+0x4a>
   24692:	1e43      	subs	r3, r0, #1
   24694:	2b1d      	cmp	r3, #29
   24696:	d81e      	bhi.n	246d6 <att_op_get_type+0x4a>
   24698:	e8df f003 	tbb	[pc, r3]
   2469c:	23172317 	.word	0x23172317
   246a0:	23172317 	.word	0x23172317
   246a4:	23172317 	.word	0x23172317
   246a8:	23172317 	.word	0x23172317
   246ac:	1d172317 	.word	0x1d172317
   246b0:	2317231d 	.word	0x2317231d
   246b4:	1d191d17 	.word	0x1d191d17
   246b8:	0f1b      	.short	0x0f1b
   246ba:	2004      	movs	r0, #4
   246bc:	4770      	bx	lr
   246be:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   246c2:	2b52      	cmp	r3, #82	; 0x52
   246c4:	d107      	bne.n	246d6 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   246c6:	2000      	movs	r0, #0
}
   246c8:	4770      	bx	lr
		return ATT_RESPONSE;
   246ca:	2002      	movs	r0, #2
   246cc:	4770      	bx	lr
		return ATT_NOTIFICATION;
   246ce:	2003      	movs	r0, #3
   246d0:	4770      	bx	lr
		return ATT_INDICATION;
   246d2:	2005      	movs	r0, #5
   246d4:	4770      	bx	lr
		return ATT_COMMAND;
   246d6:	f010 0f40 	tst.w	r0, #64	; 0x40
   246da:	bf0c      	ite	eq
   246dc:	2006      	moveq	r0, #6
   246de:	2000      	movne	r0, #0
   246e0:	4770      	bx	lr
		return ATT_REQUEST;
   246e2:	2001      	movs	r0, #1
   246e4:	4770      	bx	lr

000246e6 <bt_gatt_foreach_attr>:
{
   246e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   246e8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   246ec:	2300      	movs	r3, #0
   246ee:	9300      	str	r3, [sp, #0]
   246f0:	461a      	mov	r2, r3
   246f2:	f7e8 feb1 	bl	d458 <bt_gatt_foreach_attr_type>
}
   246f6:	b005      	add	sp, #20
   246f8:	f85d fb04 	ldr.w	pc, [sp], #4

000246fc <find_info_cb>:
{
   246fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   246fe:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   24700:	6817      	ldr	r7, [r2, #0]
{
   24702:	4605      	mov	r5, r0
   24704:	460e      	mov	r6, r1
   24706:	4614      	mov	r4, r2
	if (!data->rsp) {
   24708:	b963      	cbnz	r3, 24724 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2470a:	6850      	ldr	r0, [r2, #4]
   2470c:	2101      	movs	r1, #1
   2470e:	3008      	adds	r0, #8
   24710:	f001 fa87 	bl	25c22 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24714:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   24716:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24718:	781b      	ldrb	r3, [r3, #0]
   2471a:	2b00      	cmp	r3, #0
   2471c:	bf0c      	ite	eq
   2471e:	2301      	moveq	r3, #1
   24720:	2302      	movne	r3, #2
   24722:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   24724:	68a3      	ldr	r3, [r4, #8]
   24726:	781b      	ldrb	r3, [r3, #0]
   24728:	2b01      	cmp	r3, #1
   2472a:	d003      	beq.n	24734 <find_info_cb+0x38>
   2472c:	2b02      	cmp	r3, #2
   2472e:	d019      	beq.n	24764 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   24730:	2000      	movs	r0, #0
   24732:	e016      	b.n	24762 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   24734:	682b      	ldr	r3, [r5, #0]
   24736:	781b      	ldrb	r3, [r3, #0]
   24738:	2b00      	cmp	r3, #0
   2473a:	d1f9      	bne.n	24730 <find_info_cb+0x34>
   2473c:	6860      	ldr	r0, [r4, #4]
   2473e:	2104      	movs	r1, #4
   24740:	3008      	adds	r0, #8
   24742:	f001 fa6e 	bl	25c22 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24746:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   24748:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2474a:	885b      	ldrh	r3, [r3, #2]
   2474c:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2474e:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   24750:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   24752:	899b      	ldrh	r3, [r3, #12]
   24754:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   24758:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2475a:	2804      	cmp	r0, #4
   2475c:	bf94      	ite	ls
   2475e:	2000      	movls	r0, #0
   24760:	2001      	movhi	r0, #1
}
   24762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   24764:	682b      	ldr	r3, [r5, #0]
   24766:	781b      	ldrb	r3, [r3, #0]
   24768:	2b02      	cmp	r3, #2
   2476a:	d1e1      	bne.n	24730 <find_info_cb+0x34>
   2476c:	6860      	ldr	r0, [r4, #4]
   2476e:	2112      	movs	r1, #18
   24770:	3008      	adds	r0, #8
   24772:	f001 fa56 	bl	25c22 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24776:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   24778:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2477a:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2477c:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24780:	3101      	adds	r1, #1
   24782:	f7ff f9fa 	bl	23b7a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   24786:	6863      	ldr	r3, [r4, #4]
   24788:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   2478c:	899b      	ldrh	r3, [r3, #12]
   2478e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   24790:	2812      	cmp	r0, #18
   24792:	e7e3      	b.n	2475c <find_info_cb+0x60>

00024794 <attr_read_group_cb>:
	if (!data->rsp->len) {
   24794:	68d0      	ldr	r0, [r2, #12]
   24796:	7803      	ldrb	r3, [r0, #0]
   24798:	3104      	adds	r1, #4
   2479a:	b913      	cbnz	r3, 247a2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2479c:	7001      	strb	r1, [r0, #0]
	return true;
   2479e:	2001      	movs	r0, #1
}
   247a0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   247a2:	428b      	cmp	r3, r1
   247a4:	d0fb      	beq.n	2479e <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   247a6:	6891      	ldr	r1, [r2, #8]
   247a8:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   247aa:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   247ac:	3b04      	subs	r3, #4
   247ae:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   247b0:	6110      	str	r0, [r2, #16]
		return false;
   247b2:	4770      	bx	lr

000247b4 <write_cb>:
{
   247b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   247b6:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   247b8:	4601      	mov	r1, r0
{
   247ba:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   247bc:	222a      	movs	r2, #42	; 0x2a
   247be:	6820      	ldr	r0, [r4, #0]
   247c0:	f000 fdb7 	bl	25332 <bt_gatt_check_perm>
   247c4:	4605      	mov	r5, r0
   247c6:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   247c8:	bb00      	cbnz	r0, 2480c <write_cb+0x58>
	if (!data->req) {
   247ca:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   247cc:	68b7      	ldr	r7, [r6, #8]
   247ce:	68e2      	ldr	r2, [r4, #12]
   247d0:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   247d2:	2b00      	cmp	r3, #0
   247d4:	bf14      	ite	ne
   247d6:	2300      	movne	r3, #0
   247d8:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   247da:	9301      	str	r3, [sp, #4]
   247dc:	8a63      	ldrh	r3, [r4, #18]
   247de:	9300      	str	r3, [sp, #0]
   247e0:	4631      	mov	r1, r6
   247e2:	8a23      	ldrh	r3, [r4, #16]
   247e4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   247e6:	1e03      	subs	r3, r0, #0
   247e8:	db05      	blt.n	247f6 <write_cb+0x42>
   247ea:	8a22      	ldrh	r2, [r4, #16]
   247ec:	4293      	cmp	r3, r2
   247ee:	d10b      	bne.n	24808 <write_cb+0x54>
	data->err = 0U;
   247f0:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   247f2:	2501      	movs	r5, #1
   247f4:	e005      	b.n	24802 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   247f6:	f113 0fff 	cmn.w	r3, #255	; 0xff
   247fa:	d305      	bcc.n	24808 <write_cb+0x54>
		return -err;
   247fc:	425b      	negs	r3, r3
   247fe:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   24800:	7523      	strb	r3, [r4, #20]
}
   24802:	4628      	mov	r0, r5
   24804:	b003      	add	sp, #12
   24806:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   24808:	230e      	movs	r3, #14
   2480a:	e7f9      	b.n	24800 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   2480c:	2500      	movs	r5, #0
   2480e:	e7f8      	b.n	24802 <write_cb+0x4e>

00024810 <chan_req_send>:
{
   24810:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24812:	688e      	ldr	r6, [r1, #8]
{
   24814:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24816:	4630      	mov	r0, r6
   24818:	f7ff ff1a 	bl	24650 <net_buf_frags_len>
   2481c:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   24820:	4283      	cmp	r3, r0
{
   24822:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24824:	d30a      	bcc.n	2483c <chan_req_send+0x2c>
	req->buf = NULL;
   24826:	2200      	movs	r2, #0
	chan->req = req;
   24828:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	err = chan_send(chan, buf, NULL);
   2482c:	4628      	mov	r0, r5
	req->buf = NULL;
   2482e:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   24830:	4631      	mov	r1, r6
   24832:	f7e7 f8d1 	bl	b9d8 <chan_send>
	if (err) {
   24836:	b100      	cbz	r0, 2483a <chan_req_send+0x2a>
		req->buf = buf;
   24838:	60a6      	str	r6, [r4, #8]
}
   2483a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2483c:	f06f 0023 	mvn.w	r0, #35	; 0x23
   24840:	e7fb      	b.n	2483a <chan_req_send+0x2a>

00024842 <process_queue>:
{
   24842:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   24844:	2200      	movs	r2, #0
{
   24846:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   24848:	2300      	movs	r3, #0
   2484a:	4608      	mov	r0, r1
{
   2484c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2484e:	f001 f997 	bl	25b80 <net_buf_get>
	if (buf) {
   24852:	4605      	mov	r5, r0
   24854:	b160      	cbz	r0, 24870 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   24856:	4601      	mov	r1, r0
   24858:	2200      	movs	r2, #0
   2485a:	4620      	mov	r0, r4
   2485c:	f7e7 f8bc 	bl	b9d8 <chan_send>
		if (err) {
   24860:	4604      	mov	r4, r0
   24862:	b118      	cbz	r0, 2486c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   24864:	4629      	mov	r1, r5
   24866:	4630      	mov	r0, r6
   24868:	f001 fe81 	bl	2656e <k_queue_prepend>
}
   2486c:	4620      	mov	r0, r4
   2486e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   24870:	f06f 0401 	mvn.w	r4, #1
   24874:	e7fa      	b.n	2486c <process_queue+0x2a>

00024876 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24876:	b510      	push	{r4, lr}
	return list->head;
   24878:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2487a:	2200      	movs	r2, #0
   2487c:	b153      	cbz	r3, 24894 <sys_slist_find_and_remove.isra.0+0x1e>
   2487e:	428b      	cmp	r3, r1
   24880:	d10e      	bne.n	248a0 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   24882:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   24884:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   24886:	b932      	cbnz	r2, 24896 <sys_slist_find_and_remove.isra.0+0x20>
   24888:	42a1      	cmp	r1, r4
	list->head = node;
   2488a:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2488c:	d100      	bne.n	24890 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2488e:	6043      	str	r3, [r0, #4]
	parent->next = child;
   24890:	2300      	movs	r3, #0
   24892:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24894:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   24896:	42a1      	cmp	r1, r4
	parent->next = child;
   24898:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2489a:	bf08      	it	eq
   2489c:	6042      	streq	r2, [r0, #4]
}
   2489e:	e7f7      	b.n	24890 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   248a0:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   248a2:	681b      	ldr	r3, [r3, #0]
   248a4:	e7ea      	b.n	2487c <sys_slist_find_and_remove.isra.0+0x6>

000248a6 <att_chan_read>:
{
   248a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248aa:	4680      	mov	r8, r0
   248ac:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   248ae:	4610      	mov	r0, r2
{
   248b0:	4699      	mov	r9, r3
   248b2:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   248b4:	f7ff fecc 	bl	24650 <net_buf_frags_len>
   248b8:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   248bc:	4283      	cmp	r3, r0
{
   248be:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   248c0:	d97a      	bls.n	249b8 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   248c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   248c6:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   248c8:	4630      	mov	r0, r6
   248ca:	f001 f988 	bl	25bde <net_buf_frag_last>
	size_t len, total = 0;
   248ce:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   248d2:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   248d4:	4630      	mov	r0, r6
   248d6:	f7ff febb 	bl	24650 <net_buf_frags_len>
   248da:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   248de:	f105 0708 	add.w	r7, r5, #8
   248e2:	1a24      	subs	r4, r4, r0
   248e4:	4638      	mov	r0, r7
   248e6:	f001 f9d7 	bl	25c98 <net_buf_simple_tailroom>
   248ea:	4284      	cmp	r4, r0
   248ec:	d211      	bcs.n	24912 <att_chan_read+0x6c>
   248ee:	4630      	mov	r0, r6
   248f0:	f7ff feae 	bl	24650 <net_buf_frags_len>
   248f4:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   248f8:	1a24      	subs	r4, r4, r0
		if (!len) {
   248fa:	bb34      	cbnz	r4, 2494a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   248fc:	79b0      	ldrb	r0, [r6, #6]
   248fe:	f7f8 f9cf 	bl	1cca0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   24902:	2200      	movs	r2, #0
   24904:	2300      	movs	r3, #0
   24906:	f001 f936 	bl	25b76 <net_buf_alloc_fixed>
			if (!frag) {
   2490a:	4605      	mov	r5, r0
   2490c:	b930      	cbnz	r0, 2491c <att_chan_read+0x76>
	return total;
   2490e:	4657      	mov	r7, sl
   24910:	e02c      	b.n	2496c <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   24912:	4638      	mov	r0, r7
   24914:	f001 f9c0 	bl	25c98 <net_buf_simple_tailroom>
   24918:	4604      	mov	r4, r0
   2491a:	e7ee      	b.n	248fa <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2491c:	4601      	mov	r1, r0
   2491e:	4630      	mov	r0, r6
   24920:	f001 f96e 	bl	25c00 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   24924:	4630      	mov	r0, r6
   24926:	f7ff fe93 	bl	24650 <net_buf_frags_len>
   2492a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2492e:	f105 0708 	add.w	r7, r5, #8
   24932:	1a24      	subs	r4, r4, r0
   24934:	4638      	mov	r0, r7
   24936:	f001 f9af 	bl	25c98 <net_buf_simple_tailroom>
   2493a:	4284      	cmp	r4, r0
   2493c:	d21a      	bcs.n	24974 <att_chan_read+0xce>
   2493e:	4630      	mov	r0, r6
   24940:	f7ff fe86 	bl	24650 <net_buf_frags_len>
   24944:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   24948:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2494a:	68a9      	ldr	r1, [r5, #8]
   2494c:	89aa      	ldrh	r2, [r5, #12]
   2494e:	f8db 7004 	ldr.w	r7, [fp, #4]
   24952:	9803      	ldr	r0, [sp, #12]
   24954:	f8cd 9000 	str.w	r9, [sp]
   24958:	440a      	add	r2, r1
   2495a:	b2a3      	uxth	r3, r4
   2495c:	4659      	mov	r1, fp
   2495e:	47b8      	blx	r7
		if (read < 0) {
   24960:	1e07      	subs	r7, r0, #0
   24962:	da0c      	bge.n	2497e <att_chan_read+0xd8>
				return total;
   24964:	f1ba 0f00 	cmp.w	sl, #0
   24968:	bf18      	it	ne
   2496a:	4657      	movne	r7, sl
}
   2496c:	4638      	mov	r0, r7
   2496e:	b005      	add	sp, #20
   24970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24974:	4638      	mov	r0, r7
   24976:	f001 f98f 	bl	25c98 <net_buf_simple_tailroom>
   2497a:	4604      	mov	r4, r0
   2497c:	e7e5      	b.n	2494a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2497e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24980:	b993      	cbnz	r3, 249a8 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   24982:	4639      	mov	r1, r7
   24984:	f105 0008 	add.w	r0, r5, #8
   24988:	f001 f94b 	bl	25c22 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2498c:	4630      	mov	r0, r6
   2498e:	f7ff fe5f 	bl	24650 <net_buf_frags_len>
   24992:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   24996:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   24998:	4283      	cmp	r3, r0
		total += read;
   2499a:	44ba      	add	sl, r7
		offset += read;
   2499c:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   249a0:	d9b5      	bls.n	2490e <att_chan_read+0x68>
   249a2:	42a7      	cmp	r7, r4
   249a4:	d096      	beq.n	248d4 <att_chan_read+0x2e>
   249a6:	e7b2      	b.n	2490e <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   249a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   249aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   249ac:	4639      	mov	r1, r7
   249ae:	4628      	mov	r0, r5
   249b0:	4798      	blx	r3
   249b2:	2800      	cmp	r0, #0
   249b4:	d1e5      	bne.n	24982 <att_chan_read+0xdc>
   249b6:	e7aa      	b.n	2490e <att_chan_read+0x68>
		return 0;
   249b8:	2700      	movs	r7, #0
   249ba:	e7d7      	b.n	2496c <att_chan_read+0xc6>

000249bc <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   249bc:	30c0      	adds	r0, #192	; 0xc0
   249be:	f3bf 8f5b 	dmb	ish
   249c2:	e850 3f00 	ldrex	r3, [r0]
   249c6:	f023 0302 	bic.w	r3, r3, #2
   249ca:	e840 3200 	strex	r2, r3, [r0]
   249ce:	2a00      	cmp	r2, #0
   249d0:	d1f7      	bne.n	249c2 <chan_cfm_sent+0x6>
   249d2:	f3bf 8f5b 	dmb	ish
}
   249d6:	4770      	bx	lr

000249d8 <chan_rsp_sent>:
   249d8:	30c0      	adds	r0, #192	; 0xc0
   249da:	f3bf 8f5b 	dmb	ish
   249de:	e850 3f00 	ldrex	r3, [r0]
   249e2:	f023 0301 	bic.w	r3, r3, #1
   249e6:	e840 3200 	strex	r2, r3, [r0]
   249ea:	2a00      	cmp	r2, #0
   249ec:	d1f7      	bne.n	249de <chan_rsp_sent+0x6>
   249ee:	f3bf 8f5b 	dmb	ish
}
   249f2:	4770      	bx	lr

000249f4 <read_cb>:
{
   249f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   249f8:	f8d2 8000 	ldr.w	r8, [r2]
{
   249fc:	4606      	mov	r6, r0
	data->err = 0x00;
   249fe:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   24a00:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   24a04:	7317      	strb	r7, [r2, #12]
{
   24a06:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   24a08:	4631      	mov	r1, r6
   24a0a:	2215      	movs	r2, #21
   24a0c:	f000 fc91 	bl	25332 <bt_gatt_check_perm>
   24a10:	4604      	mov	r4, r0
   24a12:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   24a14:	b9a0      	cbnz	r0, 24a40 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   24a16:	e9cd 0000 	strd	r0, r0, [sp]
   24a1a:	88ab      	ldrh	r3, [r5, #4]
   24a1c:	68aa      	ldr	r2, [r5, #8]
   24a1e:	4631      	mov	r1, r6
   24a20:	4640      	mov	r0, r8
   24a22:	f7ff ff40 	bl	248a6 <att_chan_read>
	if (ret < 0) {
   24a26:	1e03      	subs	r3, r0, #0
   24a28:	da0c      	bge.n	24a44 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   24a2a:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   24a2e:	bf26      	itte	cs
   24a30:	425b      	negcs	r3, r3
   24a32:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   24a34:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   24a36:	732b      	strb	r3, [r5, #12]
}
   24a38:	4620      	mov	r0, r4
   24a3a:	b002      	add	sp, #8
   24a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   24a40:	463c      	mov	r4, r7
   24a42:	e7f9      	b.n	24a38 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   24a44:	2401      	movs	r4, #1
   24a46:	e7f7      	b.n	24a38 <read_cb+0x44>

00024a48 <bt_att_sent>:
{
   24a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   24a4a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
	struct bt_att *att = chan->att;
   24a4e:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   24a52:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   24a54:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   24a58:	b10b      	cbz	r3, 24a5e <bt_att_sent+0x16>
		chan->sent(chan);
   24a5a:	4638      	mov	r0, r7
   24a5c:	4798      	blx	r3
   24a5e:	f3bf 8f5b 	dmb	ish
   24a62:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
   24a66:	e853 2f00 	ldrex	r2, [r3]
   24a6a:	f022 0210 	bic.w	r2, r2, #16
   24a6e:	e843 2100 	strex	r1, r2, [r3]
   24a72:	2900      	cmp	r1, #0
   24a74:	d1f7      	bne.n	24a66 <bt_att_sent+0x1e>
   24a76:	f3bf 8f5b 	dmb	ish
	if (!att) {
   24a7a:	b30c      	cbz	r4, 24ac0 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   24a7c:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   24a80:	b98b      	cbnz	r3, 24aa6 <bt_att_sent+0x5e>
   24a82:	6863      	ldr	r3, [r4, #4]
   24a84:	b17b      	cbz	r3, 24aa6 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   24a86:	1d20      	adds	r0, r4, #4
   24a88:	f7ff fdd8 	bl	2463c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24a8c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   24a8e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24a90:	4638      	mov	r0, r7
   24a92:	f7ff febd 	bl	24810 <chan_req_send>
   24a96:	2800      	cmp	r0, #0
   24a98:	da12      	bge.n	24ac0 <bt_att_sent+0x78>
	parent->next = child;
   24a9a:	6863      	ldr	r3, [r4, #4]
   24a9c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   24a9e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   24aa0:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   24aa2:	b903      	cbnz	r3, 24aa6 <bt_att_sent+0x5e>
	list->tail = node;
   24aa4:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   24aa6:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   24aaa:	4638      	mov	r0, r7
   24aac:	f7ff fec9 	bl	24842 <process_queue>
	if (!err) {
   24ab0:	b130      	cbz	r0, 24ac0 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   24ab2:	f104 010c 	add.w	r1, r4, #12
   24ab6:	4638      	mov	r0, r7
}
   24ab8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   24abc:	f7ff bec1 	b.w	24842 <process_queue>
}
   24ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024ac2 <bt_att_status>:
{
   24ac2:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24ac4:	f3bf 8f5b 	dmb	ish
   24ac8:	680b      	ldr	r3, [r1, #0]
   24aca:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   24ace:	07db      	lsls	r3, r3, #31
{
   24ad0:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   24ad2:	d519      	bpl.n	24b08 <bt_att_status+0x46>
	if (!chan->att) {
   24ad4:	f850 0c08 	ldr.w	r0, [r0, #-8]
   24ad8:	b1b0      	cbz	r0, 24b08 <bt_att_status+0x46>
	if (chan->req) {
   24ada:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   24ade:	b99b      	cbnz	r3, 24b08 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   24ae0:	3004      	adds	r0, #4
   24ae2:	f7ff fdab 	bl	2463c <sys_slist_get>
	if (!node) {
   24ae6:	4604      	mov	r4, r0
   24ae8:	b170      	cbz	r0, 24b08 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   24aea:	4601      	mov	r1, r0
   24aec:	f1a5 0008 	sub.w	r0, r5, #8
   24af0:	f7ff fe8e 	bl	24810 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   24af4:	2800      	cmp	r0, #0
   24af6:	da07      	bge.n	24b08 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   24af8:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   24afc:	685a      	ldr	r2, [r3, #4]
   24afe:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   24b00:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   24b02:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   24b04:	b902      	cbnz	r2, 24b08 <bt_att_status+0x46>
	list->tail = node;
   24b06:	609c      	str	r4, [r3, #8]
}
   24b08:	bd38      	pop	{r3, r4, r5, pc}

00024b0a <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   24b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b0e:	4688      	mov	r8, r1
   24b10:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   24b12:	2101      	movs	r1, #1
   24b14:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   24b16:	4605      	mov	r5, r0
   24b18:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   24b1a:	f7e7 f961 	bl	bde0 <bt_att_chan_create_pdu>
	if (!buf) {
   24b1e:	4604      	mov	r4, r0
   24b20:	b170      	cbz	r0, 24b40 <send_err_rsp.part.0+0x36>
   24b22:	2104      	movs	r1, #4
   24b24:	3008      	adds	r0, #8
   24b26:	f001 f87c 	bl	25c22 <net_buf_simple_add>
	rsp->request = req;
   24b2a:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   24b2e:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   24b30:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   24b34:	4621      	mov	r1, r4
   24b36:	4628      	mov	r0, r5
}
   24b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   24b3c:	f7e6 bfba 	b.w	bab4 <bt_att_chan_send_rsp.constprop.0>
}
   24b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024b44 <att_write_cmd>:
{
   24b44:	b530      	push	{r4, r5, lr}
   24b46:	460c      	mov	r4, r1
   24b48:	b085      	sub	sp, #20
   24b4a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   24b4c:	f101 0008 	add.w	r0, r1, #8
   24b50:	f001 f896 	bl	25c80 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   24b54:	89a2      	ldrh	r2, [r4, #12]
   24b56:	9202      	str	r2, [sp, #8]
   24b58:	68a2      	ldr	r2, [r4, #8]
   24b5a:	9201      	str	r2, [sp, #4]
   24b5c:	2200      	movs	r2, #0
   24b5e:	4603      	mov	r3, r0
   24b60:	9200      	str	r2, [sp, #0]
   24b62:	4611      	mov	r1, r2
   24b64:	4628      	mov	r0, r5
   24b66:	f7e7 fa2f 	bl	bfc8 <att_write_rsp>
}
   24b6a:	b005      	add	sp, #20
   24b6c:	bd30      	pop	{r4, r5, pc}

00024b6e <att_write_req>:
{
   24b6e:	b530      	push	{r4, r5, lr}
   24b70:	460c      	mov	r4, r1
   24b72:	b085      	sub	sp, #20
   24b74:	4605      	mov	r5, r0
   24b76:	f101 0008 	add.w	r0, r1, #8
   24b7a:	f001 f881 	bl	25c80 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   24b7e:	89a2      	ldrh	r2, [r4, #12]
   24b80:	9202      	str	r2, [sp, #8]
   24b82:	68a2      	ldr	r2, [r4, #8]
   24b84:	9201      	str	r2, [sp, #4]
   24b86:	2200      	movs	r2, #0
   24b88:	4603      	mov	r3, r0
   24b8a:	9200      	str	r2, [sp, #0]
   24b8c:	2112      	movs	r1, #18
   24b8e:	2213      	movs	r2, #19
   24b90:	4628      	mov	r0, r5
   24b92:	f7e7 fa19 	bl	bfc8 <att_write_rsp>
}
   24b96:	b005      	add	sp, #20
   24b98:	bd30      	pop	{r4, r5, pc}

00024b9a <att_exec_write_req>:
{
   24b9a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
   24b9e:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
   24ba0:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
   24ba2:	f893 8000 	ldrb.w	r8, [r3]
{
   24ba6:	4606      	mov	r6, r0
	uint8_t err = 0U;
   24ba8:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
   24baa:	6830      	ldr	r0, [r6, #0]
   24bac:	2200      	movs	r2, #0
   24bae:	2300      	movs	r3, #0
   24bb0:	3024      	adds	r0, #36	; 0x24
   24bb2:	f000 ffe5 	bl	25b80 <net_buf_get>
   24bb6:	4605      	mov	r5, r0
   24bb8:	b970      	cbnz	r0, 24bd8 <att_exec_write_req+0x3e>
	if (err) {
   24bba:	bb4c      	cbnz	r4, 24c10 <att_exec_write_req+0x76>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   24bbc:	2119      	movs	r1, #25
   24bbe:	4622      	mov	r2, r4
   24bc0:	4638      	mov	r0, r7
   24bc2:	f7e7 faa3 	bl	c10c <bt_att_create_pdu>
	if (!buf) {
   24bc6:	4601      	mov	r1, r0
   24bc8:	b320      	cbz	r0, 24c14 <att_exec_write_req+0x7a>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   24bca:	4630      	mov	r0, r6
   24bcc:	f7e6 ff72 	bl	bab4 <bt_att_chan_send_rsp.constprop.0>
}
   24bd0:	4620      	mov	r0, r4
   24bd2:	b004      	add	sp, #16
   24bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   24bd8:	b9b4      	cbnz	r4, 24c08 <att_exec_write_req+0x6e>
   24bda:	f1b8 0f01 	cmp.w	r8, #1
   24bde:	d113      	bne.n	24c08 <att_exec_write_req+0x6e>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   24be0:	89aa      	ldrh	r2, [r5, #12]
   24be2:	8aab      	ldrh	r3, [r5, #20]
   24be4:	9202      	str	r2, [sp, #8]
   24be6:	68aa      	ldr	r2, [r5, #8]
   24be8:	9201      	str	r2, [sp, #4]
   24bea:	8aea      	ldrh	r2, [r5, #22]
   24bec:	9200      	str	r2, [sp, #0]
   24bee:	2118      	movs	r1, #24
   24bf0:	4622      	mov	r2, r4
   24bf2:	4630      	mov	r0, r6
   24bf4:	f7e7 f9e8 	bl	bfc8 <att_write_rsp>
			if (err) {
   24bf8:	4604      	mov	r4, r0
   24bfa:	b128      	cbz	r0, 24c08 <att_exec_write_req+0x6e>
	if (!req) {
   24bfc:	4603      	mov	r3, r0
   24bfe:	8aaa      	ldrh	r2, [r5, #20]
   24c00:	2118      	movs	r1, #24
   24c02:	4630      	mov	r0, r6
   24c04:	f7ff ff81 	bl	24b0a <send_err_rsp.part.0>
		net_buf_unref(buf);
   24c08:	4628      	mov	r0, r5
   24c0a:	f7f8 f907 	bl	1ce1c <net_buf_unref>
   24c0e:	e7cc      	b.n	24baa <att_exec_write_req+0x10>
		return 0;
   24c10:	4604      	mov	r4, r0
   24c12:	e7dd      	b.n	24bd0 <att_exec_write_req+0x36>
		return BT_ATT_ERR_UNLIKELY;
   24c14:	240e      	movs	r4, #14
   24c16:	e7db      	b.n	24bd0 <att_exec_write_req+0x36>

00024c18 <att_read_blob_req>:
{
   24c18:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   24c1a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   24c1c:	8813      	ldrh	r3, [r2, #0]
   24c1e:	8852      	ldrh	r2, [r2, #2]
   24c20:	9200      	str	r2, [sp, #0]
   24c22:	210c      	movs	r1, #12
   24c24:	220d      	movs	r2, #13
   24c26:	f7e7 fbdb 	bl	c3e0 <att_read_rsp>
}
   24c2a:	b003      	add	sp, #12
   24c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00024c30 <att_read_req>:
{
   24c30:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   24c32:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   24c34:	2200      	movs	r2, #0
   24c36:	881b      	ldrh	r3, [r3, #0]
   24c38:	9200      	str	r2, [sp, #0]
   24c3a:	210a      	movs	r1, #10
   24c3c:	220b      	movs	r2, #11
   24c3e:	f7e7 fbcf 	bl	c3e0 <att_read_rsp>
}
   24c42:	b003      	add	sp, #12
   24c44:	f85d fb04 	ldr.w	pc, [sp], #4

00024c48 <att_mtu_req>:
{
   24c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   24c4a:	6803      	ldr	r3, [r0, #0]
{
   24c4c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   24c4e:	6818      	ldr	r0, [r3, #0]
   24c50:	f3bf 8f5b 	dmb	ish
   24c54:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   24c58:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   24c5c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   24c60:	071b      	lsls	r3, r3, #28
   24c62:	d41d      	bmi.n	24ca0 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   24c64:	688b      	ldr	r3, [r1, #8]
   24c66:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   24c68:	2e16      	cmp	r6, #22
   24c6a:	d91b      	bls.n	24ca4 <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   24c6c:	2202      	movs	r2, #2
   24c6e:	2103      	movs	r1, #3
   24c70:	f7e7 fa4c 	bl	c10c <bt_att_create_pdu>
	if (!pdu) {
   24c74:	4607      	mov	r7, r0
   24c76:	b1b8      	cbz	r0, 24ca8 <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   24c78:	2102      	movs	r1, #2
   24c7a:	3008      	adds	r0, #8
   24c7c:	f000 ffd1 	bl	25c22 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   24c80:	2341      	movs	r3, #65	; 0x41
   24c82:	7003      	strb	r3, [r0, #0]
   24c84:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   24c86:	4639      	mov	r1, r7
   24c88:	4628      	mov	r0, r5
   24c8a:	f7e6 ff13 	bl	bab4 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   24c8e:	2e41      	cmp	r6, #65	; 0x41
   24c90:	bf28      	it	cs
   24c92:	2641      	movcs	r6, #65	; 0x41
   24c94:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   24c98:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   24c9c:	4620      	mov	r0, r4
}
   24c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   24ca0:	2006      	movs	r0, #6
   24ca2:	e7fc      	b.n	24c9e <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   24ca4:	2004      	movs	r0, #4
   24ca6:	e7fa      	b.n	24c9e <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   24ca8:	200e      	movs	r0, #14
   24caa:	e7f8      	b.n	24c9e <att_mtu_req+0x56>

00024cac <bt_att_init>:
	bt_gatt_init();
   24cac:	f7e8 bb42 	b.w	d334 <bt_gatt_init>

00024cb0 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   24cb0:	898a      	ldrh	r2, [r1, #12]
   24cb2:	6889      	ldr	r1, [r1, #8]
   24cb4:	2300      	movs	r3, #0
   24cb6:	f7e7 bd05 	b.w	c6c4 <att_handle_rsp>

00024cba <bt_att_encrypt_change>:
	if (!att_chan->att) {
   24cba:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   24cbe:	b570      	push	{r4, r5, r6, lr}
   24cc0:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   24cc2:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   24cc6:	2b00      	cmp	r3, #0
   24cc8:	d037      	beq.n	24d3a <bt_att_encrypt_change+0x80>
	if (hci_status) {
   24cca:	b171      	cbz	r1, 24cea <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   24ccc:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   24cd0:	2b00      	cmp	r3, #0
   24cd2:	d032      	beq.n	24d3a <bt_att_encrypt_change+0x80>
   24cd4:	7c1b      	ldrb	r3, [r3, #16]
   24cd6:	07da      	lsls	r2, r3, #31
   24cd8:	d52f      	bpl.n	24d3a <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   24cda:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   24cdc:	2200      	movs	r2, #0
   24cde:	4630      	mov	r0, r6
   24ce0:	4611      	mov	r1, r2
}
   24ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   24ce6:	f7e7 bced 	b.w	c6c4 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   24cea:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   24cec:	4628      	mov	r0, r5
   24cee:	f7e8 ff23 	bl	db38 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   24cf2:	7a6b      	ldrb	r3, [r5, #9]
   24cf4:	2b01      	cmp	r3, #1
   24cf6:	d020      	beq.n	24d3a <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   24cf8:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
   24cfc:	b1ec      	cbz	r4, 24d3a <bt_att_encrypt_change+0x80>
   24cfe:	7c23      	ldrb	r3, [r4, #16]
   24d00:	07db      	lsls	r3, r3, #31
   24d02:	d51a      	bpl.n	24d3a <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   24d04:	68e3      	ldr	r3, [r4, #12]
   24d06:	2b00      	cmp	r3, #0
   24d08:	d0e7      	beq.n	24cda <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   24d0a:	6962      	ldr	r2, [r4, #20]
   24d0c:	7c61      	ldrb	r1, [r4, #17]
   24d0e:	4630      	mov	r0, r6
   24d10:	f7e7 f866 	bl	bde0 <bt_att_chan_create_pdu>
	if (!buf) {
   24d14:	4605      	mov	r5, r0
   24d16:	b140      	cbz	r0, 24d2a <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   24d18:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   24d1c:	68e3      	ldr	r3, [r4, #12]
   24d1e:	4798      	blx	r3
   24d20:	4602      	mov	r2, r0
   24d22:	b120      	cbz	r0, 24d2e <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   24d24:	4628      	mov	r0, r5
   24d26:	f7f8 f879 	bl	1ce1c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   24d2a:	230e      	movs	r3, #14
   24d2c:	e7d6      	b.n	24cdc <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   24d2e:	4629      	mov	r1, r5
   24d30:	4630      	mov	r0, r6
   24d32:	f7e6 fe51 	bl	b9d8 <chan_send>
   24d36:	2800      	cmp	r0, #0
   24d38:	d1f4      	bne.n	24d24 <bt_att_encrypt_change+0x6a>
}
   24d3a:	bd70      	pop	{r4, r5, r6, pc}

00024d3c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   24d3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24d40:	4605      	mov	r5, r0
   24d42:	460e      	mov	r6, r1
   24d44:	4614      	mov	r4, r2
   24d46:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   24d48:	f7e6 fd3a 	bl	b7c0 <att_get>
	if (!att) {
   24d4c:	4607      	mov	r7, r0
   24d4e:	b938      	cbnz	r0, 24d60 <bt_att_send+0x24>
		net_buf_unref(buf);
   24d50:	4630      	mov	r0, r6
   24d52:	f7f8 f863 	bl	1ce1c <net_buf_unref>
		return -ENOTCONN;
   24d56:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   24d5a:	b002      	add	sp, #8
   24d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   24d60:	b144      	cbz	r4, 24d74 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   24d62:	f8cd 8000 	str.w	r8, [sp]
   24d66:	4623      	mov	r3, r4
   24d68:	4632      	mov	r2, r6
   24d6a:	2104      	movs	r1, #4
   24d6c:	4628      	mov	r0, r5
   24d6e:	f7ff fc2b 	bl	245c8 <bt_l2cap_send_cb>
   24d72:	e7f2      	b.n	24d5a <bt_att_send+0x1e>
	return list->head;
   24d74:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24d76:	b184      	cbz	r4, 24d9a <bt_att_send+0x5e>
   24d78:	f5b4 758a 	subs.w	r5, r4, #276	; 0x114
   24d7c:	d00f      	beq.n	24d9e <bt_att_send+0x62>
	return node->next;
   24d7e:	6824      	ldr	r4, [r4, #0]
   24d80:	b10c      	cbz	r4, 24d86 <bt_att_send+0x4a>
   24d82:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
   24d86:	2000      	movs	r0, #0
   24d88:	b95d      	cbnz	r5, 24da2 <bt_att_send+0x66>
	if (ret < 0) {
   24d8a:	b188      	cbz	r0, 24db0 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   24d8c:	f107 000c 	add.w	r0, r7, #12
   24d90:	4631      	mov	r1, r6
   24d92:	f000 ff13 	bl	25bbc <net_buf_put>
	return 0;
   24d96:	4628      	mov	r0, r5
   24d98:	e7df      	b.n	24d5a <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24d9a:	4625      	mov	r5, r4
   24d9c:	e7f3      	b.n	24d86 <bt_att_send+0x4a>
   24d9e:	462c      	mov	r4, r5
   24da0:	e7f1      	b.n	24d86 <bt_att_send+0x4a>
	return chan_send(chan, buf, cb);
   24da2:	2200      	movs	r2, #0
   24da4:	4631      	mov	r1, r6
   24da6:	4628      	mov	r0, r5
   24da8:	f7e6 fe16 	bl	b9d8 <chan_send>
		if (ret >= 0) {
   24dac:	2800      	cmp	r0, #0
   24dae:	db01      	blt.n	24db4 <bt_att_send+0x78>
	return 0;
   24db0:	2000      	movs	r0, #0
   24db2:	e7d2      	b.n	24d5a <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24db4:	b154      	cbz	r4, 24dcc <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24db6:	f514 738a 	adds.w	r3, r4, #276	; 0x114
   24dba:	d004      	beq.n	24dc6 <bt_att_send+0x8a>
	return node->next;
   24dbc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   24dc0:	b10b      	cbz	r3, 24dc6 <bt_att_send+0x8a>
   24dc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
   24dc6:	4625      	mov	r5, r4
   24dc8:	461c      	mov	r4, r3
   24dca:	e7dd      	b.n	24d88 <bt_att_send+0x4c>
   24dcc:	4623      	mov	r3, r4
   24dce:	e7fa      	b.n	24dc6 <bt_att_send+0x8a>

00024dd0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   24dd0:	b570      	push	{r4, r5, r6, lr}
   24dd2:	460e      	mov	r6, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   24dd4:	f7e6 fcf4 	bl	b7c0 <att_get>
	if (!att) {
   24dd8:	4605      	mov	r5, r0
   24dda:	b340      	cbz	r0, 24e2e <bt_att_req_send+0x5e>
	return list->head;
   24ddc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return -ENOTCONN;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24dde:	b153      	cbz	r3, 24df6 <bt_att_req_send+0x26>
   24de0:	f5b3 708a 	subs.w	r0, r3, #276	; 0x114
   24de4:	d007      	beq.n	24df6 <bt_att_req_send+0x26>
	return node->next;
   24de6:	681c      	ldr	r4, [r3, #0]
   24de8:	b10c      	cbz	r4, 24dee <bt_att_req_send+0x1e>
   24dea:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
		/* If there is nothing pending use the channel */
		if (!chan->req) {
   24dee:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   24df2:	b143      	cbz	r3, 24e06 <bt_att_req_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24df4:	b96c      	cbnz	r4, 24e12 <bt_att_req_send+0x42>
	return list->tail;
   24df6:	68ab      	ldr	r3, [r5, #8]
	parent->next = child;
   24df8:	2000      	movs	r0, #0
   24dfa:	6030      	str	r0, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   24dfc:	b9a3      	cbnz	r3, 24e28 <bt_att_req_send+0x58>
	list->head = node;
   24dfe:	e9c5 6601 	strd	r6, r6, [r5, #4]
	/* Queue the request to be send later */
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
   24e02:	4618      	mov	r0, r3
}
   24e04:	e004      	b.n	24e10 <bt_att_req_send+0x40>
	return chan_req_send(chan, req);
   24e06:	4631      	mov	r1, r6
   24e08:	f7ff fd02 	bl	24810 <chan_req_send>
			if (ret >= 0) {
   24e0c:	2800      	cmp	r0, #0
   24e0e:	dbf1      	blt.n	24df4 <bt_att_req_send+0x24>
}
   24e10:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   24e12:	f514 738a 	adds.w	r3, r4, #276	; 0x114
   24e16:	d004      	beq.n	24e22 <bt_att_req_send+0x52>
	return node->next;
   24e18:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   24e1c:	b10b      	cbz	r3, 24e22 <bt_att_req_send+0x52>
   24e1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
{
   24e22:	4620      	mov	r0, r4
   24e24:	461c      	mov	r4, r3
   24e26:	e7e2      	b.n	24dee <bt_att_req_send+0x1e>
	parent->next = child;
   24e28:	601e      	str	r6, [r3, #0]
	list->tail = node;
   24e2a:	60ae      	str	r6, [r5, #8]
}
   24e2c:	e7f0      	b.n	24e10 <bt_att_req_send+0x40>
		return -ENOTCONN;
   24e2e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   24e32:	e7ed      	b.n	24e10 <bt_att_req_send+0x40>

00024e34 <gatt_ccc_changed>:
{
   24e34:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   24e36:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   24e38:	895a      	ldrh	r2, [r3, #10]
   24e3a:	428a      	cmp	r2, r1
   24e3c:	d003      	beq.n	24e46 <gatt_ccc_changed+0x12>
		ccc->value = value;
   24e3e:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   24e40:	68db      	ldr	r3, [r3, #12]
   24e42:	b103      	cbz	r3, 24e46 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   24e44:	4718      	bx	r3
}
   24e46:	4770      	bx	lr

00024e48 <gatt_indicate_rsp>:
{
   24e48:	b510      	push	{r4, lr}
   24e4a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   24e4c:	68a3      	ldr	r3, [r4, #8]
{
   24e4e:	460a      	mov	r2, r1
	if (params->func) {
   24e50:	b10b      	cbz	r3, 24e56 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   24e52:	4621      	mov	r1, r4
   24e54:	4798      	blx	r3
	params->_ref--;
   24e56:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   24e58:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   24e5a:	3b01      	subs	r3, #1
   24e5c:	b2db      	uxtb	r3, r3
   24e5e:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   24e60:	b122      	cbz	r2, 24e6c <gatt_indicate_rsp+0x24>
   24e62:	b91b      	cbnz	r3, 24e6c <gatt_indicate_rsp+0x24>
		params->destroy(params);
   24e64:	4620      	mov	r0, r4
}
   24e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   24e6a:	4710      	bx	r2
}
   24e6c:	bd10      	pop	{r4, pc}

00024e6e <match_uuid>:
	data->attr = attr;
   24e6e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   24e70:	8091      	strh	r1, [r2, #4]
}
   24e72:	2000      	movs	r0, #0
   24e74:	4770      	bx	lr

00024e76 <ccc_set_cb>:
}
   24e76:	2000      	movs	r0, #0
   24e78:	4770      	bx	lr

00024e7a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   24e7a:	2207      	movs	r2, #7
   24e7c:	f7fe be7d 	b.w	23b7a <memcpy>

00024e80 <clear_ccc_cfg>:
{
   24e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   24e82:	2500      	movs	r5, #0
{
   24e84:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   24e86:	4669      	mov	r1, sp
   24e88:	3001      	adds	r0, #1
   24e8a:	9500      	str	r5, [sp, #0]
   24e8c:	f8cd 5003 	str.w	r5, [sp, #3]
   24e90:	f7ff fff3 	bl	24e7a <bt_addr_le_copy>
	cfg->id = 0U;
   24e94:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   24e96:	8125      	strh	r5, [r4, #8]
}
   24e98:	b003      	add	sp, #12
   24e9a:	bd30      	pop	{r4, r5, pc}

00024e9c <write_name>:
{
   24e9c:	b570      	push	{r4, r5, r6, lr}
   24e9e:	b092      	sub	sp, #72	; 0x48
   24ea0:	4615      	mov	r5, r2
   24ea2:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   24ea6:	2100      	movs	r1, #0
   24ea8:	223d      	movs	r2, #61	; 0x3d
   24eaa:	a802      	add	r0, sp, #8
{
   24eac:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   24eae:	9101      	str	r1, [sp, #4]
   24eb0:	f7fe fe8e 	bl	23bd0 <memset>
	if (offset) {
   24eb4:	b966      	cbnz	r6, 24ed0 <write_name+0x34>
	if (len >= sizeof(value)) {
   24eb6:	2c40      	cmp	r4, #64	; 0x40
   24eb8:	d80d      	bhi.n	24ed6 <write_name+0x3a>
	memcpy(value, buf, len);
   24eba:	4622      	mov	r2, r4
   24ebc:	4629      	mov	r1, r5
   24ebe:	a801      	add	r0, sp, #4
   24ec0:	f7fe fe5b 	bl	23b7a <memcpy>
	bt_set_name(value);
   24ec4:	a801      	add	r0, sp, #4
   24ec6:	f7e4 ffdb 	bl	9e80 <bt_set_name>
	return len;
   24eca:	4620      	mov	r0, r4
}
   24ecc:	b012      	add	sp, #72	; 0x48
   24ece:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24ed0:	f06f 0006 	mvn.w	r0, #6
   24ed4:	e7fa      	b.n	24ecc <write_name+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   24ed6:	f06f 000c 	mvn.w	r0, #12
   24eda:	e7f7      	b.n	24ecc <write_name+0x30>

00024edc <gen_hash_m>:
{
   24edc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   24ede:	6807      	ldr	r7, [r0, #0]
   24ee0:	783d      	ldrb	r5, [r7, #0]
{
   24ee2:	b089      	sub	sp, #36	; 0x24
   24ee4:	4606      	mov	r6, r0
   24ee6:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   24ee8:	b10d      	cbz	r5, 24eee <gen_hash_m+0x12>
	switch (u16->val) {
   24eea:	2501      	movs	r5, #1
   24eec:	e014      	b.n	24f18 <gen_hash_m+0x3c>
   24eee:	887b      	ldrh	r3, [r7, #2]
   24ef0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   24ef4:	d004      	beq.n	24f00 <gen_hash_m+0x24>
   24ef6:	d812      	bhi.n	24f1e <gen_hash_m+0x42>
   24ef8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   24efc:	2b03      	cmp	r3, #3
   24efe:	d8f4      	bhi.n	24eea <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   24f00:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24f04:	2202      	movs	r2, #2
   24f06:	f10d 010e 	add.w	r1, sp, #14
   24f0a:	4620      	mov	r0, r4
   24f0c:	f7fe fcb8 	bl	23880 <tc_cmac_update>
   24f10:	b9e0      	cbnz	r0, 24f4c <gen_hash_m+0x70>
			state->err = -EINVAL;
   24f12:	f06f 0315 	mvn.w	r3, #21
   24f16:	65a3      	str	r3, [r4, #88]	; 0x58
}
   24f18:	4628      	mov	r0, r5
   24f1a:	b009      	add	sp, #36	; 0x24
   24f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   24f1e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   24f22:	33ff      	adds	r3, #255	; 0xff
   24f24:	b29b      	uxth	r3, r3
   24f26:	2b04      	cmp	r3, #4
   24f28:	d8df      	bhi.n	24eea <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   24f2a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24f2e:	2202      	movs	r2, #2
   24f30:	f10d 010e 	add.w	r1, sp, #14
   24f34:	4620      	mov	r0, r4
   24f36:	f7fe fca3 	bl	23880 <tc_cmac_update>
   24f3a:	2800      	cmp	r0, #0
   24f3c:	d0e9      	beq.n	24f12 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   24f3e:	887b      	ldrh	r3, [r7, #2]
   24f40:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24f44:	2202      	movs	r2, #2
   24f46:	f10d 010e 	add.w	r1, sp, #14
   24f4a:	e017      	b.n	24f7c <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   24f4c:	887b      	ldrh	r3, [r7, #2]
   24f4e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24f52:	2202      	movs	r2, #2
   24f54:	f10d 010e 	add.w	r1, sp, #14
   24f58:	4620      	mov	r0, r4
   24f5a:	f7fe fc91 	bl	23880 <tc_cmac_update>
   24f5e:	2800      	cmp	r0, #0
   24f60:	d0d7      	beq.n	24f12 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   24f62:	2000      	movs	r0, #0
   24f64:	2310      	movs	r3, #16
   24f66:	eb0d 0203 	add.w	r2, sp, r3
   24f6a:	6877      	ldr	r7, [r6, #4]
   24f6c:	9000      	str	r0, [sp, #0]
   24f6e:	4631      	mov	r1, r6
   24f70:	47b8      	blx	r7
		if (len < 0) {
   24f72:	1e02      	subs	r2, r0, #0
   24f74:	da01      	bge.n	24f7a <gen_hash_m+0x9e>
			state->err = len;
   24f76:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   24f78:	e7ce      	b.n	24f18 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   24f7a:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   24f7c:	4620      	mov	r0, r4
   24f7e:	f7fe fc7f 	bl	23880 <tc_cmac_update>
   24f82:	2800      	cmp	r0, #0
   24f84:	d1b1      	bne.n	24eea <gen_hash_m+0xe>
   24f86:	e7c4      	b.n	24f12 <gen_hash_m+0x36>

00024f88 <atomic_or>:
{
   24f88:	4603      	mov	r3, r0
}
   24f8a:	f3bf 8f5b 	dmb	ish
   24f8e:	e853 0f00 	ldrex	r0, [r3]
   24f92:	ea40 0201 	orr.w	r2, r0, r1
   24f96:	e843 2c00 	strex	ip, r2, [r3]
   24f9a:	f1bc 0f00 	cmp.w	ip, #0
   24f9e:	d1f6      	bne.n	24f8e <atomic_or+0x6>
   24fa0:	f3bf 8f5b 	dmb	ish
   24fa4:	4770      	bx	lr

00024fa6 <clear_cf_cfg>:
{
   24fa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24fa8:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   24faa:	2500      	movs	r5, #0
   24fac:	4669      	mov	r1, sp
   24fae:	3001      	adds	r0, #1
   24fb0:	9500      	str	r5, [sp, #0]
   24fb2:	f8cd 5003 	str.w	r5, [sp, #3]
   24fb6:	f7ff ff60 	bl	24e7a <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   24fba:	f104 0008 	add.w	r0, r4, #8
   24fbe:	2201      	movs	r2, #1
   24fc0:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24fc2:	340c      	adds	r4, #12
   24fc4:	f7fe fe04 	bl	23bd0 <memset>
   24fc8:	f3bf 8f5b 	dmb	ish
   24fcc:	e854 3f00 	ldrex	r3, [r4]
   24fd0:	e844 5200 	strex	r2, r5, [r4]
   24fd4:	2a00      	cmp	r2, #0
   24fd6:	d1f9      	bne.n	24fcc <clear_cf_cfg+0x26>
   24fd8:	f3bf 8f5b 	dmb	ish
}
   24fdc:	b003      	add	sp, #12
   24fde:	bd30      	pop	{r4, r5, pc}

00024fe0 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24fe0:	f3bf 8f5b 	dmb	ish
   24fe4:	e850 3f00 	ldrex	r3, [r0]
   24fe8:	400b      	ands	r3, r1
   24fea:	e840 3200 	strex	r2, r3, [r0]
   24fee:	2a00      	cmp	r2, #0
   24ff0:	d1f8      	bne.n	24fe4 <atomic_and.isra.0+0x4>
   24ff2:	f3bf 8f5b 	dmb	ish
}
   24ff6:	4770      	bx	lr

00024ff8 <read_ppcp>:
{
   24ff8:	b513      	push	{r0, r1, r4, lr}
   24ffa:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   24ffc:	2218      	movs	r2, #24
{
   24ffe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   25002:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   25006:	2228      	movs	r2, #40	; 0x28
   25008:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   2500c:	2200      	movs	r2, #0
   2500e:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   25012:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   25014:	f04f 022a 	mov.w	r2, #42	; 0x2a
   25018:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2501c:	d80b      	bhi.n	25036 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   2501e:	f1c1 0408 	rsb	r4, r1, #8
   25022:	429c      	cmp	r4, r3
   25024:	bfa8      	it	ge
   25026:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   25028:	4622      	mov	r2, r4
   2502a:	4469      	add	r1, sp
   2502c:	f7fe fda5 	bl	23b7a <memcpy>
}
   25030:	4620      	mov	r0, r4
   25032:	b002      	add	sp, #8
   25034:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25036:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2503a:	e7f9      	b.n	25030 <read_ppcp+0x38>

0002503c <read_appearance>:
{
   2503c:	b513      	push	{r0, r1, r4, lr}
   2503e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   25042:	4610      	mov	r0, r2
	if (offset > value_len) {
   25044:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   25046:	f240 3241 	movw	r2, #833	; 0x341
   2504a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2504e:	d80d      	bhi.n	2506c <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   25050:	f1c1 0402 	rsb	r4, r1, #2
   25054:	429c      	cmp	r4, r3
   25056:	bfa8      	it	ge
   25058:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2505a:	f10d 0306 	add.w	r3, sp, #6
   2505e:	4622      	mov	r2, r4
   25060:	4419      	add	r1, r3
   25062:	f7fe fd8a 	bl	23b7a <memcpy>
}
   25066:	4620      	mov	r0, r4
   25068:	b002      	add	sp, #8
   2506a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2506c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   25070:	e7f9      	b.n	25066 <read_appearance+0x2a>

00025072 <read_name>:
{
   25072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25076:	4698      	mov	r8, r3
   25078:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2507c:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2507e:	f7e4 ff51 	bl	9f24 <bt_get_name>
   25082:	4607      	mov	r7, r0
				 strlen(name));
   25084:	f7fe fd3b 	bl	23afe <strlen>
	if (offset > value_len) {
   25088:	b283      	uxth	r3, r0
   2508a:	42b3      	cmp	r3, r6
   2508c:	d30c      	bcc.n	250a8 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2508e:	1b9c      	subs	r4, r3, r6
   25090:	4544      	cmp	r4, r8
   25092:	bfa8      	it	ge
   25094:	4644      	movge	r4, r8
   25096:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25098:	4622      	mov	r2, r4
   2509a:	19b9      	adds	r1, r7, r6
   2509c:	4628      	mov	r0, r5
   2509e:	f7fe fd6c 	bl	23b7a <memcpy>
}
   250a2:	4620      	mov	r0, r4
   250a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   250a8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   250ac:	e7f9      	b.n	250a2 <read_name+0x30>

000250ae <cf_read>:
{
   250ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   250b0:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   250b2:	2300      	movs	r3, #0
{
   250b4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   250b8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   250bc:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   250be:	f7e7 fc2d 	bl	c91c <find_cf_cfg>
	if (cfg) {
   250c2:	b128      	cbz	r0, 250d0 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   250c4:	f100 0108 	add.w	r1, r0, #8
   250c8:	2201      	movs	r2, #1
   250ca:	a801      	add	r0, sp, #4
   250cc:	f7fe fd55 	bl	23b7a <memcpy>
	if (offset > value_len) {
   250d0:	2e01      	cmp	r6, #1
   250d2:	d80d      	bhi.n	250f0 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   250d4:	f1c6 0401 	rsb	r4, r6, #1
   250d8:	42bc      	cmp	r4, r7
   250da:	bfa8      	it	ge
   250dc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   250de:	ab01      	add	r3, sp, #4
   250e0:	4622      	mov	r2, r4
   250e2:	1999      	adds	r1, r3, r6
   250e4:	4628      	mov	r0, r5
   250e6:	f7fe fd48 	bl	23b7a <memcpy>
}
   250ea:	4620      	mov	r0, r4
   250ec:	b003      	add	sp, #12
   250ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   250f0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   250f4:	e7f9      	b.n	250ea <cf_read+0x3c>

000250f6 <bt_gatt_attr_read_service>:
{
   250f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   250f8:	68c9      	ldr	r1, [r1, #12]
{
   250fa:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   250fe:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   25100:	780b      	ldrb	r3, [r1, #0]
{
   25102:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   25104:	b993      	cbnz	r3, 2512c <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   25106:	884b      	ldrh	r3, [r1, #2]
   25108:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2510c:	2d02      	cmp	r5, #2
   2510e:	d819      	bhi.n	25144 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   25110:	f1c5 0202 	rsb	r2, r5, #2
   25114:	4294      	cmp	r4, r2
   25116:	bfa8      	it	ge
   25118:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2511a:	f10d 0306 	add.w	r3, sp, #6
   2511e:	4622      	mov	r2, r4
   25120:	1959      	adds	r1, r3, r5
   25122:	f7fe fd2a 	bl	23b7a <memcpy>
}
   25126:	4620      	mov	r0, r4
   25128:	b003      	add	sp, #12
   2512a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   2512c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   2512e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   25132:	d807      	bhi.n	25144 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   25134:	f1c5 0210 	rsb	r2, r5, #16
   25138:	4294      	cmp	r4, r2
   2513a:	bfa8      	it	ge
   2513c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2513e:	4622      	mov	r2, r4
   25140:	4429      	add	r1, r5
   25142:	e7ee      	b.n	25122 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25144:	f06f 0406 	mvn.w	r4, #6
   25148:	e7ed      	b.n	25126 <bt_gatt_attr_read_service+0x30>

0002514a <ccc_find_cfg>:
{
   2514a:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2514c:	7803      	ldrb	r3, [r0, #0]
   2514e:	4293      	cmp	r3, r2
{
   25150:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   25152:	d001      	beq.n	25158 <ccc_find_cfg+0xe>
	return NULL;
   25154:	2000      	movs	r0, #0
}
   25156:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   25158:	2207      	movs	r2, #7
   2515a:	3001      	adds	r0, #1
   2515c:	f7fe fcfc 	bl	23b58 <memcmp>
		if (id == ccc->cfg[i].id &&
   25160:	2800      	cmp	r0, #0
   25162:	d1f7      	bne.n	25154 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   25164:	4620      	mov	r0, r4
   25166:	e7f6      	b.n	25156 <ccc_find_cfg+0xc>

00025168 <find_ccc_cfg>:
{
   25168:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2516a:	460c      	mov	r4, r1
						    &cfg->peer)) {
   2516c:	1c4d      	adds	r5, r1, #1
		if (conn) {
   2516e:	b148      	cbz	r0, 25184 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   25170:	7809      	ldrb	r1, [r1, #0]
   25172:	462a      	mov	r2, r5
   25174:	f7ff f8fe 	bl	24374 <bt_conn_is_peer_addr_le>
	return NULL;
   25178:	2800      	cmp	r0, #0
   2517a:	bf08      	it	eq
   2517c:	2400      	moveq	r4, #0
}
   2517e:	4620      	mov	r0, r4
   25180:	b003      	add	sp, #12
   25182:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   25184:	9000      	str	r0, [sp, #0]
   25186:	2207      	movs	r2, #7
   25188:	f8cd 0003 	str.w	r0, [sp, #3]
   2518c:	4669      	mov	r1, sp
   2518e:	4628      	mov	r0, r5
   25190:	f7fe fce2 	bl	23b58 <memcmp>
	return NULL;
   25194:	2800      	cmp	r0, #0
   25196:	bf18      	it	ne
   25198:	2400      	movne	r4, #0
   2519a:	e7f0      	b.n	2517e <find_ccc_cfg+0x16>

0002519c <bt_gatt_attr_read_ccc>:
{
   2519c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2519e:	68c9      	ldr	r1, [r1, #12]
{
   251a0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   251a4:	4615      	mov	r5, r2
   251a6:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   251a8:	f7ff ffde 	bl	25168 <find_ccc_cfg>
	if (cfg) {
   251ac:	b100      	cbz	r0, 251b0 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   251ae:	8900      	ldrh	r0, [r0, #8]
   251b0:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   251b4:	2e02      	cmp	r6, #2
   251b6:	d80e      	bhi.n	251d6 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   251b8:	f1c6 0402 	rsb	r4, r6, #2
   251bc:	42bc      	cmp	r4, r7
   251be:	bfa8      	it	ge
   251c0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   251c2:	f10d 0306 	add.w	r3, sp, #6
   251c6:	4622      	mov	r2, r4
   251c8:	1999      	adds	r1, r3, r6
   251ca:	4628      	mov	r0, r5
   251cc:	f7fe fcd5 	bl	23b7a <memcpy>
}
   251d0:	4620      	mov	r0, r4
   251d2:	b003      	add	sp, #12
   251d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   251d6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   251da:	e7f9      	b.n	251d0 <bt_gatt_attr_read_ccc+0x34>

000251dc <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   251dc:	2a02      	cmp	r2, #2
{
   251de:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   251e0:	d108      	bne.n	251f4 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   251e2:	2300      	movs	r3, #0
   251e4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   251e8:	461a      	mov	r2, r3
   251ea:	7a00      	ldrb	r0, [r0, #8]
   251ec:	f7e7 fe76 	bl	cedc <sc_save>
}
   251f0:	2002      	movs	r0, #2
   251f2:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   251f4:	f7e7 ff60 	bl	d0b8 <sc_clear>
   251f8:	e7fa      	b.n	251f0 <sc_ccc_cfg_write+0x14>

000251fa <sc_restore_rsp>:
{
   251fa:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   251fc:	f7e7 fb8e 	bl	c91c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   25200:	b140      	cbz	r0, 25214 <sc_restore_rsp+0x1a>
   25202:	7a03      	ldrb	r3, [r0, #8]
   25204:	07db      	lsls	r3, r3, #31
   25206:	d505      	bpl.n	25214 <sc_restore_rsp+0x1a>
}
   25208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2520c:	2101      	movs	r1, #1
   2520e:	300c      	adds	r0, #12
   25210:	f7ff beba 	b.w	24f88 <atomic_or>
   25214:	bd08      	pop	{r3, pc}

00025216 <bt_gatt_attr_read>:
{
   25216:	b538      	push	{r3, r4, r5, lr}
   25218:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2521c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   25220:	42a9      	cmp	r1, r5
{
   25222:	4610      	mov	r0, r2
	if (offset > value_len) {
   25224:	d80b      	bhi.n	2523e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   25226:	1a6d      	subs	r5, r5, r1
   25228:	429d      	cmp	r5, r3
   2522a:	bfa8      	it	ge
   2522c:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2522e:	9b05      	ldr	r3, [sp, #20]
   25230:	b2ad      	uxth	r5, r5
   25232:	462a      	mov	r2, r5
   25234:	4419      	add	r1, r3
   25236:	f7fe fca0 	bl	23b7a <memcpy>
}
   2523a:	4628      	mov	r0, r5
   2523c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2523e:	f06f 0506 	mvn.w	r5, #6
   25242:	e7fa      	b.n	2523a <bt_gatt_attr_read+0x24>

00025244 <bt_gatt_attr_value_handle>:
{
   25244:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25246:	4604      	mov	r4, r0
   25248:	b910      	cbnz	r0, 25250 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2524a:	2000      	movs	r0, #0
}
   2524c:	b002      	add	sp, #8
   2524e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25250:	2300      	movs	r3, #0
   25252:	f88d 3004 	strb.w	r3, [sp, #4]
   25256:	6800      	ldr	r0, [r0, #0]
   25258:	f642 0303 	movw	r3, #10243	; 0x2803
   2525c:	a901      	add	r1, sp, #4
   2525e:	f8ad 3006 	strh.w	r3, [sp, #6]
   25262:	f7fe fdaa 	bl	23dba <bt_uuid_cmp>
   25266:	2800      	cmp	r0, #0
   25268:	d1ef      	bne.n	2524a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2526a:	68e3      	ldr	r3, [r4, #12]
   2526c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2526e:	2800      	cmp	r0, #0
   25270:	d1ec      	bne.n	2524c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   25272:	4620      	mov	r0, r4
   25274:	f7e8 f8c0 	bl	d3f8 <bt_gatt_attr_get_handle>
   25278:	3001      	adds	r0, #1
   2527a:	b280      	uxth	r0, r0
	return handle;
   2527c:	e7e6      	b.n	2524c <bt_gatt_attr_value_handle+0x8>

0002527e <bt_gatt_attr_read_chrc>:
{
   2527e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   25280:	68cf      	ldr	r7, [r1, #12]
{
   25282:	b087      	sub	sp, #28
   25284:	4608      	mov	r0, r1
   25286:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   25288:	79bb      	ldrb	r3, [r7, #6]
   2528a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2528e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   25292:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25294:	f7ff ffd6 	bl	25244 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25298:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2529a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2529e:	780b      	ldrb	r3, [r1, #0]
   252a0:	b99b      	cbnz	r3, 252ca <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   252a2:	884b      	ldrh	r3, [r1, #2]
   252a4:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   252a8:	2105      	movs	r1, #5
	if (offset > value_len) {
   252aa:	42b1      	cmp	r1, r6
   252ac:	d315      	bcc.n	252da <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   252ae:	1b89      	subs	r1, r1, r6
   252b0:	42a1      	cmp	r1, r4
   252b2:	bfa8      	it	ge
   252b4:	4621      	movge	r1, r4
   252b6:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   252b8:	ab01      	add	r3, sp, #4
   252ba:	4622      	mov	r2, r4
   252bc:	1999      	adds	r1, r3, r6
   252be:	4628      	mov	r0, r5
   252c0:	f7fe fc5b 	bl	23b7a <memcpy>
}
   252c4:	4620      	mov	r0, r4
   252c6:	b007      	add	sp, #28
   252c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   252ca:	3101      	adds	r1, #1
   252cc:	2210      	movs	r2, #16
   252ce:	f10d 0007 	add.w	r0, sp, #7
   252d2:	f7fe fc52 	bl	23b7a <memcpy>
		value_len += 16U;
   252d6:	2113      	movs	r1, #19
   252d8:	e7e7      	b.n	252aa <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   252da:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   252de:	e7f1      	b.n	252c4 <bt_gatt_attr_read_chrc+0x46>

000252e0 <bt_gatt_foreach_attr>:
{
   252e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   252e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   252e6:	2300      	movs	r3, #0
   252e8:	9300      	str	r3, [sp, #0]
   252ea:	461a      	mov	r2, r3
   252ec:	f7e8 f8b4 	bl	d458 <bt_gatt_foreach_attr_type>
}
   252f0:	b005      	add	sp, #20
   252f2:	f85d fb04 	ldr.w	pc, [sp], #4

000252f6 <db_hash_process>:
	db_hash_gen(true);
   252f6:	2001      	movs	r0, #1
   252f8:	f7e8 b908 	b.w	d50c <db_hash_gen>

000252fc <bt_gatt_attr_read_cep>:
{
   252fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   252fe:	4610      	mov	r0, r2
   25300:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	uint16_t props = sys_cpu_to_le16(value->properties);
   25304:	68ca      	ldr	r2, [r1, #12]
	if (offset > value_len) {
   25306:	2d02      	cmp	r5, #2
	uint16_t props = sys_cpu_to_le16(value->properties);
   25308:	8812      	ldrh	r2, [r2, #0]
   2530a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2530e:	d80d      	bhi.n	2532c <bt_gatt_attr_read_cep+0x30>
	len = MIN(buf_len, value_len - offset);
   25310:	f1c5 0402 	rsb	r4, r5, #2
   25314:	429c      	cmp	r4, r3
   25316:	bfa8      	it	ge
   25318:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2531a:	f10d 0306 	add.w	r3, sp, #6
   2531e:	4622      	mov	r2, r4
   25320:	1959      	adds	r1, r3, r5
   25322:	f7fe fc2a 	bl	23b7a <memcpy>
}
   25326:	4620      	mov	r0, r4
   25328:	b003      	add	sp, #12
   2532a:	bd30      	pop	{r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2532c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &props,
   25330:	e7f9      	b.n	25326 <bt_gatt_attr_read_cep+0x2a>

00025332 <bt_gatt_check_perm>:
{
   25332:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   25334:	07d4      	lsls	r4, r2, #31
{
   25336:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25338:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2533a:	d504      	bpl.n	25346 <bt_gatt_check_perm+0x14>
   2533c:	f010 0f15 	tst.w	r0, #21
   25340:	d01e      	beq.n	25380 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25342:	684b      	ldr	r3, [r1, #4]
   25344:	b1e3      	cbz	r3, 25380 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   25346:	0793      	lsls	r3, r2, #30
   25348:	d504      	bpl.n	25354 <bt_gatt_check_perm+0x22>
   2534a:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   2534e:	d019      	beq.n	25384 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25350:	688b      	ldr	r3, [r1, #8]
   25352:	b1bb      	cbz	r3, 25384 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   25354:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   25358:	f014 0f30 	tst.w	r4, #48	; 0x30
   2535c:	d103      	bne.n	25366 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2535e:	f014 000c 	ands.w	r0, r4, #12
   25362:	d107      	bne.n	25374 <bt_gatt_check_perm+0x42>
}
   25364:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   25366:	4628      	mov	r0, r5
   25368:	f7fe fff9 	bl	2435e <bt_conn_get_security>
   2536c:	2802      	cmp	r0, #2
   2536e:	d8f6      	bhi.n	2535e <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   25370:	2005      	movs	r0, #5
   25372:	e7f7      	b.n	25364 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   25374:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   25376:	2b00      	cmp	r3, #0
   25378:	bf14      	ite	ne
   2537a:	2000      	movne	r0, #0
   2537c:	200f      	moveq	r0, #15
   2537e:	e7f1      	b.n	25364 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   25380:	2002      	movs	r0, #2
   25382:	e7ef      	b.n	25364 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25384:	2003      	movs	r0, #3
   25386:	e7ed      	b.n	25364 <bt_gatt_check_perm+0x32>

00025388 <bt_gatt_change_aware>:
{
   25388:	b510      	push	{r4, lr}
   2538a:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2538c:	f7e7 fac6 	bl	c91c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25390:	4603      	mov	r3, r0
   25392:	b910      	cbnz	r0, 2539a <bt_gatt_change_aware+0x12>
		return true;
   25394:	2401      	movs	r4, #1
}
   25396:	4620      	mov	r0, r4
   25398:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2539a:	7a02      	ldrb	r2, [r0, #8]
   2539c:	07d1      	lsls	r1, r2, #31
   2539e:	d5f9      	bpl.n	25394 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   253a0:	f3bf 8f5b 	dmb	ish
   253a4:	68da      	ldr	r2, [r3, #12]
   253a6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   253aa:	07d2      	lsls	r2, r2, #31
   253ac:	f100 000c 	add.w	r0, r0, #12
   253b0:	d4f0      	bmi.n	25394 <bt_gatt_change_aware+0xc>
	if (!req) {
   253b2:	2c00      	cmp	r4, #0
   253b4:	d0ef      	beq.n	25396 <bt_gatt_change_aware+0xe>
   253b6:	f3bf 8f5b 	dmb	ish
   253ba:	68db      	ldr	r3, [r3, #12]
   253bc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   253c0:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   253c4:	079b      	lsls	r3, r3, #30
   253c6:	d507      	bpl.n	253d8 <bt_gatt_change_aware+0x50>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   253c8:	f06f 0102 	mvn.w	r1, #2
   253cc:	f7ff fe08 	bl	24fe0 <atomic_and.isra.0>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   253d0:	2101      	movs	r1, #1
   253d2:	f7ff fdd9 	bl	24f88 <atomic_or>
}
   253d6:	e7de      	b.n	25396 <bt_gatt_change_aware+0xe>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   253d8:	2102      	movs	r1, #2
   253da:	e7fa      	b.n	253d2 <bt_gatt_change_aware+0x4a>

000253dc <sys_memcpy_swap>:
	psrc += length - 1;
   253dc:	1e53      	subs	r3, r2, #1
   253de:	4419      	add	r1, r3
	for (; length > 0; length--) {
   253e0:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   253e2:	f811 3901 	ldrb.w	r3, [r1], #-1
   253e6:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   253ea:	4290      	cmp	r0, r2
   253ec:	d1f9      	bne.n	253e2 <sys_memcpy_swap+0x6>
}
   253ee:	4770      	bx	lr

000253f0 <sys_mem_swap>:
{
   253f0:	b510      	push	{r4, lr}
   253f2:	1843      	adds	r3, r0, r1
   253f4:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   253f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   253fc:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   253fe:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   25402:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   25404:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   25406:	d1f7      	bne.n	253f8 <sys_mem_swap+0x8>
	}
}
   25408:	bd10      	pop	{r4, pc}

0002540a <smp_pairing_rsp>:
}
   2540a:	2007      	movs	r0, #7
   2540c:	4770      	bx	lr

0002540e <bt_smp_aes_cmac>:
{
   2540e:	b570      	push	{r4, r5, r6, lr}
   25410:	b0c2      	sub	sp, #264	; 0x108
   25412:	460d      	mov	r5, r1
   25414:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   25416:	4601      	mov	r1, r0
   25418:	aa16      	add	r2, sp, #88	; 0x58
   2541a:	4668      	mov	r0, sp
{
   2541c:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2541e:	f7fe fa04 	bl	2382a <tc_cmac_setup>
   25422:	b150      	cbz	r0, 2543a <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   25424:	4632      	mov	r2, r6
   25426:	4629      	mov	r1, r5
   25428:	4668      	mov	r0, sp
   2542a:	f7fe fa29 	bl	23880 <tc_cmac_update>
   2542e:	b120      	cbz	r0, 2543a <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   25430:	4669      	mov	r1, sp
   25432:	4620      	mov	r0, r4
   25434:	f7fe fa8f 	bl	23956 <tc_cmac_final>
   25438:	b918      	cbnz	r0, 25442 <bt_smp_aes_cmac+0x34>
		return -EIO;
   2543a:	f06f 0004 	mvn.w	r0, #4
}
   2543e:	b042      	add	sp, #264	; 0x108
   25440:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   25442:	2000      	movs	r0, #0
   25444:	e7fb      	b.n	2543e <bt_smp_aes_cmac+0x30>

00025446 <smp_f4>:
{
   25446:	b5f0      	push	{r4, r5, r6, r7, lr}
   25448:	b097      	sub	sp, #92	; 0x5c
   2544a:	4614      	mov	r4, r2
   2544c:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2544e:	2220      	movs	r2, #32
   25450:	4601      	mov	r1, r0
   25452:	a805      	add	r0, sp, #20
{
   25454:	461d      	mov	r5, r3
   25456:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   25458:	f7ff ffc0 	bl	253dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2545c:	2220      	movs	r2, #32
   2545e:	4631      	mov	r1, r6
   25460:	a80d      	add	r0, sp, #52	; 0x34
   25462:	f7ff ffbb 	bl	253dc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   25466:	4621      	mov	r1, r4
   25468:	2210      	movs	r2, #16
   2546a:	a801      	add	r0, sp, #4
	m[64] = z;
   2546c:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   25470:	f7ff ffb4 	bl	253dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   25474:	463b      	mov	r3, r7
   25476:	2241      	movs	r2, #65	; 0x41
   25478:	a905      	add	r1, sp, #20
   2547a:	a801      	add	r0, sp, #4
   2547c:	f7ff ffc7 	bl	2540e <bt_smp_aes_cmac>
	if (err) {
   25480:	4604      	mov	r4, r0
   25482:	b918      	cbnz	r0, 2548c <smp_f4+0x46>
	sys_mem_swap(res, 16);
   25484:	2110      	movs	r1, #16
   25486:	4638      	mov	r0, r7
   25488:	f7ff ffb2 	bl	253f0 <sys_mem_swap>
}
   2548c:	4620      	mov	r0, r4
   2548e:	b017      	add	sp, #92	; 0x5c
   25490:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025492 <smp_f6>:
{
   25492:	b5f0      	push	{r4, r5, r6, r7, lr}
   25494:	b097      	sub	sp, #92	; 0x5c
   25496:	4605      	mov	r5, r0
   25498:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2549a:	a805      	add	r0, sp, #20
   2549c:	2210      	movs	r2, #16
{
   2549e:	461c      	mov	r4, r3
   254a0:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   254a2:	f7ff ff9b 	bl	253dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   254a6:	2210      	movs	r2, #16
   254a8:	4631      	mov	r1, r6
   254aa:	a809      	add	r0, sp, #36	; 0x24
   254ac:	f7ff ff96 	bl	253dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   254b0:	4621      	mov	r1, r4
   254b2:	2210      	movs	r2, #16
   254b4:	a80d      	add	r0, sp, #52	; 0x34
   254b6:	f7ff ff91 	bl	253dc <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   254ba:	991c      	ldr	r1, [sp, #112]	; 0x70
   254bc:	2203      	movs	r2, #3
   254be:	a811      	add	r0, sp, #68	; 0x44
   254c0:	f7ff ff8c 	bl	253dc <sys_memcpy_swap>
	m[51] = a1->type;
   254c4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   254c6:	f814 3b01 	ldrb.w	r3, [r4], #1
   254ca:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   254ce:	4621      	mov	r1, r4
   254d0:	2206      	movs	r2, #6
   254d2:	a812      	add	r0, sp, #72	; 0x48
   254d4:	f7fe fb51 	bl	23b7a <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   254d8:	4621      	mov	r1, r4
   254da:	2206      	movs	r2, #6
   254dc:	a812      	add	r0, sp, #72	; 0x48
   254de:	f7ff ff7d 	bl	253dc <sys_memcpy_swap>
	m[58] = a2->type;
   254e2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   254e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   254e8:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   254ec:	4621      	mov	r1, r4
   254ee:	2206      	movs	r2, #6
   254f0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   254f4:	f7fe fb41 	bl	23b7a <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   254f8:	4621      	mov	r1, r4
   254fa:	2206      	movs	r2, #6
   254fc:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   25500:	f7ff ff6c 	bl	253dc <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   25504:	2210      	movs	r2, #16
   25506:	4629      	mov	r1, r5
   25508:	a801      	add	r0, sp, #4
   2550a:	f7ff ff67 	bl	253dc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2550e:	463b      	mov	r3, r7
   25510:	2241      	movs	r2, #65	; 0x41
   25512:	a905      	add	r1, sp, #20
   25514:	a801      	add	r0, sp, #4
   25516:	f7ff ff7a 	bl	2540e <bt_smp_aes_cmac>
	if (err) {
   2551a:	4604      	mov	r4, r0
   2551c:	b918      	cbnz	r0, 25526 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   2551e:	2110      	movs	r1, #16
   25520:	4638      	mov	r0, r7
   25522:	f7ff ff65 	bl	253f0 <sys_mem_swap>
}
   25526:	4620      	mov	r0, r4
   25528:	b017      	add	sp, #92	; 0x5c
   2552a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002552c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2552c:	2301      	movs	r3, #1
   2552e:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25530:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25532:	f3bf 8f5b 	dmb	ish
   25536:	e850 2f00 	ldrex	r2, [r0]
   2553a:	401a      	ands	r2, r3
   2553c:	e840 2100 	strex	r1, r2, [r0]
   25540:	2900      	cmp	r1, #0
   25542:	d1f8      	bne.n	25536 <atomic_clear_bit+0xa>
   25544:	f3bf 8f5b 	dmb	ish
}
   25548:	4770      	bx	lr

0002554a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2554a:	2301      	movs	r3, #1
   2554c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2554e:	f3bf 8f5b 	dmb	ish
   25552:	e850 2f00 	ldrex	r2, [r0]
   25556:	431a      	orrs	r2, r3
   25558:	e840 2100 	strex	r1, r2, [r0]
   2555c:	2900      	cmp	r1, #0
   2555e:	d1f8      	bne.n	25552 <atomic_set_bit+0x8>
   25560:	f3bf 8f5b 	dmb	ish
}
   25564:	4770      	bx	lr

00025566 <smp_keypress_notif>:
{
   25566:	b508      	push	{r3, lr}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   25568:	210e      	movs	r1, #14
   2556a:	30b8      	adds	r0, #184	; 0xb8
   2556c:	f7ff ffed 	bl	2554a <atomic_set_bit>
}
   25570:	2000      	movs	r0, #0
   25572:	bd08      	pop	{r3, pc}

00025574 <smp_security_request>:
   25574:	2007      	movs	r0, #7
   25576:	4770      	bx	lr

00025578 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25578:	f3bf 8f5b 	dmb	ish
   2557c:	6800      	ldr	r0, [r0, #0]
   2557e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25582:	4108      	asrs	r0, r1
}
   25584:	f000 0001 	and.w	r0, r0, #1
   25588:	4770      	bx	lr

0002558a <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2558a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2558c:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   25590:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   25592:	4628      	mov	r0, r5
   25594:	2104      	movs	r1, #4
   25596:	f7ff ffef 	bl	25578 <atomic_test_bit>
   2559a:	b168      	cbz	r0, 255b8 <smp_create_pdu.constprop.0+0x2e>
		timeout = K_NO_WAIT;
   2559c:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2559e:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   255a0:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   255a2:	4608      	mov	r0, r1
   255a4:	f7ff f80d 	bl	245c2 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   255a8:	4604      	mov	r4, r0
   255aa:	b940      	cbnz	r0, 255be <smp_create_pdu.constprop.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   255ac:	2104      	movs	r1, #4
   255ae:	4628      	mov	r0, r5
   255b0:	f7ff ffcb 	bl	2554a <atomic_set_bit>
}
   255b4:	4620      	mov	r0, r4
   255b6:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   255b8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   255bc:	e7ef      	b.n	2559e <smp_create_pdu.constprop.0+0x14>
   255be:	2101      	movs	r1, #1
   255c0:	3008      	adds	r0, #8
   255c2:	f000 fb2e 	bl	25c22 <net_buf_simple_add>
	hdr->code = op;
   255c6:	7006      	strb	r6, [r0, #0]
	return buf;
   255c8:	e7f4      	b.n	255b4 <smp_create_pdu.constprop.0+0x2a>

000255ca <send_pairing_rsp>:
{
   255ca:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   255cc:	2102      	movs	r1, #2
{
   255ce:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   255d0:	f7ff ffdb 	bl	2558a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   255d4:	4604      	mov	r4, r0
   255d6:	b178      	cbz	r0, 255f8 <send_pairing_rsp+0x2e>
   255d8:	2106      	movs	r1, #6
   255da:	3008      	adds	r0, #8
   255dc:	f000 fb21 	bl	25c22 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   255e0:	2206      	movs	r2, #6
   255e2:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   255e6:	f7fe fac8 	bl	23b7a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   255ea:	4628      	mov	r0, r5
   255ec:	2200      	movs	r2, #0
   255ee:	4621      	mov	r1, r4
   255f0:	f7e8 fcb2 	bl	df58 <smp_send.constprop.0>
	return 0;
   255f4:	2000      	movs	r0, #0
}
   255f6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   255f8:	2008      	movs	r0, #8
   255fa:	e7fc      	b.n	255f6 <send_pairing_rsp+0x2c>

000255fc <smp_send_pairing_random>:
{
   255fc:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   255fe:	2104      	movs	r1, #4
{
   25600:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   25602:	f7ff ffc2 	bl	2558a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   25606:	4604      	mov	r4, r0
   25608:	b178      	cbz	r0, 2562a <smp_send_pairing_random+0x2e>
   2560a:	2110      	movs	r1, #16
   2560c:	3008      	adds	r0, #8
   2560e:	f000 fb08 	bl	25c22 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   25612:	2210      	movs	r2, #16
   25614:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   25618:	f7fe faaf 	bl	23b7a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2561c:	4628      	mov	r0, r5
   2561e:	2200      	movs	r2, #0
   25620:	4621      	mov	r1, r4
   25622:	f7e8 fc99 	bl	df58 <smp_send.constprop.0>
	return 0;
   25626:	2000      	movs	r0, #0
}
   25628:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2562a:	2008      	movs	r0, #8
   2562c:	e7fc      	b.n	25628 <smp_send_pairing_random+0x2c>

0002562e <smp_dhkey_check>:
{
   2562e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   25630:	6803      	ldr	r3, [r0, #0]
   25632:	78db      	ldrb	r3, [r3, #3]
   25634:	2b01      	cmp	r3, #1
{
   25636:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   25638:	d115      	bne.n	25666 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2563a:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2563c:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   25640:	2110      	movs	r1, #16
   25642:	4628      	mov	r0, r5
   25644:	f7ff ff72 	bl	2552c <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   25648:	4631      	mov	r1, r6
   2564a:	2210      	movs	r2, #16
   2564c:	f204 106f 	addw	r0, r4, #367	; 0x16f
   25650:	f7fe fa93 	bl	23b7a <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   25654:	2107      	movs	r1, #7
   25656:	4628      	mov	r0, r5
   25658:	f7ff ff8e 	bl	25578 <atomic_test_bit>
   2565c:	b128      	cbz	r0, 2566a <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2565e:	2109      	movs	r1, #9
   25660:	4628      	mov	r0, r5
   25662:	f7ff ff72 	bl	2554a <atomic_set_bit>
}
   25666:	2000      	movs	r0, #0
   25668:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2566a:	210a      	movs	r1, #10
   2566c:	4628      	mov	r0, r5
   2566e:	f7ff ff83 	bl	25578 <atomic_test_bit>
   25672:	2800      	cmp	r0, #0
   25674:	d1f3      	bne.n	2565e <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   25676:	4620      	mov	r0, r4
}
   25678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   2567c:	f7e8 bf40 	b.w	e500 <compute_and_check_and_send_slave_dhcheck>

00025680 <atomic_test_and_clear_bit>:
{
   25680:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   25682:	2301      	movs	r3, #1
   25684:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25688:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2568a:	f3bf 8f5b 	dmb	ish
   2568e:	e850 3f00 	ldrex	r3, [r0]
   25692:	ea03 0c02 	and.w	ip, r3, r2
   25696:	e840 ce00 	strex	lr, ip, [r0]
   2569a:	f1be 0f00 	cmp.w	lr, #0
   2569e:	d1f6      	bne.n	2568e <atomic_test_and_clear_bit+0xe>
   256a0:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   256a4:	420b      	tst	r3, r1
}
   256a6:	bf14      	ite	ne
   256a8:	2001      	movne	r0, #1
   256aa:	2000      	moveq	r0, #0
   256ac:	f85d fb04 	ldr.w	pc, [sp], #4

000256b0 <smp_reset>:
{
   256b0:	b510      	push	{r4, lr}
   256b2:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   256b4:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   256b8:	f001 f90e 	bl	268d8 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   256bc:	2300      	movs	r3, #0
   256be:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   256c2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   256c6:	f3bf 8f5b 	dmb	ish
   256ca:	e850 2f00 	ldrex	r2, [r0]
   256ce:	e840 3100 	strex	r1, r3, [r0]
   256d2:	2900      	cmp	r1, #0
   256d4:	d1f9      	bne.n	256ca <smp_reset+0x1a>
   256d6:	f3bf 8f5b 	dmb	ish
   256da:	f3bf 8f5b 	dmb	ish
   256de:	34bc      	adds	r4, #188	; 0xbc
   256e0:	e854 2f00 	ldrex	r2, [r4]
   256e4:	e844 3100 	strex	r1, r3, [r4]
   256e8:	2900      	cmp	r1, #0
   256ea:	d1f9      	bne.n	256e0 <smp_reset+0x30>
   256ec:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   256f0:	2101      	movs	r1, #1
}
   256f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   256f6:	f7ff bf28 	b.w	2554a <atomic_set_bit>

000256fa <smp_c1>:
{
   256fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   256fe:	b089      	sub	sp, #36	; 0x24
   25700:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   25704:	4699      	mov	r9, r3
	p1[0] = ia->type;
   25706:	783b      	ldrb	r3, [r7, #0]
{
   25708:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2570a:	f88d 3000 	strb.w	r3, [sp]
{
   2570e:	460c      	mov	r4, r1
	p1[1] = ra->type;
   25710:	f898 3000 	ldrb.w	r3, [r8]
   25714:	f88d 3001 	strb.w	r3, [sp, #1]
{
   25718:	4611      	mov	r1, r2
   2571a:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2571c:	2207      	movs	r2, #7
   2571e:	f10d 0002 	add.w	r0, sp, #2
   25722:	f7fe fa2a 	bl	23b7a <memcpy>
	memcpy(p1 + 9, pres, 7);
   25726:	2207      	movs	r2, #7
   25728:	4649      	mov	r1, r9
   2572a:	f10d 0009 	add.w	r0, sp, #9
   2572e:	f7fe fa24 	bl	23b7a <memcpy>
	while (len--) {
   25732:	f104 0010 	add.w	r0, r4, #16
   25736:	4629      	mov	r1, r5
   25738:	466a      	mov	r2, sp
   2573a:	42a0      	cmp	r0, r4
   2573c:	d127      	bne.n	2578e <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2573e:	462a      	mov	r2, r5
   25740:	4629      	mov	r1, r5
   25742:	4630      	mov	r0, r6
   25744:	f7ed faa0 	bl	12c88 <bt_encrypt_le>
	if (err) {
   25748:	4604      	mov	r4, r0
   2574a:	b9e0      	cbnz	r0, 25786 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2574c:	2206      	movs	r2, #6
   2574e:	f108 0101 	add.w	r1, r8, #1
   25752:	a804      	add	r0, sp, #16
   25754:	f7fe fa11 	bl	23b7a <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   25758:	2206      	movs	r2, #6
   2575a:	1c79      	adds	r1, r7, #1
   2575c:	f10d 0016 	add.w	r0, sp, #22
   25760:	f7fe fa0b 	bl	23b7a <memcpy>
	(void)memset(p2 + 12, 0, 4);
   25764:	2204      	movs	r2, #4
   25766:	4621      	mov	r1, r4
   25768:	a807      	add	r0, sp, #28
   2576a:	f7fe fa31 	bl	23bd0 <memset>
	while (len--) {
   2576e:	f105 0010 	add.w	r0, r5, #16
   25772:	462a      	mov	r2, r5
   25774:	ab04      	add	r3, sp, #16
   25776:	4282      	cmp	r2, r0
   25778:	d112      	bne.n	257a0 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   2577a:	462a      	mov	r2, r5
   2577c:	4629      	mov	r1, r5
   2577e:	4630      	mov	r0, r6
   25780:	f7ed fa82 	bl	12c88 <bt_encrypt_le>
   25784:	4604      	mov	r4, r0
}
   25786:	4620      	mov	r0, r4
   25788:	b009      	add	sp, #36	; 0x24
   2578a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   2578e:	f814 3b01 	ldrb.w	r3, [r4], #1
   25792:	f812 cb01 	ldrb.w	ip, [r2], #1
   25796:	ea83 030c 	eor.w	r3, r3, ip
   2579a:	f801 3b01 	strb.w	r3, [r1], #1
   2579e:	e7cc      	b.n	2573a <smp_c1+0x40>
   257a0:	f812 1b01 	ldrb.w	r1, [r2], #1
   257a4:	f813 4b01 	ldrb.w	r4, [r3], #1
   257a8:	4061      	eors	r1, r4
   257aa:	f802 1c01 	strb.w	r1, [r2, #-1]
   257ae:	e7e2      	b.n	25776 <smp_c1+0x7c>

000257b0 <legacy_pairing_confirm>:
{
   257b0:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   257b2:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
{
   257b6:	b085      	sub	sp, #20
   257b8:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   257ba:	210a      	movs	r1, #10
   257bc:	4638      	mov	r0, r7
   257be:	f7ff fedb 	bl	25578 <atomic_test_bit>
   257c2:	bb90      	cbnz	r0, 2582a <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   257c4:	2104      	movs	r1, #4
   257c6:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   257ca:	f7ff febe 	bl	2554a <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   257ce:	2103      	movs	r1, #3
   257d0:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   257d2:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   257d4:	f7ff fed9 	bl	2558a <smp_create_pdu.constprop.0>
	if (!buf) {
   257d8:	4606      	mov	r6, r0
   257da:	b1c0      	cbz	r0, 2580e <legacy_pairing_confirm+0x5e>
   257dc:	2110      	movs	r1, #16
   257de:	3008      	adds	r0, #8
   257e0:	f000 fa1f 	bl	25c22 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   257e4:	f104 0396 	add.w	r3, r4, #150	; 0x96
   257e8:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   257ea:	9002      	str	r0, [sp, #8]
   257ec:	9301      	str	r3, [sp, #4]
   257ee:	9400      	str	r4, [sp, #0]
   257f0:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   257f4:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   257f8:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   257fc:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   25800:	f7ff ff7b 	bl	256fa <smp_c1>
   25804:	4604      	mov	r4, r0
   25806:	b120      	cbz	r0, 25812 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   25808:	4630      	mov	r0, r6
   2580a:	f7f7 fb07 	bl	1ce1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2580e:	2008      	movs	r0, #8
   25810:	e009      	b.n	25826 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   25812:	4602      	mov	r2, r0
   25814:	4631      	mov	r1, r6
   25816:	4628      	mov	r0, r5
   25818:	f7e8 fb9e 	bl	df58 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2581c:	4621      	mov	r1, r4
   2581e:	4638      	mov	r0, r7
   25820:	f7ff fe84 	bl	2552c <atomic_clear_bit>
	return 0;
   25824:	2000      	movs	r0, #0
}
   25826:	b005      	add	sp, #20
   25828:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2582a:	2100      	movs	r1, #0
   2582c:	4638      	mov	r0, r7
   2582e:	f7ff fe8c 	bl	2554a <atomic_set_bit>
   25832:	e7f7      	b.n	25824 <legacy_pairing_confirm+0x74>

00025834 <bt_smp_request_ltk>:
{
   25834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25838:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2583c:	e9cd 2300 	strd	r2, r3, [sp]
   25840:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   25842:	f7e8 fb31 	bl	dea8 <smp_chan_get>
	if (!smp) {
   25846:	4605      	mov	r5, r0
   25848:	2800      	cmp	r0, #0
   2584a:	f000 8093 	beq.w	25974 <bt_smp_request_ltk+0x140>
	if (ediv == 0U && rand == 0U &&
   2584e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   25852:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
	if (ediv == 0U && rand == 0U &&
   25856:	f1b9 0f00 	cmp.w	r9, #0
   2585a:	d12c      	bne.n	258b6 <bt_smp_request_ltk+0x82>
   2585c:	e9dd 2300 	ldrd	r2, r3, [sp]
   25860:	4313      	orrs	r3, r2
   25862:	d128      	bne.n	258b6 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   25864:	2103      	movs	r1, #3
   25866:	4638      	mov	r0, r7
   25868:	f7ff fe86 	bl	25578 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2586c:	b318      	cbz	r0, 258b6 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2586e:	2101      	movs	r1, #1
   25870:	4638      	mov	r0, r7
   25872:	f7ff fe81 	bl	25578 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   25876:	4606      	mov	r6, r0
   25878:	b1e8      	cbz	r0, 258b6 <bt_smp_request_ltk+0x82>
	return MIN(req->max_key_size, rsp->max_key_size);
   2587a:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   2587e:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   25882:	429c      	cmp	r4, r3
   25884:	bf28      	it	cs
   25886:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   25888:	4622      	mov	r2, r4
   2588a:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   2588e:	4640      	mov	r0, r8
   25890:	f7fe f973 	bl	23b7a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   25894:	2c0f      	cmp	r4, #15
   25896:	d806      	bhi.n	258a6 <bt_smp_request_ltk+0x72>
			(void)memset(ltk + enc_size, 0,
   25898:	f1c4 0210 	rsb	r2, r4, #16
   2589c:	4649      	mov	r1, r9
   2589e:	eb08 0004 	add.w	r0, r8, r4
   258a2:	f7fe f995 	bl	23bd0 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   258a6:	2101      	movs	r1, #1
   258a8:	4638      	mov	r0, r7
   258aa:	f7ff fe4e 	bl	2554a <atomic_set_bit>
}
   258ae:	4630      	mov	r0, r6
   258b0:	b003      	add	sp, #12
   258b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   258b6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   258ba:	b983      	cbnz	r3, 258de <bt_smp_request_ltk+0xaa>
					     &conn->le.dst);
   258bc:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   258c0:	7a21      	ldrb	r1, [r4, #8]
   258c2:	4632      	mov	r2, r6
   258c4:	2020      	movs	r0, #32
   258c6:	f7ea f923 	bl	fb10 <bt_keys_find>
   258ca:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   258ce:	b930      	cbnz	r0, 258de <bt_smp_request_ltk+0xaa>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   258d0:	7a21      	ldrb	r1, [r4, #8]
   258d2:	4632      	mov	r2, r6
   258d4:	2001      	movs	r0, #1
   258d6:	f7ea f91b 	bl	fb10 <bt_keys_find>
   258da:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   258de:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   258e2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   258e6:	b9ee      	cbnz	r6, 25924 <bt_smp_request_ltk+0xf0>
   258e8:	e9dd 2300 	ldrd	r2, r3, [sp]
   258ec:	4313      	orrs	r3, r2
   258ee:	d119      	bne.n	25924 <bt_smp_request_ltk+0xf0>
   258f0:	b388      	cbz	r0, 25956 <bt_smp_request_ltk+0x122>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   258f2:	89c3      	ldrh	r3, [r0, #14]
   258f4:	069a      	lsls	r2, r3, #26
   258f6:	d516      	bpl.n	25926 <bt_smp_request_ltk+0xf2>
		enc_size = conn->le.keys->enc_size;
   258f8:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   258fa:	f100 011a 	add.w	r1, r0, #26
   258fe:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   25900:	4640      	mov	r0, r8
   25902:	f7fe f93a 	bl	23b7a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   25906:	2c0f      	cmp	r4, #15
   25908:	d806      	bhi.n	25918 <bt_smp_request_ltk+0xe4>
			(void)memset(ltk + enc_size, 0,
   2590a:	f1c4 0210 	rsb	r2, r4, #16
   2590e:	4631      	mov	r1, r6
   25910:	eb08 0004 	add.w	r0, r8, r4
   25914:	f7fe f95c 	bl	23bd0 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   25918:	2101      	movs	r1, #1
   2591a:	4638      	mov	r0, r7
   2591c:	f7ff fe15 	bl	2554a <atomic_set_bit>
		return true;
   25920:	2601      	movs	r6, #1
   25922:	e7c4      	b.n	258ae <bt_smp_request_ltk+0x7a>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   25924:	b1b8      	cbz	r0, 25956 <bt_smp_request_ltk+0x122>
   25926:	89c3      	ldrh	r3, [r0, #14]
   25928:	07db      	lsls	r3, r3, #31
   2592a:	d514      	bpl.n	25956 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2592c:	2208      	movs	r2, #8
   2592e:	4669      	mov	r1, sp
   25930:	3068      	adds	r0, #104	; 0x68
   25932:	f7fe f911 	bl	23b58 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   25936:	b970      	cbnz	r0, 25956 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   25938:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2593c:	2202      	movs	r2, #2
   2593e:	a90a      	add	r1, sp, #40	; 0x28
   25940:	3070      	adds	r0, #112	; 0x70
   25942:	f7fe f909 	bl	23b58 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   25946:	4606      	mov	r6, r0
   25948:	b928      	cbnz	r0, 25956 <bt_smp_request_ltk+0x122>
		enc_size = conn->le.keys->enc_size;
   2594a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2594e:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   25950:	3172      	adds	r1, #114	; 0x72
   25952:	4622      	mov	r2, r4
   25954:	e7d4      	b.n	25900 <bt_smp_request_ltk+0xcc>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   25956:	210f      	movs	r1, #15
   25958:	4638      	mov	r0, r7
   2595a:	f7ff fe0d 	bl	25578 <atomic_test_bit>
   2595e:	b120      	cbz	r0, 2596a <bt_smp_request_ltk+0x136>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   25960:	2202      	movs	r2, #2
   25962:	2106      	movs	r1, #6
   25964:	4620      	mov	r0, r4
   25966:	f7e5 f8e9 	bl	ab3c <bt_conn_security_changed>
	smp_reset(smp);
   2596a:	4628      	mov	r0, r5
   2596c:	f7ff fea0 	bl	256b0 <smp_reset>
	return false;
   25970:	2600      	movs	r6, #0
   25972:	e79c      	b.n	258ae <bt_smp_request_ltk+0x7a>
		return false;
   25974:	4606      	mov	r6, r0
   25976:	e79a      	b.n	258ae <bt_smp_request_ltk+0x7a>

00025978 <bt_smp_irk_get>:
{
   25978:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   2597a:	2500      	movs	r5, #0
{
   2597c:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   2597e:	2210      	movs	r2, #16
   25980:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   25982:	e9cd 5500 	strd	r5, r5, [sp]
   25986:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   2598a:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   2598c:	f7fe f8e4 	bl	23b58 <memcmp>
   25990:	b180      	cbz	r0, 259b4 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   25992:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   25994:	220c      	movs	r2, #12
   25996:	4629      	mov	r1, r5
   25998:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   2599a:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   2599c:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   2599e:	70e5      	strb	r5, [r4, #3]
   259a0:	1d20      	adds	r0, r4, #4
   259a2:	f7fe f915 	bl	23bd0 <memset>
	err = bt_encrypt_le(key, res, res);
   259a6:	4622      	mov	r2, r4
   259a8:	4621      	mov	r1, r4
   259aa:	4630      	mov	r0, r6
   259ac:	f7ed f96c 	bl	12c88 <bt_encrypt_le>
}
   259b0:	b004      	add	sp, #16
   259b2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   259b4:	f06f 0015 	mvn.w	r0, #21
   259b8:	e7fa      	b.n	259b0 <bt_smp_irk_get+0x38>

000259ba <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   259ba:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
{
   259be:	b573      	push	{r0, r1, r4, r5, r6, lr}
   259c0:	4605      	mov	r5, r0
   259c2:	460c      	mov	r4, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   259c4:	4618      	mov	r0, r3
   259c6:	2103      	movs	r1, #3
   259c8:	f7ff fdd6 	bl	25578 <atomic_test_bit>
   259cc:	b1c8      	cbz	r0, 25a02 <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   259ce:	4621      	mov	r1, r4
   259d0:	4628      	mov	r0, r5
   259d2:	f7e9 fb39 	bl	f048 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   259d6:	2105      	movs	r1, #5
   259d8:	4628      	mov	r0, r5
   259da:	f7ff fdd6 	bl	2558a <smp_create_pdu.constprop.0>
	if (!buf) {
   259de:	4606      	mov	r6, r0
   259e0:	b1e0      	cbz	r0, 25a1c <smp_error+0x62>
   259e2:	2101      	movs	r1, #1
   259e4:	3008      	adds	r0, #8
   259e6:	f000 f91c 	bl	25c22 <net_buf_simple_add>
	rsp->reason = reason;
   259ea:	7004      	strb	r4, [r0, #0]
   259ec:	2400      	movs	r4, #0
   259ee:	6828      	ldr	r0, [r5, #0]
   259f0:	9400      	str	r4, [sp, #0]
   259f2:	4623      	mov	r3, r4
   259f4:	4632      	mov	r2, r6
   259f6:	2106      	movs	r1, #6
   259f8:	f7fe fde6 	bl	245c8 <bt_l2cap_send_cb>
	return 0;
   259fc:	4620      	mov	r0, r4
}
   259fe:	b002      	add	sp, #8
   25a00:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   25a02:	2101      	movs	r1, #1
   25a04:	4618      	mov	r0, r3
   25a06:	f7ff fdb7 	bl	25578 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   25a0a:	2800      	cmp	r0, #0
   25a0c:	d1df      	bne.n	259ce <smp_error+0x14>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   25a0e:	210f      	movs	r1, #15
   25a10:	4618      	mov	r0, r3
   25a12:	f7ff fdb1 	bl	25578 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   25a16:	2800      	cmp	r0, #0
   25a18:	d1d9      	bne.n	259ce <smp_error+0x14>
   25a1a:	e7dc      	b.n	259d6 <smp_error+0x1c>
		return -ENOBUFS;
   25a1c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   25a20:	e7ed      	b.n	259fe <smp_error+0x44>

00025a22 <bt_smp_dhkey_ready>:
{
   25a22:	b570      	push	{r4, r5, r6, lr}
   25a24:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   25a26:	2008      	movs	r0, #8
   25a28:	f7e8 faf2 	bl	e010 <smp_find>
	if (smp) {
   25a2c:	4604      	mov	r4, r0
   25a2e:	b1c0      	cbz	r0, 25a62 <bt_smp_dhkey_ready+0x40>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   25a30:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   25a34:	2108      	movs	r1, #8
   25a36:	4628      	mov	r0, r5
   25a38:	f7ff fd78 	bl	2552c <atomic_clear_bit>
	if (!dhkey) {
   25a3c:	b38e      	cbz	r6, 25aa2 <bt_smp_dhkey_ready+0x80>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   25a3e:	2107      	movs	r1, #7
   25a40:	f7ff fd74 	bl	2552c <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   25a44:	4631      	mov	r1, r6
   25a46:	2220      	movs	r2, #32
   25a48:	f204 104f 	addw	r0, r4, #335	; 0x14f
   25a4c:	f7fe f895 	bl	23b7a <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   25a50:	210a      	movs	r1, #10
   25a52:	4628      	mov	r0, r5
   25a54:	f7ff fd90 	bl	25578 <atomic_test_bit>
   25a58:	b168      	cbz	r0, 25a76 <bt_smp_dhkey_ready+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   25a5a:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   25a5c:	4628      	mov	r0, r5
   25a5e:	f7ff fd74 	bl	2554a <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   25a62:	2007      	movs	r0, #7
   25a64:	f7e8 fad4 	bl	e010 <smp_find>
		if (smp) {
   25a68:	4604      	mov	r4, r0
   25a6a:	b118      	cbz	r0, 25a74 <bt_smp_dhkey_ready+0x52>
			err = smp_dhkey_generate(smp);
   25a6c:	f7e8 faaa 	bl	dfc4 <smp_dhkey_generate>
			if (err) {
   25a70:	4601      	mov	r1, r0
   25a72:	b990      	cbnz	r0, 25a9a <bt_smp_dhkey_ready+0x78>
}
   25a74:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   25a76:	2110      	movs	r1, #16
   25a78:	4628      	mov	r0, r5
   25a7a:	f7ff fd7d 	bl	25578 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   25a7e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   25a80:	2800      	cmp	r0, #0
   25a82:	d1eb      	bne.n	25a5c <bt_smp_dhkey_ready+0x3a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   25a84:	4628      	mov	r0, r5
   25a86:	f7ff fd77 	bl	25578 <atomic_test_bit>
   25a8a:	2800      	cmp	r0, #0
   25a8c:	d0e9      	beq.n	25a62 <bt_smp_dhkey_ready+0x40>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   25a8e:	4620      	mov	r0, r4
   25a90:	f7e8 fd36 	bl	e500 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   25a94:	4601      	mov	r1, r0
   25a96:	2800      	cmp	r0, #0
   25a98:	d0e3      	beq.n	25a62 <bt_smp_dhkey_ready+0x40>
			smp_error(smp, err);
   25a9a:	4620      	mov	r0, r4
   25a9c:	f7ff ff8d 	bl	259ba <smp_error>
   25aa0:	e7df      	b.n	25a62 <bt_smp_dhkey_ready+0x40>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   25aa2:	210b      	movs	r1, #11
   25aa4:	e7f9      	b.n	25a9a <bt_smp_dhkey_ready+0x78>

00025aa6 <smp_check_complete>:
{
   25aa6:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   25aa8:	7883      	ldrb	r3, [r0, #2]
   25aaa:	2b01      	cmp	r3, #1
{
   25aac:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   25aae:	d10f      	bne.n	25ad0 <smp_check_complete+0x2a>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   25ab0:	2106      	movs	r1, #6
   25ab2:	f7fe fda2 	bl	245fa <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   25ab6:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   25aba:	ea22 0104 	bic.w	r1, r2, r4
   25abe:	f880 11a0 	strb.w	r1, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   25ac2:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   25ac6:	b919      	cbnz	r1, 25ad0 <smp_check_complete+0x2a>
}
   25ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   25acc:	f7e9 babc 	b.w	f048 <smp_pairing_complete>
}
   25ad0:	bd10      	pop	{r4, pc}

00025ad2 <smp_sign_info_sent>:
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
   25ad2:	2104      	movs	r1, #4
   25ad4:	f7ff bfe7 	b.w	25aa6 <smp_check_complete>

00025ad8 <smp_id_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   25ad8:	2102      	movs	r1, #2
   25ada:	f7ff bfe4 	b.w	25aa6 <smp_check_complete>

00025ade <smp_ident_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   25ade:	2101      	movs	r1, #1
   25ae0:	f7ff bfe1 	b.w	25aa6 <smp_check_complete>

00025ae4 <bt_smp_disconnected>:
{
   25ae4:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   25ae6:	6803      	ldr	r3, [r0, #0]
{
   25ae8:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   25aea:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
	struct bt_keys *keys = chan->conn->le.keys;
   25aee:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   25af2:	f000 fef1 	bl	268d8 <k_delayed_work_cancel>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   25af6:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   25afa:	2103      	movs	r1, #3
   25afc:	4618      	mov	r0, r3
   25afe:	f7ff fd3b 	bl	25578 <atomic_test_bit>
   25b02:	b1a0      	cbz	r0, 25b2e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   25b04:	2108      	movs	r1, #8
   25b06:	4620      	mov	r0, r4
   25b08:	f7e9 fa9e 	bl	f048 <smp_pairing_complete>
	if (keys) {
   25b0c:	b13d      	cbz	r5, 25b1e <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   25b0e:	89eb      	ldrh	r3, [r5, #14]
   25b10:	b113      	cbz	r3, 25b18 <bt_smp_disconnected+0x34>
   25b12:	7b6b      	ldrb	r3, [r5, #13]
   25b14:	079b      	lsls	r3, r3, #30
   25b16:	d502      	bpl.n	25b1e <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   25b18:	4628      	mov	r0, r5
   25b1a:	f7ea f857 	bl	fbcc <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   25b1e:	4620      	mov	r0, r4
   25b20:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   25b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   25b28:	2100      	movs	r1, #0
   25b2a:	f7fe b851 	b.w	23bd0 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   25b2e:	2101      	movs	r1, #1
   25b30:	4618      	mov	r0, r3
   25b32:	f7ff fd21 	bl	25578 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   25b36:	2800      	cmp	r0, #0
   25b38:	d1e4      	bne.n	25b04 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   25b3a:	210f      	movs	r1, #15
   25b3c:	4618      	mov	r0, r3
   25b3e:	f7ff fd1b 	bl	25578 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   25b42:	2800      	cmp	r0, #0
   25b44:	d1de      	bne.n	25b04 <bt_smp_disconnected+0x20>
   25b46:	e7e1      	b.n	25b0c <bt_smp_disconnected+0x28>

00025b48 <id_add>:
	bt_id_add(keys);
   25b48:	f7e3 be12 	b.w	9770 <bt_id_add>

00025b4c <bt_keys_get_type>:
{
   25b4c:	b570      	push	{r4, r5, r6, lr}
   25b4e:	4604      	mov	r4, r0
   25b50:	460d      	mov	r5, r1
   25b52:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   25b54:	f7e9 ffdc 	bl	fb10 <bt_keys_find>
	if (keys) {
   25b58:	b938      	cbnz	r0, 25b6a <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   25b5a:	4631      	mov	r1, r6
   25b5c:	4628      	mov	r0, r5
   25b5e:	f7e9 ff61 	bl	fa24 <bt_keys_get_addr>
	if (!keys) {
   25b62:	b110      	cbz	r0, 25b6a <bt_keys_get_type+0x1e>
	keys->keys |= type;
   25b64:	89c3      	ldrh	r3, [r0, #14]
   25b66:	431c      	orrs	r4, r3
   25b68:	81c4      	strh	r4, [r0, #14]
}
   25b6a:	bd70      	pop	{r4, r5, r6, pc}

00025b6c <bt_keys_add_type>:
	keys->keys |= type;
   25b6c:	89c3      	ldrh	r3, [r0, #14]
   25b6e:	4319      	orrs	r1, r3
   25b70:	81c1      	strh	r1, [r0, #14]
}
   25b72:	4770      	bx	lr

00025b74 <fixed_data_unref>:
}
   25b74:	4770      	bx	lr

00025b76 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   25b76:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   25b78:	6849      	ldr	r1, [r1, #4]
   25b7a:	6809      	ldr	r1, [r1, #0]
   25b7c:	f7f7 b8c0 	b.w	1cd00 <net_buf_alloc_len>

00025b80 <net_buf_get>:
{
   25b80:	b570      	push	{r4, r5, r6, lr}
   25b82:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   25b84:	f7f9 fc6a 	bl	1f45c <z_impl_k_queue_get>
	if (!buf) {
   25b88:	4605      	mov	r5, r0
   25b8a:	b128      	cbz	r0, 25b98 <net_buf_get+0x18>
   25b8c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   25b8e:	7963      	ldrb	r3, [r4, #5]
   25b90:	f013 0301 	ands.w	r3, r3, #1
   25b94:	d102      	bne.n	25b9c <net_buf_get+0x1c>
	frag->frags = NULL;
   25b96:	6023      	str	r3, [r4, #0]
}
   25b98:	4628      	mov	r0, r5
   25b9a:	bd70      	pop	{r4, r5, r6, pc}
   25b9c:	2300      	movs	r3, #0
   25b9e:	2200      	movs	r2, #0
   25ba0:	4630      	mov	r0, r6
   25ba2:	f7f9 fc5b 	bl	1f45c <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   25ba6:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   25ba8:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   25baa:	f023 0301 	bic.w	r3, r3, #1
   25bae:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   25bb0:	4604      	mov	r4, r0
   25bb2:	e7ec      	b.n	25b8e <net_buf_get+0xe>

00025bb4 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   25bb4:	6883      	ldr	r3, [r0, #8]
   25bb6:	440b      	add	r3, r1
   25bb8:	6003      	str	r3, [r0, #0]
}
   25bba:	4770      	bx	lr

00025bbc <net_buf_put>:
{
   25bbc:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   25bbe:	460a      	mov	r2, r1
   25bc0:	6814      	ldr	r4, [r2, #0]
   25bc2:	b914      	cbnz	r4, 25bca <net_buf_put+0xe>
}
   25bc4:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   25bc6:	f000 bcdc 	b.w	26582 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   25bca:	7953      	ldrb	r3, [r2, #5]
   25bcc:	f043 0301 	orr.w	r3, r3, #1
   25bd0:	7153      	strb	r3, [r2, #5]
   25bd2:	4622      	mov	r2, r4
   25bd4:	e7f4      	b.n	25bc0 <net_buf_put+0x4>

00025bd6 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   25bd6:	7902      	ldrb	r2, [r0, #4]
   25bd8:	3201      	adds	r2, #1
   25bda:	7102      	strb	r2, [r0, #4]
	return buf;
}
   25bdc:	4770      	bx	lr

00025bde <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   25bde:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   25be0:	4618      	mov	r0, r3
   25be2:	681b      	ldr	r3, [r3, #0]
   25be4:	2b00      	cmp	r3, #0
   25be6:	d1fb      	bne.n	25be0 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   25be8:	4770      	bx	lr

00025bea <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   25bea:	6802      	ldr	r2, [r0, #0]
{
   25bec:	b510      	push	{r4, lr}
	if (parent->frags) {
   25bee:	b12a      	cbz	r2, 25bfc <net_buf_frag_insert+0x12>
   25bf0:	460b      	mov	r3, r1
	while (buf->frags) {
   25bf2:	461c      	mov	r4, r3
   25bf4:	681b      	ldr	r3, [r3, #0]
   25bf6:	2b00      	cmp	r3, #0
   25bf8:	d1fb      	bne.n	25bf2 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   25bfa:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   25bfc:	6001      	str	r1, [r0, #0]
}
   25bfe:	bd10      	pop	{r4, pc}

00025c00 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   25c00:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   25c02:	4604      	mov	r4, r0
   25c04:	b920      	cbnz	r0, 25c10 <net_buf_frag_add+0x10>
	buf->ref++;
   25c06:	790b      	ldrb	r3, [r1, #4]
   25c08:	3301      	adds	r3, #1
   25c0a:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   25c0c:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   25c0e:	bd10      	pop	{r4, pc}
   25c10:	4603      	mov	r3, r0
	while (buf->frags) {
   25c12:	4618      	mov	r0, r3
   25c14:	681b      	ldr	r3, [r3, #0]
   25c16:	2b00      	cmp	r3, #0
   25c18:	d1fb      	bne.n	25c12 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   25c1a:	f7ff ffe6 	bl	25bea <net_buf_frag_insert>
   25c1e:	4620      	mov	r0, r4
   25c20:	e7f5      	b.n	25c0e <net_buf_frag_add+0xe>

00025c22 <net_buf_simple_add>:
	return buf->data + buf->len;
   25c22:	8883      	ldrh	r3, [r0, #4]
   25c24:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   25c26:	4419      	add	r1, r3
   25c28:	8081      	strh	r1, [r0, #4]
	return tail;
}
   25c2a:	18d0      	adds	r0, r2, r3
   25c2c:	4770      	bx	lr

00025c2e <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   25c2e:	b430      	push	{r4, r5}
   25c30:	8884      	ldrh	r4, [r0, #4]
   25c32:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   25c34:	18a3      	adds	r3, r4, r2
   25c36:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   25c38:	1928      	adds	r0, r5, r4
}
   25c3a:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   25c3c:	f7fd bf9d 	b.w	23b7a <memcpy>

00025c40 <net_buf_simple_add_u8>:
   25c40:	8883      	ldrh	r3, [r0, #4]
   25c42:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   25c44:	b510      	push	{r4, lr}
	buf->len += len;
   25c46:	1c5c      	adds	r4, r3, #1
   25c48:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   25c4a:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   25c4c:	18d0      	adds	r0, r2, r3
   25c4e:	bd10      	pop	{r4, pc}

00025c50 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   25c50:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   25c52:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   25c54:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   25c56:	1a40      	subs	r0, r0, r1
	buf->len += len;
   25c58:	4411      	add	r1, r2
	buf->data -= len;
   25c5a:	6018      	str	r0, [r3, #0]
	buf->len += len;
   25c5c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   25c5e:	4770      	bx	lr

00025c60 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   25c60:	8882      	ldrh	r2, [r0, #4]
   25c62:	1a52      	subs	r2, r2, r1
{
   25c64:	4603      	mov	r3, r0
	buf->len -= len;
   25c66:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   25c68:	6800      	ldr	r0, [r0, #0]
   25c6a:	4408      	add	r0, r1
   25c6c:	6018      	str	r0, [r3, #0]
}
   25c6e:	4770      	bx	lr

00025c70 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   25c70:	4603      	mov	r3, r0
	void *data = buf->data;
   25c72:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   25c74:	889a      	ldrh	r2, [r3, #4]
   25c76:	1a52      	subs	r2, r2, r1
	buf->data += len;
   25c78:	4401      	add	r1, r0
	buf->len -= len;
   25c7a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   25c7c:	6019      	str	r1, [r3, #0]

	return data;
}
   25c7e:	4770      	bx	lr

00025c80 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   25c80:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   25c82:	6803      	ldr	r3, [r0, #0]
   25c84:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   25c86:	2102      	movs	r1, #2
   25c88:	f7ff ffea 	bl	25c60 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   25c8c:	4620      	mov	r0, r4
   25c8e:	bd10      	pop	{r4, pc}

00025c90 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   25c90:	6802      	ldr	r2, [r0, #0]
   25c92:	6880      	ldr	r0, [r0, #8]
}
   25c94:	1a10      	subs	r0, r2, r0
   25c96:	4770      	bx	lr

00025c98 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   25c98:	8883      	ldrh	r3, [r0, #4]
   25c9a:	88c2      	ldrh	r2, [r0, #6]
   25c9c:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   25c9e:	6803      	ldr	r3, [r0, #0]
   25ca0:	6880      	ldr	r0, [r0, #8]
   25ca2:	1a18      	subs	r0, r3, r0
}
   25ca4:	1a10      	subs	r0, r2, r0
   25ca6:	4770      	bx	lr

00025ca8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25ca8:	6843      	ldr	r3, [r0, #4]
   25caa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   25cac:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   25cb0:	600b      	str	r3, [r1, #0]
}
   25cb2:	2000      	movs	r0, #0
   25cb4:	4770      	bx	lr

00025cb6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25cb6:	6843      	ldr	r3, [r0, #4]
   25cb8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   25cba:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   25cbe:	4042      	eors	r2, r0
   25cc0:	400a      	ands	r2, r1
   25cc2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   25cc4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   25cc8:	2000      	movs	r0, #0
   25cca:	4770      	bx	lr

00025ccc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25ccc:	6843      	ldr	r3, [r0, #4]
   25cce:	685b      	ldr	r3, [r3, #4]
}
   25cd0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   25cd2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   25cd6:	4770      	bx	lr

00025cd8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25cd8:	6843      	ldr	r3, [r0, #4]
   25cda:	685b      	ldr	r3, [r3, #4]
}
   25cdc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   25cde:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   25ce2:	4770      	bx	lr

00025ce4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25ce4:	6843      	ldr	r3, [r0, #4]
   25ce6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   25ce8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   25cec:	404b      	eors	r3, r1
    p_reg->OUT = value;
   25cee:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   25cf2:	2000      	movs	r0, #0
   25cf4:	4770      	bx	lr

00025cf6 <gpio_nrfx_manage_callback>:
	return port->data;
   25cf6:	68c3      	ldr	r3, [r0, #12]
	return list->head;
   25cf8:	6858      	ldr	r0, [r3, #4]
{
   25cfa:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   25cfc:	b158      	cbz	r0, 25d16 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25cfe:	2400      	movs	r4, #0
   25d00:	4281      	cmp	r1, r0
   25d02:	d112      	bne.n	25d2a <gpio_nrfx_manage_callback+0x34>
	return node->next;
   25d04:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   25d06:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   25d08:	b954      	cbnz	r4, 25d20 <gpio_nrfx_manage_callback+0x2a>
   25d0a:	428d      	cmp	r5, r1
	list->head = node;
   25d0c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   25d0e:	d100      	bne.n	25d12 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   25d10:	6098      	str	r0, [r3, #8]
	parent->next = child;
   25d12:	2000      	movs	r0, #0
   25d14:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   25d16:	b96a      	cbnz	r2, 25d34 <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   25d18:	2000      	movs	r0, #0
}
   25d1a:	bd30      	pop	{r4, r5, pc}
   25d1c:	4628      	mov	r0, r5
   25d1e:	e7ef      	b.n	25d00 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   25d20:	428d      	cmp	r5, r1
	parent->next = child;
   25d22:	6020      	str	r0, [r4, #0]
	list->tail = node;
   25d24:	bf08      	it	eq
   25d26:	609c      	streq	r4, [r3, #8]
}
   25d28:	e7f3      	b.n	25d12 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   25d2a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25d2c:	4604      	mov	r4, r0
   25d2e:	2d00      	cmp	r5, #0
   25d30:	d1f4      	bne.n	25d1c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   25d32:	b13a      	cbz	r2, 25d44 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   25d34:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   25d36:	685a      	ldr	r2, [r3, #4]
   25d38:	600a      	str	r2, [r1, #0]
	list->head = node;
   25d3a:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25d3c:	2800      	cmp	r0, #0
   25d3e:	d1eb      	bne.n	25d18 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   25d40:	6099      	str	r1, [r3, #8]
}
   25d42:	e7ea      	b.n	25d1a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   25d44:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25d48:	e7e7      	b.n	25d1a <gpio_nrfx_manage_callback+0x24>

00025d4a <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   25d4a:	b570      	push	{r4, r5, r6, lr}
   25d4c:	460e      	mov	r6, r1
   25d4e:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   25d50:	4601      	mov	r1, r0
   25d52:	b150      	cbz	r0, 25d6a <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
   25d54:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
   25d56:	688a      	ldr	r2, [r1, #8]
   25d58:	402a      	ands	r2, r5
   25d5a:	d002      	beq.n	25d62 <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   25d5c:	684b      	ldr	r3, [r1, #4]
   25d5e:	4630      	mov	r0, r6
   25d60:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   25d62:	b114      	cbz	r4, 25d6a <gpio_fire_callbacks.isra.0+0x20>
   25d64:	4621      	mov	r1, r4
   25d66:	6824      	ldr	r4, [r4, #0]
   25d68:	e7f5      	b.n	25d56 <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
   25d6a:	bd70      	pop	{r4, r5, r6, pc}

00025d6c <cfg_level_pins>:
{
   25d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->data;
   25d70:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   25d72:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   25d76:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   25d78:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   25d7c:	4313      	orrs	r3, r2
   25d7e:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   25d82:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   25d84:	2500      	movs	r5, #0
	while (level_pins) {
   25d86:	b90c      	cbnz	r4, 25d8c <cfg_level_pins+0x20>
}
   25d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   25d8c:	4226      	tst	r6, r4
   25d8e:	d010      	beq.n	25db2 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   25d90:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25d92:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   25d96:	40e9      	lsrs	r1, r5
   25d98:	f001 0101 	and.w	r1, r1, #1
   25d9c:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25da0:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   25da4:	b2c9      	uxtb	r1, r1
   25da6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   25daa:	f7f7 f8e3 	bl	1cf74 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   25dae:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   25db2:	3501      	adds	r5, #1
		bit <<= 1;
   25db4:	0076      	lsls	r6, r6, #1
   25db6:	e7e6      	b.n	25d86 <cfg_level_pins+0x1a>

00025db8 <check_level_trigger_pins>:
	return port->data;
   25db8:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   25dba:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   25dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   25dc2:	68dc      	ldr	r4, [r3, #12]
	return port->config;
   25dc4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   25dc8:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   25dca:	430a      	orrs	r2, r1
   25dcc:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   25dd0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   25dd4:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   25dd8:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   25dda:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   25dde:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   25de0:	2700      	movs	r7, #0
	while (level_pins) {
   25de2:	b914      	cbnz	r4, 25dea <check_level_trigger_pins+0x32>
}
   25de4:	4628      	mov	r0, r5
   25de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   25dea:	4234      	tst	r4, r6
   25dec:	d00a      	beq.n	25e04 <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25dee:	f898 0008 	ldrb.w	r0, [r8, #8]
   25df2:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   25df6:	2100      	movs	r1, #0
   25df8:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   25dfc:	f7f7 f8ba 	bl	1cf74 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   25e00:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   25e04:	3701      	adds	r7, #1
		bit <<= 1;
   25e06:	0076      	lsls	r6, r6, #1
   25e08:	e7eb      	b.n	25de2 <check_level_trigger_pins+0x2a>

00025e0a <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   25e0a:	2301      	movs	r3, #1
   25e0c:	fa03 f101 	lsl.w	r1, r3, r1
   25e10:	68c3      	ldr	r3, [r0, #12]
   25e12:	681b      	ldr	r3, [r3, #0]
   25e14:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   25e16:	bf18      	it	ne
   25e18:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   25e1c:	b112      	cbz	r2, 25e24 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   25e1e:	6883      	ldr	r3, [r0, #8]
   25e20:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   25e22:	4718      	bx	r3
   25e24:	6883      	ldr	r3, [r0, #8]
   25e26:	691b      	ldr	r3, [r3, #16]
   25e28:	e7fb      	b.n	25e22 <gpio_pin_set.isra.0+0x18>

00025e2a <_spi_context_cs_control>:
{
   25e2a:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   25e2c:	6805      	ldr	r5, [r0, #0]
{
   25e2e:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   25e30:	b1fd      	cbz	r5, 25e72 <_spi_context_cs_control+0x48>
   25e32:	68ab      	ldr	r3, [r5, #8]
   25e34:	b1eb      	cbz	r3, 25e72 <_spi_context_cs_control+0x48>
   25e36:	6818      	ldr	r0, [r3, #0]
   25e38:	b1d8      	cbz	r0, 25e72 <_spi_context_cs_control+0x48>
		if (on) {
   25e3a:	b151      	cbz	r1, 25e52 <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   25e3c:	7a19      	ldrb	r1, [r3, #8]
   25e3e:	2201      	movs	r2, #1
   25e40:	f7ff ffe3 	bl	25e0a <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   25e44:	6823      	ldr	r3, [r4, #0]
   25e46:	689b      	ldr	r3, [r3, #8]
   25e48:	6858      	ldr	r0, [r3, #4]
}
   25e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   25e4e:	f000 bcd7 	b.w	26800 <z_impl_k_busy_wait>
			if (!force_off &&
   25e52:	b912      	cbnz	r2, 25e5a <_spi_context_cs_control+0x30>
   25e54:	88aa      	ldrh	r2, [r5, #4]
   25e56:	0492      	lsls	r2, r2, #18
   25e58:	d40b      	bmi.n	25e72 <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
   25e5a:	6858      	ldr	r0, [r3, #4]
   25e5c:	f000 fcd0 	bl	26800 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   25e60:	6823      	ldr	r3, [r4, #0]
   25e62:	689b      	ldr	r3, [r3, #8]
   25e64:	2200      	movs	r2, #0
   25e66:	7a19      	ldrb	r1, [r3, #8]
   25e68:	6818      	ldr	r0, [r3, #0]
}
   25e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   25e6e:	f7ff bfcc 	b.w	25e0a <gpio_pin_set.isra.0>
}
   25e72:	bd38      	pop	{r3, r4, r5, pc}

00025e74 <spi_context_unlock_unconditionally>:
{
   25e74:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   25e76:	2201      	movs	r2, #1
   25e78:	2100      	movs	r1, #0
{
   25e7a:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   25e7c:	f7ff ffd5 	bl	25e2a <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   25e80:	6923      	ldr	r3, [r4, #16]
   25e82:	b933      	cbnz	r3, 25e92 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   25e84:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   25e86:	f104 0008 	add.w	r0, r4, #8
}
   25e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25e8e:	f7f9 bea1 	b.w	1fbd4 <z_impl_k_sem_give>
   25e92:	bd10      	pop	{r4, pc}

00025e94 <spi_nrfx_release>:
	return dev->data;
   25e94:	68c0      	ldr	r0, [r0, #12]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   25e96:	6803      	ldr	r3, [r0, #0]
   25e98:	428b      	cmp	r3, r1
{
   25e9a:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   25e9c:	d106      	bne.n	25eac <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   25e9e:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   25ea2:	b934      	cbnz	r4, 25eb2 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   25ea4:	f7ff ffe6 	bl	25e74 <spi_context_unlock_unconditionally>
	return 0;
   25ea8:	4620      	mov	r0, r4
}
   25eaa:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25eac:	f06f 0015 	mvn.w	r0, #21
   25eb0:	e7fb      	b.n	25eaa <spi_nrfx_release+0x16>
		return -EBUSY;
   25eb2:	f06f 000f 	mvn.w	r0, #15
   25eb6:	e7f8      	b.n	25eaa <spi_nrfx_release+0x16>

00025eb8 <flash_nrf_write_protection>:
}
   25eb8:	2000      	movs	r0, #0
   25eba:	4770      	bx	lr

00025ebc <is_regular_addr_valid>:
{
   25ebc:	b538      	push	{r3, r4, r5, lr}
   25ebe:	4604      	mov	r4, r0
   25ec0:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   25ec2:	f000 f92f 	bl	26124 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   25ec6:	4284      	cmp	r4, r0
   25ec8:	d209      	bcs.n	25ede <is_regular_addr_valid+0x22>
   25eca:	2c00      	cmp	r4, #0
   25ecc:	db07      	blt.n	25ede <is_regular_addr_valid+0x22>
	    addr < 0 ||
   25ece:	42a8      	cmp	r0, r5
   25ed0:	d305      	bcc.n	25ede <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   25ed2:	442c      	add	r4, r5
	    len > flash_size ||
   25ed4:	4284      	cmp	r4, r0
   25ed6:	bf8c      	ite	hi
   25ed8:	2000      	movhi	r0, #0
   25eda:	2001      	movls	r0, #1
}
   25edc:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   25ede:	2000      	movs	r0, #0
   25ee0:	e7fc      	b.n	25edc <is_regular_addr_valid+0x20>

00025ee2 <erase_op>:
{
   25ee2:	b570      	push	{r4, r5, r6, lr}
   25ee4:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   25ee6:	f000 f923 	bl	26130 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   25eea:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   25eec:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   25eee:	b10b      	cbz	r3, 25ef4 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   25ef0:	f7f7 fe6c 	bl	1dbcc <nrf_flash_sync_get_timestamp_begin>
{
   25ef4:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   25ef6:	6860      	ldr	r0, [r4, #4]
   25ef8:	f7f8 fbb4 	bl	1e664 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   25efc:	68a3      	ldr	r3, [r4, #8]
   25efe:	1b5b      	subs	r3, r3, r5
   25f00:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   25f02:	6863      	ldr	r3, [r4, #4]
   25f04:	442b      	add	r3, r5
   25f06:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   25f08:	7b23      	ldrb	r3, [r4, #12]
		i++;
   25f0a:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   25f0c:	b943      	cbnz	r3, 25f20 <erase_op+0x3e>
	} while (e_ctx->len > 0);
   25f0e:	68a3      	ldr	r3, [r4, #8]
   25f10:	2b00      	cmp	r3, #0
   25f12:	d1f0      	bne.n	25ef6 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   25f14:	68a0      	ldr	r0, [r4, #8]
   25f16:	3800      	subs	r0, #0
   25f18:	bf18      	it	ne
   25f1a:	2001      	movne	r0, #1
}
   25f1c:	4240      	negs	r0, r0
   25f1e:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   25f20:	4630      	mov	r0, r6
   25f22:	f7dc fc35 	bl	2790 <nrf_flash_sync_check_time_limit>
   25f26:	2800      	cmp	r0, #0
   25f28:	d0f1      	beq.n	25f0e <erase_op+0x2c>
   25f2a:	e7f3      	b.n	25f14 <erase_op+0x32>

00025f2c <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   25f2c:	2000      	movs	r0, #0
   25f2e:	f7eb b979 	b.w	11224 <ticker_is_initialized>

00025f32 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   25f32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25f36:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   25f38:	6883      	ldr	r3, [r0, #8]
{
   25f3a:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   25f3c:	695b      	ldr	r3, [r3, #20]
   25f3e:	4669      	mov	r1, sp
{
   25f40:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   25f42:	aa01      	add	r2, sp, #4
   25f44:	4798      	blx	r3

	while (layout_size--) {
   25f46:	e9dd 1000 	ldrd	r1, r0, [sp]
   25f4a:	2300      	movs	r3, #0
   25f4c:	3801      	subs	r0, #1
	off_t end = 0;
   25f4e:	461d      	mov	r5, r3
	off_t group_offs = 0;
   25f50:	469e      	mov	lr, r3
	size_t page_count = 0;
   25f52:	469c      	mov	ip, r3
	while (layout_size--) {
   25f54:	1c42      	adds	r2, r0, #1
   25f56:	d102      	bne.n	25f5e <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   25f58:	f06f 0015 	mvn.w	r0, #21
   25f5c:	e019      	b.n	25f92 <flash_get_page_info+0x60>
			end += layout->pages_count * layout->pages_size;
   25f5e:	680a      	ldr	r2, [r1, #0]
		if (use_addr) {
   25f60:	b1d7      	cbz	r7, 25f98 <flash_get_page_info+0x66>
			end += layout->pages_count * layout->pages_size;
   25f62:	f8d1 8004 	ldr.w	r8, [r1, #4]
   25f66:	fb08 5502 	mla	r5, r8, r2, r5
		if (offs < end) {
   25f6a:	42a5      	cmp	r5, r4
   25f6c:	f100 30ff 	add.w	r0, r0, #4294967295
   25f70:	dd17      	ble.n	25fa2 <flash_get_page_info+0x70>
   25f72:	b103      	cbz	r3, 25f76 <flash_get_page_info+0x44>
   25f74:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   25f76:	9b00      	ldr	r3, [sp, #0]
   25f78:	685b      	ldr	r3, [r3, #4]
   25f7a:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   25f7c:	b177      	cbz	r7, 25f9c <flash_get_page_info+0x6a>
				num_in_group = (offs - group_offs) /
   25f7e:	eba4 040e 	sub.w	r4, r4, lr
   25f82:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   25f86:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   25f8a:	4464      	add	r4, ip
			info->start_offset = group_offs +
   25f8c:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   25f8e:	60b4      	str	r4, [r6, #8]
			return 0;
   25f90:	2000      	movs	r0, #0
}
   25f92:	b002      	add	sp, #8
   25f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   25f98:	4415      	add	r5, r2
   25f9a:	e7e6      	b.n	25f6a <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   25f9c:	eba4 040c 	sub.w	r4, r4, ip
   25fa0:	e7f1      	b.n	25f86 <flash_get_page_info+0x54>
		group_offs += layout->pages_count * layout->pages_size;
   25fa2:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   25fa4:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   25fa6:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   25faa:	3108      	adds	r1, #8
   25fac:	2301      	movs	r3, #1
   25fae:	e7d1      	b.n	25f54 <flash_get_page_info+0x22>

00025fb0 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   25fb0:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   25fb2:	2201      	movs	r2, #1
   25fb4:	f7ff bfbd 	b.w	25f32 <flash_get_page_info>

00025fb8 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   25fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   25fbc:	6883      	ldr	r3, [r0, #8]
{
   25fbe:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   25fc0:	695b      	ldr	r3, [r3, #20]
{
   25fc2:	4688      	mov	r8, r1
   25fc4:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   25fc6:	a901      	add	r1, sp, #4
   25fc8:	aa02      	add	r2, sp, #8
   25fca:	4798      	blx	r3
	off_t off = 0;
   25fcc:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   25fce:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   25fd0:	4625      	mov	r5, r4
   25fd2:	9b02      	ldr	r3, [sp, #8]
   25fd4:	42ab      	cmp	r3, r5
   25fd6:	d802      	bhi.n	25fde <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   25fd8:	b006      	add	sp, #24
   25fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   25fde:	9f01      	ldr	r7, [sp, #4]
   25fe0:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   25fe4:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   25fe6:	687b      	ldr	r3, [r7, #4]
   25fe8:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   25fea:	683a      	ldr	r2, [r7, #0]
   25fec:	42b2      	cmp	r2, r6
   25fee:	eb0a 0306 	add.w	r3, sl, r6
   25ff2:	d802      	bhi.n	25ffa <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   25ff4:	3501      	adds	r5, #1
   25ff6:	469a      	mov	sl, r3
   25ff8:	e7eb      	b.n	25fd2 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   25ffa:	4649      	mov	r1, r9
   25ffc:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   25ffe:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   26000:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   26002:	47c0      	blx	r8
   26004:	2800      	cmp	r0, #0
   26006:	d0e7      	beq.n	25fd8 <flash_page_foreach+0x20>
			off += page_info.size;
   26008:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2600a:	3601      	adds	r6, #1
			off += page_info.size;
   2600c:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2600e:	e7ec      	b.n	25fea <flash_page_foreach+0x32>

00026010 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   26010:	68c2      	ldr	r2, [r0, #12]
{
   26012:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   26014:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   26018:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2601c:	2000      	movs	r0, #0
   2601e:	4770      	bx	lr

00026020 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   26020:	6843      	ldr	r3, [r0, #4]
   26022:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26024:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26028:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2602c:	4770      	bx	lr

0002602e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2602e:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   26030:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   26032:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26034:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26038:	b148      	cbz	r0, 2604e <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2603a:	7c52      	ldrb	r2, [r2, #17]
   2603c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2603e:	2000      	movs	r0, #0
   26040:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   26044:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26048:	2201      	movs	r2, #1
   2604a:	601a      	str	r2, [r3, #0]
	return 0;
   2604c:	4770      	bx	lr
		return -1;
   2604e:	f04f 30ff 	mov.w	r0, #4294967295
}
   26052:	4770      	bx	lr

00026054 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   26054:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   26056:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26058:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2605c:	b938      	cbnz	r0, 2606e <is_tx_ready.isra.0+0x1a>
   2605e:	799b      	ldrb	r3, [r3, #6]
   26060:	b933      	cbnz	r3, 26070 <is_tx_ready.isra.0+0x1c>
   26062:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   26066:	3800      	subs	r0, #0
   26068:	bf18      	it	ne
   2606a:	2001      	movne	r0, #1
   2606c:	4770      	bx	lr
   2606e:	2001      	movs	r0, #1
}
   26070:	4770      	bx	lr

00026072 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   26072:	6843      	ldr	r3, [r0, #4]
   26074:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   26076:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2607a:	05d2      	lsls	r2, r2, #23
   2607c:	d518      	bpl.n	260b0 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2607e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   26082:	b1aa      	cbz	r2, 260b0 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   26084:	f04f 0120 	mov.w	r1, #32
   26088:	f3ef 8211 	mrs	r2, BASEPRI
   2608c:	f381 8811 	msr	BASEPRI, r1
   26090:	f3bf 8f6f 	isb	sy
   26094:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   26098:	b131      	cbz	r1, 260a8 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2609a:	2100      	movs	r1, #0
   2609c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   260a0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   260a4:	2101      	movs	r1, #1
   260a6:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   260a8:	f382 8811 	msr	BASEPRI, r2
   260ac:	f3bf 8f6f 	isb	sy
}
   260b0:	4770      	bx	lr

000260b2 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   260b2:	4700      	bx	r0

000260b4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   260b4:	f000 bba4 	b.w	26800 <z_impl_k_busy_wait>

000260b8 <nrfx_clock_enable>:
{
   260b8:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   260ba:	2000      	movs	r0, #0
   260bc:	f7e0 ff22 	bl	6f04 <arch_irq_is_enabled>
   260c0:	b918      	cbnz	r0, 260ca <nrfx_clock_enable+0x12>
}
   260c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   260c6:	f7e0 bef9 	b.w	6ebc <arch_irq_enable>
   260ca:	bd08      	pop	{r3, pc}

000260cc <nrfx_clock_start>:
    switch (domain)
   260cc:	b110      	cbz	r0, 260d4 <nrfx_clock_start+0x8>
   260ce:	2801      	cmp	r0, #1
   260d0:	d01d      	beq.n	2610e <nrfx_clock_start+0x42>
   260d2:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   260d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   260d8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   260dc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   260e0:	03c9      	lsls	r1, r1, #15
   260e2:	d512      	bpl.n	2610a <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   260e4:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   260e8:	2a01      	cmp	r2, #1
   260ea:	d10e      	bne.n	2610a <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   260ec:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   260f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   260f4:	2200      	movs	r2, #0
   260f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   260fa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   260fe:	2202      	movs	r2, #2
   26100:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26104:	2201      	movs	r2, #1
   26106:	609a      	str	r2, [r3, #8]
}
   26108:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   2610a:	2200      	movs	r2, #0
   2610c:	e7ee      	b.n	260ec <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2610e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26112:	2200      	movs	r2, #0
   26114:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   26118:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2611c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26120:	6018      	str	r0, [r3, #0]
}
   26122:	4770      	bx	lr

00026124 <nrfx_nvmc_flash_size_get>:
   26124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26128:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2612a:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2612c:	4350      	muls	r0, r2
   2612e:	4770      	bx	lr

00026130 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   26130:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26134:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   26136:	4770      	bx	lr

00026138 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   26138:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2613c:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2613e:	4770      	bx	lr

00026140 <nrf_gpio_pin_set>:
{
   26140:	b507      	push	{r0, r1, r2, lr}
   26142:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26144:	a801      	add	r0, sp, #4
   26146:	f7f8 faf5 	bl	1e734 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2614a:	9a01      	ldr	r2, [sp, #4]
   2614c:	2301      	movs	r3, #1
   2614e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   26150:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   26154:	b003      	add	sp, #12
   26156:	f85d fb04 	ldr.w	pc, [sp], #4

0002615a <nrf_gpio_pin_clear>:
{
   2615a:	b507      	push	{r0, r1, r2, lr}
   2615c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2615e:	a801      	add	r0, sp, #4
   26160:	f7f8 fae8 	bl	1e734 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   26164:	9a01      	ldr	r2, [sp, #4]
   26166:	2301      	movs	r3, #1
   26168:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2616a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   2616e:	b003      	add	sp, #12
   26170:	f85d fb04 	ldr.w	pc, [sp], #4

00026174 <transfer_byte>:
{
   26174:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   26176:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2617a:	698a      	ldr	r2, [r1, #24]
   2617c:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   2617e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   26182:	6a0b      	ldr	r3, [r1, #32]
   26184:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   26186:	bf3e      	ittt	cc
   26188:	694a      	ldrcc	r2, [r1, #20]
   2618a:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   2618e:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   26190:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   26192:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   26196:	1c53      	adds	r3, r2, #1
   26198:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2619a:	3202      	adds	r2, #2
    if (p_cb->abort)
   2619c:	b13c      	cbz	r4, 261ae <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2619e:	690c      	ldr	r4, [r1, #16]
   261a0:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   261a2:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   261a4:	bf38      	it	cc
   261a6:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   261a8:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   261aa:	bf88      	it	hi
   261ac:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   261ae:	690d      	ldr	r5, [r1, #16]
   261b0:	4295      	cmp	r5, r2
   261b2:	d905      	bls.n	261c0 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   261b4:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   261b6:	5c9b      	ldrb	r3, [r3, r2]
   261b8:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   261bc:	2001      	movs	r0, #1
   261be:	e00a      	b.n	261d6 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   261c0:	698c      	ldr	r4, [r1, #24]
   261c2:	4294      	cmp	r4, r2
   261c4:	d901      	bls.n	261ca <transfer_byte+0x56>
   261c6:	7fcb      	ldrb	r3, [r1, #31]
   261c8:	e7f6      	b.n	261b8 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   261ca:	42ab      	cmp	r3, r5
   261cc:	d3f6      	bcc.n	261bc <transfer_byte+0x48>
   261ce:	42a3      	cmp	r3, r4
   261d0:	bf2c      	ite	cs
   261d2:	2000      	movcs	r0, #0
   261d4:	2001      	movcc	r0, #1
}
   261d6:	b003      	add	sp, #12
   261d8:	bd30      	pop	{r4, r5, pc}

000261da <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   261da:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
   261dc:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   261de:	6b48      	ldr	r0, [r1, #52]	; 0x34
   261e0:	4298      	cmp	r0, r3
{
   261e2:	b510      	push	{r4, lr}
   261e4:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   261e8:	d205      	bcs.n	261f6 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   261ea:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   261ec:	5c09      	ldrb	r1, [r1, r0]
   261ee:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
   261f2:	4618      	mov	r0, r3
}
   261f4:	e004      	b.n	26200 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
   261f6:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   261fa:	b110      	cbz	r0, 26202 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   261fc:	61d3      	str	r3, [r2, #28]
            return false;
   261fe:	2000      	movs	r0, #0
}
   26200:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   26202:	6a0c      	ldr	r4, [r1, #32]
   26204:	0664      	lsls	r4, r4, #25
   26206:	d503      	bpl.n	26210 <twi_send_byte+0x36>
   26208:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   2620a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   2620e:	e7f7      	b.n	26200 <twi_send_byte+0x26>
   26210:	6153      	str	r3, [r2, #20]
   26212:	e7ee      	b.n	261f2 <twi_send_byte+0x18>

00026214 <twi_transfer>:
{
   26214:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26216:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   2621a:	4604      	mov	r4, r0
   2621c:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   2621e:	b12e      	cbz	r6, 2622c <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26220:	2300      	movs	r3, #0
   26222:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   26226:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   2622a:	2601      	movs	r6, #1
    if (p_cb->error)
   2622c:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   26230:	b320      	cbz	r0, 2627c <twi_transfer+0x68>
   26232:	2300      	movs	r3, #0
   26234:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   26238:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   2623c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   26240:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   26244:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   26248:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   2624c:	2e00      	cmp	r6, #0
   2624e:	d068      	beq.n	26322 <twi_transfer+0x10e>
        if (!p_cb->error)
   26250:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   26254:	2300      	movs	r3, #0
   26256:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   2625a:	bb88      	cbnz	r0, 262c0 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   2625c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2625e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   26260:	429a      	cmp	r2, r3
        return false;
   26262:	bf1c      	itt	ne
   26264:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   26266:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   26268:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   2626c:	bf1c      	itt	ne
   2626e:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   26272:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   26276:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   2627a:	e022      	b.n	262c2 <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2627c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   26280:	b142      	cbz	r2, 26294 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26282:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   26286:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2628a:	2301      	movs	r3, #1
   2628c:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   2628e:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   26292:	e7db      	b.n	2624c <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26294:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   26298:	b1a3      	cbz	r3, 262c4 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2629a:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   2629e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   262a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   262a4:	3301      	adds	r3, #1
   262a6:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   262a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   262ac:	b113      	cbz	r3, 262b4 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   262ae:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   262b2:	e7e8      	b.n	26286 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   262b4:	4629      	mov	r1, r5
   262b6:	4620      	mov	r0, r4
   262b8:	f7ff ff8f 	bl	261da <twi_send_byte>
   262bc:	2800      	cmp	r0, #0
   262be:	d1c5      	bne.n	2624c <twi_transfer+0x38>
                    return false;
   262c0:	2000      	movs	r0, #0
}
   262c2:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   262c4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   262c8:	2a00      	cmp	r2, #0
   262ca:	d0bf      	beq.n	2624c <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   262cc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   262d0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   262d4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   262d8:	b112      	cbz	r2, 262e0 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   262da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   262de:	e7d2      	b.n	26286 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   262e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   262e2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   262e4:	4293      	cmp	r3, r2
   262e6:	d2b1      	bcs.n	2624c <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   262e8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   262ea:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   262ee:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   262f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   262f2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   262f4:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   262f6:	1e51      	subs	r1, r2, #1
   262f8:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   262fa:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   262fc:	d108      	bne.n	26310 <twi_transfer+0xfc>
   262fe:	6a29      	ldr	r1, [r5, #32]
   26300:	0649      	lsls	r1, r1, #25
   26302:	d410      	bmi.n	26326 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   26304:	2302      	movs	r3, #2
   26306:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2630a:	2301      	movs	r3, #1
   2630c:	6223      	str	r3, [r4, #32]
   2630e:	e79d      	b.n	2624c <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26310:	4293      	cmp	r3, r2
   26312:	d1fa      	bne.n	2630a <twi_transfer+0xf6>
   26314:	6a2b      	ldr	r3, [r5, #32]
   26316:	065b      	lsls	r3, r3, #25
   26318:	d598      	bpl.n	2624c <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   2631a:	2302      	movs	r3, #2
   2631c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   26320:	e7cf      	b.n	262c2 <twi_transfer+0xae>
    return true;
   26322:	2001      	movs	r0, #1
   26324:	e7cd      	b.n	262c2 <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26326:	4293      	cmp	r3, r2
   26328:	d1ef      	bne.n	2630a <twi_transfer+0xf6>
   2632a:	e7f6      	b.n	2631a <twi_transfer+0x106>

0002632c <arch_system_halt>:
	__asm__ volatile(
   2632c:	f04f 0220 	mov.w	r2, #32
   26330:	f3ef 8311 	mrs	r3, BASEPRI
   26334:	f382 8811 	msr	BASEPRI, r2
   26338:	f3bf 8f6f 	isb	sy
	for (;;) {
   2633c:	e7fe      	b.n	2633c <arch_system_halt+0x10>

0002633e <k_heap_init>:
{
   2633e:	b410      	push	{r4}
   26340:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   26344:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   26348:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2634a:	f7fb bb19 	b.w	21980 <sys_heap_init>

0002634e <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2634e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26352:	b085      	sub	sp, #20
   26354:	4606      	mov	r6, r0
   26356:	4688      	mov	r8, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   26358:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2635c:	4691      	mov	r9, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   2635e:	f000 fb16 	bl	2698e <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   26362:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   26366:	4605      	mov	r5, r0
   26368:	460f      	mov	r7, r1
   2636a:	f04f 0320 	mov.w	r3, #32
   2636e:	f3ef 8411 	mrs	r4, BASEPRI
   26372:	f383 8811 	msr	BASEPRI, r3
   26376:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2637a:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2637e:	464a      	mov	r2, r9
   26380:	4641      	mov	r1, r8
   26382:	4630      	mov	r0, r6
   26384:	f7fb fa81 	bl	2188a <sys_heap_aligned_alloc>
   26388:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   2638a:	f7f9 ff0b 	bl	201a4 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   2638e:	9b03      	ldr	r3, [sp, #12]
   26390:	b13b      	cbz	r3, 263a2 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   26392:	f384 8811 	msr	BASEPRI, r4
   26396:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2639a:	4618      	mov	r0, r3
   2639c:	b005      	add	sp, #20
   2639e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   263a2:	1a28      	subs	r0, r5, r0
   263a4:	eb67 0101 	sbc.w	r1, r7, r1
   263a8:	2801      	cmp	r0, #1
   263aa:	f171 0200 	sbcs.w	r2, r1, #0
   263ae:	dbf0      	blt.n	26392 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   263b0:	e9cd 0100 	strd	r0, r1, [sp]
   263b4:	465a      	mov	r2, fp
   263b6:	4621      	mov	r1, r4
   263b8:	4650      	mov	r0, sl
   263ba:	f7f9 fb03 	bl	1f9c4 <z_pend_curr>
	__asm__ volatile(
   263be:	f04f 0320 	mov.w	r3, #32
   263c2:	f3ef 8411 	mrs	r4, BASEPRI
   263c6:	f383 8811 	msr	BASEPRI, r3
   263ca:	f3bf 8f6f 	isb	sy
   263ce:	e7d6      	b.n	2637e <k_heap_aligned_alloc+0x30>

000263d0 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   263d0:	b538      	push	{r3, r4, r5, lr}
   263d2:	4604      	mov	r4, r0
   263d4:	f04f 0320 	mov.w	r3, #32
   263d8:	f3ef 8511 	mrs	r5, BASEPRI
   263dc:	f383 8811 	msr	BASEPRI, r3
   263e0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   263e4:	f7fb fa04 	bl	217f0 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   263e8:	f104 000c 	add.w	r0, r4, #12
   263ec:	f000 f9e2 	bl	267b4 <z_unpend_all>
   263f0:	b130      	cbz	r0, 26400 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   263f2:	4629      	mov	r1, r5
   263f4:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   263f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   263fc:	f7f9 b8a2 	b.w	1f544 <z_reschedule>
	__asm__ volatile(
   26400:	f385 8811 	msr	BASEPRI, r5
   26404:	f3bf 8f6f 	isb	sy
}
   26408:	bd38      	pop	{r3, r4, r5, pc}

0002640a <k_mem_slab_init>:
{
   2640a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2640c:	2400      	movs	r4, #0
   2640e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   26410:	ea41 0402 	orr.w	r4, r1, r2
   26414:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   26418:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2641c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2641e:	d10c      	bne.n	2643a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   26420:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   26422:	42a3      	cmp	r3, r4
   26424:	d103      	bne.n	2642e <k_mem_slab_init+0x24>
   26426:	e9c0 0000 	strd	r0, r0, [r0]
}
   2642a:	2000      	movs	r0, #0
}
   2642c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2642e:	6945      	ldr	r5, [r0, #20]
   26430:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   26432:	3401      	adds	r4, #1
		slab->free_list = p;
   26434:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   26436:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   26438:	e7f3      	b.n	26422 <k_mem_slab_init+0x18>
		return -EINVAL;
   2643a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2643e:	e7f5      	b.n	2642c <k_mem_slab_init+0x22>

00026440 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   26440:	f990 300e 	ldrsb.w	r3, [r0, #14]
   26444:	428b      	cmp	r3, r1
   26446:	d001      	beq.n	2644c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   26448:	f7f9 bad0 	b.w	1f9ec <z_set_prio>
}
   2644c:	2000      	movs	r0, #0
   2644e:	4770      	bx	lr

00026450 <z_impl_k_mutex_init>:
{
   26450:	4603      	mov	r3, r0
	mutex->owner = NULL;
   26452:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   26454:	e9c3 0002 	strd	r0, r0, [r3, #8]
   26458:	e9c3 3300 	strd	r3, r3, [r3]
}
   2645c:	4770      	bx	lr

0002645e <queue_insert>:
{
   2645e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26462:	4699      	mov	r9, r3
   26464:	4604      	mov	r4, r0
   26466:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2646a:	460d      	mov	r5, r1
   2646c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2646e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   26472:	f04f 0220 	mov.w	r2, #32
   26476:	f3ef 8711 	mrs	r7, BASEPRI
   2647a:	f382 8811 	msr	BASEPRI, r2
   2647e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   26482:	b103      	cbz	r3, 26486 <queue_insert+0x28>
	return list->tail;
   26484:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   26486:	4630      	mov	r0, r6
   26488:	f000 f97b 	bl	26782 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2648c:	b160      	cbz	r0, 264a8 <queue_insert+0x4a>
   2648e:	2400      	movs	r4, #0
   26490:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   26494:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   26498:	f000 f906 	bl	266a8 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2649c:	4630      	mov	r0, r6
   2649e:	4639      	mov	r1, r7
   264a0:	f7f9 f850 	bl	1f544 <z_reschedule>
	return 0;
   264a4:	2000      	movs	r0, #0
   264a6:	e00c      	b.n	264c2 <queue_insert+0x64>
	if (alloc) {
   264a8:	f1b9 0f00 	cmp.w	r9, #0
   264ac:	d01b      	beq.n	264e6 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   264ae:	2108      	movs	r1, #8
   264b0:	f7f9 ff86 	bl	203c0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   264b4:	b938      	cbnz	r0, 264c6 <queue_insert+0x68>
	__asm__ volatile(
   264b6:	f387 8811 	msr	BASEPRI, r7
   264ba:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   264be:	f06f 000b 	mvn.w	r0, #11
}
   264c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   264c6:	2301      	movs	r3, #1
		anode->data = data;
   264c8:	f8c0 8004 	str.w	r8, [r0, #4]
   264cc:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   264ce:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   264d0:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   264d4:	b95d      	cbnz	r5, 264ee <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   264d6:	6823      	ldr	r3, [r4, #0]
   264d8:	4313      	orrs	r3, r2
   264da:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   264dc:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   264de:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   264e0:	b973      	cbnz	r3, 26500 <queue_insert+0xa2>
	list->tail = node;
   264e2:	6060      	str	r0, [r4, #4]
}
   264e4:	e00c      	b.n	26500 <queue_insert+0xa2>
	node->next_and_flags = flags;
   264e6:	f8c8 9000 	str.w	r9, [r8]
}
   264ea:	4640      	mov	r0, r8
   264ec:	e7ef      	b.n	264ce <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   264ee:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   264f0:	f033 0303 	bics.w	r3, r3, #3
   264f4:	d110      	bne.n	26518 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   264f6:	6002      	str	r2, [r0, #0]
	return list->tail;
   264f8:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   264fa:	b93a      	cbnz	r2, 2650c <queue_insert+0xae>
	list->head = node;
   264fc:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   26500:	2104      	movs	r1, #4
   26502:	f104 0010 	add.w	r0, r4, #16
   26506:	f000 fbd7 	bl	26cb8 <z_handle_obj_poll_events>
   2650a:	e7c7      	b.n	2649c <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2650c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2650e:	f003 0303 	and.w	r3, r3, #3
   26512:	4303      	orrs	r3, r0
   26514:	6013      	str	r3, [r2, #0]
   26516:	e7e4      	b.n	264e2 <queue_insert+0x84>
   26518:	4313      	orrs	r3, r2
   2651a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2651c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2651e:	f003 0303 	and.w	r3, r3, #3
   26522:	4303      	orrs	r3, r0
   26524:	602b      	str	r3, [r5, #0]
}
   26526:	e7eb      	b.n	26500 <queue_insert+0xa2>

00026528 <z_queue_node_peek>:
{
   26528:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2652a:	4604      	mov	r4, r0
   2652c:	b130      	cbz	r0, 2653c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2652e:	6802      	ldr	r2, [r0, #0]
   26530:	0793      	lsls	r3, r2, #30
   26532:	d003      	beq.n	2653c <z_queue_node_peek+0x14>
		ret = anode->data;
   26534:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   26536:	b109      	cbz	r1, 2653c <z_queue_node_peek+0x14>
			k_free(anode);
   26538:	f000 fbcc 	bl	26cd4 <k_free>
}
   2653c:	4620      	mov	r0, r4
   2653e:	bd10      	pop	{r4, pc}

00026540 <z_impl_k_queue_init>:
	list->head = NULL;
   26540:	2300      	movs	r3, #0
	list->tail = NULL;
   26542:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   26546:	f100 0308 	add.w	r3, r0, #8
   2654a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2654e:	f100 0310 	add.w	r3, r0, #16
   26552:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   26556:	4770      	bx	lr

00026558 <k_queue_append>:
{
   26558:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2655a:	2301      	movs	r3, #1
   2655c:	9300      	str	r3, [sp, #0]
   2655e:	2300      	movs	r3, #0
{
   26560:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   26562:	4619      	mov	r1, r3
   26564:	f7ff ff7b 	bl	2645e <queue_insert>
}
   26568:	b003      	add	sp, #12
   2656a:	f85d fb04 	ldr.w	pc, [sp], #4

0002656e <k_queue_prepend>:
{
   2656e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   26570:	2300      	movs	r3, #0
{
   26572:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   26574:	9300      	str	r3, [sp, #0]
   26576:	4619      	mov	r1, r3
   26578:	f7ff ff71 	bl	2645e <queue_insert>
}
   2657c:	b003      	add	sp, #12
   2657e:	f85d fb04 	ldr.w	pc, [sp], #4

00026582 <k_queue_append_list>:
{
   26582:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26586:	4605      	mov	r5, r0
   26588:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2658a:	460c      	mov	r4, r1
   2658c:	b391      	cbz	r1, 265f4 <k_queue_append_list+0x72>
   2658e:	b38a      	cbz	r2, 265f4 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26590:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   26594:	f04f 0320 	mov.w	r3, #32
   26598:	f3ef 8811 	mrs	r8, BASEPRI
   2659c:	f383 8811 	msr	BASEPRI, r3
   265a0:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   265a4:	4638      	mov	r0, r7
   265a6:	f000 f8ec 	bl	26782 <z_unpend_first_thread>
   265aa:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   265ae:	b920      	cbnz	r0, 265ba <k_queue_append_list+0x38>
	return list->tail;
   265b0:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   265b2:	b9ca      	cbnz	r2, 265e8 <k_queue_append_list+0x66>
	list->head = node;
   265b4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   265b6:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   265b8:	e00a      	b.n	265d0 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   265ba:	6144      	str	r4, [r0, #20]
   265bc:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   265c0:	f000 f872 	bl	266a8 <z_ready_thread>
		head = *(void **)head;
   265c4:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   265c6:	4638      	mov	r0, r7
   265c8:	f000 f8db 	bl	26782 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   265cc:	2c00      	cmp	r4, #0
   265ce:	d1ee      	bne.n	265ae <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   265d0:	2104      	movs	r1, #4
   265d2:	f105 0010 	add.w	r0, r5, #16
   265d6:	f000 fb6f 	bl	26cb8 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   265da:	4638      	mov	r0, r7
   265dc:	4641      	mov	r1, r8
   265de:	f7f8 ffb1 	bl	1f544 <z_reschedule>
	return 0;
   265e2:	2000      	movs	r0, #0
}
   265e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   265e8:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   265ea:	f003 0303 	and.w	r3, r3, #3
   265ee:	431c      	orrs	r4, r3
   265f0:	6014      	str	r4, [r2, #0]
}
   265f2:	e7e0      	b.n	265b6 <k_queue_append_list+0x34>
		return -EINVAL;
   265f4:	f06f 0015 	mvn.w	r0, #21
   265f8:	e7f4      	b.n	265e4 <k_queue_append_list+0x62>

000265fa <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   265fa:	f990 000e 	ldrsb.w	r0, [r0, #14]
   265fe:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   26602:	4298      	cmp	r0, r3
   26604:	bfac      	ite	ge
   26606:	2000      	movge	r0, #0
   26608:	2001      	movlt	r0, #1
   2660a:	4770      	bx	lr

0002660c <z_unpend_thread_no_timeout>:
{
   2660c:	b510      	push	{r4, lr}
   2660e:	f04f 0320 	mov.w	r3, #32
   26612:	f3ef 8411 	mrs	r4, BASEPRI
   26616:	f383 8811 	msr	BASEPRI, r3
   2661a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2661e:	f000 f81b 	bl	26658 <unpend_thread_no_timeout>
	__asm__ volatile(
   26622:	f384 8811 	msr	BASEPRI, r4
   26626:	f3bf 8f6f 	isb	sy
}
   2662a:	bd10      	pop	{r4, pc}

0002662c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2662c:	4603      	mov	r3, r0
   2662e:	b920      	cbnz	r0, 2663a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26630:	f3ef 8205 	mrs	r2, IPSR
   26634:	b90a      	cbnz	r2, 2663a <z_reschedule_irqlock+0xe>
   26636:	f7e0 bbeb 	b.w	6e10 <arch_swap>
   2663a:	f383 8811 	msr	BASEPRI, r3
   2663e:	f3bf 8f6f 	isb	sy
}
   26642:	4770      	bx	lr

00026644 <z_reschedule_unlocked>:
	__asm__ volatile(
   26644:	f04f 0320 	mov.w	r3, #32
   26648:	f3ef 8011 	mrs	r0, BASEPRI
   2664c:	f383 8811 	msr	BASEPRI, r3
   26650:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26654:	f7ff bfea 	b.w	2662c <z_reschedule_irqlock>

00026658 <unpend_thread_no_timeout>:
{
   26658:	4601      	mov	r1, r0
   2665a:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2665c:	6880      	ldr	r0, [r0, #8]
   2665e:	f7f8 ff97 	bl	1f590 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26662:	7b4b      	ldrb	r3, [r1, #13]
   26664:	f023 0302 	bic.w	r3, r3, #2
   26668:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   2666a:	2300      	movs	r3, #0
   2666c:	608b      	str	r3, [r1, #8]
}
   2666e:	bd08      	pop	{r3, pc}

00026670 <z_unpend_thread>:
{
   26670:	b538      	push	{r3, r4, r5, lr}
   26672:	4604      	mov	r4, r0
   26674:	f04f 0320 	mov.w	r3, #32
   26678:	f3ef 8511 	mrs	r5, BASEPRI
   2667c:	f383 8811 	msr	BASEPRI, r3
   26680:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   26684:	f7ff ffe8 	bl	26658 <unpend_thread_no_timeout>
	__asm__ volatile(
   26688:	f385 8811 	msr	BASEPRI, r5
   2668c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   26690:	f104 0018 	add.w	r0, r4, #24
}
   26694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26698:	f000 b933 	b.w	26902 <z_abort_timeout>

0002669c <z_priq_dumb_best>:
{
   2669c:	4603      	mov	r3, r0
	return list->head == list;
   2669e:	6800      	ldr	r0, [r0, #0]
}
   266a0:	4283      	cmp	r3, r0
   266a2:	bf08      	it	eq
   266a4:	2000      	moveq	r0, #0
   266a6:	4770      	bx	lr

000266a8 <z_ready_thread>:
{
   266a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   266aa:	f04f 0320 	mov.w	r3, #32
   266ae:	f3ef 8411 	mrs	r4, BASEPRI
   266b2:	f383 8811 	msr	BASEPRI, r3
   266b6:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   266ba:	f7f8 ffc3 	bl	1f644 <ready_thread>
	__asm__ volatile(
   266be:	f384 8811 	msr	BASEPRI, r4
   266c2:	f3bf 8f6f 	isb	sy
}
   266c6:	bd10      	pop	{r4, pc}

000266c8 <z_thread_timeout>:
{
   266c8:	b570      	push	{r4, r5, r6, lr}
   266ca:	4604      	mov	r4, r0
	__asm__ volatile(
   266cc:	f04f 0320 	mov.w	r3, #32
   266d0:	f3ef 8611 	mrs	r6, BASEPRI
   266d4:	f383 8811 	msr	BASEPRI, r3
   266d8:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   266dc:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   266e0:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   266e4:	b113      	cbz	r3, 266ec <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   266e6:	4628      	mov	r0, r5
   266e8:	f7ff ffb6 	bl	26658 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   266ec:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   266f0:	f023 0314 	bic.w	r3, r3, #20
   266f4:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   266f8:	4628      	mov	r0, r5
   266fa:	f7f8 ffa3 	bl	1f644 <ready_thread>
	__asm__ volatile(
   266fe:	f386 8811 	msr	BASEPRI, r6
   26702:	f3bf 8f6f 	isb	sy
}
   26706:	bd70      	pop	{r4, r5, r6, pc}

00026708 <add_to_waitq_locked>:
{
   26708:	b538      	push	{r3, r4, r5, lr}
   2670a:	4604      	mov	r4, r0
   2670c:	460d      	mov	r5, r1
	unready_thread(thread);
   2670e:	f7f9 f919 	bl	1f944 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   26712:	7b63      	ldrb	r3, [r4, #13]
   26714:	f043 0302 	orr.w	r3, r3, #2
   26718:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2671a:	b17d      	cbz	r5, 2673c <add_to_waitq_locked+0x34>
   2671c:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2671e:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26720:	429d      	cmp	r5, r3
   26722:	d012      	beq.n	2674a <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26724:	b18b      	cbz	r3, 2674a <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   26726:	f994 200e 	ldrsb.w	r2, [r4, #14]
   2672a:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2672e:	4291      	cmp	r1, r2
   26730:	dd05      	ble.n	2673e <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   26732:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26734:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   26738:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2673a:	605c      	str	r4, [r3, #4]
}
   2673c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2673e:	6869      	ldr	r1, [r5, #4]
   26740:	428b      	cmp	r3, r1
   26742:	d002      	beq.n	2674a <add_to_waitq_locked+0x42>
   26744:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26746:	2b00      	cmp	r3, #0
   26748:	d1ef      	bne.n	2672a <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   2674a:	686b      	ldr	r3, [r5, #4]
   2674c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2674e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   26750:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   26752:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26754:	606c      	str	r4, [r5, #4]
}
   26756:	e7f1      	b.n	2673c <add_to_waitq_locked+0x34>

00026758 <z_unpend1_no_timeout>:
{
   26758:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2675a:	f04f 0320 	mov.w	r3, #32
   2675e:	f3ef 8511 	mrs	r5, BASEPRI
   26762:	f383 8811 	msr	BASEPRI, r3
   26766:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2676a:	f7ff ff97 	bl	2669c <z_priq_dumb_best>
		if (thread != NULL) {
   2676e:	4604      	mov	r4, r0
   26770:	b108      	cbz	r0, 26776 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   26772:	f7ff ff71 	bl	26658 <unpend_thread_no_timeout>
	__asm__ volatile(
   26776:	f385 8811 	msr	BASEPRI, r5
   2677a:	f3bf 8f6f 	isb	sy
}
   2677e:	4620      	mov	r0, r4
   26780:	bd38      	pop	{r3, r4, r5, pc}

00026782 <z_unpend_first_thread>:
{
   26782:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26784:	f04f 0320 	mov.w	r3, #32
   26788:	f3ef 8511 	mrs	r5, BASEPRI
   2678c:	f383 8811 	msr	BASEPRI, r3
   26790:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   26794:	f7ff ff82 	bl	2669c <z_priq_dumb_best>
		if (thread != NULL) {
   26798:	4604      	mov	r4, r0
   2679a:	b128      	cbz	r0, 267a8 <z_unpend_first_thread+0x26>
			unpend_thread_no_timeout(thread);
   2679c:	f7ff ff5c 	bl	26658 <unpend_thread_no_timeout>
   267a0:	f104 0018 	add.w	r0, r4, #24
   267a4:	f000 f8ad 	bl	26902 <z_abort_timeout>
	__asm__ volatile(
   267a8:	f385 8811 	msr	BASEPRI, r5
   267ac:	f3bf 8f6f 	isb	sy
}
   267b0:	4620      	mov	r0, r4
   267b2:	bd38      	pop	{r3, r4, r5, pc}

000267b4 <z_unpend_all>:
{
   267b4:	b538      	push	{r3, r4, r5, lr}
   267b6:	4605      	mov	r5, r0
	int need_sched = 0;
   267b8:	2000      	movs	r0, #0
	return list->head == list;
   267ba:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   267bc:	42a5      	cmp	r5, r4
   267be:	d000      	beq.n	267c2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   267c0:	b904      	cbnz	r4, 267c4 <z_unpend_all+0x10>
}
   267c2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   267c4:	4620      	mov	r0, r4
   267c6:	f7ff ff53 	bl	26670 <z_unpend_thread>
		z_ready_thread(thread);
   267ca:	4620      	mov	r0, r4
   267cc:	f7ff ff6c 	bl	266a8 <z_ready_thread>
		need_sched = 1;
   267d0:	2001      	movs	r0, #1
   267d2:	e7f2      	b.n	267ba <z_unpend_all+0x6>

000267d4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   267d4:	b15a      	cbz	r2, 267ee <z_impl_k_sem_init+0x1a>
   267d6:	428a      	cmp	r2, r1
   267d8:	d309      	bcc.n	267ee <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   267da:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   267de:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   267e2:	e9c0 0000 	strd	r0, r0, [r0]
   267e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   267ea:	2000      	movs	r0, #0
   267ec:	4770      	bx	lr
		return -EINVAL;
   267ee:	f06f 0015 	mvn.w	r0, #21
}
   267f2:	4770      	bx	lr

000267f4 <k_is_in_isr>:
   267f4:	f3ef 8005 	mrs	r0, IPSR
}
   267f8:	3800      	subs	r0, #0
   267fa:	bf18      	it	ne
   267fc:	2001      	movne	r0, #1
   267fe:	4770      	bx	lr

00026800 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   26800:	b108      	cbz	r0, 26806 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   26802:	f7e1 b84f 	b.w	78a4 <arch_busy_wait>
}
   26806:	4770      	bx	lr

00026808 <z_impl_k_thread_name_set>:
}
   26808:	f06f 0046 	mvn.w	r0, #70	; 0x46
   2680c:	4770      	bx	lr

0002680e <k_thread_name_get>:
}
   2680e:	2000      	movs	r0, #0
   26810:	4770      	bx	lr

00026812 <k_work_submit_to_queue>:
{
   26812:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26814:	f101 0308 	add.w	r3, r1, #8
   26818:	f3bf 8f5b 	dmb	ish
   2681c:	e853 2f00 	ldrex	r2, [r3]
   26820:	f042 0c01 	orr.w	ip, r2, #1
   26824:	e843 ce00 	strex	lr, ip, [r3]
   26828:	f1be 0f00 	cmp.w	lr, #0
   2682c:	d1f6      	bne.n	2681c <k_work_submit_to_queue+0xa>
   2682e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   26832:	07d3      	lsls	r3, r2, #31
   26834:	d403      	bmi.n	2683e <k_work_submit_to_queue+0x2c>
}
   26836:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2683a:	f7ff be8d 	b.w	26558 <k_queue_append>
}
   2683e:	f85d fb04 	ldr.w	pc, [sp], #4

00026842 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   26842:	f1a0 0110 	sub.w	r1, r0, #16
   26846:	6980      	ldr	r0, [r0, #24]
   26848:	f7ff bfe3 	b.w	26812 <k_work_submit_to_queue>

0002684c <work_cancel>:
{
   2684c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2684e:	f3bf 8f5b 	dmb	ish
   26852:	6883      	ldr	r3, [r0, #8]
   26854:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   26858:	07db      	lsls	r3, r3, #31
{
   2685a:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2685c:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   26860:	d532      	bpl.n	268c8 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   26862:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   26864:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   26866:	2100      	movs	r1, #0
   26868:	b913      	cbnz	r3, 26870 <work_cancel+0x24>
			return -EINVAL;
   2686a:	f06f 0015 	mvn.w	r0, #21
}
   2686e:	bd70      	pop	{r4, r5, r6, pc}
   26870:	429c      	cmp	r4, r3
   26872:	d124      	bne.n	268be <work_cancel+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26874:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   26876:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26878:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   2687c:	b9b1      	cbnz	r1, 268ac <work_cancel+0x60>
   2687e:	42b4      	cmp	r4, r6
	list->head = node;
   26880:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   26882:	d100      	bne.n	26886 <work_cancel+0x3a>
	list->tail = node;
   26884:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26886:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26888:	f003 0303 	and.w	r3, r3, #3
   2688c:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2688e:	2000      	movs	r0, #0
   26890:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26892:	f3bf 8f5b 	dmb	ish
   26896:	e855 3f00 	ldrex	r3, [r5]
   2689a:	f023 0301 	bic.w	r3, r3, #1
   2689e:	e845 3200 	strex	r2, r3, [r5]
   268a2:	2a00      	cmp	r2, #0
   268a4:	d1f7      	bne.n	26896 <work_cancel+0x4a>
   268a6:	f3bf 8f5b 	dmb	ish
   268aa:	e7e0      	b.n	2686e <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   268ac:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   268ae:	f003 0303 	and.w	r3, r3, #3
   268b2:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   268b4:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   268b6:	600b      	str	r3, [r1, #0]
	list->tail = node;
   268b8:	bf08      	it	eq
   268ba:	6051      	streq	r1, [r2, #4]
}
   268bc:	e7e3      	b.n	26886 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   268be:	6818      	ldr	r0, [r3, #0]
   268c0:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   268c2:	f020 0303 	bic.w	r3, r0, #3
   268c6:	e7cf      	b.n	26868 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   268c8:	3010      	adds	r0, #16
   268ca:	f000 f81a 	bl	26902 <z_abort_timeout>
		if (err) {
   268ce:	2800      	cmp	r0, #0
   268d0:	d0dd      	beq.n	2688e <work_cancel+0x42>
			return -EALREADY;
   268d2:	f06f 0044 	mvn.w	r0, #68	; 0x44
   268d6:	e7ca      	b.n	2686e <work_cancel+0x22>

000268d8 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   268d8:	b510      	push	{r4, lr}
	__asm__ volatile(
   268da:	f04f 0220 	mov.w	r2, #32
   268de:	f3ef 8411 	mrs	r4, BASEPRI
   268e2:	f382 8811 	msr	BASEPRI, r2
   268e6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   268ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
   268ec:	b133      	cbz	r3, 268fc <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   268ee:	f7ff ffad 	bl	2684c <work_cancel>
	__asm__ volatile(
   268f2:	f384 8811 	msr	BASEPRI, r4
   268f6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   268fa:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   268fc:	f06f 0015 	mvn.w	r0, #21
   26900:	e7f7      	b.n	268f2 <k_delayed_work_cancel+0x1a>

00026902 <z_abort_timeout>:
{
   26902:	b510      	push	{r4, lr}
	__asm__ volatile(
   26904:	f04f 0220 	mov.w	r2, #32
   26908:	f3ef 8411 	mrs	r4, BASEPRI
   2690c:	f382 8811 	msr	BASEPRI, r2
   26910:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   26914:	6803      	ldr	r3, [r0, #0]
   26916:	b13b      	cbz	r3, 26928 <z_abort_timeout+0x26>
			remove_timeout(to);
   26918:	f7f9 fb4e 	bl	1ffb8 <remove_timeout>
			ret = 0;
   2691c:	2000      	movs	r0, #0
	__asm__ volatile(
   2691e:	f384 8811 	msr	BASEPRI, r4
   26922:	f3bf 8f6f 	isb	sy
}
   26926:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   26928:	f06f 0015 	mvn.w	r0, #21
   2692c:	e7f7      	b.n	2691e <z_abort_timeout+0x1c>

0002692e <z_get_next_timeout_expiry>:
{
   2692e:	b510      	push	{r4, lr}
	__asm__ volatile(
   26930:	f04f 0320 	mov.w	r3, #32
   26934:	f3ef 8411 	mrs	r4, BASEPRI
   26938:	f383 8811 	msr	BASEPRI, r3
   2693c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   26940:	f7f9 fb12 	bl	1ff68 <next_timeout>
	__asm__ volatile(
   26944:	f384 8811 	msr	BASEPRI, r4
   26948:	f3bf 8f6f 	isb	sy
}
   2694c:	bd10      	pop	{r4, pc}

0002694e <z_set_timeout_expiry>:
{
   2694e:	b570      	push	{r4, r5, r6, lr}
   26950:	4604      	mov	r4, r0
   26952:	460d      	mov	r5, r1
	__asm__ volatile(
   26954:	f04f 0320 	mov.w	r3, #32
   26958:	f3ef 8611 	mrs	r6, BASEPRI
   2695c:	f383 8811 	msr	BASEPRI, r3
   26960:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   26964:	f7f9 fb00 	bl	1ff68 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   26968:	2801      	cmp	r0, #1
   2696a:	dd05      	ble.n	26978 <z_set_timeout_expiry+0x2a>
   2696c:	42a0      	cmp	r0, r4
   2696e:	db03      	blt.n	26978 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   26970:	4629      	mov	r1, r5
   26972:	4620      	mov	r0, r4
   26974:	f7e0 f838 	bl	69e8 <z_clock_set_timeout>
	__asm__ volatile(
   26978:	f386 8811 	msr	BASEPRI, r6
   2697c:	f3bf 8f6f 	isb	sy
}
   26980:	bd70      	pop	{r4, r5, r6, pc}

00026982 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   26982:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   26984:	f7f9 fc0e 	bl	201a4 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   26988:	bd08      	pop	{r3, pc}

0002698a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2698a:	f7f9 bc0b 	b.w	201a4 <z_tick_get>

0002698e <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2698e:	f1b1 3fff 	cmp.w	r1, #4294967295
   26992:	bf08      	it	eq
   26994:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   26998:	b538      	push	{r3, r4, r5, lr}
   2699a:	4605      	mov	r5, r0
   2699c:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2699e:	d01d      	beq.n	269dc <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   269a0:	ea51 0300 	orrs.w	r3, r1, r0
   269a4:	d103      	bne.n	269ae <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   269a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   269aa:	f7f9 bbfb 	b.w	201a4 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   269ae:	f06f 0301 	mvn.w	r3, #1
   269b2:	1a18      	subs	r0, r3, r0
   269b4:	f04f 33ff 	mov.w	r3, #4294967295
   269b8:	eb63 0101 	sbc.w	r1, r3, r1
   269bc:	2900      	cmp	r1, #0
   269be:	da0c      	bge.n	269da <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   269c0:	f7f9 fbf0 	bl	201a4 <z_tick_get>
   269c4:	2d01      	cmp	r5, #1
   269c6:	4622      	mov	r2, r4
   269c8:	f174 0400 	sbcs.w	r4, r4, #0
   269cc:	462b      	mov	r3, r5
   269ce:	bfbc      	itt	lt
   269d0:	2301      	movlt	r3, #1
   269d2:	2200      	movlt	r2, #0
   269d4:	1818      	adds	r0, r3, r0
   269d6:	eb41 0102 	adc.w	r1, r1, r2
}
   269da:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   269dc:	f04f 30ff 	mov.w	r0, #4294967295
   269e0:	4601      	mov	r1, r0
   269e2:	e7fa      	b.n	269da <z_timeout_end_calc+0x4c>

000269e4 <k_timer_init>:
	timer->status = 0U;
   269e4:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   269e6:	e9c0 1208 	strd	r1, r2, [r0, #32]
   269ea:	f100 0218 	add.w	r2, r0, #24
   269ee:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   269f2:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   269f6:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   269f8:	6343      	str	r3, [r0, #52]	; 0x34
}
   269fa:	4770      	bx	lr

000269fc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   269fc:	b510      	push	{r4, lr}
   269fe:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   26a00:	f7ff ff7f 	bl	26902 <z_abort_timeout>

	if (inactive) {
   26a04:	b9b0      	cbnz	r0, 26a34 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   26a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26a08:	b10b      	cbz	r3, 26a0e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   26a0a:	4620      	mov	r0, r4
   26a0c:	4798      	blx	r3
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   26a0e:	f104 0018 	add.w	r0, r4, #24
   26a12:	f7ff fea1 	bl	26758 <z_unpend1_no_timeout>

	if (pending_thread != NULL) {
   26a16:	b168      	cbz	r0, 26a34 <z_impl_k_timer_stop+0x38>
		z_ready_thread(pending_thread);
   26a18:	f7ff fe46 	bl	266a8 <z_ready_thread>
	__asm__ volatile(
   26a1c:	f04f 0320 	mov.w	r3, #32
   26a20:	f3ef 8011 	mrs	r0, BASEPRI
   26a24:	f383 8811 	msr	BASEPRI, r3
   26a28:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   26a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   26a30:	f7ff bdfc 	b.w	2662c <z_reschedule_irqlock>
   26a34:	bd10      	pop	{r4, pc}

00026a36 <k_work_submit_to_queue>:
{
   26a36:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26a38:	f101 0308 	add.w	r3, r1, #8
   26a3c:	f3bf 8f5b 	dmb	ish
   26a40:	e853 2f00 	ldrex	r2, [r3]
   26a44:	f042 0c01 	orr.w	ip, r2, #1
   26a48:	e843 ce00 	strex	lr, ip, [r3]
   26a4c:	f1be 0f00 	cmp.w	lr, #0
   26a50:	d1f6      	bne.n	26a40 <k_work_submit_to_queue+0xa>
   26a52:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   26a56:	07d3      	lsls	r3, r2, #31
   26a58:	d403      	bmi.n	26a62 <k_work_submit_to_queue+0x2c>
}
   26a5a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   26a5e:	f7ff bd7b 	b.w	26558 <k_queue_append>
}
   26a62:	f85d fb04 	ldr.w	pc, [sp], #4

00026a66 <signal_poll_event>:
{
   26a66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   26a6a:	6884      	ldr	r4, [r0, #8]
{
   26a6c:	4605      	mov	r5, r0
   26a6e:	460e      	mov	r6, r1
	if (poller) {
   26a70:	b144      	cbz	r4, 26a84 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   26a72:	7863      	ldrb	r3, [r4, #1]
   26a74:	2b01      	cmp	r3, #1
   26a76:	d136      	bne.n	26ae6 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   26a78:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   26a7c:	f013 0302 	ands.w	r3, r3, #2
   26a80:	d10a      	bne.n	26a98 <signal_poll_event+0x32>
		poller->is_polling = false;
   26a82:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   26a84:	68eb      	ldr	r3, [r5, #12]
   26a86:	f3c3 3104 	ubfx	r1, r3, #12, #5
   26a8a:	430e      	orrs	r6, r1
	event->poller = NULL;
   26a8c:	2000      	movs	r0, #0
	event->state |= state;
   26a8e:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   26a92:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   26a94:	60eb      	str	r3, [r5, #12]
	return retcode;
   26a96:	e00b      	b.n	26ab0 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   26a98:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   26a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
   26aa0:	bf08      	it	eq
   26aa2:	f112 0f02 	cmneq.w	r2, #2
   26aa6:	d105      	bne.n	26ab4 <signal_poll_event+0x4e>
		poller->is_polling = false;
   26aa8:	2300      	movs	r3, #0
   26aaa:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   26aac:	f06f 000a 	mvn.w	r0, #10
}
   26ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26ab4:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   26ab8:	4640      	mov	r0, r8
   26aba:	f7ff fdd9 	bl	26670 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   26abe:	2e08      	cmp	r6, #8
   26ac0:	bf0c      	ite	eq
   26ac2:	f06f 0303 	mvneq.w	r3, #3
   26ac6:	2300      	movne	r3, #0
   26ac8:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26aca:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   26ace:	06db      	lsls	r3, r3, #27
   26ad0:	d102      	bne.n	26ad8 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   26ad2:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   26ad6:	b10f      	cbz	r7, 26adc <signal_poll_event+0x76>
		poller->is_polling = false;
   26ad8:	2300      	movs	r3, #0
   26ada:	e7d2      	b.n	26a82 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   26adc:	4640      	mov	r0, r8
   26ade:	f7ff fde3 	bl	266a8 <z_ready_thread>
		poller->is_polling = false;
   26ae2:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   26ae4:	e7ce      	b.n	26a84 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   26ae6:	2b02      	cmp	r3, #2
   26ae8:	d1f6      	bne.n	26ad8 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   26aea:	7823      	ldrb	r3, [r4, #0]
   26aec:	2b00      	cmp	r3, #0
   26aee:	d0c9      	beq.n	26a84 <signal_poll_event+0x1e>
   26af0:	f854 7c04 	ldr.w	r7, [r4, #-4]
   26af4:	2f00      	cmp	r7, #0
   26af6:	d0f4      	beq.n	26ae2 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   26af8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   26afc:	f1a4 0910 	sub.w	r9, r4, #16
   26b00:	f104 0010 	add.w	r0, r4, #16
   26b04:	f7ff fefd 	bl	26902 <z_abort_timeout>
		twork->poll_result = 0;
   26b08:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   26b0c:	4649      	mov	r1, r9
   26b0e:	4638      	mov	r0, r7
   26b10:	f7ff ff91 	bl	26a36 <k_work_submit_to_queue>
		poller->is_polling = false;
   26b14:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   26b18:	e7b4      	b.n	26a84 <signal_poll_event+0x1e>

00026b1a <add_event>:
{
   26b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26b1c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26b1e:	e9d0 2300 	ldrd	r2, r3, [r0]
   26b22:	4290      	cmp	r0, r2
   26b24:	4604      	mov	r4, r0
   26b26:	460d      	mov	r5, r1
   26b28:	d106      	bne.n	26b38 <add_event+0x1e>
	node->prev = list->tail;
   26b2a:	6863      	ldr	r3, [r4, #4]
   26b2c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   26b2e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   26b30:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   26b32:	601d      	str	r5, [r3, #0]
	list->tail = node;
   26b34:	6065      	str	r5, [r4, #4]
}
   26b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   26b38:	2b00      	cmp	r3, #0
   26b3a:	d0f6      	beq.n	26b2a <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   26b3c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26b3e:	b100      	cbz	r0, 26b42 <add_event+0x28>
   26b40:	3864      	subs	r0, #100	; 0x64
   26b42:	b107      	cbz	r7, 26b46 <add_event+0x2c>
   26b44:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   26b46:	4639      	mov	r1, r7
   26b48:	f7ff fd57 	bl	265fa <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   26b4c:	2800      	cmp	r0, #0
   26b4e:	d1ec      	bne.n	26b2a <add_event+0x10>
	return list->head == list;
   26b50:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26b52:	42b4      	cmp	r4, r6
   26b54:	d0e9      	beq.n	26b2a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   26b56:	2e00      	cmp	r6, #0
   26b58:	d0e7      	beq.n	26b2a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   26b5a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26b5c:	b101      	cbz	r1, 26b60 <add_event+0x46>
   26b5e:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   26b60:	4638      	mov	r0, r7
   26b62:	f7ff fd4a 	bl	265fa <z_is_t1_higher_prio_than_t2>
   26b66:	b128      	cbz	r0, 26b74 <add_event+0x5a>
	node->prev = successor->prev;
   26b68:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   26b6a:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   26b6e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26b70:	6075      	str	r5, [r6, #4]
			return;
   26b72:	e7e0      	b.n	26b36 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   26b74:	6863      	ldr	r3, [r4, #4]
   26b76:	429e      	cmp	r6, r3
   26b78:	d0d7      	beq.n	26b2a <add_event+0x10>
   26b7a:	6836      	ldr	r6, [r6, #0]
   26b7c:	e7eb      	b.n	26b56 <add_event+0x3c>

00026b7e <register_events>:
{
   26b7e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   26b82:	f04f 0a00 	mov.w	sl, #0
{
   26b86:	460e      	mov	r6, r1
   26b88:	4614      	mov	r4, r2
   26b8a:	461f      	mov	r7, r3
   26b8c:	4683      	mov	fp, r0
	int events_registered = 0;
   26b8e:	4655      	mov	r5, sl
	event->poller = NULL;
   26b90:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   26b92:	45b2      	cmp	sl, r6
   26b94:	db02      	blt.n	26b9c <register_events+0x1e>
}
   26b96:	4628      	mov	r0, r5
   26b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b9c:	f04f 0320 	mov.w	r3, #32
   26ba0:	f3ef 8911 	mrs	r9, BASEPRI
   26ba4:	f383 8811 	msr	BASEPRI, r3
   26ba8:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   26bac:	f89b 200d 	ldrb.w	r2, [fp, #13]
   26bb0:	f002 020f 	and.w	r2, r2, #15
   26bb4:	2a02      	cmp	r2, #2
   26bb6:	d006      	beq.n	26bc6 <register_events+0x48>
   26bb8:	2a04      	cmp	r2, #4
   26bba:	d008      	beq.n	26bce <register_events+0x50>
   26bbc:	2a01      	cmp	r2, #1
   26bbe:	d120      	bne.n	26c02 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   26bc0:	f8db 3010 	ldr.w	r3, [fp, #16]
   26bc4:	e001      	b.n	26bca <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   26bc6:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   26bca:	689b      	ldr	r3, [r3, #8]
   26bcc:	e002      	b.n	26bd4 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   26bce:	f8db 3010 	ldr.w	r3, [fp, #16]
   26bd2:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   26bd4:	b1ab      	cbz	r3, 26c02 <register_events+0x84>
	event->state |= state;
   26bd6:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   26bda:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   26bde:	f3c3 3104 	ubfx	r1, r3, #12, #5
   26be2:	430a      	orrs	r2, r1
   26be4:	f362 3310 	bfi	r3, r2, #12, #5
   26be8:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   26bec:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   26bf0:	f389 8811 	msr	BASEPRI, r9
   26bf4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   26bf8:	f10a 0a01 	add.w	sl, sl, #1
   26bfc:	f10b 0b14 	add.w	fp, fp, #20
   26c00:	e7c7      	b.n	26b92 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   26c02:	2f00      	cmp	r7, #0
   26c04:	d1f4      	bne.n	26bf0 <register_events+0x72>
   26c06:	7823      	ldrb	r3, [r4, #0]
   26c08:	2b00      	cmp	r3, #0
   26c0a:	d0f1      	beq.n	26bf0 <register_events+0x72>
	switch (event->type) {
   26c0c:	f89b 300d 	ldrb.w	r3, [fp, #13]
   26c10:	f003 030f 	and.w	r3, r3, #15
   26c14:	2b02      	cmp	r3, #2
   26c16:	d008      	beq.n	26c2a <register_events+0xac>
   26c18:	2b04      	cmp	r3, #4
   26c1a:	d006      	beq.n	26c2a <register_events+0xac>
   26c1c:	2b01      	cmp	r3, #1
   26c1e:	d10b      	bne.n	26c38 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   26c20:	f8db 0010 	ldr.w	r0, [fp, #16]
   26c24:	4622      	mov	r2, r4
   26c26:	4659      	mov	r1, fp
   26c28:	e004      	b.n	26c34 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   26c2a:	f8db 0010 	ldr.w	r0, [fp, #16]
   26c2e:	4622      	mov	r2, r4
   26c30:	4659      	mov	r1, fp
   26c32:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   26c34:	f7ff ff71 	bl	26b1a <add_event>
	event->poller = poller;
   26c38:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   26c3c:	3501      	adds	r5, #1
   26c3e:	e7d7      	b.n	26bf0 <register_events+0x72>

00026c40 <clear_event_registrations>:
	while (num_events--) {
   26c40:	2314      	movs	r3, #20
{
   26c42:	b570      	push	{r4, r5, r6, lr}
   26c44:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   26c48:	2400      	movs	r4, #0
	while (num_events--) {
   26c4a:	b901      	cbnz	r1, 26c4e <clear_event_registrations+0xe>
}
   26c4c:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   26c4e:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   26c52:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   26c56:	f003 030f 	and.w	r3, r3, #15
   26c5a:	2b02      	cmp	r3, #2
   26c5c:	f1a0 0614 	sub.w	r6, r0, #20
   26c60:	d80a      	bhi.n	26c78 <clear_event_registrations+0x38>
   26c62:	b15b      	cbz	r3, 26c7c <clear_event_registrations+0x3c>
	return node->next != NULL;
   26c64:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   26c68:	b143      	cbz	r3, 26c7c <clear_event_registrations+0x3c>
	node->prev->next = node->next;
   26c6a:	f850 5c10 	ldr.w	r5, [r0, #-16]
   26c6e:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   26c70:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   26c72:	e940 4405 	strd	r4, r4, [r0, #-20]
}
   26c76:	e001      	b.n	26c7c <clear_event_registrations+0x3c>
	switch (event->type) {
   26c78:	2b04      	cmp	r3, #4
   26c7a:	d0f3      	beq.n	26c64 <clear_event_registrations+0x24>
   26c7c:	f382 8811 	msr	BASEPRI, r2
   26c80:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   26c84:	f04f 0320 	mov.w	r3, #32
   26c88:	f3ef 8211 	mrs	r2, BASEPRI
   26c8c:	f383 8811 	msr	BASEPRI, r3
   26c90:	f3bf 8f6f 	isb	sy
   26c94:	3901      	subs	r1, #1
   26c96:	4630      	mov	r0, r6
   26c98:	e7d7      	b.n	26c4a <clear_event_registrations+0xa>

00026c9a <k_poll_event_init>:
{
   26c9a:	b510      	push	{r4, lr}
	event->type = type;
   26c9c:	0452      	lsls	r2, r2, #17
   26c9e:	0209      	lsls	r1, r1, #8
   26ca0:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   26ca4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   26ca8:	430a      	orrs	r2, r1
   26caa:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   26cac:	2400      	movs	r4, #0
	event->type = type;
   26cae:	430a      	orrs	r2, r1
	event->obj = obj;
   26cb0:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   26cb4:	6084      	str	r4, [r0, #8]
}
   26cb6:	bd10      	pop	{r4, pc}

00026cb8 <z_handle_obj_poll_events>:
{
   26cb8:	4603      	mov	r3, r0
	return list->head == list;
   26cba:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   26cbc:	4283      	cmp	r3, r0
   26cbe:	d008      	beq.n	26cd2 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   26cc0:	e9d0 3200 	ldrd	r3, r2, [r0]
   26cc4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   26cc6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26cc8:	2300      	movs	r3, #0
	node->prev = NULL;
   26cca:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   26cce:	f7ff beca 	b.w	26a66 <signal_poll_event>
}
   26cd2:	4770      	bx	lr

00026cd4 <k_free>:
	if (ptr != NULL) {
   26cd4:	b120      	cbz	r0, 26ce0 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   26cd6:	1f01      	subs	r1, r0, #4
   26cd8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   26cdc:	f7ff bb78 	b.w	263d0 <k_heap_free>
}
   26ce0:	4770      	bx	lr

00026ce2 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   26ce2:	4770      	bx	lr
